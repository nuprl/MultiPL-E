name: HumanEval_151_double_the_difference
language: rust
results:
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum: isize = 0;\n    for x in lst {\n    \
    \    if x.is_integer() {\n            sum += x.square();\n        } else {\n \
    \           sum += x.abs();\n        }\n    }\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp17t_vo9g.rs:11:14\n   |\n11 |         if x.is_integer()\
    \ {\n   |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no\
    \ method named `square` found for type `f64` in the current scope\n  --> /tmp/tmp17t_vo9g.rs:12:22\n\
    \   |\n12 |             sum += x.square();\n   |                      ^^^^^^ help:\
    \ there is an associated function with a similar name: `sqrt`\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `isize`\n  --> /tmp/tmp17t_vo9g.rs:14:17\n   |\n\
    14 |             sum += x.abs();\n   |                 ^^ no implementation for\
    \ `isize += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst {\n        [] => 0,\n        xs => if let\
    \ Some(x) = xs.iter().find(|x| *x >= 0) {\n                let y = xs.iter().filter(|x|\
    \ *x >= 0).sum();\n                let z = x + y;\n                z as isize\n\
    \            } else {\n                0\n            }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0529]: expected an array or slice, found `Vec<f64>`\n  --> /tmp/tmp54dknhg4.rs:10:9\n\
    \   |\n9  |     match lst {\n   |           --- help: consider slicing here: `lst[..]`\n\
    10 |         [] => 0,\n   |         ^^ pattern cannot match with input type `Vec<f64>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp54dknhg4.rs:11:57\n   |\n11 |\
    \         xs => if let Some(x) = xs.iter().find(|x| *x >= 0) {\n   |         \
    \                                                ^ expected `&f64`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp54dknhg4.rs:12:52\n   |\n12 |\
    \                 let y = xs.iter().filter(|x| *x >= 0).sum();\n   |         \
    \                                           ^ expected `&f64`, found integer\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0529.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0\n    }\n   \
    \ let mut total = 0usize;\n    for num in lst {\n        if num >= 0 {\n     \
    \       total += num * num;\n        }\n    }\n    return total;\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1ls4efhj.rs:14:19\n   |\n\
    14 |         if num >= 0 {\n   |                   ^\n   |                   |\n\
    \   |                   expected `f64`, found integer\n   |                  \
    \ help: use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to\
    \ `usize`\n  --> /tmp/tmp1ls4efhj.rs:15:19\n   |\n15 |             total += num\
    \ * num;\n   |                   ^^ no implementation for `usize += f64`\n   |\n\
    \   = help: the trait `AddAssign<f64>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1ls4efhj.rs:18:12\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n18 |     return total;\n   | \
    \           ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    18 |     return total.try_into().unwrap();\n   |                 ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut total_square = 0.0\n    let mut nums_odd =\
    \ false;\n    for i in lst {\n        if i % 2 == 1 {\n            i += 1.0\n\
    \        }\n        total_square += i*i;\n        nums_odd = nums_odd || i % 2\
    \ == 0;\n    }\n    if nums_odd {\n        total_square += 1.0\n    }\n    total_square\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwa0skapl.rs:9:31\n\
    \   |\n9  |     let mut total_square = 0.0\n   |                             \
    \  ^ help: add `;` here\n10 |     let mut nums_odd = false;\n   |     --- unexpected\
    \ token\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpwa0skapl.rs:12:14\n\
    \   |\n12 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n12 |         if i % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot mod `f64` by `{integer}`\n  --> /tmp/tmpwa0skapl.rs:16:34\n   |\n16 |\
    \         nums_odd = nums_odd || i % 2 == 0;\n   |                           \
    \       ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait\
    \ `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n    \
    \         <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n      \
    \       <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n          \
    \   <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a\
    \ isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point\
    \ literal by writing it with `.0`\n   |\n16 |         nums_odd = nums_odd || i\
    \ % 2.0 == 0;\n   |                                     ++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwa0skapl.rs:21:5\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n21 |     total_s"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match (lst.iter().filter_map(|x| *x > 0)).count()\
    \ {\n        0 => 0,\n        1 => lst[0],\n        _ => {\n            let mut\
    \ sum = 0;\n            loop {\n                let mut i = 1;\n             \
    \   let mut last_i = -1;\n                for &n in lst.iter().enumerate().filter(|(_,\
    \ v)| *v > 0) {\n                    let last = i - 1;\n                    if\
    \ last >= 0 && last_i == last {\n                        break;\n            \
    \        }\n                    i += n;\n                    last_i = last;\n\
    \                }\n                sum += i * i;\n                if last_i ==\
    \ 0 {\n                    break;\n                }\n            }\n        \
    \    sum\n        }\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyy300ox8.rs:9:43\n  |\n9 |\
    \     match (lst.iter().filter_map(|x| *x > 0)).count() {\n  |               \
    \                            ^\n  |                                          \
    \ |\n  |                                           expected `f64`, found integer\n\
    \  |                                           help: use a float literal: `0.0`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpyy300ox8.rs:9:38\n  |\n9 |    \
    \ match (lst.iter().filter_map(|x| *x > 0)).count() {\n  |                   \
    \                   ^^^^^^ expected enum `Option`, found `bool`\n  |\n  = note:\
    \ expected enum `Option<_>`\n             found type `bool`\nhelp: try wrapping\
    \ the expression in `Some`\n  |\n9 |     match (lst.iter().filter_map(|x| Some(*x\
    \ > 0))).count() {\n  |                                      +++++      +\n\n\
    error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpyy300ox8.rs:11:14\n\
    \   |\n9  | /     match (lst.iter().filter_map(|x| *x > 0)).count() {\n10 | |\
    \         0 => 0,\n   | |              - this is found to be of type `isize`\n\
    11 | |         1 => lst[0],\n   | |              ^^^^^^ expected `isize`, found\
    \ `f64`\n12 | |         _ => {\n...  |\n31 | |         }\n32 | |     }\n   | |_____-\
    \ `match` arms have incompatible types\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpyy300ox8.rs:17:71\n   |\n17 |                 for &n in lst.iter().enumerate().filter(|(_,\
    \ v)| *v > 0) {\n   |                                                        \
    \               ^ expected `&f64`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpyy300ox8.rs:17:21\n   |\n17 |                 for &n in lst.iter().enumerate().filter(|(_,\
    \ v)| *v > 0) {\n   |                     ^^    ----------------------------------------------\
    \ this expression has type `Option<(usize, &f64)>`\n   |                     |\n\
    \   |                     expected tuple, found reference\n   |              \
    \       help: you can probably remove the explicit borrow: `n`\n   |\n   = note:\
    \  expected tuple `(usize, &f64)`\n           found reference `&_`\n\nerror: aborting\
    \ d"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0.0;\n    for x in lst {\n        if\
    \ x % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmps_kc9tn6.rs:11:14\n\
    \   |\n11 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n11 |         if x % 2.0 == 1 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps_kc9tn6.rs:15:5\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n15 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut total = 0;\n    for x in lst {\n        if\
    \ x.is_integer() && x >= 0 {\n            total += x;\n        } else if x.is_integer()\
    \ && !x.is_integer() {\n            total += x;\n        } else if x.is_integer()\
    \ {\n            total += x;\n        } else if x.is_integer() && x <= 0 {\n \
    \           total += -x;\n        } else {\n            total += -x.to_f64();\n\
    \        }\n    }\n    total\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmppeqyu3zx.rs:11:14\n   |\n11 |         if x.is_integer()\
    \ && x >= 0 {\n   |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppeqyu3zx.rs:11:35\n   |\n11 |         if x.is_integer()\
    \ && x >= 0 {\n   |                                   ^\n   |                \
    \                   |\n   |                                   expected `f64`,\
    \ found integer\n   |                                   help: use a float literal:\
    \ `0.0`\n\nerror[E0599]: no method named `is_integer` found for type `f64` in\
    \ the current scope\n  --> /tmp/tmppeqyu3zx.rs:13:21\n   |\n13 |         } else\
    \ if x.is_integer() && !x.is_integer() {\n   |                     ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmppeqyu3zx.rs:12:19\n   |\n12 |             total += x;\n   |   \
    \                ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmppeqyu3zx.rs:13:40\n\
    \   |\n13 |         } else if x.is_integer() && !x.is_integer() {\n   |      \
    \                                  ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `is_integer` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmppeqyu3zx.rs:15:21\n   |\n15 |         } else if x.is_integer() {\n \
    \  |                     ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmppeqyu3zx.rs:14:19\n  \
    \ |\n14 |             total += "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter().filter(|&x| x > 0.0).map(|&x| x * x).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj3ttchxa.rs:9:32\n  |\n9 |\
    \     lst.iter().filter(|&x| x > 0.0).map(|&x| x * x).sum::<isize>()\n  |    \
    \                            ^^^\n  |                                |\n  |  \
    \                              expected `&f64`, found floating-point number\n\
    \  |                                help: consider borrowing here: `&0.0`\n\n\
    error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    --> /tmp/tmpj3ttchxa.rs:9:53\n\
    \     |\n9    |     lst.iter().filter(|&x| x > 0.0).map(|&x| x * x).sum::<isize>()\n\
    \     |                                                     ^^^ the trait `Sum<f64>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n\
    \    let mut ans = 0.0;\n    let mut current_val = 0;\n\n    for value in lst\
    \ {\n        if value != current_val {\n            ans += value * (value + 1.0);\n\
    \            current_val = value;\n        }\n    }\n\n    ans\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbm8c25f1.rs:17:21\n   |\n\
    17 |         if value != current_val {\n   |                     ^^^^^^^^^^^ expected\
    \ `f64`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbm8c25f1.rs:19:27\n\
    \   |\n14 |     let mut current_val = 0;\n   |                           - expected\
    \ due to this value\n...\n19 |             current_val = value;\n   |        \
    \                   ^^^^^ expected integer, found `f64`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbm8c25f1.rs:23:5\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n23 |     ans\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n    }\n  \
    \  let mut sum = lst[0];\n    let mut i = 0;\n    while i < lst.len() {\n    \
    \    if lst[i] % 2 != 0 {\n            sum += lst[i];\n            i += 1;\n \
    \       }\n        i += 1;\n    }\n    i\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpk2bvi4jg.rs:15:19\n\
    \   |\n15 |         if lst[i] % 2 != 0 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |         if lst[i] % 2.0 != 0 {\n   |                      ++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk2bvi4jg.rs:21:5\n   |\n8  | fn\
    \ double_the_difference(lst: Vec<f64>) -> isize {\n   |                      \
    \                      ----- expected `isize` because of return type\n...\n21\
    \ |     i\n   |     ^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    21 |     i.try_into().unwrap()\n   |      ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        0\n    } else {\n   \
    \     let mut sum: f64 = 0;\n        for i in lst.iter() {\n            if i %\
    \ 2 == 1 {\n                sum += i;\n            }\n        }\n        sum\n\
    \    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk85zpan_.rs:12:28\n   |\n\
    12 |         let mut sum: f64 = 0;\n   |                      ---   ^\n   |  \
    \                    |     |\n   |                      |     expected `f64`,\
    \ found integer\n   |                      |     help: use a float literal: `0.0`\n\
    \   |                      expected due to this\n\nerror[E0277]: cannot mod `&f64`\
    \ by `{integer}`\n  --> /tmp/tmpk85zpan_.rs:14:18\n   |\n14 |             if i\
    \ % 2 == 1 {\n   |                  ^ no implementation for `&f64 % {integer}`\n\
    \   |\n   = help: the trait `Rem<{integer}>` is not implemented for `&f64`\n \
    \  = help: the following other types implement trait `Rem<Rhs>`:\n           \
    \  <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a\
    \ i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32\
    \ as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n\
    \             <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk85zpan_.rs:18:9\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n18 |         sum\n   |       \
    \  ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => 0,\n        _ => \n\
    \            match lst.len() {\n                2 => lst[0]\n                \
    \      + lst[1]\n                      - 2 * lst[0] + lst[1],\n              \
    \  1 => lst[0] - lst[0],\n                _ => \n                    match lst.len()\
    \ {\n                        2 => lst.iter().map(|x| x * x).sum(),\n         \
    \               1 => lst.iter().map(|x| x * x).sum(),\n                      \
    \  _ => \n                            match lst.len() {\n                    \
    \            2 => lst.iter().map(|x| x * x).sum(),\n                         \
    \       _ => \n                                    match lst.len() {\n       \
    \                                 2 => lst.iter().map(|x| x * x).sum(),\n    \
    \                                    _ => \n                                 \
    \           match lst.len() {\n                                              \
    \  2 => lst.iter().map(|x| x * x).sum(),\n                                   \
    \             _ => lst.iter().map(|x| x * x).sum(),\n                        \
    \                    }\n                    }\n            }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpb1dtwn8z.rs:46:3\n\
    \   |\n8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                         - unclosed delimiter\n9  |     match\
    \ lst.len() {\n   |                     - unclosed delimiter\n...\n25 |      \
    \                               match lst.len() {\n   |                      \
    \                               - this delimiter might not be properly closed...\n\
    ...\n32 |                     }\n   |                     - ...as it matches this\
    \ but it has different indentation\n...\n46 | }\n   |   ^\n\nerror: expected identifier,\
    \ found keyword `fn`\n  --> /tmp/tmpb1dtwn8z.rs:37:1\n   |\n37 | fn main() {\n\
    \   | ^^ expected identifier, found keyword\n\nerror: expected one of `=>`, `@`,\
    \ `if`, or `|`, found `main`\n  --> /tmp/tmpb1dtwn8z.rs:37:4\n   |\n37 | fn main()\
    \ {\n   |    ^^^^ expected one of `=>`, `@`, `if`, or `|`\n\nerror[E0277]: cannot\
    \ multiply `{integer}` by `f64`\n  --> /tmp/tmpb1dtwn8z.rs:15:27\n   |\n15 | \
    \                      - 2 * lst[0] + lst[1],\n   |                          \
    \ ^ no implementation for `{integer} * f64`\n   |\n   = help: the trait `Mul<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0308]: `match` arms have incompatible types\n\
    \  --> /tmp/tmpb1dtwn8z.rs:16:22\n   |\n12 |               match lst.len() {\n\
    \   |               --------------- `match` arms have incompatible types\n13 |\
    \                   2 => lst[0]\n   |  ______________________-\n14 | |       \
    \                + lst[1]\n15 | |                       - 2 * lst[0] + lst[1],\n\
    \   | |___________________________________________- this is found to be of type\
    \ `isize`\n16 |                   1 => lst[0] - lst[0],\n   "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match (lst.len() as i32) {\n        0 => 0,\n    \
    \    _ => (lst as f64).iter().filter(|x| x.is_integer()).sum() * (lst as f64).iter().filter(|x|\
    \ x.is_odd()).sum()\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around `match` scrutinee expression\n\
    \ --> /tmp/tmp9t2nr9bc.rs:9:11\n  |\n9 |     match (lst.len() as i32) {\n  | \
    \          ^                ^\n  |\n  = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n  |\n9 -     match (lst.len() as i32) {\n9 + \
    \    match lst.len() as i32 {\n  | \n\nerror[E0599]: no method named `iter` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmp9t2nr9bc.rs:11:27\n   |\n\
    11 |         _ => (lst as f64).iter().filter(|x| x.is_integer()).sum() * (lst\
    \ as f64).iter().filter(|x| x.is_odd()).sum()\n   |                          \
    \ ^^^^ method not found in `f64`\n\nerror[E0599]: no method named `iter` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmp9t2nr9bc.rs:11:82\n   |\n\
    11 |         _ => (lst as f64).iter().filter(|x| x.is_integer()).sum() * (lst\
    \ as f64).iter().filter(|x| x.is_odd()).sum()\n   |                          \
    \                                                        ^^^^ method not found\
    \ in `f64`\n\nerror[E0605]: non-primitive cast: `Vec<f64>` as `f64`\n  --> /tmp/tmp9t2nr9bc.rs:11:14\n\
    \   |\n11 |         _ => (lst as f64).iter().filter(|x| x.is_integer()).sum()\
    \ * (lst as f64).iter().filter(|x| x.is_odd()).sum()\n   |              ^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror[E0605]: non-primitive cast: `Vec<f64>`\
    \ as `f64`\n  --> /tmp/tmp9t2nr9bc.rs:11:69\n   |\n11 |         _ => (lst as f64).iter().filter(|x|\
    \ x.is_integer()).sum() * (lst as f64).iter().filter(|x| x.is_odd()).sum()\n \
    \  |                                                                     ^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror: aborting due to 4 previous errors;\
    \ 1 warning emitted\n\nSome errors have detailed explanations: E0599, E0605.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => 0,\n        1 => 0,\n\
    \        _ => {\n            let mut sum = 0;\n            for num in lst.iter()\
    \ {\n                if num > 0 {\n                    sum += num;\n         \
    \       }\n            }\n            sum * sum\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1ki8bas3.rs:15:26\n   |\n\
    15 |                 if num > 0 {\n   |                          ^ expected `&f64`,\
    \ found integer\n\nerror[E0277]: cannot add-assign `&f64` to `{integer}`\n  -->\
    \ /tmp/tmp1ki8bas3.rs:16:25\n   |\n16 |                     sum += num;\n   |\
    \                         ^^ no implementation for `{integer} += &f64`\n   |\n\
    \   = help: the trait `AddAssign<&f64>` is not implemented for `{integer}`\n \
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \        <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n         \
    \    <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128\
    \ as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as\
    \ AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sum: f64 = 0.0;\n    for i in lst.iter() {\n        if i != 0.0 {\n\
    \            let x: f64 = i;\n            if x%2 == 1 {\n                sum +=\
    \ x;\n            }\n        }\n    }\n    return sum;\n}\n\nfn main() {\n   \
    \ let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmptovna3mb.rs:14:14\n\
    \   |\n14 |         if i != 0.0 {\n   |              ^^ no implementation for\
    \ `&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptovna3mb.rs:15:26\n\
    \   |\n15 |             let x: f64 = i;\n   |                    ---   ^ expected\
    \ `f64`, found `&f64`\n   |                    |\n   |                    expected\
    \ due to this\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |     \
    \        let x: f64 = *i;\n   |                          +\n\nerror[E0277]: cannot\
    \ mod `f64` by `{integer}`\n  --> /tmp/tmptovna3mb.rs:16:17\n   |\n16 |      \
    \       if x%2 == 1 {\n   |                 ^ no implementation for `f64 % {integer}`\n\
    \   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n  \
    \ = help: the following other types implement trait `Rem<Rhs>`:\n            \
    \ <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a\
    \ i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32\
    \ as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n\
    \             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider\
    \ using a floating-point literal by writing it with `.0`\n   |\n16 |         \
    \    if x%2.0 == 1 {\n   |                   ++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmptovna3mb.rs:21:12\n   |\n8  | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n21 |     return sum;\n   |            ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter().filter(|v| v > 0).filter(|v| v % 2 == 1).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpheom4f_5.rs:9:31\n  |\n9 |\
    \     lst.iter().filter(|v| v > 0).filter(|v| v % 2 == 1).sum::<isize>()\n  |\
    \                               ^ expected `&&f64`, found integer\n\nerror[E0369]:\
    \ cannot mod `&&f64` by `{integer}`\n --> /tmp/tmpheom4f_5.rs:9:47\n  |\n9 | \
    \    lst.iter().filter(|v| v > 0).filter(|v| v % 2 == 1).sum::<isize>()\n  | \
    \                                            - ^ - {integer}\n  |            \
    \                                 |\n  |                                     \
    \        &&f64\n\nerror[E0277]: the trait bound `isize: Sum<&f64>` is not satisfied\n\
    \    --> /tmp/tmpheom4f_5.rs:9:57\n     |\n9    |     lst.iter().filter(|v| v\
    \ > 0).filter(|v| v % 2 == 1).sum::<isize>()\n     |                         \
    \                                ^^^ the trait `Sum<&f64>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let len = lst.len();\n    let mut sum = 0.0;\n   \
    \ for i in 0..len {\n        let x = lst[i];\n        if x <= 0.0 || x > 9.0 *\
    \ f64::MAX {\n            continue;\n        }\n        sum += x;\n    }\n   \
    \ sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6_58f2ib.rs:18:5\n   |\n\
    8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                \
    \                            ----- expected `isize` because of return type\n...\n\
    18 |     sum\n   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    use std::cmp::Ordering;\n    let mut result = 0;\n\
    \    for x in lst {\n        if x < 0 {\n            continue;\n        }\n  \
    \      if x.is_integer() || x.is_nan() {\n            continue;\n        }\n \
    \       if x.is_odd() {\n            result += x;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering`\n --> /tmp/tmplifoc5ra.rs:9:9\n\
    \  |\n9 |     use std::cmp::Ordering;\n  |         ^^^^^^^^^^^^^^^^^^\n  |\n \
    \ = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplifoc5ra.rs:12:16\n   |\n12 |         if x < 0 {\n   |\
    \                ^\n   |                |\n   |                expected `f64`,\
    \ found integer\n   |                help: use a float literal: `0.0`\n\nerror[E0599]:\
    \ no method named `is_integer` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmplifoc5ra.rs:15:14\n   |\n15 |         if x.is_integer() || x.is_nan()\
    \ {\n   |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no\
    \ method named `is_odd` found for type `f64` in the current scope\n  --> /tmp/tmplifoc5ra.rs:18:14\n\
    \   |\n18 |         if x.is_odd() {\n   |              ^^^^^^ method not found\
    \ in `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmplifoc5ra.rs:19:20\n\
    \   |\n19 |             result += x;\n   |                    ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\n\
    Some errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sum = 0.0; // initialize our running total\n    for n in lst {\n  \
    \      // if n is odd, add it to our running total\n        if n % 2 == 1 {\n\
    \            sum += n;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpfijnkrew.rs:15:14\n\
    \   |\n15 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfijnkrew.rs:19:12\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n19 |     return sum;\n   |   \
    \         ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() { return 0; }\n    let mut n = lst.len()\
    \ - 1;\n    while n > 0 && lst.last() % 2 == 1 {\n        n -= 1;\n    }\n   \
    \ let mut sum = 0;\n    for &n in lst {\n        if n % 2 == 1 { sum += n * n;\
    \ }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `Option<&f64>` by `{integer}`\n  --> /tmp/tmptii6adok.rs:11:31\n\
    \   |\n11 |     while n > 0 && lst.last() % 2 == 1 {\n   |                   \
    \ ---------- ^ - {integer}\n   |                    |\n   |                  \
    \  Option<&f64>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptii6adok.rs:15:9\n\
    \   |\n15 |     for &n in lst {\n   |         ^^    --- this expression has type\
    \ `Option<f64>`\n   |         |\n   |         expected `f64`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `n`\n   |\n \
    \  = note:   expected type `f64`\n           found reference `&_`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for &f in lst {\n        if\
    \ f == 0.0 {\n            continue;\n        }\n        if f < 0.0 || f > 1.0\
    \ {\n            sum += 0.0;\n            continue;\n        }\n        if f %\
    \ 2.0 != 0.0 {\n            sum += f*f;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpalyc491v.rs:10:9\n   |\n\
    10 |     for &f in lst {\n   |         ^^    --- this expression has type `Option<f64>`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `f`\n   |\n   = note:   expected\
    \ type `f64`\n           found reference `&_`\n\nerror[E0277]: cannot add-assign\
    \ `{float}` to `{integer}`\n  --> /tmp/tmpalyc491v.rs:15:17\n   |\n15 |      \
    \       sum += 0.0;\n   |                 ^^ no implementation for `{integer}\
    \ += {float}`\n   |\n   = help: the trait `AddAssign<{float}>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0\n    }\n\n \
    \   let mut sum = 0.0\n    let mut i = 1\n\n    while i < lst.len() {\n      \
    \  let val = lst[i];\n        sum += val*val;\n        if val % 2 == 1 {\n   \
    \         sum += val;\n        }\n        i += 1;\n    }\n\n    return sum\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmph612tsql.rs:13:22\n\
    \   |\n13 |     let mut sum = 0.0\n   |                      ^ help: add `;` here\n\
    14 |     let mut i = 1\n   |     --- unexpected token\n\nerror: expected `;`,\
    \ found keyword `while`\n  --> /tmp/tmph612tsql.rs:14:18\n   |\n14 |     let mut\
    \ i = 1\n   |                  ^ help: add `;` here\n15 | \n16 |     while i <\
    \ lst.len() {\n   |     ----- unexpected token\n\nerror[E0277]: cannot mod `f64`\
    \ by `{integer}`\n  --> /tmp/tmph612tsql.rs:19:16\n   |\n19 |         if val %\
    \ 2 == 1 {\n   |                ^ no implementation for `f64 % {integer}`\n  \
    \ |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   =\
    \ help: the following other types implement trait `Rem<Rhs>`:\n             <&'a\
    \ f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128\
    \ as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as\
    \ Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n\
    \             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider\
    \ using a floating-point literal by writing it with `.0`\n   |\n19 |         if\
    \ val % 2.0 == 1 {\n   |                   ++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmph612tsql.rs:25:12\n   |\n8  | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n25 |     return sum\n   |            ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst\n        .iter()\n        .filter(|x| x.is_integer())\n\
    \        .filter(|x| x.is_odd())\n        .fold(0, |acc, x| acc + x)\n}\n\nfn\
    \ main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for reference `&&f64`\
    \ in the current scope\n  --> /tmp/tmp6nykdc40.rs:11:23\n   |\n11 |         .filter(|x|\
    \ x.is_integer())\n   |                       ^^^^^^^^^^ method not found in `&&f64`\n\
    \nerror[E0599]: no method named `is_odd` found for reference `&&f64` in the current\
    \ scope\n  --> /tmp/tmp6nykdc40.rs:12:23\n   |\n12 |         .filter(|x| x.is_odd())\n\
    \   |                       ^^^^^^ method not found in `&&f64`\n\nerror[E0277]:\
    \ cannot add `&f64` to `isize`\n  --> /tmp/tmp6nykdc40.rs:13:31\n   |\n13 |  \
    \       .fold(0, |acc, x| acc + x)\n   |                               ^ no implementation\
    \ for `isize + &f64`\n   |\n   = help: the trait `Add<&f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    \n    let len = lst.len();\n    if len == 0 {\n  \
    \      return 0;\n    }\n    \n    let mut sum = 0;\n    let mut count = 0;\n\
    \    for x in lst {\n        if x.is_negative() {\n            continue;\n   \
    \     }\n        \n        // If current number is odd, add it to sum\n      \
    \  if x.is_odd() {\n            sum += x;\n            count += 1;\n        }\n\
    \    }\n    \n    // If all numbers are odd, return sum\n    if count == len {\n\
    \        return sum;\n    }\n    \n    // Otherwise, repeatedly add number to\
    \ sum\n    while count < len {\n        sum += lst[count];\n        count += 1;\n\
    \    }\n    \n    // Return sum\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "warning: use of deprecated associated function `core::f64::<impl f64>::is_negative`:\
    \ renamed to is_sign_negative\n  --> /tmp/tmpriju2mbf.rs:18:14\n   |\n18 |   \
    \      if x.is_negative() {\n   |              ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]`\
    \ on by default\n\nerror[E0599]: no method named `is_odd` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpriju2mbf.rs:23:14\n   |\n23 |         if\
    \ x.is_odd() {\n   |              ^^^^^^ method not found in `f64`\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpriju2mbf.rs:24:17\n  \
    \ |\n24 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `f64` to `isize`\n  --> /tmp/tmpriju2mbf.rs:36:13\n\
    \   |\n36 |         sum += lst[count];\n   |             ^^ no implementation\
    \ for `isize += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\n\
    Some errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for elt in lst.iter() {\n  \
    \      if elt < 0.0 || elt % 1.0 != 0.0 {\n            return 0;\n        }\n\
    \        sum += elt;\n    }\n    sum * sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi3h_mbqh.rs:11:18\n   |\n\
    11 |         if elt < 0.0 || elt % 1.0 != 0.0 {\n   |                  ^^^\n \
    \  |                  |\n   |                  expected `&f64`, found floating-point\
    \ number\n   |                  help: consider borrowing here: `&0.0`\n\nerror[E0277]:\
    \ cannot add-assign `&f64` to `{integer}`\n  --> /tmp/tmpi3h_mbqh.rs:14:13\n \
    \  |\n14 |         sum += elt;\n   |             ^^ no implementation for `{integer}\
    \ += &f64`\n   |\n   = help: the trait `AddAssign<&f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sqr_sum = 0;\n    for n in lst {\n        if n.is_odd() {\n       \
    \     sqr_sum += n.unwrap_or(0);\n        }\n    }\n    sqr_sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpyej3hjwn.rs:14:14\n   |\n14 |         if n.is_odd() {\n\
    \   |              ^^^^^^ method not found in `f64`\n\nerror[E0599]: no method\
    \ named `unwrap_or` found for type `f64` in the current scope\n  --> /tmp/tmpyej3hjwn.rs:15:26\n\
    \   |\n15 |             sqr_sum += n.unwrap_or(0);\n   |                     \
    \     ^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for value in lst {\n       \
    \ if value != 0 && !value.is_integer() {\n            sum += value * value;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8cxriau2.rs:11:21\n   |\n\
    11 |         if value != 0 && !value.is_integer() {\n   |                    \
    \ ^\n   |                     |\n   |                     expected `f64`, found\
    \ integer\n   |                     help: use a float literal: `0.0`\n\nerror[E0599]:\
    \ no method named `is_integer` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmp8cxriau2.rs:11:33\n   |\n11 |         if value != 0 && !value.is_integer()\
    \ {\n   |                                 ^^^^^^^^^^ method not found in `f64`\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp8cxriau2.rs:12:17\n\
    \   |\n12 |             sum += value * value;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut total: f64 = 0.0;\n    let mut counter: isize = 0;\n    for num in\
    \ lst {\n        if num > 0 {\n            total += num * num;\n            counter\
    \ += 1;\n        }\n    }\n    if counter % 2 == 1 {\n        total += 0.0;\n\
    \    }\n    total\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprz8mboo9.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprz8mboo9.rs:23:5\n\
    \   |\n8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n23 |     total\n   |     ^^^^^ expected `isize`, found `f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if *x\
    \ % 2 == 1 {\n            sum += *x;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpd51jchky.rs:14:15\n\
    \   |\n14 |         if *x % 2 == 1 {\n   |               ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n14 |         if *x % 2.0 == 1 {\n   |                  ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpd51jchky.rs:15:17\n  \
    \ |\n15 |             sum += *x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst {\n        [] => 0,\n        numbers if\
    \ numbers.is_empty() => 0,\n        numbers => numbers.iter().fold(0, |sum, x|\
    \ {\n            if x.is_even() {\n                sum * x + sum\n           \
    \ } else {\n                0\n            }\n        }),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0529]: expected an array or slice, found `Vec<f64>`\n  --> /tmp/tmp4jzljb8p.rs:10:9\n\
    \   |\n9  |     match lst {\n   |           --- help: consider slicing here: `lst[..]`\n\
    10 |         [] => 0,\n   |         ^^ pattern cannot match with input type `Vec<f64>`\n\
    \nerror[E0599]: no method named `is_even` found for reference `&f64` in the current\
    \ scope\n  --> /tmp/tmp4jzljb8p.rs:13:18\n   |\n13 |             if x.is_even()\
    \ {\n   |                  ^^^^^^^ method not found in `&f64`\n\nerror[E0277]:\
    \ cannot multiply `isize` by `&f64`\n  --> /tmp/tmp4jzljb8p.rs:14:21\n   |\n14\
    \ |                 sum * x + sum\n   |                     ^ no implementation\
    \ for `isize * &f64`\n   |\n   = help: the trait `Mul<&f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0529, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n.is_integer()\
    \ && n % 2 != 0 {\n            sum += n*n;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpyo75zxgn.rs:11:14\n   |\n11 |         if n.is_integer()\
    \ && n % 2 != 0 {\n   |              ^^^^^^^^^^ method not found in `f64`\n\n\
    error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpyo75zxgn.rs:11:32\n\
    \   |\n11 |         if n.is_integer() && n % 2 != 0 {\n   |                  \
    \              ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n\
    \             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n  \
    \           <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n      \
    \       <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n            \
    \ <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a\
    \ floating-point literal by writing it with `.0`\n   |\n11 |         if n.is_integer()\
    \ && n % 2.0 != 0 {\n   |                                   ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpyo75zxgn.rs:12:17\n  \
    \ |\n12 |             sum += n*n;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n\
    \    let mut odd_sum = 0.0;\n    let mut x = lst[0];\n    for y in lst {\n   \
    \     if x % 2 != 0 {\n            odd_sum += y;\n        }\n        x += y;\n\
    \    }\n    return odd_sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpgbmn35xn.rs:16:14\n\
    \   |\n16 |         if x % 2 != 0 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n16 |         if x % 2.0 != 0 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgbmn35xn.rs:21:12\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n21 |     return odd_sum;\n   |\
    \            ^^^^^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut result = 0.0;\n    for i in lst.iter() {\n\
    \        if i.is_positive() {\n            if i.is_odd() {\n                result\
    \ -= i;\n            } else {\n                result += i;\n            }\n \
    \       } else {\n            result -= i;\n        }\n    }\n    \n    return\
    \ result as isize\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "warning: use of deprecated associated function `core::f64::<impl f64>::is_positive`:\
    \ renamed to is_sign_positive\n  --> /tmp/tmpila44lgc.rs:11:14\n   |\n11 |   \
    \      if i.is_positive() {\n   |              ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]`\
    \ on by default\n\nerror[E0599]: no method named `is_odd` found for reference\
    \ `&f64` in the current scope\n  --> /tmp/tmpila44lgc.rs:12:18\n   |\n12 |   \
    \          if i.is_odd() {\n   |                  ^^^^^^ method not found in `&f64`\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.rev().iter().filter(|n| n % 2 == 0).fold(0, |sum,\
    \ el| sum + el)\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmphrwltdur.rs:9:9\n\
    \    |\n9   |       lst.rev().iter().filter(|n| n % 2 == 0).fold(0, |sum, el|\
    \ sum + el)\n    |           ^^^ `Vec<f64>` is not an iterator\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n\
    \            which is required by `&mut Vec<f64>: Iterator`\n            `[f64]:\
    \ Iterator`\n            which is required by `&mut [f64]: Iterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    use std::collections::HashSet;\n    let mut set =\
    \ HashSet::new();\n    set.insert(0);\n    set.insert(1);\n    set.insert(-1);\n\
    \    set.insert(2);\n    set.insert(-4);\n    set.insert(-1);\n    set.insert(-2);\n\
    \    set.insert(9);\n    let mut sum = 0;\n    for x in lst {\n        if x.is_integer()\
    \ {\n            if set.is_empty() {\n                sum += x;\n            }\
    \ else {\n                if x.is_odd() {\n                    sum += x;\n   \
    \                 set.insert(x);\n                } else {\n                 \
    \   set.remove(x);\n                }\n            }\n        } else {\n     \
    \       sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp8men4cqj.rs:21:14\n   |\n21 |         if x.is_integer()\
    \ {\n   |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no\
    \ method named `is_odd` found for type `f64` in the current scope\n  --> /tmp/tmp8men4cqj.rs:25:22\n\
    \   |\n25 |                 if x.is_odd() {\n   |                      ^^^^^^\
    \ method not found in `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp8men4cqj.rs:23:21\n   |\n23 |                 sum += x;\n   | \
    \                    ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmp8men4cqj.rs:26:25\n   |\n26 |\
    \                     sum += x;\n   |                         ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8men4cqj.rs:27:32\n\
    \   |\n27 |                     set.insert(x);\n   |                         \
    \       ^ expected integer, found `f64`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8men4cqj.rs:29:32\n   |\n29 |                     set.remove(x);\n \
    \  |                             "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n    }\n  \
    \  let mut sum = 0;\n    for n in lst.iter() {\n        if n < 0 {\n         \
    \   return 0;\n        }\n        if n % 2 == 0 {\n            sum += n * n;\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp881l55ay.rs:14:16\n   |\n\
    14 |         if n < 0 {\n   |                ^ expected `&f64`, found integer\n\
    \nerror[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmp881l55ay.rs:17:14\n\
    \   |\n17 |         if n % 2 == 0 {\n   |              ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp881l55ay.rs:18:17\n\
    \   |\n18 |             sum += n * n;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.len() < 1 {\n        return 0\n    }\n    //\
    \ Compute the sum of squares of all the odd numbers in the list\n    let squares\
    \ = lst.iter().filter(|x| x % 2 == 1).map(|x| x * x).sum();\n\n    // Compute\
    \ the square root of the sum\n    let sqrt = (squares + lst.len() as f64).sqrt();\n\
    \n    // Return the square root of the sum\n    sqrt as isize\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&f64` by `{integer}`\n  --> /tmp/tmpa4uqp0_s.rs:13:43\n\
    \   |\n13 |     let squares = lst.iter().filter(|x| x % 2 == 1).map(|x| x * x).sum();\n\
    \   |                                         - ^ - {integer}\n   |          \
    \                               |\n   |                                      \
    \   &&f64\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for &num in lst {\n        if\
    \ num < 0 {\n            continue;\n        }\n        if num == 0.0 {\n     \
    \       continue;\n        }\n        sum += num * num;\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5j6emfn4.rs:10:9\n   |\n\
    10 |     for &num in lst {\n   |         ^^^^    --- this expression has type\
    \ `Option<f64>`\n   |         |\n   |         expected `f64`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `num`\n   |\n\
    \   = note:   expected type `f64`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum: f64 = 0.0;\n    let mut counter: isize\
    \ = 0;\n    for elt in lst {\n        if elt > 0 {\n            sum += elt;\n\
    \            counter += 1;\n        }\n    }\n    if counter > 0 {\n        return\
    \ sum * sum / counter;\n    }\n    0.0\n}\n\nfn main() {\n    let candidate =\
    \ double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n \
    \   assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphugnmmx5.rs:12:18\n   |\n\
    12 |         if elt > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot divide `f64` by `isize`\n\
    \  --> /tmp/tmphugnmmx5.rs:18:26\n   |\n18 |         return sum * sum / counter;\n\
    \   |                          ^ no implementation for `f64 / isize`\n   |\n \
    \  = help: the trait `Div<isize>` is not implemented for `f64`\n   = help: the\
    \ following other types implement trait `Div<Rhs>`:\n             <&'a f32 as\
    \ Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n\
    \             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n    \
    \         <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n          \
    \   <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphugnmmx5.rs:20:5\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n20 |     0.0\n   |     ^^^ expected\
    \ `isize`, found floating-point number\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter().filter(|x| x.is_odd()).fold(0, |sum, el|\
    \ sum + el)\n}\n\nfn main() {\n    let candidate = double_the_difference;\n  \
    \  assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&f64` in the\
    \ current scope\n --> /tmp/tmpdlsdtnff.rs:9:29\n  |\n9 |     lst.iter().filter(|x|\
    \ x.is_odd()).fold(0, |sum, el| sum + el)\n  |                             ^^^^^^\
    \ method not found in `&&f64`\n\nerror[E0277]: cannot add `&f64` to `isize`\n\
    \ --> /tmp/tmpdlsdtnff.rs:9:61\n  |\n9 |     lst.iter().filter(|x| x.is_odd()).fold(0,\
    \ |sum, el| sum + el)\n  |                                                   \
    \          ^ no implementation for `isize + &f64`\n  |\n  = help: the trait `Add<&f64>`\
    \ is not implemented for `isize`\n  = help: the following other types implement\
    \ trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as\
    \ Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n\
    \            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n      \
    \      <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => 0,\n        1 => lst[0].clone(),\n\
    \        n => {\n            let mut sum = 0;\n            for v in lst {\n  \
    \              if v % 2 != 0 {\n                    sum += v * v;\n          \
    \      }\n            }\n            sum\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp9v_uhtm1.rs:11:14\n\
    \   |\n9  | /     match lst.len() {\n10 | |         0 => 0,\n   | |          \
    \    - this is found to be of type `isize`\n11 | |         1 => lst[0].clone(),\n\
    \   | |              ^^^^^^^^^^^^^^ expected `isize`, found `f64`\n12 | |    \
    \     n => {\n...  |\n20 | |         }\n21 | |     }\n   | |_____- `match` arms\
    \ have incompatible types\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n \
    \ --> /tmp/tmp9v_uhtm1.rs:15:22\n   |\n15 |                 if v % 2 != 0 {\n\
    \   |                      ^ no implementation for `f64 % {integer}`\n   |\n \
    \  = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Rem<Rhs>`:\n             <&'a f32\
    \ as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as\
    \ Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n\
    \             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n      \
    \       <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using\
    \ a floating-point literal by writing it with `.0`\n   |\n15 |               \
    \  if v % 2.0 != 0 {\n   |                         ++\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmp9v_uhtm1.rs:16:25\n   |\n16 |\
    \                     sum += v * v;\n   |                         ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sum = 0;\n    for i in lst {\n        if i >= 0 {\n            sum\
    \ += i;\n        }\n    }\n    let mut sq_sum = 0;\n    for i in lst {\n     \
    \   if i >= 0 {\n            sq_sum += i * i;\n        }\n    }\n    sum * sum\
    \ - sq_sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n   \
    \ assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm0r6e878.rs:14:17\n   |\n\
    14 |         if i >= 0 {\n   |                 ^\n   |                 |\n   |\
    \                 expected `f64`, found integer\n   |                 help: use\
    \ a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmpm0r6e878.rs:15:17\n   |\n15 |             sum += i;\n   |     \
    \            ^^ no implementation for `{integer} += f64`\n   |\n   = help: the\
    \ trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpm0r6e878.rs:20:17\n   |\n20 |         if i >= 0 {\n   |\
    \                 ^\n   |                 |\n   |                 expected `f64`,\
    \ found integer\n   |                 help: use a float literal: `0.0`\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpm0r6e878.rs:21:20\n  \
    \ |\n21 |             sq_sum += i * i;\n   |                    ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut total_sq = 0.0;\n\n    for num in lst {\n\
    \        if num >= 0.0 || num < 0.0 {\n            continue;\n        }\n    \
    \    total_sq += num * num;\n    }\n\n    return total_sq;\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaz01mi5e.rs:18:12\n   |\n\
    8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                \
    \                            ----- expected `isize` because of return type\n...\n\
    18 |     return total_sq;\n   |            ^^^^^^^^ expected `isize`, found `f64`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut tot = lst[0];\n    for el in lst.iter().take(2) {\n        tot += el;\n\
    \    }\n    tot\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ubb1xx_.rs:16:5\n   |\n\
    8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                \
    \                            ----- expected `isize` because of return type\n...\n\
    16 |     tot\n   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() { return 0; }\n    \n    let mut\
    \ sum: f64 = lst[0];\n    for n in lst {\n        if n % 2 == 1 {\n          \
    \  sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n \
    \   assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpr70ngcev.rs:13:14\n\
    \   |\n13 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n13 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr70ngcev.rs:17:5\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n17 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() { return 0; }\n\n    let mut sum:\
    \ isize = 0;\n    for i in lst {\n        if i % 2 != 0 {\n            sum +=\
    \ i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp26hbvjy6.rs:13:14\n\
    \   |\n13 |         if i % 2 != 0 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n13 |         if i % 2.0 != 0 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `isize`\n  --> /tmp/tmp26hbvjy6.rs:14:17\n   |\n\
    14 |             sum += i;\n   |                 ^^ no implementation for `isize\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match (lst.len() as u32, lst.iter().filter(|&x| x\
    \ >= 0.0).filter(|&x| x.is_integer()).count()) {\n        (0,_) => 0,\n      \
    \  (1,_) => 0,\n        (2,_) => 0,\n        (3,_) => 0,\n        (4,_) => 0,\n\
    \        (5,_) => 0,\n        (6,_) => 0,\n        (7,_) => 0,\n        (8,_)\
    \ => 0,\n        (9,_) => 0,\n        _ => return 0,\n    }\n    let mut s = 0.0\n\
    \    for &x in lst.iter() {\n        if x.is_integer() {\n            s += x*x\n\
    \        } else if x >= 0.0 {\n            s -= x*x\n        }\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpou73iygb.rs:22:20\n\
    \   |\n22 |     let mut s = 0.0\n   |                    ^ help: add `;` here\n\
    23 |     for &x in lst.iter() {\n   |     --- unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpou73iygb.rs:9:58\n  |\n9 |     match (lst.len()\
    \ as u32, lst.iter().filter(|&x| x >= 0.0).filter(|&x| x.is_integer()).count())\
    \ {\n  |                                                          ^^^\n  |   \
    \                                                       |\n  |               \
    \                                           expected `&f64`, found floating-point\
    \ number\n  |                                                          help: consider\
    \ borrowing here: `&0.0`\n\nerror[E0599]: no method named `is_integer` found for\
    \ reference `&f64` in the current scope\n --> /tmp/tmpou73iygb.rs:9:77\n  |\n\
    9 |     match (lst.len() as u32, lst.iter().filter(|&x| x >= 0.0).filter(|&x|\
    \ x.is_integer()).count()) {\n  |                                            \
    \                                 ^^^^^^^^^^ method not found in `&f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpou73iygb.rs:9:5\n   |\n9  | /     match (lst.len()\
    \ as u32, lst.iter().filter(|&x| x >= 0.0).filter(|&x| x.is_integer()).count())\
    \ {\n10 | |         (0,_) => 0,\n11 | |         (1,_) => 0,\n12 | |         (2,_)\
    \ => 0,\n...  |\n20 | |         _ => return 0,\n21 | |     }\n   | |     ^- help:\
    \ consider using a semicolon here\n   | |_____|\n   |       expected `()`, found\
    \ integer\n\nerror[E0599]: no method named `is_integer` found for type `f64` in\
    \ the current scope\n  --> /tmp/tmpou73iygb.rs:24:14\n   |\n24 |         if x.is_integer()\
    \ {\n   |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpou73iygb.rs:30:5\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n30 |     s\n   |     ^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 6 previous errors\n\nSome errors\
    \ have detailed explanations: E0308,"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0\n    }\n\n \
    \   let mut result = 0;\n    let mut cur = std::iter::repeat(0.).take(4);\n\n\
    \    for num in lst.iter().filter(|&x| x > 0) as std::iter::Iterator<Item = f64>\
    \ {\n        let tmp = num;\n\n        while tmp.abs() > 1e-6 {\n            let\
    \ tmp = tmp / 2.;\n            result += tmp * tmp;\n        }\n\n        cur\
    \ = cur.push(num);\n    }\n\n    while cur.next() != Some(0) {\n        let tmp\
    \ = cur.next().unwrap();\n        result += tmp * tmp;\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "warning: trait objects without an explicit `dyn` are deprecated\n  -->\
    \ /tmp/tmp_juq_bcb.rs:16:49\n   |\n16 |     for num in lst.iter().filter(|&x|\
    \ x > 0) as std::iter::Iterator<Item = f64> {\n   |                          \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(bare_trait_objects)]`\
    \ on by default\n   = warning: this is accepted in the current edition (Rust 2015)\
    \ but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    help: use `dyn`\n   |\n16 -     for num in lst.iter().filter(|&x| x > 0) as std::iter::Iterator<Item\
    \ = f64> {\n16 +     for num in lst.iter().filter(|&x| x > 0) as dyn std::iter::Iterator<Item\
    \ = f64> {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_juq_bcb.rs:16:43\n\
    \   |\n16 |     for num in lst.iter().filter(|&x| x > 0) as std::iter::Iterator<Item\
    \ = f64> {\n   |                                           ^ expected `&f64`,\
    \ found integer\n\nerror[E0620]: cast to unsized type: `Filter<std::slice::Iter<'_,\
    \ f64>, [closure@/tmp/tmp_juq_bcb.rs:16:34: 16:44]>` as `dyn Iterator<Item = f64>`\n\
    \  --> /tmp/tmp_juq_bcb.rs:16:16\n   |\n16 |     for num in lst.iter().filter(|&x|\
    \ x > 0) as std::iter::Iterator<Item = f64> {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\nhelp: consider using a box or reference as appropriate\n  --> /tmp/tmp_juq_bcb.rs:16:16\n\
    \   |\n16 |     for num in lst.iter().filter(|&x| x > 0) as std::iter::Iterator<Item\
    \ = f64> {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0599]:\
    \ no method named `push` found for struct `std::iter::Take` in the current scope\n\
    \  --> /tmp/tmp_juq_bcb.rs:24:19\n   |\n24 |         cur = cur.push(num);\n  \
    \ |                   ^^^^ method not found in `std::iter::Take<std::iter::Repeat<{float}>>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_juq_bcb.rs:27:30\n   |\n27 |\
    \     while cur.next() != Some(0) {\n   |                              ^ expected\
    \ floating-point number, found integer\n\nerror"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => 0,\n        _ => lst.iter().map(|x|\
    \ x * x).sum() - lst.iter().filter(|x| x.is_odd()).sum(),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&f64` in the\
    \ current scope\n  --> /tmp/tmphmjhr01t.rs:11:72\n   |\n11 |         _ => lst.iter().map(|x|\
    \ x * x).sum() - lst.iter().filter(|x| x.is_odd()).sum(),\n   |              \
    \                                                          ^^^^^^ method not found\
    \ in `&&f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sum = 0;\n    for n in lst.iter() {\n        if n >= 0.0 {\n      \
    \      sum += n*n;\n        }\n        else {\n            sum += n*n + 0.0;\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo5707tcq.rs:14:17\n   |\n\
    14 |         if n >= 0.0 {\n   |                 ^^^\n   |                 |\n\
    \   |                 expected `&f64`, found floating-point number\n   |     \
    \            help: consider borrowing here: `&0.0`\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n  --> /tmp/tmpo5707tcq.rs:15:17\n   |\n15 |          \
    \   sum += n*n;\n   |                 ^^ no implementation for `{integer} += f64`\n\
    \   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpo5707tcq.rs:18:17\n\
    \   |\n18 |             sum += n*n + 0.0;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut result = 0.0;\n    let mut x = lst.iter().filter(|x| x > 0.0).count();\n\
    \    let mut y = lst.iter().filter(|x| x < 0.0).count();\n    if x == 0.0 || y\
    \ == 0.0 {\n        return result;\n    }\n    let mut z = 0.0;\n    for i in\
    \ 0..x {\n        z = z + i;\n    }\n    for i in 0..y {\n        z = z + i;\n\
    \    }\n    result = z + x;\n    for i in 0..lst.len() - x {\n        result =\
    \ result + lst[i];\n    }\n    for i in 0..lst.len() - y {\n        result = result\
    \ + lst[i];\n    }\n    return result;\n}\n\nfn main() {\n    let candidate =\
    \ double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n \
    \   assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkanjgdu4.rs:13:43\n   |\n\
    13 |     let mut x = lst.iter().filter(|x| x > 0.0).count();\n   |           \
    \                                ^^^ expected `&&f64`, found floating-point number\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkanjgdu4.rs:14:43\n   |\n14 |\
    \     let mut y = lst.iter().filter(|x| x < 0.0).count();\n   |              \
    \                             ^^^ expected `&&f64`, found floating-point number\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkanjgdu4.rs:15:13\n   |\n15 |\
    \     if x == 0.0 || y == 0.0 {\n   |             ^^^ expected `usize`, found\
    \ floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkanjgdu4.rs:15:25\n\
    \   |\n15 |     if x == 0.0 || y == 0.0 {\n   |                         ^^^ expected\
    \ `usize`, found floating-point number\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpkanjgdu4.rs:16:16\n   |\n8  | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n16 |         return result;\n   |             \
    \   ^^^^^^ expected `isize`, found floating-point number\n\nerror[E0277]: cannot\
    \ add `usize` to `{float}`\n  --> /tmp/tmpkanjgdu4.rs:20:15\n   |\n20 |      \
    \   z = z + i;\n   |               ^ no implementation for `{float} + usize`\n\
    \   |\n   = help: the trait `Add<usize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Add<Rhs>`:\n            \
    \ <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `usize` to `{float}`\n  --> /tmp/tmpkanjgdu4.rs:23:15\n   |\n23 |\
    \         z = z + i;\n   |               ^ no implementation for `{float} + usize`\n\
    \   |\n   = help: the trait `Add<usize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Add<Rhs"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n\
    \ > 0 && n % 2 == 1 {\n            sum += n * n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplyptzw6z.rs:11:16\n   |\n\
    11 |         if n > 0 && n % 2 == 1 {\n   |                ^\n   |           \
    \     |\n   |                expected `f64`, found integer\n   |             \
    \   help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmplyptzw6z.rs:11:23\n   |\n11 |         if n > 0 && n % 2 == 1 {\n\
    \   |                       ^ no implementation for `f64 % {integer}`\n   |\n\
    \   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Rem<Rhs>`:\n             <&'a f32\
    \ as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as\
    \ Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n\
    \             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n      \
    \       <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using\
    \ a floating-point literal by writing it with `.0`\n   |\n11 |         if n >\
    \ 0 && n % 2.0 == 1 {\n   |                          ++\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmplyptzw6z.rs:12:17\n   |\n12 |\
    \             sum += n * n;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum: f64 = 0.0;\n    let len = lst.len();\n\
    \    for &num in lst.iter() {\n        if num > 0 && !(num & 1.0) {\n        \
    \    sum += num;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpysgv_ki2.rs:12:18\n   |\n\
    12 |         if num > 0 && !(num & 1.0) {\n   |                  ^\n   |     \
    \             |\n   |                  expected `f64`, found integer\n   |   \
    \               help: use a float literal: `0.0`\n\nerror[E0369]: no implementation\
    \ for `f64 & {float}`\n  --> /tmp/tmpysgv_ki2.rs:12:29\n   |\n12 |         if\
    \ num > 0 && !(num & 1.0) {\n   |                         --- ^ --- {float}\n\
    \   |                         |\n   |                         f64\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpysgv_ki2.rs:16:12\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n16 |     return sum;\n   |   \
    \         ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ i % 2 == 1 {\n            sum += *i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpydqqsqgu.rs:10:9\n   |\n\
    10 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<f64>`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `f64`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst\n        .iter()\n        .filter(|x| x.is_integer()\
    \ && x.is_odd())\n        .map(|x| x * x)\n        .sum()\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for reference `&&f64`\
    \ in the current scope\n  --> /tmp/tmpyi87g0sl.rs:11:23\n   |\n11 |         .filter(|x|\
    \ x.is_integer() && x.is_odd())\n   |                       ^^^^^^^^^^ method\
    \ not found in `&&f64`\n\nerror[E0599]: no method named `is_odd` found for reference\
    \ `&&f64` in the current scope\n  --> /tmp/tmpyi87g0sl.rs:11:41\n   |\n11 |  \
    \       .filter(|x| x.is_integer() && x.is_odd())\n   |                      \
    \                   ^^^^^^ method not found in `&&f64`\n\nerror[E0277]: the trait\
    \ bound `isize: Sum<f64>` is not satisfied\n    --> /tmp/tmpyi87g0sl.rs:13:10\n\
    \     |\n13   |         .sum()\n     |          ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst {\n        vec![0.0; 0] | vec![0.0; 1] |\
    \ vec![0.0; 2] | vec![0.0; 3] => 0\n        _ => lst.iter().filter(|&x| x.is_integer()).map(|x|\
    \ x*x).sum::<isize>(),\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found reserved\
    \ identifier `_`\n  --> /tmp/tmpbng3dtli.rs:11:9\n   |\n10 |         vec![0.0;\
    \ 0] | vec![0.0; 1] | vec![0.0; 2] | vec![0.0; 3] => 0\n   |                 \
    \                                                  --  - expected one of `,`,\
    \ `.`, `?`, `}`, or an operator\n   |                                        \
    \                           |\n   |                                          \
    \                         while parsing the `match` arm starting here\n11 |  \
    \       _ => lst.iter().filter(|&x| x.is_integer()).map(|x| x*x).sum::<isize>(),\n\
    \   |         ^ unexpected token\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sum: f64 = 0.0;\n    for i in lst {\n        if i % 2 == 1 {\n    \
    \        sum += i as f64;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpcsx_hffl.rs:14:14\n\
    \   |\n14 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n14 |         if i % 2.0 == 1 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcsx_hffl.rs:18:5\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n18 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => 0,\n        _ => lst.iter().map(|x|\
    \ x * x).sum() - lst.iter().filter(|x| x > 0).sum(),\n    }\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr_ptuu8u.rs:11:74\n   |\n\
    11 |         _ => lst.iter().map(|x| x * x).sum() - lst.iter().filter(|x| x >\
    \ 0).sum(),\n   |                                                            \
    \              ^ expected `&&f64`, found integer\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    // Write your code here.\n    \n    // Solution 1\
    \ using iter and filter\n    let n = lst.iter().filter(|x| x.is_odd()).count();\n\
    \    let mut s = 0.0;\n    for &x in lst {\n        s += x * x;\n    }\n    \n\
    \    // Solution 2 using fold\n    let n = lst.iter().fold(0.0, |acc, x| {\n \
    \       acc + (x * x);\n    });\n    \n    // Solution 3 using filter + sum\n\
    \    let n = lst.iter().filter(|x| x.is_odd()).sum();\n    \n    return n;\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&f64` in the\
    \ current scope\n  --> /tmp/tmpaehgv4k7.rs:12:37\n   |\n12 |     let n = lst.iter().filter(|x|\
    \ x.is_odd()).count();\n   |                                     ^^^^^^ method\
    \ not found in `&&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaehgv4k7.rs:14:9\n\
    \   |\n14 |     for &x in lst {\n   |         ^^    --- this expression has type\
    \ `Option<f64>`\n   |         |\n   |         expected `f64`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `x`\n   |\n \
    \  = note:   expected type `f64`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaehgv4k7.rs:19:43\n   |\n19 |       let n =\
    \ lst.iter().fold(0.0, |acc, x| {\n   |  ___________________________________________^\n\
    20 | |         acc + (x * x);\n   | |                      - help: remove this\
    \ semicolon\n21 | |     });\n   | |_____^ expected floating-point number, found\
    \ `()`\n   |\n   = note:   expected type `f64`\n           found unit type `()`\n\
    \nerror[E0599]: no method named `is_odd` found for reference `&&f64` in the current\
    \ scope\n  --> /tmp/tmpaehgv4k7.rs:24:37\n   |\n24 |     let n = lst.iter().filter(|x|\
    \ x.is_odd()).sum();\n   |                                     ^^^^^^ method not\
    \ found in `&&f64`\n\nerror[E0277]: the trait bound `isize: Sum<&f64>` is not\
    \ satisfied\n    --> /tmp/tmpaehgv4k7.rs:24:47\n     |\n24   |     let n = lst.iter().filter(|x|\
    \ x.is_odd()).sum();\n     |                                               ^^^\
    \ the trait `Sum<&f64>` is not implemented for `isize`\n     |\n     = help: the\
    \ following other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a\
    \ f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n \
    \              <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n        \
    \       <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16\
    \ as Sum>\n             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanati"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut total = 0;\n    for n in lst {\n        if\
    \ n == 0 {\n            continue;\n        }\n        let rem = n % 2;\n     \
    \   if rem == 1 {\n            total += n;\n        }\n    }\n    total\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6ln3h276.rs:11:17\n   |\n\
    11 |         if n == 0 {\n   |                 ^\n   |                 |\n   |\
    \                 expected `f64`, found integer\n   |                 help: use\
    \ a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  -->\
    \ /tmp/tmp6ln3h276.rs:14:21\n   |\n14 |         let rem = n % 2;\n   |       \
    \              ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n\
    \             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n  \
    \           <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n      \
    \       <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n            \
    \ <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a\
    \ floating-point literal by writing it with `.0`\n   |\n14 |         let rem =\
    \ n % 2.0;\n   |                        ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n  --> /tmp/tmp6ln3h276.rs:16:19\n   |\n16 |          \
    \   total += n;\n   |                   ^^ no implementation for `{integer} +=\
    \ f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sum = 0.;\n    for i in lst {\n        if i.is_negative() || !i.is_integer()\
    \ {\n            continue;\n        }\n        sum += i;\n    }\n    sum * sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "warning: use of deprecated associated function `core::f64::<impl f64>::is_negative`:\
    \ renamed to is_sign_negative\n  --> /tmp/tmpf3uh8_0h.rs:14:14\n   |\n14 |   \
    \      if i.is_negative() || !i.is_integer() {\n   |              ^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(deprecated)]` on by default\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpf3uh8_0h.rs:14:34\n\
    \   |\n14 |         if i.is_negative() || !i.is_integer() {\n   |            \
    \                      ^^^^^^^^^^ method not found in `f64`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf3uh8_0h.rs:19:5\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n19 |     sum * sum\n   |     ^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors; 1\
    \ warning emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut running_sum = 0;\n    for n in lst {\n        if n % 2 != 0 {\n   \
    \         running_sum += n;\n        }\n    }\n    running_sum * running_sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpy86df51v.rs:14:14\n\
    \   |\n14 |         if n % 2 != 0 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n14 |         if n % 2.0 != 0 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpy86df51v.rs:15:25\n  \
    \ |\n15 |             running_sum += n;\n   |                         ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut total: f64 = 0.0;\n    for number in lst {\n\
    \        if number.is_negative() {\n            continue;\n        }\n       \
    \ if number.is_integer() {\n            total = total + number;\n        } else\
    \ {\n            total = total + (number * number);\n        }\n    }\n    return\
    \ total;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "warning: use of deprecated associated function `core::f64::<impl f64>::is_negative`:\
    \ renamed to is_sign_negative\n  --> /tmp/tmphp_t0dwq.rs:11:19\n   |\n11 |   \
    \      if number.is_negative() {\n   |                   ^^^^^^^^^^^\n   |\n \
    \  = note: `#[warn(deprecated)]` on by default\n\nerror[E0599]: no method named\
    \ `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmphp_t0dwq.rs:14:19\n\
    \   |\n14 |         if number.is_integer() {\n   |                   ^^^^^^^^^^\
    \ method not found in `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphp_t0dwq.rs:20:12\n\
    \   |\n8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n20 |     return total;\n   |            ^^^^^ expected `isize`, found `f64`\n\
    \nerror: aborting due to 2 previous errors; 1 warning emitted\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sum = 0;\n    let mut i = 0;\n    while i < lst.len() {\n        if\
    \ lst[i] % 2 == 1 {\n            sum += lst[i];\n            i += 1;\n       \
    \ } else {\n            sum += lst[i] - lst[i & 1] + lst.len() - 1 - i;\n    \
    \    }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpcbl_fn31.rs:15:19\n\
    \   |\n15 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |         if lst[i] % 2.0 == 1 {\n   |                      ++\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpcbl_fn31.rs:16:17\n\
    \   |\n16 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add `usize` to `f64`\n  --> /tmp/tmpcbl_fn31.rs:19:40\n\
    \   |\n19 |             sum += lst[i] - lst[i & 1] + lst.len() - 1 - i;\n   |\
    \                                        ^ no implementation for `f64 + usize`\n\
    \   |\n   = help: the trait `Add<usize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sum = 0;\n    for x in lst {\n        if x.is_negative() {\n      \
    \      continue;\n        }\n        sum += x;\n    }\n    sum * sum\n}\n\nfn\
    \ main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "warning: use of deprecated associated function `core::f64::<impl f64>::is_negative`:\
    \ renamed to is_sign_negative\n  --> /tmp/tmp5i7alotv.rs:14:14\n   |\n14 |   \
    \      if x.is_negative() {\n   |              ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]`\
    \ on by default\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  -->\
    \ /tmp/tmp5i7alotv.rs:17:13\n   |\n17 |         sum += x;\n   |             ^^\
    \ no implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n    }\n  \
    \  let mut sum = 0.0;\n    for i in lst {\n        if i % 2 == 1 {\n         \
    \   sum += *i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmprtq6uts4.rs:14:14\n\
    \   |\n14 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n14 |         if i % 2.0 == 1 {\n   |                 ++\n\nerror[E0614]:\
    \ type `f64` cannot be dereferenced\n  --> /tmp/tmprtq6uts4.rs:15:20\n   |\n15\
    \ |             sum += *i;\n   |                    ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprtq6uts4.rs:18:5\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n18 |     sum\n   |     ^^^ expected\
    \ `isize`, found floating-point number\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter().filter(|&x| x != 0).filter(|&x| x.is_integer()).fold(0,\
    \ |acc, x| acc * x + x)\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&f64` with `{integer}`\n --> /tmp/tmputggbscw.rs:9:30\n\
    \  |\n9 |     lst.iter().filter(|&x| x != 0).filter(|&x| x.is_integer()).fold(0,\
    \ |acc, x| acc * x + x)\n  |                              ^^ no implementation\
    \ for `&f64 == {integer}`\n  |\n  = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&f64`\n  = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n            f32\n            f64\n            i128\n    \
    \        i16\n            i32\n            i64\n            i8\n            isize\n\
    \          and 6 others\n\nerror[E0308]: mismatched types\n --> /tmp/tmputggbscw.rs:9:33\n\
    \  |\n9 |     lst.iter().filter(|&x| x != 0).filter(|&x| x.is_integer()).fold(0,\
    \ |acc, x| acc * x + x)\n  |                                 ^\n  |          \
    \                       |\n  |                                 expected `f64`,\
    \ found integer\n  |                                 help: use a float literal:\
    \ `0.0`\n\nerror[E0599]: no method named `is_integer` found for reference `&f64`\
    \ in the current scope\n --> /tmp/tmputggbscw.rs:9:50\n  |\n9 |     lst.iter().filter(|&x|\
    \ x != 0).filter(|&x| x.is_integer()).fold(0, |acc, x| acc * x + x)\n  |     \
    \                                             ^^^^^^^^^^ method not found in `&f64`\n\
    \nerror[E0277]: cannot multiply `isize` by `&f64`\n --> /tmp/tmputggbscw.rs:9:85\n\
    \  |\n9 |     lst.iter().filter(|&x| x != 0).filter(|&x| x.is_integer()).fold(0,\
    \ |acc, x| acc * x + x)\n  |                                                 \
    \                                    ^ no implementation for `isize * &f64`\n\
    \  |\n  = help: the trait `Mul<&f64>` is not implemented for `isize`\n  = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n            <&'a f32\
    \ as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n            <&'a i128 as Mul<i128>>\n\
    \            <&'a i16 as Mul<i16>>\n            <&'a i32 as Mul<i32>>\n      \
    \      <&'a i64 as Mul<i64>>\n            <&'a i8 as Mul<i8>>\n            <&'a\
    \ isize as Mul<isize>>\n          and 49 others\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have d"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => 0,\n        1 => lst[0].abs(),\n\
    \        _ => lst.iter().fold(0, |acc, x| acc + x.powf(2).floor())\n    }\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp5uilpkjn.rs:11:14\n\
    \   |\n9  | /     match lst.len() {\n10 | |         0 => 0,\n   | |          \
    \    - this is found to be of type `isize`\n11 | |         1 => lst[0].abs(),\n\
    \   | |              ^^^^^^^^^^^^ expected `isize`, found `f64`\n12 | |      \
    \   _ => lst.iter().fold(0, |acc, x| acc + x.powf(2).floor())\n13 | |     }\n\
    \   | |_____- `match` arms have incompatible types\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5uilpkjn.rs:12:55\n   |\n12 |         _ => lst.iter().fold(0,\
    \ |acc, x| acc + x.powf(2).floor())\n   |                                    \
    \                   ^\n   |                                                  \
    \     |\n   |                                                       expected `f64`,\
    \ found integer\n   |                                                       help:\
    \ use a float literal: `2.0`\n\nerror[E0277]: cannot add `f64` to `isize`\n  -->\
    \ /tmp/tmp5uilpkjn.rs:12:46\n   |\n12 |         _ => lst.iter().fold(0, |acc,\
    \ x| acc + x.powf(2).floor())\n   |                                          \
    \    ^ no implementation for `isize + f64`\n   |\n   = help: the trait `Add<f64>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter().filter(|&i| i % 2 == 1).sum()\n}\n\nfn\
    \ main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n --> /tmp/tmpz680pfrl.rs:9:30\n\
    \  |\n9 |     lst.iter().filter(|&i| i % 2 == 1).sum()\n  |                  \
    \            ^ no implementation for `&f64 % {integer}`\n  |\n  = help: the trait\
    \ `Rem<{integer}>` is not implemented for `&f64`\n  = help: the following other\
    \ types implement trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n     \
    \       <&'a f64 as Rem<f64>>\n            <&'a i128 as Rem<i128>>\n         \
    \   <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n            <&'a\
    \ i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n            <&'a isize as\
    \ Rem<isize>>\n          and 54 others\n\nerror[E0277]: the trait bound `isize:\
    \ Sum<&f64>` is not satisfied\n    --> /tmp/tmpz680pfrl.rs:9:40\n     |\n9   \
    \ |     lst.iter().filter(|&i| i % 2 == 1).sum()\n     |                     \
    \                   ^^^ the trait `Sum<&f64>` is not implemented for `isize`\n\
    \     |\n     = help: the following other types implement trait `Sum<A>`:\n  \
    \             <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n           \
    \    <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() { return 0; }\n    let mut total\
    \ = 0;\n    let mut index = 0;\n    while index < lst.len() {\n        total +=\
    \ if index < lst.len() - 1 { lst[index] } else { 0 };\n        index += 1;\n \
    \   }\n    if total % 2 != 0 {\n        total += 1;\n    }\n    total\n}\n\nfn\
    \ main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpn6sqa6kl.rs:13:65\n\
    \   |\n13 |         total += if index < lst.len() - 1 { lst[index] } else { 0\
    \ };\n   |                                             ----------          ^\n\
    \   |                                             |                   |\n   |\
    \                                             |                   expected `f64`,\
    \ found integer\n   |                                             |          \
    \         help: use a float literal: `0.0`\n   |                             \
    \                expected because of this\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    use std::iter;\n    iter::zip(lst.into_iter(), lst.into_iter()).filter(|&(a,\
    \ b)| *b > 0.0).map(|&(x, y)| x*x + y*y).sum()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmpd2tgycej.rs:10:66\n\
    \   |\n10 |     iter::zip(lst.into_iter(), lst.into_iter()).filter(|&(a, b)| *b\
    \ > 0.0).map(|&(x, y)| x*x + y*y).sum()\n   |                                \
    \                                  ^^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpd2tgycej.rs:10:81\n   |\n10 |     iter::zip(lst.into_iter(), lst.into_iter()).filter(|&(a,\
    \ b)| *b > 0.0).map(|&(x, y)| x*x + y*y).sum()\n   |                         \
    \                                                        ^^^^^^-\n   |       \
    \                                                                          | \
    \    |\n   |                                                                 \
    \                |     expected due to this\n   |                            \
    \                                                     expected tuple, found reference\n\
    \   |\n   = note:  expected tuple `(f64, f64)`\n           found reference `&_`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for elt in lst.iter() {\n  \
    \      if elt < 0.0 || elt % 1.0 != 0.0 {\n            return 0;\n        }\n\
    \        sum += elt as isize;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc6ftthy8.rs:11:18\n   |\n\
    11 |         if elt < 0.0 || elt % 1.0 != 0.0 {\n   |                  ^^^\n \
    \  |                  |\n   |                  expected `&f64`, found floating-point\
    \ number\n   |                  help: consider borrowing here: `&0.0`\n\nerror[E0606]:\
    \ casting `&f64` as `isize` is invalid\n  --> /tmp/tmpc6ftthy8.rs:14:16\n   |\n\
    14 |         sum += elt as isize;\n   |                ---^^^^^^^^^\n   |    \
    \            |\n   |                cannot cast `&f64` as `isize`\n   |      \
    \          help: dereference the expression: `*elt`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0606.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    \n    let mut result = 0.0;\n    \n    for i in lst.iter()\
    \ {\n        if i % 2 == 1 {\n            result += i;\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmpjn2osuih.rs:13:14\n\
    \   |\n13 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjn2osuih.rs:17:5\n\
    \   |\n8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n17 |     result\n   |     ^^^^^^ expected `isize`, found `f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut nums = lst.clone();\n    let mut total = 0;\n\
    \    while nums.len() > 0 {\n        let cur = nums.remove(0);\n        if cur\
    \ > 0 {\n            total += cur;\n        }\n        total += cur * cur;\n \
    \   }\n    total\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpphps4hps.rs:13:18\n   |\n\
    13 |         if cur > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmpphps4hps.rs:14:19\n   |\n14 |             total += cur;\n   | \
    \                  ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpphps4hps.rs:16:15\n   |\n16 |\
    \         total += cur * cur;\n   |               ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x.is_integer()\
    \  && x.is_positive() {\n            sum += x;\n        }\n        else if x.is_integer()\
    \ && x.is_negative() {\n            sum += -x;\n        }\n    }\n    sum * sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp1iznyv73.rs:11:14\n   |\n11 |         if x.is_integer()\
    \  && x.is_positive() {\n   |              ^^^^^^^^^^ method not found in `f64`\n\
    \nwarning: use of deprecated associated function `core::f64::<impl f64>::is_positive`:\
    \ renamed to is_sign_positive\n  --> /tmp/tmp1iznyv73.rs:11:33\n   |\n11 |   \
    \      if x.is_integer()  && x.is_positive() {\n   |                         \
    \        ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]` on by default\n\n\
    error[E0599]: no method named `is_integer` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmp1iznyv73.rs:14:19\n   |\n14 |         else if x.is_integer()\
    \ && x.is_negative() {\n   |                   ^^^^^^^^^^ method not found in\
    \ `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp1iznyv73.rs:12:17\n\
    \   |\n12 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nwarning: use of deprecated associated function `core::f64::<impl\
    \ f64>::is_negative`: renamed to is_sign_negative\n  --> /tmp/tmp1iznyv73.rs:14:37\n\
    \   |\n14 |         else if x.is_integer() && x.is_negative() {\n   |        \
    \                             ^^^^^^^^^^^\n\nerror[E0277]: cannot add-assign `f64`\
    \ to `{integer}`\n  --> /tmp/tmp1iznyv73.rs:15:17\n   |\n15 |             sum\
    \ += -x;\n   |                 ^^ no implementation for `{integer} += f64`\n \
    \  |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for &n in lst {\n        if\
    \ n >= 0 {\n            sum += n*n;\n        } else {\n            sum += -(n*n)\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp07my0ioe.rs:10:9\n   |\n\
    10 |     for &n in lst {\n   |         ^^    --- this expression has type `Option<f64>`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `f64`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0\n    }\n   \
    \ let mut total: f64 = 0.0;\n    let mut num: f64 = 0.0;\n    \n    for n in lst\
    \ {\n        if n % 2 == 1 {\n            total += n;\n        } else {\n    \
    \        num += n;\n        }\n    }\n    \n    return total + num;\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp29rdtb15.rs:16:14\n\
    \   |\n16 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n16 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp29rdtb15.rs:23:12\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n23 |     return total + num;\n\
    \   |            ^^^^^^^^^^^ expected `isize`, found `f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0\n    }\n\n \
    \   let mut sum = 0;\n    let mut evens_seen = Vec::new();\n    let mut odd_seen\
    \ = Vec::new();\n\n    for num in lst {\n        if num > 0 {\n            sum\
    \ += num;\n            if num % 2 == 0 {\n                evens_seen.push(num);\n\
    \            } else {\n                odd_seen.push(num);\n            }\n  \
    \      } else {\n            if evens_seen.contains(&num) {\n                sum\
    \ += num;\n            }\n        }\n    }\n    let mut min = std::i32::MAX;\n\
    \    let mut max = std::i32::MIN;\n\n    for v in evens_seen {\n        max =\
    \ std::cmp::max(max, *v);\n    }\n    for v in odd_seen {\n        min = std::cmp::min(min,\
    \ *v);\n    }\n    sum + min\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw1ha2ijf.rs:18:18\n   |\n\
    18 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmpw1ha2ijf.rs:19:17\n   |\n19 |             sum += num;\n   |   \
    \              ^^ no implementation for `{integer} += f64`\n   |\n   = help: the\
    \ trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot mod\
    \ `f64` by `{integer}`\n  --> /tmp/tmpw1ha2ijf.rs:20:20\n   |\n20 |          \
    \   if num % 2 == 0 {\n   |                    ^ no implementation for `f64 %\
    \ {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n  \
    \           <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n      \
    \       <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n        \
    \     <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n            \
    \ <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n20 |             if num % 2.0 == 0 {\n   |                     \
    \  ++\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpw1ha2ijf.rs:27:21\n\
    \   |\n27 |                 sum += num;\n   |                     ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n    "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0\n    }\n\n \
    \   let mut sum = 0f64;\n    for val in lst {\n        if val % 2 == 1 {\n   \
    \         sum += val;\n        }\n    }\n\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpi90j42co.rs:15:16\n\
    \   |\n15 |         if val % 2 == 1 {\n   |                ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |         if val % 2.0 == 1 {\n   |                   ++\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpi90j42co.rs:20:12\n   |\n8  | fn\
    \ double_the_difference(lst: Vec<f64>) -> isize {\n   |                      \
    \                      ----- expected `isize` because of return type\n...\n20\
    \ |     return sum;\n   |            ^^^ expected `isize`, found `f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst {\n        [] => 0\n        (x) => {\n \
    \           let n = x.len() as isize;\n            if n == 0 {\n             \
    \   return 0\n            }\n            \n            if n > 0 {\n          \
    \      let mut sum: isize = 0;\n                for &x in lst {\n            \
    \        if x.is_negative() {\n                        return 0\n            \
    \        }\n                    if x.is_integer() {\n                        sum\
    \ += x * x\n                    }\n                    if x.is_odd() {\n     \
    \                   sum += x;\n                    }\n                }\n    \
    \            \n                if sum == 0 {\n                    return 0\n \
    \               }\n                \n                sum\n            } else {\n\
    \                0\n            }\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `=>`\n\
    \  --> /tmp/tmpzvmuau0o.rs:11:13\n   |\n10 |         [] => 0\n   |           \
    \     - help: missing a comma here to end this `match` arm\n11 |         (x) =>\
    \ {\n   |             ^^ expected one of `,`, `.`, `?`, `}`, or an operator\n\n\
    error: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let len = lst.len();\n\n    if len == 0 {\n      \
    \  return 0;\n    }\n    \n    let mut s = 0;\n    let mut i = 0;\n    for &f\
    \ in lst {\n        if f > 0 && !f.is_integer() {\n            i += 1;\n     \
    \       s += f * f;\n        }\n    }\n    return s.trunc();\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3wtljk1m.rs:17:9\n   |\n\
    17 |     for &f in lst {\n   |         ^^    --- this expression has type `Option<f64>`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `f`\n   |\n   = note:   expected\
    \ type `f64`\n           found reference `&_`\n\nerror[E0689]: can't call method\
    \ `trunc` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp3wtljk1m.rs:23:14\n\
    \   |\n23 |     return s.trunc();\n   |              ^^^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `i32`\n   |\n15 |     let mut s: i32 =\
    \ 0;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0689.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => 0,\n        _ => lst.iter().fold(0,\
    \ |sum, _| sum + sum),\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `25`', /tmp/tmpgvogs1bt.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut total_sum_of_squares = 0.0;\n    for num in\
    \ lst {\n        if num < 0.0 || num % 1 != 0.0 {\n            continue;\n   \
    \     }\n        total_sum_of_squares += num * num;\n    }\n    return total_sum_of_squares;\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpocbwkuiz.rs:11:29\n\
    \   |\n11 |         if num < 0.0 || num % 1 != 0.0 {\n   |                   \
    \          ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait\
    \ `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n    \
    \         <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n      \
    \       <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n          \
    \   <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a\
    \ isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point\
    \ literal by writing it with `.0`\n   |\n11 |         if num < 0.0 || num % 1.0\
    \ != 0.0 {\n   |                                ++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpocbwkuiz.rs:16:12\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n16 |     return total_sum_of_squares;\n\
    \   |            ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n    }\n  \
    \  let mut total = 0;\n    for num in lst {\n        total += num * num;\n   \
    \ }\n    let odd = total / 2.0;\n    let even = total - odd;\n    if odd != 0.0\
    \ {\n        odd\n    } else {\n        even\n    }\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpvu3xxtfm.rs:14:15\n\
    \   |\n14 |         total += num * num;\n   |               ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot divide `{integer}` by `{float}`\n  --> /tmp/tmpvu3xxtfm.rs:16:21\n\
    \   |\n16 |     let odd = total / 2.0;\n   |                     ^ no implementation\
    \ for `{integer} / {float}`\n   |\n   = help: the trait `Div<{float}>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: can't compare `isize` with `{float}`\n\
    \  --> /tmp/tmpvu3xxtfm.rs:18:12\n   |\n18 |     if odd != 0.0 {\n   |       \
    \     ^^ no implementation for `isize == {float}`\n   |\n   = help: the trait\
    \ `PartialEq<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.rev().fold(0, |acc, item| acc + item * item)\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmp9z42g7pd.rs:9:9\n\
    \    |\n9   |       lst.rev().fold(0, |acc, item| acc + item * item)\n    |  \
    \         ^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n       \
    \     which is required by `&mut Vec<f64>: Iterator`\n            `[f64]: Iterator`\n\
    \            which is required by `&mut [f64]: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => 0,\n        1 => lst[0],\n\
    \        2 => {\n            let x = lst[0] + lst[1];\n            lst[0] = lst[1];\n\
    \            lst[1] = x;\n            x\n        },\n        3 => {\n        \
    \    let x = lst[0] * lst[1] + lst[2];\n            lst[0] = lst[1];\n       \
    \     lst[1] = lst[2];\n            lst[2] = x;\n            x\n        },\n \
    \       4 => {\n            let x = lst[0] + lst[1] * 2 + lst[2] * 3;\n      \
    \      lst[0] = lst[1] * 2;\n            lst[1] = lst[2] * 3;\n            lst[2]\
    \ = x;\n            x\n        },\n        5 => {\n            let x = lst[0]\
    \ * lst[1] * 2 + lst[2] * 3;\n            lst[0] = lst[1] * 2;\n            lst[1]\
    \ = lst[2] * 3;\n            lst[2] = x;\n            x\n        },\n        _\
    \ => {\n            let x = lst[0] * lst[1] * lst[2] + lst[3] * lst[4] * 5;\n\
    \            lst[0] = lst[1] * lst[2] * 5;\n            lst[1] = lst[3] * lst[4];\n\
    \            lst[2] = x;\n            x\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpk3w43eq3.rs:11:14\n\
    \   |\n9  | /     match lst.len() {\n10 | |         0 => 0,\n   | |          \
    \    - this is found to be of type `isize`\n11 | |         1 => lst[0],\n   |\
    \ |              ^^^^^^ expected `isize`, found `f64`\n12 | |         2 => {\n\
    ...  |\n45 | |         }\n46 | |     }\n   | |_____- `match` arms have incompatible\
    \ types\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk3w43eq3.rs:16:13\n \
    \  |\n8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |          \
    \                                  ----- expected `isize` because of return type\n\
    ...\n16 |             x\n   |             ^ expected `isize`, found `f64`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpk3w43eq3.rs:23:13\n   |\n8  | fn\
    \ double_the_difference(lst: Vec<f64>) -> isize {\n   |                      \
    \                      ----- expected `isize` because of return type\n...\n23\
    \ |             x\n   |             ^ expected `isize`, found `f64`\n\nerror[E0277]:\
    \ cannot multiply `f64` by `{integer}`\n  --> /tmp/tmpk3w43eq3.rs:26:37\n   |\n\
    26 |             let x = lst[0] + lst[1] * 2 + lst[2] * 3;\n   |             \
    \                        ^ no implementation for `f64 * {integer}`\n   |\n   =\
    \ help: the trait `Mul<{integer}>` is not implemented for `f64`\n   = help: the\
    \ following other types implement trait `Mul<Rhs>`:\n             <&'a f32 as\
    \ Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n\
    \             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n    \
    \         <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n          \
    \   <&'a isize as Mul<isize>>\n           and 49 others\nhelp: consider using\
    \ a floating-point literal by writing it with `.0`\n   |\n26 |             let\
    \ x = lst[0] + lst[1] * 2.0 + lst[2] * 3;\n   |                              \
    \          ++\n\nerror[E0277]: cannot multiply `f64` by `{integer}`\n  --> /tmp/tmpk3w43eq3.rs:26:50\n\
    \   |\n26 |             let x = lst[0] + lst[1] * 2 + lst[2] * 3;\n   |      \
    \                                            ^ no impleme"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sum = 0;\n    for i in lst.rev() {\n        if i.is_positive() {\n\
    \            sum += i;\n        }\n        if i.is_odd() {\n            sum +=\
    \ i * i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmp50hjc0j1.rs:13:18\n\
    \    |\n13  |       for i in lst.rev() {\n    |                    ^^^ `Vec<f64>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>:\
    \ Iterator`\n            `[f64]: Iterator`\n            which is required by `&mut\
    \ [f64]: Iterator`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    debug_assert!(lst.is_sorted());\n    let mut total\
    \ = 0;\n    for x in lst {\n        if x < 0 {\n            total += x;\n    \
    \    } else {\n            total += x;\n            total += x;\n        }\n \
    \   }\n    total\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0658]: use of unstable library feature 'is_sorted': new API\n -->\
    \ /tmp/tmpagps_1h0.rs:9:23\n  |\n9 |     debug_assert!(lst.is_sorted());\n  |\
    \                       ^^^^^^^^^\n  |\n  = note: see issue #53485 <https://github.com/rust-lang/rust/issues/53485>\
    \ for more information\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpagps_1h0.rs:12:16\n\
    \   |\n12 |         if x < 0 {\n   |                ^\n   |                |\n\
    \   |                expected `f64`, found integer\n   |                help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmpagps_1h0.rs:13:19\n   |\n13 |             total += x;\n   |   \
    \                ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpagps_1h0.rs:15:19\n   |\n15 |\
    \             total += x;\n   |                   ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpagps_1h0.rs:16:19\n\
    \   |\n16 |             total += x;\n   |                   ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not imple"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    \n    let mut total_sum = 0;\n\n    for item in lst\
    \ {\n        if item.is_integer() {\n            if item.is_positive() {\n   \
    \             total_sum += item.powi(2);\n            } else {\n             \
    \   total_sum += item.powi(2);\n            }\n        }\n        if item.is_negative()\
    \ {\n            \n        }\n    }\n    \n    return total_sum;\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp5i3u32jj.rs:13:17\n   |\n13 |         if item.is_integer()\
    \ {\n   |                 ^^^^^^^^^^ method not found in `f64`\n\nwarning: use\
    \ of deprecated associated function `core::f64::<impl f64>::is_positive`: renamed\
    \ to is_sign_positive\n  --> /tmp/tmp5i3u32jj.rs:14:21\n   |\n14 |           \
    \  if item.is_positive() {\n   |                     ^^^^^^^^^^^\n   |\n   = note:\
    \ `#[warn(deprecated)]` on by default\n\nerror[E0277]: cannot add-assign `f64`\
    \ to `{integer}`\n  --> /tmp/tmp5i3u32jj.rs:15:27\n   |\n15 |                \
    \ total_sum += item.powi(2);\n   |                           ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nwarning: use of deprecated associated function `core::f64::<impl\
    \ f64>::is_negative`: renamed to is_sign_negative\n  --> /tmp/tmp5i3u32jj.rs:20:17\n\
    \   |\n20 |         if item.is_negative() {\n   |                 ^^^^^^^^^^^\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp5i3u32jj.rs:17:27\n\
    \   |\n17 |                 total_sum += item.powi(2);\n   |                 \
    \          ^^ no implementation for `{integer} += f64`\n   |\n   = help: the trait\
    \ `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           an"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter().map(|x| if x < 0.0 or x % 1.0 != 0.0 {\
    \ 0.0 } else { x * x }).sum().unwrap_or(0.0)\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error: `or` is not a logical operator\n --> /tmp/tmpdwi7yj_j.rs:9:35\n\
    \  |\n9 |     lst.iter().map(|x| if x < 0.0 or x % 1.0 != 0.0 { 0.0 } else { x\
    \ * x }).sum().unwrap_or(0.0)\n  |                                   ^^ help:\
    \ use `||` to perform logical disjunction\n  |\n  = note: unlike in e.g., python\
    \ and PHP, `&&` and `||` are used for logical operators\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpdwi7yj_j.rs:9:31\n  |\n9 |     lst.iter().map(|x| if x <\
    \ 0.0 or x % 1.0 != 0.0 { 0.0 } else { x * x }).sum().unwrap_or(0.0)\n  |    \
    \                           ^^^\n  |                               |\n  |    \
    \                           expected `&f64`, found floating-point number\n  |\
    \                               help: consider borrowing here: `&0.0`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst\n        .iter()\n        .filter(|v| v >= 0.0)\
    \ // remove non-integer values\n        .filter(|v| v & 1 != 0) // remove odd\
    \ values\n        .map(|v| v * v)\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbvnzkky7.rs:11:26\n   |\n\
    11 |         .filter(|v| v >= 0.0) // remove non-integer values\n   |        \
    \                  ^^^ expected `&&f64`, found floating-point number\n\nerror[E0369]:\
    \ no implementation for `&&f64 & {integer}`\n  --> /tmp/tmpbvnzkky7.rs:12:23\n\
    \   |\n12 |         .filter(|v| v & 1 != 0) // remove odd values\n   |       \
    \              - ^ - {integer}\n   |                     |\n   |             \
    \        &&f64\n\nerror[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n\
    \    --> /tmp/tmpbvnzkky7.rs:14:10\n     |\n14   |         .sum()\n     |    \
    \      ^^^ the trait `Sum<f64>` is not implemented for `isize`\n     |\n     =\
    \ help: the following other types implement trait `Sum<A>`:\n               <f32\
    \ as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a\
    \ f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n\
    \               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n        \
    \       <i16 as Sum>\n             and 20 others\nnote: required by a bound in\
    \ `std::iter::Iterator::sum`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0\n    }\n   \
    \ \n    let mut sum = 0;\n    for i in lst {\n        if i % 2 == 1 {\n      \
    \      sum += i * i;\n        }\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp1o31yveb.rs:15:14\n\
    \   |\n15 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |         if i % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp1o31yveb.rs:16:17\n  \
    \ |\n16 |             sum += i * i;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    let mut evens = 0;\n    let\
    \ mut odds = 0;\n    for i in lst {\n        if i.is_negative() {\n          \
    \  odds += 1;\n        }\n        else {\n            evens += 1;\n          \
    \  sum += i;\n        }\n    }\n    if evens + odds == 0 {\n        return 0\n\
    \    }\n    sum / 2.0\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "warning: use of deprecated associated function `core::f64::<impl f64>::is_negative`:\
    \ renamed to is_sign_negative\n  --> /tmp/tmpuqrswuta.rs:13:14\n   |\n13 |   \
    \      if i.is_negative() {\n   |              ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]`\
    \ on by default\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  -->\
    \ /tmp/tmpuqrswuta.rs:18:17\n   |\n18 |             sum += i;\n   |          \
    \       ^^ no implementation for `{integer} += f64`\n   |\n   = help: the trait\
    \ `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot divide\
    \ `{integer}` by `{float}`\n  --> /tmp/tmpuqrswuta.rs:24:9\n   |\n24 |     sum\
    \ / 2.0\n   |         ^ no implementation for `{integer} / {float}`\n   |\n  \
    \ = help: the trait `Div<{float}>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum_of_squared_of_all_odd_numbers = 0.0;\n\
    \    for n in lst {\n        if n.is_positive() {\n            sum_of_squared_of_all_odd_numbers\
    \ += ((n * n).round() as f64);\n        } else {\n            sum_of_squared_of_all_odd_numbers\
    \ += 0.0;\n        }\n    }\n    sum_of_squared_of_all_odd_numbers.round() as\
    \ isize\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpaamlr285.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => 0,\n        1 => lst[0].clone(),\n\
    \        _ => {\n            let mut total = 0.0;\n            let mut count =\
    \ 0;\n            for n in lst {\n                if n > 0.0 {\n             \
    \       if n % 2 == 1 {\n                        total += n;\n               \
    \         count += 1;\n                    }\n                } else {\n     \
    \               break;\n                }\n            }\n            let result\
    \ = total / count;\n            // if result is NaN then result will be NaN, otherwise\
    \ the result will be the sum of squares of even numbers from lst\n           \
    \ if std::f64::NAN == result {\n                0\n            } else {\n    \
    \            result\n            }\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpc_i4bok6.rs:11:14\n\
    \   |\n9  | /     match lst.len() {\n10 | |         0 => 0,\n   | |          \
    \    - this is found to be of type `isize`\n11 | |         1 => lst[0].clone(),\n\
    \   | |              ^^^^^^^^^^^^^^ expected `isize`, found `f64`\n12 | |    \
    \     _ => {\n...  |\n32 | |         }\n33 | |     }\n   | |_____- `match` arms\
    \ have incompatible types\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n \
    \ --> /tmp/tmpc_i4bok6.rs:17:26\n   |\n17 |                     if n % 2 == 1\
    \ {\n   |                          ^ no implementation for `f64 % {integer}`\n\
    \   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n  \
    \ = help: the following other types implement trait `Rem<Rhs>`:\n            \
    \ <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a\
    \ i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32\
    \ as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n\
    \             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider\
    \ using a floating-point literal by writing it with `.0`\n   |\n17 |         \
    \            if n % 2.0 == 1 {\n   |                             ++\n\nerror[E0277]:\
    \ cannot divide `f64` by `{integer}`\n  --> /tmp/tmpc_i4bok6.rs:25:32\n   |\n\
    25 |             let result = total / count;\n   |                           \
    \     ^ no implementation for `f64 / {integer}`\n   |\n   = help: the trait `Div<{integer}>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc_i4bok6.rs:30:17\n\
    \   |\n8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum: f64 = 0.0;\n    let mut i = 1;\n    let\
    \ mut j = 1;\n    while i != lst.len() {\n        let elem = lst[i];\n       \
    \ if elem < 0.0 || elem % 1.0 == 0.0\n        || elem == 0.0 {\n            sum\
    \ += elem;\n            i += 1;\n            continue ;\n        }\n        \n\
    \        // if elem > 0.0 \n        // then the difference is between the element\
    \ before and the element after \n        sum += (elem - j) * (elem - j);\n   \
    \     // since we only want odd numbers in the sum, the j should change once we\
    \ encounter an odd number \n        j = elem - j;\n        // add 1 to i because\
    \ we still want to iterate over the list \n        i += 1;\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot subtract `{integer}` from `f64`\n  --> /tmp/tmpwp9d2w20.rs:23:22\n\
    \   |\n23 |         sum += (elem - j) * (elem - j);\n   |                    \
    \  ^ no implementation for `f64 - {integer}`\n   |\n   = help: the trait `Sub<{integer}>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: cannot subtract `{integer}` from `f64`\n\
    \  --> /tmp/tmpwp9d2w20.rs:23:35\n   |\n23 |         sum += (elem - j) * (elem\
    \ - j);\n   |                                   ^ no implementation for `f64 -\
    \ {integer}`\n   |\n   = help: the trait `Sub<{integer}>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `Sub<Rhs>`:\n  \
    \           <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n      \
    \       <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n        \
    \     <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n            \
    \ <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot subtract `{integer}` from `f64`\n  --> /tmp/tmpwp9d2w20.rs:25:18\n\
    \   |\n25 |         j = elem - j;\n   |                  ^ no implementation for\
    \ `f64 - {integer}`\n   |\n   = help: the trait `Sub<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwp9d2w20.rs:29:12\n\
    \   |\n8  | fn double_the_difference(lst: Vec<"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst\n        .iter()\n        .filter(|e| !e.is_zero())\n\
    \        .filter(|e| e.is_integer())\n        .filter(|e| e % 2 == 1)\n      \
    \  .sum()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_zero` found for reference `&&f64` in\
    \ the current scope\n  --> /tmp/tmpofodeo6e.rs:11:24\n   |\n11 |         .filter(|e|\
    \ !e.is_zero())\n   |                        ^^^^^^^ method not found in `&&f64`\n\
    \nerror[E0599]: no method named `is_integer` found for reference `&&f64` in the\
    \ current scope\n  --> /tmp/tmpofodeo6e.rs:12:23\n   |\n12 |         .filter(|e|\
    \ e.is_integer())\n   |                       ^^^^^^^^^^ method not found in `&&f64`\n\
    \nerror[E0369]: cannot mod `&&f64` by `{integer}`\n  --> /tmp/tmpofodeo6e.rs:13:23\n\
    \   |\n13 |         .filter(|e| e % 2 == 1)\n   |                     - ^ - {integer}\n\
    \   |                     |\n   |                     &&f64\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<&f64>` is not satisfied\n    --> /tmp/tmpofodeo6e.rs:14:10\n\
    \     |\n14   |         .sum()\n     |          ^^^ the trait `Sum<&f64>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0369,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n\
    \    // get first number\n    let mut first_num = lst[0];\n    // set first number\
    \ to 2\n    first_num *= 2;\n\n    let mut sum = 0;\n    for i in lst.iter_mut()\
    \ {\n        *i -= first_num;\n        sum += *i;\n    }\n    return sum;\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply-assign `f64` by `{integer}`\n  --> /tmp/tmp9vehtpst.rs:16:15\n\
    \   |\n16 |     first_num *= 2;\n   |               ^^ no implementation for `f64\
    \ *= {integer}`\n   |\n   = help: the trait `MulAssign<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `MulAssign<Rhs>`:\n\
    \             <f32 as MulAssign<&f32>>\n             <f32 as MulAssign>\n    \
    \         <f64 as MulAssign<&f64>>\n             <f64 as MulAssign>\n        \
    \     <i128 as MulAssign<&i128>>\n             <i128 as MulAssign>\n         \
    \    <i16 as MulAssign<&i16>>\n             <i16 as MulAssign>\n           and\
    \ 20 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n16 |     first_num *= 2.0;\n   |                   ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp9vehtpst.rs:21:13\n  \
    \ |\n21 |         sum += *i;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if\
    \ num < 0 || !num.is_integer() {\n            continue;\n        }\n        sum\
    \ += num as isize * num as isize;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa5i80sy4.rs:11:18\n   |\n\
    11 |         if num < 0 || !num.is_integer() {\n   |                  ^\n   |\
    \                  |\n   |                  expected `f64`, found integer\n  \
    \ |                  help: use a float literal: `0.0`\n\nerror[E0599]: no method\
    \ named `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmpa5i80sy4.rs:11:28\n\
    \   |\n11 |         if num < 0 || !num.is_integer() {\n   |                  \
    \          ^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sum = 0.0;\n    for n in lst {\n        if n % 2 == 1 {\n         \
    \   sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp9aeezetk.rs:14:14\n\
    \   |\n14 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n14 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9aeezetk.rs:18:5\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n18 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sum: f64 = 0;\n    let mut sum_sq: f64 = 0;\n    let mut odd_sum: f64\
    \ = 0;\n    let mut odd_sum_square: f64 = 0;\n    let mut num: f64 = lst[0];\n\
    \    let mut num2: f64 = lst[0];\n    for n in lst.iter().rev() {\n        if\
    \ n % 2 == 1 {\n            odd_sum += n;\n            odd_sum_square += n * n;\n\
    \        }\n        else {\n            sum += n;\n            sum_sq += n * n;\n\
    \        }\n    }\n    if odd_sum > 0 { sum += odd_sum; }\n    if sum_sq > 0 {\
    \ sum += sum_sq; }\n    if num2 > 0 { sum += num2; }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphu8zmfjn.rs:12:24\n   |\n\
    12 |     let mut sum: f64 = 0;\n   |                  ---   ^\n   |          \
    \        |     |\n   |                  |     expected `f64`, found integer\n\
    \   |                  |     help: use a float literal: `0.0`\n   |          \
    \        expected due to this\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphu8zmfjn.rs:13:27\n\
    \   |\n13 |     let mut sum_sq: f64 = 0;\n   |                     ---   ^\n \
    \  |                     |     |\n   |                     |     expected `f64`,\
    \ found integer\n   |                     |     help: use a float literal: `0.0`\n\
    \   |                     expected due to this\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphu8zmfjn.rs:14:28\n   |\n14 |     let mut odd_sum: f64 = 0;\n \
    \  |                      ---   ^\n   |                      |     |\n   |   \
    \                   |     expected `f64`, found integer\n   |                \
    \      |     help: use a float literal: `0.0`\n   |                      expected\
    \ due to this\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphu8zmfjn.rs:15:35\n\
    \   |\n15 |     let mut odd_sum_square: f64 = 0;\n   |                       \
    \      ---   ^\n   |                             |     |\n   |               \
    \              |     expected `f64`, found integer\n   |                     \
    \        |     help: use a float literal: `0.0`\n   |                        \
    \     expected due to this\n\nerror[E0277]: cannot mod `&f64` by `{integer}`\n\
    \  --> /tmp/tmphu8zmfjn.rs:19:14\n   |\n19 |         if n % 2 == 1 {\n   |   \
    \           ^ no implementation for `&f64 % {integer}`\n   |\n   = help: the trait\
    \ `Rem<{integer}>` is not implemented for `&f64`\n   = help: the following other\
    \ types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n    \
    \         <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n      \
    \       <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n          \
    \   <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a\
    \ isize as Rem<isize>>\n           and 54 others\n\nerror[E0308]: mismatched types"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst\n        .iter()\n        .map(|x| if x < 0 {\
    \ 0 else x })\n        .filter(|x| x.is_integer() && x.is_odd())\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword\
    \ `else`\n  --> /tmp/tmprkvfjg8w.rs:11:31\n   |\n11 |         .map(|x| if x <\
    \ 0 { 0 else x })\n   |                               ^^^^ expected one of `.`,\
    \ `;`, `?`, `}`, or an operator\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprkvfjg8w.rs:11:25\n\
    \   |\n11 |         .map(|x| if x < 0 { 0 else x })\n   |                    \
    \     ^ expected `&f64`, found integer\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0.0f;\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            sum += x;\n        }\n    }\n    if sum == 0.0f {\n\
    \        return 0;\n    }\n    let nums = lst.len() - 1;\n    let mut sum2 = sum;\n\
    \    for x in nums {\n        sum2 += x;\n    }\n    sum2 -= lst.iter().last().unwrap();\n\
    \    sum2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error: invalid suffix `f` for float literal\n --> /tmp/tmp2wmpogym.rs:9:19\n\
    \  |\n9 |     let mut sum = 0.0f;\n  |                   ^^^^ invalid suffix `f`\n\
    \  |\n  = help: valid suffixes are `f32` and `f64`\n\nerror: invalid suffix `f`\
    \ for float literal\n  --> /tmp/tmp2wmpogym.rs:15:15\n   |\n15 |     if sum ==\
    \ 0.0f {\n   |               ^^^^ invalid suffix `f`\n   |\n   = help: valid suffixes\
    \ are `f32` and `f64`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  -->\
    \ /tmp/tmp2wmpogym.rs:11:14\n   |\n11 |         if x % 2 == 0 {\n   |        \
    \      ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64\
    \ as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as\
    \ Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n\
    \             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n  \
    \         and 54 others\nhelp: consider using a floating-point literal by writing\
    \ it with `.0`\n   |\n11 |         if x % 2.0 == 0 {\n   |                 ++\n\
    \nerror[E0277]: `usize` is not an iterator\n  --> /tmp/tmp2wmpogym.rs:20:14\n\
    \   |\n20 |     for x in nums {\n   |              ^^^^ `usize` is not an iterator\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `usize`\n   = note:\
    \ if you want to iterate between `start` until a value `end`, use the exclusive\
    \ range syntax `start..end` or the inclusive range syntax `start..=end`\n   =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `usize`\n\nerror[E0277]: cannot subtract-assign `&f64` from `isize`\n  --> /tmp/tmp2wmpogym.rs:23:10\n\
    \   |\n23 |     sum2 -= lst.iter().last().unwrap();\n   |          ^^ no implementation\
    \ for `isize -= &f64`\n   |\n   = help: the trait `SubAssign<&f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n\
    \             <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n    \
    \         <"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum: f64 = 0.0;\n    for num in lst {\n  \
    \      if num >= 0.0 {\n            sum += num;\n        }\n    }\n\n    for num\
    \ in lst {\n        if num < 0.0 || num % 1 != 0.0 {\n            sum += num;\n\
    \        }\n    }\n\n    if sum != 0.0 {\n        sum * sum\n    } else {\n  \
    \      0.0\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpnzcd1tyg.rs:17:29\n\
    \   |\n17 |         if num < 0.0 || num % 1 != 0.0 {\n   |                   \
    \          ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait\
    \ `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n    \
    \         <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n      \
    \       <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n          \
    \   <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a\
    \ isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point\
    \ literal by writing it with `.0`\n   |\n17 |         if num < 0.0 || num % 1.0\
    \ != 0.0 {\n   |                                ++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnzcd1tyg.rs:23:9\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n23 |         sum * sum\n   | \
    \        ^^^^^^^^^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnzcd1tyg.rs:25:9\n   |\n8  | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n25 |         0.0\n   |         ^^^ expected `isize`,\
    \ found floating-point number\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter()\n        .filter(|&x| x.is_integer())\n\
    \        .filter(|&x| !x.is_negative())\n        .fold1(0.0f64|acc, x| acc + x.powf(2.0))\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `acc` in this scope\n  --> /tmp/tmp9icimj_q.rs:12:23\n\
    \   |\n12 |         .fold1(0.0f64|acc, x| acc + x.powf(2.0))\n   |           \
    \            ^^^ not found in this scope\n\nerror[E0425]: cannot find value `x`\
    \ in this scope\n  --> /tmp/tmp9icimj_q.rs:12:28\n   |\n12 |         .fold1(0.0f64|acc,\
    \ x| acc + x.powf(2.0))\n   |                            ^ not found in this scope\n\
    \nerror[E0425]: cannot find value `acc` in this scope\n  --> /tmp/tmp9icimj_q.rs:12:31\n\
    \   |\n12 |         .fold1(0.0f64|acc, x| acc + x.powf(2.0))\n   |           \
    \                    ^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `x` in this scope\n  --> /tmp/tmp9icimj_q.rs:12:37\n   |\n12 |       \
    \  .fold1(0.0f64|acc, x| acc + x.powf(2.0))\n   |                            \
    \         ^ not found in this scope\n\nerror[E0599]: no method named `is_integer`\
    \ found for reference `&f64` in the current scope\n  --> /tmp/tmp9icimj_q.rs:10:24\n\
    \   |\n10 |         .filter(|&x| x.is_integer())\n   |                       \
    \ ^^^^^^^^^^ method not found in `&f64`\n\nwarning: use of deprecated associated\
    \ function `core::f64::<impl f64>::is_negative`: renamed to is_sign_negative\n\
    \  --> /tmp/tmp9icimj_q.rs:11:25\n   |\n11 |         .filter(|&x| !x.is_negative())\n\
    \   |                         ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]`\
    \ on by default\n\nerror[E0599]: no method named `fold1` found for struct `Filter`\
    \ in the current scope\n  --> /tmp/tmp9icimj_q.rs:12:10\n   |\n12 |         .fold1(0.0f64|acc,\
    \ x| acc + x.powf(2.0))\n   |          ^^^^^ method not found in `Filter<Filter<std::slice::Iter<'_,\
    \ f64>, [closure@/tmp/tmp9icimj_q.rs:10:17: 10:36]>, [closure@/tmp/tmp9icimj_q.rs:11:17:\
    \ 11:38]>`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\n\
    Some errors have detailed explanations: E0425, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    \n    if lst.is_empty() {\n        return 0;\n   \
    \ }\n\n    let mut sum_sqr_even = 0;\n    let mut current_num = lst[0];\n    for\
    \ i in 1..lst.len() {\n        let curr_num = lst[i];\n\n        if curr_num %\
    \ 2 == 0 {\n            sum_sqr_even += curr_num * curr_num;\n        }\n    \
    \    else {\n            if current_num != curr_num {\n                sum_sqr_even\
    \ += current_num * current_num;\n            }\n            current_num = curr_num;\n\
    \        }\n    }\n\n    return sum_sqr_even;\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmphil8c28_.rs:19:21\n\
    \   |\n19 |         if curr_num % 2 == 0 {\n   |                     ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n19 |         if curr_num % 2.0 == 0 {\n   |                    \
    \    ++\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmphil8c28_.rs:20:26\n\
    \   |\n20 |             sum_sqr_even += curr_num * curr_num;\n   |           \
    \               ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmphil8c28_.rs:24:30\n   |\n24 |\
    \                 sum_sqr_even += current_num * current_num;\n   |           \
    \                   ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n\
    \    let mut total = 0;\n    let mut i = 0;\n    while i < lst.len() {\n     \
    \   if let Some(num) = (&lst[i..]).iter().cloned().filter(|x| x >= 0).next() {\n\
    \            total += num * num;\n            i += 1;\n        }\n    }\n    i\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7r4jq00i.rs:16:72\n   |\n\
    16 |         if let Some(num) = (&lst[i..]).iter().cloned().filter(|x| x >= 0).next()\
    \ {\n   |                                                                    \
    \    ^ expected `&f64`, found integer\n\nerror[E0277]: cannot add-assign `f64`\
    \ to `{integer}`\n  --> /tmp/tmp7r4jq00i.rs:17:19\n   |\n17 |             total\
    \ += num * num;\n   |                   ^^ no implementation for `{integer} +=\
    \ f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7r4jq00i.rs:21:5\n   |\n8  | fn\
    \ double_the_difference(lst: Vec<f64>) -> isize {\n   |                      \
    \                      ----- expected `isize` because of return type\n...\n21\
    \ |     i\n   |     ^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    21 |     i.try_into().unwrap()\n   |      ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let len = lst.len();\n    if len == 0 {\n        return\
    \ 0;\n    }\n    // Find the first negative number in lst\n    let mut index =\
    \ len - 1;\n    while index < 0 && (lst[index] < 0.0) {\n        index -= 1;\n\
    \    }\n    let mut sum = 0.0;\n    // Sum squares until we hit the first positive\
    \ number\n    while index >= 0 && (lst[index] >= 0.0) {\n        sum += (lst[index]\
    \ * lst[index]);\n        index -= 1;\n    }\n    // Now sum is the sum of the\
    \ squares of the rest of the numbers in\n    // the list, starting from the first\
    \ negative number\n    let mut double_sum = sum;\n    for n in &lst[index..] {\n\
    \        double_sum *= n;\n    }\n    index -= 1;\n    while index >= 0 && (lst[index]\
    \ < 0.0) {\n        index -= 1;\n    }\n    let mut prev_val = 0.0;\n    while\
    \ index >= 0 && (lst[index] == prev_val) {\n        index -= 1;\n    }\n    double_sum\
    \ -= prev_val;\n    index -= 1;\n    while index >= 0 && (lst[index] < 0.0) {\n\
    \        index -= 1;\n    }\n    double_sum += (lst[index] * lst[index]);\n  \
    \  index -= 1;\n    while index >= 0 && (lst[index] == prev_val) {\n        index\
    \ -= 1;\n    }\n    double_sum -= prev_val;\n    index -= 1;\n    while index\
    \ >= 0 && (lst[index] > 0.0) {\n        index -= 1;\n    }\n    double_sum +=\
    \ (lst[index] * lst[index]);\n    return double_sum;\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpy932vhj_.rs:21:16\n\
    \   |\n21 |         sum += (lst[index] * lst[index]);\n   |                ^ \
    \                      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n21 -         sum += (lst[index] * lst[index]);\n\
    21 +         sum += lst[index] * lst[index];\n   | \n\nwarning: unnecessary parentheses\
    \ around assigned value\n  --> /tmp/tmpy932vhj_.rs:43:19\n   |\n43 |     double_sum\
    \ += (lst[index] * lst[index]);\n   |                   ^                    \
    \   ^\n   |\nhelp: remove these parentheses\n   |\n43 -     double_sum += (lst[index]\
    \ * lst[index]);\n43 +     double_sum += lst[index] * lst[index];\n   | \n\nwarning:\
    \ unnecessary parentheses around assigned value\n  --> /tmp/tmpy932vhj_.rs:53:19\n\
    \   |\n53 |     double_sum += (lst[index] * lst[index]);\n   |               \
    \    ^                       ^\n   |\nhelp: remove these parentheses\n   |\n53\
    \ -     double_sum += (lst[index] * lst[index]);\n53 +     double_sum += lst[index]\
    \ * lst[index];\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy932vhj_.rs:54:12\n\
    \   |\n8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n54 |     return double_sum;\n   |            ^^^^^^^^^^ expected `isize`,\
    \ found `f64`\n\nerror: aborting due to previous error; 3 warnings emitted\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut total = 0;\n    for n in lst {\n        if\
    \ n % 2 == 1 {\n            total += n;\n        }\n    }\n    total\n}\n\nfn\
    \ main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpv99_ihvd.rs:11:14\n\
    \   |\n11 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n11 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpv99_ihvd.rs:12:19\n  \
    \ |\n12 |             total += n;\n   |                   ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter().filter(|n| n % 2 == 1).sum()\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&f64` by `{integer}`\n --> /tmp/tmpied55jvb.rs:9:29\n\
    \  |\n9 |     lst.iter().filter(|n| n % 2 == 1).sum()\n  |                   \
    \        - ^ - {integer}\n  |                           |\n  |               \
    \            &&f64\n\nerror[E0277]: the trait bound `isize: Sum<&f64>` is not\
    \ satisfied\n    --> /tmp/tmpied55jvb.rs:9:39\n     |\n9    |     lst.iter().filter(|n|\
    \ n % 2 == 1).sum()\n     |                                       ^^^ the trait\
    \ `Sum<&f64>` is not implemented for `isize`\n     |\n     = help: the following\
    \ other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n\
    \               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n         \
    \      <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128\
    \ as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n\
    \             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0\n    }\n\n \
    \   let mut sum = 0;\n    let mut i = 0;\n    while i < lst.len() {\n        let\
    \ value = lst[i];\n        if value != -value && value.is_integer() {\n      \
    \      sum += value * (value + 1);\n            i += 1;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp25ebjj06.rs:17:37\n   |\n17 |         if value\
    \ != -value && value.is_integer() {\n   |                                    \
    \ ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot add `{integer}`\
    \ to `f64`\n  --> /tmp/tmp25ebjj06.rs:18:35\n   |\n18 |             sum += value\
    \ * (value + 1);\n   |                                   ^ no implementation for\
    \ `f64 + {integer}`\n   |\n   = help: the trait `Add<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n18 |             sum += value * (value + 1.0);\n   |           \
    \                           ++\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => 0,\n        1 => lst[0],\n\
    \        2 => lst[0] as f64 + (lst[1] as f64) * (lst[1] as f64),\n        _ =>\
    \ {\n            let mut acc: f64 = lst[0];\n            for &i in lst.iter().rev()\
    \ {\n                if i % 2 != 0 {\n                    acc += acc;\n      \
    \          }\n                acc += i;\n            }\n            acc as isize\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpwdu40nj0.rs:11:14\n\
    \   |\n9  | /     match lst.len() {\n10 | |         0 => 0,\n   | |          \
    \    - this is found to be of type `isize`\n11 | |         1 => lst[0],\n   |\
    \ |              ^^^^^^ expected `isize`, found `f64`\n12 | |         2 => lst[0]\
    \ as f64 + (lst[1] as f64) * (lst[1] as f64),\n...  |\n22 | |         }\n23 |\
    \ |     }\n   | |_____- `match` arms have incompatible types\n\nerror[E0277]:\
    \ cannot mod `f64` by `{integer}`\n  --> /tmp/tmpwdu40nj0.rs:16:22\n   |\n16 |\
    \                 if i % 2 != 0 {\n   |                      ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n16 |                 if i % 2.0 != 0 {\n   |                   \
    \      ++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut s = 0.0\n    for v in lst {\n        if v\
    \ > 0.0 {\n            if v % 2.0 == 0.0 {\n                s += v\n         \
    \   }\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmprj6j684j.rs:9:20\n\
    \   |\n9  |     let mut s = 0.0\n   |                    ^ help: add `;` here\n\
    10 |     for v in lst {\n   |     --- unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprj6j684j.rs:17:5\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n17 |     s\n   |     ^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n\
    \    let mut sum = 0;\n    let mut i = 0;\n    while i < lst.len() {\n       \
    \ if lst[i] % 2 == 1 {\n            sum += lst[i];\n        }\n        i += 1;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpzs808h8_.rs:16:19\n\
    \   |\n16 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n16 |         if lst[i] % 2.0 == 1 {\n   |                      ++\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpzs808h8_.rs:17:17\n\
    \   |\n17 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => return 0,\n      \
    \  _ => {\n            let mut sum = 0.0;\n            for n in lst.iter().filter(|&n|\
    \ n >= 0.0) {\n                if n % 2 == 1 {\n                    sum += *n\
    \ as f64;\n                }\n            }\n            sum\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_a677abz.rs:13:50\n   |\n\
    13 |             for n in lst.iter().filter(|&n| n >= 0.0) {\n   |           \
    \                                       ^^^\n   |                            \
    \                      |\n   |                                               \
    \   expected `&f64`, found floating-point number\n   |                       \
    \                           help: consider borrowing here: `&0.0`\n\nerror[E0277]:\
    \ cannot mod `&f64` by `{integer}`\n  --> /tmp/tmp_a677abz.rs:14:22\n   |\n14\
    \ |                 if n % 2 == 1 {\n   |                      ^ no implementation\
    \ for `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_a677abz.rs:18:13\n\
    \   |\n8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n18 |             sum\n   |             ^^^ expected `isize`, found `f64`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.len() == 0 {\n        return 0\n    }\n   \
    \ let mut sum: f64 = 0.0;\n    let mut even: usize = 0;\n    for v in lst.iter()\
    \ {\n        if v % 2 == 1 {\n            sum += v;\n            even += 1;\n\
    \        }\n    }\n    if even != lst.len() {\n        sum += (lst.len() - even)\
    \ * v::f64;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `v`\n\
    \  --> /tmp/tmpyay0miko.rs:21:37\n   |\n21 |         sum += (lst.len() - even)\
    \ * v::f64;\n   |                                     ^ use of undeclared crate\
    \ or module `v`\n\nerror[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmpyay0miko.rs:15:14\n\
    \   |\n15 |         if v % 2 == 1 {\n   |              ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyay0miko.rs:23:5\n\
    \   |\n8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n23 |     sum\n   |     ^^^ expected `isize`, found `f64`\n\nerror[E0277]:\
    \ cannot add-assign `usize` to `f64`\n  --> /tmp/tmpyay0miko.rs:21:13\n   |\n\
    21 |         sum += (lst.len() - even) * v::f64;\n   |             ^^ no implementation\
    \ for `f64 += usize`\n   |\n   = help: the trait `AddAssign<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0433.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum_of_squares = 0.0;\n\n    for elt in lst\
    \ {\n        if elt % 2 == 1 {\n            sum_of_squares += elt * elt;\n   \
    \     }\n    }\n    sum_of_squares\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpp5kh3tzh.rs:12:16\n\
    \   |\n12 |         if elt % 2 == 1 {\n   |                ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n12 |         if elt % 2.0 == 1 {\n   |                   ++\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpp5kh3tzh.rs:16:5\n   |\n8  | fn\
    \ double_the_difference(lst: Vec<f64>) -> isize {\n   |                      \
    \                      ----- expected `isize` because of return type\n...\n16\
    \ |     sum_of_squares\n   |     ^^^^^^^^^^^^^^ expected `isize`, found `f64`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter()\n        .filter(|x| x != 0.0f64)\n   \
    \     .filter(|x| x.is_integer() && x >= 0.0f64)\n        .map(|x| x.powi(2.0))\n\
    \        .sum::<isize>()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&&f64` with `f64`\n  --> /tmp/tmpnhmat6nn.rs:10:23\n\
    \   |\n10 |         .filter(|x| x != 0.0f64)\n   |                       ^^ no\
    \ implementation for `&&f64 == f64`\n   |\n   = help: the trait `PartialEq<f64>`\
    \ is not implemented for `&&f64`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0599]: no method named `is_integer`\
    \ found for reference `&&f64` in the current scope\n  --> /tmp/tmpnhmat6nn.rs:11:23\n\
    \   |\n11 |         .filter(|x| x.is_integer() && x >= 0.0f64)\n   |         \
    \              ^^^^^^^^^^ method not found in `&&f64`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnhmat6nn.rs:11:44\n   |\n11 |         .filter(|x| x.is_integer()\
    \ && x >= 0.0f64)\n   |                                            ^^^^^^ expected\
    \ `&&f64`, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnhmat6nn.rs:12:25\n\
    \   |\n12 |         .map(|x| x.powi(2.0))\n   |                         ^^^ expected\
    \ `i32`, found floating-point number\n\nerror[E0277]: the trait bound `isize:\
    \ Sum<f64>` is not satisfied\n    --> /tmp/tmpnhmat6nn.rs:13:10\n     |\n13  \
    \ |         .sum::<isize>()\n     |          ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    \n    let mut sum = 0;\n    let mut current_number\
    \ = 0;\n\n    for num in lst.iter() {\n        if num > 0.0 {\n            current_number\
    \ = num;\n        } else {\n            sum += current_number;\n            current_number\
    \ = 0;\n        }\n    }\n\n    sum += current_number;\n    \n    sum\n}\n\nfn\
    \ main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb4peubzw.rs:14:18\n   |\n\
    14 |         if num > 0.0 {\n   |                  ^^^\n   |                 \
    \ |\n   |                  expected `&f64`, found floating-point number\n   |\
    \                  help: consider borrowing here: `&0.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb4peubzw.rs:15:30\n   |\n11 |     let mut current_number\
    \ = 0;\n   |                              - expected due to this value\n...\n\
    15 |             current_number = num;\n   |                              ^^^\
    \ expected integer, found `&f64`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    \n    let mut sum = 0;\n    \n    for elt in lst {\n\
    \        if elt > 0.0\n            || elt < 0.0\n            || (elt as f64).is_nan()\n\
    \        {\n            continue;\n        }\n        \n        if elt % 2.0 ==\
    \ 1.0 {\n            sum += elt;\n        }\n    }\n    \n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpy62a9da3.rs:21:17\n\
    \   |\n21 |             sum += elt;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter().filter(|x| x >= 0).fold(0.0, |acc, x| acc\
    \ + x * x).unwrap_or(0)\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4yu25wxw.rs:9:32\n  |\n9 |\
    \     lst.iter().filter(|x| x >= 0).fold(0.0, |acc, x| acc + x * x).unwrap_or(0)\n\
    \  |                                ^ expected `&&f64`, found integer\n\nerror[E0599]:\
    \ no method named `unwrap_or` found for type `f64` in the current scope\n -->\
    \ /tmp/tmp4yu25wxw.rs:9:67\n  |\n9 |     lst.iter().filter(|x| x >= 0).fold(0.0,\
    \ |acc, x| acc + x * x).unwrap_or(0)\n  |                                    \
    \                               ^^^^^^^^^ method not found in `f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sum = 0;\n    let mut prev_sum = 0;\n    let mut odd = vec![false;\
    \ lst.len()];\n    \n    for &v in lst {\n        if v < 0 {\n            continue;\n\
    \        }\n        if v % 2 == 0 {\n            sum += v;\n            prev_sum\
    \ += v;\n            odd[v.cmp(&prev_sum).unwrap()] = true;\n        }\n    }\n\
    \n    for &v in lst {\n        if v < 0 {\n            continue;\n        }\n\
    \        if v % 2 == 0 {\n            sum += v;\n            prev_sum += v;\n\
    \            if !odd[v.cmp(&prev_sum).unwrap()] {\n                sum += -v;\n\
    \            }\n        }\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp62133np8.rs:16:9\n   |\n\
    16 |     for &v in lst {\n   |         ^^    --- this expression has type `Option<f64>`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `v`\n   |\n   = note:   expected\
    \ type `f64`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp62133np8.rs:27:9\n   |\n27 |     for &v in lst {\n   |        \
    \ ^^    --- this expression has type `Option<f64>`\n   |         |\n   |     \
    \    expected `f64`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `v`\n   |\n   = note:   expected type `f64`\n         \
    \  found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    \n    let mut total = 0.0;\n    for d in lst {\n \
    \       if d > 0. && d != f64::INFINITY.into() {\n            total += d;\n  \
    \      }\n    }\n    \n    return total;\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt8u11xrg.rs:17:12\n   |\n\
    8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                \
    \                            ----- expected `isize` because of return type\n...\n\
    17 |     return total;\n   |            ^^^^^ expected `isize`, found `f64`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n    }\n  \
    \  let mut sum = 0.0_f64;\n    for i in lst\n    {\n        if !i.is_integer()\
    \ || i < 0 {\n            continue;\n        }\n        sum += *i\n    }\n   \
    \ sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmplqu2buqo.rs:15:15\n   |\n15 |         if !i.is_integer()\
    \ || i < 0 {\n   |               ^^^^^^^^^^ method not found in `f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplqu2buqo.rs:15:35\n   |\n15 |         if !i.is_integer()\
    \ || i < 0 {\n   |                                   ^\n   |                 \
    \                  |\n   |                                   expected `f64`, found\
    \ integer\n   |                                   help: use a float literal: `0.0`\n\
    \nerror[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmplqu2buqo.rs:18:16\n\
    \   |\n18 |         sum += *i\n   |                ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplqu2buqo.rs:20:5\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n20 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0.;\n    for i in lst.iter() {\n   \
    \     if i % 2 != 0 {\n            sum += i * i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmp8pb5x2d4.rs:11:14\n\
    \   |\n11 |         if i % 2 != 0 {\n   |              ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8pb5x2d4.rs:15:5\n\
    \   |\n8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n15 |     sum\n   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut result = 0.0;\n    for num in lst {\n        if num > 0.0 {\n     \
    \       result += num * num;\n        }\n    }\n    return result;\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgencu12l.rs:18:12\n   |\n\
    8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                \
    \                            ----- expected `isize` because of return type\n...\n\
    18 |     return result;\n   |            ^^^^^^ expected `isize`, found `f64`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0.0;\n    for x in lst.iter() {\n  \
    \      if x < 0.0 || x.is_integer() == false {\n            sum += x.pow(2);\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk7w_stru.rs:11:16\n   |\n\
    11 |         if x < 0.0 || x.is_integer() == false {\n   |                ^^^\n\
    \   |                |\n   |                expected `&f64`, found floating-point\
    \ number\n   |                help: consider borrowing here: `&0.0`\n\nerror[E0599]:\
    \ no method named `is_integer` found for reference `&f64` in the current scope\n\
    \  --> /tmp/tmpk7w_stru.rs:11:25\n   |\n11 |         if x < 0.0 || x.is_integer()\
    \ == false {\n   |                         ^^^^^^^^^^ method not found in `&f64`\n\
    \nerror[E0599]: no method named `pow` found for reference `&f64` in the current\
    \ scope\n  --> /tmp/tmpk7w_stru.rs:12:22\n   |\n12 |             sum += x.pow(2);\n\
    \   |                      ^^^ help: there is an associated function with a similar\
    \ name: `powf`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk7w_stru.rs:15:12\n\
    \   |\n8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n15 |     return sum;\n   |            ^^^ expected `isize`, found floating-point\
    \ number\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut odd_sum = 0;\n    for num in lst {\n        if num.is_odd() {\n   \
    \         odd_sum += num;\n        }\n    }\n    odd_sum\n}\n\nfn main() {\n \
    \   let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpb6xq1y9n.rs:14:16\n   |\n14 |         if num.is_odd() {\n\
    \   |                ^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpb6xq1y9n.rs:15:21\n   |\n15 |\
    \             odd_sum += num;\n   |                     ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n    }\n  \
    \  let mut sum = 0;\n    let mut curr = &lst[0];\n    for (i, item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 1 {\n            sum += item;\n        }\n        if\
    \ item == 0 {\n            sum += item;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `&f64` to `{integer}`\n  --> /tmp/tmpa6kmyw2h.rs:16:17\n\
    \   |\n16 |             sum += item;\n   |                 ^^ no implementation\
    \ for `{integer} += &f64`\n   |\n   = help: the trait `AddAssign<&f64>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: can't compare `&f64` with `{integer}`\n\
    \  --> /tmp/tmpa6kmyw2h.rs:18:17\n   |\n18 |         if item == 0 {\n   |    \
    \             ^^ no implementation for `&f64 == {integer}`\n   |\n   = help: the\
    \ trait `PartialEq<{integer}>` is not implemented for `&f64`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpa6kmyw2h.rs:18:20\n   |\n18 |         if item\
    \ == 0 {\n   |                    ^\n   |                    |\n   |         \
    \           expected `f64`, found integer\n   |                    help: use a\
    \ float literal: `0.0`\n\nerror[E0277]: cannot add-assign `&f64` to `{integer}`\n\
    \  --> /tmp/tmpa6kmyw2h.rs:19:17\n   |\n19 |             sum += item;\n   |  \
    \               ^^ no implementation for `{integer} += &f64`\n   |\n   = help:\
    \ the trait `AddAssign<&f64>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => 0,\n        _ => lst.iter().fold(0,\
    \ |x, y| x * x + y).unwrap_or(0)\n    }\n}\n\nfn main() {\n    let candidate =\
    \ double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n \
    \   assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&f64` to `{integer}`\n  --> /tmp/tmpdz05sqg0.rs:11:46\n\
    \   |\n11 |         _ => lst.iter().fold(0, |x, y| x * x + y).unwrap_or(0)\n \
    \  |                                              ^ no implementation for `{integer}\
    \ + &f64`\n   |\n   = help: the trait `Add<&f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0599]:\
    \ no method named `unwrap_or` found for type `{integer}` in the current scope\n\
    \  --> /tmp/tmpdz05sqg0.rs:11:51\n   |\n11 |         _ => lst.iter().fold(0, |x,\
    \ y| x * x + y).unwrap_or(0)\n   |                                           \
    \        ^^^^^^^^^ method not found in `{integer}`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    debug_assert_eq!(lst.len(), 5);\n    let mut sum =\
    \ 0.0;\n    for i in lst {\n        if !i.is_finite() {\n            continue;\n\
    \        }\n        if i.is_negative() {\n            continue;\n        }\n \
    \       sum += i * i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "warning: use of deprecated associated function `core::f64::<impl f64>::is_negative`:\
    \ renamed to is_sign_negative\n  --> /tmp/tmpapfor0pe.rs:15:14\n   |\n15 |   \
    \      if i.is_negative() {\n   |              ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]`\
    \ on by default\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpapfor0pe.rs:20:5\n\
    \   |\n8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n20 |     sum\n   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    use std::i64;\n    if lst.len() == 0 {\n        return\
    \ 0;\n    }\n\n    // Compute the sum\n    let mut total_sum = 0;\n    for num\
    \ in lst {\n        if num < 0 {\n            continue;\n        }\n        total_sum\
    \ += num;\n    }\n\n    // The list has been sorted in descending order, so all\
    \ even values are negative.\n    if total_sum % 2 == 0 {\n        return 0;\n\
    \    }\n\n    // Compute the sum squared\n    let mut total_squared_sum = 0;\n\
    \    for num in lst {\n        if num < 0 {\n            continue;\n        }\n\
    \        total_squared_sum += num * num;\n    }\n\n    // If the sum is even,\
    \ then the square of the difference is the sum.\n    if total_squared_sum % 2\
    \ == 0 {\n        return total_sum;\n    }\n\n    // Otherwise, return the sum\
    \ of the squared difference and the squared sum.\n    return total_squared_sum\
    \ + total_sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::i64`\n --> /tmp/tmp2kc28buj.rs:9:9\n  |\n\
    9 |     use std::i64;\n  |         ^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]`\
    \ on by default\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2kc28buj.rs:17:18\n\
    \   |\n17 |         if num < 0 {\n   |                  ^\n   |              \
    \    |\n   |                  expected `f64`, found integer\n   |            \
    \      help: use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64`\
    \ to `{integer}`\n  --> /tmp/tmp2kc28buj.rs:20:19\n   |\n20 |         total_sum\
    \ += num;\n   |                   ^^ no implementation for `{integer} += f64`\n\
    \   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2kc28buj.rs:31:18\n   |\n31 |\
    \         if num < 0 {\n   |                  ^\n   |                  |\n   |\
    \                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp2kc28buj.rs:34:27\n   |\n34 |         total_squared_sum += num\
    \ * num;\n   |                           ^^ no implementation for `{integer} +=\
    \ f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 4 previous errors; 1 warning emitted\n\nSome er"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match (lst.len() as isize){\n        1 => 0,\n   \
    \     2 => 1,\n        3 => 2,\n        _ => {\n            let mut total: isize\
    \ = 0;\n            for i in lst {\n                match i as f64 {\n       \
    \             0... => break,\n                    1 => total += 1,\n         \
    \           i if i > 0 => total += i * (i + 1),\n                    i if i <\
    \ 0 => total += i * (-i + 1),\n                }\n            }\n            total\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0586]: inclusive range with no end\n  --> /tmp/tmp90qwrmav.rs:17:22\n\
    \   |\n17 |                     0... => break,\n   |                      ^^^\
    \ help: use `..` instead\n   |\n   = note: inclusive ranges must be bounded at\
    \ the end (`..=b` or `a..=b`)\n\nwarning: unnecessary parentheses around `match`\
    \ scrutinee expression\n --> /tmp/tmp90qwrmav.rs:9:11\n  |\n9 |     match (lst.len()\
    \ as isize){\n  |           ^                  ^\n  |\n  = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n  |\n9 -     match (lst.len()\
    \ as isize){\n9 +     match lst.len() as isize{\n  | \n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp90qwrmav.rs:17:21\n   |\n16 |                 match i as\
    \ f64 {\n   |                       -------- this expression has type `f64`\n\
    17 |                     0... => break,\n   |                     ^\n   |    \
    \                 |\n   |                     expected `f64`, found integer\n\
    \   |                     help: use a float literal: `0.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp90qwrmav.rs:18:21\n   |\n16 |                 match i as\
    \ f64 {\n   |                       -------- this expression has type `f64`\n\
    17 |                     0... => break,\n18 |                     1 => total +=\
    \ 1,\n   |                     ^\n   |                     |\n   |           \
    \          expected `f64`, found integer\n   |                     help: use a\
    \ float literal: `1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp90qwrmav.rs:19:30\n\
    \   |\n19 |                     i if i > 0 => total += i * (i + 1),\n   |    \
    \                          ^\n   |                              |\n   |      \
    \                        expected `f64`, found integer\n   |                 \
    \             help: use a float literal: `0.0`\n\nerror[E0277]: cannot add `{integer}`\
    \ to `f64`\n  --> /tmp/tmp90qwrmav.rs:19:51\n   |\n19 |                     i\
    \ if i > 0 => total += i * (i + 1),\n   |                                    \
    \               ^ no implementation for `f64 + {integer}`\n   |\n   = help: the\
    \ trait `Add<{integer}>` is not implemented for `f64`\n   = he"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter().filter(|num| num.is_odd()).fold(0.0, |acc,\
    \ num| acc + num * num).clone() + 0.0\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&f64` in the\
    \ current scope\n --> /tmp/tmpfne4cim2.rs:9:33\n  |\n9 |     lst.iter().filter(|num|\
    \ num.is_odd()).fold(0.0, |acc, num| acc + num * num).clone() + 0.0\n  |     \
    \                            ^^^^^^ method not found in `&&f64`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpfne4cim2.rs:9:5\n  |\n8 | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n  |                                            ----- expected\
    \ `isize` because of return type\n9 |     lst.iter().filter(|num| num.is_odd()).fold(0.0,\
    \ |acc, num| acc + num * num).clone() + 0.0\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut total: f64 = 0;\n    for num in lst {\n  \
    \      if num > 0 {\n            total += num;\n        }\n    }\n    total *\
    \ total\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa0w7u_56.rs:9:26\n  |\n9 |\
    \     let mut total: f64 = 0;\n  |                    ---   ^\n  |           \
    \         |     |\n  |                    |     expected `f64`, found integer\n\
    \  |                    |     help: use a float literal: `0.0`\n  |          \
    \          expected due to this\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa0w7u_56.rs:11:18\n\
    \   |\n11 |         if num > 0 {\n   |                  ^\n   |              \
    \    |\n   |                  expected `f64`, found integer\n   |            \
    \      help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpa0w7u_56.rs:15:5\n   |\n8  | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n15 |     total * total\n   |     ^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut total = 0;\n    for i in lst {\n        if\
    \ !i.is_integer() {\n            return 0;\n        }\n        total += i.abs();\n\
    \    }\n    total\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpz188xmiw.rs:11:15\n   |\n11 |         if !i.is_integer()\
    \ {\n   |               ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpz188xmiw.rs:14:15\n  \
    \ |\n14 |         total += i.abs();\n   |               ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let len = lst.length;\n    let mut sum = 0.0;\n  \
    \  for i in 0..len {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]*lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `length` on type `Vec<f64>`\n --> /tmp/tmpitp29v3n.rs:9:19\n\
    \  |\n9 |     let len = lst.length;\n  |                   ^^^^^^ unknown field\n\
    \nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpitp29v3n.rs:12:19\n\
    \   |\n12 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n12 |         if lst[i] % 2.0 == 1 {\n   |                      ++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpitp29v3n.rs:16:12\n   |\n8  |\
    \ fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                   \
    \                         ----- expected `isize` because of return type\n...\n\
    16 |     return sum;\n   |            ^^^ expected `isize`, found `f64`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0609.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    \n    // Initialize a variable to store the result.\n\
    \    let mut sum: isize = 0;\n    \n    // Iterate through the list and accumulate\
    \ the result into the sum variable.\n    for (i, &x) in lst.iter().enumerate()\
    \ {\n        if x % 2 == 1 {\n            sum += x;\n        }\n    }\n    \n\
    \    // Return the result of the sum variable.\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpyi1a_7mq.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |         if x % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `isize`\n  --> /tmp/tmpyi1a_7mq.rs:16:17\n   |\n\
    16 |             sum += x;\n   |                 ^^ no implementation for `isize\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut square = 0isize;\n    for &n in lst {\n  \
    \      if n < 0 {\n            return 0isize;\n        }\n        if n > 0 {\n\
    \            square += (n - 1) * n;\n        }\n    }\n    square\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpge8l2ny9.rs:10:9\n   |\n\
    10 |     for &n in lst {\n   |         ^^    --- this expression has type `Option<f64>`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `f64`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n    }\n  \
    \  let mut sum = 0;\n    for i in lst.iter().filter(|&x| x.is_odd()) {\n     \
    \   sum += i * i;\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for reference `&f64` in the\
    \ current scope\n  --> /tmp/tmpmream476.rs:13:39\n   |\n13 |     for i in lst.iter().filter(|&x|\
    \ x.is_odd()) {\n   |                                       ^^^^^^ method not\
    \ found in `&f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  -->\
    \ /tmp/tmpmream476.rs:14:13\n   |\n14 |         sum += i * i;\n   |          \
    \   ^^ no implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter()\n        .filter(|x| x.is_odd())\n    \
    \    .fold(0, |acc, x| acc + x)\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&f64` in the\
    \ current scope\n  --> /tmp/tmp9en8ai75.rs:10:23\n   |\n10 |         .filter(|x|\
    \ x.is_odd())\n   |                       ^^^^^^ method not found in `&&f64`\n\
    \nerror[E0277]: cannot add `&f64` to `isize`\n  --> /tmp/tmp9en8ai75.rs:11:31\n\
    \   |\n11 |         .fold(0, |acc, x| acc + x)\n   |                         \
    \      ^ no implementation for `isize + &f64`\n   |\n   = help: the trait `Add<&f64>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    let mut i = 0;\n    while i\
    \ < lst.len() {\n        let e = lst[i];\n        if e != 0.0 && !(e % 1.0) {\n\
    \            sum += e*e;\n        }\n        i += 1;\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0600]: cannot apply unary operator `!` to type `f64`\n  --> /tmp/tmp6dth4org.rs:13:24\n\
    \   |\n13 |         if e != 0.0 && !(e % 1.0) {\n   |                        ^^^^^^^^^^\
    \ cannot apply unary operator `!`\n\nerror[E0277]: cannot add-assign `f64` to\
    \ `{integer}`\n  --> /tmp/tmp6dth4org.rs:14:17\n   |\n14 |             sum +=\
    \ e*e;\n   |                 ^^ no implementation for `{integer} += f64`\n   |\n\
    \   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  \
    \ = help: the following other types implement trait `AddAssign<Rhs>`:\n      \
    \       <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n          \
    \   <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128\
    \ as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as\
    \ AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0600.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n  lst.iter().filter(|x| x > 0).fold(0, |x, y| {x + y +\
    \ y})\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp55udvh7o.rs:9:29\n  |\n9 |\
    \   lst.iter().filter(|x| x > 0).fold(0, |x, y| {x + y + y})\n  |            \
    \                 ^ expected `&&f64`, found integer\n\nerror[E0277]: cannot add\
    \ `&f64` to `isize`\n --> /tmp/tmp55udvh7o.rs:9:50\n  |\n9 |   lst.iter().filter(|x|\
    \ x > 0).fold(0, |x, y| {x + y + y})\n  |                                    \
    \              ^ no implementation for `isize + &f64`\n  |\n  = help: the trait\
    \ `Add<&f64>` is not implemented for `isize`\n  = help: the following other types\
    \ implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n           \
    \ <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a\
    \ i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as\
    \ Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n\
    \          and 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut s = 0.;\n    for x in lst {\n        if x\
    \ % 2 != 0 {\n            s += x;\n        }\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpv2bxyug0.rs:11:14\n\
    \   |\n11 |         if x % 2 != 0 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n11 |         if x % 2.0 != 0 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpv2bxyug0.rs:15:5\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n15 |     s\n   |     ^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => 0,\n        _ => lst.iter().filter(|x|\
    \ x > 0.0).sum::<isize>() * lst.iter().filter(|x| x < 0.0).sum::<isize>() +\n\
    \            double_the_difference(lst.iter().filter(|x| x != 0.0).filter(|x|\
    \ x.is_integer()).collect()),\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpskgflo5_.rs:11:40\n   |\n\
    11 |         _ => lst.iter().filter(|x| x > 0.0).sum::<isize>() * lst.iter().filter(|x|\
    \ x < 0.0).sum::<isize>() +\n   |                                        ^^^ expected\
    \ `&&f64`, found floating-point number\n\nerror[E0277]: the trait bound `isize:\
    \ Sum<&f64>` is not satisfied\n    --> /tmp/tmpskgflo5_.rs:11:45\n     |\n11 \
    \  |         _ => lst.iter().filter(|x| x > 0.0).sum::<isize>() * lst.iter().filter(|x|\
    \ x < 0.0).sum::<isize>() +\n     |                                          \
    \   ^^^ the trait `Sum<&f64>` is not implemented for `isize`\n     |\n     = help:\
    \ the following other types implement trait `Sum<A>`:\n               <f32 as\
    \ Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n\
    \               <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n       \
    \        <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16\
    \ as Sum>\n             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpskgflo5_.rs:11:88\n   |\n11 |\
    \         _ => lst.iter().filter(|x| x > 0.0).sum::<isize>() * lst.iter().filter(|x|\
    \ x < 0.0).sum::<isize>() +\n   |                                            \
    \                                            ^^^ expected `&&f64`, found floating-point\
    \ number\n\nerror[E0277]: the trait bound `isize: Sum<&f64>` is not satisfied\n\
    \    --> /tmp/tmpskgflo5_.rs:11:93\n     |\n11   |         _ => lst.iter().filter(|x|\
    \ x > 0.0).sum::<isize>() * lst.iter().filter(|x| x < 0.0).sum::<isize>() +\n\
    \     |                                                                      \
    \                       ^^^ the trait `Sum<&f64>` is not implemented for `isize`\n\
    \     |\n     = help: the following other types implement trait `Sum<A>`:\n  \
    \             <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n           \
    \    <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n          "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sum = 0;\n    let mut current_number = lst[0];\n    let mut sum_squares\
    \ = 0;\n\n    for number in lst.iter().skip(1) {\n        if number % 2 == 0 {\n\
    \            sum += number;\n            sum_squares += number * number;\n   \
    \     }\n    }\n\n    return sum_squares + sum;\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmpk4h4tlnq.rs:17:19\n\
    \   |\n17 |         if number % 2 == 0 {\n   |                   ^ no implementation\
    \ for `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot add-assign `&f64` to `{integer}`\n  --> /tmp/tmpk4h4tlnq.rs:18:17\n\
    \   |\n18 |             sum += number;\n   |                 ^^ no implementation\
    \ for `{integer} += &f64`\n   |\n   = help: the trait `AddAssign<&f64>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmpk4h4tlnq.rs:19:25\n   |\n19 |             sum_squares += number\
    \ * number;\n   |                         ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --expl"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut total = 0;\n    for x in lst {\n        if\
    \ x > 0 {\n            total += x.pow(2);\n        }\n    }\n    total\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnl36zbsq.rs:11:16\n   |\n\
    11 |         if x > 0 {\n   |                ^\n   |                |\n   |  \
    \              expected `f64`, found integer\n   |                help: use a\
    \ float literal: `0.0`\n\nerror[E0599]: no method named `pow` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpnl36zbsq.rs:12:24\n   |\n12 |          \
    \   total += x.pow(2);\n   |                        ^^^ help: there is an associated\
    \ function with a similar name: `powf`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n\n\
    \    let mut sum = 0.0;\n\n    for i in lst.iter().filter(|&x| x > 0) as f64 {\n\
    \        if i % 2.0 == 0.0 {\n            sum += i;\n        }\n    }\n\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpualjah_h.rs:15:41\n   |\n\
    15 |     for i in lst.iter().filter(|&x| x > 0) as f64 {\n   |               \
    \                          ^ expected `&f64`, found integer\n\nerror[E0277]: `f64`\
    \ is not an iterator\n  --> /tmp/tmpualjah_h.rs:15:14\n   |\n15 |     for i in\
    \ lst.iter().filter(|&x| x > 0) as f64 {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `f64` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `f64`\n   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpualjah_h.rs:21:5\n\
    \   |\n8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n21 |     sum\n   |     ^^^ expected `isize`, found floating-point number\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter().filter(|x| x < f64::EPSILON).fold(0, |a,\
    \ b| a + b).sqrt()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa_5dqcen.rs:9:31\n  |\n9 |\
    \     lst.iter().filter(|x| x < f64::EPSILON).fold(0, |a, b| a + b).sqrt()\n \
    \ |                               ^^^^^^^^^^^^ expected `&&f64`, found `f64`\n\
    \nerror[E0277]: cannot add `&f64` to `{integer}`\n --> /tmp/tmpa_5dqcen.rs:9:62\n\
    \  |\n9 |     lst.iter().filter(|x| x < f64::EPSILON).fold(0, |a, b| a + b).sqrt()\n\
    \  |                                                              ^ no implementation\
    \ for `{integer} + &f64`\n  |\n  = help: the trait `Add<&f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `Add<Rhs>`:\n\
    \            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n      \
    \      <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n          \
    \  <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a\
    \ i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\
    \nerror[E0689]: can't call method `sqrt` on ambiguous numeric type `{integer}`\n\
    \ --> /tmp/tmpa_5dqcen.rs:9:67\n  |\n9 |     lst.iter().filter(|x| x < f64::EPSILON).fold(0,\
    \ |a, b| a + b).sqrt()\n  |                                                  \
    \                 ^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0689.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  \n    let mut sum = 0;\n    for n in lst {\n        if n % 2 != 0 {\n     \
    \       sum += n * n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpfde79l5r.rs:15:14\n\
    \   |\n15 |         if n % 2 != 0 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |         if n % 2.0 != 0 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpfde79l5r.rs:16:17\n  \
    \ |\n16 |             sum += n * n;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum: f64 = 0.0;\n    for x in lst {\n    \
    \    if x.is_odd() {\n            sum += x;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpuyk9ng4v.rs:11:14\n   |\n11 |         if x.is_odd() {\n\
    \   |              ^^^^^^ method not found in `f64`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuyk9ng4v.rs:15:5\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n15 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum: f64 = 0;\n    for i in lst\n        .iter()\n\
    \        .filter_map(|x| if x.is_integer() { Ok(x * x) } else { Err(()) })\n \
    \       .filter_map(|x| if x != 0 { Ok(x * x) } else { Err(()) })\n    {\n   \
    \     sum += i.0;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjn4p502m.rs:9:24\n  |\n9 |\
    \     let mut sum: f64 = 0;\n  |                  ---   ^\n  |               \
    \   |     |\n  |                  |     expected `f64`, found integer\n  |   \
    \               |     help: use a float literal: `0.0`\n  |                  expected\
    \ due to this\n\nerror[E0599]: no method named `is_integer` found for reference\
    \ `&f64` in the current scope\n  --> /tmp/tmpjn4p502m.rs:12:30\n   |\n12 |   \
    \      .filter_map(|x| if x.is_integer() { Ok(x * x) } else { Err(()) })\n   |\
    \                              ^^^^^^^^^^ method not found in `&f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjn4p502m.rs:12:45\n   |\n12 |         .filter_map(|x|\
    \ if x.is_integer() { Ok(x * x) } else { Err(()) })\n   |                    \
    \                         ^^^^^^^^^ expected enum `Option`, found enum `Result`\n\
    \   |\n   = note: expected enum `Option<_>`\n              found enum `Result<f64,\
    \ _>`\nhelp: try wrapping the expression in `Some`\n   |\n12 |         .filter_map(|x|\
    \ if x.is_integer() { Some(Ok(x * x)) } else { Err(()) })\n   |              \
    \                               +++++         +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjn4p502m.rs:12:64\n   |\n12 |         .filter_map(|x| if x.is_integer()\
    \ { Ok(x * x) } else { Err(()) })\n   |                                      \
    \                          ^^^^^^^ expected enum `Option`, found enum `Result`\n\
    \   |\n   = note: expected enum `Option<_>`\n              found enum `Result<_,\
    \ ()>`\nhelp: try wrapping the expression in `Some`\n   |\n12 |         .filter_map(|x|\
    \ if x.is_integer() { Ok(x * x) } else { Some(Err(())) })\n   |              \
    \                                                  +++++       +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjn4p502m.rs:13:37\n   |\n13 |         .filter_map(|x|\
    \ if x != 0 { Ok(x * x) } else { Err(()) })\n   |                            \
    \         ^^^^^^^^^ expected enum `Option`, found enum `Result`\n   |\n   = note:\
    \ expected enum `Option<_>`\n              found enum `Result<_, _>`\nhelp: try\
    \ wrapping the expression in `"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut res = 0.0;\n    let mut n = lst.len();\n    for &i in lst {\n     \
    \   if i >= 0 {\n            i += n - 1;\n            res += i;\n        }\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpay07knf_.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<f64>`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `f64`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpay07knf_.rs:20:5\n   |\n8  | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n20 |     res\n   |     ^^^ expected `isize`, found\
    \ floating-point number\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0.0; // initialized to 0 as sum will\
    \ be mutated\n    let mut last_one = 0; // initialized to 0 as last_one will be\
    \ mutated\n    for v in lst.iter() {\n        if v >= 0 {\n            sum +=\
    \ v\n        } else if v == 0.0 {\n            last_one = v;\n        } else {\n\
    \            sum += (v - last_one) * v\n        }\n    }\n    return sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpipqk97ba.rs:12:17\n   |\n\
    12 |         if v >= 0 {\n   |                 ^ expected `&f64`, found integer\n\
    \nerror[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmpipqk97ba.rs:14:21\n\
    \   |\n14 |         } else if v == 0.0 {\n   |                     ^^ no implementation\
    \ for `&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>` is not\
    \ implemented for `&f64`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpipqk97ba.rs:15:24\n   |\n10 |     let mut last_one = 0; // initialized\
    \ to 0 as last_one will be mutated\n   |                        - expected due\
    \ to this value\n...\n15 |             last_one = v;\n   |                   \
    \     ^ expected integer, found `&f64`\n\nerror[E0277]: cannot subtract `{integer}`\
    \ from `&f64`\n  --> /tmp/tmpipqk97ba.rs:17:23\n   |\n17 |             sum +=\
    \ (v - last_one) * v\n   |                       ^ no implementation for `&f64\
    \ - {integer}`\n   |\n   = help: the trait `Sub<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpipqk97ba.rs:20:12\n\
    \   |\n8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n20 |     return sum\n   |            ^^^ expected `isize`, found `f64`\n\n\
    error: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0\n    }\n\n \
    \   let mut tot = 0.0;\n    for i in lst\n    {\n        if i % 2 == 1\n     \
    \   {\n            tot += i;\n        }\n    }\n    tot\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp24tempqz.rs:16:14\n\
    \   |\n16 |         if i % 2 == 1\n   |              ^ no implementation for `f64\
    \ % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n16 |         if i % 2.0 == 1\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp24tempqz.rs:21:5\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n21 |     tot\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut total: f64 = 0.0;\n    for x in lst {\n  \
    \      if x.is_integer() {\n            total += x;\n        }\n        if x.is_odd()\
    \ {\n            total += x;\n        }\n        if x.is_negative() {\n      \
    \      total += 0.0;\n        }\n    }\n    if total == 0.0 {\n        total =\
    \ 0.0\n    }\n    total\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpuzusnwjb.rs:11:14\n   |\n11 |         if x.is_integer()\
    \ {\n   |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no\
    \ method named `is_odd` found for type `f64` in the current scope\n  --> /tmp/tmpuzusnwjb.rs:14:14\n\
    \   |\n14 |         if x.is_odd() {\n   |              ^^^^^^ method not found\
    \ in `f64`\n\nwarning: use of deprecated associated function `core::f64::<impl\
    \ f64>::is_negative`: renamed to is_sign_negative\n  --> /tmp/tmpuzusnwjb.rs:17:14\n\
    \   |\n17 |         if x.is_negative() {\n   |              ^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(deprecated)]` on by default\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuzusnwjb.rs:24:5\n   |\n8  | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n24 |     total\n   |     ^^^^^ expected `isize`,\
    \ found `f64`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => 0,\n        1 => lst[0].clone(),\n\
    \        2 => lst[0] + lst[1],\n        _ => if lst[0] < 0.0 || lst[1] < 0.0 {\n\
    \            0\n        } else if lst[0] % 2 == 1 {\n            lst[0] + double_the_difference(&[lst[1],\
    \ lst[2]]).clone() + double_the_difference(&[lst[2], lst[1]]).clone()\n      \
    \  } else if lst[0] % 2 == 0 {\n            lst[0] + double_the_difference(&[lst[1],\
    \ lst[0]]).clone() + double_the_difference(&[lst[0], lst[1]]).clone()\n      \
    \  } else {\n            0\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpv1humf4u.rs:11:14\n\
    \   |\n9  | /     match lst.len() {\n10 | |         0 => 0,\n   | |          \
    \    - this is found to be of type `isize`\n11 | |         1 => lst[0].clone(),\n\
    \   | |              ^^^^^^^^^^^^^^ expected `isize`, found `f64`\n12 | |    \
    \     2 => lst[0] + lst[1],\n...  |\n21 | |         }\n22 | |     }\n   | |_____-\
    \ `match` arms have incompatible types\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpv1humf4u.rs:15:26\n   |\n15 |         } else if lst[0] % 2 == 1\
    \ {\n   |                          ^ no implementation for `f64 % {integer}`\n\
    \   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n  \
    \ = help: the following other types implement trait `Rem<Rhs>`:\n            \
    \ <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a\
    \ i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32\
    \ as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n\
    \             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider\
    \ using a floating-point literal by writing it with `.0`\n   |\n15 |         }\
    \ else if lst[0] % 2.0 == 1 {\n   |                             ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpv1humf4u.rs:16:44\n   |\n16 |             lst[0]\
    \ + double_the_difference(&[lst[1], lst[2]]).clone() + double_the_difference(&[lst[2],\
    \ lst[1]]).clone()\n   |                                            ^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `&[f64; 2]`\n   |\n   = note: expected struct `Vec<f64>`\n\
    \           found reference `&[f64; 2]`\nhelp: try using a conversion method\n\
    \   |\n16 |             lst[0] + double_the_difference((&[lst[1], lst[2]]).to_vec()).clone()\
    \ + double_the_difference(&[lst[2], lst[1]]).clone()\n   |                   \
    \                         +                 ++++++++++\n\nerror[E0277]: cannot\
    \ add `isize` to `f64`\n  --> /tmp/tmpv1humf4u.rs:16:20\n   |\n16 |          \
    \   lst[0] + double_the_difference(&[lst[1], lst[2]]).clone() + double_the_difference(&[lst[2], "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut total = 0;\n    let mut n = lst.len();\n    for i in 0..n {\n     \
    \   if i != 0 && lst[i] % 2 == 1 {\n            total += lst[i] * lst[i];\n  \
    \      }\n    }\n    return total;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp7f3hv0v9.rs:15:29\n\
    \   |\n15 |         if i != 0 && lst[i] % 2 == 1 {\n   |                     \
    \        ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait\
    \ `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n    \
    \         <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n      \
    \       <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n          \
    \   <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a\
    \ isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point\
    \ literal by writing it with `.0`\n   |\n15 |         if i != 0 && lst[i] % 2.0\
    \ == 1 {\n   |                                ++\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n  --> /tmp/tmp7f3hv0v9.rs:16:19\n   |\n16 |          \
    \   total += lst[i] * lst[i];\n   |                   ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() { return 0; }\n\n    let mut sum\
    \ = lst[0];\n\n    for n in &lst[1..] {\n        if n.is_negative() {\n      \
    \      return 0;\n        }\n\n        sum += n * n;\n    }\n\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "warning: use of deprecated associated function `core::f64::<impl f64>::is_negative`:\
    \ renamed to is_sign_negative\n  --> /tmp/tmp_paievd9.rs:14:14\n   |\n14 |   \
    \      if n.is_negative() {\n   |              ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]`\
    \ on by default\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_paievd9.rs:21:5\n\
    \   |\n8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n21 |     sum\n   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for (i, item) in lst.iter().enumerate()\
    \ {\n        if item.is_even() {\n            sum += item;\n        } else if\
    \ item.is_negative() {\n            return 0;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_even` found for reference `&f64` in the\
    \ current scope\n  --> /tmp/tmpu1nxec2p.rs:11:17\n   |\n11 |         if item.is_even()\
    \ {\n   |                 ^^^^^^^ method not found in `&f64`\n\nwarning: use of\
    \ deprecated associated function `core::f64::<impl f64>::is_negative`: renamed\
    \ to is_sign_negative\n  --> /tmp/tmpu1nxec2p.rs:13:24\n   |\n13 |         } else\
    \ if item.is_negative() {\n   |                        ^^^^^^^^^^^\n   |\n   =\
    \ note: `#[warn(deprecated)]` on by default\n\nerror[E0277]: cannot add-assign\
    \ `&f64` to `{integer}`\n  --> /tmp/tmpu1nxec2p.rs:12:17\n   |\n12 |         \
    \    sum += item;\n   |                 ^^ no implementation for `{integer} +=\
    \ &f64`\n   |\n   = help: the trait `AddAssign<&f64>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors; 1 warning emitted\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter().map(|x| if x < 0 { 0 } else { x * x }).filter(|&x|\
    \ x != 0).sum()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq74djuvy.rs:9:31\n  |\n9 |\
    \     lst.iter().map(|x| if x < 0 { 0 } else { x * x }).filter(|&x| x != 0).sum()\n\
    \  |                               ^ expected `&f64`, found integer\n\nerror[E0308]:\
    \ `if` and `else` have incompatible types\n --> /tmp/tmpq74djuvy.rs:9:46\n  |\n\
    9 |     lst.iter().map(|x| if x < 0 { 0 } else { x * x }).filter(|&x| x != 0).sum()\n\
    \  |                                   -          ^^^^^ expected integer, found\
    \ `f64`\n  |                                   |\n  |                        \
    \           expected because of this\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.len() > 0 {\n        let mut sum_sqr = 0.0;\n\
    \        let mut sum_double = 0.0;\n        for value in lst.iter() {\n      \
    \      if value.is_integer() {\n                sum_sqr += value.powi(2);\n  \
    \              sum_double += value.powi(2);\n            }\n            else if\
    \ value >= 0.0 {\n                sum_sqr += value;\n                sum_double\
    \ += value;\n            }\n            else {\n                sum_sqr += 0.0\n\
    \            }\n        }\n        return sum_sqr - sum_double;\n    }\n    else\
    \ {\n        return 0;\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for reference `&f64` in\
    \ the current scope\n  --> /tmp/tmpiz55iod9.rs:13:22\n   |\n13 |             if\
    \ value.is_integer() {\n   |                      ^^^^^^^^^^ method not found\
    \ in `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiz55iod9.rs:17:30\n\
    \   |\n17 |             else if value >= 0.0 {\n   |                         \
    \     ^^^\n   |                              |\n   |                         \
    \     expected `&f64`, found floating-point number\n   |                     \
    \         help: consider borrowing here: `&0.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpiz55iod9.rs:25:16\n   |\n8  | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n25 |         return sum_sqr - sum_double;\n   |\
    \                ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `f64`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x\
    \ % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp650yrsjr.rs:11:14\n\
    \   |\n11 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n11 |         if x % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp650yrsjr.rs:12:17\n  \
    \ |\n12 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for n in lst {\n        if n\
    \ % 2 == 1 {\n            sum += n.ln();\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpr1gwzeq2.rs:11:14\n\
    \   |\n11 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n11 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpr1gwzeq2.rs:12:17\n  \
    \ |\n12 |             sum += n.ln();\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum: f64 = f64::from(0.0);\n    for x in lst\
    \ {\n        if x != 0 && !x.is_integer() {\n            sum += x * x;\n     \
    \   }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6homl625.rs:11:17\n   |\n\
    11 |         if x != 0 && !x.is_integer() {\n   |                 ^\n   |    \
    \             |\n   |                 expected `f64`, found integer\n   |    \
    \             help: use a float literal: `0.0`\n\nerror[E0599]: no method named\
    \ `is_integer` found for type `f64` in the current scope\n  --> /tmp/tmp6homl625.rs:11:25\n\
    \   |\n11 |         if x != 0 && !x.is_integer() {\n   |                     \
    \    ^^^^^^^^^^ method not found in `f64`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6homl625.rs:15:5\n   |\n8  | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n15 |     sum\n   |     ^^^ expected `isize`, found\
    \ `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter().filter(|&x| x % 2 != 0).fold(0, |acc, &x|\
    \ {\n        acc + x.powf(2)\n    })\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n --> /tmp/tmpad7c06ip.rs:9:30\n\
    \  |\n9 |     lst.iter().filter(|&x| x % 2 != 0).fold(0, |acc, &x| {\n  |    \
    \                          ^ no implementation for `&f64 % {integer}`\n  |\n \
    \ = help: the trait `Rem<{integer}>` is not implemented for `&f64`\n  = help:\
    \ the following other types implement trait `Rem<Rhs>`:\n            <&'a f32\
    \ as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n            <&'a i128 as Rem<i128>>\n\
    \            <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n      \
    \      <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n            <&'a\
    \ isize as Rem<isize>>\n          and 54 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpad7c06ip.rs:10:22\n   |\n10 |         acc + x.powf(2)\n   |   \
    \                   ^\n   |                      |\n   |                     \
    \ expected `f64`, found integer\n   |                      help: use a float literal:\
    \ `2.0`\n\nerror[E0277]: cannot add `f64` to `isize`\n  --> /tmp/tmpad7c06ip.rs:10:13\n\
    \   |\n10 |         acc + x.powf(2)\n   |             ^ no implementation for\
    \ `isize + f64`\n   |\n   = help: the trait `Add<f64>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    \n    let even = lst.filter(|x| x % 2 == 0).count();\n\
    \    if even == 0 {\n        return 0;\n    }\n    \n    let mut odd = lst.filter(|x|\
    \ x % 2 != 0).count();\n    \n    for x in lst {\n        if x % 2 != 0 {\n  \
    \          odd += 1;\n        }\n    }\n    \n    odd * odd\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmplqekff5n.rs:10:20\n\
    \    |\n10  |       let even = lst.filter(|x| x % 2 == 0).count();\n    |    \
    \                  ^^^^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n\
    \            which is required by `&mut Vec<f64>: Iterator`\n            `[f64]:\
    \ Iterator`\n            which is required by `&mut [f64]: Iterator`\n\nerror[E0599]:\
    \ `Vec<f64>` is not an iterator\n   --> /tmp/tmplqekff5n.rs:15:23\n    |\n15 \
    \ |       let mut odd = lst.filter(|x| x % 2 != 0).count();\n    |           \
    \              ^^^^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n       \
    \     which is required by `&mut Vec<f64>: Iterator`\n            `[f64]: Iterator`\n\
    \            which is required by `&mut [f64]: Iterator`\n\nerror[E0277]: cannot\
    \ mod `f64` by `{integer}`\n  --> /tmp/tmplqekff5n.rs:18:14\n   |\n18 |      \
    \   if x % 2 != 0 {\n   |              ^ no implementation for `f64 % {integer}`\n\
    \   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n  \
    \ = help: the following other types implement trait `Rem<Rhs>`:\n            \
    \ <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a\
    \ i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32\
    \ as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n\
    \             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider\
    \ using a floating-point literal by writing it with `.0`\n   |\n18 |         if\
    \ x % 2.0 != 0 {\n   |                 ++\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() { return 0; }\n    let mut n = 0.;\n\
    \    for i in &lst {\n        if *i >= 0 { n += *i; }\n    }\n    let mut sum\
    \ = 0;\n    for i in &lst {\n        if *i >= 0 { sum += *i; }\n    }\n    return\
    \ n + sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n   \
    \ assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnimbu0zq.rs:12:18\n   |\n\
    12 |         if *i >= 0 { n += *i; }\n   |                  ^\n   |          \
    \        |\n   |                  expected `f64`, found integer\n   |        \
    \          help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnimbu0zq.rs:16:18\n   |\n16 |         if *i >= 0 { sum += *i; }\n\
    \   |                  ^\n   |                  |\n   |                  expected\
    \ `f64`, found integer\n   |                  help: use a float literal: `0.0`\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpnimbu0zq.rs:16:26\n\
    \   |\n16 |         if *i >= 0 { sum += *i; }\n   |                          ^^\
    \ no implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add `{integer}` to `f64`\n \
    \ --> /tmp/tmpnimbu0zq.rs:18:14\n   |\n18 |     return n + sum;\n   |        \
    \      ^ no implementation for `f64 + {integer}`\n   |\n   = help: the trait `Add<{integer}>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for (i, &x) in lst.iter().enumerate()\
    \ {\n        if x % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpq_hn8min.rs:11:14\n\
    \   |\n11 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n11 |         if x % 2.0 == 1 {\n   |                 ++\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpq_hn8min.rs:12:17\n  \
    \ |\n12 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() { return 0; }\n\n    let mut sum:\
    \ f64 = 0.0;\n    let mut n = 0;\n    for num in lst.iter() {\n        if num\
    \ > 0.0 && num % 1.0 != 0.0 {\n            sum += num * num;\n            n +=\
    \ 1;\n        }\n    }\n    sum /= 2.0;\n    n += 2;\n    n -= 2;\n    if n !=\
    \ 0 {\n        return sum;\n    }\n    return 0.0;\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztpldg9x.rs:14:18\n   |\n\
    14 |         if num > 0.0 && num % 1.0 != 0.0 {\n   |                  ^^^\n \
    \  |                  |\n   |                  expected `&f64`, found floating-point\
    \ number\n   |                  help: consider borrowing here: `&0.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpztpldg9x.rs:23:16\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n23 |         return sum;\n   |\
    \                ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sum = 0.0;\n    let mut index = 0;\n    while index < lst.len() {\n\
    \        if lst[index] % 2 == 1 {\n            sum += lst[index] * lst[index];\n\
    \        }\n        index += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpz1x32a2z.rs:15:23\n\
    \   |\n15 |         if lst[index] % 2 == 1 {\n   |                       ^ no\
    \ implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64\
    \ as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as\
    \ Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n\
    \             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n  \
    \         and 54 others\nhelp: consider using a floating-point literal by writing\
    \ it with `.0`\n   |\n15 |         if lst[index] % 2.0 == 1 {\n   |          \
    \                ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz1x32a2z.rs:20:5\n\
    \   |\n8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n20 |     sum\n   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() { return 0; }\n    else if lst.len()\
    \ == 1 {\n        return lst[0]\n    }\n    let mut total = 0isize;\n    for i\
    \ in lst.iter() {\n        if i % 2 != 0 {\n            total += i;\n        }\n\
    \    }\n    return total;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpceaz7dp_.rs:11:16\n   |\n\
    8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                \
    \                            ----- expected `isize` because of return type\n...\n\
    11 |         return lst[0]\n   |                ^^^^^^ expected `isize`, found\
    \ `f64`\n\nerror[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmpceaz7dp_.rs:15:14\n\
    \   |\n15 |         if i % 2 != 0 {\n   |              ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot add-assign `&f64` to `isize`\n  --> /tmp/tmpceaz7dp_.rs:16:19\n\
    \   |\n16 |             total += i;\n   |                   ^^ no implementation\
    \ for `isize += &f64`\n   |\n   = help: the trait `AddAssign<&f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut s = 0.;\n    let mut cur = lst[0].clone();\n    for i in 1..lst.len()\
    \ {\n        let n = lst[i].clone() * 2.;\n        cur += n;\n        if cur %\
    \ 1. == 0.o {\n            s += cur;\n        }\n    }\n    s \n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0610]: `{integer}` is a primitive type and therefore doesn't have\
    \ fields\n  --> /tmp/tmpshh76nch.rs:17:26\n   |\n17 |         if cur % 1. == 0.o\
    \ {\n   |                          ^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpshh76nch.rs:21:5\n   |\n8  | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n21 |     s \n   |     ^ expected `isize`, found\
    \ `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0610.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter().filter(|&x| x != 0.0).filter(|&x| x.is_integer()).map(|&x|\
    \ x * x).sum()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&f64` with `{float}`\n --> /tmp/tmpt3b2hx1t.rs:9:30\n\
    \  |\n9 |     lst.iter().filter(|&x| x != 0.0).filter(|&x| x.is_integer()).map(|&x|\
    \ x * x).sum()\n  |                              ^^ no implementation for `&f64\
    \ == {float}`\n  |\n  = help: the trait `PartialEq<{float}>` is not implemented\
    \ for `&f64`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror[E0599]: no method named `is_integer` found for reference `&f64`\
    \ in the current scope\n --> /tmp/tmpt3b2hx1t.rs:9:52\n  |\n9 |     lst.iter().filter(|&x|\
    \ x != 0.0).filter(|&x| x.is_integer()).map(|&x| x * x).sum()\n  |           \
    \                                         ^^^^^^^^^^ method not found in `&f64`\n\
    \nerror[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    --> /tmp/tmpt3b2hx1t.rs:9:82\n\
    \     |\n9    |     lst.iter().filter(|&x| x != 0.0).filter(|&x| x.is_integer()).map(|&x|\
    \ x * x).sum()\n     |                                                       \
    \                           ^^^ the trait `Sum<f64>` is not implemented for `isize`\n\
    \     |\n     = help: the following other types implement trait `Sum<A>`:\n  \
    \             <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n           \
    \    <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n    let mut\
    \ total = 0;\n    let mut n = lst.len();\n    while n > 1 {\n        let mut q\
    \ = lst[n/2];\n        if q % 2 != 0 {\n            total += odd;\n          \
    \  odd = 1;\n        } else {\n            total += even;\n            even =\
    \ 0;\n        }\n        n /= 2;\n    }\n    total += even;\n    total\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpa3zpecvt.rs:15:14\n\
    \   |\n15 |         if q % 2 != 0 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n15 |         if q % 2.0 != 0 {\n   |                 ++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    use std::cmp::Ordering;\n    let mut s = 0;\n    for\
    \ x in lst {\n        if x.is_integer() || x.is_signed() {\n            s += x;\n\
    \        }\n    }\n    if s == 0 {\n        return 0;\n    }\n    let mut d =\
    \ 0;\n    d.cmp(&s);\n    if d.is_less_than(Ordering::Greater) {\n        return\
    \ s\n    }\n    else {\n        let mut d = -d;\n        d.cmp(&s);\n        if\
    \ d.is_less_than(Ordering::Greater) {\n            return s\n        }\n     \
    \   else {\n            return s + d\n        }\n    }\n}\n\nfn main() {\n   \
    \ let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpad7iv6nl.rs:12:14\n   |\n12 |         if x.is_integer()\
    \ || x.is_signed() {\n   |              ^^^^^^^^^^ method not found in `f64`\n\
    \nerror[E0599]: no method named `is_signed` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpad7iv6nl.rs:12:32\n   |\n12 |         if x.is_integer()\
    \ || x.is_signed() {\n   |                                ^^^^^^^^^ method not\
    \ found in `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  -->\
    \ /tmp/tmpad7iv6nl.rs:13:15\n   |\n13 |             s += x;\n   |            \
    \   ^^ no implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0599]: no method named `is_less_than` found\
    \ for type `{integer}` in the current scope\n  --> /tmp/tmpad7iv6nl.rs:21:10\n\
    \   |\n21 |     if d.is_less_than(Ordering::Greater) {\n   |          ^^^^^^^^^^^^\
    \ method not found in `{integer}`\n\nerror[E0599]: no method named `is_less_than`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpad7iv6nl.rs:27:14\n\
    \   |\n27 |         if d.is_less_than(Ordering::Greater) {\n   |             \
    \ ^^^^^^^^^^^^ method not found in `isize`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst {\n        [] => 0,\n        _ => lst.iter().filter(|x|\
    \ x.is_odd()).sum::<isize>()\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0529]: expected an array or slice, found `Vec<f64>`\n  --> /tmp/tmpa2doqyxg.rs:10:9\n\
    \   |\n9  |     match lst {\n   |           --- help: consider slicing here: `lst[..]`\n\
    10 |         [] => 0,\n   |         ^^ pattern cannot match with input type `Vec<f64>`\n\
    \nerror[E0599]: no method named `is_odd` found for reference `&&f64` in the current\
    \ scope\n  --> /tmp/tmpa2doqyxg.rs:11:38\n   |\n11 |         _ => lst.iter().filter(|x|\
    \ x.is_odd()).sum::<isize>()\n   |                                      ^^^^^^\
    \ method not found in `&&f64`\n\nerror[E0277]: the trait bound `isize: Sum<&f64>`\
    \ is not satisfied\n    --> /tmp/tmpa2doqyxg.rs:11:48\n     |\n11   |        \
    \ _ => lst.iter().filter(|x| x.is_odd()).sum::<isize>()\n     |              \
    \                                  ^^^ the trait `Sum<&f64>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0529,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut result = 0.;\n    for n in lst {\n       \
    \ if n % 2 == 1 {\n            result += *n;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpr0bsjgi2.rs:11:14\n\
    \   |\n11 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n11 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0614]:\
    \ type `f64` cannot be dereferenced\n  --> /tmp/tmpr0bsjgi2.rs:12:23\n   |\n12\
    \ |             result += *n;\n   |                       ^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr0bsjgi2.rs:15:5\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n15 |     result\n   |     ^^^^^^\
    \ expected `isize`, found floating-point number\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0614.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum: f64 = 0.0;\n    for (i, &x) in lst.iter().enumerate()\
    \ {\n        if x%2 == 1 && x != 0.0 {\n            sum += x;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n \
    \   assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpkvsblrhh.rs:11:13\n\
    \   |\n11 |         if x%2 == 1 && x != 0.0 {\n   |             ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n11 |         if x%2.0 == 1 && x != 0.0 {\n   |               ++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkvsblrhh.rs:15:5\n   |\n8  | fn\
    \ double_the_difference(lst: Vec<f64>) -> isize {\n   |                      \
    \                      ----- expected `isize` because of return type\n...\n15\
    \ |     sum\n   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => 0,\n        1 => lst.iter().filter(|x|\
    \ x > 0f64).sum(),\n        _ => {\n            let mut sum: f64 = 0;\n      \
    \      for num in lst.iter() {\n                if num > 0f64 {\n            \
    \        sum += num;\n                }\n            }\n            sum\n    \
    \    }\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl3v_jne2.rs:11:40\n   |\n\
    11 |         1 => lst.iter().filter(|x| x > 0f64).sum(),\n   |               \
    \                         ^^^^ expected `&&f64`, found `f64`\n\nerror[E0277]:\
    \ the trait bound `isize: Sum<&f64>` is not satisfied\n    --> /tmp/tmpl3v_jne2.rs:11:46\n\
    \     |\n11   |         1 => lst.iter().filter(|x| x > 0f64).sum(),\n     |  \
    \                                            ^^^ the trait `Sum<&f64>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl3v_jne2.rs:13:32\n   |\n13 |             let\
    \ mut sum: f64 = 0;\n   |                          ---   ^\n   |             \
    \             |     |\n   |                          |     expected `f64`, found\
    \ integer\n   |                          |     help: use a float literal: `0.0`\n\
    \   |                          expected due to this\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl3v_jne2.rs:15:26\n   |\n15 |                 if num >\
    \ 0f64 {\n   |                          ^^^^\n   |                          |\n\
    \   |                          expected `&f64`, found `f64`\n   |            \
    \              help: consider borrowing here: `&0f64`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl3v_jne2.rs:19:13\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n19 |             sum\n   |   \
    \          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    \n    let mut sum = 0;\n    for i in lst.iter() {\n\
    \        if !i.is_positive() || i.is_integer() || i == 0.0 {\n            continue;\n\
    \        }\n        sum += i.powf(2);\n    }\n    \n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "warning: use of deprecated associated function `core::f64::<impl f64>::is_positive`:\
    \ renamed to is_sign_positive\n  --> /tmp/tmpvxyqqkt_.rs:12:15\n   |\n12 |   \
    \      if !i.is_positive() || i.is_integer() || i == 0.0 {\n   |             \
    \  ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]` on by default\n\nerror[E0599]:\
    \ no method named `is_integer` found for reference `&f64` in the current scope\n\
    \  --> /tmp/tmpvxyqqkt_.rs:12:34\n   |\n12 |         if !i.is_positive() || i.is_integer()\
    \ || i == 0.0 {\n   |                                  ^^^^^^^^^^ method not found\
    \ in `&f64`\n\nerror[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmpvxyqqkt_.rs:12:52\n\
    \   |\n12 |         if !i.is_positive() || i.is_integer() || i == 0.0 {\n   |\
    \                                                    ^^ no implementation for\
    \ `&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvxyqqkt_.rs:15:23\n\
    \   |\n15 |         sum += i.powf(2);\n   |                       ^\n   |    \
    \                   |\n   |                       expected `f64`, found integer\n\
    \   |                       help: use a float literal: `2.0`\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpvxyqqkt_.rs:15:13\n  \
    \ |\n15 |         sum += i.powf(2);\n   |             ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\ner"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    \n    let mut sum = 0.0;\n    \n    for num in lst\
    \ {\n        if num > 0.0 {\n            if num % 2 == 0 {\n                sum\
    \ += num;\n            }\n        }\n    }\n    \n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpo8krngxy.rs:14:20\n\
    \   |\n14 |             if num % 2 == 0 {\n   |                    ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n14 |             if num % 2.0 == 0 {\n   |                     \
    \  ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo8krngxy.rs:20:5\n   |\n\
    8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                \
    \                            ----- expected `isize` because of return type\n...\n\
    20 |     sum\n   |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    let mut square_sum = 0;\n  \
    \  for n in lst.iter() {\n        if n % 2 == 1 {\n            sum += n;\n   \
    \         square_sum += n * n;\n        }\n    }\n\n    if sum == 0 {\n      \
    \  return 0;\n    }\n    sum * sum / square_sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmpt3yt03zt.rs:12:14\n\
    \   |\n12 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot add-assign `&f64` to `{integer}`\n  --> /tmp/tmpt3yt03zt.rs:13:17\n\
    \   |\n13 |             sum += n;\n   |                 ^^ no implementation for\
    \ `{integer} += &f64`\n   |\n   = help: the trait `AddAssign<&f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpt3yt03zt.rs:14:24\n\
    \   |\n14 |             square_sum += n * n;\n   |                        ^^ no\
    \ implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter().filter_map(|x| if x > 0.0 { Some(x * x)\
    \ } else { None })\n        .sum::<isize>() \n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpru01b22g.rs:9:38\n  |\n9 |\
    \     lst.iter().filter_map(|x| if x > 0.0 { Some(x * x) } else { None })\n  |\
    \                                      ^^^\n  |                              \
    \        |\n  |                                      expected `&f64`, found floating-point\
    \ number\n  |                                      help: consider borrowing here:\
    \ `&0.0`\n\nerror[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n\
    \    --> /tmp/tmpru01b22g.rs:10:10\n     |\n10   |         .sum::<isize>() \n\
    \     |          ^^^ the trait `Sum<f64>` is not implemented for `isize`\n   \
    \  |\n     = help: the following other types implement trait `Sum<A>`:\n     \
    \          <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n              \
    \ <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128 as\
    \ Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let len = lst.len();\n    if len == 0 {\n        return\
    \ 0;\n    }\n\n    let mut total = 0;\n    for i in 0..len {\n        if let Some(_)\
    \ = lst.iter().skip(i).next() {\n            continue;\n        }\n        let\
    \ val = lst.iter().skip(i).sum();\n        if val % 2 == 0 {\n            total\
    \ += val;\n        }\n    }\n\n    if total % 2 == 0 {\n        return total /\
    \ 2;\n    } else {\n        return total / 2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpt5ikr17d.rs:19:13\n\
    \   |\n19 |         let val = lst.iter().skip(i).sum();\n   |             ^^^\
    \ consider giving `val` a type\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for d in lst.iter() {\n    \
    \    if d > 0 {\n            sum += d*d;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbl0uolz7.rs:11:16\n   |\n\
    11 |         if d > 0 {\n   |                ^ expected `&f64`, found integer\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpbl0uolz7.rs:12:17\n\
    \   |\n12 |             sum += d*d;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut result: f64 = 0.;\n    for num in lst {\n\
    \        if num > 0.0 && num % 1 != 0 {\n            result += num * num;\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpi3ljrfg4.rs:11:29\n\
    \   |\n11 |         if num > 0.0 && num % 1 != 0 {\n   |                     \
    \        ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait\
    \ `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n    \
    \         <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n      \
    \       <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n          \
    \   <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a\
    \ isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point\
    \ literal by writing it with `.0`\n   |\n11 |         if num > 0.0 && num % 1.0\
    \ != 0 {\n   |                                ++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpi3ljrfg4.rs:15:5\n   |\n8  | fn double_the_difference(lst: Vec<f64>)\
    \ -> isize {\n   |                                            ----- expected `isize`\
    \ because of return type\n...\n15 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sum = 0.0;\n    for n in lst.iter() {\n        if n % 2 == 1 {\n  \
    \          sum += n * n;\n        }\n    }\n    return sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmputkfgbst.rs:14:14\n\
    \   |\n14 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmputkfgbst.rs:18:12\n\
    \   |\n8  | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |         \
    \                                   ----- expected `isize` because of return type\n\
    ...\n18 |     return sum\n   |            ^^^ expected `isize`, found `f64`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => 0,\n        _ => lst.iter().filter(|&x|\
    \ {\n            x.is_some() && x.unwrap_or(0.0).is_some() && (x.unwrap_or(0.0).unwrap_or(0.0).is_some()\
    \ || x.unwrap_or(0.0).unwrap_or(0.0).unwrap_or(0.0).is_some())\n        }).map(|x|\
    \ x.unwrap_or(0.0)).sum(),\n    }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_some` found for reference `&f64` in the\
    \ current scope\n  --> /tmp/tmpg_fg_1q0.rs:12:15\n   |\n12 | ...   x.is_some()\
    \ && x.unwrap_or(0.0).is_some() && (x.unwrap_or(0.0).unwrap_or(0.0).is_some()\
    \ || x.unwrap_or(0.0).unwrap_or(0.0).unwrap_o...\n   |         ^^^^^^^ method\
    \ not found in `&f64`\n\nerror[E0599]: no method named `unwrap_or` found for reference\
    \ `&f64` in the current scope\n  --> /tmp/tmpg_fg_1q0.rs:12:30\n   |\n12 | ...\
    \   x.is_some() && x.unwrap_or(0.0).is_some() && (x.unwrap_or(0.0).unwrap_or(0.0).is_some()\
    \ || x.unwrap_or(0.0).unwrap_or(0.0).unwrap_o...\n   |                       \
    \ ^^^^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `unwrap_or`\
    \ found for reference `&f64` in the current scope\n  --> /tmp/tmpg_fg_1q0.rs:12:61\n\
    \   |\n12 | ...   x.is_some() && x.unwrap_or(0.0).is_some() && (x.unwrap_or(0.0).unwrap_or(0.0).is_some()\
    \ || x.unwrap_or(0.0).unwrap_or(0.0).unwrap_o...\n   |                       \
    \                                ^^^^^^^^^ method not found in `&f64`\n\nerror[E0599]:\
    \ no method named `unwrap_or` found for reference `&f64` in the current scope\n\
    \  --> /tmp/tmpg_fg_1q0.rs:12:106\n   |\n12 | ... (x.unwrap_or(0.0).unwrap_or(0.0).is_some()\
    \ || x.unwrap_or(0.0).unwrap_or(0.0).unwrap_or(0.0).is_some())\n   |         \
    \                                            ^^^^^^^^^ method not found in `&f64`\n\
    \nerror[E0599]: no method named `unwrap_or` found for reference `&f64` in the\
    \ current scope\n  --> /tmp/tmpg_fg_1q0.rs:13:22\n   |\n13 |         }).map(|x|\
    \ x.unwrap_or(0.0)).sum(),\n   |                      ^^^^^^^^^ method not found\
    \ in `&f64`\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    use std::mem;\n    if lst.is_empty() {\n        return\
    \ 0;\n    }\n    let mut s = 0;\n    let mut i = 0;\n    let len = lst.len();\n\
    \    if len < 2 {\n        return 0;\n    }\n    while i < len {\n        let\
    \ v = lst[i];\n        if !v.is_integer() || v < 0 {\n            break;\n   \
    \     }\n        i += 1;\n        s += v;\n    }\n    if i == len {\n        return\
    \ 0;\n    }\n    let mut d = 0.;\n    while i < len {\n        let v = lst[i];\n\
    \        if v.is_integer() && v.is_odd() {\n            let tmp = v * v;\n   \
    \         d += tmp;\n        }\n        i += 1;\n    }\n    return s * d;\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::mem`\n --> /tmp/tmp3qlsn87r.rs:9:9\n  |\n\
    9 |     use std::mem;\n  |         ^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]`\
    \ on by default\n\nerror[E0599]: no method named `is_integer` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp3qlsn87r.rs:21:15\n   |\n21 |         if\
    \ !v.is_integer() || v < 0 {\n   |               ^^^^^^^^^^ method not found in\
    \ `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3qlsn87r.rs:21:35\n \
    \  |\n21 |         if !v.is_integer() || v < 0 {\n   |                       \
    \            ^\n   |                                   |\n   |               \
    \                    expected `f64`, found integer\n   |                     \
    \              help: use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n  --> /tmp/tmp3qlsn87r.rs:25:11\n   |\n25 |         s\
    \ += v;\n   |           ^^ no implementation for `{integer} += f64`\n   |\n  \
    \ = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n   =\
    \ help: the following other types implement trait `AddAssign<Rhs>`:\n        \
    \     <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n            \
    \ <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128\
    \ as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as\
    \ AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0599]: no method named `is_integer` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmp3qlsn87r.rs:33:14\n   |\n33 |         if v.is_integer()\
    \ && v.is_odd() {\n   |              ^^^^^^^^^^ method not found in `f64`\n\n\
    error[E0599]: no method named `is_odd` found for type `f64` in the current scope\n\
    \  --> /tmp/tmp3qlsn87r.rs:33:32\n   |\n33 |         if v.is_integer() && v.is_odd()\
    \ {\n   |                                ^^^^^^ method not found in `f64`\n\n\
    error[E0277]: cannot multiply `{integer}` by `f64`\n  --> /tmp/tmp3qlsn87r.rs:39:14\n\
    \   |\n39 |     return s * d;\n   |              ^ no implementation for `{integer}\
    \ * f64`\n   |\n   = help: the trait `Mul<f64>` is not implemented for `{inte"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter().filter_map(|x| x.checked_add(x.clone()).ok()).sum()\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `checked_add` found for reference `&f64`\
    \ in the current scope\n --> /tmp/tmp8xvn_j_e.rs:9:33\n  |\n9 |     lst.iter().filter_map(|x|\
    \ x.checked_add(x.clone()).ok()).sum()\n  |                                 ^^^^^^^^^^^\
    \ method not found in `&f64`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum: f64 = 0.0;\n    for n in lst {\n    \
    \    if n % 2 == 1 {\n            sum += n;\n        }\n    }\n    return sum\
    \ * sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpm9pbk7tm.rs:11:14\n\
    \   |\n11 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n11 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm9pbk7tm.rs:15:12\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n15 |     return sum * sum;\n \
    \  |            ^^^^^^^^^ expected `isize`, found `f64`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    let mut n = lst.len();\n   \
    \ if n <= 0 {\n        return 0;\n    }\n    for i in 0..n {\n        if lst[i]\
    \ < 0 {\n            sum -= lst[i];\n        } else {\n            sum += lst[i];\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphx87dhk4.rs:15:21\n   |\n\
    15 |         if lst[i] < 0 {\n   |                     ^\n   |               \
    \      |\n   |                     expected `f64`, found integer\n   |       \
    \              help: use a float literal: `0.0`\n\nerror[E0277]: cannot subtract-assign\
    \ `f64` from `{integer}`\n  --> /tmp/tmphx87dhk4.rs:16:17\n   |\n16 |        \
    \     sum -= lst[i];\n   |                 ^^ no implementation for `{integer}\
    \ -= f64`\n   |\n   = help: the trait `SubAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n\
    \             <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n    \
    \         <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n        \
    \     <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n         \
    \    <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmphx87dhk4.rs:18:17\n\
    \   |\n18 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => 0\n        _ => let\
    \ mut total: f64 = *lst;\n        for num in lst {\n            if num > 0 {\n\
    \                total += num;\n            }\n        }\n        total \n   \
    \ }\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found reserved\
    \ identifier `_`\n  --> /tmp/tmpen_p6hod.rs:11:9\n   |\n10 |         0 => 0\n\
    \   |           --  - expected one of `,`, `.`, `?`, `}`, or an operator\n   |\
    \           |\n   |           while parsing the `match` arm starting here\n11\
    \ |         _ => let mut total: f64 = *lst;\n   |         ^ unexpected token\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut total: f64 = 0.0;\n    for n in lst.iter()\
    \ {\n        if n.is_negative() {\n            return 0;\n        } else if n.is_integer()\
    \ {\n            total += n.to_f64();\n        } else {\n            total +=\
    \ n.to_f64() * n.to_f64();\n        }\n    }\n    return total;\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "warning: use of deprecated associated function `core::f64::<impl f64>::is_negative`:\
    \ renamed to is_sign_negative\n  --> /tmp/tmplnjomgbl.rs:11:14\n   |\n11 |   \
    \      if n.is_negative() {\n   |              ^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]`\
    \ on by default\n\nerror[E0599]: no method named `is_integer` found for reference\
    \ `&f64` in the current scope\n  --> /tmp/tmplnjomgbl.rs:13:21\n   |\n13 |   \
    \      } else if n.is_integer() {\n   |                     ^^^^^^^^^^ method\
    \ not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference\
    \ `&f64` in the current scope\n  --> /tmp/tmplnjomgbl.rs:14:24\n   |\n14 |   \
    \          total += n.to_f64();\n   |                        ^^^^^^ method not\
    \ found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference\
    \ `&f64` in the current scope\n  --> /tmp/tmplnjomgbl.rs:16:24\n   |\n16 |   \
    \          total += n.to_f64() * n.to_f64();\n   |                        ^^^^^^\
    \ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for\
    \ reference `&f64` in the current scope\n  --> /tmp/tmplnjomgbl.rs:16:37\n   |\n\
    16 |             total += n.to_f64() * n.to_f64();\n   |                     \
    \                ^^^^^^ method not found in `&f64`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplnjomgbl.rs:19:12\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n19 |     return total;\n   | \
    \           ^^^^^ expected `isize`, found `f64`\n\nerror: aborting due to 5 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    match lst.len() {\n        0 => 0,\n        1 => 1,\n\
    \        _ => lst.iter().map(|num| num * num).sum(),\n    }\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n    -->\
    \ /tmp/tmpjyoiz98r.rs:12:46\n     |\n12   |         _ => lst.iter().map(|num|\
    \ num * num).sum(),\n     |                                              ^^^ the\
    \ trait `Sum<f64>` is not implemented for `isize`\n     |\n     = help: the following\
    \ other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n\
    \               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n         \
    \      <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128\
    \ as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n\
    \             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() { return 0; }\n    let mut sum:\
    \ f64 = 0.0;\n    for n in lst {\n        if n % 2 == 1 {\n            sum +=\
    \ n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpb3gcyz7y.rs:12:14\n\
    \   |\n12 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n12 |         if n % 2.0 == 1 {\n   |                 ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb3gcyz7y.rs:16:5\n   |\n8  | fn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n   |                                            -----\
    \ expected `isize` because of return type\n...\n16 |     sum\n   |     ^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    if lst.is_empty() {\n        return 0\n    }\n   \
    \ \n    let mut sum = 0;\n    \n    for &x in lst {\n        if x % 2 == 1 {\n\
    \            sum += x;\n        }\n    }\n    \n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcrtyvv53.rs:15:9\n   |\n\
    15 |     for &x in lst {\n   |         ^^    --- this expression has type `Option<f64>`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `f64`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter().filter_map(|x| {\n        if x > f64::MIN_BOUND_FUNC\
    \ && x < f64::MAX_BOUND_FUNC && !x.is_integer() {\n            Some(x * 2)\n \
    \       } else {\n            None\n        }\n    }).sum::<isize>()\n}\n\nfn\
    \ main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no associated item named `MIN_BOUND_FUNC` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpdhzfaj5u.rs:10:21\n   |\n10 |    \
    \     if x > f64::MIN_BOUND_FUNC && x < f64::MAX_BOUND_FUNC && !x.is_integer()\
    \ {\n   |                     ^^^^^^^^^^^^^^ associated item not found in `f64`\n\
    \nerror[E0599]: no associated item named `MAX_BOUND_FUNC` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpdhzfaj5u.rs:10:48\n   |\n10 |         if\
    \ x > f64::MIN_BOUND_FUNC && x < f64::MAX_BOUND_FUNC && !x.is_integer() {\n  \
    \ |                                                ^^^^^^^^^^^^^^ associated item\
    \ not found in `f64`\n\nerror[E0599]: no method named `is_integer` found for reference\
    \ `&f64` in the current scope\n  --> /tmp/tmpdhzfaj5u.rs:10:69\n   |\n10 |   \
    \      if x > f64::MIN_BOUND_FUNC && x < f64::MAX_BOUND_FUNC && !x.is_integer()\
    \ {\n   |                                                                    \
    \ ^^^^^^^^^^ method not found in `&f64`\n\nerror[E0277]: cannot multiply `&f64`\
    \ by `{integer}`\n  --> /tmp/tmpdhzfaj5u.rs:11:20\n   |\n11 |             Some(x\
    \ * 2)\n   |                    ^ no implementation for `&f64 * {integer}`\n \
    \  |\n   = help: the trait `Mul<{integer}>` is not implemented for `&f64`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    lst.iter().filter(|x| x > 0).fold(0, |res, &x| res\
    \ + x*x)\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0omacmdd.rs:9:31\n  |\n9 |\
    \     lst.iter().filter(|x| x > 0).fold(0, |res, &x| res + x*x)\n  |         \
    \                      ^ expected `&&f64`, found integer\n\nerror[E0277]: cannot\
    \ add `f64` to `isize`\n --> /tmp/tmp0omacmdd.rs:9:56\n  |\n9 |     lst.iter().filter(|x|\
    \ x > 0).fold(0, |res, &x| res + x*x)\n  |                                   \
    \                     ^ no implementation for `isize + f64`\n  |\n  = help: the\
    \ trait `Add<f64>` is not implemented for `isize`\n  = help: the following other\
    \ types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n     \
    \       <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n         \
    \   <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a\
    \ i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as\
    \ Add<isize>>\n          and 48 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
