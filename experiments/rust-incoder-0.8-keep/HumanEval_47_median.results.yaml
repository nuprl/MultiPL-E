name: HumanEval_47_median
language: rust
results:
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let n = l.len();\n    let mut s = l.iter().cloned().sorted().rev().take(n).sum();\n\
    \    if n < 2 {\n        return s\n    } else {\n        n / 2 + s / 2\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmplephtm38.rs:8:35\n  |\n8 |     let mut s = l.iter().cloned().sorted().rev().take(n).sum();\n\
    \  |                                   ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmplephtm38.rs:12:19\n\
    \   |\n12 |         n / 2 + s / 2\n   |                   ^ no implementation\
    \ for `f64 / {integer}`\n   |\n   = help: the trait `Div<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n12 |         n / 2 + s / 2.0\n   |                      ++\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2,\n        |sum,\
    \ item| if item > sum { item } else { sum },\n    )\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfpf4tbrc.rs:8:9\n  |\n8 |\
    \         l.len() / 2,\n  |         ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \  |\nhelp: you can cast a `usize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n8 |         (l.len() / 2) as f64,\n\
    \  |         +           ++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfpf4tbrc.rs:9:31\n\
    \  |\n9 |         |sum, item| if item > sum { item } else { sum },\n  |      \
    \                         ^^^ expected `&isize`, found `f64`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpfpf4tbrc.rs:9:37\n  |\n9 |         |sum, item|\
    \ if item > sum { item } else { sum },\n  |                                  \
    \   ^^^^ expected `f64`, found `&isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let len = l.len();\n    let n = len / 2;\n    if len\
    \ % 2 == 0 {\n        l.iter().windows(2).map(|window| window.median()).sum::<f64>()\
    \ / n\n    } else {\n        l.iter().windows(2).map(|window| window.min()).max::<f64>()\
    \ / n\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `windows` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpf45l_4kr.rs:10:18\n   |\n10 |         l.iter().windows(2).map(|window|\
    \ window.median()).sum::<f64>() / n\n   |                  ^^^^^^^ method not\
    \ found in `std::slice::Iter<'_, isize>`\n\nerror[E0599]: no method named `windows`\
    \ found for struct `std::slice::Iter` in the current scope\n  --> /tmp/tmpf45l_4kr.rs:12:18\n\
    \   |\n12 |         l.iter().windows(2).map(|window| window.min()).max::<f64>()\
    \ / n\n   |                  ^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    if l.len() % 2 == 0 {\n        l[l::2].iter().rev().fold(0.0,\
    \ |a, b| a + (b as f64) / 2)\n    } else {\n        l[l::2].iter().next().fold(0.0,\
    \ |a, b| a + (b as f64) / 2)\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `2`\n --> /tmp/tmp1c9ptips.rs:8:14\n\
    \  |\n8 |         l[l::2].iter().rev().fold(0.0, |a, b| a + (b as f64) / 2)\n\
    \  |              ^ expected identifier\n\nerror: expected identifier, found `2`\n\
    \  --> /tmp/tmp1c9ptips.rs:10:14\n   |\n10 |         l[l::2].iter().next().fold(0.0,\
    \ |a, b| a + (b as f64) / 2)\n   |              ^ expected identifier\n\nerror:\
    \ aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().sorted().middle().unwrap_or_else(|_| l.iter().sorted().first())\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmphcda_anx.rs:7:14\n  |\n7 |     l.iter().sorted().middle().unwrap_or_else(|_|\
    \ l.iter().sorted().first())\n  |              ^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmphcda_anx.rs:7:60\n  |\n7 |     l.iter().sorted().middle().unwrap_or_else(|_|\
    \ l.iter().sorted().first())\n  |                                            \
    \                ^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    if l.len() > 1 {\n        let mid = l.len() / 2;\n\
    \        let mut smaller = l.len() - 1;\n        let mut larger = mid;\n\n   \
    \     if l.len() % 2 == 0 {\n            while smaller >= 0 {\n              \
    \  smaller--;\n                if l[smaller] > l[smaller+1] {\n              \
    \      larger = smaller+1;\n                    break;\n                }\n  \
    \          }\n        } else {\n            while larger < mid {\n           \
    \     larger++;\n                if l[larger] > l[larger-1] {\n              \
    \      smaller = larger-1;\n                    break;\n                }\n  \
    \          }\n        }\n        if l[larger] == l[larger+1] {\n            return\
    \ l[larger];\n        }\n        return l[larger] + l[smaller];\n    }\n    l[0]\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpet33dg_t.rs:14:26\n\
    \   |\n14 |                 smaller--;\n   |                          ^ expected\
    \ expression\n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmpet33dg_t.rs:22:23\n\
    \   |\n22 |                 larger++;\n   |                       ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n22 |               \
    \  { let tmp = larger; larger += 1; tmp };\n   |                 +++++++++++ \
    \      ~~~~~~~~~~~~~~~~~~~~\n22 -                 larger++;\n22 +            \
    \     larger += 1;\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpet33dg_t.rs:30:20\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \   --- expected `f64` because of return type\n...\n30 |             return l[larger];\n\
    \   |                    ^^^^^^^^^ expected `f64`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpet33dg_t.rs:34:5\n   |\n6  | fn median(l: Vec<isize>)\
    \ -> f64 {\n   |                             --- expected `f64` because of return\
    \ type\n...\n34 |     l[0]\n   |     ^^^^ expected `f64`, found `isize`\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan, f64::max)\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpdjn_a727.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan,\
    \ f64::max)\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0631]: type mismatch in function arguments\n    --> /tmp/tmpdjn_a727.rs:7:29\n\
    \     |\n7    |     l.iter().fold(f64::nan, f64::max)\n     |              ----\
    \           ^^^^^^^^\n     |              |              |\n     |           \
    \   |              expected signature of `fn(f64, &isize) -> _`\n     |      \
    \        |              found signature of `fn(f64, f64) -> _`\n     |       \
    \       required by a bound introduced by this call\n     |\nnote: required by\
    \ a bound in `fold`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0599, E0631.\nFor more information about an error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let len = l.len();\n    if len == 0 {\n        f64::MAX\n\
    \    } else {\n        let mut midpoint = len / 2;\n        let pivot = l[midpoint];\n\
    \        let mut left = l;\n        let mut right = l;\n        let mut pivots:\
    \ Vec<isize> = Vec::new();\n\n        while left.len() > 0 || right.len() > 0\
    \ {\n            if left.len() > 0 {\n                let pivot_value = left[0];\n\
    \                pivots.push(pivot_value);\n                left.remove(0);\n\
    \                right.remove(0);\n            } else {\n                let pivot_value\
    \ = right[0];\n                pivots.push(pivot_value);\n                right.remove(0);\n\
    \                left.remove(0);\n            }\n\n            let pivot_index\
    \ = pivots.len() / 2;\n            let pivot_value = pivots[pivot_index];\n  \
    \          if pivot_value == pivot {\n                midpoint += 1;\n       \
    \     } else {\n                let left_len = left.len();\n                let\
    \ right_len = right.len();\n                if left_len > right_len {\n      \
    \              midpoint = midpoint;\n                    pivots.swap(0, midpoint);\n\
    \                } else {\n                    midpoint = (midpoint + 1) % pivots.len();\n\
    \                    pivots.swap(0, midpoint);\n                }\n          \
    \  }\n        }\n        pivots[midpoint]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3s1djzow.rs:46:9\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n46 |         pivots[midpoint]\n   |     \
    \    ^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::INFINITY, |a, b| {\n        if\
    \ *a > b {\n            a\n        } else {\n            b\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmp3sav343n.rs:8:12\n\
    \  |\n8 |         if *a > b {\n  |            ^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3sav343n.rs:11:13\n   |\n11 |             b\n   |             ^\
    \ expected `f64`, found `&isize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.len()\n        .checked_mul(0.5f)\n        .map(|x|\
    \ x.round())\n        .filter(|&x| x % 2 != 0)\n        .unwrap_or(l.len())\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: invalid suffix `f` for float literal\n --> /tmp/tmpljvj9guf.rs:8:22\n\
    \  |\n8 |         .checked_mul(0.5f)\n  |                      ^^^^ invalid suffix\
    \ `f`\n  |\n  = help: valid suffixes are `f32` and `f64`\n\nerror[E0599]: no method\
    \ named `round` found for type `usize` in the current scope\n --> /tmp/tmpljvj9guf.rs:9:20\n\
    \  |\n9 |         .map(|x| x.round())\n  |                    ^^^^^ method not\
    \ found in `usize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let len = l.len();\n    if len <= 1 {\n        return\
    \ l[0];\n    }\n    let mid = (len / 2) + 1;\n    l.iter().skip(mid).next().unwrap().saturating_add((mid\
    \ + 1) as f64 / 2).sqrt()\n}\n\nfn main() {\n    let candidate = median;\n   \
    \ assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxsftt3ny.rs:9:16\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |         return l[0];\n  |           \
    \     ^^^^ expected `f64`, found `isize`\n\nerror[E0277]: cannot divide `f64`\
    \ by `{integer}`\n  --> /tmp/tmpxsftt3ny.rs:12:72\n   |\n12 |     l.iter().skip(mid).next().unwrap().saturating_add((mid\
    \ + 1) as f64 / 2).sqrt()\n   |                                              \
    \                          ^ no implementation for `f64 / {integer}`\n   |\n \
    \  = help: the trait `Div<{integer}>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\nhelp: consider using\
    \ a floating-point literal by writing it with `.0`\n   |\n12 |     l.iter().skip(mid).next().unwrap().saturating_add((mid\
    \ + 1) as f64 / 2.0).sqrt()\n   |                                            \
    \                               ++\n\nerror[E0599]: no method named `sqrt` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpxsftt3ny.rs:12:77\n   |\n\
    12 |     l.iter().skip(mid).next().unwrap().saturating_add((mid + 1) as f64 /\
    \ 2).sqrt()\n   |                                                            \
    \                 ^^^^ method not found in `isize`\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut m = l.len() as f64 / 2;\n    l.sort_unstable();\n\
    \    for i in 0..l.len() {\n        if m == 0 {\n            break;\n        }\n\
    \        if l[m] < l[i] {\n            m += 1;\n        }\n        else {\n  \
    \          break;\n        }\n    }\n    return l[m];\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `{integer}`\n --> /tmp/tmp4xcjfufm.rs:7:32\n\
    \  |\n7 |     let mut m = l.len() as f64 / 2;\n  |                           \
    \     ^ no implementation for `f64 / {integer}`\n  |\n  = help: the trait `Div<{integer}>`\
    \ is not implemented for `f64`\n  = help: the following other types implement\
    \ trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n            <&'a f64 as\
    \ Div<f64>>\n            <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n\
    \            <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n      \
    \      <&'a i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n  |\n7 |     let mut m = l.len() as f64 / 2.0;\n  |                  \
    \                 ++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect();\n    l.sort_unstable_by_key(|&x|\
    \ *x);\n    if l.len() <= 1 {\n        return l[0];\n    }\n    let mut l1 = l.split_off(l.len()\
    \ / 2);\n    let mut l2 = l.split_off(l.len() / 2 - 1);\n    (l1[0] + l2[0]) /\
    \ 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpctywo324.rs:8:5\n \
    \ |\n7 |     let mut l = l.iter().cloned().collect();\n  |         ----- consider\
    \ giving `l` a type\n8 |     l.sort_unstable_by_key(|&x| *x);\n  |     ^ cannot\
    \ infer type\n  |\n  = note: type must be known at this point\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let l = l.iter().cloned().collect::<Vec<_>>();\n \
    \   l.sort();\n    l.len().checked_div(m.sqrt(m.pow(l.len() as f64, 2))).unwrap()\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `m` in this scope\n --> /tmp/tmpru6pmwyr.rs:9:25\n\
    \  |\n9 |     l.len().checked_div(m.sqrt(m.pow(l.len() as f64, 2))).unwrap()\n\
    \  |                         ^ help: a local variable with a similar name exists:\
    \ `l`\n\nerror[E0425]: cannot find value `m` in this scope\n --> /tmp/tmpru6pmwyr.rs:9:32\n\
    \  |\n9 |     l.len().checked_div(m.sqrt(m.pow(l.len() as f64, 2))).unwrap()\n\
    \  |                                ^ help: a local variable with a similar name\
    \ exists: `l`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpru6pmwyr.rs:9:5\n\
    \  |\n6 | fn median(l: Vec<isize>) -> f64 {\n  |                             ---\
    \ expected `f64` because of return type\n...\n9 |     l.len().checked_div(m.sqrt(m.pow(l.len()\
    \ as f64, 2))).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     l.len().checked_div(m.sqrt(m.pow(l.len() as f64, 2))).unwrap() as\
    \ f64\n  |                                                                   \
    \ ++++++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter()\n        .enumerate()\n        .fold(f64::max_value(),\
    \ |sum, (_, i)| sum + i / l.len() as f64)\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `max_value` found for\
    \ type `f64` in the current scope\n --> /tmp/tmpmmfv_yos.rs:9:20\n  |\n9 |   \
    \      .fold(f64::max_value(), |sum, (_, i)| sum + i / l.len() as f64)\n  |  \
    \                  ^^^^^^^^^ function or associated item not found in `f64`\n\n\
    error[E0277]: cannot divide `&isize` by `f64`\n --> /tmp/tmpmmfv_yos.rs:9:55\n\
    \  |\n9 |         .fold(f64::max_value(), |sum, (_, i)| sum + i / l.len() as f64)\n\
    \  |                                                       ^ no implementation\
    \ for `&isize / f64`\n  |\n  = help: the trait `Div<f64>` is not implemented for\
    \ `&isize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |mut d, x| {\n        if d.is_negative()\
    \ {\n            return Some(-d);\n        }\n        Some(d.checked_add(x.checked_div(2.0).unwrap()).unwrap())\n\
    \    }).unwrap_or(0.0)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `is_negative` on ambiguous numeric type\
    \ `{float}`\n --> /tmp/tmpww_haeaf.rs:8:14\n  |\n7 |     l.iter().fold(0.0, |mut\
    \ d, x| {\n  |                         ----- you must specify a type for this\
    \ binding, like `f32`\n8 |         if d.is_negative() {\n  |              ^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpww_haeaf.rs:9:20\n  |\n9 |    \
    \         return Some(-d);\n  |                    ^^^^^^^^ expected floating-point\
    \ number, found enum `Option`\n  |\n  = note: expected type `{float}`\n      \
    \       found enum `Option<{float}>`\nnote: return type inferred to be `{float}`\
    \ here\n --> /tmp/tmpww_haeaf.rs:9:20\n  |\n9 |             return Some(-d);\n\
    \  |                    ^^^^^^^^\n\nerror[E0689]: can't call method `checked_add`\
    \ on ambiguous numeric type `{float}`\n  --> /tmp/tmpww_haeaf.rs:11:16\n   |\n\
    7  |     l.iter().fold(0.0, |mut d, x| {\n   |                         ----- you\
    \ must specify a type for this binding, like `f32`\n...\n11 |         Some(d.checked_add(x.checked_div(2.0).unwrap()).unwrap())\n\
    \   |                ^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpww_haeaf.rs:11:42\n\
    \   |\n11 |         Some(d.checked_add(x.checked_div(2.0).unwrap()).unwrap())\n\
    \   |                                          ^^^ expected `isize`, found floating-point\
    \ number\n   |\nnote: return type inferred to be `isize` here\n  --> /tmp/tmpww_haeaf.rs:9:20\n\
    \   |\n9  |             return Some(-d);\n   |                    ^^^^^^^^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpww_haeaf.rs:11:9\n   |\n11 |   \
    \      Some(d.checked_add(x.checked_div(2.0).unwrap()).unwrap())\n   |       \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected floating-point\
    \ number, found enum `Option`\n   |\n   = note: expected type `{float}`\n    \
    \          found enum `Option<_>`\nnote: return type inferred to be `{float}`\
    \ here\n  --> /tmp/tmpww_haeaf.rs:9:20\n   |\n9  |             return Some(-d);\n\
    \   |                    ^^^^^^^^\n\nerror[E0599]: no method named `unwrap_or`\
    \ found for type `{float}` in the current scope\n  --> /t"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    if l.len() < 1 {\n        std::panic::unwind_backtrace();\n\
    \    }\n\n    let len = l.len();\n    let mut len = len;\n    let mut mid = len\
    \ / 2;\n\n    loop {\n        if len % 2 == 0 {\n            if l [mid] < l [mid+1]\
    \ {\n                mid = mid+1;\n            }\n            else {\n       \
    \         len = len-1;\n                mid = len / 2;\n            }\n      \
    \  }\n        else {\n            if l [mid] < l [mid-1] {\n                len\
    \ = len-1;\n                mid = len / 2;\n            }\n            else {\n\
    \                mid = mid+1;\n            }\n        }\n        if len < 2 {\n\
    \            break;\n        }\n    }\n    return l [mid];\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `unwind_backtrace` in module `std::panic`\n\
    \ --> /tmp/tmphgj3oj0s.rs:8:21\n  |\n8 |         std::panic::unwind_backtrace();\n\
    \  |                     ^^^^^^^^^^^^^^^^ not found in `std::panic`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphgj3oj0s.rs:38:12\n   |\n6  | fn median(l: Vec<isize>)\
    \ -> f64 {\n   |                             --- expected `f64` because of return\
    \ type\n...\n38 |     return l [mid];\n   |            ^^^^^^^ expected `f64`,\
    \ found `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut counts = vec![];\n    for elt in l {\n   \
    \     counts.push(elt.clone());\n    }\n    counts\n        .iter()\n        .cloned()\n\
    \        .sort_unstable_by_key(|&elt| elt)\n        .skip(counts.size() / 2)\n\
    \        .collect()\n        .unwrap()\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_unstable_by_key` found for struct `Cloned`\
    \ in the current scope\n  --> /tmp/tmpvztutdve.rs:14:10\n   |\n14 |         .sort_unstable_by_key(|&elt|\
    \ elt)\n   |          ^^^^^^^^^^^^^^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0599]: no method named `size` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpvztutdve.rs:15:22\n   |\n15 |         .skip(counts.size()\
    \ / 2)\n   |                      ^^^^ help: there is an associated function with\
    \ a similar name: `resize`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.iter().skip(l.len() / 2).take(l.len()\
    \ / 2).sum().unwrap(),\n        || l.iter().next().unwrap(),\n    )\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpw25u40p5.rs:8:54\n\
    \  |\n8 |         l.iter().skip(l.len() / 2).take(l.len() / 2).sum().unwrap(),\n\
    \  |                                                      ^^^ cannot infer type\
    \ for type parameter `S` declared on the associated function `sum`\n  |\n  = note:\
    \ type must be known at this point\nhelp: consider specifying the type argument\
    \ in the method call\n  |\n8 |         l.iter().skip(l.len() / 2).take(l.len()\
    \ / 2).sum::<S>().unwrap(),\n  |                                             \
    \            +++++\n\nerror[E0593]: closure is expected to take 2 arguments, but\
    \ it takes 0 arguments\n --> /tmp/tmpw25u40p5.rs:7:14\n  |\n7 |     l.iter().fold(\n\
    \  |              ^^^^ expected closure that takes 2 arguments\n8 |         l.iter().skip(l.len()\
    \ / 2).take(l.len() / 2).sum().unwrap(),\n9 |         || l.iter().next().unwrap(),\n\
    \  |         -- takes 0 arguments\n  |\nhelp: consider changing the closure to\
    \ take and ignore the expected arguments\n  |\n9 |         |_, _| l.iter().next().unwrap(),\n\
    \  |         ~~~~~~\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0282, E0593.\nFor more information about an error,\
    \ try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0, |sum, i| {\n        let mut mid =\
    \ (sum + i) / 2;\n        match mid {\n            0.0 => return 0.0,\n      \
    \      _ => return mid,\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptbzcmgba.rs:7:19\n  |\n7 |\
    \     l.iter().fold(0, |sum, i| {\n  |                   ^\n  |              \
    \     |\n  |                   expected `f64`, found integer\n  |            \
    \       help: use a float literal: `0.0`\n\nerror[E0277]: cannot add `&isize`\
    \ to `f64`\n --> /tmp/tmptbzcmgba.rs:8:28\n  |\n8 |         let mut mid = (sum\
    \ + i) / 2;\n  |                            ^ no implementation for `f64 + &isize`\n\
    \  |\n  = help: the trait `Add<&isize>` is not implemented for `f64`\n  = help:\
    \ the following other types implement trait `Add<Rhs>`:\n            <&'a f32\
    \ as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n\
    \            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n      \
    \      <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a\
    \ isize as Add<isize>>\n          and 48 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::min, (|a, b| a + b) / 2)\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5fncrbuy.rs:7:19\n  |\n7 |\
    \     l.iter().fold(f64::min, (|a, b| a + b) / 2)\n  |                   ^^^^^^^^\
    \ expected `f64`, found fn item\n  |\n  = note: expected type `f64`\n        \
    \  found fn item `fn(f64, f64) -> f64 {core::f64::<impl f64>::min}`\nhelp: use\
    \ parentheses to call this function\n  |\n7 |     l.iter().fold(f64::min(...),\
    \ (|a, b| a + b) / 2)\n  |                           +++++\n\nerror[E0369]: cannot\
    \ divide `[closure@/tmp/tmp5fncrbuy.rs:7:29: 7:43]` by `{integer}`\n --> /tmp/tmp5fncrbuy.rs:7:44\n\
    \  |\n7 |     l.iter().fold(f64::min, (|a, b| a + b) / 2)\n  |               \
    \              -------------- ^ - {integer}\n  |                             |\n\
    \  |                             [closure@/tmp/tmp5fncrbuy.rs:7:29: 7:43]\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().filter(|&x| x != l.len() - 1).sorted().next().unwrap_or(l.len()\
    \ - 1)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzkgg1bwk.rs:7:31\n  |\n7 |\
    \     l.iter().filter(|&x| x != l.len() - 1).sorted().next().unwrap_or(l.len()\
    \ - 1)\n  |                               ^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: can't compare `&isize` with `usize`\n --> /tmp/tmpzkgg1bwk.rs:7:28\n\
    \  |\n7 |     l.iter().filter(|&x| x != l.len() - 1).sorted().next().unwrap_or(l.len()\
    \ - 1)\n  |                            ^^ no implementation for `&isize == usize`\n\
    \  |\n  = help: the trait `PartialEq<usize>` is not implemented for `&isize`\n\
    \  = help: the following other types implement trait `PartialEq<Rhs>`:\n     \
    \       f32\n            f64\n            i128\n            i16\n            i32\n\
    \            i64\n            i8\n            isize\n          and 6 others\n\n\
    error[E0599]: no method named `sorted` found for struct `Filter` in the current\
    \ scope\n --> /tmp/tmpzkgg1bwk.rs:7:44\n  |\n7 |     l.iter().filter(|&x| x !=\
    \ l.len() - 1).sorted().next().unwrap_or(l.len() - 1)\n  |                   \
    \                         ^^^^^^ method not found in `Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpzkgg1bwk.rs:7:21: 7:42]>`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        a.checked_add(b).unwrap()\
    \ / 2.0\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpfc8tf3y_.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap()\
    \ / 2.0\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n\
    \    let n = v.len();\n    let mut i1 = n+1;\n    let mut i2 = n+1;\n    let mut\
    \ mu = 0;\n\n    while i1 > 1 || i2 > 1 {\n        i => {\n            if i ==\
    \ 1 || v[i-1] < v[i] {\n                v[i2] = v[i-1];\n                i -=\
    \ 1;\n            } else {\n                v[i2] = v[i];\n                i -=\
    \ 1;\n            }\n            if i == 1 || v[i-1] < v[i] {\n              \
    \  i -= 1;\n            } else {\n                i -= 1;\n            }\n   \
    \     }\n    }\n    v[n].copy_from_slice(&mut [&mut i1]);\n    v[n].copy_from_slice(&mut\
    \ [&mut i2]);\n\n    v.iter().fold((v[0] as f64 + v[1] as f64) / 2 as f64, |mut\
    \ acc, v| {\n        if v < acc {\n            *acc = (v as f64 + v as f64) /\
    \ 2;\n        }\n        acc\n    });\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found `=>`\n  --> /tmp/tmp_6bfgsde.rs:14:11\n   |\n14 |         i => {\n   |\
    \           ^^ expected one of 8 possible tokens\n\nerror[E0599]: no method named\
    \ `copy_from_slice` found for type `isize` in the current scope\n  --> /tmp/tmp_6bfgsde.rs:29:10\n\
    \   |\n29 |     v[n].copy_from_slice(&mut [&mut i1]);\n   |          ^^^^^^^^^^^^^^^\
    \ method not found in `isize`\n\nerror[E0599]: no method named `copy_from_slice`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmp_6bfgsde.rs:30:10\n\
    \   |\n30 |     v[n].copy_from_slice(&mut [&mut i2]);\n   |          ^^^^^^^^^^^^^^^\
    \ method not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_6bfgsde.rs:33:16\n\
    \   |\n33 |         if v < acc {\n   |                ^^^ expected `&isize`, found\
    \ `f64`\n\nerror[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmp_6bfgsde.rs:34:13\n\
    \   |\n34 |             *acc = (v as f64 + v as f64) / 2;\n   |             ^^^^\n\
    \nerror[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmp_6bfgsde.rs:34:42\n\
    \   |\n34 |             *acc = (v as f64 + v as f64) / 2;\n   |              \
    \                            ^ no implementation for `f64 / {integer}`\n   |\n\
    \   = help: the trait `Div<{integer}>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\nhelp: consider using\
    \ a floating-point literal by writing it with `.0`\n   |\n34 |             *acc\
    \ = (v as f64 + v as f64) / 2.0;\n   |                                       \
    \      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_6bfgsde.rs:6:29\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |    ------                \
    \   ^^^ expected `f64`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its bo"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut rng = thread_rng();\n    if l.len() == 1 {\n\
    \        return l[0];\n    }\n    l.sort_unstable();\n    let lower = &l[l.len()\
    \ / 2];\n    let mut higher = &l[l.len() - 1];\n    let mid = &l[(l.len() - 1.0)\
    \ / 2];\n\n    while higher < &l[l.len() - 1] {\n        if rng.gen_range(0.0,\
    \ 1.0) <= 0.5 {\n            higher = &l[(l.len() - 1.0) / 2];\n        } else\
    \ {\n            lower = &l[l.len() / 2];\n        }\n    }\n    if higher ==\
    \ &l[l.len() - 1] {\n        return *mid;\n    }\n    return *((&l[l.len() - 1]\
    \ as f64) + (&l[l.len() / 2] as f64)) / 2.0;\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `thread_rng` in this scope\n --> /tmp/tmpltpfo4r6.rs:7:19\n\
    \  |\n7 |     let mut rng = thread_rng();\n  |                   ^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpltpfo4r6.rs:9:16\n\
    \  |\n6 | fn median(l: Vec<isize>) -> f64 {\n  |                             ---\
    \ expected `f64` because of return type\n...\n9 |         return l[0];\n  |  \
    \              ^^^^ expected `f64`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `{float}` from `usize`\n  --> /tmp/tmpltpfo4r6.rs:14:27\n   |\n14 |     let\
    \ mid = &l[(l.len() - 1.0) / 2];\n   |                           ^ no implementation\
    \ for `usize - {float}`\n   |\n   = help: the trait `Sub<{float}>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot subtract `{float}` from `usize`\n  --> /tmp/tmpltpfo4r6.rs:18:34\n\
    \   |\n18 |             higher = &l[(l.len() - 1.0) / 2];\n   |              \
    \                    ^ no implementation for `usize - {float}`\n   |\n   = help:\
    \ the trait `Sub<{float}>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0614]: type `f64`\
    \ cannot be dereferenced\n  --> /tmp/tmpltpfo4r6.rs:26:12\n   |\n26 |     return\
    \ *((&l[l.len() - 1] as f64) + (&l[l.len() / 2] as f64)) / 2.0;\n   |        \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0606]: casting\
    \ `&isize` as `f64` "
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().enumerate().fold(l.len() / 2, |mut acc, &(i,\
    \ x)| {\n        if i < acc.min() {\n            acc.swap(i, acc.min());\n   \
    \     }\n        if i == acc.min() {\n            acc\n        } else {\n    \
    \        acc.saturating_add((x - l[i]) / 2)\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyxckpq_i.rs:7:31\n  |\n7 |\
    \     l.iter().enumerate().fold(l.len() / 2, |mut acc, &(i, x)| {\n  |       \
    \                        ^^^^^^^^^^^ expected `f64`, found `usize`\n  |\nhelp:\
    \ you can cast a `usize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n7 |     l.iter().enumerate().fold((l.len()\
    \ / 2) as f64, |mut acc, &(i, x)| {\n  |                               +     \
    \      ++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmpyxckpq_i.rs:7:54\n\
    \  |\n7 |     l.iter().enumerate().fold(l.len() / 2, |mut acc, &(i, x)| {\n  |\
    \                                                      ^^^^^^-\n  |          \
    \                                            |     |\n  |                    \
    \                                  |     expected due to this\n  |           \
    \                                           expected tuple, found reference\n\
    \  |\n  = note:  expected tuple `(usize, &isize)`\n          found reference `&_`\n\
    \nerror[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpyxckpq_i.rs:8:20\n    |\n8   |         if i < acc.min() {\n  \
    \  |                    ^^^- supplied 0 arguments\n    |                    |\n\
    \    |                    expected 1 argument\n    |\nnote: associated function\
    \ defined here\n\nerror[E0599]: no method named `swap` found for type `f64` in\
    \ the current scope\n --> /tmp/tmpyxckpq_i.rs:9:17\n  |\n9 |             acc.swap(i,\
    \ acc.min());\n  |                 ^^^^ method not found in `f64`\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmpyxckpq_i.rs:9:29\n\
    \    |\n9   |             acc.swap(i, acc.min());\n    |                     \
    \        ^^^- supplied 0 arguments\n    |                             |\n    |\
    \                             expected 1 argument\n    |\nnote: associated function\
    \ defined here\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpyxckpq_i.rs:11:21\n    |\n11  |         if i ==\
    \ acc.min() {\n    |                     ^^^- supplied "
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| a + b / 2)\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmpgor_6mhx.rs:7:33\n\
    \  |\n7 |     l.iter().fold(0.0, |a, b| a + b / 2)\n  |                      \
    \           ^ no implementation for `f64 + isize`\n  |\n  = help: the trait `Add<isize>`\
    \ is not implemented for `f64`\n  = help: the following other types implement\
    \ trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as\
    \ Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n\
    \            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n      \
    \      <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and\
    \ 48 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter()\n        .enumerate()\n        .filter(|(_,\
    \ ix)| ix < l.len() / 2)\n        .map(|(_, v)| v)\n        .max()\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpik3qb2aj.rs:9:32\n  |\n9 |\
    \         .filter(|(_, ix)| ix < l.len() / 2)\n  |                           \
    \     ^^^^^^^^^^^ expected `&&isize`, found `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpik3qb2aj.rs:7:5\n   |\n6  |   fn median(l: Vec<isize>)\
    \ -> f64 {\n   |                               --- expected `f64` because of return\
    \ type\n7  | /     l.iter()\n8  | |         .enumerate()\n9  | |         .filter(|(_,\
    \ ix)| ix < l.len() / 2)\n10 | |         .map(|(_, v)| v)\n11 | |         .max()\n\
    \   | |______________^ expected `f64`, found enum `Option`\n   |\n   = note: expected\
    \ type `f64`\n              found enum `Option<&isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let len = l.len();\n    l.iter().fold(\n        0,\n\
    \        |mut sum, x| {\n            match sum {\n                0 => {\n   \
    \                 sum += x;\n                    1\n                }\n      \
    \          x if x > sum => {\n                    *sum = x;\n                \
    \    1\n                }\n                x if x < sum => {\n               \
    \     *sum = *sum + x;\n                    1\n                }\n           \
    \ }\n        },\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvf10aoba.rs:9:9\n  |\n9 |\
    \         0,\n  |         ^\n  |         |\n  |         expected `f64`, found\
    \ integer\n  |         help: use a float literal: `0.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvf10aoba.rs:12:17\n   |\n11 |             match sum {\n\
    \   |                   --- this expression has type `f64`\n12 |             \
    \    0 => {\n   |                 ^\n   |                 |\n   |            \
    \     expected `f64`, found integer\n   |                 help: use a float literal:\
    \ `0.0`\n\nerror[E0277]: cannot add-assign `&isize` to `f64`\n  --> /tmp/tmpvf10aoba.rs:13:25\n\
    \   |\n13 |                     sum += x;\n   |                         ^^ no\
    \ implementation for `f64 += &isize`\n   |\n   = help: the trait `AddAssign<&isize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvf10aoba.rs:14:21\n\
    \   |\n14 |                     1\n   |                     ^\n   |          \
    \           |\n   |                     expected `f64`, found integer\n   |  \
    \                   help: use a float literal: `1.0`\n\nerror[E0614]: type `f64`\
    \ cannot be dereferenced\n  --> /tmp/tmpvf10aoba.rs:17:21\n   |\n17 |        \
    \             *sum = x;\n   |                     ^^^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvf10aoba.rs:18:21\n   |\n18 |                     1\n \
    \  |                     ^\n   |                     |\n   |                 \
    \    expected `f64`, found integer\n   |                     help: use a float\
    \ literal: `1.0`\n\nerror[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmpvf10aoba.rs:21:21\n\
    \   |\n21 |                     *sum = *sum + x;\n   |                     ^^^^\n\
    \nerror[E0614]: type `f64` cannot be d"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().enumerate().map(|(i, x)| x).fold1(|a, b|\
    \ a + b) as f64\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `fold1` found for struct `Map` in the current\
    \ scope\n --> /tmp/tmpr_3xsqr6.rs:7:42\n  |\n7 |     l.iter().enumerate().map(|(i,\
    \ x)| x).fold1(|a, b| a + b) as f64\n  |                                     \
    \     ^^^^^ method not found in `Map<Enumerate<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpr_3xsqr6.rs:7:30:\
    \ 7:40]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NAN, |mut m, x| {\n        if m.is_nan()\
    \ {\n            m = x;\n        } else {\n            if *m >= x {\n        \
    \        m = *m;\n            } else if *m > x {\n                *m = x;\n  \
    \          }\n        }\n        m\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplgll1r0v.rs:9:17\n  |\n7 |\
    \     l.iter().fold(f64::NAN, |mut m, x| {\n  |                              \
    \    - expected due to this parameter type\n8 |         if m.is_nan() {\n9 | \
    \            m = x;\n  |                 ^ expected `f64`, found `&isize`\n\n\
    error[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmplgll1r0v.rs:11:16\n\
    \   |\n11 |             if *m >= x {\n   |                ^^\n\nerror[E0614]:\
    \ type `f64` cannot be dereferenced\n  --> /tmp/tmplgll1r0v.rs:12:21\n   |\n12\
    \ |                 m = *m;\n   |                     ^^\n\nerror[E0614]: type\
    \ `f64` cannot be dereferenced\n  --> /tmp/tmplgll1r0v.rs:13:23\n   |\n13 |  \
    \           } else if *m > x {\n   |                       ^^\n\nerror[E0614]:\
    \ type `f64` cannot be dereferenced\n  --> /tmp/tmplgll1r0v.rs:14:17\n   |\n14\
    \ |                 *m = x;\n   |                 ^^\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut m = f64::MAX;\n    for v in l.iter() {\n \
    \       if v < m {\n            m = v;\n        }\n    }\n    m\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8yineyfw.rs:9:16\n  |\n9 |\
    \         if v < m {\n  |                ^ expected `&isize`, found `f64`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp8yineyfw.rs:10:17\n   |\n7  |  \
    \   let mut m = f64::MAX;\n   |                 -------- expected due to this\
    \ value\n...\n10 |             m = v;\n   |                 ^ expected `f64`,\
    \ found `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::MIN, f64::MAX)\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(f64, &isize)>` closure, found `f64`\n\
    \    --> /tmp/tmpmoaduqea.rs:7:14\n     |\n7    |     l.iter().fold(f64::MIN,\
    \ f64::MAX)\n     |              ^^^^ expected an `FnMut<(f64, &isize)>` closure,\
    \ found `f64`\n     |\n     = help: the trait `FnMut<(f64, &isize)>` is not implemented\
    \ for `f64`\nnote: required by a bound in `fold`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().enumerate().filter(|&(i, x)| x.is_odd).map(|(i,\
    \ x)| x).sum::<f64>() / l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `is_odd` on type `&isize`\n --> /tmp/tmpnh7q7d4m.rs:7:45\n\
    \  |\n7 |     l.iter().enumerate().filter(|&(i, x)| x.is_odd).map(|(i, x)| x).sum::<f64>()\
    \ / l.len() / 2\n  |                                             ^^^^^^\n\nerror[E0277]:\
    \ the trait bound `f64: Sum<&isize>` is not satisfied\n    --> /tmp/tmpnh7q7d4m.rs:7:69\n\
    \     |\n7    |     l.iter().enumerate().filter(|&(i, x)| x.is_odd).map(|(i, x)|\
    \ x).sum::<f64>() / l.len() / 2\n     |                                      \
    \                               ^^^ the trait `Sum<&isize>` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Sum<A>`:\n\
    \               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n         \
    \      <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror[E0277]: cannot divide `f64`\
    \ by `usize`\n --> /tmp/tmpnh7q7d4m.rs:7:82\n  |\n7 |     l.iter().enumerate().filter(|&(i,\
    \ x)| x.is_odd).map(|(i, x)| x).sum::<f64>() / l.len() / 2\n  |              \
    \                                                                    ^ no implementation\
    \ for `f64 / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().enumerate().filter(|(i, e)| *e >= (l.len()\
    \ / 2.0)).map(|(i, e)| *i).min()\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpojxiimz6.rs:7:57\n\
    \  |\n7 |     l.iter().enumerate().filter(|(i, e)| *e >= (l.len() / 2.0)).map(|(i,\
    \ e)| *i).min()\n  |                                                         ^\
    \ no implementation for `usize / {float}`\n  |\n  = help: the trait `Div<{float}>`\
    \ is not implemented for `usize`\n  = help: the following other types implement\
    \ trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n            <&'a f64 as\
    \ Div<f64>>\n            <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n\
    \            <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n      \
    \      <&'a i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and\
    \ 54 others\n\nerror[E0614]: type `usize` cannot be dereferenced\n --> /tmp/tmpojxiimz6.rs:7:78\n\
    \  |\n7 |     l.iter().enumerate().filter(|(i, e)| *e >= (l.len() / 2.0)).map(|(i,\
    \ e)| *i).min()\n  |                                                         \
    \                     ^^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpojxiimz6.rs:7:5\n\
    \  |\n6 | fn median(l: Vec<isize>) -> f64 {\n  |                             ---\
    \ expected `f64` because of return type\n7 |     l.iter().enumerate().filter(|(i,\
    \ e)| *e >= (l.len() / 2.0)).map(|(i, e)| *i).min()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found enum `Option`\n  |\n  = note: expected type `f64`\n  \
    \           found enum `Option<_>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut min = l[0];\n    let mut max = l[0];\n   \
    \ for i in 1..l.len() {\n        let mut j = i;\n        while j > 0 && l[j] <\
    \ min {\n            min = l[j];\n            j = j - 1;\n        }\n        let\
    \ mut k = j;\n        while k < l.len() && l[k] > max {\n            max = l[k];\n\
    \            k = k + 1;\n        }\n        if i == k {\n            continue;\n\
    \        }\n        let mut l = min;\n        while l <= max {\n            if\
    \ l+1 == l[k] {\n                break;\n            }\n            l = l + (l+1)\
    \ + l[k];\n            k = k + 1;\n        }\n        if j-k == 1 {\n        \
    \    min = l;\n        } else {\n            max = l;\n        }\n    }\n    if\
    \ min == max {\n        min\n    } else {\n        ((min + max) / 2.0) as f64\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmp3x2ijj0f.rs:25:23\n\
    \   |\n25 |             if l+1 == l[k] {\n   |                       ^^^^\n\n\
    error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmp3x2ijj0f.rs:28:29\n\
    \   |\n28 |             l = l + (l+1) + l[k];\n   |                          \
    \   ^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3x2ijj0f.rs:38:9\n \
    \  |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                           \
    \  --- expected `f64` because of return type\n...\n38 |         min\n   |    \
    \     ^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n   |\n38 |         min as f64\n   |             ++++++\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmp3x2ijj0f.rs:40:22\n   |\n\
    40 |         ((min + max) / 2.0) as f64\n   |                      ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0608.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let l = l.iter().cloned().collect::<Vec<_>>();\n \
    \   if l.len() == 0 {\n        return 0;\n    }\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut mid = l.len() / 2.0;\n    let mut mv = l.iter().take(mid).cloned().collect::<Vec<_>>();\n\
    \    let mut min_val: f64 = l.iter().min(|a, b| a.partial_cmp(b)).unwrap();\n\
    \    let mut max_val: f64 = l.iter().max(|a, b| a.partial_cmp(b)).unwrap();\n\
    \    loop {\n        let mut mid = l.len() / 2.0;\n        let mut mv = l.iter().take(mid).cloned().collect::<Vec<_>>();\n\
    \        let mut min_val: f64 = l.iter().min(|a, b| a.partial_cmp(b)).unwrap();\n\
    \        let mut max_val: f64 = l.iter().max(|a, b| a.partial_cmp(b)).unwrap();\n\
    \        if min_val == max_val {\n            break;\n        }\n        let mut\
    \ mid_val: f64 = 0;\n        for v in mv {\n            mid_val += v.partial_cmp(max_val).unwrap();\n\
    \        }\n        if mid_val < mid {\n            l = mv;\n            mv =\
    \ l.iter().take(mid).cloned().collect::<Vec<_>>();\n            mid_val = 0;\n\
    \            mid = mid;\n        } else {\n            l = mv;\n            mv\
    \ = l.iter().take(mid).cloned().collect::<Vec<_>>();\n            mid_val = mid;\n\
    \            mid = mid / 2;\n        }\n    }\n    mv\n        .iter()\n     \
    \   .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n        .map(|x|\
    \ x.partial_cmp(min_val).unwrap())\n        .sum()\n        .unwrap()\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcj4_l0rl.rs:9:16\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |         return 0;\n  |              \
    \  ^\n  |                |\n  |                expected `f64`, found integer\n\
    \  |                help: use a float literal: `0.0`\n\nerror[E0277]: cannot divide\
    \ `usize` by `{float}`\n  --> /tmp/tmpcj4_l0rl.rs:12:27\n   |\n12 |     let mut\
    \ mid = l.len() / 2.0;\n   |                           ^ no implementation for\
    \ `usize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0061]: this function takes 0 arguments but 1 argument was\
    \ supplied\n    --> /tmp/tmpcj4_l0rl.rs:14:37\n     |\n14   |     let mut min_val:\
    \ f64 = l.iter().min(|a, b| a.partial_cmp(b)).unwrap();\n     |              \
    \                       ^^^ ----------------------- supplied 1 argument\n    \
    \ |                                     |\n     |                            \
    \         expected 0 arguments\n     |\nnote: associated function defined here\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcj4_l0rl.rs:14:28\n   |\n14 |\
    \     let mut min_val: f64 = l.iter().min(|a, b| a.partial_cmp(b)).unwrap();\n\
    \   |                      ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `&isize`\n   |                      |\n   |          \
    \            expected due to this\n\nerror[E0061]: this function takes 0 arguments\
    \ but 1 argument was supplied\n    --> /tmp/tmpcj4_l0rl.rs:15:37\n     |\n15 \
    \  |     let mut max_val: f64 = l.iter().max(|a, b| a.partial_cmp(b)).unwrap();\n\
    \     |                                     ^^^ ----------------------- supplied\
    \ 1 "
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let n = l.len();\n    if n <= 1 {\n        return\
    \ l[0];\n    }\n\n    let mut m = l[0];\n    for i in 1..n {\n        if l[i]\
    \ < m {\n            m = l[i];\n        }\n    }\n    m\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7h7nl5_2.rs:9:16\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |         return l[0];\n  |           \
    \     ^^^^ expected `f64`, found `isize`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp7h7nl5_2.rs:18:5\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n\
    \   |                             --- expected `f64` because of return type\n\
    ...\n18 |     m\n   |     ^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n18 |     m as f64\n   |       ++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0, |a, x| {\n        if a < x {\n  \
    \          a\n        } else {\n            x\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0dlje4ka.rs:7:19\n  |\n7 |\
    \     l.iter().fold(0, |a, x| {\n  |                   ^\n  |                \
    \   |\n  |                   expected `f64`, found integer\n  |              \
    \     help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp0dlje4ka.rs:8:16\n  |\n8 |         if a < x {\n  |                ^\
    \ expected `f64`, found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0dlje4ka.rs:11:13\n\
    \   |\n11 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    (l.len() - 1) + (l.len() / 2)\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph7ccvtai.rs:7:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n7 |     (l.len() - 1) + (l.len() / 2)\n  |   \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `usize`\n  |\nhelp: you\
    \ can cast a `usize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n7 |     ((l.len() - 1) + (l.len()\
    \ / 2)) as f64\n  |     +                             ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::INFINITY, |m, x| if x < m { x }\
    \ else { m }).unwrap() /\n        l.len() as f64\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1ny3hq2i.rs:7:48\n  |\n7 |\
    \     l.iter().fold(f64::INFINITY, |m, x| if x < m { x } else { m }).unwrap()\
    \ /\n  |                                                ^ expected `&isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1ny3hq2i.rs:7:52\n  |\n\
    7 |     l.iter().fold(f64::INFINITY, |m, x| if x < m { x } else { m }).unwrap()\
    \ /\n  |                                                    ^ expected `f64`,\
    \ found `&isize`\n\nerror[E0599]: no method named `unwrap` found for type `f64`\
    \ in the current scope\n --> /tmp/tmp1ny3hq2i.rs:7:68\n  |\n7 |     l.iter().fold(f64::INFINITY,\
    \ |m, x| if x < m { x } else { m }).unwrap() /\n  |                          \
    \                                          ^^^^^^ method not found in `f64`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    // Sort the list.\n    l.sort_unstable();\n\n    //\
    \ Return the median element.\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7dzm2qci.rs:11:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n11 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n11 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut it = l.iter().cloned().enumerate().cloned();\n\
    \    let mut median = l[0] as f64;\n    let mut count = 2;\n    loop {\n     \
    \   if let Some((index, value)) = it.next() {\n            if value < median {\n\
    \                median = value;\n            }\n            count -= 1;\n   \
    \         if count == 0 {\n                break;\n            }\n        }\n\
    \    }\n    median\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>> as Iterator>::Item == &_`\n    --> /tmp/tmpq2cfo7x_.rs:7:48\n     |\n\
    7    |     let mut it = l.iter().cloned().enumerate().cloned();\n     |      \
    \                                          ^^^^^^ expected reference, found tuple\n\
    \     |\n     = note: expected reference `&_`\n                    found tuple\
    \ `(usize, _)`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method\
    \ `next` exists for struct `Cloned<Enumerate<Cloned<std::slice::Iter<'_, isize>>>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpq2cfo7x_.rs:11:42\n \
    \  |\n11 |            if let Some((index, value)) = it.next() {\n   |        \
    \                                     ^^^^ method cannot be called on `Cloned<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>> as Iterator>::Item = &_`\n           which is required by `Cloned<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().cloned().partition(|x| x < l.len() / 2).map(|x|\
    \ {\n        if x == l.len() / 2 {\n            x\n        } else {\n        \
    \    x + (l.len() / 2 - x)\n        }\n    }).max_by_key(|x| x).expect(\"median\
    \ of empty list\")\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpux9xf0d2.rs:7:41\n  |\n7 |\
    \     l.iter().cloned().partition(|x| x < l.len() / 2).map(|x| {\n  |        \
    \                                 ^^^^^^^^^^^ expected `&isize`, found `usize`\n\
    \nerror[E0599]: `(_, _)` is not an iterator\n --> /tmp/tmpux9xf0d2.rs:7:54\n \
    \ |\n7 |     l.iter().cloned().partition(|x| x < l.len() / 2).map(|x| {\n  | \
    \                                                     ^^^ `(_, _)` is not an iterator\n\
    \  |\n  = note: the following trait bounds were not satisfied:\n          `(_,\
    \ _): Iterator`\n          which is required by `&mut (_, _): Iterator`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let len = l.len();\n    let mut mid = len / 2;\n \
    \   if len % 2 == 0 {\n        mid = len - 1;\n    }\n\n    l.sort();\n    let\
    \ l1 = l.split_at_mut(mid);\n    (l1.len() + l1.len() - 1.0) / (2.0 * mid) as\
    \ f64\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for tuple `(&mut [isize], &mut\
    \ [isize])` in the current scope\n  --> /tmp/tmpt7sdy4f0.rs:15:9\n   |\n15 | \
    \    (l1.len() + l1.len() - 1.0) / (2.0 * mid) as f64\n   |         ^^^ method\
    \ not found in `(&mut [isize], &mut [isize])`\n\nerror[E0599]: no method named\
    \ `len` found for tuple `(&mut [isize], &mut [isize])` in the current scope\n\
    \  --> /tmp/tmpt7sdy4f0.rs:15:20\n   |\n15 |     (l1.len() + l1.len() - 1.0) /\
    \ (2.0 * mid) as f64\n   |                    ^^^ method not found in `(&mut [isize],\
    \ &mut [isize])`\n\nerror[E0277]: cannot multiply `{float}` by `usize`\n  -->\
    \ /tmp/tmpt7sdy4f0.rs:15:40\n   |\n15 |     (l1.len() + l1.len() - 1.0) / (2.0\
    \ * mid) as f64\n   |                                        ^ no implementation\
    \ for `{float} * usize`\n   |\n   = help: the trait `Mul<usize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut n = l.len();\n    if n % 2 == 0 {\n      \
    \  n /= 2;\n    }\n    l.sort_unstable();\n    let mut low = l[0];\n    let mut\
    \ high = l[n-1];\n\n    for i in 0..(n-1) {\n        let mid = i * (i+1) / 2;\n\
    \        let v = (l[mid] - low) * (l[mid] - high) / (high - low);\n        if\
    \ v < 0 {\n            low = l[mid];\n        } else {\n            high = l[mid];\n\
    \        }\n    }\n\n    high\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqm4d82ln.rs:25:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n25 |     high\n   |     ^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    25 |     high as f64\n   |          ++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut m = l.iter().min_by_key(|x| x).unwrap() as\
    \ isize;\n    if l.len() % 2 == 0 {\n        m = m / 2;\n    }\n    m + ((l.len()\
    \ - 1) / 2).into()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0606]: casting `&isize` as `isize` is invalid\n --> /tmp/tmpn5fsl27j.rs:7:17\n\
    \  |\n7 |     let mut m = l.iter().min_by_key(|x| x).unwrap() as isize;\n  | \
    \                -----------------------------------^^^^^^^^^\n  |           \
    \      |\n  |                 cannot cast `&isize` as `isize`\n  |           \
    \      help: dereference the expression: `*l.iter().min_by_key(|x| x).unwrap()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0606`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.sort_unstable();\n    let len = l.len();\n    let\
    \ mid = len / 2;\n    (l.iter_mut().take(mid).last().unwrap() + l.iter_mut().take(mid).first().unwrap())/2\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `first` found for struct `std::iter::Take`\
    \ in the current scope\n  --> /tmp/tmplecsqon4.rs:10:70\n   |\n10 |     (l.iter_mut().take(mid).last().unwrap()\
    \ + l.iter_mut().take(mid).first().unwrap())/2\n   |                         \
    \                                             ^^^^^ method not found in `std::iter::Take<std::slice::IterMut<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().cloned().partition(|&x| x % 2 == 0).map(|x|\
    \ x.median()).collect::<Vec<_>>().nth(l.len() / 2)\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `(_, _)` is not an iterator\n --> /tmp/tmpqpxz05ev.rs:7:50\n\
    \  |\n7 |     l.iter().cloned().partition(|&x| x % 2 == 0).map(|x| x.median()).collect::<Vec<_>>().nth(l.len()\
    \ / 2)\n  |                                                  ^^^ `(_, _)` is not\
    \ an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `(_, _): Iterator`\n          which is required by `&mut (_, _): Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() as f64 / 2,\n    \
    \    |acc, x| if x < acc {\n            x\n        } else {\n            acc\n\
    \        },\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `{integer}`\n --> /tmp/tmprwstxzns.rs:8:24\n\
    \  |\n8 |         l.len() as f64 / 2,\n  |                        ^ no implementation\
    \ for `f64 / {integer}`\n  |\n  = help: the trait `Div<{integer}>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    help: consider using a floating-point literal by writing it with `.0`\n  |\n8\
    \ |         l.len() as f64 / 2.0,\n  |                           ++\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmprwstxzns.rs:9:25\n  |\n9 |         |acc, x| if\
    \ x < acc {\n  |                         ^^^ expected `&isize`, found `f64`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmprwstxzns.rs:10:13\n   |\n10 |  \
    \           x\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.len().check();\n    let mut med = l.iter().fold(Vec::new(),\
    \ |mut acc, e| {\n        if let Some(&v) = acc.pop() {\n            if v < e\
    \ {\n                let mid = vec![v, e].iter().cloned().collect::<Vec<_>>().sorted().rev()[0];\n\
    \                acc.push(mid);\n            }\n        }\n        acc.push(e);\n\
    \        acc\n    });\n    med.pop().unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmpyxrdhaju.rs:7:13\n  |\n7 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0599]: no method named\
    \ `sorted` found for struct `Vec<&isize>` in the current scope\n  --> /tmp/tmpyxrdhaju.rs:11:74\n\
    \   |\n11 |                 let mid = vec![v, e].iter().cloned().collect::<Vec<_>>().sorted().rev()[0];\n\
    \   |                                                                        \
    \  ^^^^^^ help: there is an associated function with a similar name: `is_sorted`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyxrdhaju.rs:15:18\n   |\n15 |\
    \         acc.push(e);\n   |                  ^ expected `&isize`, found `isize`\n\
    \   |\n   = note: expected reference `&&isize`\n              found reference\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxrdhaju.rs:18:5\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \   --- expected `f64` because of return type\n...\n18 |     med.pop().unwrap()\n\
    \   |     ^^^^^^^^^^^^^^^^^^ expected `f64`, found `&&isize`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let n = l.len();\n    let mut f = l.len() / 2;\n \
    \   let mut m = l[0];\n    if n % 2 == 0 {\n        for &x in l.iter() {\n   \
    \         if x < m {\n                m = x;\n            }\n        }\n    }\
    \ else {\n        for &x in l.iter() {\n            if x > m {\n             \
    \   m = x;\n            }\n        }\n    }\n    m\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_0iy3q3f.rs:23:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n23 |     m\n   |     ^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n23 |     m\
    \ as f64\n   |       ++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let sorted = l.iter().sorted().collect::<Vec<_>>();\n\
    \    sorted.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpirjxyswc.rs:7:27\n  |\n7 |     let sorted\
    \ = l.iter().sorted().collect::<Vec<_>>();\n  |                           ^^^^^^\
    \ method not found in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |max, el| max + (el / 2.0))\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `&isize` by `{float}`\n --> /tmp/tmpqrjyt6a1.rs:7:44\n\
    \  |\n7 |     l.iter().fold(0.0, |max, el| max + (el / 2.0))\n  |            \
    \                                ^ no implementation for `&isize / {float}`\n\
    \  |\n  = help: the trait `Div<{float}>` is not implemented for `&isize`\n  =\
    \ help: the following other types implement trait `Div<Rhs>`:\n            <&'a\
    \ f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128 as\
    \ Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\n    l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsxo9e83n.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter()\n        .fold(f64::nan(), |a, b| b.checked_add(a).unwrap_or(a))\n\
    \        .sqrt()\n        .unwrap_or(0.0)\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpm4qhdxko.rs:8:20\n  |\n8 |        \
    \ .fold(f64::nan(), |a, b| b.checked_add(a).unwrap_or(a))\n  |               \
    \     ^^^\n  |                    |\n  |                    function or associated\
    \ item not found in `f64`\n  |                    help: there is an associated\
    \ function with a similar name: `is_nan`\n\nerror[E0599]: no method named `sqrt`\
    \ found for type `isize` in the current scope\n --> /tmp/tmpm4qhdxko.rs:9:10\n\
    \  |\n9 |         .sqrt()\n  |          ^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.into(),\n    \
    \    |m, x| match m.cmp(x) {\n            Ordering::Less => m - 1,\n         \
    \   Ordering::Greater => m + 1,\n            Ordering::Equal => m,\n        },\n\
    \    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpc6y64hpe.rs:10:13\n   |\n10 |             Ordering::Less => m - 1,\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpc6y64hpe.rs:11:13\n\
    \   |\n11 |             Ordering::Greater => m + 1,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpc6y64hpe.rs:12:13\n   |\n12 |    \
    \         Ordering::Equal => m,\n   |             ^^^^^^^^ use of undeclared type\
    \ `Ordering`\n\nerror[E0599]: `f64` is not an iterator\n --> /tmp/tmpc6y64hpe.rs:9:24\n\
    \  |\n9 |         |m, x| match m.cmp(x) {\n  |                        ^^^ `f64`\
    \ is not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `f64: Iterator`\n          which is required by `&mut f64: Iterator`\n\
    \nerror[E0277]: cannot subtract `{integer}` from `f64`\n  --> /tmp/tmpc6y64hpe.rs:10:33\n\
    \   |\n10 |             Ordering::Less => m - 1,\n   |                       \
    \          ^ no implementation for `f64 - {integer}`\n   |\n   = help: the trait\
    \ `Sub<{integer}>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n    \
    \         <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n      \
    \       <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n          \
    \   <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a\
    \ isize as Sub<isize>>\n           and 48 others\nhelp: consider using a floating-point\
    \ literal by writing it with `.0`\n   |\n10 |             Ordering::Less => m\
    \ - 1.0,\n   |                                    ++\n\nerror[E0277]: cannot add\
    \ `{integer}` to `f64`\n  --> /tmp/tmpc6y64hpe.rs:11:36\n   |\n11 |          \
    \   Ordering::Greater => m + 1,\n   |                                    ^ no\
    \ implementation for `f64 + {integer}`\n   |\n   = help: the trait `Add<{integer}>`\
    \ is not implemented for `f64`\n   = help: the follo"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut count = l.len();\n    count -= 1;\n\n    l.iter().skip(count\
    \ / 2).fold(\n        l.iter().fold(l.iter().next(), f64::max),\n        |mut\
    \ a, &b| a.partial_cmp(&b).unwrap_or(a < b)\n    )\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptcj89xl2.rs:11:23\n   |\n\
    11 |         l.iter().fold(l.iter().next(), f64::max),\n   |                 \
    \      ^^^^^^^^^^^^^^^ expected `f64`, found enum `Option`\n   |\n   = note: expected\
    \ type `f64`\n              found enum `Option<&isize>`\n\nerror[E0631]: type\
    \ mismatch in function arguments\n    --> /tmp/tmptcj89xl2.rs:11:40\n     |\n\
    11   |         l.iter().fold(l.iter().next(), f64::max),\n     |             \
    \     ----                  ^^^^^^^^\n     |                  |              \
    \       |\n     |                  |                     expected signature of\
    \ `fn(f64, &isize) -> _`\n     |                  |                     found\
    \ signature of `fn(f64, f64) -> _`\n     |                  required by a bound\
    \ introduced by this call\n     |\nnote: required by a bound in `fold`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptcj89xl2.rs:12:35\n   |\n12 |         |mut a,\
    \ &b| a.partial_cmp(&b).unwrap_or(a < b)\n   |                               \
    \    ^^ expected `f64`, found `isize`\n   |\n   = note: expected reference `&f64`\n\
    \              found reference `&isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmptcj89xl2.rs:12:53\n   |\n12 |         |mut a, &b| a.partial_cmp(&b).unwrap_or(a\
    \ < b)\n   |                                                     ^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    12 |         |mut a, &b| a.partial_cmp(&b).unwrap_or(a < b as f64)\n   |     \
    \                                                  ++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptcj89xl2.rs:12:49\n   |\n12 |         |mut a, &b| a.partial_cmp(&b).unwrap_or(a\
    \ < b)\n   |                                                 ^^^^^ expected enum\
    \ `std::cmp::Ordering`, found `bool`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmptcj89xl2.rs:12:21\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n  \
    \ |                             --- expected `f64` because of return type\n...\n\
    12 |         |mut a, &b| a.partial_"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut s: Vec<isize> = l.iter().cloned().collect();\n\
    \    s.sort(); // sort from smallest to largest\n    s / 2.0\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot divide `Vec<isize>` by `{float}`\n --> /tmp/tmp65n6du0p.rs:9:7\n\
    \  |\n9 |     s / 2.0\n  |     - ^ --- {float}\n  |     |\n  |     Vec<isize>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        std::cmp::Ordering::Less,\n\
    \        std::cmp::Ordering::Greater,\n        |x, y| {\n            match (x,\
    \ y) {\n                (Some(y), Some(x)) => Some(x.to_f64() + y.to_f64()),\n\
    \                (Some(y), None) => {\n                    return Some(y.to_f64())\n\
    \                }\n                (None, Some(x)) => {\n                   \
    \ return Some(x.to_f64())\n                }\n                (None, _) => {\n\
    \                    let a = x.to_f64();\n                    let b = y.to_f64();\n\
    \                    if a < b {\n                        Some(a)\n           \
    \         } else {\n                        Some(b)\n                    }\n \
    \               }\n            }\n        }\n    )\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed for `Option<_>`\n  --> /tmp/tmp02cy0bkt.rs:10:13\n\
    \   |\n10 |         |x, y| {\n   |             ^ consider giving this closure\
    \ parameter the explicit type `Option<_>`, with the type parameters specified\n\
    \   |\n   = note: type must be known at this point\n\nerror[E0061]: this function\
    \ takes 2 arguments but 3 arguments were supplied\n    --> /tmp/tmp02cy0bkt.rs:7:14\n\
    \     |\n7    |       l.iter().fold(\n     |                ^^^^ expected 2 arguments\n\
    8    |           std::cmp::Ordering::Less,\n     |           ------------------------\n\
    9    |           std::cmp::Ordering::Greater,\n     |           ---------------------------\n\
    10   | /         |x, y| {\n11   | |             match (x, y) {\n12   | |     \
    \            (Some(y), Some(x)) => Some(x.to_f64() + y.to_f64()),\n13   | |  \
    \               (Some(y), None) => {\n...    |\n28   | |             }\n29   |\
    \ |         }\n     | |_________- supplied 3 arguments\n     |\nnote: associated\
    \ function defined here\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0282.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().cloned().enumerate().map(|(idx, val)| {\n\
    \        // Find the position of val in the sorted list of numbers\n        let\
    \ mut idx = idx;\n        if idx < l.len() {\n            if val < l[idx] {\n\
    \                idx = idx;\n            }\n        }\n        idx as _\n    }).sorted().last().unwrap_or(l.len()\
    \ / 2)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmpnw3ytx29.rs:16:8\n   |\n16 |     }).sorted().last().unwrap_or(l.len()\
    \ / 2)\n   |        ^^^^^^ method not found in `Map<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmpnw3ytx29.rs:7:39: 16:6]>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut m = l.len() / 2;\n    match l.len() {\n  \
    \      1 => m.to_f64(),\n        _ => if *l.len() <= m.to_f64() {\n          \
    \  *m\n        } else {\n            *m\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_f64` found for type `usize` in the current\
    \ scope\n --> /tmp/tmp7fe5_1gu.rs:9:16\n  |\n9 |         1 => m.to_f64(),\n  |\
    \                ^^^^^^ method not found in `usize`\n\nerror[E0614]: type `usize`\
    \ cannot be dereferenced\n  --> /tmp/tmp7fe5_1gu.rs:10:17\n   |\n10 |        \
    \ _ => if *l.len() <= m.to_f64() {\n   |                 ^^^^^^^^\n\nerror[E0599]:\
    \ no method named `to_f64` found for type `usize` in the current scope\n  -->\
    \ /tmp/tmp7fe5_1gu.rs:10:31\n   |\n10 |         _ => if *l.len() <= m.to_f64()\
    \ {\n   |                               ^^^^^^ method not found in `usize`\n\n\
    error[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmp7fe5_1gu.rs:11:13\n\
    \   |\n11 |             *m\n   |             ^^\n\nerror[E0614]: type `usize`\
    \ cannot be dereferenced\n  --> /tmp/tmp7fe5_1gu.rs:13:13\n   |\n13 |        \
    \     *m\n   |             ^^\n\nerror: aborting due to 5 previous errors\n\n\
    Some errors have detailed explanations: E0599, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    if l.len() < 2 {\n        l.len()\n    } else {\n\
    \        let mut mid = l.len() / 2;\n        let mut mv = l.len() % 2;\n\n   \
    \     if mv == 0 {\n            let mid1 = mid - 1;\n            mid::<isize>::min(l,\
    \ mid1)\n        } else {\n            mid::<isize>::max(l, mid)\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `mid`\n\
    \  --> /tmp/tmp4aajs9wh.rs:15:13\n   |\n15 |             mid::<isize>::min(l,\
    \ mid1)\n   |             ^^^ use of undeclared crate or module `mid`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `mid`\n  --> /tmp/tmp4aajs9wh.rs:17:13\n\
    \   |\n17 |             mid::<isize>::max(l, mid)\n   |             ^^^ use of\
    \ undeclared crate or module `mid`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4aajs9wh.rs:8:9\n\
    \  |\n6 | fn median(l: Vec<isize>) -> f64 {\n  |                             ---\
    \ expected `f64` because of return type\n7 |     if l.len() < 2 {\n8 |       \
    \  l.len()\n  |         ^^^^^^^ expected `f64`, found `usize`\n  |\nhelp: you\
    \ can cast a `usize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n8 |         l.len() as f64\n  | \
    \                ++++++\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l\n        .iter()\n        .zip(l.iter().cloned().rev())\n\
    \        .map(|(x, y)| x.partial_cmp(y).expect(\"two elements are equal\"))\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n        .max()\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpypptrmhh.rs:10:37\n   |\n\
    10 |         .map(|(x, y)| x.partial_cmp(y).expect(\"two elements are equal\"\
    ))\n   |                                     ^\n   |                         \
    \            |\n   |                                     expected `&isize`, found\
    \ `isize`\n   |                                     help: consider borrowing here:\
    \ `&y`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpypptrmhh.rs:7:5\n   |\n\
    6  |   fn median(l: Vec<isize>) -> f64 {\n   |                               ---\
    \ expected `f64` because of return type\n7  | /     l\n8  | |         .iter()\n\
    9  | |         .zip(l.iter().cloned().rev())\n10 | |         .map(|(x, y)| x.partial_cmp(y).expect(\"\
    two elements are equal\"))\n...  |\n13 | |         .cloned()\n14 | |         .max()\n\
    \   | |______________^ expected `f64`, found enum `Option`\n   |\n   = note: expected\
    \ type `f64`\n              found enum `Option<std::cmp::Ordering>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut count = l.iter().count();\n    count.sort();\n\
    \    if count % 2 == 0 {\n        l[count.len() / 2].0\n    } else {\n       \
    \ l[count.len() / 2 - 1].0\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for type `usize` in the current\
    \ scope\n --> /tmp/tmpasofn6z6.rs:8:11\n  |\n8 |     count.sort();\n  |      \
    \     ^^^^ method not found in `usize`\n\nerror[E0599]: no method named `len`\
    \ found for type `usize` in the current scope\n  --> /tmp/tmpasofn6z6.rs:10:17\n\
    \   |\n10 |         l[count.len() / 2].0\n   |                 ^^^ method not\
    \ found in `usize`\n\nerror[E0599]: no method named `len` found for type `usize`\
    \ in the current scope\n  --> /tmp/tmpasofn6z6.rs:12:17\n   |\n12 |         l[count.len()\
    \ / 2 - 1].0\n   |                 ^^^ method not found in `usize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.iter().skip(l.len() / 2).fold(l.iter().skip(l.len()\
    \ / 2).skip(1).sum() / 2.0, 1.0),\n        0.5,\n    )\n}\n\nfn main() {\n   \
    \ let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(f64, &isize)>` closure, found `{float}`\n\
    \    --> /tmp/tmp094iy1st.rs:8:89\n     |\n8    |         l.iter().skip(l.len()\
    \ / 2).fold(l.iter().skip(l.len() / 2).skip(1).sum() / 2.0, 1.0),\n     |    \
    \                                ---- required by a bound introduced by this call\
    \     ^^^ expected an `FnMut<(f64, &isize)>` closure, found `{float}`\n     |\n\
    \     = help: the trait `FnMut<(f64, &isize)>` is not implemented for `{float}`\n\
    note: required by a bound in `fold`\n\nerror[E0277]: expected a `FnMut<(f64, &isize)>`\
    \ closure, found `{float}`\n    --> /tmp/tmp094iy1st.rs:9:9\n     |\n7    |  \
    \   l.iter().fold(\n     |              ---- required by a bound introduced by\
    \ this call\n8    |         l.iter().skip(l.len() / 2).fold(l.iter().skip(l.len()\
    \ / 2).skip(1).sum() / 2.0, 1.0),\n9    |         0.5,\n     |         ^^^ expected\
    \ an `FnMut<(f64, &isize)>` closure, found `{float}`\n     |\n     = help: the\
    \ trait `FnMut<(f64, &isize)>` is not implemented for `{float}`\nnote: required\
    \ by a bound in `fold`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut it = l.iter().enumerate().rev();\n    let\
    \ (a, b) = it.next();\n    let mut l = a;\n    let mut m = b;\n    for i in 1..(l.len()\
    \ / 2) {\n        if l > m {\n            (l, m) = (m, l);\n        }\n      \
    \  l = l.next();\n        m = m.next();\n    }\n    m\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx1n02l7m.rs:8:9\n  |\n8 |\
    \     let (a, b) = it.next();\n  |         ^^^^^^   --------- this expression\
    \ has type `Option<(usize, &isize)>`\n  |         |\n  |         expected enum\
    \ `Option`, found tuple\n  |\n  = note: expected enum `Option<(usize, &isize)>`\n\
    \            found tuple `(_, _)`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let len = l.len();\n    let mut middle = l.len() /\
    \ 2;\n    match len {\n        1 => l[0],\n        _ if len % 2 == 1 => l[middle],\n\
    \        _ => match {\n            l[middle as usize - 1] < l[middle] => {\n \
    \               middle -= 1;\n                l[middle as usize - 1]\n       \
    \     }\n            middle, l => {\n                l[middle as usize - 1]\n\
    \            }\n        }\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `=>`\n\
    \  --> /tmp/tmpiazd9dsm.rs:13:48\n   |\n13 |             l[middle as usize - 1]\
    \ < l[middle] => {\n   |                                                ^^ expected\
    \ one of `.`, `;`, `?`, `}`, or an operator\n\nerror: expected one of `.`, `?`,\
    \ `{`, or an operator, found `}`\n  --> /tmp/tmpiazd9dsm.rs:21:5\n   |\n12 | \
    \        _ => match {\n   |           -- ----- while parsing this `match` expression\n\
    \   |           |\n   |           while parsing the `match` arm starting here\n\
    ...\n20 |         }\n   |          - expected one of `.`, `?`, `{`, or an operator\n\
    21 |     }\n   |     ^ unexpected token\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpiazd9dsm.rs:10:14\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n  \
    \ |                             --- expected `f64` because of return type\n...\n\
    10 |         1 => l[0],\n   |              ^^^^ expected `f64`, found `isize`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0, |acc, x| acc + x / 2)\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxf1jg434.rs:7:19\n  |\n7 |\
    \     l.iter().fold(0, |acc, x| acc + x / 2)\n  |                   ^\n  |   \
    \                |\n  |                   expected `f64`, found integer\n  | \
    \                  help: use a float literal: `0.0`\n\nerror[E0277]: cannot add\
    \ `isize` to `f64`\n --> /tmp/tmpxf1jg434.rs:7:35\n  |\n7 |     l.iter().fold(0,\
    \ |acc, x| acc + x / 2)\n  |                                   ^ no implementation\
    \ for `f64 + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Add<Rhs>`:\n\
    \            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n      \
    \      <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n          \
    \  <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a\
    \ i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n\
    \    v.sort();\n    let n = v.len();\n    v.swap(0, (n + 1) / 2);\n    match v.len()\
    \ {\n        0 => 0.0,\n        1 => v[0],\n        _ => v[n / 2] + v[n - 1] /\
    \ 2.0,\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpk1lty21p.rs:13:14\n\
    \   |\n11 | /     match v.len() {\n12 | |         0 => 0.0,\n   | |          \
    \    --- this is found to be of type `f64`\n13 | |         1 => v[0],\n   | |\
    \              ^^^^ expected `f64`, found `isize`\n14 | |         _ => v[n / 2]\
    \ + v[n - 1] / 2.0,\n15 | |     }\n   | |_____- `match` arms have incompatible\
    \ types\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpk1lty21p.rs:14:34\n\
    \   |\n14 |         _ => v[n / 2] + v[n - 1] / 2.0,\n   |                    \
    \              ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let size = l.len();\n    l.iter().take(size / 2).fold(0.0,\
    \ |sum, item| {\n        sum += item;\n        sum\n    }) / 2.0\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `&isize` to `{float}`\n --> /tmp/tmp1wu34mb2.rs:9:13\n\
    \  |\n9 |         sum += item;\n  |             ^^ no implementation for `{float}\
    \ += &isize`\n  |\n  = help: the trait `AddAssign<&isize>` is not implemented\
    \ for `{float}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(l.len() / 2, |sum, val| sum + val /\
    \ 2)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb92y5iid.rs:7:19\n  |\n7 |\
    \     l.iter().fold(l.len() / 2, |sum, val| sum + val / 2)\n  |              \
    \     ^^^^^^^^^^^ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize`\
    \ to an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n  |\n7 |     l.iter().fold((l.len() / 2) as f64, |sum, val| sum\
    \ + val / 2)\n  |                   +           ++++++++\n\nerror[E0277]: cannot\
    \ add `isize` to `f64`\n --> /tmp/tmpb92y5iid.rs:7:47\n  |\n7 |     l.iter().fold(l.len()\
    \ / 2, |sum, val| sum + val / 2)\n  |                                        \
    \       ^ no implementation for `f64 + isize`\n  |\n  = help: the trait `Add<isize>`\
    \ is not implemented for `f64`\n  = help: the following other types implement\
    \ trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as\
    \ Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n\
    \            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n      \
    \      <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc, x| acc + x\
    \ / l.len() as f64 / 2)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `&isize` by `f64`\n --> /tmp/tmprgl8kffg.rs:7:55\n\
    \  |\n7 |     l.iter().fold(f64::NEG_INFINITY, |acc, x| acc + x / l.len() as f64\
    \ / 2)\n  |                                                       ^ no implementation\
    \ for `&isize / f64`\n  |\n  = help: the trait `Div<f64>` is not implemented for\
    \ `&isize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    if l.len() <= 1 {\n        return l.iter().next().unwrap();\n\
    \    }\n\n    let mut m = l.iter().cloned().sorted().rev().next().unwrap();\n\n\
    \    for i in 2..l.len() {\n        if m*2 > i {\n            m = l + m - i;\n\
    \        }\n    }\n\n    m\n}\n\nfn main() {\n    let candidate = median;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp___xel6k.rs:8:16\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n7 |     if l.len() <= 1 {\n8 |         return\
    \ l.iter().next().unwrap();\n  |                ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `&isize`\n\nerror[E0599]: no method named `sorted` found for struct\
    \ `Cloned` in the current scope\n  --> /tmp/tmp___xel6k.rs:11:35\n   |\n11 | \
    \    let mut m = l.iter().cloned().sorted().rev().next().unwrap();\n   |     \
    \                              ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0369]: cannot add `_` to `Vec<isize>`\n  --> /tmp/tmp___xel6k.rs:15:19\n\
    \   |\n15 |             m = l + m - i;\n   |                 - ^ - _\n   |   \
    \              |\n   |                 Vec<isize>\n\nerror[E0277]: cannot multiply\
    \ `f64` by `{integer}`\n  --> /tmp/tmp___xel6k.rs:14:13\n   |\n14 |         if\
    \ m*2 > i {\n   |             ^ no implementation for `f64 * {integer}`\n   |\n\
    \   = help: the trait `Mul<{integer}>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n             <&'a f32\
    \ as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as\
    \ Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n\
    \             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n      \
    \       <&'a isize as Mul<isize>>\n           and 49 others\nhelp: consider using\
    \ a floating-point literal by writing it with `.0`\n   |\n14 |         if m*2.0\
    \ > i {\n   |               ++\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0369, E0599.\nFor more\
    \ information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    // Find median of unsorted list.\n    let mut min\
    \ = l[0];\n    let mut max = l[0];\n    for i in l.iter_mut() {\n        if *i\
    \ < min {\n            min = *i;\n        }\n        if *i > max {\n         \
    \   max = *i;\n        }\n    }\n\n    // Return mean of median of two elements.\n\
    \    return (max + min) / 2.0;\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpji5teadq.rs:20:24\n\
    \   |\n20 |     return (max + min) / 2.0;\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_owned();\n    l.sort();\n    let\
    \ n = l.len();\n    if n < 2 {\n        l[0]\n    } else {\n        let index\
    \ = n / 2;\n        l[index] + (l[index + 1] - l[index]) * 1.0\n    }\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf72tvri8.rs:11:9\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n11 |         l[0]\n   |         ^^^^ expected\
    \ `f64`, found `isize`\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n\
    \  --> /tmp/tmpf72tvri8.rs:14:46\n   |\n14 |         l[index] + (l[index + 1]\
    \ - l[index]) * 1.0\n   |                                              ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().cloned().sorted().skip(l.len() / 2).last().unwrap()\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpotw6zofa.rs:7:23\n  |\n7 |     l.iter().cloned().sorted().skip(l.len()\
    \ / 2).last().unwrap()\n  |                       ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        return -1.0;\n    }\n\n\
    \    let mut n = l.len();\n\n    if n % 2 == 0 {\n        return l[(n - 1) / 2].to_f64();\n\
    \    } else {\n        let mut mid = n / 2;\n        let mut m = (l[mid - 1] +\
    \ l[mid]) / 2.0;\n\n        for _ in 1..mid+1 {\n            m = min(m, (l[mid-1]\
    \ + l[mid]) / 2.0);\n        }\n\n        m\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp5xfjfvxb.rs:20:17\n\
    \   |\n20 |             m = min(m, (l[mid-1] + l[mid]) / 2.0);\n   |         \
    \        ^^^\n...\n27 | fn main() {\n   | --------- similarly named function `main`\
    \ defined here\n   |\nhelp: a function with a similar name exists\n   |\n20 |\
    \             m = main(m, (l[mid-1] + l[mid]) / 2.0);\n   |                 ~~~~\n\
    help: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\n\
    error[E0599]: no method named `to_f64` found for type `isize` in the current scope\n\
    \  --> /tmp/tmp5xfjfvxb.rs:14:31\n   |\n14 |         return l[(n - 1) / 2].to_f64();\n\
    \   |                               ^^^^^^ method not found in `isize`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmp5xfjfvxb.rs:17:43\n   |\n\
    17 |         let mut m = (l[mid - 1] + l[mid]) / 2.0;\n   |                  \
    \                         ^ no implementation for `isize / {float}`\n   |\n  \
    \ = help: the trait `Div<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmp5xfjfvxb.rs:20:44\n   |\n20 |   \
    \          m = min(m, (l[mid-1] + l[mid]) / 2.0);\n   |                      \
    \                      ^ no implementation for `isize / {float}`\n   |\n   = help:\
    \ the trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 "
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let len = l.len();\n    if len == 0 {\n        return\
    \ 0.0;\n    }\n    if len % 2 == 0 {\n        return (l[len/2 - 1] + l[len/2])\
    \ / 2.0;\n    }\n    return l[len/2];\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmprxyyajbw.rs:12:42\n\
    \   |\n12 |         return (l[len/2 - 1] + l[len/2]) / 2.0;\n   |            \
    \                              ^ no implementation for `isize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprxyyajbw.rs:14:12\n   |\n6  | fn median(l: Vec<isize>)\
    \ -> f64 {\n   |                             --- expected `_` because of return\
    \ type\n...\n14 |     return l[len/2];\n   |            ^^^^^^^^ expected `f64`,\
    \ found `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().cloned().enumerate().fold(0.0, |t, (i, v)|\
    \ t + v / 2)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmpy1s_nnqm.rs:7:59\n\
    \  |\n7 |     l.iter().cloned().enumerate().fold(0.0, |t, (i, v)| t + v / 2)\n\
    \  |                                                           ^ no implementation\
    \ for `f64 + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Add<Rhs>`:\n\
    \            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n      \
    \      <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n          \
    \  <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a\
    \ i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut x = l.len();\n    let mut y = l.len();\n \
    \   let mut mid = 0;\n    while x > 0 && y < l.len() {\n        if l[mid] < l[x\
    \ - 1] {\n            mid += 1;\n        }\n        x -= 1;\n        y += 1;\n\
    \    }\n    let mut ans = l.iter().nth(mid).unwrap();\n    ans += l.iter().skip(mid).count().unwrap()\
    \ * 1.0 / 2.0;\n    ans\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmpivk8pse_.rs:18:39\n   |\n18 |     ans += l.iter().skip(mid).count().unwrap()\
    \ * 1.0 / 2.0;\n   |                                       ^^^^^^ method not found\
    \ in `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpivk8pse_.rs:19:5\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \   --- expected `f64` because of return type\n...\n19 |     ans\n   |     ^^^\
    \ expected `f64`, found `&isize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().enumerate().sorted().map(|(index, elem)|\
    \ elem).last().unwrap()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Enumerate` in\
    \ the current scope\n --> /tmp/tmpq0fkpxmz.rs:7:26\n  |\n7 |     l.iter().enumerate().sorted().map(|(index,\
    \ elem)| elem).last().unwrap()\n  |                          ^^^^^^ method not\
    \ found in `Enumerate<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0f64, |a, b| a + b) / l.len()\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&isize` to `f64`\n --> /tmp/tmpjnn6eru5.rs:7:36\n\
    \  |\n7 |     l.iter().fold(0.0f64, |a, b| a + b) / l.len()\n  |             \
    \                       ^ no implementation for `f64 + &isize`\n  |\n  = help:\
    \ the trait `Add<&isize>` is not implemented for `f64`\n  = help: the following\
    \ other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n\
    \            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n    \
    \        <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n          \
    \  <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize\
    \ as Add<isize>>\n          and 48 others\n\nerror[E0277]: cannot divide `f64`\
    \ by `usize`\n --> /tmp/tmpjnn6eru5.rs:7:41\n  |\n7 |     l.iter().fold(0.0f64,\
    \ |a, b| a + b) / l.len()\n  |                                         ^ no implementation\
    \ for `f64 / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut c = l.iter().cloned().sort();\n    c / 2.0\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `Cloned` in the current\
    \ scope\n --> /tmp/tmpanaj5l7w.rs:7:35\n  |\n7 |     let mut c = l.iter().cloned().sort();\n\
    \  |                                   ^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(l.len() / 2.0, |acc, x| if x < acc {\
    \ x } else { acc })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmps6d2f8vc.rs:7:27\n\
    \  |\n7 |     l.iter().fold(l.len() / 2.0, |acc, x| if x < acc { x } else { acc\
    \ })\n  |                           ^ no implementation for `usize / {float}`\n\
    \  |\n  = help: the trait `Div<{float}>` is not implemented for `usize`\n  = help:\
    \ the following other types implement trait `Div<Rhs>`:\n            <&'a f32\
    \ as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n\
    \            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n      \
    \      <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a\
    \ isize as Div<isize>>\n          and 54 others\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmps6d2f8vc.rs:7:50\n  |\n7 |     l.iter().fold(l.len() / 2.0, |acc,\
    \ x| if x < acc { x } else { acc })\n  |                                     \
    \             ^^^ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmps6d2f8vc.rs:7:56\n  |\n7 |     l.iter().fold(l.len() / 2.0, |acc,\
    \ x| if x < acc { x } else { acc })\n  |                                     \
    \                   ^ expected `f64`, found `&isize`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    // find the middle index\n    let mid = (l.len() /\
    \ 2).to_f64();\n\n    // find the average of all the middle elements\n    let\
    \ sum: f64 = l.iter().sum();\n\n    let mut l = l.into_iter();\n    l.sort();\n\
    \n    // if the list is less than two elements, median is simply the average of\
    \ the\n    // middle elements\n    if l.len() <= 2 {\n        return sum / l.len();\n\
    \    }\n\n    // if the list has only two elements, median is the middle element\n\
    \    if l.len() == 1 {\n        return mid;\n    }\n\n    // if the list has an\
    \ even number of elements, median is the average of the\n    // two middle elements\n\
    \    if l.len() % 2 == 0 {\n        return sum / 2;\n    }\n\n    // if the list\
    \ has an odd number of elements, median is the middle element\n    return mid;\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_f64` found for type `usize` in the current\
    \ scope\n --> /tmp/tmp8vyx7fph.rs:8:29\n  |\n8 |     let mid = (l.len() / 2).to_f64();\n\
    \  |                             ^^^^^^ method not found in `usize`\n\nerror[E0277]:\
    \ the trait bound `f64: Sum<&isize>` is not satisfied\n    --> /tmp/tmp8vyx7fph.rs:11:29\n\
    \     |\n11   |     let sum: f64 = l.iter().sum();\n     |                   \
    \          ^^^ the trait `Sum<&isize>` is not implemented for `f64`\n     |\n\
    \     = help: the following other types implement trait `Sum<A>`:\n          \
    \     <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64\
    \ as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a\
    \ i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n\
    \               <i16 as Sum>\n             and 20 others\nnote: required by a\
    \ bound in `std::iter::Iterator::sum`\n\nerror[E0599]: no method named `sort`\
    \ found for struct `std::vec::IntoIter` in the current scope\n  --> /tmp/tmp8vyx7fph.rs:14:7\n\
    \   |\n14 |     l.sort();\n   |       ^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp8vyx7fph.rs:19:20\n\
    \   |\n19 |         return sum / l.len();\n   |                    ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmp8vyx7fph.rs:30:20\n\
    \   |\n30 |         return sum / 2;\n   |                    ^ no implementation\
    \ for `f64 / {integer}`\n   |\n   = help: the trait `Div<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \     "
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let l = l.iter().cloned().collect();\n    let mut\
    \ l = l.iter().filter(|&x| x > 0).collect::<Vec<_>>();\n    let l = l.iter().cloned().collect();\n\
    \    let mut l = l.iter().filter(|&x| x < 0).collect::<Vec<_>>();\n    l.iter().cloned().sorted().next().unwrap()\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpwtsdrtpj.rs:8:17\n\
    \  |\n7 |     let l = l.iter().cloned().collect();\n  |         - consider giving\
    \ `l` a type\n8 |     let mut l = l.iter().filter(|&x| x > 0).collect::<Vec<_>>();\n\
    \  |                 ^ cannot infer type\n  |\n  = note: type must be known at\
    \ this point\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut len = l.len();\n    let mid = len / 2;\n \
    \   if len % 2 == 0 {\n        mid.floor() as f64\n    } else {\n        mid.ceil()\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `floor` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmp24fskaif.rs:10:13\n   |\n10 |         mid.floor() as f64\n\
    \   |             ^^^^^ help: there is an associated function with a similar name:\
    \ `div_floor`\n\nerror[E0599]: no method named `ceil` found for type `usize` in\
    \ the current scope\n  --> /tmp/tmp24fskaif.rs:12:13\n   |\n12 |         mid.ceil()\
    \ as f64\n   |             ^^^^ help: there is an associated function with a similar\
    \ name: `div_ceil`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().enumerate().map(|(idx, item)| {\n       \
    \ if idx == 0 || (item - l[idx - 1]).abs() < 0.5 * l[idx].abs() {\n          \
    \  item\n        } else {\n            l[idx as usize - 1]\n        }\n    }).median()\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n --> /tmp/tmp_fxelsy6.rs:8:56\n\
    \  |\n8 |         if idx == 0 || (item - l[idx - 1]).abs() < 0.5 * l[idx].abs()\
    \ {\n  |                                                        ^ no implementation\
    \ for `{float} * isize`\n  |\n  = help: the trait `Mul<isize>` is not implemented\
    \ for `{float}`\n  = help: the following other types implement trait `Mul<Rhs>`:\n\
    \            <&'a f32 as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n      \
    \      <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n          \
    \  <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n            <&'a\
    \ i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and 49 others\n\
    \nerror[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmp_fxelsy6.rs:11:13\n\
    \   |\n8  | /         if idx == 0 || (item - l[idx - 1]).abs() < 0.5 * l[idx].abs()\
    \ {\n9  | |             item\n   | |             ---- expected because of this\n\
    10 | |         } else {\n11 | |             l[idx as usize - 1]\n   | |      \
    \       ^^^^^^^^^^^^^^^^^^^ expected `&isize`, found `isize`\n12 | |         }\n\
    \   | |_________- `if` and `else` have incompatible types\n\nerror[E0599]: no\
    \ method named `median` found for struct `Map` in the current scope\n  --> /tmp/tmp_fxelsy6.rs:13:8\n\
    \   |\n13 |     }).median()\n   |        ^^^^^^ method not found in `Map<Enumerate<std::slice::Iter<'_,\
    \ isize>>, _>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().windows(4).fold(f64::nan, |acc, n| {\n  \
    \      let mut v = acc.to_f64();\n        v.push((n[0] + n[2]).to_f64() / 2.);\n\
    \        v\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `windows` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpn91lglwa.rs:7:14\n  |\n7 |     l.iter().windows(4).fold(f64::nan,\
    \ |acc, n| {\n  |              ^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror[E0599]: no function or associated item named `nan` found for\
    \ type `f64` in the current scope\n --> /tmp/tmpn91lglwa.rs:7:35\n  |\n7 |   \
    \  l.iter().windows(4).fold(f64::nan, |acc, n| {\n  |                        \
    \           ^^^\n  |                                   |\n  |                \
    \                   function or associated item not found in `f64`\n  |      \
    \                             help: there is an associated function with a similar\
    \ name: `is_nan`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned();\n    l.sort_unstable_by_key(|&x|\
    \ x.0);\n    let mut mid = l.len() / 2;\n    l.sort_unstable_by_key(|&x| x.0);\n\
    \    if l.len() % 2 != 0 {\n        mid = mid.min(mid.len() - 1);\n    }\n   \
    \ l.iter_mut().enumerate().filter(|&(i, x)| x.1 == mid || x.1 == mid - 1).next()\n\
    \        .map(|&(i, x)| x.0)\n        .unwrap_or(l.iter().cloned().next().unwrap())\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_unstable_by_key` found for struct `Cloned`\
    \ in the current scope\n --> /tmp/tmp8x65xujx.rs:8:7\n  |\n8 |     l.sort_unstable_by_key(|&x|\
    \ x.0);\n  |       ^^^^^^^^^^^^^^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0599]: no method named `sort_unstable_by_key` found for struct\
    \ `Cloned` in the current scope\n  --> /tmp/tmp8x65xujx.rs:10:7\n   |\n10 |  \
    \   l.sort_unstable_by_key(|&x| x.0);\n   |       ^^^^^^^^^^^^^^^^^^^^ method\
    \ not found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror[E0599]: no method\
    \ named `len` found for type `usize` in the current scope\n  --> /tmp/tmp8x65xujx.rs:12:27\n\
    \   |\n12 |         mid = mid.min(mid.len() - 1);\n   |                      \
    \     ^^^ method not found in `usize`\n\nerror[E0599]: no method named `iter_mut`\
    \ found for struct `Cloned` in the current scope\n  --> /tmp/tmp8x65xujx.rs:14:7\n\
    \   |\n14 |     l.iter_mut().enumerate().filter(|&(i, x)| x.1 == mid || x.1 ==\
    \ mid - 1).next()\n   |       ^^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0599]: no method named `iter` found for struct `Cloned` in\
    \ the current scope\n  --> /tmp/tmp8x65xujx.rs:16:22\n   |\n16 |         .unwrap_or(l.iter().cloned().next().unwrap())\n\
    \   |                      ^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |acc, e| acc + f64::from(e)).to_f64()\
    \ / l.len() as f64\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: From<&isize>` is not satisfied\n -->\
    \ /tmp/tmpsq6xeu8_.rs:7:39\n  |\n7 |     l.iter().fold(0.0, |acc, e| acc + f64::from(e)).to_f64()\
    \ / l.len() as f64\n  |                                       ^^^^^^^^^ the trait\
    \ `From<&isize>` is not implemented for `f64`\n  |\n  = help: the following other\
    \ types implement trait `From<T>`:\n            <f32 as From<i16>>\n         \
    \   <f32 as From<i8>>\n            <f32 as From<u16>>\n            <f32 as From<u8>>\n\
    \            <f64 as From<f32>>\n            <f64 as From<i16>>\n            <f64\
    \ as From<i32>>\n            <f64 as From<i8>>\n          and 67 others\n\nerror[E0599]:\
    \ no method named `to_f64` found for type `f64` in the current scope\n --> /tmp/tmpsq6xeu8_.rs:7:53\n\
    \  |\n7 |     l.iter().fold(0.0, |acc, e| acc + f64::from(e)).to_f64() / l.len()\
    \ as f64\n  |                                                     ^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut s = l.iter().fold(0, |a, b| a + b);\n    s.0\
    \ / s.1\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0610]: `isize` is a primitive type and therefore doesn't have fields\n\
    \ --> /tmp/tmp1qbnpm5y.rs:8:7\n  |\n8 |     s.0 / s.1\n  |       ^\n\nerror[E0610]:\
    \ `isize` is a primitive type and therefore doesn't have fields\n --> /tmp/tmp1qbnpm5y.rs:8:13\n\
    \  |\n8 |     s.0 / s.1\n  |             ^\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0610`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l\n        .iter()\n        .enumerate()\n       \
    \ .fold(f64::NINF, |acc, (idx, elt)| if idx == l.len() / 2 {\n            elt.0\n\
    \        } else if idx == l.len() - 1 {\n            acc.0\n        } else {\n\
    \            ((elt.0 + elt.1) / 2.)\n        })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around block return value\n  --> /tmp/tmpetngaakd.rs:15:13\n\
    \   |\n15 |             ((elt.0 + elt.1) / 2.)\n   |             ^           \
    \         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove\
    \ these parentheses\n   |\n15 -             ((elt.0 + elt.1) / 2.)\n15 +     \
    \        (elt.0 + elt.1) / 2.\n   | \n\nerror[E0599]: no associated item named\
    \ `NINF` found for type `f64` in the current scope\n  --> /tmp/tmpetngaakd.rs:10:20\n\
    \   |\n10 |         .fold(f64::NINF, |acc, (idx, elt)| if idx == l.len() / 2 {\n\
    \   |                    ^^^^ associated item not found in `f64`\n\nerror[E0609]:\
    \ no field `0` on type `&isize`\n  --> /tmp/tmpetngaakd.rs:11:17\n   |\n11 | \
    \            elt.0\n   |                 ^\n\nerror[E0610]: `f64` is a primitive\
    \ type and therefore doesn't have fields\n  --> /tmp/tmpetngaakd.rs:13:17\n  \
    \ |\n13 |             acc.0\n   |                 ^\n\nerror[E0609]: no field\
    \ `0` on type `&isize`\n  --> /tmp/tmpetngaakd.rs:15:19\n   |\n15 |          \
    \   ((elt.0 + elt.1) / 2.)\n   |                   ^\n\nerror[E0609]: no field\
    \ `1` on type `&isize`\n  --> /tmp/tmpetngaakd.rs:15:27\n   |\n15 |          \
    \   ((elt.0 + elt.1) / 2.)\n   |                           ^\n\nerror: aborting\
    \ due to 5 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0599, E0609, E0610.\nFor more information about an error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    // Calculate median\n    let mut a = l.iter().cloned().collect::<Vec<isize>>();\n\
    \    a.sort_unstable();\n    let n = a.len();\n\n    let half_len = n as f64 /\
    \ 2;\n    half_len.try_into().unwrap();\n\n    if n < 2 {\n        return 0.0;\n\
    \    }\n\n    // Find median\n    let mid = (n - 1) / 2;\n    a[mid].clone() +\
    \ (a[mid - 1].clone() + a[mid + 1].clone()) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmp9rasmmhf.rs:12:29\n\
    \   |\n12 |     let half_len = n as f64 / 2;\n   |                           \
    \  ^ no implementation for `f64 / {integer}`\n   |\n   = help: the trait `Div<{integer}>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\nhelp: consider using a floating-point literal by writing\
    \ it with `.0`\n   |\n12 |     let half_len = n as f64 / 2.0;\n   |          \
    \                      ++\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmp9rasmmhf.rs:21:64\n   |\n21 |     a[mid].clone() + (a[mid - 1].clone()\
    \ + a[mid + 1].clone()) / 2.0\n   |                                          \
    \                      ^ no implementation for `isize / {float}`\n   |\n   = help:\
    \ the trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().enumerate().fold(f64::NAN, |mut a, (idx,\
    \ el)| {\n        debug_assert!(idx < a.len());\n        if el > a {\n       \
    \     a = el;\n        }\n        a\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `f64` in the current\
    \ scope\n --> /tmp/tmpdmr_admb.rs:8:31\n  |\n8 |         debug_assert!(idx < a.len());\n\
    \  |                               ^^^ help: there is an associated function with\
    \ a similar name: `ln`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdmr_admb.rs:9:17\n\
    \  |\n9 |         if el > a {\n  |                 ^ expected `&isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdmr_admb.rs:10:17\n \
    \  |\n7  |     l.iter().enumerate().fold(f64::NAN, |mut a, (idx, el)| {\n   |\
    \                                              - expected due to this parameter\
    \ type\n...\n10 |             a = el;\n   |                 ^^ expected `f64`,\
    \ found `&isize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l\n        .iter()\n        .fold(-std::i32::MAX.into(),\
    \ |a, e| a + e / 2)\n        .unwrap_or(0.0)\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp9jrm6yzo.rs:9:30\n\
    \  |\n9 |         .fold(-std::i32::MAX.into(), |a, e| a + e / 2)\n  |        \
    \        --------------^^^^--\n  |                |             |\n  |       \
    \         |             cannot infer type for type parameter `T` declared on the\
    \ trait `Into`\n  |                this method call resolves to `T`\n  |\n  =\
    \ note: type must be known at this point\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l\n        .windows(4)\n        .iter()\n        .fold(0,\
    \ |mut acc, x| acc + x)\n        .into()\n        .sqrt()\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `Windows` in the\
    \ current scope\n --> /tmp/tmpkvyh2tzi.rs:9:10\n  |\n9 |         .iter()\n  |\
    \          ^^^^ method not found in `Windows<'_, isize>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::ninf, |a, b| a.checked_add(b)).expect(\"\
    median overflow\")\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `ninf` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpqyqhbxhh.rs:7:24\n  |\n7 |     l.iter().fold(f64::ninf,\
    \ |a, b| a.checked_add(b)).expect(\"median overflow\")\n  |                  \
    \      ^^^^ function or associated item not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    if l.len() < 2 {\n        return 0.;\n    }\n\n  \
    \  l.iter().enumerate().filter(|(i, _)| i % 2 == 0).fold(l.len() / 2.0, |sum,\
    \ e| sum + e) / 2.0\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n  --> /tmp/tmpr2juz39e.rs:11:67\n\
    \   |\n11 |     l.iter().enumerate().filter(|(i, _)| i % 2 == 0).fold(l.len()\
    \ / 2.0, |sum, e| sum + e) / 2.0\n   |                                       \
    \                            ^ no implementation for `usize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    let len = l.len();\n    (len % 2 == 1) ? l[len / 2] : (l[len\
    \ / 2].f64 + l[len / 2 - 1].f64) / 2.0\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `l`\n\
    \  --> /tmp/tmpiudurdxu.rs:10:22\n   |\n10 |     (len % 2 == 1) ? l[len / 2] :\
    \ (l[len / 2].f64 + l[len / 2 - 1].f64) / 2.0\n   |                      ^ expected\
    \ one of `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut min = l[0];\n    let mut max = l[0];\n   \
    \ for &x in l.iter() {\n        if x < min {\n            min = x;\n        }\n\
    \        if x > max {\n            max = x;\n        }\n    }\n    (max - min)\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb87e7u2p.rs:17:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n17 |     (max - min) / 2\n   |     ^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n17 |     ((max - min) / 2) as f64\n   |     +             \
    \  ++++++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut m = l.len() as f64;\n    let mut j = 0;\n\
    \    while j < l.len() {\n        if l[j] >= m {\n            break;\n       \
    \ }\n        m += l[j];\n        j += 1;\n    }\n    m / 2\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwt0fvt1h.rs:10:20\n   |\n\
    10 |         if l[j] >= m {\n   |                    ^ expected `isize`, found\
    \ `f64`\n\nerror[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmpwt0fvt1h.rs:13:11\n\
    \   |\n13 |         m += l[j];\n   |           ^^ no implementation for `f64 +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmpwt0fvt1h.rs:16:7\n\
    \   |\n16 |     m / 2\n   |       ^ no implementation for `f64 / {integer}`\n\
    \   |\n   = help: the trait `Div<{integer}>` is not implemented for `f64`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\nhelp: consider\
    \ using a floating-point literal by writing it with `.0`\n   |\n16 |     m / 2.0\n\
    \   |          ++\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    let mut mid = l.len() / 2;\n    let mut v = l.iter().skip(mid).take(mid).sum::<f64>()\
    \ / mid;\n    let mut s = 0.0f64;\n    for (i, item) in l.iter().skip(mid).take(mid).enumerate()\
    \ {\n        s += item.to_f64();\n        if i > 0 {\n            v -= s;\n  \
    \      }\n    }\n    if v < 0.0 {\n        return -v.abs();\n    } else {\n  \
    \      return v.abs();\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Sum<&isize>` is not satisfied\n   \
    \ --> /tmp/tmp7aqn455h.rs:10:46\n     |\n10   |     let mut v = l.iter().skip(mid).take(mid).sum::<f64>()\
    \ / mid;\n     |                                              ^^^ the trait `Sum<&isize>`\
    \ is not implemented for `f64`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp7aqn455h.rs:10:59\n\
    \   |\n10 |     let mut v = l.iter().skip(mid).take(mid).sum::<f64>() / mid;\n\
    \   |                                                           ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0599]: no method named `to_f64` found for reference `&isize`\
    \ in the current scope\n  --> /tmp/tmp7aqn455h.rs:13:19\n   |\n13 |         s\
    \ += item.to_f64();\n   |                   ^^^^^^ method not found in `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    l.len().checked_div(2).ok_or(Error::new(\n\
    \        ErrorKind::Arithmetic,\n        \"median is undefined on empty list.\"\
    ,\n    ))?;\n    l[l.len() / 2]\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `ErrorKind`\n \
    \ --> /tmp/tmp401c9gny.rs:10:9\n   |\n10 |         ErrorKind::Arithmetic,\n  \
    \ |         ^^^^^^^^^ use of undeclared type `ErrorKind`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Error`\n --> /tmp/tmp401c9gny.rs:9:34\n\
    \  |\n9 |     l.len().checked_div(2).ok_or(Error::new(\n  |                  \
    \                ^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ one of these items\n  |\n1 | use std::error::Error;\n  |\n1 | use std::fmt::Error;\n\
    \  |\n1 | use std::io::Error;\n  |\n\nerror[E0277]: the `?` operator can only\
    \ be used in a function that returns `Result` or `Option` (or another type that\
    \ implements `FromResidual`)\n  --> /tmp/tmp401c9gny.rs:12:7\n   |\n6  | / fn\
    \ median(l: Vec<isize>) -> f64 {\n7  | |     let mut l = l.to_vec();\n8  | | \
    \    l.sort();\n9  | |     l.len().checked_div(2).ok_or(Error::new(\n...  |\n\
    12 | |     ))?;\n   | |       ^ cannot use the `?` operator in a function that\
    \ returns `f64`\n13 | |     l[l.len() / 2]\n14 | | }\n   | |_- this function should\
    \ return `Result` or `Option` to accept `?`\n   |\n   = help: the trait `FromResidual<Result<Infallible,\
    \ _>>` is not implemented for `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp401c9gny.rs:13:5\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \   --- expected `f64` because of return type\n...\n13 |     l[l.len() / 2]\n\
    \   |     ^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0433.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n        |a,\
    \ b| {\n            use std::cmp::Ordering;\n            Ordering::Less => a,\n\
    \            Ordering::Greater => b,\n        }\n    )\n}\n\nfn main() {\n   \
    \ let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found `=>`\n  --> /tmp/tmpz102tw3y.rs:11:28\n   |\n11 |             Ordering::Less\
    \ => a,\n   |                            ^^ expected one of 8 possible tokens\n\
    \nwarning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmpz102tw3y.rs:10:17\n\
    \   |\n10 |             use std::cmp::Ordering;\n   |                 ^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0277]: cannot\
    \ divide `usize` by `{float}`\n --> /tmp/tmpz102tw3y.rs:8:17\n  |\n8 |       \
    \  l.len() / 2.0,\n  |                 ^ no implementation for `usize / {float}`\n\
    \  |\n  = help: the trait `Div<{float}>` is not implemented for `usize`\n  = help:\
    \ the following other types implement trait `Div<Rhs>`:\n            <&'a f32\
    \ as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n\
    \            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n      \
    \      <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a\
    \ isize as Div<isize>>\n          and 54 others\n\nerror: aborting due to 2 previous\
    \ errors; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut s: isize = 0;\n    let mut e: isize = l.len();\n\
    \    let mut min = mmin(l);\n    loop {\n        if e == 1 {\n            return\
    \ min;\n        }\n        e /= 2;\n        s = l.len() / 2;\n        if s <=\
    \ e {\n            break;\n        }\n        let mut min = mmin(l);\n       \
    \ l.swap(0, s);\n        l.swap(s, e);\n    }\n    l.iter().filter(|&x| x > min).max().unwrap_or(l.len()\
    \ / 2)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `mmin` in this scope\n  --> /tmp/tmpcl1ch770.rs:9:19\n\
    \   |\n9  |     let mut min = mmin(l);\n   |                   ^^^^ help: a function\
    \ with a similar name exists: `main`\n...\n26 | fn main() {\n   | --------- similarly\
    \ named function `main` defined here\n\nerror[E0425]: cannot find function `mmin`\
    \ in this scope\n  --> /tmp/tmpcl1ch770.rs:19:23\n   |\n19 |         let mut min\
    \ = mmin(l);\n   |                       ^^^^ help: a function with a similar\
    \ name exists: `main`\n...\n26 | fn main() {\n   | --------- similarly named function\
    \ `main` defined here\n\nerror[E0308]: mismatched types\n --> /tmp/tmpcl1ch770.rs:8:24\n\
    \  |\n8 |     let mut e: isize = l.len();\n  |                -----   ^^^^^^^\
    \ expected `isize`, found `usize`\n  |                |\n  |                expected\
    \ due to this\n  |\nhelp: you can convert a `usize` to an `isize` and panic if\
    \ the converted value doesn't fit\n  |\n8 |     let mut e: isize = l.len().try_into().unwrap();\n\
    \  |                               ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcl1ch770.rs:15:13\n   |\n7  |     let mut s: isize = 0;\n\
    \   |                ----- expected due to this type\n...\n15 |         s = l.len()\
    \ / 2;\n   |             ^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcl1ch770.rs:20:19\n   |\n20 |         l.swap(0,\
    \ s);\n   |                   ^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n20 |         l.swap(0, s.try_into().unwrap());\n   |            \
    \        ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcl1ch770.rs:21:16\n\
    \   |\n21 |         l.swap(s, e);\n   |                ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n21 |         l.swap(s.try_into().unwrap(),\
    \ e);\n   |                 ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcl1ch770.rs:21:19\n   |\n21 |         l.swap(s, e);"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    if l.len() % 2 == 0 {\n        median(l.iter().cloned().enumerate().take(l.len()\
    \ / 2).collect())\n    } else {\n        median(l.iter().cloned().enumerate().skip(l.len()\
    \ / 2).collect())\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `(usize, isize)`\n    --> /tmp/tmpv6v7472n.rs:8:16\n \
    \    |\n8    |         median(l.iter().cloned().enumerate().take(l.len() / 2).collect())\n\
    \     |         ------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=(usize,\
    \ isize)>`\n     |         |\n     |         required by a bound introduced by\
    \ this call\n     |\n     = help: the trait `FromIterator<(usize, isize)>` is\
    \ not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is\
    \ implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `(usize, isize)`\n    --> /tmp/tmpv6v7472n.rs:10:16\n     |\n10   |\
    \         median(l.iter().cloned().enumerate().skip(l.len() / 2).collect())\n\
    \     |         ------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=(usize,\
    \ isize)>`\n     |         |\n     |         required by a bound introduced by\
    \ this call\n     |\n     = help: the trait `FromIterator<(usize, isize)>` is\
    \ not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is\
    \ implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    // Sort by absolute value first, then by magnitude\
    \ in descending order\n    let v = l.iter().cloned().sorted().collect::<Vec<isize>>();\n\
    \    f(&v)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `f` in this scope\n --> /tmp/tmpeyiqass0.rs:9:5\n\
    \  |\n9 |     f(&v)\n  |     ^ help: a local variable with a similar name exists:\
    \ `l`\n\nerror[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpeyiqass0.rs:8:31\n  |\n8 |     let v = l.iter().cloned().sorted().collect::<Vec<isize>>();\n\
    \  |                               ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut sorted = l.iter().cloned().sort_by(|a, b|\
    \ a.partial_cmp(&b));\n    sorted.next().unwrap().partial_cmp(&sorted.last().unwrap()).unwrap()\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpkviwn1rb.rs:7:40\n  |\n7 |     let mut sorted =\
    \ l.iter().cloned().sort_by(|a, b| a.partial_cmp(&b));\n  |                  \
    \                      ^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter();\n    l.sort();\n    let mut\
    \ mid;\n    let mut min_mid = l.nth(l.len() / 2);\n    if l.len() % 2 == 1 {\n\
    \        mid = min_mid;\n    } else {\n        mid = l.iter().nth(l.len() / 2\
    \ - 1).unwrap();\n    }\n    while l.len() > 1 {\n        if l.len() % 2 == 0\
    \ {\n            if l.len() == 1 {\n                return l.first().unwrap();\n\
    \            }\n            let (min, max) = l.split_at_mut(2);\n            min\
    \ = min.iter().max().unwrap();\n            max = max.iter().min().unwrap();\n\
    \            if min < mid {\n                mid = min;\n            } else {\n\
    \                mid = max;\n            }\n        } else {\n            let\
    \ mid = l.iter().nth(l.len() / 2).unwrap();\n            l.iter_mut().enumerate().for_each(|(i,\
    \ e)| *e = e.wrapping_add(mid));\n        }\n    }\n    mid\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpvcsfg_kw.rs:8:7\n  |\n8 |     l.sort();\n\
    \  |       ^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror[E0599]:\
    \ no method named `iter` found for struct `std::slice::Iter` in the current scope\n\
    \  --> /tmp/tmpvcsfg_kw.rs:14:17\n   |\n14 |         mid = l.iter().nth(l.len()\
    \ / 2 - 1).unwrap();\n   |                 ^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror[E0599]: no method named `first` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpvcsfg_kw.rs:19:26\n   |\n19 |          \
    \       return l.first().unwrap();\n   |                          ^^^^^ method\
    \ not found in `std::slice::Iter<'_, isize>`\n\nerror[E0599]: no method named\
    \ `split_at_mut` found for struct `std::slice::Iter` in the current scope\n  -->\
    \ /tmp/tmpvcsfg_kw.rs:21:32\n   |\n21 |             let (min, max) = l.split_at_mut(2);\n\
    \   |                                ^^^^^^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror[E0599]: no method named `iter` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpvcsfg_kw.rs:30:25\n   |\n30 |          \
    \   let mid = l.iter().nth(l.len() / 2).unwrap();\n   |                      \
    \   ^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror[E0599]: no\
    \ method named `iter_mut` found for struct `std::slice::Iter` in the current scope\n\
    \  --> /tmp/tmpvcsfg_kw.rs:31:15\n   |\n31 |             l.iter_mut().enumerate().for_each(|(i,\
    \ e)| *e = e.wrapping_add(mid));\n   |               ^^^^^^^^ method not found\
    \ in `std::slice::Iter<'_, isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvcsfg_kw.rs:34:5\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \   --- expected `f64` because of return type\n...\n34 |     mid\n   |     ^^^\
    \ expected `f64`, found enum `Option`\n   |\n   = note: expected type `f64`\n\
    \              found enum `Option<&isize>`\n\nerror: aborting due to 7 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more "
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| a + b / 2)\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpqdwg56_c.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| a + b / 2)\n  |                        ^^^\n  |                     \
    \   |\n  |                        function or associated item not found in `f64`\n\
    \  |                        help: there is an associated function with a similar\
    \ name: `is_nan`\n\nerror[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmpqdwg56_c.rs:7:40\n\
    \  |\n7 |     l.iter().fold(f64::nan(), |a, b| a + b / 2)\n  |               \
    \                         ^ no implementation for `f64 + isize`\n  |\n  = help:\
    \ the trait `Add<isize>` is not implemented for `f64`\n  = help: the following\
    \ other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n\
    \            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n    \
    \        <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n          \
    \  <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize\
    \ as Add<isize>>\n          and 48 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().enumerate().map(|(i, e)| {\n        let mut\
    \ n = i - 1;\n        if n < 0 { n = l.len() + n }\n        ((l.len() + n + 1)\
    \ / 2.0, e)\n    }).filter(|e| e._1 > e._0).min()._1\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n  --> /tmp/tmpi71bgusl.rs:10:28\n\
    \   |\n10 |         ((l.len() + n + 1) / 2.0, e)\n   |                       \
    \     ^ no implementation for `usize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0609]: no field `_1` on type `&(_, &isize)`\n\
    \  --> /tmp/tmpi71bgusl.rs:11:21\n   |\n11 |     }).filter(|e| e._1 > e._0).min()._1\n\
    \   |                     ^^\n\nerror[E0609]: no field `_0` on type `&(_, &isize)`\n\
    \  --> /tmp/tmpi71bgusl.rs:11:28\n   |\n11 |     }).filter(|e| e._1 > e._0).min()._1\n\
    \   |                            ^^\n\nerror[E0609]: no field `_1` on type `Option<(_,\
    \ &isize)>`\n  --> /tmp/tmpi71bgusl.rs:11:38\n   |\n11 |     }).filter(|e| e._1\
    \ > e._0).min()._1\n   |                                      ^^\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let size = l.len();\n    if size == 0 {\n        0.0\n\
    \    } else {\n        let mut count = size as f64;\n        l.iter().fold(0.0)\
    \ {\n            a, b if a + b > count {\n                count\n            }\
    \ else { a }\n        }\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n\
    \  --> /tmp/tmp_w_gzyft.rs:12:28\n   |\n12 |         l.iter().fold(0.0) {\n  \
    \ |                            ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut v = l.to_vec();\n    v.sort();\n    match\
    \ v.len() {\n        0 => return 0.0,\n        _ => v.iter().next().unwrap(),\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp94h70k5m.rs:11:14\n\
    \   |\n9  | /     match v.len() {\n10 | |         0 => return 0.0,\n   | |   \
    \           ---------- this is found to be of type `f64`\n11 | |         _ =>\
    \ v.iter().next().unwrap(),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `&isize`\n12 | |     }\n   | |_____- `match` arms have incompatible\
    \ types\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |acc, n| acc + n)\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&isize` to `f64`\n --> /tmp/tmp2pzvsh4y.rs:7:37\n\
    \  |\n7 |     l.iter().fold(0.0, |acc, n| acc + n)\n  |                      \
    \               ^ no implementation for `f64 + &isize`\n  |\n  = help: the trait\
    \ `Add<&isize>` is not implemented for `f64`\n  = help: the following other types\
    \ implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n           \
    \ <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a\
    \ i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as\
    \ Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n\
    \          and 48 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().cloned().enumerate().fold(0.0, |acc, (i,\
    \ elem)| {\n        let half = i / 2;\n        match half {\n            0 =>\
    \ return acc,\n            1 => acc.add(elem),\n            2 => acc.mul(2).add(elem),\n\
    \            _ => acc.mul(3).add(elem),\n        }\n    })\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `add` found for type `f64` in the current\
    \ scope\n   --> /tmp/tmpiupka69b.rs:11:22\n    |\n11  |             1 => acc.add(elem),\n\
    \    |                      ^^^ method not found in `f64`\n    |\n    = help:\
    \ items from traits can only be used if the trait is in scope\nhelp: the following\
    \ trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n\
    1   | use std::ops::Add;\n    |\n\nerror[E0599]: no method named `mul` found for\
    \ type `f64` in the current scope\n   --> /tmp/tmpiupka69b.rs:12:22\n    |\n12\
    \  |             2 => acc.mul(2).add(elem),\n    |                      ^^^ method\
    \ not found in `f64`\n    |\n    = help: items from traits can only be used if\
    \ the trait is in scope\nhelp: the following trait is implemented but not in scope;\
    \ perhaps add a `use` for it:\n    |\n1   | use std::ops::Mul;\n    |\n\nerror[E0599]:\
    \ no method named `mul` found for type `f64` in the current scope\n   --> /tmp/tmpiupka69b.rs:13:22\n\
    \    |\n13  |             _ => acc.mul(3).add(elem),\n    |                  \
    \    ^^^ method not found in `f64`\n    |\n    = help: items from traits can only\
    \ be used if the trait is in scope\nhelp: the following trait is implemented but\
    \ not in scope; perhaps add a `use` for it:\n    |\n1   | use std::ops::Mul;\n\
    \    |\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    if l.len() < 2 {\n        panic!(\"median requires\
    \ at least two elements\")\n    }\n\n    l.sort();\n\n    let mid = (l.len() -\
    \ 1) / 2;\n    if l.len() % 2 == 0 {\n        l.len() / 2.0\n    } else {\n  \
    \      mid + 1\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n  --> /tmp/tmpuz7ejgia.rs:15:17\n\
    \   |\n15 |         l.len() / 2.0\n   |                 ^ no implementation for\
    \ `usize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuz7ejgia.rs:17:9\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \   --- expected `f64` because of return type\n...\n17 |         mid + 1\n   |\
    \         ^^^^^^^ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize`\
    \ to an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n   |\n17 |         (mid + 1) as f64\n   |         +       ++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut mid = l.len() / 2;\n    if l.len() % 2 ==\
    \ 0 {\n        mid = l.len() / 2;\n    }\n    let (l, r) = l.split_at_mut(mid);\n\
    \    l += r;\n    let mut min_value = l.iter().fold(f64::MAX.into(), |a, &x| x.partial_cmp(a)\
    \ < 0);\n    min_value = min_value.partial_cmp(&l.iter().fold(f64::MAX.into(),\
    \ |a, &x| x.partial_cmp(a) < 0)) < 0\n        ? min_value.partial_cmp(&l.iter().fold(f64::MAX.into(),\
    \ |a, &x| x.partial_cmp(a) < 0))\n        : min_value;\n    min_value\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `min_value`\n\
    \  --> /tmp/tmpw5xvsm_a.rs:15:11\n   |\n15 |         ? min_value.partial_cmp(&l.iter().fold(f64::MAX.into(),\
    \ |a, &x| x.partial_cmp(a) < 0))\n   |           ^^^^^^^^^ expected one of `.`,\
    \ `;`, `?`, `}`, or an operator\n\nerror[E0368]: binary assignment operation `+=`\
    \ cannot be applied to type `&mut [isize]`\n  --> /tmp/tmpw5xvsm_a.rs:12:5\n \
    \  |\n12 |     l += r;\n   |     -^^^^^\n   |     |\n   |     cannot use `+=`\
    \ on type `&mut [isize]`\n\nerror[E0277]: the trait bound `&isize: From<f64>`\
    \ is not satisfied\n  --> /tmp/tmpw5xvsm_a.rs:13:48\n   |\n13 |     let mut min_value\
    \ = l.iter().fold(f64::MAX.into(), |a, &x| x.partial_cmp(a) < 0);\n   |      \
    \                                          ^^^^ the trait `From<f64>` is not implemented\
    \ for `&isize`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <f32 as From<i16>>\n             <f32 as From<i8>>\n           \
    \  <f32 as From<u16>>\n             <f32 as From<u8>>\n             <f64 as From<f32>>\n\
    \             <f64 as From<i16>>\n             <f64 as From<i32>>\n          \
    \   <f64 as From<i8>>\n           and 67 others\n   = note: required because of\
    \ the requirements on the impl of `Into<&isize>` for `f64`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpw5xvsm_a.rs:13:83\n   |\n13 |     let mut min_value = l.iter().fold(f64::MAX.into(),\
    \ |a, &x| x.partial_cmp(a) < 0);\n   |                                       \
    \                                            ^ expected enum `Option`, found integer\n\
    \   |\n   = note: expected enum `Option<std::cmp::Ordering>`\n              found\
    \ type `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw5xvsm_a.rs:13:64\n\
    \   |\n13 |     let mut min_value = l.iter().fold(f64::MAX.into(), |a, &x| x.partial_cmp(a)\
    \ < 0);\n   |                                                                ^^^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found `bool`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information\
    \ about an e"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2,\n        |max,\
    \ n| if n > max { n } else { max }\n    )\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp68a7mvmn.rs:8:9\n  |\n8 |\
    \         l.len() / 2,\n  |         ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \  |\nhelp: you can cast a `usize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n8 |         (l.len() / 2) as f64,\n\
    \  |         +           ++++++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmp68a7mvmn.rs:9:25\n\
    \  |\n9 |         |max, n| if n > max { n } else { max }\n  |                \
    \         ^^^ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp68a7mvmn.rs:9:31\n  |\n9 |         |max, n| if n > max { n } else\
    \ { max }\n  |                               ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        return 0.0;\n    }\n  \
    \  let mut v = l[0];\n    for i in l.iter_mut() {\n        *i /= 2.0;\n      \
    \  if *i < v {\n            v = *i;\n        }\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide-assign `isize` by `{float}`\n  --> /tmp/tmprl5yc31i.rs:12:12\n\
    \   |\n12 |         *i /= 2.0;\n   |            ^^ no implementation for `isize\
    \ /= {float}`\n   |\n   = help: the trait `DivAssign<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprl5yc31i.rs:17:5\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \   --- expected `f64` because of return type\n...\n17 |     v\n   |     ^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    17 |     v as f64\n   |       ++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.len() / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpqcyc7g6w.rs:7:13\n\
    \  |\n7 |     l.len() / 2.0\n  |             ^ no implementation for `usize /\
    \ {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| b.iter().fold(a + b, |acc,\
    \ x| {\n        if x < acc {\n            acc\n        } else {\n            x\n\
    \        }\n    }))\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for reference `&isize` in the\
    \ current scope\n --> /tmp/tmp_030yx6l.rs:7:33\n  |\n7 |     l.iter().fold(0.0,\
    \ |a, b| b.iter().fold(a + b, |acc, x| {\n  |                                \
    \ ^^^^ method not found in `&isize`\n\nerror[E0277]: cannot add `&isize` to `f64`\n\
    \ --> /tmp/tmp_030yx6l.rs:7:47\n  |\n7 |     l.iter().fold(0.0, |a, b| b.iter().fold(a\
    \ + b, |acc, x| {\n  |                                               ^ no implementation\
    \ for `f64 + &isize`\n  |\n  = help: the trait `Add<&isize>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Add<Rhs>`:\n\
    \            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n      \
    \      <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n          \
    \  <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a\
    \ i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let l = l.iter().cloned().collect::<Vec<_>>();\n \
    \   let mut sorted_list = l.iter().cloned().sorted();\n    sorted_list.next().unwrap();\n\
    \    let mut low_val = sorted_list.next().unwrap();\n    let mut high_val = sorted_list.next().unwrap();\n\
    \n    let mut mid = high_val.iter().cloned().next().unwrap();\n\n    for i in\
    \ sorted_list.skip(l.len() / 2) {\n        if i.unwrap() <= low_val.unwrap() {\n\
    \            low_val = i.unwrap();\n        } else if i.unwrap() >= high_val.unwrap()\
    \ {\n            high_val = i.unwrap();\n        } else {\n            mid = i.unwrap();\n\
    \            break;\n        }\n    }\n\n    let mut low_middle = low_val.iter().cloned().next().unwrap();\n\
    \    let mut high_middle = high_val.iter().cloned().next().unwrap();\n    while\
    \ low_middle != high_middle {\n        if low_middle > high_middle {\n       \
    \     low_val = low_middle;\n            low_middle = low_val.iter().cloned().next().unwrap();\n\
    \        } else {\n            high_val = high_middle;\n            high_middle\
    \ = high_val.iter().cloned().next().unwrap();\n        }\n    }\n    low_val\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpeyikfrpc.rs:8:45\n  |\n8 |     let mut sorted_list\
    \ = l.iter().cloned().sorted();\n  |                                         \
    \    ^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let n = l.len();\n    let mut l = l.sort();\n    let\
    \ mut median = l[n / 2];\n    for &x in &mut l[..n / 2] {\n        if x < median\
    \ {\n            median = x;\n        }\n    }\n    median\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `()`\n --> /tmp/tmpai_vu1gf.rs:9:22\n\
    \  |\n9 |     let mut median = l[n / 2];\n  |                      ^^^^^^^^\n\
    \  |\n  = help: to access tuple elements, use tuple indexing syntax (e.g., `tuple.0`)\n\
    \nerror[E0608]: cannot index into a value of type `()`\n  --> /tmp/tmpai_vu1gf.rs:10:20\n\
    \   |\n10 |     for &x in &mut l[..n / 2] {\n   |                    ^^^^^^^^^^\n\
    \   |\n   = help: to access tuple elements, use tuple indexing syntax (e.g., `tuple.0`)\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0608`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l\n        .iter()\n        .fold(\n            l.iter().max().unwrap()\
    \ + l.len() / 2.0,\n            |x, y| {\n                x.checked_add(y).ok()\n\
    \                    .map(|x| x.floor() as f64)\n                    .unwrap_or(x.ceil()\
    \ as f64)\n            },\n        )\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n  --> /tmp/tmpavpo6jnq.rs:10:47\n\
    \   |\n10 |             l.iter().max().unwrap() + l.len() / 2.0,\n   |       \
    \                                        ^ no implementation for `usize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `usize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0599]:\
    \ no method named `checked_add` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmpavpo6jnq.rs:12:19\n   |\n12 |                 x.checked_add(y).ok()\n\
    \   |                   ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    if l.len() < 1 {\n        return 0.0\n    }\n\n    let mut min = l[0];\n\
    \    let mut max = l[0];\n    let mut mid = 0;\n\n    for x in l {\n        if\
    \ x < min {\n            min = x;\n        }\n        if x > max {\n         \
    \   max = x;\n        }\n        mid += x;\n    }\n\n    mid = mid.into();\n \
    \   mid = mid.into();\n\n    if mid != 0 {\n        return (mid + 0.5) * (max\
    \ - min).into();\n    }\n\n    mid = mid.into();\n    mid = mid.into();\n\n  \
    \  if mid != 0 {\n        return mid * (max - min).into();\n    }\n\n    min\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `{float}` to `isize`\n  --> /tmp/tmp8aqtgx5m.rs:30:21\n\
    \   |\n30 |         return (mid + 0.5) * (max - min).into();\n   |           \
    \          ^ no implementation for `isize + {float}`\n   |\n   = help: the trait\
    \ `Add<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n    \
    \         <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n      \
    \       <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n          \
    \   <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a\
    \ isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8aqtgx5m.rs:40:5\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n\
    \   |                             --- expected `f64` because of return type\n\
    ...\n40 |     min\n   |     ^^^ expected `f64`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n40 |     min as f64\n   |      \
    \   ++++++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().cloned().sorted().take(l.len() / 2).fold(f64::nan(),\
    \ |a, x| {\n        let x = a if a > x else x;\n        x.cloned()\n    })\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator,\
    \ found keyword `if`\n --> /tmp/tmp1l4a0own.rs:8:19\n  |\n8 |         let x =\
    \ a if a > x else x;\n  |                   ^^ expected one of 8 possible tokens\n\
    \nerror[E0599]: no method named `sorted` found for struct `Cloned` in the current\
    \ scope\n --> /tmp/tmp1l4a0own.rs:7:23\n  |\n7 |     l.iter().cloned().sorted().take(l.len()\
    \ / 2).fold(f64::nan(), |a, x| {\n  |                       ^^^^^^ method not\
    \ found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror[E0599]: no function\
    \ or associated item named `nan` found for type `f64` in the current scope\n -->\
    \ /tmp/tmp1l4a0own.rs:7:60\n  |\n7 |     l.iter().cloned().sorted().take(l.len()\
    \ / 2).fold(f64::nan(), |a, x| {\n  |                                        \
    \                    ^^^\n  |                                                \
    \            |\n  |                                                          \
    \  function or associated item not found in `f64`\n  |                       \
    \                                     help: there is an associated function with\
    \ a similar name: `is_nan`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut sorted = l.iter().cloned().sorted();\n   \
    \ sorted.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpy6ys_qc3.rs:7:40\n  |\n7 |     let mut sorted =\
    \ l.iter().cloned().sorted();\n  |                                        ^^^^^^\
    \ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut med = l.iter().fold(0.0f64, |acc, n| acc +\
    \ (n/2));\n    med.max(|a, b| a.partial_cmp(b).unwrap()).unwrap_or(med)\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmp_lcge4j_.rs:7:54\n\
    \  |\n7 |     let mut med = l.iter().fold(0.0f64, |acc, n| acc + (n/2));\n  |\
    \                                                      ^ no implementation for\
    \ `f64 + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Add<Rhs>`:\n   \
    \         <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n         \
    \   <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a\
    \ i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a i8 as\
    \ Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\n\
    error[E0599]: no method named `unwrap_or` found for type `f64` in the current\
    \ scope\n --> /tmp/tmp_lcge4j_.rs:8:47\n  |\n8 |     med.max(|a, b| a.partial_cmp(b).unwrap()).unwrap_or(med)\n\
    \  |                                               ^^^^^^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().rev().cloned().fold((0, 0), |(low, high),\
    \ x| {\n        if *x < low {\n            (low, x)\n        } else if *x > high\
    \ {\n            (high, x)\n        } else {\n            match (high - low).cmp(&x)\
    \ {\n                Ordering::Less => (high, x),\n                Ordering::Equal\
    \ => (*x - low) / 2 + low,\n                Ordering::Greater => (low, x),\n \
    \           }\n        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpsnzw7rma.rs:14:17\n   |\n14 |                 Ordering::Less => (high,\
    \ x),\n   |                 ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpsnzw7rma.rs:15:17\n\
    \   |\n15 |                 Ordering::Equal => (*x - low) / 2 + low,\n   |   \
    \              ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpsnzw7rma.rs:16:17\n\
    \   |\n16 |                 Ordering::Greater => (low, x),\n   |             \
    \    ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpsnzw7rma.rs:7:34\n  |\n7 |     l.iter().rev().cloned().fold((0,\
    \ 0), |(low, high), x| {\n  |                                  ^^^^^^ expected\
    \ `f64`, found tuple\n  |\n  = note: expected type `f64`\n            found tuple\
    \ `({integer}, {integer})`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpsnzw7rma.rs:7:43\n\
    \  |\n7 |     l.iter().rev().cloned().fold((0, 0), |(low, high), x| {\n  |   \
    \                                        ^^^^^^^^^^-\n  |                    \
    \                       |         |\n  |                                     \
    \      |         expected due to this\n  |                                   \
    \        expected `f64`, found tuple\n  |\n  = note: expected type `f64`\n   \
    \         found tuple `(_, _)`\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \ --> /tmp/tmpsnzw7rma.rs:8:12\n  |\n8 |         if *x < low {\n  |          \
    \  ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpsnzw7rma.rs:10:19\n\
    \   |\n10 |         } else if *x > high {\n   |                   ^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpsnzw7rma.rs:15:37\n   |\n\
    15 |                 Ordering::Equal => (*x - low) / 2 + low,\n   |          \
    \                           ^^\n\nerror: aborting due to 8 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0433, E0614.\nFor more information\
    \ about an error, try `rustc --exp"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::MAX, (l, el) => {\n        let\
    \ mid = l / 2;\n        if mid < el {\n            mid\n        } else {\n   \
    \         el\n        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n\
    \ --> /tmp/tmptko52qcl.rs:7:37\n  |\n7 |     l.iter().fold(f64::MAX, (l, el) =>\
    \ {\n  |                                     ^^ expected one of `)`, `,`, `.`,\
    \ `?`, or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    // TODO: Sort list and then take middle element.\n\
    \    l.iter().median().unwrap()\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `median` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmp_82ddk71.rs:8:14\n  |\n8 |     l.iter().median().unwrap()\n\
    \  |              ^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        panic!(\"median of empty\
    \ list\");\n    }\n    l as f64\n        / 2.0\n        .as_ref()\n        .iter()\n\
    \        .fold(0., 0)\n        .unwrap_or(l.len() as f64 / 2.0)\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `as_ref` on ambiguous numeric type `{float}`\n\
    \  --> /tmp/tmpiw0ubjy1.rs:12:10\n   |\n12 |         .as_ref()\n   |         \
    \ ^^^^^^\n   |\nhelp: you must specify a concrete type for this numeric value,\
    \ like `f32`\n   |\n11 |         / 2.0_f32\n   |           ~~~~~~~\n\nerror[E0605]:\
    \ non-primitive cast: `Vec<isize>` as `f64`\n  --> /tmp/tmpiw0ubjy1.rs:10:5\n\
    \   |\n10 |     l as f64\n   |     ^^^^^^^^ an `as` expression can only be used\
    \ to convert between primitive types or to coerce to a specific trait object\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0605, E0689.\nFor more information about an error, try `rustc --explain E0605`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    // If l is empty, return the average of 0s\n    l.len()\
    \ < 1 ? 0.0 : l.iter().fold(0.0, |sum, i| {\n        // If we have an even number\
    \ of elements, return the average of\n        // their middle elements\n     \
    \   i / 2.0 * sum + i / 2.0\n    })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `0.0`\n\
    \ --> /tmp/tmpohyj4wrl.rs:8:19\n  |\n8 |     l.len() < 1 ? 0.0 : l.iter().fold(0.0,\
    \ |sum, i| {\n  |                   ^^^ expected one of `.`, `;`, `?`, `}`, or\
    \ an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut s: Vec<isize> = l.to_vec();\n    s.sort();\n\
    \    s.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjdszd0ps.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     s.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (s.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |mut sum, val| {\n        if val\
    \ % 2 == 0 {\n            sum += val / 2.0;\n        } else {\n            sum\
    \ += (val - 1) / 2.0;\n        }\n        sum\n    })\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `&isize` by `{float}`\n --> /tmp/tmpecy15mec.rs:9:24\n\
    \  |\n9 |             sum += val / 2.0;\n  |                        ^ no implementation\
    \ for `&isize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpecy15mec.rs:11:30\n\
    \   |\n11 |             sum += (val - 1) / 2.0;\n   |                        \
    \      ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut med = l[(l.len() / 2)];\n    for i in 1..(l.len()\
    \ / 2) {\n        if l[i] < med {\n            med = l[i];\n        }\n    }\n\
    \    med\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzinjes82.rs:13:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n13 |     med\n   |     ^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    13 |     med as f64\n   |         ++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n        |median,\
    \ el| if median < el { median } else { el },\n    )\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpb_8g5he7.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpb_8g5he7.rs:9:34\n  |\n9 |    \
    \     |median, el| if median < el { median } else { el },\n  |               \
    \                   ^^ expected `f64`, found `&isize`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpb_8g5he7.rs:9:55\n  |\n9 |         |median, el| if median\
    \ < el { median } else { el },\n  |                                          \
    \             ^^ expected `f64`, found `&isize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut m = l.iter().fold(0, |s, i| s | i);\n    let\
    \ mut m = m.floor() as f64;\n    m = (m + f64::from::<f32>(l.len() / 2.0)).ceil()\
    \ as f64 - 1.0;\n    m\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `floor` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpbkxjfi1m.rs:8:19\n  |\n8 |     let mut m = m.floor() as\
    \ f64;\n  |                   ^^^^^ help: there is an associated function with\
    \ a similar name: `div_floor`\n\nerror[E0107]: this associated function takes\
    \ 0 generic arguments but 1 generic argument was supplied\n --> /tmp/tmpbkxjfi1m.rs:9:19\n\
    \  |\n9 |     m = (m + f64::from::<f32>(l.len() / 2.0)).ceil() as f64 - 1.0;\n\
    \  |                   ^^^^------- help: remove these generics\n  |          \
    \         |\n  |                   expected 0 generic arguments\n\nerror[E0277]:\
    \ cannot divide `usize` by `{float}`\n --> /tmp/tmpbkxjfi1m.rs:9:39\n  |\n9 |\
    \     m = (m + f64::from::<f32>(l.len() / 2.0)).ceil() as f64 - 1.0;\n  |    \
    \                                   ^ no implementation for `usize / {float}`\n\
    \  |\n  = help: the trait `Div<{float}>` is not implemented for `usize`\n  = help:\
    \ the following other types implement trait `Div<Rhs>`:\n            <&'a f32\
    \ as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n\
    \            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n      \
    \      <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a\
    \ isize as Div<isize>>\n          and 54 others\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0107, E0277, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0107`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n    let n\
    \ = l.len();\n    if n < 1 {\n        0.0\n    } else if n > 1 {\n        l.len().try_div(2.0).try_mul(2.0).try_mul(1.0).floor().expect(\"\
    median: cannot divide by zero\");\n    } else {\n        l.len() / 2.0\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `try_div` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmp37r89vy0.rs:13:17\n   |\n13 |         l.len().try_div(2.0).try_mul(2.0).try_mul(1.0).floor().expect(\"\
    median: cannot divide by zero\");\n   |                 ^^^^^^^ method not found\
    \ in `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp37r89vy0.rs:12:21\n\
    \   |\n12 |       } else if n > 1 {\n   |  _____________________^\n13 | |    \
    \     l.len().try_div(2.0).try_mul(2.0).try_mul(1.0).floor().expect(\"median:\
    \ cannot divide by zero\");\n14 | |     } else {\n   | |_____^ expected `f64`,\
    \ found `()`\n\nerror[E0277]: cannot divide `usize` by `{float}`\n  --> /tmp/tmp37r89vy0.rs:15:17\n\
    \   |\n15 |         l.len() / 2.0\n   |                 ^ no implementation for\
    \ `usize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut s = vec![l[0]];\n    for i in 1..l.len() {\n\
    \        if l[i] > l[i - 1] {\n            s.push(l[i]);\n        } else {\n \
    \           s.push(l[i - 1]);\n        }\n    }\n    s[l.len() / 2]\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6lyiwiq.rs:15:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n15 |     s[l.len() / 2]\n   |     ^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().enumerate().map(|(_, e)| e).fold(f64::max_value(),\
    \ |sum, e| {\n        sum + e\n    }) / l.len() as f64\n}\n\nfn main() {\n   \
    \ let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `max_value` found for\
    \ type `f64` in the current scope\n --> /tmp/tmpx3zrxipn.rs:7:52\n  |\n7 |   \
    \  l.iter().enumerate().map(|(_, e)| e).fold(f64::max_value(), |sum, e| {\n  |\
    \                                                    ^^^^^^^^^ function or associated\
    \ item not found in `f64`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let len = l.len();\n    len / 2\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphld4_cnt.rs:8:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n7 |     let len = l.len();\n8 |     len / 2\n\
    \  |     ^^^^^^^ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize`\
    \ to an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n  |\n8 |     (len / 2) as f64\n  |     +       ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let l = l.to_vec();\n    l.sort();\n    l.len() /\
    \ 2.0 - l.iter().position(|x| *x >= 0).unwrap_or(l.len()/2)\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpe9icxd51.rs:9:13\n\
    \  |\n9 |     l.len() / 2.0 - l.iter().position(|x| *x >= 0).unwrap_or(l.len()/2)\n\
    \  |             ^ no implementation for `usize / {float}`\n  |\n  = help: the\
    \ trait `Div<{float}>` is not implemented for `usize`\n  = help: the following\
    \ other types implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n\
    \            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n    \
    \        <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n          \
    \  <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize\
    \ as Div<isize>>\n          and 54 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l\n        .iter()\n        .fold(0.0, |sum, el| {\n\
    \            sum + el.sqrt()\n        })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sqrt` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmpjau8reho.rs:10:22\n   |\n10 |             sum +\
    \ el.sqrt()\n   |                      ^^^^ method not found in `&isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    (l.len() / 2.0).floor() as f64\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmppphn4tzs.rs:7:14\n\
    \  |\n7 |     (l.len() / 2.0).floor() as f64\n  |              ^ no implementation\
    \ for `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let len = l.len();\n    let mut med = 0.;\n    let\
    \ mut i0 = len - 1;\n\n    for i in i0..0 where i < (len / 2) {\n        let mut\
    \ i1 = 0;\n        let mut i2 = len - 1;\n        let mut j1 = -1;\n        let\
    \ mut j2 = -1;\n\n        while i2 < i1 {\n            match l[i2] {\n       \
    \         None => {\n                    j2 = i2;\n                    i2 = i2\
    \ - 1;\n                }\n                Some(x) => {\n                    if\
    \ x > l[i1] {\n                        j1 = i1;\n                        i1 =\
    \ i1 + 1;\n                    } else if x < l[i1] {\n                       \
    \ i2 = i2 - 1;\n                    }\n                }\n            }\n    \
    \    }\n\n        if j2 > j1 {\n            med = l[j1];\n        } else {\n \
    \           med = l[j2];\n        }\n    }\n\n    if len % 2 == 0 {\n        med\
    \ = l[len / 2];\n    }\n\n    med.floor() as f64\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found keyword `where`\n  --> /tmp/tmp86_pzgct.rs:11:20\n\
    \   |\n11 |     for i in i0..0 where i < (len / 2) {\n   |                   \
    \ ^^^^^ expected `{`\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |mut a, b| {\n        if a < b\
    \ {\n            a\n        } else {\n            b\n        }\n    }) + l.len()\
    \ / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjp4u662w.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected floating-point number, found\
    \ `isize`\n\nerror[E0277]: can't compare `{float}` with `&isize`\n --> /tmp/tmpjp4u662w.rs:8:14\n\
    \  |\n8 |         if a < b {\n  |              ^ no implementation for `{float}\
    \ < &isize` and `{float} > &isize`\n  |\n  = help: the trait `PartialOrd<&isize>`\
    \ is not implemented for `{float}`\n  = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n            f32\n            f64\n            i128\n\
    \            i16\n            i32\n            i64\n            i8\n         \
    \   isize\n          and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjp4u662w.rs:11:13\n\
    \   |\n11 |             b\n   |             ^ expected floating-point number,\
    \ found `&isize`\n\nerror[E0277]: cannot add `usize` to `{float}`\n  --> /tmp/tmpjp4u662w.rs:13:8\n\
    \   |\n13 |     }) + l.len() / 2\n   |        ^ no implementation for `{float}\
    \ + usize`\n   |\n   = help: the trait `Add<usize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    (l.len() / 2.0).floor() as f64\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp0pgke4nt.rs:7:14\n\
    \  |\n7 |     (l.len() / 2.0).floor() as f64\n  |              ^ no implementation\
    \ for `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut n = l.len();\n    if n % 2 == 0 {\n      \
    \  // Even\n        let left = l.iter().enumerate().take(n / 2).map(|(i, el)|\
    \ el).collect::<Vec<_>>();\n        let right = l.iter().enumerate().skip(n /\
    \ 2).take(n / 2).map(|(i, el)| el).collect::<Vec<_>>();\n        left.sort_unstable_by_key(|&(_,\
    \ left)| left);\n        right.sort_unstable_by_key(|&(_, right)| right);\n  \
    \      match left {\n            [] => l.iter().enumerate().skip(1).take(n - 1).map(|(i,\
    \ el)| el).collect::<Vec<_>>(),\n            l => l,\n        }.iter().next().unwrap().1.unwrap(),\n\
    \    } else {\n        // Odd\n        let left = l.iter().enumerate().take((n\
    \ - 1) / 2).map(|(i, el)| el).collect::<Vec<_>>();\n        let right = l.iter().enumerate().skip((n\
    \ - 1) / 2).take((n - 1) / 2).map(|(i, el)| el).collect::<Vec<_>>();\n       \
    \ left.sort_unstable_by_key(|&(_, left)| left);\n        right.sort_unstable_by_key(|&(_,\
    \ right)| right);\n        match right {\n            [] => l.iter().enumerate().skip(1).take(n\
    \ - 1).map(|(i, el)| el).collect::<Vec<_>>(),\n            l => l,\n        }.iter().next().unwrap().1.unwrap(),\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n\
    \  --> /tmp/tmpiywjr7kt.rs:17:44\n   |\n17 |         }.iter().next().unwrap().1.unwrap(),\n\
    \   |                                            ^ expected one of `.`, `;`, `?`,\
    \ `}`, or an operator\n\nerror: expected one of `.`, `;`, `?`, `}`, or an operator,\
    \ found `,`\n  --> /tmp/tmpiywjr7kt.rs:27:44\n   |\n27 |         }.iter().next().unwrap().1.unwrap(),\n\
    \   |                                            ^ expected one of `.`, `;`, `?`,\
    \ `}`, or an operator\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiywjr7kt.rs:12:37\n\
    \   |\n12 |         left.sort_unstable_by_key(|&(_, left)| left);\n   |      \
    \                               ^^^^^^^^-\n   |                              \
    \       |       |\n   |                                     |       expected due\
    \ to this\n   |                                     expected `isize`, found tuple\n\
    \   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpiywjr7kt.rs:13:38\n   |\n13 |  \
    \       right.sort_unstable_by_key(|&(_, right)| right);\n   |               \
    \                       ^^^^^^^^^-\n   |                                     \
    \ |        |\n   |                                      |        expected due\
    \ to this\n   |                                      expected `isize`, found tuple\n\
    \   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpiywjr7kt.rs:22:37\n   |\n22 |  \
    \       left.sort_unstable_by_key(|&(_, left)| left);\n   |                  \
    \                   ^^^^^^^^-\n   |                                     |    \
    \   |\n   |                                     |       expected due to this\n\
    \   |                                     expected `isize`, found tuple\n   |\n\
    \   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpiywjr7kt.rs:23:38\n   |\n23 |         right.sort_unstable_by_key(|&(_,\
    \ right)| right);\n   |                                      ^^^^^^^^^-\n   |\
    \      "
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        (l.len() / 2) as f64,\n  \
    \      |a, b| if b.is_odd() {\n            a + (b as f64) / 2\n        } else\
    \ {\n            a - (b as f64) / 2\n        },\n    )\n}\n\nfn main() {\n   \
    \ let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for reference `&isize` in\
    \ the current scope\n --> /tmp/tmpu655z1kp.rs:9:21\n  |\n9 |         |a, b| if\
    \ b.is_odd() {\n  |                     ^^^^^^ method not found in `&isize`\n\n\
    error[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmpu655z1kp.rs:10:28\n\
    \   |\n10 |             a + (b as f64) / 2\n   |                            ^\
    \ no implementation for `f64 / {integer}`\n   |\n   = help: the trait `Div<{integer}>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\nhelp: consider using a floating-point literal by writing\
    \ it with `.0`\n   |\n10 |             a + (b as f64) / 2.0\n   |            \
    \                   ++\n\nerror[E0277]: cannot divide `f64` by `{integer}`\n \
    \ --> /tmp/tmpu655z1kp.rs:12:28\n   |\n12 |             a - (b as f64) / 2\n \
    \  |                            ^ no implementation for `f64 / {integer}`\n  \
    \ |\n   = help: the trait `Div<{integer}>` is not implemented for `f64`\n   =\
    \ help: the following other types implement trait `Div<Rhs>`:\n             <&'a\
    \ f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128\
    \ as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as\
    \ Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\nhelp: consider\
    \ using a floating-point literal by writing it with `.0`\n   |\n12 |         \
    \    a - (b as f64) / 2.0\n   |                               ++\n\nerror[E0606]:\
    \ casting `&isize` as `f64` is invalid\n  --> /tmp/tmpu655z1kp.rs:10:17\n   |\n\
    10 |             a + (b as f64) / 2\n   |                 ^-^^^^^^^^\n   |   \
    \              ||\n   |                 |help: dereference the expression: `*b`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut s = l.len();\n    let mut mid = (s + 1) /\
    \ 2;\n    if s > 0 {\n        mid = mid.checked_add(1).unwrap();\n    }\n    mid.checked_div(2).unwrap().1\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0610]: `usize` is a primitive type and therefore doesn't have fields\n\
    \  --> /tmp/tmp5novetbm.rs:12:33\n   |\n12 |     mid.checked_div(2).unwrap().1\n\
    \   |                                 ^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0610`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::NAN, |sum, el| sum + el)\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&isize` to `f64`\n --> /tmp/tmp0fv8auia.rs:7:43\n\
    \  |\n7 |     l.iter().fold(f64::NAN, |sum, el| sum + el)\n  |               \
    \                            ^ no implementation for `f64 + &isize`\n  |\n  =\
    \ help: the trait `Add<&isize>` is not implemented for `f64`\n  = help: the following\
    \ other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n\
    \            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n    \
    \        <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n          \
    \  <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize\
    \ as Add<isize>>\n          and 48 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let n = l.len();\n    l.iter().cloned().enumerate().filter\
    \ {\n        &*it.value.0 % n == 0\n    }.min().map(|it| it.value.0).unwrap_or(l.iter().sum()\
    \ as f64) / n as f64\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `(`, `.`, `::`, `;`, `?`, `}`, or an operator, found\
    \ `{`\n --> /tmp/tmpun37_pu4.rs:8:42\n  |\n8 |     l.iter().cloned().enumerate().filter\
    \ {\n  |                                          ^ expected one of 7 possible\
    \ tokens\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter()\n        .enumerate()\n        .cloned()\n\
    \        .filter(|(i, _)| i > l.len() / 2)\n        .map(|(i, _)| l[i])\n    \
    \    .median()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<Enumerate<std::slice::Iter<'_,\
    \ isize>> as Iterator>::Item == &_`\n    --> /tmp/tmpsfulgd6w.rs:9:10\n     |\n\
    9    |         .cloned()\n     |          ^^^^^^ expected reference, found tuple\n\
    \     |\n     = note: expected reference `&_`\n                    found tuple\
    \ `(usize, &isize)`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the\
    \ method `filter` exists for struct `Cloned<Enumerate<std::slice::Iter<'_, isize>>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpsfulgd6w.rs:10:10\n \
    \  |\n10 |            .filter(|(i, _)| i > l.len() / 2)\n   |             ^^^^^^\
    \ method cannot be called on `Cloned<Enumerate<std::slice::Iter<'_, isize>>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<Enumerate<std::slice::Iter<'_, isize>> as\
    \ Iterator>::Item = &_`\n           which is required by `Cloned<Enumerate<std::slice::Iter<'_,\
    \ isize>>>: Iterator`\n           `Cloned<Enumerate<std::slice::Iter<'_, isize>>>:\
    \ Iterator`\n           which is required by `&mut Cloned<Enumerate<std::slice::Iter<'_,\
    \ isize>>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let l = l.len();\n    if l == 0 {\n        0.0\n \
    \   } else {\n        let len = l.iter().fold(0, |a, b| a.max().max().cmp(&b.max().max())).unwrap_or(l\
    \ + 1);\n        l.len() / len\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmpwk5xxf51.rs:11:21\n   |\n11 |         let len = l.iter().fold(0,\
    \ |a, b| a.max().max().cmp(&b.max().max())).unwrap_or(l + 1);\n   |          \
    \           ^^^^ method not found in `usize`\n\nerror[E0599]: no method named\
    \ `len` found for type `usize` in the current scope\n  --> /tmp/tmpwk5xxf51.rs:12:11\n\
    \   |\n12 |         l.len() / len\n   |           ^^^ method not found in `usize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter()\n        .windows(2)\n        .fold(0, |a,\
    \ b| a.checked_add((b.len() / 2.0).floor() as isize).unwrap_or(0))\n        .unwrap()\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `windows` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpyg072r6k.rs:8:10\n  |\n8 |         .windows(2)\n\
    \  |          ^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let n = l.len();\n    if n < 2 {\n        0.\n   \
    \ } else {\n        let s = l.iter().fold(0, |s, x| s + x);\n        let m = s\
    \ / n as f64;\n        m - (n % 2 ? 1 : 0)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `1`\n\
    \  --> /tmp/tmpr5014b0j.rs:13:22\n   |\n13 |         m - (n % 2 ? 1 : 0)\n   |\
    \                      ^ expected one of `)`, `,`, `.`, `?`, or an operator\n\n\
    error: expected one of `!`, `&&`, `&`, `(`, `)`, `*`, `...`, `.`, `;`, `<`, `?`,\
    \ `[`, `_`, `async`, `const`, `dyn`, `extern`, `fn`, `for`, `impl`, `unsafe`,\
    \ `}`, `~`, an operator, lifetime, or path, found `0`\n  --> /tmp/tmpr5014b0j.rs:13:26\n\
    \   |\n13 |         m - (n % 2 ? 1 : 0)\n   |                          ^ expected\
    \ one of 26 possible tokens\n\nerror[E0277]: cannot divide `isize` by `f64`\n\
    \  --> /tmp/tmpr5014b0j.rs:12:19\n   |\n12 |         let m = s / n as f64;\n \
    \  |                   ^ no implementation for `isize / f64`\n   |\n   = help:\
    \ the trait `Div<f64>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut s: f64 = 0.0;\n    let mut mid = l.len() /\
    \ 2;\n    while mid > 0 {\n        s += l[mid];\n        if mid > 1 {\n      \
    \      mid = m.sub(mid - 1, mid);\n        } else {\n            break;\n    \
    \    }\n    }\n    if s.is_nan() {\n        0.0\n    } else {\n        s\n   \
    \ }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `m` in this scope\n  --> /tmp/tmpyie21n3g.rs:12:19\n\
    \   |\n12 |             mid = m.sub(mid - 1, mid);\n   |                   ^ help:\
    \ a local variable with a similar name exists: `l`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `f64`\n  --> /tmp/tmpyie21n3g.rs:10:11\n   |\n10 |         s += l[mid];\n\
    \   |           ^^ no implementation for `f64 += isize`\n   |\n   = help: the\
    \ trait `AddAssign<isize>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.len() / 2\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0kuoueob.rs:7:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n7 |     l.len() / 2\n  |     ^^^^^^^^^^^ expected\
    \ `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    7 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0, |m, e| if *e < m { *e } else { m\
    \ })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuz_r96ma.rs:7:19\n  |\n7 |\
    \     l.iter().fold(0, |m, e| if *e < m { *e } else { m })\n  |              \
    \     ^\n  |                   |\n  |                   expected `f64`, found\
    \ integer\n  |                   help: use a float literal: `0.0`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpuz_r96ma.rs:7:37\n  |\n7 |     l.iter().fold(0,\
    \ |m, e| if *e < m { *e } else { m })\n  |                                   \
    \  ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpuz_r96ma.rs:7:41\n\
    \  |\n7 |     l.iter().fold(0, |m, e| if *e < m { *e } else { m })\n  |      \
    \                                   ^^ expected `f64`, found `isize`\n  |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n7 |     l.iter().fold(0, |m, e| if\
    \ *e < m { (*e) as f64 } else { m })\n  |                                    \
    \     +  ++++++++\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(l.len() / 2, |a, b| if b % 2 == 0 {\
    \ a } else { b - 1 }).unwrap()\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdwsqicw2.rs:7:66\n  |\n7 |\
    \     l.iter().fold(l.len() / 2, |a, b| if b % 2 == 0 { a } else { b - 1 }).unwrap()\n\
    \  |                                                                  ^^^^^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n7 |     l.iter().fold(l.len()\
    \ / 2, |a, b| if b % 2 == 0 { a } else { (b - 1).try_into().unwrap() }).unwrap()\n\
    \  |                                                                  +     +++++++++++++++++++++\n\
    \nerror[E0599]: no method named `unwrap` found for type `usize` in the current\
    \ scope\n --> /tmp/tmpdwsqicw2.rs:7:75\n  |\n7 |     l.iter().fold(l.len() / 2,\
    \ |a, b| if b % 2 == 0 { a } else { b - 1 }).unwrap()\n  |                   \
    \                                                        ^^^^^^ method not found\
    \ in `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().cloned().windows(4).enumerate().map(|(i,\
    \ e)| e.next().unwrap_or(0.0))\n        .enumerate()\n        .fold(0.0, |sum,\
    \ el| sum + el / 2.)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `windows` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpjxsnwxuo.rs:7:23\n  |\n7 |     l.iter().cloned().windows(4).enumerate().map(|(i,\
    \ e)| e.next().unwrap_or(0.0))\n  |                       ^^^^^^^ method not found\
    \ in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let l = l.iter().cloned().collect::<Vec<_>>();\n \
    \   l.sort_unstable_by_key(|&x| x);\n    l.len() / 2\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplmzvuj6s.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut v = l.iter().cloned().collect::<Vec<f64>>();\n\
    \    v.sort();\n    v.iter().nth(v.len() / 2).unwrap()\n}\n\nfn main() {\n   \
    \ let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<f64>` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmpwpxle_d3.rs:7:35\n     |\n7 \
    \   |     let mut v = l.iter().cloned().collect::<Vec<f64>>();\n     |       \
    \                            ^^^^^^^ value of type `Vec<f64>` cannot be built\
    \ from `std::iter::Iterator<Item=isize>`\n     |\n     = help: the trait `FromIterator<isize>`\
    \ is not implemented for `Vec<f64>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpwpxle_d3.rs:8:7\n\
    \    |\n8   |     v.sort();\n    |       ^^^^ the trait `Ord` is not implemented\
    \ for `f64`\n    |\n    = help: the following other types implement trait `Ord`:\n\
    \              i128\n              i16\n              i32\n              i64\n\
    \              i8\n              isize\n              u128\n              u16\n\
    \            and 4 others\nnote: required by a bound in `slice::<impl [T]>::sort`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpwpxle_d3.rs:9:5\n  |\n6 | fn median(l:\
    \ Vec<isize>) -> f64 {\n  |                             --- expected `f64` because\
    \ of return type\n...\n9 |     v.iter().nth(v.len() / 2).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `&f64`\n  |\nhelp: consider dereferencing the borrow\n\
    \  |\n9 |     *v.iter().nth(v.len() / 2).unwrap()\n  |     +\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut a = l.iter().cloned().collect::<Vec<isize>>();\n\
    \    a.sort();\n    a.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpt8ym946u.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     a.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (a.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.len() / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp3xppucxs.rs:7:13\n\
    \  |\n7 |     l.len() / 2.0\n  |             ^ no implementation for `usize /\
    \ {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::INFINITY, |a, b| f64::MAX(a, b)\
    \ / 2)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0618]: expected function, found `f64`\n --> /tmp/tmpc33_y0pb.rs:7:41\n\
    \  |\n7 |     l.iter().fold(f64::INFINITY, |a, b| f64::MAX(a, b) / 2)\n  |   \
    \                                      ^^^^^^^^------\n  |                   \
    \                      |\n  |                                         call expression\
    \ requires function\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0618`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let n = l.len();\n    l.iter().fold(f64::INF, |sum,\
    \ x| {\n        match {\n            n > 1 && x <= (sum - f64::from(n.floor())\
    \ / 2.) => f64::from(sum + f64::from(0.5)),\n            x <= sum / 2.0 => f64::from(sum),\n\
    \            _ => sum\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `=>`\n\
    \  --> /tmp/tmp__dbus9u.rs:10:61\n   |\n10 |             n > 1 && x <= (sum -\
    \ f64::from(n.floor()) / 2.) => f64::from(sum + f64::from(0.5)),\n   |       \
    \                                                      ^^ expected one of `.`,\
    \ `;`, `?`, `}`, or an operator\n\nerror: expected one of `.`, `?`, `{`, or an\
    \ operator, found `}`\n  --> /tmp/tmp__dbus9u.rs:14:5\n   |\n9  |         match\
    \ {\n   |         ----- while parsing this `match` expression\n...\n13 |     \
    \    }\n   |          - expected one of `.`, `?`, `{`, or an operator\n14 |  \
    \   })\n   |     ^ unexpected token\n\nerror[E0599]: no associated item named\
    \ `INF` found for type `f64` in the current scope\n --> /tmp/tmp__dbus9u.rs:8:24\n\
    \  |\n8 |     l.iter().fold(f64::INF, |sum, x| {\n  |                        ^^^\
    \ associated item not found in `f64`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut s = l.iter().cloned().sorted().take(l.len()\
    \ / 2);\n    if s.len() % 2 != 0 {\n        // add back mean of last half\n  \
    \      s.append(l.iter().take(l.len() / 2).sum() / 2);\n    }\n    match s.len()\
    \ {\n        0 => 0,\n        _ => s.len() / 2.0,\n    }\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmp48a3je76.rs:7:35\n  |\n7 |     let mut s = l.iter().cloned().sorted().take(l.len()\
    \ / 2);\n  |                                   ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp48a3je76.rs:13:14\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \   --- expected `f64` because of return type\n...\n13 |         0 => 0,\n   |\
    \              ^\n   |              |\n   |              expected `f64`, found\
    \ integer\n   |              help: use a float literal: `0.0`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut a = l.len() / 2;\n    if l.len() % 2 == 0\
    \ {\n        a += 1;\n    }\n    a[l.len() / 2] as f64\n}\n\nfn main() {\n   \
    \ let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `usize`\n  --> /tmp/tmp7_zj4l1u.rs:11:5\n\
    \   |\n11 |     a[l.len() / 2] as f64\n   |     ^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0608`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        return 0.;\n    }\n\n \
    \   if l.len() == 1 {\n        return l[0];\n    }\n\n    let len = l.len();\n\
    \    let mut s = l.iter().sum();\n    for i in 0..(len - 1) {\n        let avg\
    \ = l.iter().sum() / len;\n        let delta = if l[i] < avg { -(l[i] - avg) }\
    \ else { avg - l[i] };\n        s += delta;\n    }\n    s / len\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7ai3d5su.rs:12:16\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n12 |         return l[0];\n   |         \
    \       ^^^^ expected `f64`, found `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut count = l.len();\n    l.sort_unstable_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    count / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsh7r4i8q.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     count / 2\n  |     ^^^^^^^^^ expected\
    \ `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    9 |     (count / 2) as f64\n  |     +         ++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |v, e| if e < 0 { -v } else { v\
    \ })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq5kxaroj.rs:7:38\n  |\n7 |\
    \     l.iter().fold(0.0, |v, e| if e < 0 { -v } else { v })\n  |             \
    \                         ^\n  |                                      |\n  | \
    \                                     expected `&isize`, found integer\n  |  \
    \                                    help: consider borrowing here: `&0`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(l.len() as f64 / 2, |a, b| a + b) as\
    \ f64 / l.len() as f64\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `{integer}`\n --> /tmp/tmpbcs_vvme.rs:7:34\n\
    \  |\n7 |     l.iter().fold(l.len() as f64 / 2, |a, b| a + b) as f64 / l.len()\
    \ as f64\n  |                                  ^ no implementation for `f64 /\
    \ {integer}`\n  |\n  = help: the trait `Div<{integer}>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Div<Rhs>`:\n   \
    \         <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n         \
    \   <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a\
    \ i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a i8 as\
    \ Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\nhelp:\
    \ consider using a floating-point literal by writing it with `.0`\n  |\n7 |  \
    \   l.iter().fold(l.len() as f64 / 2.0, |a, b| a + b) as f64 / l.len() as f64\n\
    \  |                                     ++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut sorted = l.iter().sorted();\n    sorted.next().unwrap()\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpkm24th8h.rs:7:31\n  |\n7 |     let mut sorted\
    \ = l.iter().sorted();\n  |                               ^^^^^^ method not found\
    \ in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut v = l.len() as f64;\n    v.divs_exact(2.0).iter().fold(0.0,\
    \ |v, &x| v + f64::from(*x) / v);\n    v\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `divs_exact` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpr7vlxnzt.rs:8:7\n  |\n8 |     v.divs_exact(2.0).iter().fold(0.0,\
    \ |v, &x| v + f64::from(*x) / v);\n  |       ^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.sort_unstable();\n    l.iter().filter(|&x| x !=\
    \ l.last().unwrap()).count() / l.len()\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6nmrhce1.rs:8:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n7 |     l.sort_unstable();\n8 |     l.iter().filter(|&x|\
    \ x != l.last().unwrap()).count() / l.len()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |     (l.iter().filter(|&x| x != l.last().unwrap()).count() / l.len())\
    \ as f64\n  |     +                                                          \
    \    ++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut s = l.iter().fold(f64::NINF, |s, &x| s + x);\n\
    \    s.div(2.0).ceil() as f64\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no associated item named `NINF` found for type `f64` in the\
    \ current scope\n --> /tmp/tmp79v3so8t.rs:7:36\n  |\n7 |     let mut s = l.iter().fold(f64::NINF,\
    \ |s, &x| s + x);\n  |                                    ^^^^ associated item\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan, &std::mem::median)\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `median` in module `std::mem`\n --> /tmp/tmpasxbq4kr.rs:7:40\n\
    \  |\n7 |     l.iter().fold(f64::nan, &std::mem::median)\n  |                \
    \                        ^^^^^^ not found in `std::mem`\n\nerror[E0599]: no function\
    \ or associated item named `nan` found for type `f64` in the current scope\n -->\
    \ /tmp/tmpasxbq4kr.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan, &std::mem::median)\n\
    \  |                        ^^^\n  |                        |\n  |           \
    \             function or associated item not found in `f64`\n  |            \
    \            help: there is an associated function with a similar name: `is_nan`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut sorted = l.iter().cloned().sorted();\n   \
    \ let mid = sorted.len() / 2;\n    sorted.get(mid).unwrap().floor()\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpis16whzq.rs:7:40\n  |\n7 |     let mut sorted =\
    \ l.iter().cloned().sorted();\n  |                                        ^^^^^^\
    \ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    if l.len() <= 1 {\n        return l[0];\n    }\n \
    \   let mid = l.len() / 2;\n    l.iter().skip(mid).take(mid).fold(l[0], |a, b|\
    \ a + b / 2);\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp932fzils.rs:8:16\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n7 |     if l.len() <= 1 {\n8 |         return\
    \ l[0];\n  |                ^^^^ expected `f64`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp932fzils.rs:6:29\n  |\n6 | fn median(l: Vec<isize>)\
    \ -> f64 {\n  |    ------                   ^^^ expected `f64`, found `()`\n \
    \ |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    let len = l.len();\n    l.sort_unstable();\n    if len % 2 == 1 {\n     \
    \   l.sort_unstable();\n    }\n    let mid = (len / 2) + 1;\n    mid.cmp(&(len\
    \ / 2)) == -1 ? mid.checked_add(1).unwrap() : mid\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `mid`\n\
    \  --> /tmp/tmpibws4ksa.rs:14:33\n   |\n14 |     mid.cmp(&(len / 2)) == -1 ? mid.checked_add(1).unwrap()\
    \ : mid\n   |                                 ^^^ expected one of `.`, `;`, `?`,\
    \ `}`, or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut m = l.len() / 2;\n    l.sort();\n    m\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp67cf7x10.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     m\n  |     ^ expected `f64`, found\
    \ `usize`\n  |\nhelp: you can cast a `usize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n  |\n9 |     m as\
    \ f64\n  |       ++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::INFINITY,\n                 (f64,\
    \ (mut min, mut max)) => {\n                 if min > max {\n                \
    \     min, max = max, min;\n                 }\n                 if min > l.len()\
    \ / 2 {\n                     min = l.len() / 2;\n                 }\n       \
    \          if max < l.len() / 2 {\n                     max = l.len() / 2;\n \
    \                }\n                 l.sort();\n                 // use std::cmp::min\
    \ to return the smallest value\n                 min as f64\n             })\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found keyword `mut`\n --> /tmp/tmpn3380n1s.rs:8:25\n\
    \  |\n8 |                  (f64, (mut min, mut max)) => {\n  |               \
    \          ^^^ expected expression\n\nerror: expected one of `)`, `,`, `.`, `?`,\
    \ or an operator, found `=>`\n --> /tmp/tmpn3380n1s.rs:8:44\n  |\n8 |        \
    \          (f64, (mut min, mut max)) => {\n  |                               \
    \             ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror:\
    \ aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    if l.len() < 2 {\n        return 0.0\n    }\n    let\
    \ mut mid: isize = l.len() / 2;\n    if l.len() % 2 == 0 {\n        mid = mid;\n\
    \    } else {\n        mid = mid + 1;\n    }\n    median(l[mid..])\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy126u08u.rs:10:26\n   |\n\
    10 |     let mut mid: isize = l.len() / 2;\n   |                  -----   ^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |                  |\n   |             \
    \     expected due to this\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |     let mut mid: isize\
    \ = (l.len() / 2).try_into().unwrap();\n   |                          +      \
    \     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `RangeFrom<isize>`\n  --> /tmp/tmpy126u08u.rs:16:12\n   |\n16 |     median(l[mid..])\n\
    \   |            ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `RangeFrom<isize>`\n\
    \   = help: the following other types implement trait `SliceIndex<T>`:\n     \
    \        <RangeFrom<usize> as SliceIndex<[T]>>\n             <RangeFrom<usize>\
    \ as SliceIndex<str>>\n   = note: required because of the requirements on the\
    \ impl of `Index<RangeFrom<isize>>` for `Vec<isize>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    if l.len() < 2 {\n        0\n    } else {\n      \
    \  (l.len() / 2.) as f64 + l[l.len() / 2]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe4ee25ms.rs:8:9\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n7 |     if l.len() < 2 {\n8 |         0\n  | \
    \        ^\n  |         |\n  |         expected `f64`, found integer\n  |    \
    \     help: use a float literal: `0.0`\n\nerror[E0277]: cannot divide `usize`\
    \ by `{float}`\n  --> /tmp/tmpe4ee25ms.rs:10:18\n   |\n10 |         (l.len() /\
    \ 2.) as f64 + l[l.len() / 2]\n   |                  ^ no implementation for `usize\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `usize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot add `isize` to `f64`\n  --> /tmp/tmpe4ee25ms.rs:10:31\n\
    \   |\n10 |         (l.len() / 2.) as f64 + l[l.len() / 2]\n   |             \
    \                  ^ no implementation for `f64 + isize`\n   |\n   = help: the\
    \ trait `Add<isize>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n    \
    \         <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n      \
    \       <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n          \
    \   <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a\
    \ isize as Add<isize>>\n           and 48 others\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().enumerate().filter(|&(ref idx, ref elem)|\
    \ *elem > l.len() / 2).map(|&(ref idx, ref elem)| *elem).max()\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp9pfglts.rs:7:64\n  |\n7 |\
    \     l.iter().enumerate().filter(|&(ref idx, ref elem)| *elem > l.len() / 2).map(|&(ref\
    \ idx, ref elem)| *elem).max()\n  |                                          \
    \                      ^^^^^^^^^^^ expected `&isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpp9pfglts.rs:7:82\n  |\n7 |     l.iter().enumerate().filter(|&(ref\
    \ idx, ref elem)| *elem > l.len() / 2).map(|&(ref idx, ref elem)| *elem).max()\n\
    \  |                                                                         \
    \         ^^^^^^^^^^^^^^^^^^^-\n  |                                          \
    \                                        |                  |\n  |           \
    \                                                                       |    \
    \              expected due to this\n  |                                     \
    \                                             expected tuple, found reference\n\
    \  |\n  = note:  expected tuple `(usize, &isize)`\n          found reference `&_`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpp9pfglts.rs:7:5\n  |\n6 | fn median(l:\
    \ Vec<isize>) -> f64 {\n  |                             --- expected `f64` because\
    \ of return type\n7 |     l.iter().enumerate().filter(|&(ref idx, ref elem)| *elem\
    \ > l.len() / 2).map(|&(ref idx, ref elem)| *elem).max()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found enum `Option`\n  |\n  = note: expected type `f64`\n  \
    \           found enum `Option<_>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        return 0.;\n    }\n   \
    \ let mid = l.len() / 2;\n    let sorted_l = l.iter().sorted();\n    if l.len()\
    \ % 2 == 0 {\n        let mid_index = l.len() / 2;\n        let mid_element =\
    \ sorted_l[mid_index];\n        l.swap(mid_index, mid_index - 1);\n        return\
    \ mid_element;\n    }\n    l.swap(mid, mid);\n    let mid1 = mid - 1;\n    let\
    \ mid2 = mid + 1;\n    sorted_l[mid2] / 2.0 + sorted_l[mid1] / 2.0\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpuj9prnhi.rs:11:29\n   |\n11 |     let sorted_l\
    \ = l.iter().sorted();\n   |                             ^^^^^^ method not found\
    \ in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut n = l.len();\n    if n % 2 != 0 {\n      \
    \  return l[(n - 1) / 2].floor() as f64;\n    }\n    let mid = n.try_div(2);\n\
    \    l.iter().skip(mid).last().unwrap().floor() as f64\n}\n\nfn main() {\n   \
    \ let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `floor` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpnyn_laew.rs:9:31\n  |\n9 |         return l[(n - 1) / 2].floor()\
    \ as f64;\n  |                               ^^^^^ help: there is an associated\
    \ function with a similar name: `div_floor`\n\nerror[E0599]: no method named `try_div`\
    \ found for type `usize` in the current scope\n  --> /tmp/tmpnyn_laew.rs:11:17\n\
    \   |\n11 |     let mid = n.try_div(2);\n   |                 ^^^^^^^ method not\
    \ found in `usize`\n\nerror[E0599]: no method named `floor` found for reference\
    \ `&isize` in the current scope\n  --> /tmp/tmpnyn_laew.rs:12:40\n   |\n12 | \
    \    l.iter().skip(mid).last().unwrap().floor() as f64\n   |                 \
    \                       ^^^^^ help: there is an associated function with a similar\
    \ name: `div_floor`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.len() / 2\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzsy4nfdt.rs:7:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n7 |     l.len() / 2\n  |     ^^^^^^^^^^^ expected\
    \ `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    7 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().cloned().enumerate().fold(f64::nan(), |sum,\
    \ (i, _)| {\n        match i.into_dec().unwrap() {\n            3 | 4 | 5 => sum,\n\
    \            -10 | 1000 => sum,\n            _ => sum + i.into_dec().unwrap().powi(0.5),\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp1wf1d6mx.rs:7:45\n  |\n7 |     l.iter().cloned().enumerate().fold(f64::nan(),\
    \ |sum, (i, _)| {\n  |                                             ^^^\n  |  \
    \                                           |\n  |                           \
    \                  function or associated item not found in `f64`\n  |       \
    \                                      help: there is an associated function with\
    \ a similar name: `is_nan`\n\nerror[E0599]: no method named `into_dec` found for\
    \ type `usize` in the current scope\n --> /tmp/tmp1wf1d6mx.rs:8:17\n  |\n8 | \
    \        match i.into_dec().unwrap() {\n  |                 ^^^^^^^^ method not\
    \ found in `usize`\n\nerror[E0599]: no method named `into_dec` found for type\
    \ `usize` in the current scope\n  --> /tmp/tmp1wf1d6mx.rs:11:26\n   |\n11 |  \
    \           _ => sum + i.into_dec().unwrap().powi(0.5),\n   |                \
    \          ^^^^^^^^ method not found in `usize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().cloned().fold(f64::NEG_INFINITY, |sum, item|\
    \ {\n        (sum + item) / 2.0\n    })\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmpg1sgl27c.rs:8:14\n\
    \  |\n8 |         (sum + item) / 2.0\n  |              ^ no implementation for\
    \ `f64 + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Add<Rhs>`:\n   \
    \         <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n         \
    \   <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a\
    \ i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a i8 as\
    \ Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(\n        f64::NEG_INFINITY,\n     \
    \   |a, x| {\n            if a > x {\n                a\n            } else {\n\
    \                x\n            }\n        },\n    )\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo_pjsq3_.rs:10:20\n   |\n\
    10 |             if a > x {\n   |                    ^ expected `f64`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpo_pjsq3_.rs:13:17\n   |\n13 |\
    \                 x\n   |                 ^ expected `f64`, found `&isize`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut q = l.len();\n    loop {\n        if q ==\
    \ 0 {\n            return f64::NAN;\n        }\n        q -= 1;\n        let l\
    \ = l[q];\n        let mut m = l/2;\n        if l > m {\n            l.swap(0,\
    \ m);\n        }\n        if l == m {\n            return l;\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `swap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpvu0ehcxe.rs:16:15\n   |\n16 |             l.swap(0, m);\n\
    \   |               ^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvu0ehcxe.rs:19:20\n   |\n19 |             return l;\n \
    \  |                    ^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n19 |             return l as f64;\n   |        \
    \              ++++++\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    if l.len() <= 1 {\n        return l[0];\n    }\n \
    \   let mut mid = l.len() / 2;\n    mid.cmp(l.len()/2) < 0 // if l.len() <= 1,\
    \ mid can be any integer between l.len() and 0\n        || (l.len() - mid).cmp(l.len()\
    \ - mid.abs()) < 0 // if l.len() > 1, mid can't be lower than l.len() / 2, or\
    \ higher than l.len() / 2 - 1\n        ? l.iter().skip(mid).next().unwrap()\n\
    \        : l.iter().skip(mid).take(mid).last().unwrap()\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `l`\n\
    \  --> /tmp/tmp9cpumije.rs:13:11\n   |\n13 |         ? l.iter().skip(mid).next().unwrap()\n\
    \   |           ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp9cpumije.rs:8:16\n  |\n6 | fn median(l: Vec<isize>)\
    \ -> f64 {\n  |                             --- expected `f64` because of return\
    \ type\n7 |     if l.len() <= 1 {\n8 |         return l[0];\n  |             \
    \   ^^^^ expected `f64`, found `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    let mut sorted = l.iter().cloned().sorted();\n   \
    \ sorted.remove(0..sorted.len()/2).collect::<Vec<_>>().iter().choose(|x| *x).unwrap()\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpegwde5me.rs:7:40\n  |\n7 |     let mut sorted =\
    \ l.iter().cloned().sorted();\n  |                                        ^^^^^^\
    \ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().windows(2).fold(0.0, |mut a, mut b| a + b.iter().fold(0.0,\
    \ |mut a, e| std::cmp::min(a, b) + e)).unwrap_or(0.0) / 2.0\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `windows` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmp2eggjyj2.rs:7:14\n  |\n7 |     l.iter().windows(2).fold(0.0,\
    \ |mut a, mut b| a + b.iter().fold(0.0, |mut a, e| std::cmp::min(a, b) + e)).unwrap_or(0.0)\
    \ / 2.0\n  |              ^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
    \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l:\
    \ Vec<isize>) -> f64 {\n    l.iter().fold(f64::MAX, (l, &mut sum, count) => {\n\
    \        *sum += l;\n        *count += 1;\n        sum / count\n    })\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n\
    \ --> /tmp/tmp1whq5jf7.rs:7:50\n  |\n7 |     l.iter().fold(f64::MAX, (l, &mut\
    \ sum, count) => {\n  |                                                  ^^ expected\
    \ one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
