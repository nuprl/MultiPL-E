name: HumanEval_63_fibfib
language: rust
results:
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fn fibonacci(n: isize)\
    \ -> isize {\n        if n == 0 || n == 1 {\n            return 1;\n        }\n\
    \        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n\n    if n == 0 {\n\
    \        return 0;\n    }\n    fibonacci(n)\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmphravc4be.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 1;\n    let\
    \ mut b = 1;\n    for _ in 1..n {\n        a = b;\n        b += a;\n    }\n  \
    \  b\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmph925vptf.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    (1..n).fold(1, |acc,\
    \ x| acc + x)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp113yb3ru.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        return\
    \ -1;\n    }\n    match n {\n        0 => 0,\n        1 => 0,\n        2 => 1,\n\
    \        _ => fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n == 3 {\n    \
    \    return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmphjx8a00v.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib: isize\
    \ = 0;\n    if n == 0 {\n        return fibfib;\n    }\n    fibfib += fibfib(n\
    \ - 1) + fibfib(n - 2);\n    fibfib += fibfib(n - 3);\n    return fibfib;\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0618]: expected function, found `isize`\n  --> /tmp/tmpsp_e7krv.rs:18:15\n\
    \   |\n14 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n...\n18 |     fibfib += fibfib(n - 1) + fibfib(n - 2);\n   | \
    \              ^^^^^^-------\n   |               |\n   |               call expression\
    \ requires function\n\nerror[E0618]: expected function, found `isize`\n  --> /tmp/tmpsp_e7krv.rs:18:31\n\
    \   |\n14 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n...\n18 |     fibfib += fibfib(n - 1) + fibfib(n - 2);\n   | \
    \                              ^^^^^^-------\n   |                           \
    \    |\n   |                               call expression requires function\n\
    \nerror[E0618]: expected function, found `isize`\n  --> /tmp/tmpsp_e7krv.rs:19:15\n\
    \   |\n14 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n...\n19 |     fibfib += fibfib(n - 3);\n   |               ^^^^^^-------\n\
    \   |               |\n   |               call expression requires function\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0618`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    (1..n)\n        .into_iter()\n\
    \        .fold(0, |prev, i| prev + fib(i - 1).unwrap())\n}\n\nfn main() {\n  \
    \  let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib` in this scope\n  --> /tmp/tmpq0ubcdlh.rs:16:35\n\
    \   |\n16 |         .fold(0, |prev, i| prev + fib(i - 1).unwrap())\n   |     \
    \                              ^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    fibfib(n) must not be negative.\")\n    }\n    let mut fibfib = 1usize;\n    fibfib\
    \ = fibfib + fibfib + fibfib;\n    fibfib\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2wrk0ajv.rs:19:5\n   |\n\
    13 | fn fibfib(n: isize) -> isize {\n   |                        ----- expected\
    \ `isize` because of return type\n...\n19 |     fibfib\n   |     ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n19 |     fibfib.try_into().unwrap()\n\
    \   |           ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::mem;\n\n   \
    \ let mut fibfib = [0i32; n + 1];\n    fibfib[0] = 0;\n    fibfib[1] = 1;\n\n\
    \    loop {\n        if n <= 3 {\n            return fibfib[n];\n        }\n\n\
    \        fibfib[2] += fibfib[1]; // fibfib(n-1)\n        fibfib[1] += fibfib[0];\
    \ // fibfib(n-2)\n        fibfib[0] = fibfib[2]; // fibfib(n-3)\n    }\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp_6enr870.rs:16:29\n   |\n13 | fn fibfib(n: isize) -> isize {\n   | \
    \          - this would need to be a `const`\n...\n16 |     let mut fibfib = [0i32;\
    \ n + 1];\n   |                             ^\n\nwarning: unused import: `std::mem`\n\
    \  --> /tmp/tmp_6enr870.rs:14:9\n   |\n14 |     use std::mem;\n   |         ^^^^^^^^\n\
    \   |\n   = note: `#[warn(unused_imports)]` on by default\n\nerror: aborting due\
    \ to previous error; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0435`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ 0\n    }\n    else if n == 1 {\n        0\n    }\n    else if n == 2 {\n   \
    \     1\n    }\n    else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut result: isize\
    \ = 0;\n    let mut fib: Vec<isize> = vec![0; n + 1];\n    for x in 1..n {\n \
    \       fib[x] = fib[x - 1] + fib[x - 2];\n        result = fib[x];\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl_z99w3f.rs:15:39\n   |\n\
    15 |     let mut fib: Vec<isize> = vec![0; n + 1];\n   |                     \
    \                  ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n15 |     let mut fib: Vec<isize> = vec![0; (n + 1).try_into().unwrap()];\n\
    \   |                                       +     +++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpl_z99w3f.rs:17:9\n\
    \   |\n17 |         fib[x] = fib[x - 1] + fib[x - 2];\n   |         ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpl_z99w3f.rs:17:18\n   |\n17 |  \
    \       fib[x] = fib[x - 1] + fib[x - 2];\n   |                  ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpl_z99w3f.rs:17:31\n   |\n17 |  \
    \       fib[x] = fib[x - 1] + fib[x - 2];\n   |                              \
    \ ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n  \
    \ = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   =\
    \ help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpl_z99w3f.rs:18:18\n\
    \   |\n18 |         result = fib[x];\n   |                  ^^^^^^ slice indices\
    \ are of"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ 0\n    } else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    debug_assert!(n > 0);\n\
    \    debug_assert!(n <= 10);\n    let mut res = 1;\n    for _ in 0..n {\n    \
    \    res = res + res;\n    }\n    return res;\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpadp9fg16.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        return\
    \ -1;\n    }\n    match n % 3 {\n        0 => 0,\n        1 => 1,\n        2 =>\
    \ 1,\n        _ => fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3),\n    }\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpnxesh_p9.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let\
    \ a = fibfib(n - 1);\n    let b = fibfib(n-2);\n    let c = fibfib(n-3);\n   \
    \ return a + b + c;\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    // TODO:\n    return\
    \ 1;\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpc9t4ocpt.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: Vec<isize>\
    \ = vec![0; n];\n    fib.push(0);\n    fib.push(1);\n    for i in 2..(n - 1) {\n\
    \        fib.push(fib[i] - fib[i - 1] + fib[i - 2]);\n    }\n    fib[n]\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfke9nfxn.rs:14:39\n   |\n\
    14 |     let mut fib: Vec<isize> = vec![0; n];\n   |                         \
    \              ^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    14 |     let mut fib: Vec<isize> = vec![0; n.try_into().unwrap()];\n   |     \
    \                                   ++++++++++++++++++++\n\nerror[E0277]: the\
    \ type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfke9nfxn.rs:18:18\n\
    \   |\n18 |         fib.push(fib[i] - fib[i - 1] + fib[i - 2]);\n   |        \
    \          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfke9nfxn.rs:18:27\n\
    \   |\n18 |         fib.push(fib[i] - fib[i - 1] + fib[i - 2]);\n   |        \
    \                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpfke9nfxn.rs:18:40\n   |\n18 |         fib.push(fib[i] - fib[i -\
    \ 1] + fib[i - 2]);\n   |                                        ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpfke9nfxn.rs:20:5\n   |\n20 |   \
    \  fib[n]\n   |     ^^^^^^ slice indi"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib = [0;\
    \ 3];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n\n    let mut\
    \ current = 1;\n    for i in 3..n {\n        fibfib[i] = fibfib[i - 1] + fibfib[i\
    \ - 2] + fibfib[i - 3];\n        current = fibfib[i];\n    }\n    current\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp37x9rack.rs:21:9\n   |\n21 |         fibfib[i] = fibfib[i - 1] + fibfib[i\
    \ - 2] + fibfib[i - 3];\n   |         ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp37x9rack.rs:21:21\n   |\n21 |         fibfib[i]\
    \ = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n   |                     ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp37x9rack.rs:21:37\n\
    \   |\n21 |         fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n\
    \   |                                     ^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp37x9rack.rs:21:53\n   |\n21 |         fibfib[i]\
    \ = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n   |                     \
    \                                ^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 2 {\n       \
    \ return 0;\n    }\n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjv5jqzgi.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n\n    if n == 2 {\n        return 1;\n    }\n\n    if n == 3 {\n\
    \        return 2;\n    }\n\n    return (fibfib(n-1) + fibfib(n-2) + fibfib(n-3)).to_i();\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_i` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp8sgl0tub.rs:26:54\n   |\n26 |     return (fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)).to_i();\n   |                                   \
    \                   ^^^^ method not found in `isize`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 { return 0;\
    \ }\n    if n == 1 { return 1; }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 2 {\n       \
    \ n\n    } else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpiijr3zn8.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib = 0;\n\
    \    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n\
    \    }\n    if n == 2 {\n        return 1;\n    }\n    fibfib += fibfib(n-1);\n\
    \    fibfib += fibfib(n-2);\n    fibfib += fibfib(n-3);\n    return fibfib;\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0618]: expected function, found `{integer}`\n  --> /tmp/tmpgfbzeczi.rs:24:15\n\
    \   |\n14 |     let mut fibfib = 0;\n   |         ---------- `fibfib` has type\
    \ `{integer}`\n...\n24 |     fibfib += fibfib(n-1);\n   |               ^^^^^^-----\n\
    \   |               |\n   |               call expression requires function\n\n\
    error[E0618]: expected function, found `{integer}`\n  --> /tmp/tmpgfbzeczi.rs:25:15\n\
    \   |\n14 |     let mut fibfib = 0;\n   |         ---------- `fibfib` has type\
    \ `{integer}`\n...\n25 |     fibfib += fibfib(n-2);\n   |               ^^^^^^-----\n\
    \   |               |\n   |               call expression requires function\n\n\
    error[E0618]: expected function, found `{integer}`\n  --> /tmp/tmpgfbzeczi.rs:26:15\n\
    \   |\n14 |     let mut fibfib = 0;\n   |         ---------- `fibfib` has type\
    \ `{integer}`\n...\n26 |     fibfib += fibfib(n-3);\n   |               ^^^^^^-----\n\
    \   |               |\n   |               call expression requires function\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0618`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let\
    \ mut fibfib: isize = 0;\n    for _ in 0..n {\n        fibfib = fibfib + fibfib\
    \ + 1;\n    }\n    fibfib\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `31`,\n right: `4`', /tmp/tmpyt3hy0h4.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        0\n\
    \    } else if n == 0 {\n        0\n    } else {\n        fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp6tu38kia.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        0\n\
    \    } else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpi87pcdtf.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: Vec<isize>\
    \ = vec![0; 3];\n    for i in 0..n {\n        fib[0] = fib[1];\n        fib[1]\
    \ = fib[2];\n        fib[2] = fib[0]+fib[1]+fib[2];\n    }\n    fib[0]\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmph6syjkq8.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib : Vec<isize>\
    \ = vec![0];\n\n    for _ in 0..(n-1) {\n        fibfib.push(fibfib[fibfib.len()\
    \ - 2] + fibfib[fibfib.len() - 1] + fibfib[fibfib.len() - 3]);\n    }\n\n    fibfib[n]\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzsgm1hbu.rs:20:5\n\
    \   |\n20 |     fibfib[n]\n   |     ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 1;\n    for _ in 0..n {\n        (a, b) = (b, a + b);\n    }\n    a\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpeieyx9ai.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: Vec<isize>\
    \ = Vec::new();\n    fib.push(0);\n    fib.push(0);\n    fib.push(1);\n    fib.push(2);\n\
    \n    for _ in 0..(n + 1) {\n        let result = fib[fib.len() - 1] + fib[fib.len()\
    \ - 2] + fib[fib.len() - 3];\n        fib.push(result);\n    }\n    fib.to_owned()[n]\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpol59dk0k.rs:24:5\n\
    \   |\n24 |     fib.to_owned()[n]\n   |     ^^^^^^^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 2 {\n       \
    \ 0\n    } else {\n        1 + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpw4onea2h.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 1 {\n        0\n\
    \    }\n    if n == 1 {\n        0\n    }\n    if n == 2 {\n        1\n    }\n\
    \    let mut fibfib: isize = 0;\n    fibfib += fibfib(n-1) + fibfib(n-2);\n  \
    \  fibfib\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7y9gt3gn.rs:15:9\n   |\n\
    14 | /     if n < 1 {\n15 | |         0\n   | |         ^ expected `()`, found\
    \ integer\n16 | |     }\n   | |_____- expected this to be `()`\n   |\nhelp: you\
    \ might have meant to return this value\n   |\n15 |         return 0;\n   |  \
    \       ++++++  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7y9gt3gn.rs:18:9\n\
    \   |\n17 | /     if n == 1 {\n18 | |         0\n   | |         ^ expected `()`,\
    \ found integer\n19 | |     }\n   | |_____- expected this to be `()`\n   |\nhelp:\
    \ you might have meant to return this value\n   |\n18 |         return 0;\n  \
    \ |         ++++++  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7y9gt3gn.rs:21:9\n\
    \   |\n20 | /     if n == 2 {\n21 | |         1\n   | |         ^ expected `()`,\
    \ found integer\n22 | |     }\n   | |_____- expected this to be `()`\n   |\nhelp:\
    \ you might have meant to return this value\n   |\n21 |         return 1;\n  \
    \ |         ++++++  +\n\nerror[E0618]: expected function, found `isize`\n  -->\
    \ /tmp/tmp7y9gt3gn.rs:24:15\n   |\n23 |     let mut fibfib: isize = 0;\n   | \
    \        ---------- `fibfib` has type `isize`\n24 |     fibfib += fibfib(n-1)\
    \ + fibfib(n-2);\n   |               ^^^^^^-----\n   |               |\n   | \
    \              call expression requires function\n\nerror[E0618]: expected function,\
    \ found `isize`\n  --> /tmp/tmp7y9gt3gn.rs:24:29\n   |\n23 |     let mut fibfib:\
    \ isize = 0;\n   |         ---------- `fibfib` has type `isize`\n24 |     fibfib\
    \ += fibfib(n-1) + fibfib(n-2);\n   |                             ^^^^^^-----\n\
    \   |                             |\n   |                             call expression\
    \ requires function\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0618.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fn fibfib_inner(n: isize)\
    \ -> isize {\n        if n == 0 {\n            return 0;\n        }\n        if\
    \ n == 1 {\n            return 1;\n        }\n        if n == 2 {\n          \
    \  return 2;\n        }\n        return fibfib_inner(n - 1) + fibfib_inner(n -\
    \ 2) + fibfib_inner(n - 3);\n    }\n    return fibfib_inner(n);\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpd62yip4r.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return 0;\n    }\n    return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 2 {\n       \
    \ return 0;\n    }\n    fibfib(n + 1) + fibfib(n + 2) + fibfib(n + 3)\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpt9dfwxgo.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n\n    let mut current = 1;\n    let mut last_two_numbers\
    \ = fibfib(n-2);\n    let mut last_three_numbers = fibfib(n-3);\n\n    while current\
    \ != last_two_numbers {\n        last_three_numbers += last_two_numbers;\n   \
    \     last_two_numbers = fibfib(n-2);\n        current += last_three_numbers;\n\
    \    }\n\n    return current;\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut x: isize = 0;\n\
    \    let mut y: isize = 1;\n    while y < n {\n        let mut z = x;\n      \
    \  z += y;\n        x = y;\n        y = z;\n    }\n    z\n}\n\nfn main() {\n \
    \   let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `z` in this scope\n  --> /tmp/tmpk5haspb9.rs:22:5\n\
    \   |\n22 |     z\n   |     ^ help: a local variable with a similar name exists:\
    \ `n`\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    (1..n)\n        .map(|n|\
    \ {\n            if n < 3 {\n                n\n            } else {\n       \
    \         fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n            }\n        })\n\
    \        .sum()\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp1xlgjzbq.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::cmp::min;\n\n\
    \    if n < 0 || n >= 10000 {\n        return 0;\n    }\n\n    let mut fibfib\
    \ = 0;\n\n    for _ in 0..(n * 3 - 2) {\n        fibfib += 1;\n    }\n    fibfib\
    \ += fibfib(n) + fibfib(n-1) + fibfib(n-2);\n    min(n, fibfib)\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "error[E0618]: expected function, found `{integer}`\n  --> /tmp/tmpjd3xiy4w.rs:25:15\n\
    \   |\n20 |     let mut fibfib = 0;\n   |         ---------- `fibfib` has type\
    \ `{integer}`\n...\n25 |     fibfib += fibfib(n) + fibfib(n-1) + fibfib(n-2);\n\
    \   |               ^^^^^^---\n   |               |\n   |               call expression\
    \ requires function\n\nerror[E0618]: expected function, found `{integer}`\n  -->\
    \ /tmp/tmpjd3xiy4w.rs:25:27\n   |\n20 |     let mut fibfib = 0;\n   |        \
    \ ---------- `fibfib` has type `{integer}`\n...\n25 |     fibfib += fibfib(n)\
    \ + fibfib(n-1) + fibfib(n-2);\n   |                           ^^^^^^-----\n \
    \  |                           |\n   |                           call expression\
    \ requires function\n\nerror[E0618]: expected function, found `{integer}`\n  -->\
    \ /tmp/tmpjd3xiy4w.rs:25:41\n   |\n20 |     let mut fibfib = 0;\n   |        \
    \ ---------- `fibfib` has type `{integer}`\n...\n25 |     fibfib += fibfib(n)\
    \ + fibfib(n-1) + fibfib(n-2);\n   |                                         ^^^^^^-----\n\
    \   |                                         |\n   |                        \
    \                 call expression requires function\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0618`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        0\n\
    \    } else if n == 0 {\n        0\n    } else {\n        fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpmz7kvldr.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: Vec<_> =\
    \ vec![0..(n - 2)].into_iter().map(|x| x).collect();\n    fib[0] = fib[1] = 0;\n\
    \    fib[2] = (fib[0] + fib[2]) * 2;\n    for i in 3..(n - 1) {\n        fib[i]\
    \ = fib[i - 1] + fib[i - 2];\n    }\n    fib[n - 1]\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfaflh16d.rs:15:23\n   |\n\
    15 |     fib[0] = fib[1] = 0;\n   |              ------   ^ expected struct `std::ops::Range`,\
    \ found integer\n   |              |\n   |              expected due to the type\
    \ of this binding\n   |\n   = note: expected struct `std::ops::Range<isize>`\n\
    \                found type `{integer}`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpfaflh16d.rs:15:14\n   |\n15 |     fib[0] = fib[1] = 0;\n   |     ------\
    \   ^^^^^^^^^^ expected struct `std::ops::Range`, found `()`\n   |     |\n   |\
    \     expected due to the type of this binding\n   |\n   = note: expected struct\
    \ `std::ops::Range<isize>`\n           found unit type `()`\n\nerror[E0369]: cannot\
    \ add `std::ops::Range<isize>` to `std::ops::Range<isize>`\n  --> /tmp/tmpfaflh16d.rs:16:22\n\
    \   |\n16 |     fib[2] = (fib[0] + fib[2]) * 2;\n   |               ------ ^ ------\
    \ std::ops::Range<isize>\n   |               |\n   |               std::ops::Range<isize>\n\
    \nerror[E0277]: the type `[std::ops::Range<isize>]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpfaflh16d.rs:18:9\n   |\n18 |         fib[i] = fib[i - 1] + fib[i\
    \ - 2];\n   |         ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[std::ops::Range<isize>]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<std::ops::Range<isize>>`\n\nerror[E0277]: the type `[std::ops::Range<isize>]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpfaflh16d.rs:18:18\n   |\n18 |  \
    \       fib[i] = fib[i - 1] + fib[i - 2];\n   |                  ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[std::ops::Range<isize>]>` is not implemented for `isize`\n   =\
    \ help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<std::ops::Range<isize>>`\n\
    \nerror[E0277]: the type `[std::ops::Range<isize>]` cannot"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: Vec<isize>\
    \ = vec![];\n    fib.push(0); // 0 fibfib(0) == 0\n    fib.push(1); // 1 fibfib(0)\
    \ == 0\n    fib.push(n); // fibfib(0) == 0\n    fib.push(0);\n    fib.iter_mut().for_each(|x|\
    \ {\n        if x == 2 {\n            fib.push(1); // 1 fibfib(1) == 1\n     \
    \   } else if x > 3 {\n            fib.push(fib.last().unwrap() + fib.last().unwrap()\
    \ + fib.last().unwrap());\n        } else {\n            fib.push(fib.last().unwrap()\
    \ + fib.last().unwrap());\n        }\n    });\n    fib.last().unwrap()\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&mut isize` with `{integer}`\n  --> /tmp/tmp0nur_kqj.rs:20:14\n\
    \   |\n20 |         if x == 2 {\n   |              ^^ no implementation for `&mut\
    \ isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not\
    \ implemented for `&mut isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp0nur_kqj.rs:22:23\n   |\n22 |         } else if x > 3 {\n   |      \
    \                 ^\n   |                       |\n   |                      \
    \ expected `&mut isize`, found integer\n   |                       help: consider\
    \ mutably borrowing here: `&mut 3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0nur_kqj.rs:28:5\n\
    \   |\n13 | fn fibfib(n: isize) -> isize {\n   |                        -----\
    \ expected `isize` because of return type\n...\n28 |     fib.last().unwrap()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n28 |     *fib.last().unwrap()\n   |     +\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    debug_assert!(n <= 7);\n\
    \    if n <= 2 {\n        return 0;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpii1zkq7f.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n\
    \        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpw3er1455.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 1;\n    let\
    \ mut b = 0;\n    for _ in 0..n {\n        let c = a + b;\n        a = b;\n  \
    \      b = c;\n    }\n    b\n}\n\nfn main() {\n    let candidate = fibfib;\n \
    \   assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpiaseczq1.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpo5daoz8h.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let\
    \ mut total = 0;\n    total += fibfib(n-2);\n    total += fibfib(n-1);\n    total\
    \ += fibfib(n);\n    return total;\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 { panic!(\"\
    fibfib: n must be >= 0\") }\n    if n == 0 { return 0 }\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'fibfib: n must be >= 0', /tmp/tmp4buk9t9n.rs:14:16\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return n;\n    }\n\n    let mut fib_1 = fibfib(n - 1);\n    let mut fib_2\
    \ = fibfib(n - 2);\n    let mut fib_3 = fibfib(n - 3);\n\n    fib_3 = fib_1 +\
    \ fib_2 + fib_3;\n\n    fib_1\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return n;\n    }\n\n    let mut fibfib : Vec<_> = vec![1, 1, 2];\n  \
    \  let mut i : usize = 3;\n    while i < n {\n        fibfib.push(fibfib[i - 2]\
    \ + fibfib[i - 1] + fibfib[i]);\n        i += 1;\n    }\n    fibfib[n - 1]\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6eatxexg.rs:20:15\n   |\n\
    20 |     while i < n {\n   |               ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n20 |     while i < n.try_into().unwrap() {\n   |  \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp6eatxexg.rs:24:5\n   |\n24 |     fibfib[n\
    \ - 1]\n   |     ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fn f(a: isize, i: isize)\
    \ -> isize {\n        if i == 0 {\n            0\n        } else {\n         \
    \   a\n            + f(a, i - 1)\n            + f(a, (i - 2) * 3)\n        }\n\
    \    }\n\n    f(0, n)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    let mut fib_n_1 = 1;\n    let mut fib_n_2 = 1;\n\
    \    let mut fib_n_3 = 1;\n    for i in 2..n {\n        fib_n_1 = fib_n_1 + fib_n_2;\n\
    \        fib_n_2 = fib_n_3 + fib_n_1;\n        fib_n_3 = fib_n_3 + fib_n_2;\n\
    \    }\n    fib_n_1\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `4`', /tmp/tmp6n_k_mu2.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n\n    let mut a = fibfib(n - 1);\n    let mut b = fibfib(n\
    \ - 2);\n    let mut c = fibfib(n - 3);\n\n    a += b;\n    c += a;\n\n    return\
    \ c;\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ 0\n    } else {\n        1 + fibfib(n-1)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpjcnhkl7d.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 1 {\n        0\n\
    \    } else if n == 1 {\n        0\n    } else if n == 2 {\n        1\n    } else\
    \ {\n        fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    loop {\n        let fib:\
    \ isize = if n == 0 { 0 } else { 1 + fibfib(n-1) + fibfib(n-2) };\n        if\
    \ fib > n { break }\n        fibfib::println!(fibfib::Debug::fmt(\"fibfib({})\
    \ = {}\", n, fib));\n    }\n    fib\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `fibfib`\n\
    \  --> /tmp/tmpm1zkm7m7.rs:17:9\n   |\n17 |         fibfib::println!(fibfib::Debug::fmt(\"\
    fibfib({}) = {}\", n, fib));\n   |         ^^^^^^ use of undeclared crate or module\
    \ `fibfib`\n\nerror[E0425]: cannot find value `fib` in this scope\n  --> /tmp/tmpm1zkm7m7.rs:19:5\n\
    \   |\n19 |     fib\n   |     ^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 0 {\n       \
    \ return 0;\n    }\n    if n == 1 || n == 0 {\n        return 1;\n    }\n    return\
    \ fibfib(n-2) + fibfib(n-1);\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgvmxjkbi.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut num: isize =\
    \ 0;\n    for i in 0..n {\n        num = num + fib(i);\n    }\n    num\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib` in this scope\n  --> /tmp/tmp0dkvlo6g.rs:16:21\n\
    \   |\n16 |         num = num + fib(i);\n   |                     ^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 0 {\n       \
    \ return n;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-4`,\n right: `1`', /tmp/tmpnhyt_63p.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use core::cmp::Ordering::{Equal,\
    \ Greater};\n    if n == 0 {\n        return 0\n    }\n    else if n == 1 {\n\
    \        return 1\n    }\n    else if n == 2 {\n        return 1\n    }\n    else\
    \ if n > 2 {\n        let x = fibfib(n-1);\n        let y = fibfib(n-2);\n   \
    \     let z = fibfib(n-3);\n        (x + y + z).cmp(fibfib(n-2))\n    }\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: maybe a missing crate `core`?\n  --> /tmp/tmpil0ynftr.rs:14:9\n\
    \   |\n14 |     use core::cmp::Ordering::{Equal, Greater};\n   |         ^^^^\
    \ maybe a missing crate `core`?\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpil0ynftr.rs:28:25\n\
    \   |\n28 |         (x + y + z).cmp(fibfib(n-2))\n   |                       \
    \  ^^^^^^^^^^^\n   |                         |\n   |                         expected\
    \ `&isize`, found `isize`\n   |                         help: consider borrowing\
    \ here: `&fibfib(n-2)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpil0ynftr.rs:28:9\n\
    \   |\n13 | fn fibfib(n: isize) -> isize {\n   |                        -----\
    \ expected `isize` because of return type\n...\n28 |         (x + y + z).cmp(fibfib(n-2))\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `std::cmp::Ordering`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    if n == 3 {\n        return 1;\n    }\n    let\
    \ mut a = 1;\n    let mut b = 1;\n    let mut c = 1;\n    let mut d = 1;\n   \
    \ for i in 1..n {\n        let temp = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n        d = temp;\n    }\n    d\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `4`', /tmp/tmp3l2a_cpd.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return n;\n    }\n    if n == 2 {\n        return 1;\n    }\n\n    let\
    \ mut fib = vec![];\n\n    fib.push(fibfib(n-1));\n    fib.push(fibfib(n-2));\n\
    \    fib.push(fibfib(n-3));\n\n    fib.iter().cloned().sum()\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpovhfn99u.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n \
    \   let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpz9mz4c0t.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib_sum = 0;\n\
    \    let mut fib: isize = 1;\n    loop {\n        fib_sum += fib;\n        if\
    \ n == fib_sum {\n            return fib;\n        }\n        fib = fib * (fib_sum\
    \ - n) + 1;\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp490i00yg.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        0\n\
    \    } else {\n        1 + fibfib(n-1) + fibfib(n-2)\n    }\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpgvj8mp38.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n == 2 {\n\
    \        return 2;\n    }\n    let mut fibfib0 = fibfib(n - 1);\n    let mut fibfib1\
    \ = fibfib(n - 2);\n    let mut fibfib2 = fibfib(n - 3);\n    fibfib2 += fibfib1\
    \ + fibfib0;\n    return fibfib2;\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmppzxlih6p.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 3 {\n       \
    \ return n;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpnym5ks73.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut res = 1;\n\n\
    \    for i in 2..n {\n        res = res + i;\n    }\n\n    res\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyuj9kf9p.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ 0\n    } else {\n        if n == 1 {\n            0\n        } else if n ==\
    \ 2 {\n            1\n        } else {\n            fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        }\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n\n    if n == 1 {\n        return 1;\n    }\n\n    let mut\
    \ fibfib0: isize = 0;\n    let mut fibfib1: isize = 1;\n    let mut fibfib2: isize\
    \ = 1;\n\n    for _ in 0..n / 3 {\n        fibfib0 += fibfib1;\n        fibfib1\
    \ += fibfib2;\n        fibfib2 += fibfib0;\n    }\n\n    fibfib0\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmptbhbazei.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    (1..n).map(|x| fib(x)).sum()\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib` in this scope\n  --> /tmp/tmpbftcyvha.rs:14:20\n\
    \   |\n14 |     (1..n).map(|x| fib(x)).sum()\n   |                    ^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n\n    if n == 2 {\n        return 1\n    }\n\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib = vec![0];\n\
    \    for _ in 0..n {\n        fib.push(fib[0]).push(fib[1]).push(fib[2]);\n  \
    \  }\n    fib.iter().collect()[n as usize]\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpunsr_otr.rs:16:26\n   |\n16 |         fib.push(fib[0]).push(fib[1]).push(fib[2]);\n\
    \   |                          ^^^^ method not found in `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        0\n\
    \    } else if n == 0 {\n        0\n    } else {\n        fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1f2uxzjh.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    let mut f1 = fibfib(n-1);\n    let mut f2 = fibfib(n-2);\n\
    \    let mut f3 = fibfib(n-3);\n    f3 += f2;\n    f2 += f1;\n    f1 += f0;\n\
    \    return f1;\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `f0` in this scope\n  --> /tmp/tmp47xxe64u.rs:22:11\n\
    \   |\n22 |     f1 += f0;\n   |           ^^ help: a local variable with a similar\
    \ name exists: `f1`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut i = 1;\n    let\
    \ mut fibfibs: Vec<isize> = vec![0; 5];\n    while i < n {\n        fibfibs.push(fibfib(i));\n\
    \        i += 2;\n    }\n    return fibfibs[n - 1];\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp_y6cooq.rs:20:12\n\
    \   |\n20 |     return fibfibs[n - 1];\n   |            ^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ 0;\n    }\n    if n == 0 || n == 1 {\n        return 1;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpip961re1.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut res = 0;\n  \
    \  if n == 0 {\n        0\n    } else if n == 1 {\n        0\n    } else if n\
    \ == 2 {\n        1\n    } else {\n        res = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmqd1xmey.rs:16:9\n   |\n\
    15 | /     if n == 0 {\n16 | |         0\n   | |         ^ expected `()`, found\
    \ integer\n17 | |     } else if n == 1 {\n18 | |         0\n...  |\n22 | |   \
    \      res = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n23 | |     }\n   | |_____-\
    \ expected this to be `()`\n   |\nhelp: you might have meant to return this value\n\
    \   |\n16 |         return 0;\n   |         ++++++  +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmqd1xmey.rs:18:9\n   |\n17 |       } else if n == 1 {\n\
    \   |  ____________-\n18 | |         0\n   | |         ^ expected `()`, found\
    \ integer\n19 | |     } else if n == 2 {\n20 | |         1\n21 | |     } else\
    \ {\n22 | |         res = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n23 | |   \
    \  }\n   | |_____- expected this to be `()`\n   |\nhelp: you might have meant\
    \ to return this value\n   |\n18 |         return 0;\n   |         ++++++  +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmqd1xmey.rs:20:9\n   |\n19 | \
    \      } else if n == 2 {\n   |  ____________-\n20 | |         1\n   | |     \
    \    ^ expected `()`, found integer\n21 | |     } else {\n22 | |         res =\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n23 | |     }\n   | |_____- expected\
    \ this to be `()`\n   |\nhelp: you might have meant to return this value\n   |\n\
    20 |         return 1;\n   |         ++++++  +\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 1 { return 0;\
    \ }\n\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmphoee8h_x.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 0 {\n       \
    \ return 0;\n    }\n    if n <= 1 {\n        return 0;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmplyz83vbr.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 1;\n    let\
    \ mut b = 1;\n    for i in 0..n {\n        if i != 0 {\n            a *= b;\n\
    \        }\n        b += a;\n    }\n    a * b\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `1`', /tmp/tmp2alkmyqa.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fn f(i: isize) -> isize\
    \ {\n        if i <= 0 {\n            0\n        }\n        else if i <= 2 {\n\
    \            0\n        }\n        else {\n            i\n            + f(i-1)\
    \ + f(i-2)\n        }\n    }\n    f(n)\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpt1qf1os7.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib: isize\
    \ = 0;\n    while n > fibfib {\n        fibfib += n;\n    }\n    fibfib\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp5wzr8n4o.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ n;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n \
    \   let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1g4cy0h3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::cmp::Ordering::{Equal,\
    \ Less};\n    use std::mem;\n\n    if n <= 2 {\n        if n <= 1 {\n        \
    \    return 0;\n        }\n        return 1;\n    }\n\n    if n == 3 {\n     \
    \   return 2;\n    }\n\n    let mut fib_array = [0i32; 3];\n    fib_array[0] =\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\n    mem::swap(&mut fib_array[2],\
    \ &mut fib_array[1]);\n\n    fib_array[1]\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "warning: unused imports: `Equal`, `Less`\n  --> /tmp/tmpdey2nsed.rs:14:30\n\
    \   |\n14 |     use std::cmp::Ordering::{Equal, Less};\n   |                 \
    \             ^^^^^  ^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by default\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdey2nsed.rs:29:20\n   |\n29 |\
    \     fib_array[0] = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n   |     ------------\
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `isize`\n  \
    \ |     |\n   |     expected due to the type of this binding\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdey2nsed.rs:33:5\n   |\n13 | fn fibfib(n: isize)\
    \ -> isize {\n   |                        ----- expected `isize` because of return\
    \ type\n...\n33 |     fib_array[1]\n   |     ^^^^^^^^^^^^ expected `isize`, found\
    \ `i32`\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        0\n\
    \    } else if n == 2 {\n        1\n    } else {\n        fibfib(n - 1) + fibfib(n-2)\n\
    \    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmp64jsnmrk.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return n;\n    }\n\n    let mut fibfibs = fibfibs(n).clone();\n    fibfibs.rotate_left(1);\n\
    \    fibfibs.rotate_left(2);\n    fibfibs.rotate_left(3);\n    fibfibs[n]\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fibfibs` in this scope\n  --> /tmp/tmp4_rifcn8.rs:18:23\n\
    \   |\n18 |     let mut fibfibs = fibfibs(n).clone();\n   |                  \
    \     ^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut res = 0;\n  \
    \  loop {\n        if n <= 0 {\n            break;\n        }\n        res +=\
    \ 1;\n        n-=3;\n    }\n    res\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp6butfkly.rs:20:9\n\
    \   |\n13 | fn fibfib(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n20 |         n-=3;\n   |         ^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        0\n\
    \    } else {\n        1 + fibfib(n - 2) + fibfib(n - 3)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpwa2kx3i4.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ 0;\n    }\n    let mut fib = 0isize;\n    fib += fibfib(n-1);\n    fib += fibfib(n-2);\n\
    \    fib += fibfib(n-3);\n    fib\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpqrtix4pn.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib: Vec<_>\
    \ = Vec::new();\n    fibfib = [0; 10];\n    let mut a = 1;\n    let mut b = 1;\n\
    \    let mut c = 0;\n    for i in 0..n {\n        c = a + b + c;\n        a =\
    \ b;\n        b = c;\n        fibfib.push(c);\n    }\n    fibfib[n]\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1v797053.rs:15:14\n   |\n\
    14 |     let mut fibfib: Vec<_> = Vec::new();\n   |                     ------\
    \ expected due to this type\n15 |     fibfib = [0; 10];\n   |              ^^^^^^^-\
    \ help: try using a conversion method: `.to_vec()`\n   |              |\n   |\
    \              expected struct `Vec`, found array `[{integer}; 10]`\n   |\n  \
    \ = note: expected struct `Vec<_>`\n               found array `[{integer}; 10]`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp1v797053.rs:25:5\n\
    \   |\n25 |     fibfib[n]\n   |     ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 1 {\n       \
    \ 0\n    } else {\n        fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n   \
    \ }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpsxej5z_c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = [0; 4];\n\
    \    a[0] = a[1] = 0;\n    for i in 2..n {\n        a[i] = a[i-2] + a[i-1];\n\
    \    }\n    return a[n];\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy980rd19.rs:15:12\n   |\n\
    15 |     a[0] = a[1] = 0;\n   |     ----   ^^^^^^^^ expected integer, found `()`\n\
    \   |     |\n   |     expected due to the type of this binding\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpy980rd19.rs:17:9\n\
    \   |\n17 |         a[i] = a[i-2] + a[i-1];\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpy980rd19.rs:17:16\n   |\n17 |         a[i]\
    \ = a[i-2] + a[i-1];\n   |                ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpy980rd19.rs:17:25\n   |\n17 |         a[i]\
    \ = a[i-2] + a[i-1];\n   |                         ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpy980rd19.rs:19:12\n   |\n19 |     return\
    \ a[n];\n   |            ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `[{"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 0 {\n       \
    \ return 0\n    }\n\n    if n <= 3 {\n        return n\n    }\n\n    let result\
    \ = fib(n - 3)\n        + fib(n - 2)\n        + fib(n - 1)\n        + fib(n -\
    \ 4)\n        + fib(n - 5)\n        + fib(n - 6)\n        + fib(n - 7)\n     \
    \   + fib(n - 8);\n\n    return result;\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib` in this scope\n  --> /tmp/tmpiguzfvlp.rs:22:18\n\
    \   |\n22 |     let result = fib(n - 3)\n   |                  ^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `fib` in this scope\n  -->\
    \ /tmp/tmpiguzfvlp.rs:23:11\n   |\n23 |         + fib(n - 2)\n   |           ^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `fib` in this\
    \ scope\n  --> /tmp/tmpiguzfvlp.rs:24:11\n   |\n24 |         + fib(n - 1)\n  \
    \ |           ^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `fib` in this scope\n  --> /tmp/tmpiguzfvlp.rs:25:11\n   |\n25 |         + fib(n\
    \ - 4)\n   |           ^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `fib` in this scope\n  --> /tmp/tmpiguzfvlp.rs:26:11\n   |\n26 |  \
    \       + fib(n - 5)\n   |           ^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `fib` in this scope\n  --> /tmp/tmpiguzfvlp.rs:27:11\n\
    \   |\n27 |         + fib(n - 6)\n   |           ^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `fib` in this scope\n  --> /tmp/tmpiguzfvlp.rs:28:11\n\
    \   |\n28 |         + fib(n - 7)\n   |           ^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `fib` in this scope\n  --> /tmp/tmpiguzfvlp.rs:29:11\n\
    \   |\n29 |         + fib(n - 8);\n   |           ^^^ not found in this scope\n\
    \nerror: aborting due to 8 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib = [0;\
    \ 3];\n    let mut j: isize = 0;\n\n    for i in 1..n {\n        if j == 0 {\n\
    \            fibfib[0] = 1;\n        } else {\n            fibfib[j] = fibfib[j-1]\
    \ + fibfib[j-2];\n        }\n\n        j += 1;\n    }\n\n    fibfib[0]\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp577ap9z0.rs:21:13\n   |\n21 |             fibfib[j] = fibfib[j-1] +\
    \ fibfib[j-2];\n   |             ^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp577ap9z0.rs:21:25\n   |\n21 |         \
    \    fibfib[j] = fibfib[j-1] + fibfib[j-2];\n   |                         ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp577ap9z0.rs:21:39\n\
    \   |\n21 |             fibfib[j] = fibfib[j-1] + fibfib[j-2];\n   |         \
    \                              ^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => {\n            let mut\
    \ a = 0;\n            let mut b = 1;\n            let mut c = 1;\n           \
    \ for i in 2..n {\n                let tmp = a;\n                let tmp2 = b;\n\
    \                let tmp3 = c;\n                a = b;\n                b = c;\n\
    \                c = tmp + tmp2 + tmp3;\n            }\n            c\n      \
    \  }\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `4`', /tmp/tmp7kq4u1yx.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::cmp::Ordering;\n\
    \n    Ordering::eq::<isize>()\n        .compare_with(|| fibfib(n-1), |a, b| b.cmp(a))\n\
    \        .unwrap() + fibfib(n-2)\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0107]: this associated function takes 0 generic arguments but 1\
    \ generic argument was supplied\n  --> /tmp/tmp0uefw9au.rs:16:15\n   |\n16 | \
    \    Ordering::eq::<isize>()\n   |               ^^--------- help: remove these\
    \ generics\n   |               |\n   |               expected 0 generic arguments\n\
    \nerror[E0061]: this function takes 2 arguments but 0 arguments were supplied\n\
    \   --> /tmp/tmp0uefw9au.rs:16:5\n    |\n16  |     Ordering::eq::<isize>()\n \
    \   |     ^^^^^^^^^^^^^^^^^^^^^-- supplied 0 arguments\n    |     |\n    |   \
    \  expected 2 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]:\
    \ no method named `compare_with` found for type `bool` in the current scope\n\
    \  --> /tmp/tmp0uefw9au.rs:17:10\n   |\n17 |         .compare_with(|| fibfib(n-1),\
    \ |a, b| b.cmp(a))\n   |          ^^^^^^^^^^^^ method not found in `bool`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0107, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    debug_assert!(n > 0,\
    \ \"fibfib(n) must be positive\");\n    debug_assert!(n == 0 || n == 1, \"fibfib(n)\
    \ must be 1 or 0\");\n    debug_assert!(n == 0 || n == 2, \"fibfib(n) must be\
    \ 1 or 2\");\n\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n \
    \       return 1;\n    }\n    if n == 3 {\n        return 2;\n    }\n    if n\
    \ == 4 {\n        return 3;\n    }\n    if n == 5 {\n        return 4;\n    }\n\
    \    if n == 6 {\n        return 5;\n    }\n    if n == 7 {\n        return 6;\n\
    \    }\n    if n == 8 {\n        return 7;\n    }\n    if n == 9 {\n        return\
    \ 8;\n    }\n    if n == 10 {\n        return 9;\n    }\n    if n == 11 {\n  \
    \      return 10;\n    }\n    if n == 12 {\n        return 11;\n    }\n    if\
    \ n == 13 {\n        return 12;\n    }\n    if n == 14 {\n        return 13;\n\
    \    }\n    if n == 15 {\n        return 14;\n    }\n    if n == 16 {\n      \
    \  return 15;\n    }\n    if n == 17 {\n        return 16;\n    }\n    if n ==\
    \ 18 {\n        return 17;\n    }\n    if n == 19 {\n        return 18;\n    }\n\
    \    if n == 20 {\n        return 19;\n    }\n    if n == 21 {\n        return\
    \ 20;\n    }\n    if n == 22 {\n        return 21;\n    }\n    if n == 23 {\n\
    \        return 22;\n    }\n    if n == 24 {\n        return 23;\n    }\n    if\
    \ n == 25 {\n        return 24;\n    }\n    if n == 26 {\n        return 25;\n\
    \    }\n    if n == 27 {\n        return 26;\n    }\n    if n == 28 {\n      \
    \  return 27;\n    }\n    if n == 29 {\n        return 28;\n    }\n    if n ==\
    \ 30 {\n        return 29;\n    }\n    if n == 31 {\n        return 30;\n    }\n\
    \    if n == 32 {\n        return 31;\n    }\n    if n == 33 {\n        return\
    \ 32;\n    }\n    if n == 34 {\n        return 33;\n    }\n    if n == 35 {\n\
    \        return 34;\n    }\n    if n == 36 {\n        return 35;\n    }\n    if\
    \ n == 37 {\n        return 36;\n    }\n    if n == 38 {\n        return 37;\n\
    \    }\n    if n == 39 {\n        return 38;\n    }\n    if n == 40 {\n      \
    \  return 39;\n    }\n    if n == 41 {\n        return 40;\n    }\n    if n ==\
    \ 42 {\n        return 41;\n    }\n    if n == 43 {\n        return 42;\n    }\n\
    \    if n == 44 {\n        return 43;\n    }\n    if n == \n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmpnhqc54mh.rs:151:1\n\
    \    |\n151 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n;\n    }\n\n    if n == 3 {\n        return 1;\n    }\n\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpa_edbobk.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib: isize\
    \ = 0;\n    if n == 0 || n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    while n != 0 {\n        fibfib = fibfib + n - 3;\n\
    \        n = n - 2;\n    }\n    fibfib\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp9ofl6bsk.rs:23:9\n\
    \   |\n13 | fn fibfib(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n23 |         n = n - 2;\n   |         ^^^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 1 {\n       \
    \ return n;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpeew9jqoq.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => {\n            let f1\
    \ = fibfib(n-1);\n            let f2 = fibfib(n-2);\n            let f3 = fibfib(n-3);\n\
    \            f1 + f2 + f3\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib_seq =\
    \ [0; 3];\n    fibfib_seq[2] = 1;\n    fibfib_seq[3] = 0;\n    for i in 1..n {\n\
    \        fibfib_seq[2] = fibfib_seq[1] + fibfib_seq[2];\n        fibfib_seq[3]\
    \ = fibfib_seq[0] + fibfib_seq[3];\n        fibfib_seq[1] = fibfib_seq[0];\n \
    \       fibfib_seq[0] = fibfib_seq[3];\n    }\n    fibfib_seq[1]\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `i`\n  --> /tmp/tmpvmrre4iq.rs:17:9\n   |\n17\
    \ |     for i in 1..n {\n   |         ^ help: if this is intentional, prefix it\
    \ with an underscore: `_i`\n   |\n   = note: `#[warn(unused_variables)]` on by\
    \ default\n\nerror: this operation will panic at runtime\n  --> /tmp/tmpvmrre4iq.rs:16:5\n\
    \   |\n16 |     fibfib_seq[3] = 0;\n   |     ^^^^^^^^^^^^^ index out of bounds:\
    \ the length is 3 but the index is 3\n   |\n   = note: `#[deny(unconditional_panic)]`\
    \ on by default\n\nerror: this operation will panic at runtime\n  --> /tmp/tmpvmrre4iq.rs:19:41\n\
    \   |\n19 |         fibfib_seq[3] = fibfib_seq[0] + fibfib_seq[3];\n   |     \
    \                                    ^^^^^^^^^^^^^ index out of bounds: the length\
    \ is 3 but the index is 3\n\nerror: this operation will panic at runtime\n  -->\
    \ /tmp/tmpvmrre4iq.rs:19:9\n   |\n19 |         fibfib_seq[3] = fibfib_seq[0] +\
    \ fibfib_seq[3];\n   |         ^^^^^^^^^^^^^ index out of bounds: the length is\
    \ 3 but the index is 3\n\nerror: this operation will panic at runtime\n  --> /tmp/tmpvmrre4iq.rs:21:25\n\
    \   |\n21 |         fibfib_seq[0] = fibfib_seq[3];\n   |                     \
    \    ^^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 3\n\n\
    error: aborting due to 4 previous errors; 1 warning emitted\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 1\n    }\n    let mut a = fibfib(n - 1)\n    let mut b = fibfib(n\
    \ - 2)\n    let mut c = fibfib(n - 3)\n    c += a + b\n    a = b\n    b = c\n\
    \    c\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9s0xm2fq.rs:23:30\n\
    \   |\n23 |     let mut a = fibfib(n - 1)\n   |                              ^\
    \ help: add `;` here\n24 |     let mut b = fibfib(n - 2)\n   |     --- unexpected\
    \ token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp9s0xm2fq.rs:24:30\n\
    \   |\n24 |     let mut b = fibfib(n - 2)\n   |                              ^\
    \ help: add `;` here\n25 |     let mut c = fibfib(n - 3)\n   |     --- unexpected\
    \ token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmp9s0xm2fq.rs:25:30\n \
    \  |\n25 |     let mut c = fibfib(n - 3)\n   |                              ^\
    \ help: add `;` here\n26 |     c += a + b\n   |     - unexpected token\n\nerror:\
    \ expected `;`, found `a`\n  --> /tmp/tmp9s0xm2fq.rs:26:15\n   |\n26 |     c +=\
    \ a + b\n   |               ^ help: add `;` here\n27 |     a = b\n   |     - unexpected\
    \ token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmp9s0xm2fq.rs:27:10\n \
    \  |\n27 |     a = b\n   |          ^ help: add `;` here\n28 |     b = c\n   |\
    \     - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmp9s0xm2fq.rs:28:10\n\
    \   |\n28 |     b = c\n   |          ^ help: add `;` here\n29 |     c\n   |  \
    \   - unexpected token\n\nerror: aborting due to 6 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    loop {\n        if n\
    \ <= 2 {\n            return 0;\n        }\n        if n % 2 != 0 {\n        \
    \    return 1;\n        }\n        let res = fibfib(n-1);\n        n -= 2;\n \
    \       res += res;\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n  \
    \  assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "warning: value assigned to `res` is never read\n  --> /tmp/tmpi72dlvoa.rs:23:9\n\
    \   |\n23 |         res += res;\n   |         ^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmpi72dlvoa.rs:22:9\n  \
    \ |\n13 | fn fibfib(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n22 |         n -= 2;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror[E0384]: cannot assign twice to\
    \ immutable variable `res`\n  --> /tmp/tmpi72dlvoa.rs:23:9\n   |\n21 |       \
    \  let res = fibfib(n-1);\n   |             ---\n   |             |\n   |    \
    \         first assignment to `res`\n   |             help: consider making this\
    \ binding mutable: `mut res`\n22 |         n -= 2;\n23 |         res += res;\n\
    \   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting\
    \ due to 2 previous errors; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: Vec<_> =\
    \ vec![];\n    fib.push(n);\n    fib.push(1);\n    fib.push(1);\n    for _i in\
    \ 2..(n + 1) {\n        fib.push(fib[i - 1] + fib[i - 2] + fib[i - 3])\n    }\n\
    \    fib[n]\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpfelkp9km.rs:19:22\n\
    \   |\n19 |         fib.push(fib[i - 1] + fib[i - 2] + fib[i - 3])\n   |     \
    \                 ^ help: a local variable with a similar name exists: `_i`\n\n\
    error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpfelkp9km.rs:19:35\n\
    \   |\n19 |         fib.push(fib[i - 1] + fib[i - 2] + fib[i - 3])\n   |     \
    \                              ^ help: a local variable with a similar name exists:\
    \ `_i`\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpfelkp9km.rs:19:48\n\
    \   |\n19 |         fib.push(fib[i - 1] + fib[i - 2] + fib[i - 3])\n   |     \
    \                                           ^ help: a local variable with a similar\
    \ name exists: `_i`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpfelkp9km.rs:21:5\n   |\n21 |     fib[n]\n   |     ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 { 0 }\n    else\
    \ if n < 5 { 0 }\n    else if n < 10 { 1 }\n    else { fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3) }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpf6s7exmi.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut accum: isize\
    \ = 0;\n    for _ in 0..n {\n        accum += fibfib(n - 1);\n    }\n    accum\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpx99tx9gw.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        n\n\
    \    } else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp8u74l62y.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 1 {\n       \
    \ return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        n\n\
    \    } else {\n        (fibfib(n-2) + fibfib(n-1) + fibfib(n-3)) % n\n    }\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7i0sp57y.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fib_fib(n-1) + fib_fib(n-2)\
    \ + fib_fib(n-3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib_fib` in this scope\n  --> /tmp/tmpw7ngnocp.rs:18:14\n\
    \   |\n18 |         _ => fib_fib(n-1) + fib_fib(n-2) + fib_fib(n-3),\n   |   \
    \           ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `fib_fib` in this scope\n  --> /tmp/tmpw7ngnocp.rs:18:29\n   |\n18 |       \
    \  _ => fib_fib(n-1) + fib_fib(n-2) + fib_fib(n-3),\n   |                    \
    \         ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `fib_fib` in this scope\n  --> /tmp/tmpw7ngnocp.rs:18:44\n   |\n18 |       \
    \  _ => fib_fib(n-1) + fib_fib(n-2) + fib_fib(n-3),\n   |                    \
    \                        ^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n\n    if n == 1 {\n        return 0;\n    }\n\n    if n ==\
    \ 2 {\n        return 1;\n    }\n\n    if n < 3 {\n        fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    } else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\
    \ + fibfib(n-4)\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let mut fibfib: isize = 0;\n    let mut i: isize\
    \ = n - 1;\n    for _ in 0..n {\n        fibfib = fibfib + i;\n        i = fibfib\
    \ - 1;\n    }\n    fibfib\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `49`,\n right: `4`', /tmp/tmpbuxw2078.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib_n_num: usize\
    \ = 0;\n    for _ in 0..n {\n        let current_fib_num = fib_n_num;\n      \
    \  fib_n_num += 1;\n    }\n    fib_n_num\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl2ji75t4.rs:19:5\n   |\n\
    13 | fn fibfib(n: isize) -> isize {\n   |                        ----- expected\
    \ `isize` because of return type\n...\n19 |     fib_n_num\n   |     ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n19 |     fib_n_num.try_into().unwrap()\n\
    \   |              ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fn fibfib_internal(mut\
    \ n: isize) -> isize {\n        if n == 0 {\n            return 0;\n        }\n\
    \        if n == 1 {\n            return 1;\n        }\n        return fibfib_internal(n-1)\
    \ + fibfib_internal(n-2);\n    }\n    fibfib_internal(n)\n}\n\nfn main() {\n \
    \   let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpnz0plcp3.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpslg3bmza.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 { return 0\
    \ }\n    if n == 1 { return 1 }\n    if n == 2 { return 1 }\n    return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpxq1tl3wl.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    assert!(n > 0, \"Fibbonacci\
    \ sequence must have at least 1 element\");\n    assert!(n > 1, \"Fibbonacci sequence\
    \ must have at least 2 elements\");\n    if n == 0 {\n        return 0;\n    }\n\
    \    if n == 1 {\n        return 1;\n    }\n    if n == 2 {\n        return 1;\n\
    \    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'Fibbonacci sequence must have at least 2 elements',\
    \ /tmp/tmp7q9bs9jr.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 { return 0;\
    \ }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::cmp::Ordering::{Equal,\
    \ Less, Greater};\n    if n <= 1 {\n        return 0;\n    }\n    if n <= 2 {\n\
    \        return 1;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut result = 1;\n\
    \    for (i, _) in 0..n {\n        result *= i;\n        result += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9xk4v2l4.rs:15:9\n   |\n\
    15 |     for (i, _) in 0..n {\n   |         ^^^^^^    ---- this expression has\
    \ type `Option<isize>`\n   |         |\n   |         expected `isize`, found tuple\n\
    \   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut result = 1;\n\
    \    for i in 0..n {\n        result = result + &mut result;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&mut {integer}` to `{integer}`\n  --> /tmp/tmpjjknf63w.rs:16:25\n\
    \   |\n16 |         result = result + &mut result;\n   |                     \
    \    ^ no implementation for `{integer} + &mut {integer}`\n   |\n   = help: the\
    \ trait `Add<&mut {integer}>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `Add<Rhs>`:\n             <&'a f32 as\
    \ Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n\
    \             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n    \
    \         <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n          \
    \   <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib = 0usize;\n\
    \    fibfib += fibfib + 1;\n    fibfib += fibfib + 2;\n    fibfib += fibfib +\
    \ 3;\n    fibfib += fibfib + 4;\n    fibfib += fibfib + 5;\n    fibfib += fibfib\
    \ + 6;\n    fibfib += fibfib + 7;\n    fibfib += fibfib + 8;\n    fibfib += fibfib\
    \ + 9;\n    fibfib += fibfib + 10;\n    fibfib += fibfib + 11;\n    fibfib +=\
    \ fibfib + 12;\n    fibfib += fibfib + 13;\n    fibfib += fibfib + 14;\n    fibfib\
    \ += fibfib + 15;\n    fibfib += fibfib + 16;\n    fibfib += fibfib + 17;\n  \
    \  fibfib += fibfib + 18;\n    fibfib += fibfib + 19;\n    fibfib += fibfib +\
    \ 20;\n    fibfib += fibfib + 21;\n    fibfib += fibfib + 22;\n    fibfib += fibfib\
    \ + 23;\n    fibfib += fibfib + 24;\n    fibfib += fibfib + 25;\n    fibfib +=\
    \ fibfib + 26;\n    fibfib += fibfib + 27;\n    fibfib += fibfib + 28;\n    fibfib\
    \ += fibfib + 29;\n    fibfib += fib + 30;\n    fibfib += fibfib + 31;\n    fibfib\
    \ += fibfib + 32;\n    fibfib += fibfib + 33;\n    fibfib += fibfib + 34;\n  \
    \  fibfib += fibfib + 35;\n    fibfib += fibfib + 36;\n    fibfib += fibfib +\
    \ 37;\n    fibfib += fibfib + 38;\n    fibfib += fibfib + 39;\n    fibfib += fibfib\
    \ + 40;\n    fibfib += fibfib + 41;\n    fibfib += fibfib + 42;\n    fibfib +=\
    \ fibfib + 43;\n    fibfib += fibfib + 44;\n    fibfib += fibfib + 45;\n    fibfib\
    \ += fibfib + 46;\n    fibfib += fibfib + 47;\n    fibfib += fibfib + 48;\n  \
    \  fibfib += fibfib + 49;\n    fibfib += fibfib + 50;\n    fibfib += fibfib +\
    \ 51;\n    fibfib += fibfib + 52;\n    fibfib += \n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpf38sqe6s.rs:68:1\n\
    \   |\n68 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `fib`\
    \ in this scope\n  --> /tmp/tmpf38sqe6s.rs:44:15\n   |\n44 |     fibfib += fib\
    \ + 30;\n   |               ^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    let a = fibfib(n - 1);\n    let b = fibfib(n -\
    \ 2);\n    let c = fibfib(n - 3);\n    return a + b + c;\n}\n\nfn main() {\n \
    \   let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbtaxtli4.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ % 3 == 0 {\n        return fibfib(n / 3) * fibfib(n / 3) + fibfib(n / 3);\n\
    \    }\n    return fibfib(n / 3) + fibfib(n / 3) * fibfib((n % 3) + 1) + fibfib((n\
    \ % 3) + 1);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp7i9iwn5x.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let\
    \ mut f1 = fibfib(n-1);\n    let mut f2 = fibfib(n-2);\n    let mut f3 = fibfib(n-3);\n\
    \    return (f1 + f2 + f3);\n}\n\nfn main() {\n    let candidate = fibfib;\n \
    \   assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib = 0;\n\
    \    while n > fibfib {\n        fibfib = fibfib + fibfib + fibfib;\n    }\n \
    \   fibfib\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ n;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp68fw2n1y.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    // TODO: implement fibfib\n\
    \    (n + 2) * (n + 3) + (n - 1)\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `1`', /tmp/tmp8xz0hjpj.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib = 1i32;\n\
    \    for x in 0..n {\n        fibfib = fibfib + fibfib - fibfib - fibfib - fibfib;\n\
    \    }\n    fibfib\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy6ck8bf_.rs:18:5\n   |\n\
    13 | fn fibfib(n: isize) -> isize {\n   |                        ----- expected\
    \ `isize` because of return type\n...\n18 |     fibfib\n   |     ^^^^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n18 |     fibfib.try_into().unwrap()\n\
    \   |           ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    if n == 4 {\n        return 1;\n    }\n\
    \    if n == 5 {\n        return 2;\n    }\n    if n == 6 {\n        return 3;\n\
    \    }\n    if n == 7 {\n        return 4;\n    }\n    if n == 8 {\n        return\
    \ 5;\n    }\n    if n == 9 {\n        return 6;\n    }\n    if n == 10 {\n   \
    \     return 7;\n    }\n    if n == 11 {\n        return 8;\n    }\n    if n ==\
    \ 12 {\n        return 9;\n    }\n    if n == 13 {\n        return 10;\n    }\n\
    \    if n == 14 {\n        return 11;\n    }\n    if n == 15 {\n        return\
    \ 12;\n    }\n    if n == 16 {\n        return 13;\n    }\n    if n == 17 {\n\
    \        return 14;\n    }\n    if n == 18 {\n        return 15;\n    }\n    if\
    \ n == 19 {\n        return 16;\n    }\n    if n == 20 {\n        return 17;\n\
    \    }\n    if n == 21 {\n        return 18;\n    }\n    if n == 22 {\n      \
    \  return 19;\n    }\n    if n == 23 {\n        return 20;\n    }\n    if n ==\
    \ 24 {\n        return 21;\n    }\n    if n == 25 {\n        return 22;\n    }\n\
    \    if n == 26 {\n        return 23;\n    }\n    if n == 27 {\n        return\
    \ 24;\n    }\n    if n == 28 {\n        return 25;\n    }\n    if n == 29 {\n\
    \        return 26;\n    }\n    if n == 30 {\n        return 27;\n    }\n    if\
    \ n == 31 {\n        return 28;\n    }\n    if n == 32 {\n        return 29;\n\
    \    }\n    if n == 33 {\n        return 30;\n    }\n    if n == 34 {\n      \
    \  return 31;\n    }\n    if n == 35 {\n        return 32;\n    }\n    if n ==\
    \ 36 {\n        return 33;\n    }\n    if n == 37 {\n        return 34;\n    }\n\
    \    if n == 38 {\n        return 35;\n    }\n    if n == 39 {\n        return\
    \ 36;\n    }\n    if n == 40 {\n        return 37;\n    }\n    if n == 41 {\n\
    \        return 38;\n    }\n    if n == 42 {\n        return 39;\n    }\n    if\
    \ n == 43 {\n        return 40;\n    }\n    if n == 44 {\n        return 41;\n\
    \    }\n    if n == 45 {\n        return 42;\n    }\n    if n == 46 {\n      \
    \  return 43;\n    }\n    if n == 47 {\n        return 44;\n    }\n    if n ==\
    \ 48 {\n        return 45;\n    }\n    if n == 49 {\n        return 46;\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpns6qsz84.rs:171:3\n\
    \    |\n13  | fn fibfib(n: isize) -> isize {\n    |                          \
    \    - unclosed delimiter\n...\n158 |     if n == 49 {\n    |                -\
    \ this delimiter might not be properly closed...\n159 |         return 46;\n160\
    \ | }\n    | - ...as it matches this but it has different indentation\n...\n171\
    \ | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpns6qsz84.rs:13:24\n\
    \   |\n13 | fn fibfib(n: isize) -> isize {\n   |    ------              ^^^^^\
    \ expected `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as\
    \ its body has no tail or `return` expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 0 {\n       \
    \ return 0;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp51y1qdnv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        0\n\
    \    } else {\n        n + fibfib(n-1) + fibfib(n-2)\n    }\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmppffvzx0z.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib = 0;\n\
    \    for i in 0..n {\n        fibfib = fibfib + i;\n    }\n    fibfib\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `4`', /tmp/tmpepv5_eom.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib = [0i32;\
    \ 20];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n    for &x\
    \ in &fibfib[2..] {\n        fibfib[x] = fibfib[x - 1] + fibfib[x - 2] + fibfib[x\
    \ - 3];\n    }\n    fibfib[n]\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[i32]` cannot be indexed by `i32`\n  --> /tmp/tmpmw0_rnb3.rs:19:9\n\
    \   |\n19 |         fibfib[x] = fibfib[x - 1] + fibfib[x - 2] + fibfib[x - 3];\n\
    \   |         ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[i32]>` is not implemented for `i32`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<i32>` for `[i32]`\n\
    \nerror[E0277]: the type `[i32]` cannot be indexed by `i32`\n  --> /tmp/tmpmw0_rnb3.rs:19:21\n\
    \   |\n19 |         fibfib[x] = fibfib[x - 1] + fibfib[x - 2] + fibfib[x - 3];\n\
    \   |                     ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[i32]>` is not implemented\
    \ for `i32`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<i32>` for\
    \ `[i32]`\n\nerror[E0277]: the type `[i32]` cannot be indexed by `i32`\n  -->\
    \ /tmp/tmpmw0_rnb3.rs:19:37\n   |\n19 |         fibfib[x] = fibfib[x - 1] + fibfib[x\
    \ - 2] + fibfib[x - 3];\n   |                                     ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[i32]>` is not implemented for `i32`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<i32>` for `[i32]`\n\nerror[E0277]: the\
    \ type `[i32]` cannot be indexed by `i32`\n  --> /tmp/tmpmw0_rnb3.rs:19:53\n \
    \  |\n19 |         fibfib[x] = fibfib[x - 1] + fibfib[x - 2] + fibfib[x - 3];\n\
    \   |                                                     ^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[i32]>` is not implemented for `i32`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<i32>` for `[i32]`\n\nerror[E0277]: the type `[i32]` cannot\
    \ be indexed by `"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fn loop(i: isize) ->\
    \ isize {\n        if i == 0 {\n            0\n        }\n        else if i ==\
    \ 1 {\n            1\n        }\n        else if i == 2 {\n            1\n   \
    \     }\n        else if i == 3 {\n            2\n        }\n        else {\n\
    \            loop(i-1) + loop(i-2) + loop(i-3)\n        }\n    }\n    loop(n)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found keyword `loop`\n  --> /tmp/tmpq33zwt7y.rs:14:8\n\
    \   |\n14 |     fn loop(i: isize) -> isize {\n   |        ^^^^ expected identifier,\
    \ found keyword\n   |\nhelp: escape `loop` to use it as an identifier\n   |\n\
    14 |     fn r#loop(i: isize) -> isize {\n   |        ++\n\nerror: expected `{`,\
    \ found `(`\n  --> /tmp/tmpq33zwt7y.rs:28:17\n   |\n28 |             loop(i-1)\
    \ + loop(i-2) + loop(i-3)\n   |             ----^ expected `{`\n   |         \
    \    |\n   |             while parsing this `loop` expression\n\nerror: expected\
    \ `{`, found `(`\n  --> /tmp/tmpq33zwt7y.rs:31:9\n   |\n31 |     loop(n)\n   |\
    \     ----^ expected `{`\n   |     |\n   |     while parsing this `loop` expression\n\
    \   |\nhelp: try placing this code inside a block\n   |\n31 |     loop{ (n) }\n\
    \   |         +     +\n\nerror: aborting due to 3 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: Vec<isize>\
    \ = vec![];\n    fib[0] = fib[1] = fib[2] = 0;\n    for i in 1..n {\n        fib[i]\
    \ = fib[i - 1] + fib[i - 2] + fib[i - 3];\n    }\n    fib[n - 1]\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc7pmm70d.rs:15:23\n   |\n\
    15 |     fib[0] = fib[1] = fib[2] = 0;\n   |              ------   ^^^^^^^^^^\
    \ expected `isize`, found `()`\n   |              |\n   |              expected\
    \ due to the type of this binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc7pmm70d.rs:15:14\n\
    \   |\n15 |     fib[0] = fib[1] = fib[2] = 0;\n   |     ------   ^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `()`\n   |     |\n   |     expected due to the type\
    \ of this binding\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpc7pmm70d.rs:17:9\n   |\n17 |         fib[i] = fib[i - 1] + fib[i\
    \ - 2] + fib[i - 3];\n   |         ^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpc7pmm70d.rs:17:18\n   |\n17 |         fib[i] = fib[i - 1] + fib[i\
    \ - 2] + fib[i - 3];\n   |                  ^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpc7pmm70d.rs:17:31\n   |\n17 |         fib[i]\
    \ = fib[i - 1] + fib[i - 2] + fib[i - 3];\n   |                              \
    \ ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n  \
    \ = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   =\
    \ help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc7pmm70d.rs:17:44\n\
    \ "
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 { return 0;\
    \ }\n    if n == 1 { return 1; }\n    if n == 2 { return 1; }\n    let mut a =\
    \ fibfib(n-1);\n    let mut b = fibfib(n-2);\n    let mut c = fibfib(n-3);\n \
    \   a += c;\n    b += c;\n    return a + b;\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmprvjfs1iu.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    if n % 2 == 0 {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n    }\n    return fibfib(n-1) + fibfib(n-2);\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphmojrqku.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: isize =\
    \ 0;\n    for _i in 0..(n * 2 - 1) {\n        fib = fib + i;\n    }\n    fib\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpsivh5lah.rs:16:21\n\
    \   |\n16 |         fib = fib + i;\n   |                     ^ help: a local variable\
    \ with a similar name exists: `_i`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: isize =\
    \ 0;\n    for _ in 0..n {\n        fib += 1;\n    }\n    return fib;\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmprm1do39z.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0\n    }\n\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ 0\n    } else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut n1 = n as isize;\n\
    \    let mut n2 = n as isize;\n\n    while n1 != 0 {\n        n1 = n2 + n1;\n\
    \        n2 = n1 - n2;\n    }\n    n2\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpuzsd1veh.rs:18:14\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib: isize\
    \ = 0;\n    for i in 0..n {\n        fibfib = fibfib + i + fibfib - 2 * i;\n \
    \   }\n    fibfib\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `1`', /tmp/tmpqp66qg42.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    let mut fib: Vec<usize> = (0..n).map(|_| 0).collect();\n\
    \    for i in 2..n {\n        fib[i] = fib[i-2] + fib[i-1] + fib[i-3];\n    }\n\
    \    fib[n]\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[usize]` cannot be indexed by `isize`\n  --> /tmp/tmpxcm22ufc.rs:19:9\n\
    \   |\n19 |         fib[i] = fib[i-2] + fib[i-1] + fib[i-3];\n   |         ^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[usize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<usize>`\n\nerror[E0277]:\
    \ the type `[usize]` cannot be indexed by `isize`\n  --> /tmp/tmpxcm22ufc.rs:19:18\n\
    \   |\n19 |         fib[i] = fib[i-2] + fib[i-1] + fib[i-3];\n   |           \
    \       ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[usize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<usize>`\n\
    \nerror[E0277]: the type `[usize]` cannot be indexed by `isize`\n  --> /tmp/tmpxcm22ufc.rs:19:29\n\
    \   |\n19 |         fib[i] = fib[i-2] + fib[i-1] + fib[i-3];\n   |           \
    \                  ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[usize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<usize>`\n\
    \nerror[E0277]: the type `[usize]` cannot be indexed by `isize`\n  --> /tmp/tmpxcm22ufc.rs:19:40\n\
    \   |\n19 |         fib[i] = fib[i-2] + fib[i-1] + fib[i-3];\n   |           \
    \                             ^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[usize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<usize>`\n\nerror[E0277]: the type `[usize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpxcm22ufc.rs:21:5\n   |\n21 |     "
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib = [0;\
    \ 4];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n    for i in\
    \ 2..n {\n        fibfib[3] += fibfib[2] - fibfib[1];\n        fibfib[0] = fibfib[1];\n\
    \        fibfib[1] = fibfib[2];\n        fibfib[2] = fibfibfib[3];\n    }\n  \
    \  fibfib[3]\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `fibfibfib` in this scope\n  --> /tmp/tmptjn_al9b.rs:22:21\n\
    \   |\n22 |         fibfib[2] = fibfibfib[3];\n   |                     ^^^^^^^^^\
    \ help: a local variable with a similar name exists: `fibfib`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib: Vec<isize>\
    \ = vec![0; n + 1];\n    fibfib[0] = 0;\n    fibfib[1] = 1;\n    for i in 2..fibfib.len()\
    \ {\n        fibfib[i] = fibfib[i - 1] + fibfib[i - 2];\n    }\n    fibfib[n]\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcp6jyjk7.rs:14:42\n   |\n\
    14 |     let mut fibfib: Vec<isize> = vec![0; n + 1];\n   |                  \
    \                        ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n14 |     let mut fibfib: Vec<isize> = vec![0; (n + 1).try_into().unwrap()];\n\
    \   |                                          +     +++++++++++++++++++++\n\n\
    error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcp6jyjk7.rs:20:5\n\
    \   |\n20 |     fibfib[n]\n   |     ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\n\
    \            \"The fibfib function expects an integer input greater than or equal\
    \ to 0\"\n        );\n    }\n\n    if n < 2 {\n        return 0;\n    }\n\n  \
    \  let mut current = 1;\n    let mut sum = 0;\n\n    for _ in 0..(n-1) {\n   \
    \     sum += current;\n        current += current;\n    }\n\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `4`', /tmp/tmp59hon2tn.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n\n    if n == 1 {\n        return 1;\n    }\n\n    if n ==\
    \ 2 {\n        return 1;\n    }\n\n    let mut fib1 = fibfib(n - 1) + fibfib(n\
    \ - 2);\n    let mut fib2 = fibfib(n - 1) + fibfib(n - 3) + fibfib(n - 4);\n \
    \   let mut fib3 = fibfib(n - 3) + fibfib(n - 4) + fibfib(n - 5);\n    let fib4\
    \ = fibfib(n - 4) + fibfib(n - 5) + fibfib(n - 6);\n    fib1 = fib1 + fib2 + fib3\
    \ + fib4;\n    return fib1;\n}\n\nfn main() {\n    let candidate = fibfib;\n \
    \   assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvv6n5p22.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfibs = Vec::new();\n\
    \    fibfibs.push(0);\n    for i in 1..=n {\n        fibfibs.push(i + fibfibs[i-1]);\n\
    \    }\n    fibfibs[1..]\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpli7gh6br.rs:17:26\n   |\n17 |         fibfibs.push(i + fibfibs[i-1]);\n\
    \   |                          ^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpli7gh6br.rs:19:5\n   |\n13 | fn fibfib(n: isize) -> isize {\n   |  \
    \                      ----- expected `isize` because of return type\n...\n19\
    \ |     fibfibs[1..]\n   |     ^^^^^^^^^^^^ expected `isize`, found slice `[{integer}]`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    if n % 2 == 0 {\n        return fibfib(n\
    \ / 2) + fibfib(n / 3);\n    } else {\n        return fibfib(n / 2 + 1) + fibfib(n\
    \ / 3 + 2);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `24`', /tmp/tmpjr4l5fyv.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    \n    let mut fib = [0, 1];\n    \n    for i in\
    \ 2..n {\n        fib[1] = fib[0] as isize + fib[1] as isize;\n        fib[0]\
    \ = fib[0] as isize + fib[1] as isize;\n    }\n    \n    fib[0]\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpljgai6ue.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fn fib(i: isize) -> isize\
    \ {\n        if i > 3 {\n            i / 3 + fib(i - 1) + fib(i - 2) + fib(i -\
    \ 3)\n        } else {\n            fib(i - 1)\n        }\n    }\n    fib(n)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\
    \ return 0; }\n    if n == 2 { return 1; }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    (0..n).fold(0, |acc,\
    \ &n| acc + fibfib(n))\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9lrafg4e.rs:14:26\n   |\n\
    14 |     (0..n).fold(0, |acc, &n| acc + fibfib(n))\n   |                     \
    \     ^--\n   |                          ||\n   |                          |expected\
    \ due to this\n   |                          expected `isize`, found reference\n\
    \   |                          help: did you mean `n`: `&isize`\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 3 {\n       \
    \ return n;\n    }\n    let mut n1, n2, n3 = 0, 2 * n, 2 * n - 1;\n    while n3\
    \ <= n2 {\n        n1 = n2;\n        n2 = n3;\n        n3 += 1;\n    }\n    n1\
    \ + n2 + n3\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error: unexpected `,` in pattern\n  --> /tmp/tmpbcthbgs6.rs:17:15\n   |\n\
    17 |     let mut n1, n2, n3 = 0, 2 * n, 2 * n - 1;\n   |               ^\n   |\n\
    help: try adding parentheses to match on a tuple\n   |\n17 |     let (mut n1,\
    \ n2, n3) = 0, 2 * n, 2 * n - 1;\n   |         +              +\n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib: [isize;\
    \ 3] = [0, 0, 0];\n\n    let mut a = 1;\n    let mut b = 1;\n\n    fibfib[0] =\
    \ 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n\n    for i in 1..(n + 1) {\n  \
    \      let mut c = a;\n        let mut d = b;\n\n        let tmp = fibfib[i];\n\
    \        c = fibfib[i] + fibfib[i + 1];\n        d = fibfib[i + 1] + fibfib[i\
    \ + 2];\n\n        a = b;\n        b = c;\n        fibfib[i] = d;\n    }\n\n \
    \   fibfib[n]\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpno45zr3o.rs:27:19\n\
    \   |\n27 |         let tmp = fibfib[i];\n   |                   ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `[isize]`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpno45zr3o.rs:28:13\n   |\n28 |  \
    \       c = fibfib[i] + fibfib[i + 1];\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[isize]`\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpno45zr3o.rs:28:25\n   |\n28 |         c = fibfib[i]\
    \ + fibfib[i + 1];\n   |                         ^^^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[isize]`\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpno45zr3o.rs:29:13\n   |\n29 |         d = fibfib[i\
    \ + 1] + fibfib[i + 2];\n   |             ^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[isize]`\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpno45zr3o.rs:29:29\n   |\n29 |         d = fibfib[i\
    \ + 1] + fibfib[i + 2];\n   |                         "
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib = vec![0;\
    \ n - 1];\n    fib.push(fibfib(0) + fibfib(1));\n    for _i in 2..n - 1 {\n  \
    \      fib.push(fibfib(_i) + fibfib(_i + 1) + fibfib(_i + 2));\n    }\n    fib[n\
    \ - 1]\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps1w_ujn1.rs:14:27\n   |\n\
    14 |     let mut fib = vec![0; n - 1];\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n14 |     let mut fib = vec![0;\
    \ (n - 1).try_into().unwrap()];\n   |                           +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmps1w_ujn1.rs:19:5\n\
    \   |\n19 |     fib[n - 1]\n   |     ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        0\n\
    \    } else {\n        if n == 0 { 0 } else { 1 }\n    }\n}\n\nfn main() {\n \
    \   let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptb1g6cur.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        return\
    \ 0;\n    }\n    if n == 0 {\n        return 0;\n    }\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpcmvhqknt.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 { return 0;\
    \ }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nfn main() {\n   \
    \ let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 { return 0;\
    \ }\n    if n == 1 { return 1; }\n    if n == 2 { return 1; }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphp98_rwm.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ % 2 == 0 {\n        return fibfib(n - 1) + fibfib(n - 2);\n    }\n    return\
    \ fibfib(n - 3) + fibfib(n - 2) + fibfib(n - 1);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `24`', /tmp/tmp38whs0hi.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    let mut x: isize = 0;\n    if n % 2 == 0 {\n  \
    \      x = fibfib(n-1) + fibfib(n-2);\n    } else {\n        x = fibfib(n-1) +\
    \ fibfib(n-3);\n    }\n    x + fibfib(n-2)\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpps9viyp5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    fibfib({:?}) called with negative number\", n);\n    }\n    if n == 0 {\n    \
    \    return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n ==\
    \ 2 {\n        return 1;\n    }\n    let mut x = 1;\n    let mut y = 1;\n    for\
    \ _ in 0..(n-2) {\n        let tmp = x;\n        x = y;\n        y = tmp + y;\n\
    \    }\n    x\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmp2742qm4x.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a: isize = 0;\n\
    \    let mut b: isize = 0;\n    let mut c: isize = 0;\n    for i in 1..n {\n \
    \       (a, b) = (b, a + b);\n        (c, d) = (d, c + d);\n    }\n    return\
    \ c;\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmps89ktohy.rs:19:13\n\
    \   |\n19 |         (c, d) = (d, c + d);\n   |             ^ help: a local variable\
    \ with a similar name exists: `a`\n\nerror[E0425]: cannot find value `d` in this\
    \ scope\n  --> /tmp/tmps89ktohy.rs:19:19\n   |\n19 |         (c, d) = (d, c +\
    \ d);\n   |                   ^ help: a local variable with a similar name exists:\
    \ `a`\n\nerror[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmps89ktohy.rs:19:26\n\
    \   |\n19 |         (c, d) = (d, c + d);\n   |                          ^ help:\
    \ a local variable with a similar name exists: `a`\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        1\n\
    \    } else {\n        (fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n    }\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbmnoa66l.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    fibfib: n must be >= 0\")\n    }\n\n    if n == 0 {\n        return 0\n    }\n\
    \n    if n == 1 {\n        return 0\n    }\n\n    if n == 2 {\n        return\
    \ 1\n    }\n\n    let fib1 = fibfib(n-1);\n    let fib2 = fibfib(n-2);\n    let\
    \ fib3 = fibfib(n-3);\n    return fib1 + fib2 + fib3;\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n\n    if n == 1 {\n        return 1;\n    }\n\n    if n ==\
    \ 2 {\n        return 2;\n    }\n\n    if n % 2 == 0 {\n        return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n\n    return fibfib(n - 1) + fibfib(n\
    \ - 3);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpb7hj8dxw.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return n;\n    }\n\n    let mut fibfib = [0i32; 4];\n    fibfib[0] =\
    \ 0;\n    fibfib[1] = 1;\n    fibfib[2] = 1;\n\n    for i in 2..n {\n        fibfib[i]\
    \ = fibfib[i - 1] + fibfib[i - 2];\n    }\n\n    return fibfib[n];\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[i32]` cannot be indexed by `isize`\n  --> /tmp/tmptl7rwd3a.rs:24:9\n\
    \   |\n24 |         fibfib[i] = fibfib[i - 1] + fibfib[i - 2];\n   |         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[i32]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `[i32]`\n\nerror[E0277]:\
    \ the type `[i32]` cannot be indexed by `isize`\n  --> /tmp/tmptl7rwd3a.rs:24:21\n\
    \   |\n24 |         fibfib[i] = fibfib[i - 1] + fibfib[i - 2];\n   |         \
    \            ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[i32]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `[i32]`\n\
    \nerror[E0277]: the type `[i32]` cannot be indexed by `isize`\n  --> /tmp/tmptl7rwd3a.rs:24:37\n\
    \   |\n24 |         fibfib[i] = fibfib[i - 1] + fibfib[i - 2];\n   |         \
    \                            ^^^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[i32]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `[i32]`\n\nerror[E0277]: the type `[i32]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmptl7rwd3a.rs:27:12\n   |\n27 |     return fibfib[n];\n   |     \
    \       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[i32]>` is not implemented for `isize`\n   =\
    \ help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `[i32]`\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    \n    let result = fib_fib(n - 1) + fib_fib(n - 2) + fib_fib(n\
    \ - 3);\n    result\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib_fib` in this scope\n  --> /tmp/tmpcrmztg2w.rs:18:18\n\
    \   |\n18 |     let result = fib_fib(n - 1) + fib_fib(n - 2) + fib_fib(n - 3);\n\
    \   |                  ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `fib_fib` in this scope\n  --> /tmp/tmpcrmztg2w.rs:18:35\n   |\n\
    18 |     let result = fib_fib(n - 1) + fib_fib(n - 2) + fib_fib(n - 3);\n   |\
    \                                   ^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `fib_fib` in this scope\n  --> /tmp/tmpcrmztg2w.rs:18:52\n\
    \   |\n18 |     let result = fib_fib(n - 1) + fib_fib(n - 2) + fib_fib(n - 3);\n\
    \   |                                                    ^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let mut f = 0;\n \
    \   for i in (1..=n).rev() {\n        let r = fibfib(n-i);\n        if f == 0\
    \ {\n            f = r;\n        } else {\n            f = r + f;\n        }\n\
    \    }\n    f\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `32`,\n right: `24`', /tmp/tmp5utn9rck.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fn fib(n: isize) -> isize\
    \ {\n        if n < 3 { return n }\n        return fib(n-1) + fib(n-2) + fib(n-3)\n\
    \    }\n\n    fib(n)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp128k44c3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fn fib(n: isize) -> isize\
    \ {\n        if n == 0 {\n            return 0\n        }\n        if n == 1 {\n\
    \            return 1\n        }\n        return fib(n-1) + fib(n-2)\n    }\n\
    \    fib(n)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp4tw9aqev.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n\n    let mut fibfib = [0, 1];\n    let mut i = 2;\n\n   \
    \ while i < n {\n        fibfib.push(fibfib[i - 1] + fibfib[i-2] + fibfib[i-3]);\n\
    \        i += 1;\n    }\n\n    fibfib[n]\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for array `[{integer}; 2]` in\
    \ the current scope\n  --> /tmp/tmpugjki_ow.rs:22:16\n   |\n22 |         fibfib.push(fibfib[i\
    \ - 1] + fibfib[i-2] + fibfib[i-3]);\n   |                ^^^^ method not found\
    \ in `[{integer}; 2]`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpugjki_ow.rs:22:21\n   |\n22 |         fibfib.push(fibfib[i\
    \ - 1] + fibfib[i-2] + fibfib[i-3]);\n   |                     ^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `[{integer}]`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpugjki_ow.rs:22:37\n\
    \   |\n22 |         fibfib.push(fibfib[i - 1] + fibfib[i-2] + fibfib[i-3]);\n\
    \   |                                     ^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpugjki_ow.rs:22:51\n   |\n22 |         fibfib.push(fibfib[i\
    \ - 1] + fibfib[i-2] + fibfib[i-3]);\n   |                                   \
    \                ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpugjki_ow.rs:26:5\n\
    \   |\n26 |     fibfib[n]\n   |     ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help:"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    if n == 3 {\n        return 1;\n    }\n    if n\
    \ == 4 {\n        return 2;\n    }\n    if n == 5 {\n        return 2;\n    }\n\
    \    if n == 6 {\n        return 3;\n    }\n    if n == 7 {\n        return 3;\n\
    \    }\n    if n == 8 {\n        return 4;\n    }\n    if n == 9 {\n        return\
    \ 4;\n    }\n    if n == 10 {\n        return 5;\n    }\n    if n == 11 {\n  \
    \      return 5;\n    }\n    if n == 12 {\n        return 6;\n    }\n    if n\
    \ == 13 {\n        return 6;\n    }\n    if n == 14 {\n        return 7;\n   \
    \ }\n    if n == 15 {\n        return 7;\n    }\n    if n == 16 {\n        return\
    \ 8;\n    }\n    if n == 17 {\n        return 8;\n    }\n    if n == 18 {\n  \
    \      return 9;\n    }\n    if n == 19 {\n        return 9;\n    }\n    if n\
    \ == 20 {\n        return 10;\n    }\n    if n == 21 {\n        return 10;\n \
    \   }\n    if n == 22 {\n        return 11;\n    }\n    if n == 23 {\n       \
    \ return 11;\n    }\n    if n == 24 {\n        return 12;\n    }\n    if n ==\
    \ 25 {\n        return 12;\n    }\n    if n == 26 {\n        return 13;\n    }\n\
    \    if n == 27 {\n        return 13;\n    }\n    if n == 28 {\n        return\
    \ 14;\n    }\n    if n == 29 {\n        return 14;\n    }\n    if n == 30 {\n\
    \        return 15;\n    }\n    if n == 31 {\n        return 15;\n    }\n    if\
    \ n == 32 {\n        return 16;\n    }\n    if n == 33 {\n        return 16;\n\
    \    }\n    if n == 34 {\n        return 17;\n    }\n    if n == 35 {\n      \
    \  return 17;\n    }\n    if n == 36 {\n        return 18;\n    }\n    if n ==\
    \ 37 {\n        return 18;\n    }\n    if n == 38 {\n        return 19;\n    }\n\
    \    if n == 39 {\n        return 19;\n    }\n    if n == 40 {\n        return\
    \ 20;\n    }\n    if n == 41 {\n        return 20;\n    }\n    if n == 42 {\n\
    \        return 21;\n    }\n    if n == 43 {\n        return 21;\n    }\n    if\
    \ n == 44 {\n        return 22;\n    }\n    if n == 45 {\n        return 22;\n\
    \    }\n    if n == 46 {\n        return 23;\n    }\n    if n == 47 {\n      \
    \  return 23;\n    }\n    if n == 48 {\n        return 24;\n    }\n    if n ==\
    \ 49 {\n        return 24;\n    }\n    if n == 5\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  stdout: ''
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmpu_8ghia8.rs:165:1\n    |\n\
    164 |     if n == 5\n    |     -- this `if` expression has a condition, but no\
    \ block\n165 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp_32kyp7z.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: Vec<isize>\
    \ = vec![0usize;1];\n    fib[..n].par_iter().take(n).cloned().for_each(|&n| {\n\
    \        fib.push(n);\n        fib.push(fib[1..].iter().take(3).fold(0, |a,b|\
    \ a + b));\n    });\n    fib[n]\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwj5r41uy.rs:14:36\n   |\n\
    14 |     let mut fib: Vec<isize> = vec![0usize;1];\n   |                     \
    \               ^^^^^^ expected `isize`, found `usize`\n   |\nhelp: change the\
    \ type of the numeric literal from `usize` to `isize`\n   |\n14 |     let mut\
    \ fib: Vec<isize> = vec![0isize;1];\n   |                                    \
    \ ~~~~~\n\nerror[E0277]: the type `[isize]` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpwj5r41uy.rs:15:5\n   |\n15 |     fib[..n].par_iter().take(n).cloned().for_each(|&n|\
    \ {\n   |     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `RangeTo<isize>`\n\
    \   = help: the following other types implement trait `SliceIndex<T>`:\n     \
    \        <RangeTo<usize> as SliceIndex<[T]>>\n             <RangeTo<usize> as\
    \ SliceIndex<str>>\n   = note: required because of the requirements on the impl\
    \ of `Index<RangeTo<isize>>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpwj5r41uy.rs:19:5\n   |\n19 |   \
    \  fib[n]\n   |     ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let\
    \ result = fibfib(n-1) + fibfib(n-2);\n    if n == 3 {\n        return result;\n\
    \    }\n    return result;\n}\n\nfn main() {\n    let candidate = fibfib;\n  \
    \  assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmplrhzvawn.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    let\
    \ (fibfib_n, fibfib2_n) = (fibfib(n-1) + fibfib(n-2), fibfib(n-3) + fibfib(n-4));\n\
    \    return fibfib_n + fibfib2_n;\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
