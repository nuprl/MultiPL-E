name: HumanEval_4_mean_absolute_deviation
language: rust
results:
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| {\n        std::f64::powf(x - std::f64::mean(numbers),\
    \ 2.0).sqrt()\n    }).sum::<f64>() / numbers.len()\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `powf` in module `std::f64`\n  --> /tmp/tmpid43rgcx.rs:10:19\n\
    \   |\n10 |         std::f64::powf(x - std::f64::mean(numbers), 2.0).sqrt()\n\
    \   |                   ^^^^ not found in `std::f64`\n\nerror[E0425]: cannot find\
    \ function `mean` in module `std::f64`\n  --> /tmp/tmpid43rgcx.rs:10:38\n   |\n\
    10 |         std::f64::powf(x - std::f64::mean(numbers), 2.0).sqrt()\n   |   \
    \                                   ^^^^ not found in `std::f64`\n\nerror[E0277]:\
    \ cannot divide `f64` by `usize`\n  --> /tmp/tmpid43rgcx.rs:11:21\n   |\n11 |\
    \     }).sum::<f64>() / numbers.len()\n   |                     ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| |x| *x).sum::<f64>() / numbers.len() as f64\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpakn5faq3.rs:9:29\n\
    \  |\n9 |     numbers.iter().map(|x| |x| *x).sum::<f64>() / numbers.len() as f64\n\
    \  |                             ^ consider giving this closure parameter a type\n\
    \  |\n  = note: type must be known at this point\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // Calculate the mean.\n    let mut mean = numbers[0].clone(); // The\
    \ first number has no mean.\n    for value in numbers.iter() {\n        mean +=\
    \ value;\n    }\n    mean /= numbers.size();\n    // Calculate the deviation.\n\
    \    let mut deviation = 0.0;\n    for value in numbers.iter() {\n        let\
    \ diff = value - mean;\n        deviation += diff * diff;\n    }\n    deviation\
    \ /= numbers.size();\n    // Return the mean absolute deviation.\n    math.f64::sqrt(deviation)\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error: expected one of `(`, `.`, `;`, `?`, `}`, or an operator, found `::`\n\
    \  --> /tmp/tmph0aydkmp.rs:23:13\n   |\n23 |     math.f64::sqrt(deviation)\n \
    \  |             ^^ expected one of `(`, `.`, `;`, `?`, `}`, or an operator\n\n\
    error[E0599]: no method named `size` found for struct `Vec<f64>` in the current\
    \ scope\n  --> /tmp/tmph0aydkmp.rs:14:21\n   |\n14 |     mean /= numbers.size();\n\
    \   |                     ^^^^ help: there is an associated function with a similar\
    \ name: `resize`\n\nerror[E0599]: no method named `size` found for struct `Vec<f64>`\
    \ in the current scope\n  --> /tmp/tmph0aydkmp.rs:21:26\n   |\n21 |     deviation\
    \ /= numbers.size();\n   |                          ^^^^ help: there is an associated\
    \ function with a similar name: `resize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().cloned().map(|x| x - mean_f64(*numbers)).sum::<f64>()\
    \ / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `mean_f64` in this scope\n --> /tmp/tmpw3aigqmw.rs:9:41\n\
    \  |\n9 |     numbers.iter().cloned().map(|x| x - mean_f64(*numbers)).sum::<f64>()\
    \ / numbers.len()\n  |                                         ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpw3aigqmw.rs:9:74\n\
    \  |\n9 |     numbers.iter().cloned().map(|x| x - mean_f64(*numbers)).sum::<f64>()\
    \ / numbers.len()\n  |                                                       \
    \                   ^ no implementation for `f64 / usize`\n  |\n  = help: the\
    \ trait `Div<usize>` is not implemented for `f64`\n  = help: the following other\
    \ types implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n     \
    \       <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n         \
    \   <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n            <&'a\
    \ i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize as\
    \ Div<isize>>\n          and 54 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|x| std::f64::consts::ABS(x))\n        .sum::<f64>()\
    \ / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function, tuple struct or tuple variant `ABS`\
    \ in module `std::f64::consts`\n  --> /tmp/tmpa9il42pb.rs:10:36\n   |\n10 |  \
    \       .map(|x| std::f64::consts::ABS(x))\n   |                             \
    \       ^^^ not found in `std::f64::consts`\n\nerror[E0277]: cannot divide `f64`\
    \ by `usize`\n  --> /tmp/tmpa9il42pb.rs:11:23\n   |\n11 |         .sum::<f64>()\
    \ / numbers.len()\n   |                       ^ no implementation for `f64 / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mad_sum: f64 = 0.0;\n    for (i, val) in numbers.iter().enumerate()\
    \ {\n        mad_sum += f64::abs(val - i as f64);\n    }\n    mad_sum / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp29c7724a.rs:13:13\n\
    \   |\n13 |     mad_sum / numbers.len()\n   |             ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean_abs = f64::MAX;\n    for i in numbers {\n        mean_abs\
    \ = std::f64::max(i, mean_abs.abs());\n    }\n    mean_abs / numbers.len()\n}\n\
    \nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in module `std::f64`\n   --> /tmp/tmp4u9zd92q.rs:11:30\n\
    \    |\n11  |         mean_abs = std::f64::max(i, mean_abs.abs());\n    |    \
    \                          ^^^\n    |\nhelp: a constant with a similar name exists\n\
    \    |\n11  |         mean_abs = std::f64::MAX(i, mean_abs.abs());\n    |    \
    \                          ~~~\nhelp: consider importing this function\n    |\n\
    1   | use std::cmp::max;\n    |\nhelp: if you import `max`, refer to it directly\n\
    \    |\n11  -         mean_abs = std::f64::max(i, mean_abs.abs());\n11  +    \
    \     mean_abs = max(i, mean_abs.abs());\n    | \n\nerror[E0277]: cannot divide\
    \ `f64` by `usize`\n  --> /tmp/tmp4u9zd92q.rs:13:14\n   |\n13 |     mean_abs /\
    \ numbers.len()\n   |              ^ no implementation for `f64 / usize`\n   |\n\
    \   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the\
    \ following other types implement trait `Div<Rhs>`:\n             <&'a f32 as\
    \ Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n\
    \             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n    \
    \         <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n          \
    \   <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0;\n    for n in numbers {\n        mean += n;\n   \
    \ }\n    mean / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpsx7fjv2e.rs:13:10\n\
    \   |\n13 |     mean / numbers.len()\n   |          ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0_;\n    for n in numbers {\n        mean += n;\n  \
    \  }\n    mean / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpx44j50lk.rs:13:10\n\
    \   |\n13 |     mean / numbers.len()\n   |          ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut average = 0.0f64;\n    for number in numbers {\n        average\
    \ += number;\n    }\n    average / numbers as f64\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0605]: non-primitive cast: `Vec<f64>` as `f64`\n  --> /tmp/tmpi_s9rpal.rs:13:15\n\
    \   |\n13 |     average / numbers as f64\n   |               ^^^^^^^^^^^^^^ an\
    \ `as` expression can only be used to convert between primitive types or to coerce\
    \ to a specific trait object\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0605`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    if numbers.is_empty() {\n        return 0.0\n    }\n\n    let mut sum\
    \ = 0.0;\n    for n in numbers {\n        sum += n;\n    }\n\n    numbers.iter().map(|x|\
    \ x - sum).sum::<f64>() / numbers.len()\n}\n\nfn main() {\n    let candidate =\
    \ mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmphfl7kic5.rs:18:50\n\
    \   |\n18 |     numbers.iter().map(|x| x - sum).sum::<f64>() / numbers.len()\n\
    \   |                                                  ^ no implementation for\
    \ `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n  \
    \           <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n      \
    \       <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n        \
    \     <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n            \
    \ <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // Calculate the mean of the numbers:\n    let mut mean: f64 = numbers.iter().sum::<f64>()\
    \ / numbers.len();\n    // Calculate the variance of the numbers:\n    let mut\
    \ variance = numbers.iter().map(|x| {\n        x - mean\n    }).sum::<f64>() /\
    \ numbers.len();\n    // Calculate the standard deviation:\n    variance / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpt_oj3f32.rs:10:53\n\
    \   |\n10 |     let mut mean: f64 = numbers.iter().sum::<f64>() / numbers.len();\n\
    \   |                                                     ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpt_oj3f32.rs:14:21\n\
    \   |\n14 |     }).sum::<f64>() / numbers.len();\n   |                     ^ no\
    \ implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is\
    \ not implemented for `f64`\n   = help: the following other types implement trait\
    \ `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n\
    \             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n  \
    \           <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n      \
    \       <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n        \
    \   and 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mean = numbers.iter().fold(0, |sum, value| sum + value) as f64;\n\
    \    numbers.iter().map(|x| x - mean).sum() / numbers.len()\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&f64` to `{integer}`\n --> /tmp/tmp6oz_zl_8.rs:9:56\n\
    \  |\n9 |     let mean = numbers.iter().fold(0, |sum, value| sum + value) as f64;\n\
    \  |                                                        ^ no implementation\
    \ for `{integer} + &f64`\n  |\n  = help: the trait `Add<&f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `Add<Rhs>`:\n\
    \            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n      \
    \      <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n          \
    \  <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a\
    \ i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().fold(0.0, |sum, num| sum + num) as f64;\n\
    \    numbers.iter().fold(0.0, |sum, num| sum + f64::abs(num - mean)).sqrt()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.7320508075688772`,\n right: `0.5`', /tmp/tmpksh0627h.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    assert!(numbers.len() > 0);\n    let mean = numbers.iter().sum::<f64>()\
    \ / numbers.len();\n    numbers\n        .iter()\n        .zip(numbers.iter().skip(1).take(numbers.len()\
    \ - 1))\n        .map(|(_, (left, right))| f64::abs(right - left))\n        .sum()\n\
    \        / numbers.len()\n        - mean\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp1ocej7l8.rs:10:44\n\
    \   |\n10 |     let mean = numbers.iter().sum::<f64>() / numbers.len();\n   |\
    \                                            ^ no implementation for `f64 / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1ocej7l8.rs:14:19\n   |\n14 |         .map(|(_, (left,\
    \ right))| f64::abs(right - left))\n   |                   ^^^^^^^^^^^^^- expected\
    \ due to this\n   |                   |\n   |                   expected `f64`,\
    \ found tuple\n   |\n   = note: expected type `f64`\n             found tuple\
    \ `(_, _)`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|x| f64::abs(x - numbers.iter().mean()))\n\
    \        .sum()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `mean` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpb3xcnjje.rs:10:46\n   |\n10 |         .map(|x|\
    \ f64::abs(x - numbers.iter().mean()))\n   |                                 \
    \             ^^^^ method not found in `std::slice::Iter<'_, f64>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut total = 0.0; // Total deviation from the mean\n    for n in numbers\
    \ {\n        total += n - numbers.iter().sum::<f64>().unwrap();\n    }\n    total\
    \ / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpg4ia7jrb.rs:11:50\n   |\n11 |         total += n - numbers.iter().sum::<f64>().unwrap();\n\
    \   |                                                  ^^^^^^ method not found\
    \ in `f64`\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpg4ia7jrb.rs:13:11\n\
    \   |\n13 |     total / numbers.len()\n   |           ^ no implementation for\
    \ `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n  \
    \           <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n      \
    \       <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n        \
    \     <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n            \
    \ <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    assert!(numbers.len() == 1, \"The input data length should be 1.\")\n\
    \    let mut mean = f64::from(numbers.iter().next().unwrap());\n    for i in 1..numbers.len()\
    \ {\n        mean += f64::from(numbers[i] - mean);\n    }\n    mean\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpqllf4twv.rs:9:70\n\
    \   |\n9  |     assert!(numbers.len() == 1, \"The input data length should be\
    \ 1.\")\n   |                                                                \
    \      ^ help: add `;` here\n10 |     let mut mean = f64::from(numbers.iter().next().unwrap());\n\
    \   |     --- unexpected token\n\nerror[E0277]: the trait bound `f64: From<&f64>`\
    \ is not satisfied\n  --> /tmp/tmpqllf4twv.rs:10:30\n   |\n10 |     let mut mean\
    \ = f64::from(numbers.iter().next().unwrap());\n   |                    ---------\
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an implementor of trait `From<&f64>`\n\
    \   |                    |\n   |                    required by a bound introduced\
    \ by this call\n   |\nhelp: consider borrowing here\n   |\n10 |     let mut mean\
    \ = f64::from(&numbers.iter().next().unwrap());\n   |                        \
    \      +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|x| x.abs().mean())\n        .fold(0.0,\
    \ |sum, x| sum + x)\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `mean` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpy_0j6i0z.rs:10:26\n   |\n10 |         .map(|x| x.abs().mean())\n\
    \   |                          ^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    let mut sum: f64 = 0.0;\n    for n in numbers\
    \ {\n        mean += n;\n        sum += n * n;\n    }\n    mean /= numbers.len()\
    \ as f64;\n    sum / numbers.len() as f64 - mean\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmpw3bhopnm.rs:15:13\n\
    \    |\n8   | fn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n    |  \
    \                          ------- move occurs because `numbers` has type `Vec<f64>`,\
    \ which does not implement the `Copy` trait\n...\n11  |     for n in numbers {\n\
    \    |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n15  |     mean /= numbers.len() as f64;\n    |             ^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `numbers`\nhelp: consider iterating over a\
    \ slice of the `Vec<f64>`'s content to avoid moving into the `for` loop\n    |\n\
    11  |     for n in &numbers {\n    |              +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut abs_sum = 0.0;\n    let mut squared_sum = 0.0;\n\n    for number\
    \ in numbers {\n        abs_sum += f64::abs(number);\n        squared_sum += f64::pow(*number,\
    \ 2.0);\n    }\n\n    f64::sqrt(squared_sum / numbers.len())\n        - abs_sum\
    \ / f64::sqrt(numbers.len())\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `pow` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmposxqi1c5.rs:14:29\n   |\n14 |    \
    \     squared_sum += f64::pow(*number, 2.0);\n   |                           \
    \  ^^^\n   |                             |\n   |                             function\
    \ or associated item not found in `f64`\n   |                             help:\
    \ there is an associated function with a similar name: `powf`\n\nerror[E0614]:\
    \ type `f64` cannot be dereferenced\n  --> /tmp/tmposxqi1c5.rs:14:33\n   |\n14\
    \ |         squared_sum += f64::pow(*number, 2.0);\n   |                     \
    \            ^^^^^^^\n\nerror[E0277]: cannot divide `{float}` by `usize`\n  -->\
    \ /tmp/tmposxqi1c5.rs:17:27\n   |\n17 |     f64::sqrt(squared_sum / numbers.len())\n\
    \   |                           ^ no implementation for `{float} / usize`\n  \
    \ |\n   = help: the trait `Div<usize>` is not implemented for `{float}`\n   =\
    \ help: the following other types implement trait `Div<Rhs>`:\n             <&'a\
    \ f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128\
    \ as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as\
    \ Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmposxqi1c5.rs:18:31\n   |\n18 |         - abs_sum\
    \ / f64::sqrt(numbers.len())\n   |                               ^^^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n18 |         - abs_sum / f64::sqrt(numbers.len() as f64)\n   |        \
    \                                     ++++++\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0599, E0614.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| f64::abs(x - f64::mean(*numbers.iter())).sum()).sum()\
    \ / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `mean` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpruuwd9tr.rs:9:46\n  |\n9 |     numbers.iter().map(|x|\
    \ f64::abs(x - f64::mean(*numbers.iter())).sum()).sum() / numbers.len()\n  | \
    \                                             ^^^^ function or associated item\
    \ not found in `f64`\n\nerror[E0614]: type `std::slice::Iter<'_, f64>` cannot\
    \ be dereferenced\n --> /tmp/tmpruuwd9tr.rs:9:51\n  |\n9 |     numbers.iter().map(|x|\
    \ f64::abs(x - f64::mean(*numbers.iter())).sum()).sum() / numbers.len()\n  | \
    \                                                  ^^^^^^^^^^^^^^^\n\nerror[E0599]:\
    \ `f64` is not an iterator\n --> /tmp/tmpruuwd9tr.rs:9:69\n  |\n9 |     numbers.iter().map(|x|\
    \ f64::abs(x - f64::mean(*numbers.iter())).sum()).sum() / numbers.len()\n  | \
    \                                                                    ^^^ `f64`\
    \ is not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `f64: Iterator`\n          which is required by `&mut f64: Iterator`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0614.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = f64::NINFINITY;\n    for number in numbers {\n        sum\
    \ += f64::from(number);\n    }\n    sum / f64::from(numbers.len())\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no associated item named `NINFINITY` found for type `f64`\
    \ in the current scope\n --> /tmp/tmpcbx__jjh.rs:9:24\n  |\n9 |     let mut sum\
    \ = f64::NINFINITY;\n  |                        ^^^^^^^^^\n  |               \
    \         |\n  |                        associated item not found in `f64`\n \
    \ |                        help: there is an associated constant with a similar\
    \ name: `INFINITY`\n\nerror[E0277]: the trait bound `f64: From<usize>` is not\
    \ satisfied\n  --> /tmp/tmpcbx__jjh.rs:13:11\n   |\n13 |     sum / f64::from(numbers.len())\n\
    \   |           ^^^^^^^^^ the trait `From<usize>` is not implemented for `f64`\n\
    \   |\n   = help: the following other types implement trait `From<T>`:\n     \
    \        <f32 as From<i16>>\n             <f32 as From<i8>>\n             <f32\
    \ as From<u16>>\n             <f32 as From<u8>>\n             <f64 as From<f32>>\n\
    \             <f64 as From<i16>>\n             <f64 as From<i32>>\n          \
    \   <f64 as From<i8>>\n           and 67 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .map(|x| f64::abs(x - f64::mean(&numbers)))\n\
    \        .sum()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `mean` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpjp006ybv.rs:11:36\n   |\n11 |    \
    \     .map(|x| f64::abs(x - f64::mean(&numbers)))\n   |                      \
    \              ^^^^ function or associated item not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    let\
    \ mut dev = 0.0f64;\n    for n in numbers {\n        let delta = n - mean;\n \
    \       dev += delta * delta;\n        mean += n;\n    }\n    dev / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpkmzu8gu_.rs:9:48\n\
    \  |\n9 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n  |\
    \                                                ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror[E0277]: cannot\
    \ divide `f64` by `usize`\n  --> /tmp/tmpkmzu8gu_.rs:16:9\n   |\n16 |     dev\
    \ / numbers.len()\n   |         ^ no implementation for `f64 / usize`\n   |\n\
    \   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the\
    \ following other types implement trait `Div<Rhs>`:\n             <&'a f32 as\
    \ Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n\
    \             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n    \
    \         <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n          \
    \   <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mad = 0.0\n    for x in numbers {\n        mad = mad\n      \
    \      .checked_add(\n                x.checked_sub(*numbers.iter().filter(|n|\
    \ *n == x).collect::<Vec<_>>().sum()).unwrap(),\n            )\n            .unwrap();\n\
    \    }\n    mad.sqrt()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpzwuqqq70.rs:9:22\n\
    \   |\n9  |     let mut mad = 0.0\n   |                      ^ help: add `;` here\n\
    10 |     for x in numbers {\n   |     --- unexpected token\n\nerror[E0689]: can't\
    \ call method `checked_add` on ambiguous numeric type `{float}`\n  --> /tmp/tmpzwuqqq70.rs:12:14\n\
    \   |\n12 |             .checked_add(\n   |              ^^^^^^^^^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `f32`\n   |\n9  |     let mut\
    \ mad: f32 = 0.0\n   |         ~~~~~~~~~~~~\n\nerror[E0599]: no method named `checked_sub`\
    \ found for type `f64` in the current scope\n  --> /tmp/tmpzwuqqq70.rs:13:19\n\
    \   |\n13 |                 x.checked_sub(*numbers.iter().filter(|n| *n == x).collect::<Vec<_>>().sum()).unwrap(),\n\
    \   |                   ^^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]:\
    \ can't compare `&f64` with `f64`\n  --> /tmp/tmpzwuqqq70.rs:13:61\n   |\n13 |\
    \                 x.checked_sub(*numbers.iter().filter(|n| *n == x).collect::<Vec<_>>().sum()).unwrap(),\n\
    \   |                                                             ^^ no implementation\
    \ for `&f64 == f64`\n   |\n   = help: the trait `PartialEq<f64>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0599]: `Vec<&f64>` is not an iterator\n   --> /tmp/tmpzwuqqq70.rs:13:87\n\
    \    |\n13  |                   x.checked_sub(*numbers.iter().filter(|n| *n ==\
    \ x).collect::<Vec<_>>().sum()).unwrap(),\n    |                             \
    \                                                            ^^^ `Vec<&f64>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<&f64>: Iterator`\n            which is required by `&mut Vec<&f64>:\
    \ Iterator`\n            `[&f64]: Iterator`\n            which is required by\
    \ `&mut [&f64]: Iterator`\n\nerror[E0689]: can't call method `sqrt` on ambiguous\
    \ numeric typ"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mad: f64 = std::f64::INFINITY;\n    for n in numbers {\n    \
    \    mad = mad + (n - std::f64::from(mean(n)));\n    }\n    mad\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `from` in module `std::f64`\n  --> /tmp/tmpxwfhlawa.rs:11:36\n\
    \   |\n11 |         mad = mad + (n - std::f64::from(mean(n)));\n   |         \
    \                           ^^^^ not found in `std::f64`\n\nerror[E0425]: cannot\
    \ find function `mean` in this scope\n  --> /tmp/tmpxwfhlawa.rs:11:41\n   |\n\
    11 |         mad = mad + (n - std::f64::from(mean(n)));\n   |                \
    \                         ^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| f64::abs(x - x.mean())).sum() / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `mean` found for reference `&f64` in the\
    \ current scope\n --> /tmp/tmpt15o_2n4.rs:9:43\n  |\n9 |     numbers.iter().map(|x|\
    \ f64::abs(x - x.mean())).sum() / numbers.len()\n  |                         \
    \                  ^^^^ method not found in `&f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // TODO: Remove this once the `f64::mean()` function becomes stable.\n\
    \    let mean = numbers.iter().sum() / numbers.len();\n    numbers.iter().map(|x|\
    \ x - mean).mean()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `mean` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmpjjlpc577.rs:11:38\n   |\n11 |     numbers.iter().map(|x|\
    \ x - mean).mean()\n   |                                      ^^^^ method not\
    \ found in `Map<std::slice::Iter<'_, f64>, [closure@/tmp/tmpjjlpc577.rs:11:24:\
    \ 11:36]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut made_number = 0.0;\n    for n in numbers {\n        made_number\
    \ += n;\n    }\n    made_number / numbers.len()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpj__zwogn.rs:13:17\n\
    \   |\n13 |     made_number / numbers.len()\n   |                 ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut squared_differences = vec![0.0; numbers.len()];\n    for &number\
    \ in numbers {\n        squared_differences.iter_mut().for_each(|&x| { x += (number\
    \ - x) ** 2; });\n    }\n    squared_differences.iter().sum::<f64>() / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgklhm6uy.rs:10:9\n   |\n\
    10 |     for &number in numbers {\n   |         ^^^^^^^    ------- this expression\
    \ has type `Option<f64>`\n   |         |\n   |         expected `f64`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `number`\n  \
    \ |\n   = note:   expected type `f64`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgklhm6uy.rs:11:50\n   |\n11 |         squared_differences.iter_mut().for_each(|&x|\
    \ { x += (number - x) ** 2; });\n   |                                        \
    \          ^--\n   |                                                  ||\n   |\
    \                                                  |expected due to this\n   |\
    \                                                  types differ in mutability\n\
    \   |                                                  help: did you mean `x`:\
    \ `&&mut {float}`\n   |\n   = note: expected mutable reference `&mut {float}`\n\
    \                      found reference `&_`\n\nerror[E0614]: type `{integer}`\
    \ cannot be dereferenced\n  --> /tmp/tmpgklhm6uy.rs:11:75\n   |\n11 |        \
    \ squared_differences.iter_mut().for_each(|&x| { x += (number - x) ** 2; });\n\
    \   |                                                                        \
    \   ^^^\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpgklhm6uy.rs:13:45\n\
    \   |\n13 |     squared_differences.iter().sum::<f64>() / numbers.len()\n   |\
    \                                             ^ no implementation for `f64 / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0614.\nFor m"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().fold(0.0, |acc, x| acc + f64::abs(x - f64::mean(&numbers)))\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `mean` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp_vr6ecns.rs:9:63\n  |\n9 |     numbers.iter().fold(0.0,\
    \ |acc, x| acc + f64::abs(x - f64::mean(&numbers)))\n  |                     \
    \                                          ^^^^ function or associated item not\
    \ found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.;\n    for n in numbers.iter() {\n        mean += n;\n\
    \    }\n    let mean = mean / numbers.len();\n    let mut mad = 0.;\n    for n\
    \ in numbers.iter() {\n        mad += (n-mean).abs();\n    }\n    mad/m\n}\n\n\
    fn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `m` in this scope\n  --> /tmp/tmpa2rwg39t.rs:18:9\n\
    \   |\n18 |     mad/m\n   |         ^ not found in this scope\n\nerror[E0277]:\
    \ cannot divide `f64` by `usize`\n  --> /tmp/tmpa2rwg39t.rs:13:21\n   |\n13 |\
    \     let mean = mean / numbers.len();\n   |                     ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean_of_numbers = 0.0;\n    for number in numbers {\n       \
    \ mean_of_numbers += number;\n    }\n    math.f64::sqrt(\n        mean_of_numbers\
    \ as f64 - numbers.sum::<f64>() / numbers.size::<f64>() as f64\n    ) as f64\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `(`, `)`, `+`, `,`, `::`, or `<`, found keyword\
    \ `as`\n  --> /tmp/tmpzi71j8xx.rs:14:25\n   |\n14 |         mean_of_numbers as\
    \ f64 - numbers.sum::<f64>() / numbers.size::<f64>() as f64\n   |            \
    \             ^^ expected one of 7 possible tokens\n\nerror: expected one of `(`,\
    \ `.`, `;`, `?`, `}`, or an operator, found `::`\n  --> /tmp/tmpzi71j8xx.rs:13:13\n\
    \   |\n13 |     math.f64::sqrt(\n   |             ^^ expected one of `(`, `.`,\
    \ `;`, `?`, `}`, or an operator\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    for n in numbers {\n        mean += n;\n\
    \    }\n    mean /= numbers.len();\n\n    let mut mad: f64 = 0.0;\n    for n in\
    \ numbers {\n        mad += std::fabs(n - mean);\n    }\n    mad /= numbers.len();\n\
    \    mad\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fabs` in crate `std`\n  --> /tmp/tmp5wmoh5cf.rs:17:21\n\
    \   |\n17 |         mad += std::fabs(n - mean);\n   |                     ^^^^\
    \ not found in `std`\n\nerror[E0277]: cannot divide-assign `f64` by `usize`\n\
    \  --> /tmp/tmp5wmoh5cf.rs:13:10\n   |\n13 |     mean /= numbers.len();\n   |\
    \          ^^ no implementation for `f64 /= usize`\n   |\n   = help: the trait\
    \ `DivAssign<usize>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `DivAssign<Rhs>`:\n             <f32 as DivAssign<&f32>>\n\
    \             <f32 as DivAssign>\n             <f64 as DivAssign<&f64>>\n    \
    \         <f64 as DivAssign>\n             <i128 as DivAssign<&i128>>\n      \
    \       <i128 as DivAssign>\n             <i16 as DivAssign<&i16>>\n         \
    \    <i16 as DivAssign>\n           and 20 others\n\nerror[E0277]: cannot divide-assign\
    \ `f64` by `usize`\n  --> /tmp/tmp5wmoh5cf.rs:19:9\n   |\n19 |     mad /= numbers.len();\n\
    \   |         ^^ no implementation for `f64 /= usize`\n   |\n   = help: the trait\
    \ `DivAssign<usize>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `DivAssign<Rhs>`:\n             <f32 as DivAssign<&f32>>\n\
    \             <f32 as DivAssign>\n             <f64 as DivAssign<&f64>>\n    \
    \         <f64 as DivAssign>\n             <i128 as DivAssign<&i128>>\n      \
    \       <i128 as DivAssign>\n             <i16 as DivAssign<&i16>>\n         \
    \    <i16 as DivAssign>\n           and 20 others\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0;\n    for x in numbers {\n        sum += x;\n    }\n\
    \    let mut mean = sum / numbers.size();\n\n    for x in numbers {\n        let\
    \ diff = x - mean;\n        mean += diff;\n    }\n    mean\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<f64>` in the\
    \ current scope\n  --> /tmp/tmpfyink_7w.rs:13:34\n   |\n13 |     let mut mean\
    \ = sum / numbers.size();\n   |                                  ^^^^ help: there\
    \ is an associated function with a similar name: `resize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut avg = numbers.iter().fold(0.0, |sum, x| sum + x);\n    (numbers.len()\
    \ as f64).sqrt() / std::f64::from(numbers.len() as f64 - 1).powi(2.0) - avg\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `from` in module `std::f64`\n  --> /tmp/tmpx_7ixs75.rs:10:47\n\
    \   |\n10 |     (numbers.len() as f64).sqrt() / std::f64::from(numbers.len() as\
    \ f64 - 1).powi(2.0) - avg\n   |                                             \
    \  ^^^^ not found in `std::f64`\n\nerror[E0277]: cannot subtract `{integer}` from\
    \ `f64`\n  --> /tmp/tmpx_7ixs75.rs:10:73\n   |\n10 |     (numbers.len() as f64).sqrt()\
    \ / std::f64::from(numbers.len() as f64 - 1).powi(2.0) - avg\n   |           \
    \                                                              ^ no implementation\
    \ for `f64 - {integer}`\n   |\n   = help: the trait `Sub<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n10 |     (numbers.len() as f64).sqrt() / std::f64::from(numbers.len()\
    \ as f64 - 1.0).powi(2.0) - avg\n   |                                        \
    \                                    ++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| x.abs()).mean() as f64\n}\n\nfn main() {\n   \
    \ let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `mean` found for struct `Map` in the current\
    \ scope\n --> /tmp/tmpby4p5qgl.rs:9:37\n  |\n9 |     numbers.iter().map(|x| x.abs()).mean()\
    \ as f64\n  |                                     ^^^^ method not found in `Map<std::slice::Iter<'_,\
    \ f64>, [closure@/tmp/tmpby4p5qgl.rs:9:24: 9:35]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.size();\n    let\
    \ mut mad: f64 = 0.0;\n    for i in numbers.iter().rev() {\n        mad = std::f64::consts::FMA\
    \ + (i - mean) * (i - mean);\n        mean = i;\n    }\n    mad\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `FMA` in module `std::f64::consts`\n  -->\
    \ /tmp/tmpoqeqncy4.rs:12:33\n   |\n12 |         mad = std::f64::consts::FMA +\
    \ (i - mean) * (i - mean);\n   |                                 ^^^ not found\
    \ in `std::f64::consts`\n\nerror[E0599]: no method named `size` found for struct\
    \ `Vec<f64>` in the current scope\n --> /tmp/tmpoqeqncy4.rs:9:58\n  |\n9 |   \
    \  let mut mean = numbers.iter().sum::<f64>() / numbers.size();\n  |         \
    \                                                 ^^^^ help: there is an associated\
    \ function with a similar name: `resize`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpoqeqncy4.rs:13:16\n   |\n9  |     let mut mean = numbers.iter().sum::<f64>()\
    \ / numbers.size();\n   |                    --------------------------------------------\
    \ expected due to this value\n...\n13 |         mean = i;\n   |              \
    \  ^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n13 |         mean = *i;\n   |                +\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut total_sum = 0.0;\n    for n in numbers {\n        total_sum +=\
    \ f64::abs(n - numbers.sum::<f64>() / numbers.length());\n    }\n    total_sum\
    \ / numbers.length()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmpjvyoay2j.rs:11:43\n\
    \    |\n11  |           total_sum += f64::abs(n - numbers.sum::<f64>() / numbers.length());\n\
    \    |                                             ^^^ `Vec<f64>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n\
    \            `[f64]: Iterator`\n            which is required by `&mut [f64]:\
    \ Iterator`\n\nerror[E0599]: no method named `length` found for struct `Vec<f64>`\
    \ in the current scope\n  --> /tmp/tmpjvyoay2j.rs:11:66\n   |\n11 |         total_sum\
    \ += f64::abs(n - numbers.sum::<f64>() / numbers.length());\n   |            \
    \                                                      ^^^^^^ help: there is an\
    \ associated function with a similar name: `len`\n\nerror[E0599]: no method named\
    \ `length` found for struct `Vec<f64>` in the current scope\n  --> /tmp/tmpjvyoay2j.rs:13:25\n\
    \   |\n13 |     total_sum / numbers.length()\n   |                         ^^^^^^\
    \ help: there is an associated function with a similar name: `len`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().fold(0.0f64, |sum, number| sum + f64::from(number)).map(|x|\
    \ f64::abs(x - f64::mean(x)).unwrap()).mean()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: From<&f64>` is not satisfied\n -->\
    \ /tmp/tmp2ub1o5gw.rs:9:63\n  |\n9 |     numbers.iter().fold(0.0f64, |sum, number|\
    \ sum + f64::from(number)).map(|x| f64::abs(x - f64::mean(x)).unwrap()).mean()\n\
    \  |                                                     --------- ^^^^^^ expected\
    \ an implementor of trait `From<&f64>`\n  |                                  \
    \                   |\n  |                                                   \
    \  required by a bound introduced by this call\n  |\nhelp: consider borrowing\
    \ here\n  |\n9 |     numbers.iter().fold(0.0f64, |sum, number| sum + f64::from(&number)).map(|x|\
    \ f64::abs(x - f64::mean(x)).unwrap()).mean()\n  |                           \
    \                                    +\n\nerror[E0599]: `f64` is not an iterator\n\
    \ --> /tmp/tmp2ub1o5gw.rs:9:72\n  |\n9 |     numbers.iter().fold(0.0f64, |sum,\
    \ number| sum + f64::from(number)).map(|x| f64::abs(x - f64::mean(x)).unwrap()).mean()\n\
    \  |                                                                        ^^^\
    \ `f64` is not an iterator\n  |\n  = note: the following trait bounds were not\
    \ satisfied:\n          `f64: Iterator`\n          which is required by `&mut\
    \ f64: Iterator`\n\nerror[E0599]: no function or associated item named `mean`\
    \ found for type `f64` in the current scope\n --> /tmp/tmp2ub1o5gw.rs:9:98\n \
    \ |\n9 |     numbers.iter().fold(0.0f64, |sum, number| sum + f64::from(number)).map(|x|\
    \ f64::abs(x - f64::mean(x)).unwrap()).mean()\n  |                           \
    \                                                                       ^^^^ function\
    \ or associated item not found in `f64`\n\nerror[E0599]: no method named `unwrap`\
    \ found for type `f64` in the current scope\n --> /tmp/tmp2ub1o5gw.rs:9:107\n\
    \  |\n9 |     numbers.iter().fold(0.0f64, |sum, number| sum + f64::from(number)).map(|x|\
    \ f64::abs(x - f64::mean(x)).unwrap()).mean()\n  |                           \
    \                                                                            \
    \    ^^^^^^ method not found in `f64`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detai"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum();\n    numbers.iter().for_each(|x|\
    \ {\n        let diff = x - mean;\n        mean += diff;\n    });\n    mean\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `0.5`', /tmp/tmpiwn9nqh6.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut deviations: Vec<_> = Vec::new();\n    let mut sum: f64 = 0.0;\n\
    \    for number in numbers.iter() {\n        deviations.push(number-sum);\n  \
    \      sum += number;\n    }\n    deviations.iter().sum::<f64>() / numbers[0..numbers.len()].iter().sum::<f64>()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.6666666666666666`,\n right: `0.5`', /tmp/tmpu7ub97o3.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n\
    \    let mut delta: Vec<f64> = Vec::new();\n    for value in numbers {\n     \
    \   let delta = value - mean;\n        delta = delta.abs();\n        delta = delta.sqrt();\n\
    \        delta.push(delta);\n    }\n    return delta.iter().sum::<f64>() / delta.len();\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpbez2706o.rs:15:15\n   |\n15 |         delta.push(delta);\n\
    \   |               ^^^^ method not found in `f64`\n\nerror[E0277]: cannot divide\
    \ `f64` by `usize`\n  --> /tmp/tmpbez2706o.rs:17:38\n   |\n17 |     return delta.iter().sum::<f64>()\
    \ / delta.len();\n   |                                      ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut avg: f64 = 0.0;\n    let mut sum: f64 = 0.0;\n    for d in numbers\
    \ {\n        sum += d;\n        avg += (d*d);\n    }\n    avg /= sum;\n    avg\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.6666666666666667`,\n right: `0.5`', /tmp/tmpwb8_j9af.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum();\n    numbers.iter().for_each(|n|\
    \ {\n        mean += n * n as f64;\n    });\n    mean\n        .sqrt()\n     \
    \   .powi(2)\n        .expect(\"mean_absolute_deviation expects at least one number\"\
    );\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpfad025gi.rs:13:5\n\
    \   |\n9  |     let mut mean = numbers.iter().sum();\n   |         -------- consider\
    \ giving `mean` a type\n...\n13 |     mean\n   |     ^^^^ cannot infer type\n\
    \   |\n   = note: type must be known at this point\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpfad025gi.rs:8:50\n  |\n8 | fn mean_absolute_deviation(numbers:\
    \ Vec<f64>) -> f64 {\n  |    -----------------------                       ^^^\
    \ expected `f64`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror[E0606]: casting `&f64` as `f64`\
    \ is invalid\n  --> /tmp/tmpfad025gi.rs:11:21\n   |\n11 |         mean += n *\
    \ n as f64;\n   |                     -^^^^^^^\n   |                     |\n \
    \  |                     cannot cast `&f64` as `f64`\n   |                   \
    \  help: dereference the expression: `*n`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0282, E0308, E0606.\nFor\
    \ more information about an error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.size();\n    let\
    \ mut squares = Vec::new();\n\n    for n in numbers {\n        squares.push(n\
    \ - mean);\n        mean += n;\n    }\n\n    let squares_mean = numbers.iter().sum::<f64>()\
    \ / numbers.size();\n    squares.iter().map(|&x| x - (squares_mean as f64)).sum::<f64>()\n\
    \        / (numbers - 1).min(|a, b| a.abs() < b.abs()).unwrap_or(0)\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<f64>` in the\
    \ current scope\n --> /tmp/tmpep52ao8p.rs:9:58\n  |\n9 |     let mut mean = numbers.iter().sum::<f64>()\
    \ / numbers.size();\n  |                                                     \
    \     ^^^^ help: there is an associated function with a similar name: `resize`\n\
    \nerror[E0599]: no method named `size` found for struct `Vec<f64>` in the current\
    \ scope\n  --> /tmp/tmpep52ao8p.rs:17:62\n   |\n17 |     let squares_mean = numbers.iter().sum::<f64>()\
    \ / numbers.size();\n   |                                                    \
    \          ^^^^ help: there is an associated function with a similar name: `resize`\n\
    \nerror[E0369]: cannot subtract `{integer}` from `Vec<f64>`\n  --> /tmp/tmpep52ao8p.rs:19:20\n\
    \   |\n19 |         / (numbers - 1).min(|a, b| a.abs() < b.abs()).unwrap_or(0)\n\
    \   |            ------- ^ - {integer}\n   |            |\n   |            Vec<f64>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0369, E0599.\nFor more information about an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean_number = numbers.iter().sum::<f64>() / numbers.len() as\
    \ f64;\n    let mut sum = 0.0f64;\n    for n in numbers.iter() {\n        sum\
    \ += n.abs();\n    }\n    sum / numbers.len() as f64 - mean_number as f64\n}\n\
    \nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.0`,\n right: `0.5`', /tmp/tmpaoe_t6pz.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut x_mean: f64 = 0.0;\n    for x in numbers {\n        x_mean +=\
    \ x;\n    }\n    x_mean /= numbers.len();\n    let mut madv: f64 = 0.0;\n    for\
    \ x in numbers {\n        madv += (x - x_mean).abs() * x;\n    }\n    advd_helper::madev(x_mean,\
    \ advd_helper::madmax(advd_helper::madmin(madv)))\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `advd_helper`\n\
    \  --> /tmp/tmpbx2uk38h.rs:18:5\n   |\n18 |     advd_helper::madev(x_mean, advd_helper::madmax(advd_helper::madmin(madv)))\n\
    \   |     ^^^^^^^^^^^ use of undeclared crate or module `advd_helper`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `advd_helper`\n  --> /tmp/tmpbx2uk38h.rs:18:32\n\
    \   |\n18 |     advd_helper::madev(x_mean, advd_helper::madmax(advd_helper::madmin(madv)))\n\
    \   |                                ^^^^^^^^^^^ use of undeclared crate or module\
    \ `advd_helper`\n\nerror[E0433]: failed to resolve: use of undeclared crate or\
    \ module `advd_helper`\n  --> /tmp/tmpbx2uk38h.rs:18:52\n   |\n18 |     advd_helper::madev(x_mean,\
    \ advd_helper::madmax(advd_helper::madmin(madv)))\n   |                      \
    \                              ^^^^^^^^^^^ use of undeclared crate or module `advd_helper`\n\
    \nerror[E0277]: cannot divide-assign `f64` by `usize`\n  --> /tmp/tmpbx2uk38h.rs:13:12\n\
    \   |\n13 |     x_mean /= numbers.len();\n   |            ^^ no implementation\
    \ for `f64 /= usize`\n   |\n   = help: the trait `DivAssign<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| {\n        let mut mean = x.clone(); mean += x;\n\
    \        mean.sqrt() / x\n    }).sum()\n}\n\nfn main() {\n    let candidate =\
    \ mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.414213562373095`,\n right: `0.5`', /tmp/tmpale3rhsw.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut average = numbers.iter().sum::<f64>() / numbers.len();\n    let\
    \ mut squared_difference = 0.;\n    for i in numbers {\n        let diff = i -\
    \ average;\n        squared_difference += diff*diff;\n        average = i\n  \
    \  }\n    average\n        .sqrt()\n        .powi(0.5)\n        .mulf(squared_difference)\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmp7zxztf9_.rs:9:51\n\
    \  |\n9 |     let mut average = numbers.iter().sum::<f64>() / numbers.len();\n\
    \  |                                                   ^ no implementation for\
    \ `f64 / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for\
    \ `f64`\n  = help: the following other types implement trait `Div<Rhs>`:\n   \
    \         <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n         \
    \   <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a\
    \ i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a i8 as\
    \ Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp7zxztf9_.rs:18:15\n   |\n18 |  \
    \       .powi(0.5)\n   |               ^^^ expected `i32`, found floating-point\
    \ number\n\nerror[E0599]: no method named `mulf` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmp7zxztf9_.rs:19:10\n   |\n19 |         .mulf(squared_difference)\n\
    \   |          ^^^^ method not found in `f64`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = f64::from(0.0);\n\n    for x in numbers {\n        sum\
    \ += x;\n    }\n\n    let mean = sum / numbers.len();\n    let diffs = numbers.iter().zip(numbers.iter().skip(1)).map(|(&x,\
    \ &y)| y - x).collect::<Vec<_>>();\n\n    let sigma: f64 = diffs.iter().map(|x|\
    \ x.abs()).sum();\n    let mad: f64 = numbers.iter().map(|x| f64::from(x.abs())).sum()\
    \ / sigma;\n\n    mean\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpuayc3wkt.rs:15:20\n\
    \   |\n15 |     let mean = sum / numbers.len();\n   |                    ^ no\
    \ implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is\
    \ not implemented for `f64`\n   = help: the following other types implement trait\
    \ `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n\
    \             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n  \
    \           <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n      \
    \       <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n        \
    \   and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // Sum up all the input numbers and divide by the total number\n    //\
    \ of input numbers to get Mean Absolute Deviation\n    let mut squared_sum: f64\
    \ = 0.0;\n    for number in numbers {\n        squared_sum += number * number;\n\
    \    }\n    let mean = numbers.iter().sum() / numbers.len();\n    (squared_sum\
    \ / numbers.len() - mean).abs()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpq5iwzj8l.rs:16:18\n\
    \   |\n16 |     (squared_sum / numbers.len() - mean).abs()\n   |             \
    \     ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum: f64 = 0.0;\n    for (index, value) in numbers.iter().enumerate()\
    \ {\n        sum += math.abs(value - numbers[index]);\n    }\n    sum / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `math` in this scope\n  --> /tmp/tmp6fakvoce.rs:11:16\n\
    \   |\n11 |         sum += math.abs(value - numbers[index]);\n   |           \
    \     ^^^^ not found in this scope\n\nerror[E0277]: cannot divide `f64` by `usize`\n\
    \  --> /tmp/tmp6fakvoce.rs:13:9\n   |\n13 |     sum / numbers.len()\n   |    \
    \     ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut deviations: Vec<f64> = Vec::new();\n    for x in numbers {\n\
    \        deviations.push((x - mean_number(numbers)) / (f64::sqrt()));\n    }\n\
    \    deviations as f64\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `mean_number` in this scope\n  --> /tmp/tmp_c_ou3yw.rs:11:30\n\
    \   |\n11 |         deviations.push((x - mean_number(numbers)) / (f64::sqrt()));\n\
    \   |                              ^^^^^^^^^^^ not found in this scope\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmp_c_ou3yw.rs:11:55\n\
    \    |\n11  |         deviations.push((x - mean_number(numbers)) / (f64::sqrt()));\n\
    \    |                                                       ^^^^^^^^^--- supplied\
    \ 0 arguments\n    |                                                       |\n\
    \    |                                                       expected 1 argument\n\
    \    |\nnote: associated function defined here\n\nerror[E0605]: non-primitive\
    \ cast: `Vec<f64>` as `f64`\n  --> /tmp/tmp_c_ou3yw.rs:13:5\n   |\n13 |     deviations\
    \ as f64\n   |     ^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert\
    \ between primitive types or to coerce to a specific trait object\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0425,\
    \ E0605.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mean = numbers.iter().sum::<f64>() / numbers.len();\n    let variance\
    \ = numbers.iter().map(|n| n - mean).sum::<f64>() / numbers.len();\n    mean -\
    \ std::f64::from(variance)\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `from` in module `std::f64`\n  --> /tmp/tmp7s2aibc5.rs:11:22\n\
    \   |\n11 |     mean - std::f64::from(variance)\n   |                      ^^^^\
    \ not found in `std::f64`\n\nerror[E0277]: cannot divide `f64` by `usize`\n -->\
    \ /tmp/tmp7s2aibc5.rs:9:44\n  |\n9 |     let mean = numbers.iter().sum::<f64>()\
    \ / numbers.len();\n  |                                            ^ no implementation\
    \ for `f64 / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp7s2aibc5.rs:10:66\n\
    \   |\n10 |     let variance = numbers.iter().map(|n| n - mean).sum::<f64>() /\
    \ numbers.len();\n   |                                                       \
    \           ^ no implementation for `f64 / usize`\n   |\n   = help: the trait\
    \ `Div<usize>` is not implemented for `f64`\n   = help: the following other types\
    \ implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n          \
    \   <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n            \
    \ <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a\
    \ i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize\
    \ as Div<isize>>\n           and 54 others\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|n| f64::abs).sum::<f64>() / numbers.len()\n}\n\n\
    fn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Sum<fn(f64) -> f64 {f64::<impl f64>::abs}>`\
    \ is not satisfied\n    --> /tmp/tmpg635gtor.rs:9:38\n     |\n9    |     numbers.iter().map(|n|\
    \ f64::abs).sum::<f64>() / numbers.len()\n     |                             \
    \         ^^^ the trait `Sum<fn(f64) -> f64 {f64::<impl f64>::abs}>` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Sum<A>`:\n\
    \               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n         \
    \      <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror[E0277]: cannot divide `f64`\
    \ by `usize`\n --> /tmp/tmpg635gtor.rs:9:51\n  |\n9 |     numbers.iter().map(|n|\
    \ f64::abs).sum::<f64>() / numbers.len()\n  |                                \
    \                   ^ no implementation for `f64 / usize`\n  |\n  = help: the\
    \ trait `Div<usize>` is not implemented for `f64`\n  = help: the following other\
    \ types implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n     \
    \       <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n         \
    \   <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n            <&'a\
    \ i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize as\
    \ Div<isize>>\n          and 54 others\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| f64::abs - x).sum() / numbers.len()\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `&f64` from `fn(f64) -> f64 {f64::<impl f64>::abs}`\n\
    \ --> /tmp/tmpt8x_qdq6.rs:9:37\n  |\n9 |     numbers.iter().map(|x| f64::abs -\
    \ x).sum() / numbers.len()\n  |                            -------- ^ - &f64\n\
    \  |                            |\n  |                            fn(f64) -> f64\
    \ {f64::<impl f64>::abs}\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0f64;\n    for number in numbers.iter() {\n        sum\
    \ += number;\n    }\n    sum / numbers.size().sqrt()\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<f64>` in the\
    \ current scope\n  --> /tmp/tmpncqcnhbq.rs:13:19\n   |\n13 |     sum / numbers.size().sqrt()\n\
    \   |                   ^^^^ help: there is an associated function with a similar\
    \ name: `resize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut average = 0;\n    for n in numbers {\n        average += n -\
    \ average;\n    }\n    average / numbers.len()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot subtract `{integer}` from `f64`\n  --> /tmp/tmpq498_52g.rs:11:22\n\
    \   |\n11 |         average += n - average;\n   |                      ^ no implementation\
    \ for `f64 - {integer}`\n   |\n   = help: the trait `Sub<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq498_52g.rs:13:5\n\
    \   |\n8  | fn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n   |     \
    \                                             --- expected `f64` because of return\
    \ type\n...\n13 |     average / numbers.len()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n13 |     (average / numbers.len()) as f64\n   |     +                 \
    \      ++++++++\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    for n in numbers {\n        mean += n;\n\
    \    }\n    mean.powi(2.0).sqrt()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfog6jzat.rs:13:15\n   |\n\
    13 |     mean.powi(2.0).sqrt()\n   |               ^^^ expected `i32`, found floating-point\
    \ number\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| |x| {\n        (x - mean(x))\n            .abs()\n\
    \            .expect(\"mean_absolute_deviation input numbers should not be null\"\
    )\n    }).sum::<f64>() / numbers.size().expect(\"mean_absolute_deviation input\
    \ numbers should not be null\")\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `mean` in this scope\n  --> /tmp/tmpel4ikdsx.rs:10:14\n\
    \   |\n10 |         (x - mean(x))\n   |              ^^^^ not found in this scope\n\
    \nerror[E0599]: no method named `size` found for struct `Vec<f64>` in the current\
    \ scope\n  --> /tmp/tmpel4ikdsx.rs:13:31\n   |\n13 |     }).sum::<f64>() / numbers.size().expect(\"\
    mean_absolute_deviation input numbers should not be null\")\n   |            \
    \                   ^^^^ help: there is an associated function with a similar\
    \ name: `resize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum: f64 = 0.0;\n\n    for n in numbers.iter() {\n        sum\
    \ += n;\n    }\n\n    let mut average = sum / numbers.length;\n\n    for n in\
    \ numbers.iter() {\n        average -= n;\n    }\n\n    average\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `length` on type `Vec<f64>`\n  --> /tmp/tmp6t_408ah.rs:15:37\n\
    \   |\n15 |     let mut average = sum / numbers.length;\n   |                \
    \                     ^^^^^^ unknown field\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0609`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|n| f64::abs(n - f64::mean(&numbers)))\n\
    \        .sum::<f64>()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `mean` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpel5b4f8g.rs:10:36\n   |\n10 |    \
    \     .map(|n| f64::abs(n - f64::mean(&numbers)))\n   |                      \
    \              ^^^^ function or associated item not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // MAD is calculated as mean absolute difference (MAD)\n    // see https://en.wikipedia.org/wiki/Mean_deviation\n\
    \    // https://en.wikipedia.org/wiki/Median_absolute_deviation\n\n    let mut\
    \ mean = 0.0;\n    let mut abs_deviation = 0.0;\n\n    // sum up all numbers in\
    \ numbers\n    for n in numbers {\n        mean += n;\n        abs_deviation +=\
    \ n * n;\n    }\n\n    // calculate MAD\n    let mut mad = mean as f64;\n\n  \
    \  for n in numbers {\n        mad = mad + ((n - mean) as f64) * ((n - mean) as\
    \ f64);\n    }\n\n    mad / (abs_deviation as f64)\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpzcsacq4c.rs:25:14\n\
    \    |\n8   | fn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n    |  \
    \                          ------- move occurs because `numbers` has type `Vec<f64>`,\
    \ which does not implement the `Copy` trait\n...\n17  |     for n in numbers {\n\
    \    |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |     for n in numbers {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `numbers`\nhelp: consider iterating over a slice of the `Vec<f64>`'s\
    \ content to avoid moving into the `for` loop\n    |\n17  |     for n in &numbers\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| x.abs()).sum::<f64>() / numbers.len()\n}\n\nfn\
    \ main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpfltjqmsi.rs:9:50\n\
    \  |\n9 |     numbers.iter().map(|x| x.abs()).sum::<f64>() / numbers.len()\n \
    \ |                                                  ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    for\
    \ n in numbers {\n        let dev = n - mean;\n        mean += dev;\n    }\n \
    \   mean\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmp99vr9rzy.rs:9:48\n\
    \  |\n9 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n  |\
    \                                                ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0;\n    for n in numbers {\n        sum += n;\n    }\n\
    \    let mut square_sum = 0.0;\n    for n in numbers {\n        square_sum +=\
    \ n * n;\n    }\n    let mut mean = sum / numbers.len();\n    return square_sum\
    \ / (numbers.len() * mean as f64);\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpaguzkdzs.rs:17:24\n\
    \   |\n17 |     let mut mean = sum / numbers.len();\n   |                    \
    \    ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot multiply `usize` by `f64`\n  -->\
    \ /tmp/tmpaguzkdzs.rs:18:40\n   |\n18 |     return square_sum / (numbers.len()\
    \ * mean as f64);\n   |                                        ^ no implementation\
    \ for `usize * f64`\n   |\n   = help: the trait `Mul<f64>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .cloned()\n        .filter(|x| x >\
    \ 0.0)\n        .cloned()\n        .map(|x| x.abs())\n        .sum::<f64>() /\
    \ numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpngr05jta.rs:12:25\n   |\n\
    12 |         .filter(|x| x > 0.0)\n   |                         ^^^\n   |    \
    \                     |\n   |                         expected `&f64`, found floating-point\
    \ number\n   |                         help: consider borrowing here: `&0.0`\n\
    \nerror[E0271]: type mismatch resolving `<std::slice::Iter<'_, f64> as Iterator>::Item\
    \ == &&_`\n  --> /tmp/tmpngr05jta.rs:13:10\n   |\n13 |         .cloned()\n   |\
    \          ^^^^^^ expected reference, found `f64`\n   |\n   = note: expected reference\
    \ `&&_`\n              found reference `&f64`\n   = note: required because of\
    \ the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ f64>>`\n   = note: 1 redundant requirement hidden\n   = note: required because\
    \ of the requirements on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_,\
    \ f64>>, [closure@/tmp/tmpngr05jta.rs:12:17: 12:28]>`\n\nerror[E0631]: type mismatch\
    \ in closure arguments\n  --> /tmp/tmpngr05jta.rs:13:10\n   |\n12 |         .filter(|x|\
    \ x > 0.0)\n   |                 ----------- found signature of `for<'r> fn(&'r\
    \ f64) -> _`\n13 |         .cloned()\n   |          ^^^^^^ expected signature\
    \ of `for<'r> fn(&'r &_) -> _`\n   |\n   = note: required because of the requirements\
    \ on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_, f64>>, [closure@/tmp/tmpngr05jta.rs:12:17:\
    \ 12:28]>`\n\nerror[E0599]: the method `map` exists for struct `Cloned<Filter<Cloned<std::slice::Iter<'_,\
    \ f64>>, [closure@/tmp/tmpngr05jta.rs:12:17: 12:28]>>`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmpngr05jta.rs:14:10\n   |\n14 |            .map(|x|\
    \ x.abs())\n   |             ^^^ method cannot be called on `Cloned<Filter<Cloned<std::slice::Iter<'_,\
    \ f64>>, [closure@/tmp/tmpngr05jta.rs:12:17: 12:28]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<Filter<Cloned<std::slice::Iter<'_, f64>>, [closure@/tmp/tmpngr05jta.rs:12:17:\
    \ 12:28]> as Iterator>::Item = &_`\n           which is required by `Cloned<Filter<Clo"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut deviation: Vec<f64> = Vec::new();\n    for n in numbers {\n \
    \       deviation.push((n - numbers.iter().sum::<f64>() / numbers.len()).abs());\n\
    \    }\n    deviation.iter().sum::<f64>() / deviation.len()\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp3u77m8du.rs:11:57\n\
    \   |\n11 |         deviation.push((n - numbers.iter().sum::<f64>() / numbers.len()).abs());\n\
    \   |                                                         ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp3u77m8du.rs:13:35\n\
    \   |\n13 |     deviation.iter().sum::<f64>() / deviation.len()\n   |        \
    \                           ^ no implementation for `f64 / usize`\n   |\n   =\
    \ help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum: f64 = 0.0;\n\n    for n in numbers {\n        sum += n;\n\
    \    }\n\n    let mut mean = sum / numbers.len();\n\n    for n in numbers {\n\
    \        let diff = (n - mean);\n        sum += diff;\n    }\n\n    mean\n}\n\n\
    fn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpvrutknbu.rs:18:20\n\
    \   |\n18 |         let diff = (n - mean);\n   |                    ^        ^\n\
    \   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n18 -         let diff = (n - mean);\n18 +         let diff = n - mean;\n\
    \   | \n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpvrutknbu.rs:15:24\n\
    \   |\n15 |     let mut mean = sum / numbers.len();\n   |                    \
    \    ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // Compute mean\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len()\
    \ as f64;\n    // Compute the deviation from the mean\n    let mut deviation =\
    \ 0.0;\n    for number in numbers {\n        deviation += std::f64::abs(number\
    \ - mean);\n        mean += number;\n    }\n    // Return the mean deviation from\
    \ the mean\n    deviation as f64 / numbers.len() as f64\n}\n\nfn main() {\n  \
    \  let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmp4i14h4zn.rs:14:32\n\
    \   |\n14 |         deviation += std::f64::abs(number - mean);\n   |         \
    \                       ^^^ not found in `std::f64`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .zip(numbers.iter().cloned().collect::<Vec<f64>>())\n\
    \        .map(|(mut x, mut y)| (x - y).abs()).sum::<f64>() / numbers.len()\n}\n\
    \nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpdelbx2u6.rs:12:59\n\
    \   |\n12 |         .map(|(mut x, mut y)| (x - y).abs()).sum::<f64>() / numbers.len()\n\
    \   |                                                           ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0;\n    for i in numbers.iter() {\n        let diff\
    \ = *i - mean;\n        mean += diff * diff;\n    }\n    mean\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `0.5`', /tmp/tmpdasehtr2.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .enumerate()\n        .fold(f64::INFINITY,\
    \ |mut sum, (n, x)| {\n            sum += x * x;\n            sum\n        })\n\
    \        .sqrt()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `inf`,\n right: `0.5`', /tmp/tmpua004cts.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| x.abs().mean()).sum()\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `mean` found for type `f64` in the current\
    \ scope\n --> /tmp/tmpfm12cq56.rs:9:36\n  |\n9 |     numbers.iter().map(|x| x.abs().mean()).sum()\n\
    \  |                                    ^^^^ method not found in `f64`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut delta: f64 = numbers.iter().map(|n| n - numbers.sum()).sum();\n\
    \    delta /= numbers.len();\n    delta\n}\n\nfn main() {\n    let candidate =\
    \ mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmpzzp2effa.rs:9:61\n\
    \    |\n9   |       let mut delta: f64 = numbers.iter().map(|n| n - numbers.sum()).sum();\n\
    \    |                                                               ^^^ `Vec<f64>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>:\
    \ Iterator`\n            `[f64]: Iterator`\n            which is required by `&mut\
    \ [f64]: Iterator`\n\nerror[E0277]: cannot divide-assign `f64` by `usize`\n  -->\
    \ /tmp/tmpzzp2effa.rs:10:11\n   |\n10 |     delta /= numbers.len();\n   |    \
    \       ^^ no implementation for `f64 /= usize`\n   |\n   = help: the trait `DivAssign<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `DivAssign<Rhs>`:\n             <f32 as DivAssign<&f32>>\n           \
    \  <f32 as DivAssign>\n             <f64 as DivAssign<&f64>>\n             <f64\
    \ as DivAssign>\n             <i128 as DivAssign<&i128>>\n             <i128 as\
    \ DivAssign>\n             <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n\
    \           and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| f64::abs(x - numbers.mean())).sum::<f64>() / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `mean` found for struct `Vec<f64>` in the\
    \ current scope\n --> /tmp/tmp6qjq338c.rs:9:49\n  |\n9 |     numbers.iter().map(|x|\
    \ f64::abs(x - numbers.mean())).sum::<f64>() / numbers.len()\n  |            \
    \                                     ^^^^ method not found in `Vec<f64>`\n\n\
    error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmp6qjq338c.rs:9:71\n\
    \  |\n9 |     numbers.iter().map(|x| f64::abs(x - numbers.mean())).sum::<f64>()\
    \ / numbers.len()\n  |                                                       \
    \                ^ no implementation for `f64 / usize`\n  |\n  = help: the trait\
    \ `Div<usize>` is not implemented for `f64`\n  = help: the following other types\
    \ implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n           \
    \ <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n            <&'a\
    \ i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n            <&'a i64 as\
    \ Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n\
    \          and 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut avg: f64 = 0.0;\n    for n in numbers {\n        avg += n;\n\
    \    }\n    avg /= numbers.len();\n    let mad: f64 = std::f64::sqrt((numbers.len()\
    \ * (avg - numbers[0]))) as f64;\n    mad\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sqrt` in module `std::f64`\n  --> /tmp/tmp5v6kh3y2.rs:14:30\n\
    \   |\n14 |     let mad: f64 = std::f64::sqrt((numbers.len() * (avg - numbers[0])))\
    \ as f64;\n   |                              ^^^^ not found in `std::f64`\n\n\
    warning: unnecessary parentheses around function argument\n  --> /tmp/tmp5v6kh3y2.rs:14:35\n\
    \   |\n14 |     let mad: f64 = std::f64::sqrt((numbers.len() * (avg - numbers[0])))\
    \ as f64;\n   |                                   ^                          \
    \        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove\
    \ these parentheses\n   |\n14 -     let mad: f64 = std::f64::sqrt((numbers.len()\
    \ * (avg - numbers[0]))) as f64;\n14 +     let mad: f64 = std::f64::sqrt(numbers.len()\
    \ * (avg - numbers[0])) as f64;\n   | \n\nerror[E0277]: cannot divide-assign `f64`\
    \ by `usize`\n  --> /tmp/tmp5v6kh3y2.rs:13:9\n   |\n13 |     avg /= numbers.len();\n\
    \   |         ^^ no implementation for `f64 /= usize`\n   |\n   = help: the trait\
    \ `DivAssign<usize>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `DivAssign<Rhs>`:\n             <f32 as DivAssign<&f32>>\n\
    \             <f32 as DivAssign>\n             <f64 as DivAssign<&f64>>\n    \
    \         <f64 as DivAssign>\n             <i128 as DivAssign<&i128>>\n      \
    \       <i128 as DivAssign>\n             <i16 as DivAssign<&i16>>\n         \
    \    <i16 as DivAssign>\n           and 20 others\n\nerror[E0277]: cannot multiply\
    \ `usize` by `f64`\n  --> /tmp/tmp5v6kh3y2.rs:14:50\n   |\n14 |     let mad: f64\
    \ = std::f64::sqrt((numbers.len() * (avg - numbers[0]))) as f64;\n   |       \
    \                                           ^ no implementation for `usize * f64`\n\
    \   |\n   = help: the trait `Mul<f64>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n             <&'a f32\
    \ as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as\
    \ Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n\
    \             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n      \
    \      "
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|x| {\n            (x - numbers.iter().sum::<f64>()\
    \ / numbers.len()).abs()\n        })\n        .sum::<f64>()\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpsu766btz.rs:11:46\n\
    \   |\n11 |             (x - numbers.iter().sum::<f64>() / numbers.len()).abs()\n\
    \   |                                              ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .filter(|x| *x != 0.0)\n        .map(|x|\
    \ abs::<f64>(*x))\n        .sum::<f64>() / numbers.len()\n}\n\nfn main() {\n \
    \   let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpti19emo9.rs:12:18\n\
    \   |\n12 |         .map(|x| abs::<f64>(*x))\n   |                  ^^^ not found\
    \ in this scope\n\nerror[E0277]: can't compare `&f64` with `{float}`\n  --> /tmp/tmpti19emo9.rs:11:24\n\
    \   |\n11 |         .filter(|x| *x != 0.0)\n   |                        ^^ no\
    \ implementation for `&f64 == {float}`\n   |\n   = help: the trait `PartialEq<{float}>`\
    \ is not implemented for `&f64`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: cannot divide `f64` by\
    \ `usize`\n  --> /tmp/tmpti19emo9.rs:13:23\n   |\n13 |         .sum::<f64>() /\
    \ numbers.len()\n   |                       ^ no implementation for `f64 / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    if numbers.is_empty() {\n        0.0\n    } else {\n        let mut avg\
    \ = numbers[0];\n        for &n in numbers {\n            avg = (avg + n) / 2.0;\n\
    \        }\n        (numbers.iter().map(|&n| n - avg).sum::<f64>()) / numbers.len()\n\
    \    }\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1xabmzw1.rs:13:13\n   |\n\
    13 |         for &n in numbers {\n   |             ^^    ------- this expression\
    \ has type `Option<f64>`\n   |             |\n   |             expected `f64`,\
    \ found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `n`\n   |\n   = note:   expected type `f64`\n           found reference\
    \ `&_`\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp1xabmzw1.rs:16:57\n\
    \   |\n16 |         (numbers.iter().map(|&n| n - avg).sum::<f64>()) / numbers.len()\n\
    \   |                                                         ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut abs_deviations = vec![];\n    for i in numbers {\n        abs_deviations.push(std::f64::abs(i\
    \ - mean_number(&numbers)));\n    }\n    if numbers.len() < 2 {\n        return\
    \ std::f64::nan();\n    }\n    return std::f64::mean(abs_deviations).unwrap_or(std::f64::nan());\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmpk_p49l3x.rs:11:39\n\
    \   |\n11 |         abs_deviations.push(std::f64::abs(i - mean_number(&numbers)));\n\
    \   |                                       ^^^ not found in `std::f64`\n\nerror[E0425]:\
    \ cannot find function `mean_number` in this scope\n  --> /tmp/tmpk_p49l3x.rs:11:47\n\
    \   |\n11 |         abs_deviations.push(std::f64::abs(i - mean_number(&numbers)));\n\
    \   |                                               ^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `nan` in module `std::f64`\n   -->\
    \ /tmp/tmpk_p49l3x.rs:14:26\n    |\n14  |         return std::f64::nan();\n  \
    \  |                          ^^^ help: a constant with a similar name exists:\
    \ `NAN`\n\nerror[E0425]: cannot find function `mean` in module `std::f64`\n  -->\
    \ /tmp/tmpk_p49l3x.rs:16:22\n   |\n16 |     return std::f64::mean(abs_deviations).unwrap_or(std::f64::nan());\n\
    \   |                      ^^^^ not found in `std::f64`\n\nerror[E0425]: cannot\
    \ find function `nan` in module `std::f64`\n   --> /tmp/tmpk_p49l3x.rs:16:63\n\
    \    |\n16  |     return std::f64::mean(abs_deviations).unwrap_or(std::f64::nan());\n\
    \    |                                                               ^^^ help:\
    \ a constant with a similar name exists: `NAN`\n\nerror: aborting due to 5 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0;\n    for i in numbers.iter() {\n        sum += i;\n\
    \    }\n    let mut mean = sum / numbers.len();\n    for i in numbers.iter() {\n\
    \        let diff = i - mean;\n        sum += diff * diff;\n    }\n    let mut\
    \ variance = sum / numbers.len() - mean * mean;\n    for i in numbers.iter() {\n\
    \        variance += i * i;\n    }\n    variance / numbers.len() as f64\n}\n\n\
    fn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `&f64` to `{integer}`\n  --> /tmp/tmpkde1xcm1.rs:11:13\n\
    \   |\n11 |         sum += i;\n   |             ^^ no implementation for `{integer}\
    \ += &f64`\n   |\n   = help: the trait `AddAssign<&f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot subtract `usize` from `&f64`\n  --> /tmp/tmpkde1xcm1.rs:15:22\n\
    \   |\n15 |         let diff = i - mean;\n   |                      ^ no implementation\
    \ for `&f64 - usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented\
    \ for `&f64`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add-assign `f64` to `usize`\n  --> /tmp/tmpkde1xcm1.rs:20:18\n\
    \   |\n20 |         variance += i * i;\n   |                  ^^ no implementation\
    \ for `usize += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot divide `usize` by `f64`\n  --> /tmp/tmpkde1xcm1.rs:22:14\n\
    \   |\n22 |     variance / numbers.len() as f64\n   |              ^ no imp"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|n| n.abs()).sum::<f64>() / numbers.len()\n}\n\nfn\
    \ main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpv7v0qtvl.rs:9:50\n\
    \  |\n9 |     numbers.iter().map(|n| n.abs()).sum::<f64>() / numbers.len()\n \
    \ |                                                  ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut deviation = 0.0;\n\n    for number in numbers {\n        deviation\
    \ += f64::abs(number - number);\n    }\n\n    f64::sqrt(deviation)\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.0`,\n right: `0.5`', /tmp/tmp0ctgqkhw.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .map(|x| x - std::f64::consts::FRAC_EPSILON)\n\
    \        .filter(|x| x > 0.0)\n        .sum::<f64>() / numbers.len()\n}\n\nfn\
    \ main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `FRAC_EPSILON` in module `std::f64::consts`\n\
    \  --> /tmp/tmp5chbguva.rs:11:40\n   |\n11 |         .map(|x| x - std::f64::consts::FRAC_EPSILON)\n\
    \   |                                        ^^^^^^^^^^^^ not found in `std::f64::consts`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5chbguva.rs:12:25\n   |\n12 |\
    \         .filter(|x| x > 0.0)\n   |                         ^^^\n   |       \
    \                  |\n   |                         expected `&f64`, found floating-point\
    \ number\n   |                         help: consider borrowing here: `&0.0`\n\
    \nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp5chbguva.rs:13:23\n\
    \   |\n13 |         .sum::<f64>() / numbers.len()\n   |                      \
    \ ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| x.abs()).sum::<f64>() / numbers.len()\n}\n\nfn\
    \ main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmp62z4uqux.rs:9:50\n\
    \  |\n9 |     numbers.iter().map(|x| x.abs()).sum::<f64>() / numbers.len()\n \
    \ |                                                  ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().fold(0.0, |sum, x| sum + f64::abs(x - sum))\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `0.5`', /tmp/tmp30jozkvy.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // First find the mean value of all the numbers\n    let mut mean = numbers.iter().sum::<f64>()\
    \ / numbers.size();\n    numbers.iter_mut().for_each(|x| {\n        *x += *x;\n\
    \        mean += *x;\n    });\n    mean /= f64::from(numbers.len());\n\n    //\
    \ Now we compute the MAD\n    let mut mad = 0.0;\n    numbers.iter_mut().for_each(|x|\
    \ {\n        let diff = *x - mean;\n        mad += f64::abs(diff);\n    });\n\
    \    mad = mad / f64::from(numbers.len());\n    mad\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<f64>` in the\
    \ current scope\n  --> /tmp/tmp689hl2og.rs:10:58\n   |\n10 |     let mut mean\
    \ = numbers.iter().sum::<f64>() / numbers.size();\n   |                      \
    \                                    ^^^^ help: there is an associated function\
    \ with a similar name: `resize`\n\nerror[E0277]: the trait bound `f64: From<usize>`\
    \ is not satisfied\n  --> /tmp/tmp689hl2og.rs:15:13\n   |\n15 |     mean /= f64::from(numbers.len());\n\
    \   |             ^^^^^^^^^ the trait `From<usize>` is not implemented for `f64`\n\
    \   |\n   = help: the following other types implement trait `From<T>`:\n     \
    \        <f32 as From<i16>>\n             <f32 as From<i8>>\n             <f32\
    \ as From<u16>>\n             <f32 as From<u8>>\n             <f64 as From<f32>>\n\
    \             <f64 as From<i16>>\n             <f64 as From<i32>>\n          \
    \   <f64 as From<i8>>\n           and 67 others\n\nerror[E0277]: the trait bound\
    \ `f64: From<usize>` is not satisfied\n  --> /tmp/tmp689hl2og.rs:23:17\n   |\n\
    23 |     mad = mad / f64::from(numbers.len());\n   |                 ^^^^^^^^^\
    \ the trait `From<usize>` is not implemented for `f64`\n   |\n   = help: the following\
    \ other types implement trait `From<T>`:\n             <f32 as From<i16>>\n  \
    \           <f32 as From<i8>>\n             <f32 as From<u16>>\n             <f32\
    \ as From<u8>>\n             <f64 as From<f32>>\n             <f64 as From<i16>>\n\
    \             <f64 as From<i32>>\n             <f64 as From<i8>>\n           and\
    \ 67 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum_of_squares = 0;\n    let mut total_number = 0;\n\n    for\
    \ number in numbers {\n        total_number += 1;\n        sum_of_squares += (number\
    \ - number) as f64 * number as f64;\n    }\n\n    sum_of_squares / total_number\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpjnsye65r.rs:14:24\n\
    \   |\n14 |         sum_of_squares += (number - number) as f64 * number as f64;\n\
    \   |                        ^^ no implementation for `{integer} += f64`\n   |\n\
    \   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n  \
    \ = help: the following other types implement trait `AddAssign<Rhs>`:\n      \
    \       <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n          \
    \   <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128\
    \ as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as\
    \ AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjnsye65r.rs:17:5\n   |\n8  | fn\
    \ mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n   |                  \
    \                                --- expected `f64` because of return type\n...\n\
    17 |     sum_of_squares / total_number\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found integer\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0f64;\n    let mut squared_sum = 0.0f64;\n    for n in\
    \ numbers {\n        sum += n;\n        squared_sum += n * n;\n    }\n    sum.sqrt().unwrap()\
    \ / squared_sum\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmp7vejnjqc.rs:15:16\n   |\n15 |     sum.sqrt().unwrap() /\
    \ squared_sum\n   |                ^^^^^^ method not found in `f64`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0;\n    for n in numbers {\n        sum += n;\n    }\n\
    \    let mut mean = sum / numbers.len();\n\n    let mut dev = 0.0\n    for n in\
    \ numbers {\n        dev += ((n - mean) * (n - mean));\n    }\n    dev / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpanaynvdr.rs:15:22\n\
    \   |\n15 |     let mut dev = 0.0\n   |                      ^ help: add `;` here\n\
    16 |     for n in numbers {\n   |     --- unexpected token\n\nwarning: unnecessary\
    \ parentheses around assigned value\n  --> /tmp/tmpanaynvdr.rs:17:16\n   |\n17\
    \ |         dev += ((n - mean) * (n - mean));\n   |                ^         \
    \              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n17 -         dev += ((n - mean) * (n - mean));\n\
    17 +         dev += (n - mean) * (n - mean);\n   | \n\nerror[E0277]: cannot divide\
    \ `f64` by `usize`\n  --> /tmp/tmpanaynvdr.rs:13:24\n   |\n13 |     let mut mean\
    \ = sum / numbers.len();\n   |                        ^ no implementation for\
    \ `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n  \
    \           <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n      \
    \       <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n        \
    \     <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n            \
    \ <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `{float}` by `usize`\n  --> /tmp/tmpanaynvdr.rs:19:9\n\
    \   |\n19 |     dev / numbers.len()\n   |         ^ no implementation for `{float}\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 3 previous errors; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|n| |x| |x| |x - n|)\n        .sum()\n \
    \       .sqrt()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error: expected one of `,`, `:`, or `@`, found `-`\n  --> /tmp/tmpgpon09i7.rs:10:29\n\
    \   |\n10 |         .map(|n| |x| |x| |x - n|)\n   |                          \
    \   ^ expected one of `,`, `:`, or `@`\n\nerror: expected `|`, found `n`\n  -->\
    \ /tmp/tmpgpon09i7.rs:10:31\n   |\n10 |         .map(|n| |x| |x| |x - n|)\n  \
    \ |                               ^ expected `|`\n\nerror: aborting due to 2 previous\
    \ errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // Sum all elements\n    let mut sum = f64::NEG_INFINITY;\n    for n\
    \ in numbers {\n        sum += n;\n    }\n\n    // Calculate the mean of the numbers\n\
    \    let mut mean = sum / numbers::usize::MAX;\n\n    // Calculate the Mean Absolute\
    \ Deviation (MAD)\n    sum\n        .iter()\n        .map(|x| x - mean)\n    \
    \    .fold(f64::NEG_INFINITY, |sum, x| sum + x).unwrap_or(0.0f64) as f64\n}\n\n\
    fn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `numbers`\n\
    \  --> /tmp/tmpheowexfv.rs:16:26\n   |\n16 |     let mut mean = sum / numbers::usize::MAX;\n\
    \   |                          ^^^^^^^ use of undeclared crate or module `numbers`\n\
    \nerror[E0599]: no method named `iter` found for type `f64` in the current scope\n\
    \  --> /tmp/tmpheowexfv.rs:20:10\n   |\n20 |         .iter()\n   |          ^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0433, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum: f64 = 0;\n    for x in numbers {\n        sum += x;\n  \
    \  }\n    sum / (numbers.len() as f64)\n}\n\nfn main() {\n    let candidate =\
    \ mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph9ufkqdi.rs:9:24\n  |\n9 |\
    \     let mut sum: f64 = 0;\n  |                  ---   ^\n  |               \
    \   |     |\n  |                  |     expected `f64`, found integer\n  |   \
    \               |     help: use a float literal: `0.0`\n  |                  expected\
    \ due to this\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum();\n    for x in numbers {\n      \
    \  mean += x;\n    }\n    mean / numbers.len()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbljru2gi.rs:9:9\n \
    \ |\n9 |     let mut mean = numbers.iter().sum();\n  |         ^^^^^^^^ consider\
    \ giving `mean` a type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = f64::Nano::zero();\n    for num in numbers.iter() {\n\
    \        mean += num;\n    }\n    mean /= numbers.len();\n    let mut mad = 0.0;\n\
    \    for num in numbers.iter() {\n        mad = mad + (num - mean).abs() * (num\
    \ - mean);\n    }\n    mad = mad.sqrt();\n    mad\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0223]: ambiguous associated type\n --> /tmp/tmpq7_dt75y.rs:9:20\n\
    \  |\n9 |     let mut mean = f64::Nano::zero();\n  |                    ^^^^^^^^^\
    \ help: use fully-qualified syntax: `<f64 as Trait>::Nano`\n\nerror[E0689]: can't\
    \ call method `sqrt` on ambiguous numeric type `{float}`\n  --> /tmp/tmpq7_dt75y.rs:18:15\n\
    \   |\n18 |     mad = mad.sqrt();\n   |               ^^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `f32`\n   |\n14 |     let mut mad: f32\
    \ = 0.0;\n   |         ~~~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0223, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0223`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    for number in numbers {\n        mean +=\
    \ number;\n    }\n    mean / numbers.len()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpvu3oercb.rs:13:10\n\
    \   |\n13 |     mean / numbers.len()\n   |          ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = f64::from(numbers.iter().sum() / f64::from(numbers.len()));\n\
    \    numbers.iter()\n        .enumerate()\n        .for_each(|(idx, n)| {\n  \
    \          if idx == 0 {\n                mean += n;\n            } else {\n \
    \               mean -= n;\n            }\n        });\n    mean\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: From<usize>` is not satisfied\n -->\
    \ /tmp/tmppvex_656.rs:9:53\n  |\n9 |     let mut mean = f64::from(numbers.iter().sum()\
    \ / f64::from(numbers.len()));\n  |                                          \
    \           ^^^^^^^^^ the trait `From<usize>` is not implemented for `f64`\n \
    \ |\n  = help: the following other types implement trait `From<T>`:\n        \
    \    <f32 as From<i16>>\n            <f32 as From<i8>>\n            <f32 as From<u16>>\n\
    \            <f32 as From<u8>>\n            <f64 as From<f32>>\n            <f64\
    \ as From<i16>>\n            <f64 as From<i32>>\n            <f64 as From<i8>>\n\
    \          and 67 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut m = numbers[0];\n    for n in numbers.iter() {\n        if n\
    \ > m {\n            m = n;\n        }\n    }\n\n    let mut sum = 0.0;\n    for\
    \ n in numbers.iter() {\n        sum += std::f64::from(n - m);\n    }\n\n    sum\
    \ / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `from` in module `std::f64`\n  --> /tmp/tmp9r91jgms.rs:18:26\n\
    \   |\n18 |         sum += std::f64::from(n - m);\n   |                      \
    \    ^^^^ not found in `std::f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9r91jgms.rs:11:16\n\
    \   |\n11 |         if n > m {\n   |                ^\n   |                |\n\
    \   |                expected `&f64`, found `f64`\n   |                help: consider\
    \ borrowing here: `&m`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9r91jgms.rs:12:17\n\
    \   |\n9  |     let mut m = numbers[0];\n   |                 ---------- expected\
    \ due to this value\n...\n12 |             m = n;\n   |                 ^ expected\
    \ `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n   |\n12\
    \ |             m = *n;\n   |                 +\n\nerror[E0277]: cannot divide\
    \ `{float}` by `usize`\n  --> /tmp/tmp9r91jgms.rs:21:9\n   |\n21 |     sum / numbers.len()\n\
    \   |         ^ no implementation for `{float} / usize`\n   |\n   = help: the\
    \ trait `Div<usize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    for n in numbers {\n        mean += n;\n\
    \    }\n    mean /= numbers.len();\n    numbers\n        .iter()\n        .map(|n|\
    \ (n - mean).abs())\n        .sum()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide-assign `f64` by `usize`\n  --> /tmp/tmpyeg1sgvu.rs:13:10\n\
    \   |\n13 |     mean /= numbers.len();\n   |          ^^ no implementation for\
    \ `f64 /= usize`\n   |\n   = help: the trait `DivAssign<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|n| f64::abs(n - numbers.mean())).sum() / numbers.len()\
    \ as f64\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `mean` found for struct `Vec<f64>` in the\
    \ current scope\n --> /tmp/tmpy4e45b5j.rs:9:49\n  |\n9 |     numbers.iter().map(|n|\
    \ f64::abs(n - numbers.mean())).sum() / numbers.len() as f64\n  |            \
    \                                     ^^^^ method not found in `Vec<f64>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mean = numbers.sum() / numbers.len() as f64;\n    numbers.iter().map(|x|\
    \ f64::abs(x - mean)).sum() / numbers.len() as f64\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmp7y2zua0e.rs:9:24\n\
    \    |\n9   |       let mean = numbers.sum() / numbers.len() as f64;\n    |  \
    \                        ^^^ `Vec<f64>` is not an iterator\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n\
    \            which is required by `&mut Vec<f64>: Iterator`\n            `[f64]:\
    \ Iterator`\n            which is required by `&mut [f64]: Iterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut m = 0.0;\n\n    for x in numbers {\n        m += x;\n    }\n\n\
    \    let mut mean = f64::from(0.0);\n\n    for x in numbers {\n        let diff\
    \ = x - mean;\n        mean += diff * diff;\n    }\n\n    mean / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpvdo3_1yx.rs:22:10\n\
    \   |\n22 |     mean / numbers.len()\n   |          ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|x| {\n            let mean = numbers.iter().sum::<f64>()\
    \ / numbers.len() as f64;\n            (x - mean).abs()\n        })\n        .sum::<f64>()\
    \ / numbers.len() as f64\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0;\n    for n in numbers {\n        mean += n.abs();\n\
    \    }\n    mean.abs()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3.0`,\n right: `0.5`', /tmp/tmpcazvk5el.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0;\n    let mut n = 0;\n    for n in numbers {\n      \
    \  sum += n;\n    }\n    sum / (numbers.len() as f64)\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpp1mo23bh.rs:12:13\n\
    \   |\n12 |         sum += n;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot divide `{integer}` by `f64`\n  --> /tmp/tmpp1mo23bh.rs:14:9\n\
    \   |\n14 |     sum / (numbers.len() as f64)\n   |         ^ no implementation\
    \ for `{integer} / f64`\n   |\n   = help: the trait `Div<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|n| n.abs()).sum::<f64>() / numbers.len()\n}\n\nfn\
    \ main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpihfe3h87.rs:9:50\n\
    \  |\n9 |     numbers.iter().map(|n| n.abs()).sum::<f64>() / numbers.len()\n \
    \ |                                                  ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut squared_deviation = 0.0;\n    for x in numbers {\n        let\
    \ diff = x - mean_number(numbers);\n        squared_deviation += diff * diff;\n\
    \    }\n    sqrt_f64(squared_deviation as f64) as f64\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `mean_number` in this scope\n  --> /tmp/tmpucw728gg.rs:11:24\n\
    \   |\n11 |         let diff = x - mean_number(numbers);\n   |               \
    \         ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `sqrt_f64` in this scope\n  --> /tmp/tmpucw728gg.rs:14:5\n   |\n14 |     sqrt_f64(squared_deviation\
    \ as f64) as f64\n   |     ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0;\n    for (i, n) in numbers.iter().enumerate() {\n\
    \        mean += n;\n        if i == 0 {\n            continue;\n        }\n \
    \       mean /= i;\n    }\n    mean - numbers.mean()\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide-assign `f64` by `usize`\n  --> /tmp/tmpp7gebple.rs:15:14\n\
    \   |\n15 |         mean /= i;\n   |              ^^ no implementation for `f64\
    \ /= usize`\n   |\n   = help: the trait `DivAssign<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror[E0599]: no method named `mean` found for struct `Vec<f64>`\
    \ in the current scope\n  --> /tmp/tmpp7gebple.rs:17:20\n   |\n17 |     mean -\
    \ numbers.mean()\n   |                    ^^^^ method not found in `Vec<f64>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut made_positive = numbers.iter().filter(|x| x > 0).sum::<f64>();\n\
    \    let mut made_negative = numbers.iter().filter(|x| x < 0).sum::<f64>();\n\n\
    \    let mut mean = numbers.iter().sum::<f64>();\n    made_positive -= mean;\n\
    \    made_negative -= mean;\n\n    // This makes sure that made_negative always\
    \ equals 0.\n    made_negative += 0.0000000001;\n\n    // Return mean as absolute\
    \ number.\n    made_positive / made_negative\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdkbsolkz.rs:9:59\n  |\n9 |\
    \     let mut made_positive = numbers.iter().filter(|x| x > 0).sum::<f64>();\n\
    \  |                                                           ^ expected `&&f64`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdkbsolkz.rs:10:59\n\
    \   |\n10 |     let mut made_negative = numbers.iter().filter(|x| x < 0).sum::<f64>();\n\
    \   |                                                           ^ expected `&&f64`,\
    \ found integer\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut m = 0.0;\n    for i in 0..numbers.len() {\n        m += numbers[i]\
    \ as f64;\n    }\n    m / numbers.len() as f64\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.5`,\n right: `0.5`', /tmp/tmpn7omd3lk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0_;\n    for n in numbers {\n        sum += n\n    }\n\
    \    let mean = sum / numbers.len();\n\n    let mut abs_diff = 0.0;\n    for n\
    \ in numbers {\n        abs_diff += f64::abs(n - mean);\n    }\n    abs_diff as\
    \ f64 / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmphx55mahe.rs:13:20\n\
    \   |\n13 |     let mean = sum / numbers.len();\n   |                    ^ no\
    \ implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is\
    \ not implemented for `f64`\n   = help: the following other types implement trait\
    \ `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n\
    \             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n  \
    \           <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n      \
    \       <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n        \
    \   and 54 others\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmphx55mahe.rs:19:21\n\
    \   |\n19 |     abs_diff as f64 / numbers.len()\n   |                     ^ no\
    \ implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is\
    \ not implemented for `f64`\n   = help: the following other types implement trait\
    \ `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n\
    \             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n  \
    \           <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n      \
    \       <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n        \
    \   and 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    numbers.iter().for_each(|x|\
    \ {\n        let diff = x - mean;\n        mean = mean + diff / numbers.length;\n\
    \    });\n    mean\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpky07mzjc.rs:9:48\n\
    \  |\n9 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n  |\
    \                                                ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror[E0609]: no field\
    \ `length` on type `Vec<f64>`\n  --> /tmp/tmpky07mzjc.rs:12:38\n   |\n12 |   \
    \      mean = mean + diff / numbers.length;\n   |                            \
    \          ^^^^^^ unknown field\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0609.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().fold(0.0, |sum, x| sum + std::f64::abs(x - numbers.iter().sum::<f64>())).sqrt()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n --> /tmp/tmp_jcrrgu6.rs:9:55\n\
    \  |\n9 |     numbers.iter().fold(0.0, |sum, x| sum + std::f64::abs(x - numbers.iter().sum::<f64>())).sqrt()\n\
    \  |                                                       ^^^ not found in `std::f64`\n\
    \nerror[E0689]: can't call method `sqrt` on ambiguous numeric type `{float}`\n\
    \ --> /tmp/tmp_jcrrgu6.rs:9:93\n  |\n9 |     numbers.iter().fold(0.0, |sum, x|\
    \ sum + std::f64::abs(x - numbers.iter().sum::<f64>())).sqrt()\n  |          \
    \                                                                            \
    \       ^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0689.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut squared_deviation = 0.;\n    for x in numbers {\n        squared_deviation\
    \ += std::f64::pow((x - mean_f64(x)), 2.);\n    }\n    squared_deviation / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `pow` in module `std::f64`\n  --> /tmp/tmpew3vj887.rs:11:40\n\
    \   |\n11 |         squared_deviation += std::f64::pow((x - mean_f64(x)), 2.);\n\
    \   |                                        ^^^ not found in `std::f64`\n\nerror[E0425]:\
    \ cannot find function `mean_f64` in this scope\n  --> /tmp/tmpew3vj887.rs:11:49\n\
    \   |\n11 |         squared_deviation += std::f64::pow((x - mean_f64(x)), 2.);\n\
    \   |                                                 ^^^^^^^^ not found in this\
    \ scope\n\nwarning: unnecessary parentheses around function argument\n  --> /tmp/tmpew3vj887.rs:11:44\n\
    \   |\n11 |         squared_deviation += std::f64::pow((x - mean_f64(x)), 2.);\n\
    \   |                                            ^               ^\n   |\n   =\
    \ note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n11 -         squared_deviation += std::f64::pow((x - mean_f64(x)), 2.);\n\
    11 +         squared_deviation += std::f64::pow(x - mean_f64(x), 2.);\n   | \n\
    \nerror[E0277]: cannot divide `{float}` by `usize`\n  --> /tmp/tmpew3vj887.rs:13:23\n\
    \   |\n13 |     squared_deviation / numbers.len()\n   |                      \
    \ ^ no implementation for `{float} / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to 3 previous errors; 1 warning\
    \ emitted\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mad_sum = 0.0;\n    for n in numbers {\n        mad_sum += std::fabs(n\
    \ - numbers[0]);\n    }\n    mad_sum as f64 / numbers.len() as f64\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fabs` in crate `std`\n  --> /tmp/tmpkhpni2e6.rs:11:25\n\
    \   |\n11 |         mad_sum += std::fabs(n - numbers[0]);\n   |              \
    \           ^^^^ not found in `std`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean_number = numbers.iter().sum::<f64>() / f64::from(numbers.len());\n\
    \    numbers.iter_mut().for_each(|x| *x = *x - (*x as f64).abs() / 2.0);\n   \
    \ numbers.iter().for_each(|x| *x = *x - mean_number);\n    numbers.iter().sum::<f64>()\
    \ / f64::from(numbers.len())\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: From<usize>` is not satisfied\n -->\
    \ /tmp/tmp6n6grf41.rs:9:57\n  |\n9 |     let mut mean_number = numbers.iter().sum::<f64>()\
    \ / f64::from(numbers.len());\n  |                                           \
    \              ^^^^^^^^^ the trait `From<usize>` is not implemented for `f64`\n\
    \  |\n  = help: the following other types implement trait `From<T>`:\n       \
    \     <f32 as From<i16>>\n            <f32 as From<i8>>\n            <f32 as From<u16>>\n\
    \            <f32 as From<u8>>\n            <f64 as From<f32>>\n            <f64\
    \ as From<i16>>\n            <f64 as From<i32>>\n            <f64 as From<i8>>\n\
    \          and 67 others\n\nerror[E0277]: the trait bound `f64: From<usize>` is\
    \ not satisfied\n  --> /tmp/tmp6n6grf41.rs:12:35\n   |\n12 |     numbers.iter().sum::<f64>()\
    \ / f64::from(numbers.len())\n   |                                   ^^^^^^^^^\
    \ the trait `From<usize>` is not implemented for `f64`\n   |\n   = help: the following\
    \ other types implement trait `From<T>`:\n             <f32 as From<i16>>\n  \
    \           <f32 as From<i8>>\n             <f32 as From<u16>>\n             <f32\
    \ as From<u8>>\n             <f64 as From<f32>>\n             <f64 as From<i16>>\n\
    \             <f64 as From<i32>>\n             <f64 as From<i8>>\n           and\
    \ 67 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .map(|n| f64::abs(n - numbers.mean()))\n\
    \        .sum::<f64>()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `mean` found for struct `Vec<f64>` in the\
    \ current scope\n  --> /tmp/tmpsgxzyzaa.rs:11:39\n   |\n11 |         .map(|n|\
    \ f64::abs(n - numbers.mean()))\n   |                                       ^^^^\
    \ method not found in `Vec<f64>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().fold(0.0, |sum, x| sum + x).unwrap();\n\
    \    let mut made_change = false;\n    for x in numbers {\n        let delta_x:\
    \ f64 = x - mean;\n        made_change = made_change || delta_x;\n        mean\
    \ += delta_x;\n    }\n    made_change\n        ? math.f64::from(\n           \
    \ numbers.len() * numbers.iter().map(|x| x - mean).sum::<f64>() / numbers.len(),\n\
    \        )\n        : 0\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `math`\n\
    \  --> /tmp/tmp22ddz29i.rs:17:11\n   |\n17 |         ? math.f64::from(\n   | \
    \          ^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0599]:\
    \ no method named `unwrap` found for type `f64` in the current scope\n --> /tmp/tmp22ddz29i.rs:9:63\n\
    \  |\n9 |     let mut mean = numbers.iter().fold(0.0, |sum, x| sum + x).unwrap();\n\
    \  |                                                               ^^^^^^ method\
    \ not found in `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22ddz29i.rs:13:38\n\
    \   |\n13 |         made_change = made_change || delta_x;\n   |              \
    \                        ^^^^^^^ expected `bool`, found `f64`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .map(|x| x.abs().mean())\n        .sum::<f64>()\
    \ / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `mean` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmplbbdv0kq.rs:11:26\n   |\n11 |         .map(|x| x.abs().mean())\n\
    \   |                          ^^^^ method not found in `f64`\n\nerror[E0277]:\
    \ cannot divide `f64` by `usize`\n  --> /tmp/tmplbbdv0kq.rs:12:23\n   |\n12 |\
    \         .sum::<f64>() / numbers.len()\n   |                       ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0;\n    for n in numbers.iter() {\n        sum += n;\n\
    \    }\n    let mut n = numbers.len();\n    while n > 1 { n /= 2 }\n    sum /\
    \ n\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpgjyv3rp3.rs:15:9\n\
    \   |\n15 |     sum / n\n   |         ^ no implementation for `f64 / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum() / numbers.len();\n    let mut squared_diffs:\
    \ Vec<f64> = numbers.iter().map(|x| x - mean).collect();\n    squared_diffs.iter_mut().for_each(|x|\
    \ { *x += *x; });\n    squared_diffs.iter_mut().for_each(|x| *x = *x / numbers.len());\n\
    \    squared_diffs.iter().sum() / numbers.len()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpcqgrp605.rs:12:51\n\
    \   |\n12 |     squared_diffs.iter_mut().for_each(|x| *x = *x / numbers.len());\n\
    \   |                                                   ^ no implementation for\
    \ `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n  \
    \           <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n      \
    \       <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n        \
    \     <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n            \
    \ <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| {\n        (x - mean_number(numbers)) * (x - mean_number(numbers))\n\
    \    }).sum::<f64>() / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `mean_number` in this scope\n  --> /tmp/tmpdtkq2igl.rs:10:14\n\
    \   |\n10 |         (x - mean_number(numbers)) * (x - mean_number(numbers))\n\
    \   |              ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `mean_number` in this scope\n  --> /tmp/tmpdtkq2igl.rs:10:43\n\
    \   |\n10 |         (x - mean_number(numbers)) * (x - mean_number(numbers))\n\
    \   |                                           ^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpdtkq2igl.rs:11:21\n\
    \   |\n11 |     }).sum::<f64>() / numbers.len()\n   |                     ^ no\
    \ implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is\
    \ not implemented for `f64`\n   = help: the following other types implement trait\
    \ `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n\
    \             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n  \
    \           <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n      \
    \       <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n        \
    \   and 54 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    let\
    \ len = numbers.len();\n    for (i, _) in numbers.iter().enumerate() {\n     \
    \   if i == len {\n            continue;\n        }\n        mean += (*numbers[i]\
    \ - mean).abs();\n    }\n    mean.sqrt()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmptegonaqk.rs:9:48\n\
    \  |\n9 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n  |\
    \                                                ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror[E0614]: type\
    \ `f64` cannot be dereferenced\n  --> /tmp/tmptegonaqk.rs:15:18\n   |\n15 |  \
    \       mean += (*numbers[i] - mean).abs();\n   |                  ^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    assert!(numbers.len() > 1);\n    let mut mean: f64 = 0.0;\n    for n\
    \ in numbers {\n        mean += n;\n    }\n    mean /= numbers.len();\n    let\
    \ mut mad: f64 = 0.0;\n    for n in numbers {\n        let diff = n - mean;\n\
    \        mad += diff * diff;\n    }\n    mad\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide-assign `f64` by `usize`\n  --> /tmp/tmpqvomhpn3.rs:14:10\n\
    \   |\n14 |     mean /= numbers.len();\n   |          ^^ no implementation for\
    \ `f64 /= usize`\n   |\n   = help: the trait `DivAssign<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut diff = numbers.iter().map(|x| x - mean()).collect::<Vec<_>>();\n\
    \    diff.iter().map(|x| x * x).sum() / numbers.len() as f64\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `mean` in this scope\n --> /tmp/tmpe3gll93g.rs:9:47\n\
    \  |\n9 |     let mut diff = numbers.iter().map(|x| x - mean()).collect::<Vec<_>>();\n\
    \  |                                               ^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut total = 0.0f64;\n    for i in numbers {\n        total += i;\n\
    \    }\n    total / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpx2vjfrat.rs:13:11\n\
    \   |\n13 |     total / numbers.len()\n   |           ^ no implementation for\
    \ `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n  \
    \           <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n      \
    \       <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n        \
    \     <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n            \
    \ <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut average = 0.0f64;\n    for n in numbers {\n        average +=\
    \ n;\n    }\n    average /= numbers.len();\n    let mut deviation: f64 = 0.0;\n\
    \    for n in numbers {\n        deviation += pow((n - average), 2.0);\n    }\n\
    \    deviation /= (numbers.len() * numbers.len());\n    deviation\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `pow` in this scope\n  --> /tmp/tmptr3fp7qk.rs:16:22\n\
    \   |\n16 |         deviation += pow((n - average), 2.0);\n   |              \
    \        ^^^ not found in this scope\n\nwarning: unnecessary parentheses around\
    \ function argument\n  --> /tmp/tmptr3fp7qk.rs:16:26\n   |\n16 |         deviation\
    \ += pow((n - average), 2.0);\n   |                          ^           ^\n \
    \  |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n16 -         deviation += pow((n - average), 2.0);\n16 +         deviation\
    \ += pow(n - average, 2.0);\n   | \n\nwarning: unnecessary parentheses around\
    \ assigned value\n  --> /tmp/tmptr3fp7qk.rs:18:18\n   |\n18 |     deviation /=\
    \ (numbers.len() * numbers.len());\n   |                  ^                  \
    \           ^\n   |\nhelp: remove these parentheses\n   |\n18 -     deviation\
    \ /= (numbers.len() * numbers.len());\n18 +     deviation /= numbers.len() * numbers.len();\n\
    \   | \n\nerror[E0277]: cannot divide-assign `f64` by `usize`\n  --> /tmp/tmptr3fp7qk.rs:13:13\n\
    \   |\n13 |     average /= numbers.len();\n   |             ^^ no implementation\
    \ for `f64 /= usize`\n   |\n   = help: the trait `DivAssign<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot divide-assign `f64` by `usize`\n  --> /tmp/tmptr3fp7qk.rs:18:15\n\
    \   |\n18 |     deviation /= (numbers.len() * numbers.len());\n   |          \
    \     ^^ no implementation for `f64 /= usize`\n   |\n   = help: the trait `DivAssign<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `DivAssign<Rhs>`:\n             <f32 as DivAssign<&f32>>\n           \
    \  <f32 as DivAssign>\n             <f64 as DivAssign<&f64>>\n             <"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| f64::sqrt(f64::powf(x-mean_number(), 2.0)))\n\
    \                 .sum() / numbers.len()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `mean_number` in this scope\n --> /tmp/tmppjjcpmse.rs:9:50\n\
    \  |\n9 |     numbers.iter().map(|x| f64::sqrt(f64::powf(x-mean_number(), 2.0)))\n\
    \  |                                                  ^^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    for number in numbers {\n        mean +=\
    \ number;\n    }\n    mean = mean / numbers.len();\n\n    let mut delta: f64 =\
    \ 0.0;\n    for number in numbers {\n        delta += f64::from(number) - mean;\n\
    \    }\n    delta /= numbers.len();\n\n    delta.sqrt()\n}\n\nfn main() {\n  \
    \  let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmprijgone_.rs:13:17\n\
    \   |\n13 |     mean = mean / numbers.len();\n   |                 ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide-assign `f64` by `usize`\n  --> /tmp/tmprijgone_.rs:19:11\n\
    \   |\n19 |     delta /= numbers.len();\n   |           ^^ no implementation for\
    \ `f64 /= usize`\n   |\n   = help: the trait `DivAssign<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    assert!(numbers != vec![]);\n    let mut mean = numbers.iter().sum::<f64>()\
    \ / numbers.len();\n    let mut deviations = vec![0.0; numbers.len()];\n\n   \
    \ for i in 0..numbers.len() {\n        deviations[i] = numbers[i] - mean;\n  \
    \      mean += deviations[i];\n    }\n\n    // Return the average\n    deviations.iter().sum::<f64>()\
    \ / deviations.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpnd9ujwoa.rs:10:48\n\
    \   |\n10 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n\
    \   |                                                ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]:\
    \ cannot divide `f64` by `usize`\n  --> /tmp/tmpnd9ujwoa.rs:19:36\n   |\n19 |\
    \     deviations.iter().sum::<f64>() / deviations.len()\n   |                \
    \                    ^ no implementation for `f64 / usize`\n   |\n   = help: the\
    \ trait `Div<usize>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().fold(0.0, |sum, number| {\n        sum + f64::abs(number\
    \ - number.mean())\n    }) / numbers.len()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `mean` found for reference `&f64` in the\
    \ current scope\n  --> /tmp/tmpu5bi87eg.rs:10:40\n   |\n10 |         sum + f64::abs(number\
    \ - number.mean())\n   |                                        ^^^^ method not\
    \ found in `&f64`\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpu5bi87eg.rs:11:8\n\
    \   |\n11 |     }) / numbers.len()\n   |        ^ no implementation for `f64 /\
    \ usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|n| n.abs() - numbers.iter().filter(|x| x == n).count()\
    \ as f64).sum() / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&f64` with `f64`\n --> /tmp/tmp1amudwo8.rs:9:66\n\
    \  |\n9 |     numbers.iter().map(|n| n.abs() - numbers.iter().filter(|x| x ==\
    \ n).count() as f64).sum() / numbers.len()\n  |                              \
    \                                    ^^ no implementation for `&f64 == f64`\n\
    \  |\n  = help: the trait `PartialEq<f64>` is not implemented for `&f64`\n  =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \    f32\n            f64\n            i128\n            i16\n            i32\n\
    \            i64\n            i8\n            isize\n          and 6 others\n\
    \  = note: required because of the requirements on the impl of `PartialEq<&f64>`\
    \ for `&&f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    numbers.iter().for_each(|x|\
    \ {\n        if x > mean {\n            mean = x;\n        }\n    });\n    mean\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpza2l960v.rs:9:48\n\
    \  |\n9 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n  |\
    \                                                ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpza2l960v.rs:15:5\n   |\n8  | fn mean_absolute_deviation(numbers:\
    \ Vec<f64>) -> f64 {\n   |                                                  ---\
    \ expected `f64` because of return type\n...\n15 |     mean\n   |     ^^^^ expected\
    \ `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n   |\n15\
    \ |     *mean\n   |     +\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64;\n    let mut squared_diff: f64;\n    for d in numbers.iter()\
    \ {\n        mean += d;\n        squared_diff += d * d;\n    }\n    mean = mean\
    \ / numbers.len();\n    squared_diff /= numbers.len() - 1;\n    math.powf(squared_diff\
    \ / mean, 0.5f64)\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `math` in this scope\n  --> /tmp/tmpmb2lvp5c.rs:17:5\n\
    \   |\n17 |     math.powf(squared_diff / mean, 0.5f64)\n   |     ^^^^ not found\
    \ in this scope\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpmb2lvp5c.rs:15:17\n\
    \   |\n15 |     mean = mean / numbers.len();\n   |                 ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide-assign `f64` by `usize`\n  --> /tmp/tmpmb2lvp5c.rs:16:18\n\
    \   |\n16 |     squared_diff /= numbers.len() - 1;\n   |                  ^^ no\
    \ implementation for `f64 /= usize`\n   |\n   = help: the trait `DivAssign<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `DivAssign<Rhs>`:\n             <f32 as DivAssign<&f32>>\n           \
    \  <f32 as DivAssign>\n             <f64 as DivAssign<&f64>>\n             <f64\
    \ as DivAssign>\n             <i128 as DivAssign<&i128>>\n             <i128 as\
    \ DivAssign>\n             <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n\
    \           and 20 others\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0f64;\n    for n in numbers {\n        sum += n;\n  \
    \  }\n    sum / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmphcbv3k29.rs:13:9\n\
    \   |\n13 |     sum / numbers.len()\n   |         ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // get mean of all numbers\n    let mut mean = numbers.iter().sum::<f64>()\
    \ / numbers.len();\n    // calculate MAD for each number in numbers vector\n \
    \   for &n in numbers {\n        mean -= n;\n    }\n    mean\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpnxfur7u2.rs:10:48\n\
    \   |\n10 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n\
    \   |                                                ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnxfur7u2.rs:12:9\n   |\n12 |     for &n in numbers\
    \ {\n   |         ^^    ------- this expression has type `Option<f64>`\n   | \
    \        |\n   |         expected `f64`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `n`\n   |\n   = note:   expected type\
    \ `f64`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut diffs: Vec<_> = numbers.iter().cloned().map(|x| x - mean(x)).collect();\n\
    \    diffs.sort();\n    let mut sum: f64 = 0.0;\n    for x in diffs {\n      \
    \  sum += x;\n    }\n    sum / numbers.len()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `mean` in this scope\n --> /tmp/tmpsx725tdm.rs:9:65\n\
    \  |\n9 |     let mut diffs: Vec<_> = numbers.iter().cloned().map(|x| x - mean(x)).collect();\n\
    \  |                                                                 ^^^^ not\
    \ found in this scope\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \   --> /tmp/tmpsx725tdm.rs:10:11\n    |\n10  |     diffs.sort();\n    |     \
    \      ^^^^ the trait `Ord` is not implemented for `f64`\n    |\n    = help: the\
    \ following other types implement trait `Ord`:\n              i128\n         \
    \     i16\n              i32\n              i64\n              i8\n          \
    \    isize\n              u128\n              u16\n            and 4 others\n\
    note: required by a bound in `slice::<impl [T]>::sort`\n\nerror[E0277]: cannot\
    \ divide `f64` by `usize`\n  --> /tmp/tmpsx725tdm.rs:15:9\n   |\n15 |     sum\
    \ / numbers.len()\n   |         ^ no implementation for `f64 / usize`\n   |\n\
    \   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the\
    \ following other types implement trait `Div<Rhs>`:\n             <&'a f32 as\
    \ Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n\
    \             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n    \
    \         <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n          \
    \   <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n\
    \    for n in numbers {\n        mean += pow(n-mean,2);\n    }\n    mean.sqrt()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `pow` in this scope\n  --> /tmp/tmp49ts48u2.rs:11:17\n\
    \   |\n11 |         mean += pow(n-mean,2);\n   |                 ^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|x| x.abs())\n        .sum()\n        /\
    \ numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0283]: type annotations needed\n    --> /tmp/tmp3au6teqm.rs:11:10\n\
    \     |\n11   |         .sum()\n     |          ^^^ cannot infer type for type\
    \ parameter `S` declared on the associated function `sum`\n     |\n     = note:\
    \ cannot satisfy `_: Sum<f64>`\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    help: consider specifying the type argument in the method call\n     |\n11   |\
    \         .sum::<S>()\n     |             +++++\nhelp: consider specifying the\
    \ type argument in the function call\n     |\n11   |         .sum::<S>()\n   \
    \  |             +++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0283`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    for number in numbers {\n        mean +=\
    \ number;\n    }\n    mean /= numbers::<f64>().len();\n\n    let mut mad: f64\
    \ = 0.0;\n    for number in numbers {\n        mad = mad\n            + (number\
    \ - mean)\n            * f64::from(number - mean);\n    }\n    mad\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0109]: type arguments are not allowed for this type\n  --> /tmp/tmpdiutpgkv.rs:13:23\n\
    \   |\n13 |     mean /= numbers::<f64>().len();\n   |                       ^^^\
    \ type argument not allowed\n\nerror[E0618]: expected function, found `Vec<f64>`\n\
    \  --> /tmp/tmpdiutpgkv.rs:13:13\n   |\n8  | fn mean_absolute_deviation(numbers:\
    \ Vec<f64>) -> f64 {\n   |                            ------- `numbers` has type\
    \ `Vec<f64>`\n...\n13 |     mean /= numbers::<f64>().len();\n   |            \
    \ ^^^^^^^^^^^^^^--\n   |             |\n   |             call expression requires\
    \ function\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0109, E0618.\nFor more information about an error, try `rustc\
    \ --explain E0109`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .map(|x| std::f64::abs(x - std::f64::mean(x)))\n\
    \        .sum()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmpkn0bhpxx.rs:11:28\n\
    \   |\n11 |         .map(|x| std::f64::abs(x - std::f64::mean(x)))\n   |     \
    \                       ^^^ not found in `std::f64`\n\nerror[E0425]: cannot find\
    \ function `mean` in module `std::f64`\n  --> /tmp/tmpkn0bhpxx.rs:11:46\n   |\n\
    11 |         .map(|x| std::f64::abs(x - std::f64::mean(x)))\n   |            \
    \                                  ^^^^ not found in `std::f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // This code calculates the MAD over an arbitrary set of numbers. Ideally\n\
    \    // we'd use statistics such as mean and std here but there are many\n   \
    \ // applications where this doesn't hold.\n    let mut mad = 0;\n    for number\
    \ in numbers {\n        let delta = number - numbers.iter().sum::<f64>() / numbers.len();\n\
    \        mad += delta * delta;\n    }\n    mad\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpp7m58bpx.rs:14:58\n\
    \   |\n14 |         let delta = number - numbers.iter().sum::<f64>() / numbers.len();\n\
    \   |                                                          ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp7m58bpx.rs:17:5\n\
    \   |\n8  | fn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n   |     \
    \                                             --- expected `f64` because of return\
    \ type\n...\n17 |     mad\n   |     ^^^ expected `f64`, found integer\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // For simplicity, we don't bother to check for empty numbers vector.\n\
    \    if numbers.len() == 0 {\n        return 0.0;\n    }\n\n    // Calculate mean.\n\
    \    let mut mean = 0.0;\n    for n in numbers {\n        mean += n;\n    }\n\
    \    mean /= numbers.len();\n\n    // Subtract mean from each element and return\
    \ the average.\n    let mut mad = 0.0;\n    for n in numbers {\n        let d\
    \ = (n - mean);\n        mad += d;\n    }\n    mad /= numbers.len();\n\n    mad\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmp9n4gyj0r.rs:24:17\n\
    \   |\n24 |         let d = (n - mean);\n   |                 ^        ^\n   |\n\
    \   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n24 -         let d = (n - mean);\n24 +         let d = n - mean;\n   |\
    \ \n\nerror[E0277]: cannot divide-assign `f64` by `usize`\n  --> /tmp/tmp9n4gyj0r.rs:19:10\n\
    \   |\n19 |     mean /= numbers.len();\n   |          ^^ no implementation for\
    \ `f64 /= usize`\n   |\n   = help: the trait `DivAssign<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot divide-assign `f64` by `usize`\n  --> /tmp/tmp9n4gyj0r.rs:27:9\n\
    \   |\n27 |     mad /= numbers.len();\n   |         ^^ no implementation for `f64\
    \ /= usize`\n   |\n   = help: the trait `DivAssign<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0;\n    let mut squared_sum = 0.0;\n    for n in numbers\
    \ {\n        sum += n;\n        squared_sum += n * n;\n    }\n    if numbers.len()\
    \ <= 1 {\n        return 0.0;\n    }\n    sum.sqrt().div(squared_sum).expect(\"\
    Sum of the absolute differences should be equal\")\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `div` found for type `f64` in the current\
    \ scope\n   --> /tmp/tmp7fop46dp.rs:18:16\n    |\n18  |     sum.sqrt().div(squared_sum).expect(\"\
    Sum of the absolute differences should be equal\")\n    |                ^^^ method\
    \ not found in `f64`\n    |\n    = help: items from traits can only be used if\
    \ the trait is in scope\nhelp: the following trait is implemented but not in scope;\
    \ perhaps add a `use` for it:\n    |\n1   | use std::ops::Div;\n    |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| f64::abs(x - numbers.iter().fold(0.0, f64::add)).sqrt()).sum::<f64>()\
    \ / numbers.size\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `add` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpa47wotbp.rs:9:71\n  |\n9 |     numbers.iter().map(|x|\
    \ f64::abs(x - numbers.iter().fold(0.0, f64::add)).sqrt()).sum::<f64>() / numbers.size\n\
    \  |                                                                       ^^^\
    \ function or associated item not found in `f64`\n  |\n  = help: items from traits\
    \ can only be used if the trait is in scope\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n  |\n1 | use std::ops::Add;\n\
    \  |\n\nerror[E0609]: no field `size` on type `Vec<f64>`\n --> /tmp/tmpa47wotbp.rs:9:108\n\
    \  |\n9 |     numbers.iter().map(|x| f64::abs(x - numbers.iter().fold(0.0, f64::add)).sqrt()).sum::<f64>()\
    \ / numbers.size\n  |                                                        \
    \                                                    ^^^^ unknown field\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum_of_squared_diffs: f64 = 0.0;\n    for n in numbers.iter()\
    \ {\n        sum_of_squared_diffs += (n-numbers.iter().sum()).powf2(0.5);\n  \
    \  }\n    (sum_of_squared_diffs / numbers.len()).sqrt()\n}\n\nfn main() {\n  \
    \  let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpin2hh_fh.rs:11:33\n\
    \   |\n11 |         sum_of_squared_diffs += (n-numbers.iter().sum()).powf2(0.5);\n\
    \   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n\
    \   |\n   = note: type must be known at this point\n\nerror[E0277]: cannot divide\
    \ `f64` by `usize`\n  --> /tmp/tmpin2hh_fh.rs:13:27\n   |\n13 |     (sum_of_squared_diffs\
    \ / numbers.len()).sqrt()\n   |                           ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0282.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum: f64 = 0.0;\n    for x in numbers {\n        sum += x;\n\
    \    }\n    sum / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpror1f3xr.rs:13:9\n\
    \   |\n13 |     sum / numbers.len()\n   |         ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut n = numbers.len();\n    if n % 2 == 0 {\n        n--;\n    }\n\
    \    let mut mean = numbers.iter().sum() / n;\n    for d in numbers.iter().skip(1)\
    \ {\n        mean += d;\n    }\n    mean\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmp8tachb6w.rs:11:12\n\
    \   |\n11 |         n--;\n   |            ^ expected expression\n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().fold(0.0f64, 0.);\n    numbers.iter_mut().for_each(|n|\
    \ {\n        mean += (n - mean);\n    });\n    mean / numbers.len()\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpf3tk3haz.rs:11:17\n\
    \   |\n11 |         mean += (n - mean);\n   |                 ^        ^\n   |\n\
    \   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n11 -         mean += (n - mean);\n11 +         mean += n - mean;\n   |\
    \ \n\nerror[E0277]: expected a `FnMut<(f64, &f64)>` closure, found `{float}`\n\
    \    --> /tmp/tmpf3tk3haz.rs:9:48\n     |\n9    |     let mut mean = numbers.iter().fold(0.0f64,\
    \ 0.);\n     |                                   ----         ^^ expected an `FnMut<(f64,\
    \ &f64)>` closure, found `{float}`\n     |                                   |\n\
    \     |                                   required by a bound introduced by this\
    \ call\n     |\n     = help: the trait `FnMut<(f64, &f64)>` is not implemented\
    \ for `{float}`\nnote: required by a bound in `fold`\n\nerror[E0369]: cannot subtract\
    \ `f64` from `&mut f64`\n  --> /tmp/tmpf3tk3haz.rs:11:20\n   |\n11 |         mean\
    \ += (n - mean);\n   |                  - ^ ---- f64\n   |                  |\n\
    \   |                  &mut f64\n   |\nhelp: `-` can be used on `f64`, you can\
    \ dereference `n`\n   |\n11 |         mean += (*n - mean);\n   |             \
    \     +\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpf3tk3haz.rs:13:10\n\
    \   |\n13 |     mean / numbers.len()\n   |          ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mean = numbers.iter().fold(0.0, |sum, number| sum + number) as f64;\n\
    \    numbers.iter().map(|x| x - mean).sum().unwrap_or_else(0.0)\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpl9apenea.rs:10:38\n\
    \   |\n10 |     numbers.iter().map(|x| x - mean).sum().unwrap_or_else(0.0)\n \
    \  |                                      ^^^ cannot infer type for type parameter\
    \ `S` declared on the associated function `sum`\n   |\n   = note: type must be\
    \ known at this point\nhelp: consider specifying the type argument in the method\
    \ call\n   |\n10 |     numbers.iter().map(|x| x - mean).sum::<S>().unwrap_or_else(0.0)\n\
    \   |                                         +++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0;\n\n    for n in numbers {\n        sum += n.abs();\n\
    \    }\n\n    let mean = numbers.iter().sum() / numbers.len();\n\n    sum / (numbers.len()\
    \ - 1.0)\n        - mean\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot subtract `{float}` from `usize`\n  --> /tmp/tmpo905h6zf.rs:17:26\n\
    \   |\n17 |     sum / (numbers.len() - 1.0)\n   |                          ^ no\
    \ implementation for `usize - {float}`\n   |\n   = help: the trait `Sub<{float}>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n\
    \    numbers.iter().for_each(|number| {\n        let diff = number - mean;\n \
    \       mean = match diff {\n            0 => mean,\n            x => mean,\n\
    \            _ => mean + x,\n        };\n    });\n    mean\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `x` in this scope\n  --> /tmp/tmp3o5006c0.rs:15:25\n\
    \   |\n15 |             _ => mean + x,\n   |                         ^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3o5006c0.rs:13:13\n\
    \   |\n12 |         mean = match diff {\n   |                      ---- this expression\
    \ has type `f64`\n13 |             0 => mean,\n   |             ^\n   |      \
    \       |\n   |             expected `f64`, found integer\n   |             help:\
    \ use a float literal: `0.0`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| {\n        x.abs() - numbers.iter().map(|y| y.abs()).sum::<f64>().unwrap_or(0.0)\n\
    \    }).sum::<f64>().unwrap_or(0.0)\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap_or` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpaw9g0ii0.rs:10:64\n   |\n10 |         x.abs() - numbers.iter().map(|y|\
    \ y.abs()).sum::<f64>().unwrap_or(0.0)\n   |                                 \
    \                               ^^^^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `unwrap_or` found for type `f64` in the current scope\n  -->\
    \ /tmp/tmpaw9g0ii0.rs:11:21\n   |\n11 |     }).sum::<f64>().unwrap_or(0.0)\n \
    \  |                     ^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    for n in numbers {\n        mean += n;\n\
    \    }\n    mean = mean / numbers.len();\n    let mut mad = 0.0;\n    for n in\
    \ numbers {\n        let diff = n - mean;\n        mad += diff * diff;\n    }\n\
    \    mad = mad / numbers.len();\n    mad\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpov_6ure6.rs:13:17\n\
    \   |\n13 |     mean = mean / numbers.len();\n   |                 ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpov_6ure6.rs:19:15\n\
    \   |\n19 |     mad = mad / numbers.len();\n   |               ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum_of_squares = 0.0;\n    for x in numbers {\n        sum_of_squares\
    \ += pow((x - mean_of_numbers(numbers)), 2);\n    }\n    sqrt(sum_of_squares /\
    \ numbers.len() as f64)\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `pow` in this scope\n  --> /tmp/tmpvfc_n7jl.rs:11:27\n\
    \   |\n11 |         sum_of_squares += pow((x - mean_of_numbers(numbers)), 2);\n\
    \   |                           ^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `mean_of_numbers` in this scope\n  --> /tmp/tmpvfc_n7jl.rs:11:36\n\
    \   |\n11 |         sum_of_squares += pow((x - mean_of_numbers(numbers)), 2);\n\
    \   |                                    ^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmpvfc_n7jl.rs:13:5\n\
    \   |\n13 |     sqrt(sum_of_squares / numbers.len() as f64)\n   |     ^^^^ not\
    \ found in this scope\n\nwarning: unnecessary parentheses around function argument\n\
    \  --> /tmp/tmpvfc_n7jl.rs:11:31\n   |\n11 |         sum_of_squares += pow((x\
    \ - mean_of_numbers(numbers)), 2);\n   |                               ^     \
    \                       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n11 -         sum_of_squares += pow((x -\
    \ mean_of_numbers(numbers)), 2);\n11 +         sum_of_squares += pow(x - mean_of_numbers(numbers),\
    \ 2);\n   | \n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|x| std::f64::consts::ABS(x).sqrt())\n \
    \       .sum::<f64>() / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function, tuple struct or tuple variant `ABS`\
    \ in module `std::f64::consts`\n  --> /tmp/tmpfclhl3j5.rs:10:36\n   |\n10 |  \
    \       .map(|x| std::f64::consts::ABS(x).sqrt())\n   |                      \
    \              ^^^ not found in `std::f64::consts`\n\nerror[E0277]: cannot divide\
    \ `f64` by `usize`\n  --> /tmp/tmpfclhl3j5.rs:11:23\n   |\n11 |         .sum::<f64>()\
    \ / numbers.len()\n   |                       ^ no implementation for `f64 / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum: f64 = 0.0;\n    for (number, _) in numbers.iter() {\n  \
    \      sum += number.abs();\n    }\n    sum / numbers.len()\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphwwr824u.rs:10:9\n   |\n\
    10 |     for (number, _) in numbers.iter() {\n   |         ^^^^^^^^^^^    --------------\
    \ this expression has type `Option<&f64>`\n   |         |\n   |         expected\
    \ `f64`, found tuple\n   |\n   = note: expected type `f64`\n             found\
    \ tuple `(_, _)`\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmphwwr824u.rs:13:9\n\
    \   |\n13 |     sum / numbers.len()\n   |         ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    if numbers.is_empty() {\n        0.0\n    } else {\n        let mut sum\
    \ = 0.0;\n        for n in numbers {\n            sum += n;\n        }\n     \
    \   let mean = sum / numbers.len();\n        let diff_mean = numbers.iter().map(|n|\
    \ n - mean).sum();\n        sum.abs() / numbers.len() - diff_mean\n    }\n}\n\n\
    fn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpma7oabh2.rs:16:24\n\
    \   |\n16 |         let mean = sum / numbers.len();\n   |                    \
    \    ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `f64` by `usize`\n  -->\
    \ /tmp/tmpma7oabh2.rs:18:19\n   |\n18 |         sum.abs() / numbers.len() - diff_mean\n\
    \   |                   ^ no implementation for `f64 / usize`\n   |\n   = help:\
    \ the trait `Div<usize>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // Take the mean of the numbers list\n    let mut total_squared_error\
    \ = 0.0f64;\n    let mut count = numbers.size();\n    for number in numbers.iter()\
    \ {\n        total_squared_error += (number - numbers.mean()).powf64();\n    \
    \    count -= 1;\n    }\n\n    // Calculate the average\n    total_squared_error\
    \ / count\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<f64>` in the\
    \ current scope\n  --> /tmp/tmpo8qg0xs8.rs:11:29\n   |\n11 |     let mut count\
    \ = numbers.size();\n   |                             ^^^^ help: there is an associated\
    \ function with a similar name: `resize`\n\nerror[E0599]: no method named `mean`\
    \ found for struct `Vec<f64>` in the current scope\n  --> /tmp/tmpo8qg0xs8.rs:13:50\n\
    \   |\n13 |         total_squared_error += (number - numbers.mean()).powf64();\n\
    \   |                                                  ^^^^ method not found in\
    \ `Vec<f64>`\n\nerror[E0599]: no method named `powf64` found for type `f64` in\
    \ the current scope\n  --> /tmp/tmpo8qg0xs8.rs:13:58\n   |\n13 |         total_squared_error\
    \ += (number - numbers.mean()).powf64();\n   |                               \
    \                           ^^^^^^ help: there is an associated function with\
    \ a similar name: `powf`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0f;\n    for (i, n) in numbers.iter().enumerate() {\n\
    \        mean += n;\n    }\n    mean /= numbers.len();\n    let mut mad = 0.0f;\n\
    \    for (i, n) in numbers.iter().enumerate() {\n        let diff = n - mean;\n\
    \        mad += diff * diff;\n    }\n    mad = mad / (numbers.len() * numbers.len());\n\
    \    mad\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error: invalid suffix `f` for float literal\n --> /tmp/tmpvcbn_1mc.rs:9:20\n\
    \  |\n9 |     let mut mean = 0.0f;\n  |                    ^^^^ invalid suffix\
    \ `f`\n  |\n  = help: valid suffixes are `f32` and `f64`\n\nerror: invalid suffix\
    \ `f` for float literal\n  --> /tmp/tmpvcbn_1mc.rs:14:19\n   |\n14 |     let mut\
    \ mad = 0.0f;\n   |                   ^^^^ invalid suffix `f`\n   |\n   = help:\
    \ valid suffixes are `f32` and `f64`\n\nerror[E0277]: cannot divide `f64` by `usize`\n\
    \  --> /tmp/tmpvcbn_1mc.rs:19:15\n   |\n19 |     mad = mad / (numbers.len() *\
    \ numbers.len());\n   |               ^ no implementation for `f64 / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // Sum all elements\n    let mut sum = numbers.iter().sum();\n\n    //\
    \ Get mean element\n    let mut mean = numbers.iter().sum();\n\n    // Calculate\
    \ MAD\n    for n in numbers.iter() {\n        sum += *n as f64;\n    }\n    sum.0\
    \ / (numbers.len() as f64)\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmponwt8im2.rs:19:5\n\
    \   |\n10 |     let mut sum = numbers.iter().sum();\n   |         ------- consider\
    \ giving `sum` a type\n...\n19 |     sum.0 / (numbers.len() as f64)\n   |    \
    \ ^^^ cannot infer type\n   |\n   = note: type must be known at this point\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.;\n    for n in numbers.iter() {\n        mean += n;\n\
    \    }\n    mean as f64 / numbers.size() as f64\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<f64>` in the\
    \ current scope\n  --> /tmp/tmpi72zwnna.rs:13:27\n   |\n13 |     mean as f64 /\
    \ numbers.size() as f64\n   |                           ^^^^ help: there is an\
    \ associated function with a similar name: `resize`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mean = numbers.iter().sum::<f64>() / numbers.size();\n    numbers.iter()\n\
    \        .zip(numbers.iter().map(|x| (x - mean).abs()))\n        .fold(0.0, |sum,\
    \ x| sum + x.1.abs())\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<f64>` in the\
    \ current scope\n --> /tmp/tmp9nhw9bq9.rs:9:54\n  |\n9 |     let mean = numbers.iter().sum::<f64>()\
    \ / numbers.size();\n  |                                                     \
    \ ^^^^ help: there is an associated function with a similar name: `resize`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mad: f64 = 0.0;\n    for num in numbers {\n        mad += math.abs(num\
    \ - numbers[numbers.len() - 1]);\n    }\n    mad / numbers.len()\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `math` in this scope\n  --> /tmp/tmpbhjd2q8g.rs:11:16\n\
    \   |\n11 |         mad += math.abs(num - numbers[numbers.len() - 1]);\n   | \
    \               ^^^^ not found in this scope\n\nerror[E0277]: cannot divide `f64`\
    \ by `usize`\n  --> /tmp/tmpbhjd2q8g.rs:13:9\n   |\n13 |     mad / numbers.len()\n\
    \   |         ^ no implementation for `f64 / usize`\n   |\n   = help: the trait\
    \ `Div<usize>` is not implemented for `f64`\n   = help: the following other types\
    \ implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n          \
    \   <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n            \
    \ <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a\
    \ i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize\
    \ as Div<isize>>\n           and 54 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    if numbers.is_empty() {\n        return NAN;\n    }\n    let mut deviation\
    \ = 0.0;\n    for d in numbers {\n        deviation += std::f64::abs(d - numbers.sum::<f64>()\
    \ / numbers.size());\n    }\n    deviation / numbers.len()\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `NAN` in this scope\n  --> /tmp/tmpurewo_b1.rs:10:16\n\
    \   |\n10 |         return NAN;\n   |                ^^^ not found in this scope\n\
    \   |\nhelp: consider importing one of these items\n   |\n1  | use std::f32::NAN;\n\
    \   |\n1  | use std::f64::NAN;\n   |\n\nerror[E0425]: cannot find function `abs`\
    \ in module `std::f64`\n  --> /tmp/tmpurewo_b1.rs:14:32\n   |\n14 |         deviation\
    \ += std::f64::abs(d - numbers.sum::<f64>() / numbers.size());\n   |         \
    \                       ^^^ not found in `std::f64`\n\nerror[E0599]: `Vec<f64>`\
    \ is not an iterator\n   --> /tmp/tmpurewo_b1.rs:14:48\n    |\n14  |         \
    \  deviation += std::f64::abs(d - numbers.sum::<f64>() / numbers.size());\n  \
    \  |                                                  ^^^ `Vec<f64>` is not an\
    \ iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>:\
    \ Iterator`\n            `[f64]: Iterator`\n            which is required by `&mut\
    \ [f64]: Iterator`\n\nerror[E0599]: no method named `size` found for struct `Vec<f64>`\
    \ in the current scope\n  --> /tmp/tmpurewo_b1.rs:14:71\n   |\n14 |         deviation\
    \ += std::f64::abs(d - numbers.sum::<f64>() / numbers.size());\n   |         \
    \                                                              ^^^^ help: there\
    \ is an associated function with a similar name: `resize`\n\nerror[E0277]: cannot\
    \ divide `{float}` by `usize`\n  --> /tmp/tmpurewo_b1.rs:16:15\n   |\n16 |   \
    \  deviation / numbers.len()\n   |               ^ no implementation for `{float}\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 5 previous err"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // TODO(#4201): Remove this implementation after upgrading to nightly\
    \ Rust\n    // and use crates.io/crates/metrics crate directly.\n    let mut mean\
    \ = numbers.iter().sum::<f64>() / f64::from(usize::MAX as usize);\n    let mut\
    \ mad = 0.0; // TODO(#4201): Remove this implementation after upgrading to nightly\
    \ Rust\n    for n in numbers {\n        let delta = n - mean;\n        mad +=\
    \ delta * delta;\n        mean = n;\n    }\n    mad / (f64::from(usize::MAX as\
    \ usize) - f64::from(numbers.len()))\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: From<usize>` is not satisfied\n  -->\
    \ /tmp/tmpdj401aak.rs:11:50\n   |\n11 |     let mut mean = numbers.iter().sum::<f64>()\
    \ / f64::from(usize::MAX as usize);\n   |                                    \
    \              ^^^^^^^^^ the trait `From<usize>` is not implemented for `f64`\n\
    \   |\n   = help: the following other types implement trait `From<T>`:\n     \
    \        <f32 as From<i16>>\n             <f32 as From<i8>>\n             <f32\
    \ as From<u16>>\n             <f32 as From<u8>>\n             <f64 as From<f32>>\n\
    \             <f64 as From<i16>>\n             <f64 as From<i32>>\n          \
    \   <f64 as From<i8>>\n           and 67 others\n\nerror[E0277]: the trait bound\
    \ `f64: From<usize>` is not satisfied\n  --> /tmp/tmpdj401aak.rs:18:12\n   |\n\
    18 |     mad / (f64::from(usize::MAX as usize) - f64::from(numbers.len()))\n \
    \  |            ^^^^^^^^^ the trait `From<usize>` is not implemented for `f64`\n\
    \   |\n   = help: the following other types implement trait `From<T>`:\n     \
    \        <f32 as From<i16>>\n             <f32 as From<i8>>\n             <f32\
    \ as From<u16>>\n             <f32 as From<u8>>\n             <f64 as From<f32>>\n\
    \             <f64 as From<i16>>\n             <f64 as From<i32>>\n          \
    \   <f64 as From<i8>>\n           and 67 others\n\nerror[E0277]: the trait bound\
    \ `f64: From<usize>` is not satisfied\n  --> /tmp/tmpdj401aak.rs:18:45\n   |\n\
    18 |     mad / (f64::from(usize::MAX as usize) - f64::from(numbers.len()))\n \
    \  |                                             ^^^^^^^^^ the trait `From<usize>`\
    \ is not implemented for `f64`\n   |\n   = help: the following other types implement\
    \ trait `From<T>`:\n             <f32 as From<i16>>\n             <f32 as From<i8>>\n\
    \             <f32 as From<u16>>\n             <f32 as From<u8>>\n           \
    \  <f64 as From<f32>>\n             <f64 as From<i16>>\n             <f64 as From<i32>>\n\
    \             <f64 as From<i8>>\n           and 67 others\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    let\
    \ mut variance = numbers.iter().map(|x| x - mean).sum::<f64>() / numbers.len();\n\
    \n    if variance < 0 {\n        mean += variance as f64;\n    }\n\n    mean\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpy7b8fazf.rs:9:48\n\
    \  |\n9 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n  |\
    \                                                ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror[E0277]: cannot\
    \ divide `f64` by `usize`\n  --> /tmp/tmpy7b8fazf.rs:10:70\n   |\n10 |     let\
    \ mut variance = numbers.iter().map(|x| x - mean).sum::<f64>() / numbers.len();\n\
    \   |                                                                      ^ no\
    \ implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is\
    \ not implemented for `f64`\n   = help: the following other types implement trait\
    \ `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n\
    \             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n  \
    \           <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n      \
    \       <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n        \
    \   and 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n\
    \    let mut deviations = Vec::new();\n    for x in numbers {\n        deviations.push(x\
    \ - mean);\n        mean = mean.saturating_add(x);\n    }\n    deviations.iter().sum::<f64>()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `saturating_add` found for type `f64` in\
    \ the current scope\n  --> /tmp/tmprpaa16a6.rs:13:21\n   |\n13 |         mean\
    \ = mean.saturating_add(x);\n   |                     ^^^^^^^^^^^^^^ method not\
    \ found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().fold(0.0, |sum, x| sum + x);\n    mean\
    \ / numbers.size() as f64\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<f64>` in the\
    \ current scope\n  --> /tmp/tmpxj8wsk_9.rs:10:20\n   |\n10 |     mean / numbers.size()\
    \ as f64\n   |                    ^^^^ help: there is an associated function with\
    \ a similar name: `resize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| x.abs()).sum()\n        .div(numbers.len())\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp8qnivnpa.rs:9:37\n\
    \  |\n9 |     numbers.iter().map(|x| x.abs()).sum()\n  |                     \
    \                ^^^ cannot infer type for type parameter `S` declared on the\
    \ associated function `sum`\n  |\n  = note: type must be known at this point\n\
    help: consider specifying the type argument in the method call\n  |\n9 |     numbers.iter().map(|x|\
    \ x.abs()).sum::<S>()\n  |                                        +++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut deviation = 0.0;\n    for n in numbers {\n        deviation +=\
    \ std::f64::abs(n - numbers.iter().sum::<f64>() / numbers.len());\n    }\n   \
    \ deviation / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmpyuym_npx.rs:11:32\n\
    \   |\n11 |         deviation += std::f64::abs(n - numbers.iter().sum::<f64>()\
    \ / numbers.len());\n   |                                ^^^ not found in `std::f64`\n\
    \nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpyuym_npx.rs:11:68\n\
    \   |\n11 |         deviation += std::f64::abs(n - numbers.iter().sum::<f64>()\
    \ / numbers.len());\n   |                                                    \
    \                ^ no implementation for `f64 / usize`\n   |\n   = help: the trait\
    \ `Div<usize>` is not implemented for `f64`\n   = help: the following other types\
    \ implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n          \
    \   <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n            \
    \ <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a\
    \ i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize\
    \ as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot divide `{float}`\
    \ by `usize`\n  --> /tmp/tmpyuym_npx.rs:13:15\n   |\n13 |     deviation / numbers.len()\n\
    \   |               ^ no implementation for `{float} / usize`\n   |\n   = help:\
    \ the trait `Div<usize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean_abs = f64::Nano::zero();\n    let mut count = f64::Nano::zero();\n\
    \    for number in numbers {\n        let delta = number - mean_abs;\n       \
    \ mean_abs += delta;\n        count += 1.0;\n    }\n    mean_abs / count\n}\n\n\
    fn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0223]: ambiguous associated type\n --> /tmp/tmp9b85po9i.rs:9:24\n\
    \  |\n9 |     let mut mean_abs = f64::Nano::zero();\n  |                     \
    \   ^^^^^^^^^ help: use fully-qualified syntax: `<f64 as Trait>::Nano`\n\nerror[E0223]:\
    \ ambiguous associated type\n  --> /tmp/tmp9b85po9i.rs:10:21\n   |\n10 |     let\
    \ mut count = f64::Nano::zero();\n   |                     ^^^^^^^^^ help: use\
    \ fully-qualified syntax: `<f64 as Trait>::Nano`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0223`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    if numbers.is_empty() {\n        panic!(\"Cannot calculate mean absolute\
    \ deviation for a vector of length 0\");\n    }\n    let mut mean = f64::NAN;\n\
    \    let mut deviation = f64::NAN;\n    for n in numbers {\n        mean += n;\n\
    \    }\n    for n in numbers {\n        deviation += std::f64::abs(n - mean);\n\
    \    }\n    deviation / (numbers.len() as f64)\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmpucj4ep_q.rs:18:32\n\
    \   |\n18 |         deviation += std::f64::abs(n - mean);\n   |              \
    \                  ^^^ not found in `std::f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .enumerate()\n        .map(|(i, number)| {\n\
    \            if i % 2 == 0 {\n                number\n            } else {\n \
    \               (number - numbers.iter().skip(i).sum() / numbers.len() as f64).abs()\n\
    \            }\n        })\n        .sum::<f64>() / numbers.len()\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpb7u3_6ai.rs:15:17\n\
    \   |\n15 |                 (number - numbers.iter().skip(i).sum() / numbers.len()\
    \ as f64).abs()\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ cannot infer type\n   |\n   = note: type must be known at this point\n\nerror[E0277]:\
    \ cannot divide `f64` by `usize`\n  --> /tmp/tmpb7u3_6ai.rs:18:23\n   |\n18 |\
    \         .sum::<f64>() / numbers.len()\n   |                       ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0282.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = numbers.iter().sum() / numbers.size() as f64;\n \
    \   let mut diffs: Vec<f64> = numbers.iter().map(|x| x - mean).collect();\n  \
    \  mean.abs().sqrt().expect(\"mean must not equal 0\");\n    let mut mad: f64\
    \ = 0.0;\n    for i in diffs.iter() {\n        mad += i * i;\n    }\n    mad /\
    \ diffs.len() as f64\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<f64>` in the\
    \ current scope\n --> /tmp/tmpm1z7zo2v.rs:9:56\n  |\n9 |     let mut mean: f64\
    \ = numbers.iter().sum() / numbers.size() as f64;\n  |                       \
    \                                 ^^^^ help: there is an associated function with\
    \ a similar name: `resize`\n\nerror[E0599]: no method named `expect` found for\
    \ type `f64` in the current scope\n  --> /tmp/tmpm1z7zo2v.rs:11:23\n   |\n11 |\
    \     mean.abs().sqrt().expect(\"mean must not equal 0\");\n   |             \
    \          ^^^^^^ help: there is an associated function with a similar name: `exp`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum: f64 = 0.0;\n    for n in numbers.iter() {\n        sum +=\
    \ n.abs();\n    }\n    sum.sqrt()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.7320508075688772`,\n right: `0.5`', /tmp/tmpubc3p9hh.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| x.abs()).sum::<f64>() / numbers.len()\n}\n\nfn\
    \ main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmp4o1bfap4.rs:9:50\n\
    \  |\n9 |     numbers.iter().map(|x| x.abs()).sum::<f64>() / numbers.len()\n \
    \ |                                                  ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0;\n    for number in numbers {\n        sum += number;\n\
    \    }\n    let mean = sum / numbers.len();\n    numbers.iter().map(|x| {\n  \
    \      std::f64::from(x.abs_subn(mean))\n    }).sum() / numbers.len()\n}\n\nfn\
    \ main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `from` in module `std::f64`\n  --> /tmp/tmp1tsy2rks.rs:15:19\n\
    \   |\n15 |         std::f64::from(x.abs_subn(mean))\n   |                   ^^^^\
    \ not found in `std::f64`\n\nerror[E0277]: cannot divide `f64` by `usize`\n  -->\
    \ /tmp/tmp1tsy2rks.rs:13:20\n   |\n13 |     let mean = sum / numbers.len();\n\
    \   |                    ^ no implementation for `f64 / usize`\n   |\n   = help:\
    \ the trait `Div<usize>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0599]: no method\
    \ named `abs_subn` found for reference `&f64` in the current scope\n  --> /tmp/tmp1tsy2rks.rs:15:26\n\
    \   |\n15 |         std::f64::from(x.abs_subn(mean))\n   |                   \
    \       ^^^^^^^^ help: there is an associated function with a similar name: `abs_sub`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0425, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut deviations: Vec<_> = numbers.iter().map(|x| x - numbers[0]).collect();\n\
    \    deviations.push(0.);\n    let mut mean = numbers[0];\n    for d in deviations\
    \ {\n        mean += d;\n    }\n    mean / deviations.len()\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpw_mjzpah.rs:15:10\n\
    \   |\n15 |     mean / deviations.len()\n   |          ^ no implementation for\
    \ `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n  \
    \           <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n      \
    \       <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n        \
    \     <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n            \
    \ <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    let mut squared_diffs = Vec::new();\n \
    \   for d in numbers {\n        mean += d;\n        squared_diffs.push(d * d);\n\
    \    }\n    mean /= numbers.len();\n    let mut mad_sum = 0.0; // accumulated\
    \ sum of squares deviation\n    for d in squared_diffs {\n        let mad = (d/numbers).abs();\n\
    \        mad_sum += mad;\n    }\n    mad_sum / numbers.len()\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide-assign `f64` by `usize`\n  --> /tmp/tmpi398l710.rs:15:10\n\
    \   |\n15 |     mean /= numbers.len();\n   |          ^^ no implementation for\
    \ `f64 /= usize`\n   |\n   = help: the trait `DivAssign<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot divide `f64` by `Vec<f64>`\n  --> /tmp/tmpi398l710.rs:18:21\n\
    \   |\n18 |         let mad = (d/numbers).abs();\n   |                     ^ no\
    \ implementation for `f64 / Vec<f64>`\n   |\n   = help: the trait `Div<Vec<f64>>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `{float}` by `usize`\n\
    \  --> /tmp/tmpi398l710.rs:21:13\n   |\n21 |     mad_sum / numbers.len()\n   |\
    \             ^ no implementation for `{float} / usize`\n   |\n   = help: the\
    \ trait `Div<usize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|number| f64::abs(number - numbers.iter().fold(0.0,\
    \ |sum, number| sum + number)))\n        .sum::<f64>()\n}\n\nfn main() {\n   \
    \ let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3.0`,\n right: `0.5`', /tmp/tmpw__99xia.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|x| f64::abs(x - f64::mean(numbers)))\n\
    \        .sum()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `mean` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmp6rnw1c_w.rs:10:36\n   |\n10 |    \
    \     .map(|x| f64::abs(x - f64::mean(numbers)))\n   |                       \
    \             ^^^^ function or associated item not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    if numbers.is_empty() {\n        return 0.0;\n    }\n    // If we're\
    \ dealing with a single value the absolute value\n    // is just that single value.\n\
    \    if numbers.len() == 1 {\n        return numbers[0] as f64;\n    }\n    let\
    \ mut sum = 0.0;\n    for n in numbers {\n        sum += *n as f64;\n    }\n \
    \   sum as f64 / numbers.len() as f64\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmpymu7s66o.rs:19:16\n\
    \   |\n19 |         sum += *n as f64;\n   |                ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    if numbers.len() == 0 {\n        0.0\n    } else {\n        let mut sum\
    \ = 0.0;\n        for n in numbers {\n            sum += n;\n        }\n     \
    \   sum / numbers.len()\n    }\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpym6t73rb.rs:16:13\n\
    \   |\n16 |         sum / numbers.len()\n   |             ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // find the mean\n    let mean = numbers.iter().sum() / numbers.len();\n\
    \    // calculate the absolute deviation\n    let mut deviations = Vec::new();\n\
    \    for num in numbers {\n        let abs_diff = abs(num - mean);\n        deviations.push(abs_diff);\n\
    \    }\n    // return the mean\n    deviations.iter().sum() / deviations.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmprmf5_qan.rs:14:24\n\
    \   |\n14 |         let abs_diff = abs(num - mean);\n   |                    \
    \    ^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mu: f64 = 0.0;\n    for x in numbers.iter() {\n        mu +=\
    \ std::f64::abs(x - std::f64::mean(*numbers));\n    }\n    mu / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmphh5it8gy.rs:11:25\n\
    \   |\n11 |         mu += std::f64::abs(x - std::f64::mean(*numbers));\n   | \
    \                        ^^^ not found in `std::f64`\n\nerror[E0425]: cannot find\
    \ function `mean` in module `std::f64`\n  --> /tmp/tmphh5it8gy.rs:11:43\n   |\n\
    11 |         mu += std::f64::abs(x - std::f64::mean(*numbers));\n   |        \
    \                                   ^^^^ not found in `std::f64`\n\nerror[E0277]:\
    \ cannot divide `f64` by `usize`\n  --> /tmp/tmphh5it8gy.rs:13:8\n   |\n13 | \
    \    mu / numbers.len()\n   |        ^ no implementation for `f64 / usize`\n \
    \  |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0_f64;\n    for n in numbers.iter() {\n        sum +=\
    \ n;\n    }\n    sum / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpw5hh2cz_.rs:13:9\n\
    \   |\n13 |     sum / numbers.len()\n   |         ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0;\n    for number in numbers {\n        sum += *number;\n\
    \    }\n    sum / (numbers.len() as f64)\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmpvlk9d0a8.rs:11:16\n\
    \   |\n11 |         sum += *number;\n   |                ^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = numbers.iter().sum();\n    let mut mean = numbers.iter().sum()\
    \ / numbers.len();\n    for i in numbers.iter().skip(1) {\n        let difference\
    \ = i - mean;\n        sum = sum + std::f64::from(difference) * (i - mean);\n\
    \        mean = sum / numbers.len() as f64;\n    }\n    mean\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `from` in module `std::f64`\n  --> /tmp/tmprffzc995.rs:13:31\n\
    \   |\n13 |         sum = sum + std::f64::from(difference) * (i - mean);\n   |\
    \                               ^^^^ not found in `std::f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers[0];\n    for i in numbers.iter() {\n        mean\
    \ += i;\n    }\n    mean /= numbers.length;\n    let mut total = 0.0\n    for\
    \ n in numbers {\n        total += ((n - mean) as f64);\n    }\n    total / numbers.length\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmp8f6xk854.rs:14:24\n\
    \   |\n14 |     let mut total = 0.0\n   |                        ^ help: add `;`\
    \ here\n15 |     for n in numbers {\n   |     --- unexpected token\n\nwarning:\
    \ unnecessary parentheses around assigned value\n  --> /tmp/tmp8f6xk854.rs:16:18\n\
    \   |\n16 |         total += ((n - mean) as f64);\n   |                  ^   \
    \              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n16 -         total += ((n - mean) as f64);\n\
    16 +         total += (n - mean) as f64;\n   | \n\nerror[E0609]: no field `length`\
    \ on type `Vec<f64>`\n  --> /tmp/tmp8f6xk854.rs:13:21\n   |\n13 |     mean /=\
    \ numbers.length;\n   |                     ^^^^^^ unknown field\n\nerror[E0609]:\
    \ no field `length` on type `Vec<f64>`\n  --> /tmp/tmp8f6xk854.rs:18:21\n   |\n\
    18 |     total / numbers.length\n   |                     ^^^^^^ unknown field\n\
    \nerror: aborting due to 3 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0609`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut deviations: Vec<f64> = Vec::new();\n    let mut total_sum: f64\
    \ = 0.0;\n\n    for number in numbers {\n        total_sum += number;\n      \
    \  deviations.push(total_sum);\n    }\n\n    let mut mean_of_deviation: f64 =\
    \ 0.0;\n\n    for number in numbers {\n        let mut difference: f64 = number\
    \ - mean_of_deviation;\n        let mut deviation = difference.abs();\n      \
    \  deviations.push(deviation);\n        mean_of_deviation = mean_of_deviation\
    \ + deviation;\n    }\n\n    deviations\n        .iter()\n        .fold(0.0, |sum,\
    \ element| sum + element)\n        .unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpiafwf26p.rs:29:10\n   |\n29 |         .unwrap()\n   | \
    \         ^^^^^^ method not found in `f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // Calculate the mean.\n    let mut sum = numbers.iter().sum::<f64>()\
    \ / numbers.len();\n    // Calculate the mean absolute deviation for each number.\n\
    \    for i in numbers {\n        sum += i\n    }\n    // Divide by the mean of\
    \ the numbers.\n    sum / numbers.iter().sum::<f64>()\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp64yl3q0k.rs:10:47\n\
    \   |\n10 |     let mut sum = numbers.iter().sum::<f64>() / numbers.len();\n \
    \  |                                               ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    for x in numbers {\n        mean += x;\n\
    \    }\n    mean /= numbers.len();\n\n    let mut mad: f64 = 0.0;\n    for x in\
    \ numbers {\n        mad += std::fabs(x - mean);\n    }\n    mad = mad/numbers.len();\n\
    \n    mad\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fabs` in crate `std`\n  --> /tmp/tmpax2ukqzh.rs:17:21\n\
    \   |\n17 |         mad += std::fabs(x - mean);\n   |                     ^^^^\
    \ not found in `std`\n\nerror[E0277]: cannot divide-assign `f64` by `usize`\n\
    \  --> /tmp/tmpax2ukqzh.rs:13:10\n   |\n13 |     mean /= numbers.len();\n   |\
    \          ^^ no implementation for `f64 /= usize`\n   |\n   = help: the trait\
    \ `DivAssign<usize>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `DivAssign<Rhs>`:\n             <f32 as DivAssign<&f32>>\n\
    \             <f32 as DivAssign>\n             <f64 as DivAssign<&f64>>\n    \
    \         <f64 as DivAssign>\n             <i128 as DivAssign<&i128>>\n      \
    \       <i128 as DivAssign>\n             <i16 as DivAssign<&i16>>\n         \
    \    <i16 as DivAssign>\n           and 20 others\n\nerror[E0277]: cannot divide\
    \ `f64` by `usize`\n  --> /tmp/tmpax2ukqzh.rs:19:14\n   |\n19 |     mad = mad/numbers.len();\n\
    \   |              ^ no implementation for `f64 / usize`\n   |\n   = help: the\
    \ trait `Div<usize>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut average = f64::from(0.0);\n\n    for n in numbers {\n       \
    \ average += n * n;\n    }\n    average /= numbers.len();\n\n    let mut total_sum\
    \ = f64::from(0.0);\n\n    for n in numbers {\n        total_sum += ((n - average)\
    \ * (n - average));\n    }\n\n    (total_sum / numbers).sqrt()\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpt97bxp1m.rs:19:22\n\
    \   |\n19 |         total_sum += ((n - average) * (n - average));\n   |      \
    \                ^                             ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n19 -         total_sum\
    \ += ((n - average) * (n - average));\n19 +         total_sum += (n - average)\
    \ * (n - average);\n   | \n\nerror[E0277]: cannot divide-assign `f64` by `usize`\n\
    \  --> /tmp/tmpt97bxp1m.rs:14:13\n   |\n14 |     average /= numbers.len();\n \
    \  |             ^^ no implementation for `f64 /= usize`\n   |\n   = help: the\
    \ trait `DivAssign<usize>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `DivAssign<Rhs>`:\n             <f32 as DivAssign<&f32>>\n\
    \             <f32 as DivAssign>\n             <f64 as DivAssign<&f64>>\n    \
    \         <f64 as DivAssign>\n             <i128 as DivAssign<&i128>>\n      \
    \       <i128 as DivAssign>\n             <i16 as DivAssign<&i16>>\n         \
    \    <i16 as DivAssign>\n           and 20 others\n\nerror[E0277]: cannot divide\
    \ `f64` by `Vec<f64>`\n  --> /tmp/tmpt97bxp1m.rs:22:16\n   |\n22 |     (total_sum\
    \ / numbers).sqrt()\n   |                ^ no implementation for `f64 / Vec<f64>`\n\
    \   |\n   = help: the trait `Div<Vec<f64>>` is not implemented for `f64`\n   =\
    \ help: the following other types implement trait `Div<Rhs>`:\n             <&'a\
    \ f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128\
    \ as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as\
    \ Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut total = 0.0f;\n    for x in numbers {\n        total += x;\n\
    \    }\n    total as f64 / numbers.len() as f64\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error: invalid suffix `f` for float literal\n --> /tmp/tmp_myvsvtg.rs:9:21\n\
    \  |\n9 |     let mut total = 0.0f;\n  |                     ^^^^ invalid suffix\
    \ `f`\n  |\n  = help: valid suffixes are `f32` and `f64`\n\nerror: aborting due\
    \ to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    if numbers.len() < 1 {\n        return 0.0;\n    }\n    let mut mean\
    \ = numbers.iter().sum() / numbers.len();\n    let mut deviation = 0.0;\n    for\
    \ n in numbers {\n        deviation += f64::from(n - mean);\n    }\n    deviation\
    \ / (numbers.len() as f64)\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpov78hty3.rs:12:9\n\
    \   |\n12 |     let mut mean = numbers.iter().sum() / numbers.len();\n   |   \
    \      ^^^^^^^^ consider giving `mean` a type\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| x.abs()).mean().unwrap()\n}\n\nfn main() {\n \
    \   let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `mean` found for struct `Map` in the current\
    \ scope\n --> /tmp/tmp15z_l34p.rs:9:37\n  |\n9 |     numbers.iter().map(|x| x.abs()).mean().unwrap()\n\
    \  |                                     ^^^^ method not found in `Map<std::slice::Iter<'_,\
    \ f64>, [closure@/tmp/tmp15z_l34p.rs:9:24: 9:35]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
