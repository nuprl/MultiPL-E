name: HumanEval_37_sort_even
language: rust
results:
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut sorted =\
    \ l;\n    for i in 0..sorted.len() {\n        if i % 2 == 0 {\n            sorted.swap(i,\
    \ sorted.len() - i - 1);\n        }\n    }\n    sorted\n}\n\nfn main() {\n   \
    \ let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `sorted` as immutable because it is also borrowed\
    \ as mutable\n  --> /tmp/tmpprprz1e6.rs:12:28\n   |\n12 |             sorted.swap(i,\
    \ sorted.len() - i - 1);\n   |             ---------------^^^^^^^^^^^^---------\n\
    \   |             |      |       |\n   |             |      |       immutable\
    \ borrow occurs here\n   |             |      mutable borrow later used by call\n\
    \   |             mutable borrow occurs here\n   |\nhelp: try adding a local storing\
    \ this argument...\n  --> /tmp/tmpprprz1e6.rs:12:28\n   |\n12 |             sorted.swap(i,\
    \ sorted.len() - i - 1);\n   |                            ^^^^^^^^^^^^\nhelp:\
    \ ...and then using that local as the argument to this call\n  --> /tmp/tmpprprz1e6.rs:12:13\n\
    \   |\n12 |             sorted.swap(i, sorted.len() - i - 1);\n   |          \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().filter_map(|x|\
    \ *x).cloned().zip(0..l.len() - 1).map(|(x, y)| {\n        (x.clone(), y)\n  \
    \  }).cloned().sorted().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpffqpema3.rs:9:29\n  |\n9 |\
    \     l.iter().filter_map(|x| *x).cloned().zip(0..l.len() - 1).map(|(x, y)| {\n\
    \  |                             ^^ expected enum `Option`, found `isize`\n  |\n\
    \  = note: expected enum `Option<_>`\n             found type `isize`\nhelp: try\
    \ wrapping the expression in `Some`\n  |\n9 |     l.iter().filter_map(|x| Some(*x)).cloned().zip(0..l.len()\
    \ - 1).map(|(x, y)| {\n  |                             +++++  +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| {\n        if a % 2 == 0 {\n            a\n        } else {\n           \
    \ b\n        }\n    });\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq40ajyd1.rs:11:13\n   |\n\
    11 |             a\n   |             ^ expected enum `std::cmp::Ordering`, found\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq40ajyd1.rs:13:13\n\
    \   |\n13 |             b\n   |             ^ expected enum `std::cmp::Ordering`,\
    \ found `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(i, x)| x).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmptvtc4o2w.rs:9:70\n     |\n9\
    \    |     l.iter().enumerate().filter(|(i, _)| i % 2 == 0).map(|(i, x)| x).collect()\n\
    \     |                                                                      ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().enumerate().sort_by(|(&a,\
    \ &b), index| (index as usize) % 2 == 0).map(|index| {\n        (index as usize)\
    \ / 2\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `Enumerate` in\
    \ the current scope\n --> /tmp/tmpaqhjqdpf.rs:9:35\n  |\n9 |     l.iter().cloned().enumerate().sort_by(|(&a,\
    \ &b), index| (index as usize) % 2 == 0).map(|index| {\n  |                  \
    \                 ^^^^^^^ method not found in `Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter_mut().enumerate().for_each(|(_, v)| {\n        if *v % 2 == 0 {\n\
    \            *v as isize\n        } else {\n            *v = *v + 1 as isize;\n\
    \        }\n    });\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj6oxcatb.rs:12:13\n   |\n\
    11 | /         if *v % 2 == 0 {\n12 | |             *v as isize\n   | |      \
    \       ^^^^^^^^^^^ expected `()`, found `isize`\n13 | |         } else {\n14\
    \ | |             *v = *v + 1 as isize;\n15 | |         }\n   | |_________- expected\
    \ this to be `()`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even_index\
    \ = 0;\n    let mut odd_index = 1;\n    let mut i = 0;\n    let mut odd_value\
    \ = 0;\n    let mut even_value = 0;\n    for v in l.iter() {\n        if i % 2\
    \ == 0 {\n            even_value = v;\n        } else {\n            odd_value\
    \ = v;\n        }\n        i += 1;\n    }\n    let mut even_index = even_index\
    \ + odd_index;\n    let mut odd_index = odd_index + even_index;\n    for v in\
    \ l.iter() {\n        if odd_index >= even_index {\n            l[odd_index -\
    \ even_index] = v;\n        } else {\n            l[odd_index] = v;\n        }\n\
    \        odd_index += 1;\n    }\n    l\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuk7dma_2.rs:16:26\n   |\n\
    13 |     let mut even_value = 0;\n   |                          - expected due\
    \ to this value\n...\n16 |             even_value = v;\n   |                 \
    \         ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |             even_value = *v;\n   |                  \
    \        +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuk7dma_2.rs:18:25\n\
    \   |\n12 |     let mut odd_value = 0;\n   |                         - expected\
    \ due to this value\n...\n18 |             odd_value = v;\n   |              \
    \           ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n18 |             odd_value = *v;\n   |                   \
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuk7dma_2.rs:26:41\n\
    \   |\n26 |             l[odd_index - even_index] = v;\n   |             -------------------------\
    \   ^ expected `isize`, found `&isize`\n   |             |\n   |             expected\
    \ due to the type of this binding\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n26 |             l[odd_index - even_index] = *v;\n   |                \
    \                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuk7dma_2.rs:28:28\n\
    \   |\n28 |             l[odd_index] = v;\n   |             ------------   ^ expected\
    \ `isize`, found `&isize`\n   |             |\n   |             expected due to\
    \ the type of this binding\n   |\nhelp: consider dereferencing the borrow\n  \
    \ |\n28 |             l[odd_index] = *v;\n   |                            +\n\n\
    error: aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    if l.len() % 2 ==\
    \ 0 {\n        return l;\n    }\n\n    let mut even = vec![];\n    let mut odd\
    \ = vec![];\n\n    for x in l {\n        if x % 2 == 0 {\n            even.push(x);\n\
    \        } else {\n            odd.push(x);\n        }\n    }\n\n    let mut even\
    \ = even.clone();\n    let mut odd = odd.clone();\n\n    for i in even.iter_mut().rev()\
    \ {\n        *i = odd.pop();\n    }\n\n    even.extend(odd.iter());\n\n    even\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptbfy9beb.rs:28:14\n   |\n\
    28 |         *i = odd.pop();\n   |         --   ^^^^^^^^^ expected `isize`, found\
    \ enum `Option`\n   |         |\n   |         expected due to the type of this\
    \ binding\n   |\n   = note: expected type `isize`\n              found enum `Option<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = vec![];\n\
    \    let mut odd = vec![];\n\n    for i in 0..l.len() {\n        if i & 1 == 0\
    \ {\n            even.push(l[i]);\n        } else {\n            odd.push(l[i]);\n\
    \        }\n    }\n\n    let mut even1 = vec![];\n    let mut odd1 = vec![];\n\
    \n    for i in even.clone() {\n        even1.push(i);\n    }\n\n    for i in odd.clone()\
    \ {\n        odd1.push(i);\n    }\n\n    odd1.sort(|a, b| a < b);\n    even1.sort(|a,\
    \ b| a < b);\n\n    even1.extend(odd1);\n    even1\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpqlv1dqve.rs:31:10\n    |\n31  |     odd1.sort(|a, b| a < b);\n\
    \    |          ^^^^ ------------ supplied 1 argument\n    |          |\n    |\
    \          expected 0 arguments\n    |\nnote: associated function defined here\n\
    \nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpqlv1dqve.rs:32:11\n    |\n32  |     even1.sort(|a, b| a < b);\n\
    \    |           ^^^^ ------------ supplied 1 argument\n    |           |\n  \
    \  |           expected 0 arguments\n    |\nnote: associated function defined\
    \ here\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n\
    \    l.sort_unstable_by(|a, b| {\n        if a % 2 == 1 {\n            a\n   \
    \     } else {\n            b\n        }\n    });\n    l\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkz74ppsv.rs:12:13\n   |\n\
    12 |             a\n   |             ^ expected enum `std::cmp::Ordering`, found\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkz74ppsv.rs:14:13\n\
    \   |\n14 |             b\n   |             ^ expected enum `std::cmp::Ordering`,\
    \ found `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    if l.len() == 0 {\n\
    \        return l;\n    }\n    let mut even = l.iter().cloned().peekable();\n\
    \    let mut odd = even.peekable();\n    let mut even_values = even.peekable();\n\
    \    let mut odd_values = odd.peekable();\n    let mut sorted_list = Vec::new();\n\
    \    while let Some(even_value) = even_values.next() {\n        if even_values.peek().is_none()\
    \ {\n            break;\n        }\n        let value = odd_values.next()?;\n\
    \        if even.peek().unwrap() == value {\n            sorted_list.push(value);\n\
    \            odd.next();\n        } else {\n            odd.next();\n        \
    \    odd_values.next(odd_values.peek().unwrap());\n        }\n    }\n    odd_values.take_while(|n|\
    \ odd.peek().unwrap() != n);\n    even_values.take(odd_values.peek().unwrap());\n\
    \    sorted_list\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the `?` operator can only be used in a function that returns\
    \ `Result` or `Option` (or another type that implements `FromResidual`)\n  -->\
    \ /tmp/tmp4bkqpszx.rs:21:38\n   |\n8  | / fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n9  | |     if l.len() == 0 {\n10 | |         return l;\n11 | |     }\n...\
    \  |\n21 | |         let value = odd_values.next()?;\n   | |                 \
    \                     ^ cannot use the `?` operator in a function that returns\
    \ `Vec<isize>`\n...  |\n32 | |     sorted_list\n33 | | }\n   | |_- this function\
    \ should return `Result` or `Option` to accept `?`\n   |\n   = help: the trait\
    \ `FromResidual<Option<Infallible>>` is not implemented for `Vec<isize>`\n\nerror[E0277]:\
    \ can't compare `&isize` with `isize`\n  --> /tmp/tmp4bkqpszx.rs:22:33\n   |\n\
    22 |         if even.peek().unwrap() == value {\n   |                        \
    \         ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait\
    \ `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror[E0061]:\
    \ this function takes 0 arguments but 1 argument was supplied\n  --> /tmp/tmp4bkqpszx.rs:27:24\n\
    \   |\n27 |             odd_values.next(odd_values.peek().unwrap());\n   |   \
    \                     ^^^^ -------------------------- supplied 1 argument\n  \
    \ |                        |\n   |                        expected 0 arguments\n\
    \   |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4bkqpszx.rs:31:22\n   |\n31 |     even_values.take(odd_values.peek().unwrap());\n\
    \   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found\
    \ `&isize`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    if l.len() <= 1 {\n\
    \        l\n    } else {\n        l.sort_unstable();\n        let mut l2 = Vec::new();\n\
    \        for i in l.iter_mut().rev() {\n            if i % 2 == 0 {\n        \
    \        l2[i] = l[i];\n            } else {\n                l2[i] = l[i] as\
    \ isize;\n            }\n        }\n        l2\n    }\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmpns7vrqat.rs:15:18\n\
    \   |\n15 |             if i % 2 == 0 {\n   |                - ^ - {integer}\n\
    \   |                |\n   |                &mut isize\n   |\nhelp: `%` can be\
    \ used on `isize`, you can dereference `i`\n   |\n15 |             if *i % 2 ==\
    \ 0 {\n   |                +\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `&mut isize`\n  --> /tmp/tmpns7vrqat.rs:16:17\n   |\n16 |               \
    \  l2[i] = l[i];\n   |                 ^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `&mut isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for\
    \ `usize`\n   = note: required because of the requirements on the impl of `Index<&mut\
    \ isize>` for `Vec<_>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by\
    \ `&mut isize`\n  --> /tmp/tmpns7vrqat.rs:16:25\n   |\n16 |                 l2[i]\
    \ = l[i];\n   |                         ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `&mut isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&mut isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[_]` cannot\
    \ be indexed by `&mut isize`\n  --> /tmp/tmpns7vrqat.rs:18:17\n   |\n18 |    \
    \             l2[i] = l[i] as isize;\n   |                 ^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `&mut isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<&mut isize>` for `Vec<_>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `&mut isize`\n  --> /tmp/tmpns7vrqat.rs:18:25\n   |\n18\
    \ |                 l2[i] = l[i] as isize;\n   |                         ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    let mut evenodd = l;\n    for i in even.iter().rev() {\n\
    \        evenodd.insert(i, even.iter().cloned().nth(i).unwrap());\n    }\n   \
    \ evenodd\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc6_my2z.rs:13:24\n   |\n\
    13 |         evenodd.insert(i, even.iter().cloned().nth(i).unwrap());\n   |  \
    \                      ^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphc6_my2z.rs:13:52\n   |\n13 |         evenodd.insert(i,\
    \ even.iter().cloned().nth(i).unwrap());\n   |                               \
    \                     ^ expected `usize`, found `&isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    if l.len() < 2 {\n\
    \        return l;\n    }\n    let mut l = l.to_vec();\n    for i in (0..l.len()\
    \ / 2).rev() {\n        l[i as usize] = l[i as usize].checked_add(i);\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwpmi67yu.rs:14:51\n   |\n\
    14 |         l[i as usize] = l[i as usize].checked_add(i);\n   |             \
    \                                      ^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n14 |         l[i as usize] = l[i as usize].checked_add(i.try_into().unwrap());\n\
    \   |                                                    ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwpmi67yu.rs:14:25\n   |\n14 |\
    \         l[i as usize] = l[i as usize].checked_add(i);\n   |         -------------\
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   | \
    \        |\n   |         expected due to the type of this binding\n   |\n   =\
    \ note: expected type `isize`\n              found enum `Option<isize>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    if l.len() % 2 !=\
    \ 0 {\n        let mut l = l.iter().cloned().collect::<Vec<_>>();\n        l[l.len()\
    \ - 1] = (l[l.len() - 1] as i32).saturating_add((l[l.len() - 1] as i32).saturating_add((l[l.len()\
    \ - 1] as i32).saturating_add((l[l.len() - 1] as i32).saturating_add((l[l.len()\
    \ - 1] as i32).saturating_add((l[l.len() - 1] as i32).saturating_add((l[l.len()\
    \ - 1] as i32).saturating_add((l[l.len() - 1] as i32).saturating_add(1)))))));\n\
    \        l.sort();\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp7n_qo3ud.rs:11:64\n\
    \   |\n9  |     if l.len() % 2 != 0 {\n   |                         - closing\
    \ delimiter possibly meant for this\n10 |         let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    11 |         l[l.len() - 1] = (l[l.len() - 1] as i32).saturating_add((l[l.len()\
    \ - 1] as i32).saturating_add((l[l.len() - 1] as i32).saturating...\n   |    \
    \                                                            ^ unclosed delimiter\n\
    12 |         l.sort();\n13 |     }\n   |     ^ mismatched closing delimiter\n\n\
    error: expected one of `)`, `,`, `.`, `?`, or an operator, found `;`\n  --> /tmp/tmp7n_qo3ud.rs:11:64\n\
    \   |\n11 | ...add((l[l.len() - 1] as i32).saturating_add((l[l.len() - 1] as i32).saturating_add((l[l.len()\
    \ - 1] as i32).saturating_add((l[l.len() - 1] as i32).saturating_add((l[l.len()\
    \ - 1] as i32).saturating_add((l[l.len() - 1] as i32).saturating_add((l[l.len()\
    \ - 1] as i32).saturating_add(1)))))));\n   |       ^ unclosed delimiter     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                             ^ help: `)` may belong here\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmp7n_qo3ud.rs:13:5\n   |\n13 |     }\n   |     ^ expected\
    \ expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7n_qo3ud.rs:11:26\n\
    \   |\n11 | ...   l[l.len() - 1] = (l[l.len() - 1] as i32).saturating_add((l[l.len()\
    \ - 1] as i32).saturating_add((l[l.len() - 1] as i32).saturating_add((l[l.len()\
    \ - 1] as i32).saturating_add((l[l.len() - 1] as i32).saturating_add((l[l.len()\
    \ - 1] as i32).saturating_add((l[l.len() - 1] as i32).saturating_add((l[l.len()\
    \ - 1] as i32).saturating_add(1)))))...\n   |       --------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().enumerate().map(|(idx,\
    \ value)| {\n        if idx % 2 == 0 {\n            value\n        } else {\n\
    \            match idx {\n                0 => value,\n                _ => value,\n\
    \            }\n        }\n    }).sorted()\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmp4amb49v6.rs:18:8\n   |\n18 |     }).sorted()\n   |    \
    \    ^^^^^^ method not found in `Map<Enumerate<Cloned<std::slice::Iter<'_, isize>>>,\
    \ [closure@/tmp/tmp4amb49v6.rs:9:39: 18:6]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().sort_unstable().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_unstable` found for struct `Cloned`\
    \ in the current scope\n --> /tmp/tmpdbd2ewdd.rs:9:23\n  |\n9 |     l.iter().cloned().sort_unstable().collect()\n\
    \  |                       ^^^^^^^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().enumerate().filter(|&(i,\
    \ e)| {\n        // Even indices are already sorted\n        i % 2 == 0\n    }).map(|&(i,\
    \ e)| {\n        // Sort the even indices\n        sort_in_odd_indices(e, l)\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sort_in_odd_indices` in this scope\n\
    \  --> /tmp/tmpc6n38bfd.rs:14:9\n   |\n14 |         sort_in_odd_indices(e, l)\n\
    \   |         ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc6n38bfd.rs:12:13\n   |\n12 |     }).map(|&(i, e)| {\n\
    \   |             ^^^^^^-\n   |             |     |\n   |             |     expected\
    \ due to this\n   |             expected tuple, found reference\n   |\n   = note:\
    \  expected tuple `(usize, isize)`\n           found reference `&_`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_by(|a, b|\
    \ b % 2)\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3duu1aeo.rs:9:22\n  |\n9 |\
    \     l.sort_by(|a, b| b % 2)\n  |                      ^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3duu1aeo.rs:9:5\n\
    \  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n  |                   \
    \             ---------- expected `Vec<isize>` because of return type\n9 |   \
    \  l.sort_by(|a, b| b % 2)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |\n  = note: expected struct `Vec<isize>`\n          found unit\
    \ type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort();\n    l.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpj7561n4w.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort();\n  |     ^^^^^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| {\n        match a % 2 {\n            0 => cmp::Ordering::Less,\n       \
    \     1 => cmp::Ordering::Greater,\n            _ => unreachable!(),\n       \
    \ }\n        match b % 2 {\n            0 => cmp::Ordering::Less,\n          \
    \  1 => cmp::Ordering::Greater,\n            _ => unreachable!(),\n        }\n\
    \    });\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmpiopq2tfh.rs:11:18\n   |\n11 |             0 => cmp::Ordering::Less,\n\
    \   |                  ^^^ use of undeclared crate or module `cmp`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `cmp`\n  --> /tmp/tmpiopq2tfh.rs:12:18\n\
    \   |\n12 |             1 => cmp::Ordering::Greater,\n   |                  ^^^\
    \ use of undeclared crate or module `cmp`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared crate or module `cmp`\n  --> /tmp/tmpiopq2tfh.rs:16:18\n \
    \  |\n16 |             0 => cmp::Ordering::Less,\n   |                  ^^^ use\
    \ of undeclared crate or module `cmp`\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared crate or module `cmp`\n  --> /tmp/tmpiopq2tfh.rs:17:18\n   |\n\
    17 |             1 => cmp::Ordering::Greater,\n   |                  ^^^ use of\
    \ undeclared crate or module `cmp`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut s = l.len();\n\
    \    s.checked_sub(1).cloned()\n        .into_iter()\n        .zip(l.iter().cloned())\n\
    \        .map(|(_, x)| {\n            x.checked_add(1, \"Odd\").ok()\n       \
    \ })\n        .collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n \
    \   assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpd46wwnxq.rs:10:22\n\
    \    |\n10  |       s.checked_sub(1).cloned()\n    |                        ^^^^^^\
    \ `Option<usize>` is not an iterator\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<usize>: Iterator`\n            which\
    \ is required by `&mut Option<usize>: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = vec![];\n\
    \    let mut odd = vec![];\n    for i in l.iter().rev() {\n        if i % 2 ==\
    \ 0 {\n            even = even.push(i);\n        } else {\n            odd = odd.push(i);\n\
    \        }\n    }\n    odd.sort();\n    even.extend(odd);\n    even.clone()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpevqmoiu6.rs:13:20\n   |\n\
    9  |     let mut even = vec![];\n   |                    ------ expected due to\
    \ this value\n...\n13 |             even = even.push(i);\n   |               \
    \     ^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<&isize>`\n           found unit type `()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpevqmoiu6.rs:15:19\n   |\n10 |     let mut odd = vec![];\n\
    \   |                   ------ expected due to this value\n...\n15 |         \
    \    odd = odd.push(i);\n   |                   ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |\n   = note: expected struct `Vec<&isize>`\n           found\
    \ unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpevqmoiu6.rs:20:5\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                \
    \                ---------- expected `Vec<isize>` because of return type\n...\n\
    20 |     even.clone()\n   |     ^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().filter_map(|x|\
    \ *x as isize).cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpi5w140tk.rs:9:38\n\
    \  |\n9 |     l.iter().cloned().filter_map(|x| *x as isize).cloned().collect()\n\
    \  |                                      ^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l2 = l.to_vec();\n\
    \    l2.sort_unstable();\n    l2\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpnhy4cnzb.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmp968p27ct.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by_key(|x|\
    \ *x)\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvgnqpl6h.rs:9:5\n  |\n8 |\
    \ fn sort_even(l: Vec<isize>) -> Vec<isize> {\n  |                           \
    \     ---------- expected `Vec<isize>` because of return type\n9 |     l.sort_unstable_by_key(|x|\
    \ *x)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    if l.len() <= 1 {\n\
    \        return l;\n    }\n    for i in 0..(l.len() - 1) {\n        if i % 2 ==\
    \ 0 {\n            continue;\n        }\n        if l[i] < l[i + 1] {\n      \
    \      let tmp = l[i];\n            l[i] = l[i + 1];\n            l[i + 1] = tmp;\n\
    \        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n \
    \   assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmp34ngxa9p.rs:18:13\n   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |              - help: consider changing this to be mutable: `mut l`\n\
    ...\n18 |             l[i] = l[i + 1];\n   |             ^ cannot borrow as mutable\n\
    \nerror[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmp34ngxa9p.rs:19:13\n   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |              - help: consider changing this to be mutable: `mut l`\n\
    ...\n19 |             l[i + 1] = tmp;\n   |             ^ cannot borrow as mutable\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut ls = l.len();\n\
    \    while ls > 0 {\n        if ls.is_even() {\n            ls /= 2;\n       \
    \ } else {\n            ls = ls / 2;\n        }\n    }\n    l\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_even` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmpo5vx5oa8.rs:11:15\n   |\n11 |         if ls.is_even() {\n\
    \   |               ^^^^^^^ method not found in `usize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize>\
    \ = l.to_vec();\n    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp2sbsk2mz.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.clone();\n\
    \    let mut odd = even.clone();\n    for i in 0..even.len() {\n        if i %\
    \ 2 == 0 {\n            even[even.len() - 1 - i].swap(&odd[odd.len() - 1 - i]);\n\
    \        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `swap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpj2w_64xv.rs:13:38\n   |\n13 |             even[even.len()\
    \ - 1 - i].swap(&odd[odd.len() - 1 - i]);\n   |                              \
    \        ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l.clone();\n    odd.sort_by_key(|&x| {\n        if x % 2 ==\
    \ 0 {\n            even = even.clone();\n            even.push(x);\n         \
    \   even\n        } else {\n            even.push(x);\n            even\n    \
    \    }\n    });\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n \
    \   assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0507]: cannot move out of `even`, a captured variable in an `FnMut`\
    \ closure\n  --> /tmp/tmp5lg70o35.rs:15:13\n   |\n9  |       let mut even = l;\n\
    \   |           -------- captured outer variable\n10 |       let mut odd = l.clone();\n\
    11 |       odd.sort_by_key(|&x| {\n   |  _____________________-\n12 | |      \
    \   if x % 2 == 0 {\n13 | |             even = even.clone();\n14 | |         \
    \    even.push(x);\n15 | |             even\n   | |             ^^^^ move occurs\
    \ because `even` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    ...  |\n19 | |         }\n20 | |     });\n   | |_____- captured by this `FnMut`\
    \ closure\n\nerror[E0507]: cannot move out of `even`, a captured variable in an\
    \ `FnMut` closure\n  --> /tmp/tmp5lg70o35.rs:18:13\n   |\n9  |       let mut even\
    \ = l;\n   |           -------- captured outer variable\n10 |       let mut odd\
    \ = l.clone();\n11 |       odd.sort_by_key(|&x| {\n   |  _____________________-\n\
    12 | |         if x % 2 == 0 {\n13 | |             even = even.clone();\n14 |\
    \ |             even.push(x);\n...  |\n18 | |             even\n   | |       \
    \      ^^^^ move occurs because `even` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n19 | |         }\n20 | |     });\n   | |_____- captured by\
    \ this `FnMut` closure\n\nerror[E0382]: borrow of moved value: `l`\n  --> /tmp/tmp5lg70o35.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l.clone();\n   |                   ^^^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0382, E0507.\nFor more information about an error, try\
    \ `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    even.extend(even.iter().cloned());\n    even\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `even` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpmi4l9x1e.rs:11:5\n   |\n11 |     even.extend(even.iter().cloned());\n\
    \   |     ^^^^^------^-----------^^^^^^^^^^\n   |     |    |      |\n   |    \
    \ |    |      immutable borrow occurs here\n   |     |    immutable borrow later\
    \ used by call\n   |     mutable borrow occurs here\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    if l.len() < 2 {\n\
    \        return l;\n    }\n    let mut even: Vec<isize> = l.iter().cloned().collect();\n\
    \    even.sort();\n    let mut odd: Vec<isize> = l.iter().cloned().collect();\n\
    \    odd.sort();\n    for i in 0..even.len() {\n        odd[i] = even[i];\n  \
    \  }\n    even.clone() + odd\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp4t7tdhl9.rs:19:18\n\
    \   |\n19 |     even.clone() + odd\n   |     ------------ ^ --- Vec<isize>\n \
    \  |     |\n   |     Vec<isize>\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l: Vec<_>\
    \ = l.into_iter().collect();\n    let mut even: Vec<_> = l.iter().cloned().filter_indices(|i|\
    \ i % 2 == 0).collect();\n    let mut odd: Vec<_> = l.iter().cloned().filter_indices(|i|\
    \ i % 2 == 1).collect();\n    let mut n: usize = 0;\n    while n < even.len()\
    \ {\n        let mut max: usize = odd.iter().fold(0, |acc, v| {\n            if\
    \ v > acc {\n                acc\n            } else {\n                acc\n\
    \            }\n        });\n        let mut index = 0;\n        while index <\
    \ odd.len() && n > max {\n            let mut max: usize = even.iter().fold(0,\
    \ |acc, v| {\n                if v > acc {\n                    acc\n        \
    \        } else {\n                    acc\n                }\n            });\n\
    \            let mut index = 0;\n            while index < even.len() && n < max\
    \ {\n                if odd.len() == 0 {\n                    break;\n       \
    \         }\n                if even.len() == 0 {\n                    break;\n\
    \                }\n                if even[index] > odd.len() {\n           \
    \         break;\n                }\n                if odd.iter().find(|&x| x\
    \ == even[index]).is_some() {\n                    break;\n                }\n\
    \                index += 1\n            }\n            n += 1\n        }\n  \
    \      let i = even.len() - n;\n        odd.swap_remove(i);\n        even.swap_remove(i);\n\
    \    }\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `filter_indices` found for struct `Cloned`\
    \ in the current scope\n  --> /tmp/tmpnd2gcks_.rs:10:46\n   |\n10 |     let mut\
    \ even: Vec<_> = l.iter().cloned().filter_indices(|i| i % 2 == 0).collect();\n\
    \   |                                              ^^^^^^^^^^^^^^ method not found\
    \ in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror[E0599]: no method named `filter_indices`\
    \ found for struct `Cloned` in the current scope\n  --> /tmp/tmpnd2gcks_.rs:11:45\n\
    \   |\n11 |     let mut odd: Vec<_> = l.iter().cloned().filter_indices(|i| i %\
    \ 2 == 1).collect();\n   |                                             ^^^^^^^^^^^^^^\
    \ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror[E0277]: can't\
    \ compare `&_` with `usize`\n  --> /tmp/tmpnd2gcks_.rs:15:18\n   |\n15 |     \
    \        if v > acc {\n   |                  ^ no implementation for `&_ < usize`\
    \ and `&_ > usize`\n   |\n   = help: the trait `PartialOrd<usize>` is not implemented\
    \ for `&_`\n\nerror[E0277]: can't compare `&_` with `usize`\n  --> /tmp/tmpnd2gcks_.rs:24:22\n\
    \   |\n24 |                 if v > acc {\n   |                      ^ no implementation\
    \ for `&_ < usize` and `&_ > usize`\n   |\n   = help: the trait `PartialOrd<usize>`\
    \ is not implemented for `&_`\n\nerror[E0277]: can't compare `isize` with `usize`\n\
    \  --> /tmp/tmpnd2gcks_.rs:38:32\n   |\n38 |                 if even[index] >\
    \ odd.len() {\n   |                                ^ no implementation for `isize\
    \ < usize` and `isize > usize`\n   |\n   = help: the trait `PartialOrd<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: can't compare `&_` with\
    \ `isize`\n  --> /tmp/tmpnd2gcks_.rs:41:43\n   |\n41 |                 if odd.iter().find(|&x|\
    \ x == even[index]).is_some() {\n   |                                        \
    \   ^^ no implementation for `&_ == isize`\n   |\n   = help: the trait `Parti"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut evens = l.iter().cloned().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).collect::<Vec<_>>();\n    let mut evens_sorted = evens.iter().cloned().enumerate().cloned().collect();\n\
    \    let mut odd = l.iter().cloned().enumerate().filter(|(i, _)| i % 2 != 0).collect::<Vec<_>>();\n\
    \    let mut odd_sorted = odd.iter().cloned().enumerate().cloned().collect();\n\
    \    evens_sorted.sort_by_key(|&(_, v)| v);\n    odd_sorted.sort_by_key(|&(_,\
    \ v)| v);\n    evens.extend((evens_sorted - odd_sorted));\n    evens.extend((odd_sorted\
    \ - evens_sorted));\n    evens\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmpojwvurwo.rs:15:18\n\
    \   |\n15 |     evens.extend((evens_sorted - odd_sorted));\n   |             \
    \     ^                         ^\n   |\n   = note: `#[warn(unused_parens)]` on\
    \ by default\nhelp: remove these parentheses\n   |\n15 -     evens.extend((evens_sorted\
    \ - odd_sorted));\n15 +     evens.extend(evens_sorted - odd_sorted);\n   | \n\n\
    warning: unnecessary parentheses around method argument\n  --> /tmp/tmpojwvurwo.rs:16:18\n\
    \   |\n16 |     evens.extend((odd_sorted - evens_sorted));\n   |             \
    \     ^                         ^\n   |\nhelp: remove these parentheses\n   |\n\
    16 -     evens.extend((odd_sorted - evens_sorted));\n16 +     evens.extend(odd_sorted\
    \ - evens_sorted);\n   | \n\nerror[E0271]: type mismatch resolving `<Enumerate<Cloned<std::slice::Iter<'_,\
    \ (usize, isize)>>> as Iterator>::Item == &_`\n    --> /tmp/tmpojwvurwo.rs:10:62\n\
    \     |\n10   |     let mut evens_sorted = evens.iter().cloned().enumerate().cloned().collect();\n\
    \     |                                                              ^^^^^^ expected\
    \ reference, found tuple\n     |\n     = note: expected reference `&_`\n     \
    \               found tuple `(usize, _)`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `collect` exists for struct `Cloned<Enumerate<Cloned<std::slice::Iter<'_,\
    \ (usize, isize)>>>>`, but its trait bounds were not satisfied\n  --> /tmp/tmpojwvurwo.rs:10:71\n\
    \   |\n10 |        let mut evens_sorted = evens.iter().cloned().enumerate().cloned().collect();\n\
    \   |                                                                        \
    \  ^^^^^^^ method cannot be called on `Cloned<Enumerate<Cloned<std::slice::Iter<'_,\
    \ (usize, isize)>>>>` due to unsatisfied trait bounds\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `<Enumerate<Cloned<std::slice::Iter<'_,\
    \ (usize, isize)>>> as Iterator>::Item = &_`\n           which is required by\
    \ `Cloned<Enumerate<Cloned<std::slice::Iter<'_, (usize, isize)>>>>: Iterator`\n\
    \           `Cloned<Enumerate<Cloned<std::slice::Iter<'_, (us"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l2 = l.clone();\n\
    \    let mut even: Vec<isize> = vec![0; l.len()];\n    for i in 0..(l.len() /\
    \ 2) {\n        even[i] = l[i];\n        even[l.len() - i - 1] = (l[l.len() -\
    \ i] + l[i]) as isize;\n    }\n    l2 = even;\n    l2\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 3 but the index\
    \ is 3', /tmp/tmpq7u36pzy.rs:13:34\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even_values:\
    \ Vec<isize> = Vec::new();\n    let mut odd_values: Vec<isize> = Vec::new();\n\
    \n    for (idx, value) in l.iter().enumerate() {\n        if idx % 2 == 0 {\n\
    \            odd_values.push(value);\n        } else {\n            even_values.push(value);\n\
    \        }\n    }\n\n    even_values.sort_unstable();\n    odd_values.sort_unstable();\n\
    \n    even_values.into_iter().chain(odd_values).collect()\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpipmtndfu.rs:14:29\n   |\n\
    14 |             odd_values.push(value);\n   |                             ^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n14 |             odd_values.push(*value);\n   |                       \
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpipmtndfu.rs:16:30\n\
    \   |\n16 |             even_values.push(value);\n   |                       \
    \       ^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |             even_values.push(*value);\n   |         \
    \                     +\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| a - b)\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpggif8789.rs:9:31\n  |\n9 |\
    \     l.sort_unstable_by(|a, b| a - b)\n  |                               ^^^^^\
    \ expected enum `std::cmp::Ordering`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpggif8789.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) ->\
    \ Vec<isize> {\n  |                                ---------- expected `Vec<isize>`\
    \ because of return type\n9 |     l.sort_unstable_by(|a, b| a - b)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut result =\
    \ l.clone();\n    let mut even = result.clone();\n    for i in 0..result.len()\
    \ {\n        if i % 2 == 0 {\n            even[i] = even[i].unwrap();\n      \
    \      result.swap(i, result.len());\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp_avp59yq.rs:13:31\n   |\n13 |             even[i] = even[i].unwrap();\n\
    \   |                               ^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().zip((l.iter()\
    \ + l.len() - 1).map(|&i| i.checked_add(2))).cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `usize` to `std::slice::Iter<'_, isize>`\n -->\
    \ /tmp/tmpl3afa3e7.rs:9:37\n  |\n9 |     l.iter().cloned().zip((l.iter() + l.len()\
    \ - 1).map(|&i| i.checked_add(2))).cloned().collect()\n  |                   \
    \         -------- ^ ------- usize\n  |                            |\n  |    \
    \                        std::slice::Iter<'_, isize>\n\nerror[E0271]: type mismatch\
    \ resolving `<Zip<Cloned<std::slice::Iter<'_, isize>>, _> as Iterator>::Item ==\
    \ &_`\n    --> /tmp/tmpl3afa3e7.rs:9:80\n     |\n9    |     l.iter().cloned().zip((l.iter()\
    \ + l.len() - 1).map(|&i| i.checked_add(2))).cloned().collect()\n     |      \
    \                                                                          ^^^^^^\
    \ expected reference, found tuple\n     |\n     = note: expected reference `&_`\n\
    \                    found tuple `(_, _)`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `collect` exists for struct `Cloned<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, _>>`, but its trait bounds were not satisfied\n  --> /tmp/tmpl3afa3e7.rs:9:89\n\
    \   |\n9  |        l.iter().cloned().zip((l.iter() + l.len() - 1).map(|&i| i.checked_add(2))).cloned().collect()\n\
    \   |                                                                        \
    \                    ^^^^^^^ method cannot be called on `Cloned<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, _>>` due to unsatisfied trait bounds\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, _> as Iterator>::Item = &_`\n           which is required by `Cloned<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, _>>: Iterator`\n           `Cloned<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, _>>: Iterator`\n           which is required by `&mut Cloned<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, _>>: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0271, E0369, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().enumerate().for_each(|(i,\
    \ item)| {\n        let j = if i % 2 == 0 { i } else { i / 2 };\n        l.swap(i,\
    \ j);\n    });\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "warning: unused variable: `item`\n --> /tmp/tmpq08i04rm.rs:9:49\n  |\n\
    9 |     l.iter().cloned().enumerate().for_each(|(i, item)| {\n  |            \
    \                                     ^^^^ help: if this is intentional, prefix\
    \ it with an underscore: `_item`\n  |\n  = note: `#[warn(unused_variables)]` on\
    \ by default\n\nerror[E0596]: cannot borrow `l` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpq08i04rm.rs:11:9\n   |\n8  | fn sort_even(l: Vec<isize>)\
    \ -> Vec<isize> {\n   |              - help: consider changing this to be mutable:\
    \ `mut l`\n...\n11 |         l.swap(i, j);\n   |         ^^^^^^^^^^^^ cannot borrow\
    \ as mutable\n\nerror[E0500]: closure requires unique access to `l` but it is\
    \ already borrowed\n  --> /tmp/tmpq08i04rm.rs:9:44\n   |\n9  |     l.iter().cloned().enumerate().for_each(|(i,\
    \ item)| {\n   |     --------                      -------- ^^^^^^^^^^^ closure\
    \ construction occurs here\n   |     |                             |\n   |   \
    \  borrow occurs here            first borrow later used by call\n10 |       \
    \  let j = if i % 2 == 0 { i } else { i / 2 };\n11 |         l.swap(i, j);\n \
    \  |         - second borrow occurs due to use of `l` in closure\n\nerror: aborting\
    \ due to 2 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0500, E0596.\nFor more information about an error, try `rustc --explain E0500`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l2 = l;\n\
    \    for i in 1..l2.len() {\n        let mut j = i;\n        loop {\n        \
    \    let tmp = l2[j];\n            let mut tmp = j;\n            match i {\n \
    \               0 => break,\n                _ => {\n                    l2[j]\
    \ = l2[j - 1];\n                    j -= 1;\n                }\n            }\n\
    \            l2[j] = tmp;\n        }\n    }\n    l2\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpclf2uy70.rs:22:21\n   |\n\
    22 |             l2[j] = tmp;\n   |             -----   ^^^ expected `isize`,\
    \ found `usize`\n   |             |\n   |             expected due to the type\
    \ of this binding\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().map(|i|\
    \ i).filter(|&x| *x % 2).collect::<Vec<_>>().into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpssi1wnlg.rs:9:37\n  |\n9 |\
    \     l.iter().map(|i| i).filter(|&x| *x % 2).collect::<Vec<_>>().into_iter().collect()\n\
    \  |                                     ^^^^^^ expected `bool`, found `isize`\n\
    \nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpssi1wnlg.rs:9:77\n     |\n9\
    \    |     l.iter().map(|i| i).filter(|&x| *x % 2).collect::<Vec<_>>().into_iter().collect()\n\
    \     |                                                                      \
    \       ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by_key(|x|\
    \ *x as isize).into_iter().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmpfmaredr2.rs:9:45\n\
    \  |\n9 |     l.sort_unstable_by_key(|x| *x as isize).into_iter().collect()\n\
    \  |                                             ^^^^^^^^^ `()` is not an iterator\n\
    \  |\n  = note: the following trait bounds were not satisfied:\n          `():\
    \ Iterator`\n          which is required by `(): IntoIterator`\n          `&():\
    \ Iterator`\n          which is required by `&(): IntoIterator`\n          `&mut\
    \ (): Iterator`\n          which is required by `&mut (): IntoIterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect::<Vec<_>>();\n    let mut odd = l.iter().filter(|&x|\
    \ x % 2 != 0).cloned().collect::<Vec<_>>();\n    odd.sort_by_key(|&x| even.iter().position(|&x|\
    \ x == x).cloned().collect::<Vec<_>>());\n    even.extend(odd);\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpv6u_1jik.rs:11:60\n\
    \    |\n11  |       odd.sort_by_key(|&x| even.iter().position(|&x| x == x).cloned().collect::<Vec<_>>());\n\
    \    |                                                              ^^^^^^ `Option<usize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let even = l.iter().cloned().filter(|&x|\
    \ x % 2 == 0).cloned().collect::<Vec<_>>();\n    even.sort_unstable();\n    let\
    \ odd = l.iter().cloned().filter(|&x| x % 2 != 0).cloned().collect::<Vec<_>>();\n\
    \    even.extend(odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n --> /tmp/tmpsn4370gk.rs:9:58\n  |\n9 |     let even\
    \ = l.iter().cloned().filter(|&x| x % 2 == 0).cloned().collect::<Vec<_>>();\n\
    \  |                                                          ^^^^^^ expected\
    \ reference, found `isize`\n  |\n  = note: expected reference `&&_`\n        \
    \     found reference `&isize`\n  = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<std::slice::Iter<'_, isize>>`\n  = note:\
    \ 1 redundant requirement hidden\n  = note: required because of the requirements\
    \ on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpsn4370gk.rs:9:41:\
    \ 9:56]>`\n\nerror[E0631]: type mismatch in closure arguments\n --> /tmp/tmpsn4370gk.rs:9:58\n\
    \  |\n9 |     let even = l.iter().cloned().filter(|&x| x % 2 == 0).cloned().collect::<Vec<_>>();\n\
    \  |                                         ---------------  ^^^^^^ expected\
    \ signature of `for<'r> fn(&'r &_) -> _`\n  |                                \
    \         |\n  |                                         found signature of `for<'r>\
    \ fn(&'r isize) -> _`\n  |\n  = note: required because of the requirements on\
    \ the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpsn4370gk.rs:9:41:\
    \ 9:56]>`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpsn4370gk.rs:9:41: 9:56]>>`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmpsn4370gk.rs:9:67\n   |\n9  |        let even =\
    \ l.iter().cloned().filter(|&x| x % 2 == 0).cloned().collect::<Vec<_>>();\n  \
    \ |                                                                      ^^^^^^^\
    \ method cannot be called on `Cloned<Filter<Cloned<std::slice::Iter<'_, isize>>,\
    \ [closure@/tmp/tmpsn4370gk.rs:9:41: 9:56]>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpsn4370gk.rs:9:41: 9:56]> as Iterat"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even_values\
    \ = l.clone();\n    even_values.sort();\n    for (i, v) in even_values.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            even_values[i] = v;\n        } else\
    \ {\n            break;\n        }\n    }\n    even_values\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6xjn3tp2.rs:13:30\n   |\n\
    13 |             even_values[i] = v;\n   |             --------------   ^ expected\
    \ `isize`, found `&isize`\n   |             |\n   |             expected due to\
    \ the type of this binding\n   |\nhelp: consider dereferencing the borrow\n  \
    \ |\n13 |             even_values[i] = *v;\n   |                             \
    \ +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut i = 0;\n\
    \    let mut evens = Vec::with_capacity(l.len() / 2);\n    let mut odds = Vec::with_capacity(l.len()\
    \ / 2);\n    while i < l.len() {\n        if i % 2 == 0 {\n            evens.push(l[i]);\n\
    \        } else {\n            odds.push(l[i]);\n        }\n        i += 1;\n\
    \    }\n    evens.sort_by_key(|&x| x);\n    odds.sort_by_key(|&x| x);\n    evens.into_iter().chain(odds).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpoclmfvni.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l\n        .iter()\n\
    \        .cloned()\n        .enumerate()\n        .filter(|(_, even_ix)| even_ix.odd())\n\
    \        .map(|(_, even_ix)| even_ix)\n        .fold(l.clone(), |mut l, even_ix|\
    \ {\n            l[even_ix] = l[even_ix].unwrap();\n            l\n        })\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `odd` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmpd3o8ujsj.rs:13:40\n   |\n13 |         .filter(|(_,\
    \ even_ix)| even_ix.odd())\n   |                                        ^^^ method\
    \ not found in `&isize`\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpd3o8ujsj.rs:16:13\n   |\n16 |             l[even_ix]\
    \ = l[even_ix].unwrap();\n   |             ^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpd3o8ujsj.rs:16:26\n   |\n16 |            \
    \ l[even_ix] = l[even_ix].unwrap();\n   |                          ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by_key(move\
    \ |i| i & 1)\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0nbshxfy.rs:9:5\n  |\n8 |\
    \ fn sort_even(l: Vec<isize>) -> Vec<isize> {\n  |                           \
    \     ---------- expected `Vec<isize>` because of return type\n9 |     l.sort_unstable_by_key(move\
    \ |i| i & 1)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |\n  = note: expected struct `Vec<isize>`\n          found unit\
    \ type `()`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n\
    \    l.sort_unstable_by(|a, b| a % 2 == b % 2);\n    l\n}\n\nfn main() {\n   \
    \ let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmknmv6_e.rs:10:31\n   |\n\
    10 |     l.sort_unstable_by(|a, b| a % 2 == b % 2);\n   |                    \
    \           ^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`, found `bool`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    if l.len() <= 1 {\n\
    \        return l;\n    }\n\n    let mut evens = l[..];\n    let mut odd = evens.remove(0);\n\
    \n    for i in evens.iter().cloned().rev() {\n        evens.swap(i, odd.clone());\n\
    \    }\n\n    evens.extend(odd);\n    evens\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `remove` found for slice `[isize]` in the\
    \ current scope\n  --> /tmp/tmpabtpjuy9.rs:14:25\n   |\n14 |     let mut odd =\
    \ evens.remove(0);\n   |                         ^^^^^^ method not found in `[isize]`\n\
    \nerror[E0277]: the size for values of type `[isize]` cannot be known at compilation\
    \ time\n  --> /tmp/tmpabtpjuy9.rs:13:9\n   |\n13 |     let mut evens = l[..];\n\
    \   |         ^^^^^^^^^ doesn't have a size known at compile-time\n   |\n   =\
    \ help: the trait `Sized` is not implemented for `[isize]`\n   = note: all local\
    \ variables must have a statically known size\n   = help: unsized locals are gated\
    \ as an unstable feature\nhelp: consider borrowing here\n   |\n13 |     let mut\
    \ evens = &l[..];\n   |                     +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpabtpjuy9.rs:17:20\n   |\n17 |         evens.swap(i, odd.clone());\n\
    \   |                    ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n17 |         evens.swap(i.try_into().unwrap(), odd.clone());\n   |    \
    \                 ++++++++++++++++++++\n\nerror[E0599]: no method named `extend`\
    \ found for slice `[isize]` in the current scope\n  --> /tmp/tmpabtpjuy9.rs:20:11\n\
    \   |\n20 |     evens.extend(odd);\n   |           ^^^^^^ method not found in\
    \ `[isize]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpabtpjuy9.rs:21:5\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                \
    \                ---------- expected `Vec<isize>` because of return type\n...\n\
    21 |     evens\n   |     ^^^^^- help: try using a conversion method: `.to_vec()`\n\
    \   |     |\n   |     expected struct `Vec`, found slice `[isize]`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n               found slice `[isize]`\n\n\
    error: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let even = l.iter().cloned().filter_map(|&x|\
    \ {\n        if x.is_even() {\n            Some(x)\n        } else {\n       \
    \     None\n        }\n    }).collect::<Vec<_>>();\n    let odd = l.iter().cloned().filter_map(|&x|\
    \ {\n        if x.is_odd() {\n            Some(x)\n        } else {\n        \
    \    None\n        }\n    }).collect::<Vec<_>>();\n    even.iter().cloned().zip(odd).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpodz8q1f1.rs:9:46\n  |\n9 |\
    \     let even = l.iter().cloned().filter_map(|&x| {\n  |                    \
    \                          ^--\n  |                                          \
    \    ||\n  |                                              |expected due to this\n\
    \  |                                              expected `isize`, found reference\n\
    \  |                                              help: did you mean `x`: `&isize`\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpodz8q1f1.rs:16:45\n   |\n16 |     let odd =\
    \ l.iter().cloned().filter_map(|&x| {\n   |                                  \
    \           ^--\n   |                                             ||\n   |   \
    \                                          |expected due to this\n   |       \
    \                                      expected `isize`, found reference\n   |\
    \                                             help: did you mean `x`: `&isize`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpodz8q1f1.rs:23:5\n   |\n8  | fn\
    \ sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                             \
    \   ---------- expected `Vec<isize>` because of return type\n...\n23 |     even.iter().cloned().zip(odd).collect::<Vec<_>>()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found tuple\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<(_, _)>`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().enumerate().map(|(i,\
    \ v)| (i as isize, v)).sort_by_key(|(i, v)| (i as usize, -v)).collect()\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmpi11nkb_6.rs:9:56\n  |\n9 |     l.iter().enumerate().map(|(i,\
    \ v)| (i as isize, v)).sort_by_key(|(i, v)| (i as usize, -v)).collect()\n  | \
    \                                                       ^^^^^^^^^^^ method not\
    \ found in `Map<Enumerate<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpi11nkb_6.rs:9:30:\
    \ 9:54]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut v = l;\n\
    \    v.sort();\n\n    for i in 1..v.len() {\n        if v[i - 1] != i {\n    \
    \        v[i] = i;\n        } else {\n            v[i] = v[i - 1];\n        }\n\
    \    }\n\n    v\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiwmrcoxc.rs:13:24\n   |\n\
    13 |         if v[i - 1] != i {\n   |                        ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |         if v[i - 1] != i.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpiwmrcoxc.rs:14:20\n   |\n14 |             v[i] = i;\n \
    \  |             ----   ^ expected `isize`, found `usize`\n   |             |\n\
    \   |             expected due to the type of this binding\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    if l.len() % 2 ==\
    \ 1 {\n        l\n    } else {\n        let mut v = l.clone();\n        v.swap(0,\
    \ l.len() / 2);\n        v.sort_unstable();\n        v\n    }\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpcbygrbz8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).sort_by_key(|i| l[i]).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `Filter` in\
    \ the current scope\n --> /tmp/tmph1t2m_eo.rs:9:63\n  |\n9 |     l.iter().cloned().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).sort_by_key(|i| l[i]).collect()\n  |                       \
    \                                        ^^^^^^^^^^^ method not found in `Filter<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmph1t2m_eo.rs:9:42: 9:61]>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let evens = &mut\
    \ vec![0; l.len() * 2];\n    for i in 0..l.len() {\n        evens[i / 2] += l[i];\n\
    \        evens[i / 2 + 1] += l[i];\n    }\n\n    for even in &mut evens {\n  \
    \      if even < 0 {\n            even += l.len();\n        }\n    }\n\n    evens\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `Vec<isize>` is not an iterator\n  --> /tmp/tmp9jure7k3.rs:15:17\n\
    \   |\n15 |     for even in &mut evens {\n   |                 ^^^^^^^^^^ `Vec<isize>`\
    \ is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `Vec<isize>`\n   = help: the following other types implement trait `IntoIterator`:\n\
    \             &'a Vec<T, A>\n             &'a mut Vec<T, A>\n             Vec<T,\
    \ A>\n   = note: required because of the requirements on the impl of `Iterator`\
    \ for `&mut Vec<isize>`\n   = note: 1 redundant requirement hidden\n   = note:\
    \ required because of the requirements on the impl of `~const Iterator` for `&mut\
    \ &mut Vec<isize>`\n   = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `&mut &mut Vec<isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9jure7k3.rs:21:5\n   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                ---------- expected `Vec<isize>` because\
    \ of return type\n...\n21 |     evens\n   |     ^^^^^- help: try using a conversion\
    \ method: `.to_vec()`\n   |     |\n   |     expected struct `Vec`, found `&mut\
    \ Vec<isize>`\n   |\n   = note:         expected struct `Vec<isize>`\n       \
    \    found mutable reference `&mut Vec<isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.clone();\n\
    \    let mut odd = even.clone();\n\n    even.swap(0, even.len());\n    odd.swap(0,\
    \ odd.len());\n    even.sort_by_key(|&i| {\n        if i as usize % 2 == 0 {\n\
    \            i as isize\n        } else {\n            i\n        }\n    });\n\
    \    odd.sort_by_key(|&i| {\n        if i as usize % 2 == 0 {\n            i\n\
    \        } else {\n            i as isize\n        }\n    });\n\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `even` as immutable because it is also borrowed\
    \ as mutable\n  --> /tmp/tmp0hdbjkav.rs:12:18\n   |\n12 |     even.swap(0, even.len());\n\
    \   |     -------------^^^^^^^^^^-\n   |     |    |       |\n   |     |    | \
    \      immutable borrow occurs here\n   |     |    mutable borrow later used by\
    \ call\n   |     mutable borrow occurs here\n   |\nhelp: try adding a local storing\
    \ this argument...\n  --> /tmp/tmp0hdbjkav.rs:12:18\n   |\n12 |     even.swap(0,\
    \ even.len());\n   |                  ^^^^^^^^^^\nhelp: ...and then using that\
    \ local as the argument to this call\n  --> /tmp/tmp0hdbjkav.rs:12:5\n   |\n12\
    \ |     even.swap(0, even.len());\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0502]:\
    \ cannot borrow `odd` as immutable because it is also borrowed as mutable\n  -->\
    \ /tmp/tmp0hdbjkav.rs:13:17\n   |\n13 |     odd.swap(0, odd.len());\n   |    \
    \ ------------^^^^^^^^^-\n   |     |   |       |\n   |     |   |       immutable\
    \ borrow occurs here\n   |     |   mutable borrow later used by call\n   |   \
    \  mutable borrow occurs here\n   |\nhelp: try adding a local storing this argument...\n\
    \  --> /tmp/tmp0hdbjkav.rs:13:17\n   |\n13 |     odd.swap(0, odd.len());\n   |\
    \                 ^^^^^^^^^\nhelp: ...and then using that local as the argument\
    \ to this call\n  --> /tmp/tmp0hdbjkav.rs:13:5\n   |\n13 |     odd.swap(0, odd.len());\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    if l.len() == 0 {\n\
    \        return l;\n    }\n    let mut l = l;\n    sort_even_helper(&mut l);\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sort_even_helper` in this scope\n \
    \ --> /tmp/tmpw2j4poc0.rs:13:5\n   |\n13 |     sort_even_helper(&mut l);\n   |\
    \     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l.to_vec();\n\
    \    let mut even = l.len() - 1;\n    let mut odd = even;\n    while even < l.len()\
    \ {\n        while even < l.len() {\n            even = even * 2;\n        }\n\
    \        while even > 0 {\n            odd--;\n            let tmp = l.swap(even,\
    \ odd);\n            even = tmp / 2;\n            odd = tmp % 2;\n        }\n\
    \    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmp7voqz_n7.rs:17:18\n\
    \   |\n17 |             odd--;\n   |                  ^ expected expression\n\n\
    error: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l2 = l.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    while i < l2.len() {\n        l2.swap(i, (l2[i as usize]\
    \ - 1).unwrap());\n        i += 1;\n    }\n    l2\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpsc1dbaou.rs:12:41\n   |\n12 |         l2.swap(i, (l2[i\
    \ as usize] - 1).unwrap());\n   |                                         ^^^^^^\
    \ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even;\n    for i in 0..even.len() {\n        odd[i] = even[i];\n\
    \    }\n    for i in 0..odd.len() {\n        even[i as usize] = odd[i];\n    }\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `even`\n  --> /tmp/tmpyky0ofgv.rs:11:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     let\
    \ mut odd = even;\n   |                   ---- value moved here\n11 |     for\
    \ i in 0..even.len() {\n   |                 ^^^^^^^^^^ value borrowed here after\
    \ move\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().sort_by_key(|&x|\
    \ x as usize).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `Cloned` in\
    \ the current scope\n --> /tmp/tmp0i8m_bqm.rs:9:23\n  |\n9 |     l.iter().cloned().sort_by_key(|&x|\
    \ x as usize).collect()\n  |                       ^^^^^^^^^^^ method not found\
    \ in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().windows(2).map(|x|\
    \ x.iter().cloned()).zip().cloned().enumerate().map(|(i, xs)| {\n        if xs.len()\
    \ > 1 {\n            xs\n        } else {\n            let x = xs[0].cloned();\n\
    \            x.sort();\n            x.push(i);\n            x\n        }\n   \
    \ }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `windows` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmp7jk79zbs.rs:9:23\n  |\n9 |     l.iter().cloned().windows(2).map(|x|\
    \ x.iter().cloned()).zip().cloned().enumerate().map(|(i, xs)| {\n  |         \
    \              ^^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().rev().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(i, _)| i).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `usize`\n    --> /tmp/tmpf3ib5wk1.rs:9:76\n     |\n9 \
    \   |     l.iter().rev().enumerate().filter(|(i, _)| i % 2 == 0).map(|(i, _)|\
    \ i).collect()\n     |                                                       \
    \                     ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=usize>`\n     |\n     = help: the trait `FromIterator<usize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    if l.len() <= 1 {\n\
    \        l\n    } else {\n        let mut even = l.clone();\n        even.sort();\n\
    \        let mut odd = even.clone();\n        let mut i = 0;\n        let mut\
    \ j = 1;\n        loop {\n            if even[i] < even[j] {\n               \
    \ odd.swap(i, j);\n            }\n            if i == j {\n                break;\n\
    \            }\n            i += 2;\n            j += 2;\n        }\n        odd\n\
    \    }\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 3 but the index\
    \ is 3', /tmp/tmp4cfg2yho.rs:18:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut evens: Vec<_>\
    \ = l.iter().cloned().enumerate().filter(|(_, x)| x.is_even()).collect();\n  \
    \  let mut odd: Vec<_> = l.iter().cloned().enumerate().filter(|(_, x)| x.is_odd()).collect();\n\
    \    for (i, &x) in evens.iter_mut().zip(odd.iter_mut()) {\n        *x = if x.0\
    \ % 2 == 0 {\n            x.0 as isize\n        } else {\n            *x.0 - 1\n\
    \        };\n    }\n    odd.sort();\n    evens.iter().zip(odd.iter()).cloned().collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_even` found for reference `&isize` in\
    \ the current scope\n --> /tmp/tmpsix28_ja.rs:9:77\n  |\n9 |     let mut evens:\
    \ Vec<_> = l.iter().cloned().enumerate().filter(|(_, x)| x.is_even()).collect();\n\
    \  |                                                                         \
    \    ^^^^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `is_odd`\
    \ found for reference `&isize` in the current scope\n  --> /tmp/tmpsix28_ja.rs:10:75\n\
    \   |\n10 |     let mut odd: Vec<_> = l.iter().cloned().enumerate().filter(|(_,\
    \ x)| x.is_odd()).collect();\n   |                                           \
    \                                ^^^^^^ method not found in `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsix28_ja.rs:11:13\n   |\n11 |     for (i, &x)\
    \ in evens.iter_mut().zip(odd.iter_mut()) {\n   |             ^^     ------------------------------------\
    \ this expression has type `Option<(&mut (usize, isize), &mut (usize, isize))>`\n\
    \   |             |\n   |             types differ in mutability\n   |       \
    \      help: you can probably remove the explicit borrow: `x`\n   |\n   = note:\
    \ expected mutable reference `&mut (usize, isize)`\n                      found\
    \ reference `&_`\n\nerror[E0271]: type mismatch resolving `<Zip<std::slice::Iter<'_,\
    \ (usize, isize)>, std::slice::Iter<'_, (usize, isize)>> as Iterator>::Item ==\
    \ &_`\n    --> /tmp/tmpsix28_ja.rs:19:34\n     |\n19   |     evens.iter().zip(odd.iter()).cloned().collect::<Vec<_>>()\n\
    \     |                                  ^^^^^^ expected reference, found tuple\n\
    \     |\n     = note: expected reference `&_`\n                    found tuple\
    \ `(&(usize, isize), &(usize, isize))`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `collect` exists for struct `Cloned<Zip<std::slice::Iter<'_,\
    \ (usize, isize)>, std::slice::Iter<'_, (usize, isize)>>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmpsix28_ja.rs:19:43\n   |\n19 |        evens.iter().zip(odd.iter()).cloned().collect::<Vec<_>>()\n\
    \   |                                              ^^^^^^^ method canno"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().chunks(2).map(|pair|\
    \ {\n        pair.sort_by_key(|&x| x % 2).collect::<Vec<_>>().to_owned()\n   \
    \ }).flatten()\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `chunks` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmp8krs9vyv.rs:9:23\n  |\n9 |     l.iter().cloned().chunks(2).map(|pair|\
    \ {\n  |                       ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l2 = l;\n\
    \    l2.sort_unstable_by_key(|&x| x % 2);\n    l2\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmp6y0ozy__.rs:16:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l.to_owned();\n\
    \    l.sort();\n\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n       \
    \     continue;\n        }\n\n        // we now have sorted the even indicies\n\
    \        for j in 0..(i + 1)-2 {\n            let tmp = l[j];\n            l[j]\
    \ = l[j + 1];\n            l[j + 1] = tmp;\n        }\n    }\n\n    l\n}\n\nfn\
    \ main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, -5, 2, 3, -3, 3, 5, -10, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp6o_b534x.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = [0;\
    \ l.len() / 2];\n    for (i, &e) in l.iter_mut().enumerate() {\n        if i %\
    \ 2 == 0 {\n            *e = even[i];\n        }\n        even[i/2] += *e;\n \
    \   }\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmpke8advk2.rs:9:24\n\
    \  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n  |              - this\
    \ would need to be a `const`\n9 |     let mut even = [0; l.len() / 2];\n  |  \
    \                      ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpke8advk2.rs:10:13\n\
    \   |\n10 |     for (i, &e) in l.iter_mut().enumerate() {\n   |             ^^\
    \     ------------------------ this expression has type `Option<(usize, &mut isize)>`\n\
    \   |             |\n   |             types differ in mutability\n   |       \
    \      help: you can probably remove the explicit borrow: `e`\n   |\n   = note:\
    \ expected mutable reference `&mut isize`\n                      found reference\
    \ `&_`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0435.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n\
    \    for i in 0..l.len() {\n        if i % 2 == 0 {\n            l.swap(0, i);\n\
    \        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n \
    \   assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 2, 3]`', /tmp/tmpor0y2fo3.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by_key(|x|\
    \ if x % 2 == 0 { x } else { x.clone() });\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpd84o4wdx.rs:9:59\n\
    \  |\n9 |     l.sort_unstable_by_key(|x| if x % 2 == 0 { x } else { x.clone()\
    \ });\n  |                                                -          ^^^^^^^^^\
    \ expected `&isize`, found `isize`\n  |                                      \
    \          |\n  |                                                expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n\
    \    let mut odd = Vec::new();\n\n    let mut i = 0;\n    while i < l.len() {\n\
    \        if i % 2 == 0 {\n            even.push(l[i]);\n        } else {\n   \
    \         odd.push(l[i]);\n        }\n        i += 1;\n    }\n\n    even.sort_unstable();\n\
    \    odd.sort_unstable();\n\n    even + odd\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp42aq3dyb.rs:25:10\n\
    \   |\n25 |     even + odd\n   |     ---- ^ --- Vec<isize>\n   |     |\n   | \
    \    Vec<isize>\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut sl = l.to_vec();\n\
    \    sl.iter().cloned().sort_unstable();\n    sl\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_unstable` found for struct `Cloned`\
    \ in the current scope\n  --> /tmp/tmpc4y25ksd.rs:10:24\n   |\n10 |     sl.iter().cloned().sort_unstable();\n\
    \   |                        ^^^^^^^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().enumerate().filter_map(|(i,\
    \ &x)| {\n        if i % 2 == 0 {\n            Some(x)\n        } else {\n   \
    \         None\n        }\n    }).cloned().collect()\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpho3y9k6o.rs:9:51\n  |\n9 |\
    \     l.iter().cloned().enumerate().filter_map(|(i, &x)| {\n  |              \
    \                                     ^^- expected due to this\n  |          \
    \                                         |\n  |                             \
    \                      expected `isize`, found reference\n  |                \
    \                                   help: you can probably remove the explicit\
    \ borrow: `x`\n  |\n  = note:   expected type `isize`\n          found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even_values:\
    \ Vec<isize>;\n    let mut odds: Vec<isize>;\n\n    let mut even = l.iter().cloned().enumerate().rev();\n\
    \    even = even.sort_by_key(|(_, value)| value);\n    even_values = even.collect();\n\
    \n    even = l.iter().cloned().enumerate().rev();\n    even = even.sort_by_key(|(_,\
    \ value)| value % 2);\n    odds = even.collect();\n\n    even_values.iter_mut().zip(even.iter()).for_each(|(even,\
    \ odd)| {\n        *odd = *even;\n    });\n\n    odds.iter_mut().zip(even_values.iter()).for_each(|(odd,\
    \ even)| {\n        *even = *odd;\n    });\n\n    odds\n}\n\nfn main() {\n   \
    \ let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `Rev` in the\
    \ current scope\n  --> /tmp/tmpj5q8j8gs.rs:13:17\n   |\n13 |     even = even.sort_by_key(|(_,\
    \ value)| value);\n   |                 ^^^^^^^^^^^ method not found in `Rev<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>>`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `(usize, isize)`\n    --> /tmp/tmpj5q8j8gs.rs:14:24\n\
    \     |\n14   |     even_values = even.collect();\n     |                    \
    \    ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=(usize,\
    \ isize)>`\n     |\n     = help: the trait `FromIterator<(usize, isize)>` is not\
    \ implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented\
    \ for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0599]: no method\
    \ named `sort_by_key` found for struct `Rev` in the current scope\n  --> /tmp/tmpj5q8j8gs.rs:17:17\n\
    \   |\n17 |     even = even.sort_by_key(|(_, value)| value % 2);\n   |       \
    \          ^^^^^^^^^^^ method not found in `Rev<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>>`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `(usize, isize)`\n    --> /tmp/tmpj5q8j8gs.rs:18:17\n\
    \     |\n18   |     odds = even.collect();\n     |                 ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=(usize,\
    \ isize)>`\n     |\n     = help: the trait `FromIterator<(usize, isize)>` is not\
    \ implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented\
    \ for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0599]: no method\
    \ named `iter` found for struct `Rev` in the current scope\n  --> /tmp/tmpj5q8j8gs.rs:20:37\n\
    \   |\n20 |     even_values.iter_mut().zip(even.iter()).for_each(|(even, odd)|\
    \ {\n   |                                     ^^^^ private field, not a method\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut s = l.clone();\n\
    \    s.sort_unstable();\n    s\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpxje4iojv.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| {\n        match a {\n            0 => b as isize,\n            _ => a as\
    \ isize,\n        }\n    });\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp97qxe4oq.rs:11:18\n   |\n\
    11 |             0 => b as isize,\n   |                  ^^^^^^^^^^ expected enum\
    \ `std::cmp::Ordering`, found `isize`\n\nerror[E0606]: casting `&isize` as `isize`\
    \ is invalid\n  --> /tmp/tmp97qxe4oq.rs:11:18\n   |\n11 |             0 => b as\
    \ isize,\n   |                  -^^^^^^^^^\n   |                  |\n   |    \
    \              cannot cast `&isize` as `isize`\n   |                  help: dereference\
    \ the expression: `*b`\n\nerror[E0606]: casting `&isize` as `isize` is invalid\n\
    \  --> /tmp/tmp97qxe4oq.rs:12:18\n   |\n12 |             _ => a as isize,\n  \
    \ |                  -^^^^^^^^^\n   |                  |\n   |               \
    \   cannot cast `&isize` as `isize`\n   |                  help: dereference the\
    \ expression: `*a`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0606.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|&i,\
    \ &j| {\n        if i % 2 == 0 {\n            cmp(i, j)\n        } else {\n  \
    \          cmp_eq(i, j)\n        }\n    });\n    l\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `cmp` in this scope\n  --> /tmp/tmp67lfq2ef.rs:11:13\n\
    \   |\n11 |             cmp(i, j)\n   |             ^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `cmp_eq` in this scope\n  --> /tmp/tmp67lfq2ef.rs:13:13\n\
    \   |\n13 |             cmp_eq(i, j)\n   |             ^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l2 = l.clone();\n\
    \    l2.sort_unstable();\n    l2.iter_mut().enumerate().for_each(|(i, e)| {\n\
    \        *e = (*e as usize) % 2;\n    });\n    l2\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdro60kbf.rs:12:14\n   |\n\
    12 |         *e = (*e as usize) % 2;\n   |         --   ^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |         |\n   |         expected due to the type\
    \ of this binding\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.iter().cloned().enumerate();\n\
    \    even.sort_by_key(|(_, v)| v % 2);\n    even.cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `Enumerate`\
    \ in the current scope\n  --> /tmp/tmpbzux9q0h.rs:10:10\n   |\n10 |     even.sort_by_key(|(_,\
    \ v)| v % 2);\n   |          ^^^^^^^^^^^ method not found in `Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>`\n\nerror[E0271]: type mismatch resolving `<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>> as Iterator>::Item == &_`\n    --> /tmp/tmpbzux9q0h.rs:11:10\n    \
    \ |\n11   |     even.cloned().collect()\n     |          ^^^^^^ expected reference,\
    \ found tuple\n     |\n     = note: expected reference `&_`\n                \
    \    found tuple `(usize, _)`\nnote: required by a bound in `cloned`\n\nerror[E0599]:\
    \ the method `collect` exists for struct `Cloned<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>>`, but its trait bounds were not satisfied\n  --> /tmp/tmpbzux9q0h.rs:11:19\n\
    \   |\n11 |        even.cloned().collect()\n   |                      ^^^^^^^\
    \ method cannot be called on `Cloned<Enumerate<Cloned<std::slice::Iter<'_, isize>>>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<Enumerate<Cloned<std::slice::Iter<'_, isize>>>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>>: Iterator`\n           `Cloned<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>>: Iterator`\n           which is required by `&mut Cloned<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>>: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l.to_owned();\n\
    \    l.sort();\n    for i in 0..l.len() {\n        if i % 2 == 1 {\n         \
    \   l[i] = l[i / 2];\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 3]`,\n right: `[1, 2, 3]`', /tmp/tmpijnzjr4u.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = vec![0;\
    \ l.len() / 2];\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n        \
    \    even[i / 2] += l[i];\n        } else {\n            even[i / 2] = even[i\
    \ / 2] < l[i] ? even[i / 2] : l[i];\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `even`\n\
    \  --> /tmp/tmpx309bxxc.rs:14:48\n   |\n14 |             even[i / 2] = even[i\
    \ / 2] < l[i] ? even[i / 2] : l[i];\n   |                                    \
    \            ^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror:\
    \ aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    even.sort_by_key(|&x| x % 2);\n    odd.sort_by_key(|&x|\
    \ x % 2);\n    let mut i = 0;\n    for &i in even {\n        l[i] = odd.swap(i).unwrap();\n\
    \        i += 1;\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfcb1a25y.rs:14:9\n   |\n\
    14 |     for &i in even {\n   |         ^^    ---- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0061]: this function\
    \ takes 2 arguments but 1 argument was supplied\n   --> /tmp/tmpfcb1a25y.rs:15:20\n\
    \    |\n15  |         l[i] = odd.swap(i).unwrap();\n    |                    ^^^^\
    \ - supplied 1 argument\n    |                    |\n    |                   \
    \ expected 2 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]:\
    \ no method named `unwrap` found for unit type `()` in the current scope\n  -->\
    \ /tmp/tmpfcb1a25y.rs:15:28\n   |\n15 |         l[i] = odd.swap(i).unwrap();\n\
    \   |                            ^^^^^^ method not found in `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l.to_owned();\n\
    \    l.sort_by_key(|i| i as usize / 2);\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0606]: casting `&isize` as `usize` is invalid\n  --> /tmp/tmpkw_dhamq.rs:10:23\n\
    \   |\n10 |     l.sort_by_key(|i| i as usize / 2);\n   |                     \
    \  -^^^^^^^^^\n   |                       |\n   |                       cannot\
    \ cast `&isize` as `usize`\n   |                       help: dereference the expression:\
    \ `*i`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0606`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    for i in 0..even.len() {\n        if even[i] % 2 == 0 {\n\
    \            let j = i;\n            let t = even[j];\n            while j < even.len()\
    \ && even[j] % 2 == 0 {\n                even[j] = even[j + 1];\n            \
    \    j += 1;\n            }\n            even[j] = t;\n        }\n    }\n    even\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmph5fk5gz7.rs:17:17\n\
    \   |\n13 |             let j = i;\n   |                 -\n   |             \
    \    |\n   |                 first assignment to `j`\n   |                 help:\
    \ consider making this binding mutable: `mut j`\n...\n17 |                 j +=\
    \ 1;\n   |                 ^^^^^^ cannot assign twice to immutable variable\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().filter(|x|\
    \ *x % 2 == 0).cloned().clone()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n --> /tmp/tmpy8erug4j.rs:9:47\n  |\n9 |     l.iter().cloned().filter(|x|\
    \ *x % 2 == 0).cloned().clone()\n  |                                         \
    \      ^^^^^^ expected reference, found `isize`\n  |\n  = note: expected reference\
    \ `&&_`\n             found reference `&isize`\n  = note: required because of\
    \ the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n  = note: 1 redundant requirement hidden\n  = note: required because\
    \ of the requirements on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpy8erug4j.rs:9:30: 9:45]>`\n\nerror[E0631]: type mismatch\
    \ in closure arguments\n --> /tmp/tmpy8erug4j.rs:9:47\n  |\n9 |     l.iter().cloned().filter(|x|\
    \ *x % 2 == 0).cloned().clone()\n  |                              ---------------\
    \  ^^^^^^ expected signature of `for<'r> fn(&'r &_) -> _`\n  |               \
    \               |\n  |                              found signature of `for<'r>\
    \ fn(&'r isize) -> _`\n  |\n  = note: required because of the requirements on\
    \ the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpy8erug4j.rs:9:30:\
    \ 9:45]>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpy8erug4j.rs:9:5\n  |\n\
    8 | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n  |                         \
    \       ---------- expected `Vec<isize>` because of return type\n9 |     l.iter().cloned().filter(|x|\
    \ *x % 2 == 0).cloned().clone()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Cloned`\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n             found struct `Cloned<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpy8erug4j.rs:9:30: 9:45]>>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0271, E0308,\
    \ E0631.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().rev().enumerate().map(|(idx,\
    \ val)| {\n        if idx&1 == 0 {\n            *val\n        } else {\n     \
    \       *val\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmphwp7yxj2.rs:11:13\n\
    \   |\n11 |             *val\n   |             ^^^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmphwp7yxj2.rs:13:13\n   |\n13 |        \
    \     *val\n   |             ^^^^\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n\
    \    for i in 1..l.len() {\n        let j = i << 1;\n        if j & 1 != 0 {\n\
    \            l.swap(i, j);\n        }\n    }\n    l\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpp1874iiv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l1 = l.into_iter();\n\
    \    l1.sort_unstable();\n\n    let mut l2 = l.into_iter();\n    l2.reverse();\n\
    \    l2.sort_unstable();\n\n    l1.chain(l2).collect()\n}\n\nfn main() {\n   \
    \ let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_unstable` found for struct `std::vec::IntoIter`\
    \ in the current scope\n  --> /tmp/tmptgly_x3y.rs:10:8\n   |\n10 |     l1.sort_unstable();\n\
    \   |        ^^^^^^^^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\n\
    error[E0599]: no method named `reverse` found for struct `std::vec::IntoIter`\
    \ in the current scope\n  --> /tmp/tmptgly_x3y.rs:13:8\n   |\n13 |     l2.reverse();\n\
    \   |        ^^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\nerror[E0599]:\
    \ no method named `sort_unstable` found for struct `std::vec::IntoIter` in the\
    \ current scope\n  --> /tmp/tmptgly_x3y.rs:14:8\n   |\n14 |     l2.sort_unstable();\n\
    \   |        ^^^^^^^^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n\
    \    let mut even = l.iter().filter(|&x| x % 2 == 0).cloned().collect::<Vec<_>>();\n\
    \    even.sort_by_key(|&x| x.clone());\n    let mut odd = l.iter().filter(|&x|\
    \ x % 2 == 1).cloned().collect::<Vec<_>>();\n    odd.sort_by_key(|&x| x.clone());\n\
    \    let mut l = even;\n    l.append(odd);\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpahbzvhox.rs:15:14\n   |\n\
    15 |     l.append(odd);\n   |              ^^^\n   |              |\n   |    \
    \          expected `&mut Vec<isize>`, found struct `Vec`\n   |              help:\
    \ consider mutably borrowing here: `&mut odd`\n   |\n   = note: expected mutable\
    \ reference `&mut Vec<isize>`\n                         found struct `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l\n        .iter()\n\
    \        .cloned()\n        .sort_by(|a, b| a % 2 != b % 2)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmpi_kfo9_8.rs:12:10\n   |\n12 |         .sort_by(|a,\
    \ b| a % 2 != b % 2)\n   |          ^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut evens = l.iter().cloned().cloned().enumerate().filter(|(_,\
    \ v)| *v % 2 == 0).collect();\n    evens.sort_by(|a, b| a.0.cmp(b.0));\n    evens.into_iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmpcfqhghvn.rs:9:39\n     |\n9    |  \
    \   let mut evens = l.iter().cloned().cloned().enumerate().filter(|(_, v)| *v\
    \ % 2 == 0).collect();\n     |                                       ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&&_`\n  \
    \              found reference `&isize`\n     = note: required because of the\
    \ requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_, isize>>`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `enumerate`\
    \ exists for struct `Cloned<Cloned<std::slice::Iter<'_, isize>>>`, but its trait\
    \ bounds were not satisfied\n  --> /tmp/tmpcfqhghvn.rs:9:48\n   |\n9  |      \
    \ let mut evens = l.iter().cloned().cloned().enumerate().filter(|(_, v)| *v %\
    \ 2 == 0).collect();\n   |                                                  ^^^^^^^^^\
    \ method cannot be called on `Cloned<Cloned<std::slice::Iter<'_, isize>>>` due\
    \ to unsatisfied trait bounds\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `<Cloned<std::slice::Iter<'_, isize>> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<Cloned<std::slice::Iter<'_, isize>>>:\
    \ Iterator`\n           `Cloned<Cloned<std::slice::Iter<'_, isize>>>: Iterator`\n\
    \           which is required by `&mut Cloned<Cloned<std::slice::Iter<'_, isize>>>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l.clone();\n\
    \    let mut evens = Vec::with_capacity(l.len() / 2);\n\n    for i in 0..(l.len()\
    \ / 2)-1 {\n        let j = if i % 2 == 1 {\n            i + 1\n        } else\
    \ {\n            i + 2;\n        };\n\n        evens.push(l[j]);\n        l[j]\
    \ = l[i];\n        l[i] = evens[i];\n    }\n\n    l\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpj6pr7d61.rs:16:13\n\
    \   |\n13 |           let j = if i % 2 == 1 {\n   |  _________________-\n14 |\
    \ |             i + 1\n   | |             ----- expected because of this\n15 |\
    \ |         } else {\n16 | |             i + 2;\n   | |             ^^^^^-\n \
    \  | |             |    |\n   | |             |    help: consider removing this\
    \ semicolon\n   | |             expected `usize`, found `()`\n17 | |         };\n\
    \   | |_________- `if` and `else` have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().rev().step_by(2).map(|(i,\
    \ j)| (i, j)).cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi8vse0rw.rs:9:36\n  |\n9 |\
    \     l.iter().rev().step_by(2).map(|(i, j)| (i, j)).cloned().collect()\n  | \
    \                                   ^^^^^-\n  |                              \
    \      |    |\n  |                                    |    expected due to this\n\
    \  |                                    expected `isize`, found tuple\n  |\n \
    \ = note: expected type `isize`\n            found tuple `(_, _)`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort_by_key(|x| x.0);\n    even.iter().cloned().map(|x| x.1).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0609]: no field `0` on type `&isize`\n  --> /tmp/tmphc3lsl2n.rs:10:28\n\
    \   |\n10 |     even.sort_by_key(|x| x.0);\n   |                            ^\n\
    \nerror[E0610]: `isize` is a primitive type and therefore doesn't have fields\n\
    \  --> /tmp/tmphc3lsl2n.rs:11:36\n   |\n11 |     even.iter().cloned().map(|x|\
    \ x.1).collect()\n   |                                    ^\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0609, E0610.\n\
    For more information about an error, try `rustc --explain E0609`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    if l.len() < 2 {\n\
    \        l\n    } else {\n        let mut odd = l.iter().cloned().enumerate().map(|(i,\
    \ &el)| {\n            if i % 2 == 0 {\n                el\n            } else\
    \ {\n                (i, el)\n            }\n        });\n        odd.sort_by_key(|&(k,\
    \ v)| {\n            -v\n        });\n        odd.cloned()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_lyjatyx.rs:12:62\n   |\n\
    12 |         let mut odd = l.iter().cloned().enumerate().map(|(i, &el)| {\n  \
    \ |                                                              ^^^- expected\
    \ due to this\n   |                                                          \
    \    |\n   |                                                              expected\
    \ `isize`, found reference\n   |                                             \
    \                 help: you can probably remove the explicit borrow: `el`\n  \
    \ |\n   = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0308]:\
    \ `if` and `else` have incompatible types\n  --> /tmp/tmp_lyjatyx.rs:16:17\n \
    \  |\n13 | /             if i % 2 == 0 {\n14 | |                 el\n   | |  \
    \               -- expected because of this\n15 | |             } else {\n16 |\
    \ |                 (i, el)\n   | |                 ^^^^^^^ cyclic type of infinite\
    \ size\n17 | |             }\n   | |_____________- `if` and `else` have incompatible\
    \ types\n\nerror[E0599]: no method named `sort_by_key` found for struct `Map`\
    \ in the current scope\n  --> /tmp/tmp_lyjatyx.rs:19:13\n   |\n19 |         odd.sort_by_key(|&(k,\
    \ v)| {\n   |             ^^^^^^^^^^^ method not found in `Map<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, _>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_lyjatyx.rs:22:9\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                \
    \                ---------- expected `Vec<isize>` because of return type\n...\n\
    22 |         odd.cloned()\n   |         ^^^^^^^^^^^^ expected struct `Vec`, found\
    \ struct `Cloned`\n   |\n   = note: expected struct `Vec<isize>`\n           \
    \   found struct `Cloned<Map<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, _>>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l\n        .iter()\n\
    \        .zip(l.iter().cloned())\n        .sort_by(|a, b| a.0 % 2)\n        .take(l.len()\
    \ / 2)\n        .clone()\n}\n\nfn main() {\n    let candidate = sort_even;\n \
    \   assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `Zip` in the current\
    \ scope\n  --> /tmp/tmph8k3_9dr.rs:12:10\n   |\n12 |         .sort_by(|a, b| a.0\
    \ % 2)\n   |          ^^^^^^^ method not found in `Zip<std::slice::Iter<'_, isize>,\
    \ Cloned<std::slice::Iter<'_, isize>>>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    if l.len() % 2 ==\
    \ 0 {\n        l.iter().cloned().sorted_by_key(|&x| x % 2).collect::<Vec<_>>()\n\
    \    } else {\n        l.iter().cloned().sorted_by_key(|&x| x).collect::<Vec<_>>()\n\
    \    }\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted_by_key` found for struct `Cloned`\
    \ in the current scope\n  --> /tmp/tmp89vtrxns.rs:10:27\n   |\n10 |         l.iter().cloned().sorted_by_key(|&x|\
    \ x % 2).collect::<Vec<_>>()\n   |                           ^^^^^^^^^^^^^ method\
    \ not found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror[E0599]: no method\
    \ named `sorted_by_key` found for struct `Cloned` in the current scope\n  -->\
    \ /tmp/tmp89vtrxns.rs:12:27\n   |\n12 |         l.iter().cloned().sorted_by_key(|&x|\
    \ x).collect::<Vec<_>>()\n   |                           ^^^^^^^^^^^^^ method\
    \ not found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l.clone();\n\
    \    l.sort_unstable();\n    for i in 0..l.len() / 2 {\n        l[i] = l[i].min(&l[(i\
    \ + 1)..].iter().map(|&x| x).max().unwrap()).unwrap();\n    }\n    l\n}\n\nfn\
    \ main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgt9y49fn.rs:12:25\n   |\n\
    12 |         l[i] = l[i].min(&l[(i + 1)..].iter().map(|&x| x).max().unwrap()).unwrap();\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider removing the borrow\n\
    \   |\n12 -         l[i] = l[i].min(&l[(i + 1)..].iter().map(|&x| x).max().unwrap()).unwrap();\n\
    12 +         l[i] = l[i].min(l[(i + 1)..].iter().map(|&x| x).max().unwrap()).unwrap();\n\
    \   | \n\nerror[E0599]: no method named `unwrap` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpgt9y49fn.rs:12:74\n   |\n12 |         l[i] = l[i].min(&l[(i\
    \ + 1)..].iter().map(|&x| x).max().unwrap()).unwrap();\n   |                 \
    \                                                         ^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by_key(|&i|\
    \ i % 2 == 0)\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnpyuc_ym.rs:9:5\n  |\n8 |\
    \ fn sort_even(l: Vec<isize>) -> Vec<isize> {\n  |                           \
    \     ---------- expected `Vec<isize>` because of return type\n9 |     l.sort_unstable_by_key(|&i|\
    \ i % 2 == 0)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |\n  = note: expected struct `Vec<isize>`\n          found\
    \ unit type `()`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter()\n      \
    \  .enumerate()\n        .filter(|(index, value)| {\n            (index % 2) ==\
    \ 0 ? true : false\n        })\n        .fold(l, |mut l, &(index, value)| {\n\
    \            l.swap(index, index + 1);\n            l.swap(index, index);\n  \
    \          l\n        });\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword\
    \ `true`\n  --> /tmp/tmpm0uh5rm3.rs:12:32\n   |\n12 |             (index % 2)\
    \ == 0 ? true : false\n   |                                ^^^^ expected one of\
    \ `.`, `;`, `?`, `}`, or an operator\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpm0uh5rm3.rs:14:26\n   |\n14 |         .fold(l, |mut l, &(index, value)|\
    \ {\n   |                          ^^^^^^^^^^^^^^-\n   |                     \
    \     |             |\n   |                          |             expected due\
    \ to this\n   |                          expected tuple, found reference\n   |\n\
    \   = note:  expected tuple `(usize, &isize)`\n           found reference `&_`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpm0uh5rm3.rs:8:32\n   |\n8  | fn\
    \ sort_even(l: Vec<isize>) -> Vec<isize> {\n   |    ---------                \
    \   ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n...\n18 |     \
    \    });\n   |           - help: remove this semicolon\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n\
    \    for i in 0..l.len() {\n        if i % 2 == 0 {\n            evens.push(l[i]);\n\
    \        } else {\n            evens.swap_remove(&l[i]);\n        }\n    }\n \
    \   evens\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmrxbqa84.rs:14:31\n   |\n\
    14 |             evens.swap_remove(&l[i]);\n   |                             \
    \  ^^^^^ expected `usize`, found `&isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| {\n        if a % 2 == 0 {\n            b\n        } else {\n           \
    \ a\n        }\n    })\n}\n\nfn main() {\n    let candidate = sort_even;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjf2uhc4t.rs:11:13\n   |\n\
    11 |             b\n   |             ^ expected enum `std::cmp::Ordering`, found\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjf2uhc4t.rs:13:13\n\
    \   |\n13 |             a\n   |             ^ expected enum `std::cmp::Ordering`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjf2uhc4t.rs:9:5\n\
    \   |\n8  |   fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    9  | /     l.sort_unstable_by(|a, b| {\n10 | |         if a % 2 == 0 {\n11 | |\
    \             b\n12 | |         } else {\n13 | |             a\n14 | |       \
    \  }\n15 | |     })\n   | |______^ expected struct `Vec`, found `()`\n   |\n \
    \  = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize>\
    \ = l.clone();\n    let mut odd: Vec<isize> = l.clone();\n\n    for i in 0..l.len()\
    \ {\n        if i % 2 == 0 {\n            even.push(i);\n        } else {\n  \
    \          odd.push(even[i / 2]);\n        }\n    }\n\n    odd.sort();\n\n   \
    \ for i in 0..odd.len() {\n        even[i] = odd[i];\n    }\n\n    even\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnmuv1yq5.rs:14:23\n   |\n\
    14 |             even.push(i);\n   |                       ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |             even.push(i.try_into().unwrap());\n\
    \   |                        ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    if l.len() % 2 ==\
    \ 1 {\n        l.sort();\n    } else {\n        l.sort_unstable();\n    }\n  \
    \  l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpr6meha8n.rs:10:9\n   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |              - help: consider changing this to be mutable: `mut l`\n\
    9  |     if l.len() % 2 == 1 {\n10 |         l.sort();\n   |         ^^^^^^^^\
    \ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `l` as mutable, as it\
    \ is not declared as mutable\n  --> /tmp/tmpr6meha8n.rs:12:9\n   |\n8  | fn sort_even(l:\
    \ Vec<isize>) -> Vec<isize> {\n   |              - help: consider changing this\
    \ to be mutable: `mut l`\n...\n12 |         l.sort_unstable();\n   |         ^^^^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().enumerate().filter_map(|(i,\
    \ elem)| if i % 2 == 0 { Some(elem) } else { None }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmp4c6em0yx.rs:9:93\n     |\n9\
    \    |     l.iter().enumerate().filter_map(|(i, elem)| if i % 2 == 0 { Some(elem)\
    \ } else { None }).collect()\n     |                                         \
    \                                                    ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n\
    \    l.sort();\n    let mut l2 = l;\n    l2.par_iter_mut().for_each(|x| { l.swap(x,\
    \ l.iter().skip(x).next().unwrap()).collect::<Vec<_>>() });\n    l2\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `par_iter_mut` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpu9cdrcng.rs:12:8\n   |\n12 |     l2.par_iter_mut().for_each(|x|\
    \ { l.swap(x, l.iter().skip(x).next().unwrap()).collect::<Vec<_>>() });\n   |\
    \        ^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `iter_mut`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu9cdrcng.rs:12:48\n\
    \   |\n12 |     l2.par_iter_mut().for_each(|x| { l.swap(x, l.iter().skip(x).next().unwrap()).collect::<Vec<_>>()\
    \ });\n   |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `&isize`\n\nerror[E0599]: `()` is not an iterator\n\
    \  --> /tmp/tmpu9cdrcng.rs:12:82\n   |\n12 |     l2.par_iter_mut().for_each(|x|\
    \ { l.swap(x, l.iter().skip(x).next().unwrap()).collect::<Vec<_>>() });\n   |\
    \                                                                            \
    \      ^^^^^^^ `()` is not an iterator\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `(): Iterator`\n           which is required\
    \ by `&mut (): Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = even.clone();\n    for i in 0..even.len() {\n        if i %\
    \ 2 == 0 {\n            even.swap(i, even.len() - 1 - i);\n        }\n    }\n\
    \    for i in 0..odd.len() {\n        if i % 2 == 1 {\n            odd.swap(i,\
    \ odd.len() - 1 - i);\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `even` as immutable because it is also borrowed\
    \ as mutable\n  --> /tmp/tmp9u97q8kz.rs:13:26\n   |\n13 |             even.swap(i,\
    \ even.len() - 1 - i);\n   |             -------------^^^^^^^^^^---------\n  \
    \ |             |    |       |\n   |             |    |       immutable borrow\
    \ occurs here\n   |             |    mutable borrow later used by call\n   | \
    \            mutable borrow occurs here\n   |\nhelp: try adding a local storing\
    \ this argument...\n  --> /tmp/tmp9u97q8kz.rs:13:26\n   |\n13 |             even.swap(i,\
    \ even.len() - 1 - i);\n   |                          ^^^^^^^^^^\nhelp: ...and\
    \ then using that local as the argument to this call\n  --> /tmp/tmp9u97q8kz.rs:13:13\n\
    \   |\n13 |             even.swap(i, even.len() - 1 - i);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0502]: cannot borrow `odd` as immutable because it is also borrowed as\
    \ mutable\n  --> /tmp/tmp9u97q8kz.rs:18:25\n   |\n18 |             odd.swap(i,\
    \ odd.len() - 1 - i);\n   |             ------------^^^^^^^^^---------\n   | \
    \            |   |       |\n   |             |   |       immutable borrow occurs\
    \ here\n   |             |   mutable borrow later used by call\n   |         \
    \    mutable borrow occurs here\n   |\nhelp: try adding a local storing this argument...\n\
    \  --> /tmp/tmp9u97q8kz.rs:18:25\n   |\n18 |             odd.swap(i, odd.len()\
    \ - 1 - i);\n   |                         ^^^^^^^^^\nhelp: ...and then using that\
    \ local as the argument to this call\n  --> /tmp/tmp9u97q8kz.rs:18:13\n   |\n\
    18 |             odd.swap(i, odd.len() - 1 - i);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l2 = l;\n\
    \    for i in 0..l.len() / 2 {\n        let j = i + 1;\n        l2.swap(i, j);\n\
    \    }\n    l2\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n  --> /tmp/tmpndtg_cbl.rs:10:17\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut l2 = l;\n   |                  - value moved here\n\
    10 |     for i in 0..l.len() / 2 {\n   |                 ^^^^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l2 = l;\n\
    \    l2.sort();\n    for i in 0..l.len() / 2 {\n        l2[i as usize] = l[i as\
    \ usize]\n    }\n    return l2;\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n  --> /tmp/tmpypdk46mu.rs:11:17\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut l2 = l;\n   |                  - value moved here\n\
    10 |     l2.sort();\n11 |     for i in 0..l.len() / 2 {\n   |                \
    \ ^^^^^^^ value borrowed here after move\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let evens = l.iter().filter(|&i|\
    \ i % 2 == 0).cloned().collect();\n    evens.sort_unstable();\n    evens\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpqnay0z46.rs:10:5\n\
    \   |\n9  |     let evens = l.iter().filter(|&i| i % 2 == 0).cloned().collect();\n\
    \   |         ----- consider giving `evens` a type\n10 |     evens.sort_unstable();\n\
    \   |     ^^^^^ cannot infer type\n   |\n   = note: type must be known at this\
    \ point\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().enumerate().map(|(i,\
    \ e)| {\n        if i % 2 == 0 {\n            e\n        } else {\n          \
    \  l.swap(0, i)\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpgbdha00e.rs:13:13\n\
    \   |\n10 | /         if i % 2 == 0 {\n11 | |             e\n   | |          \
    \   - expected because of this\n12 | |         } else {\n13 | |             l.swap(0,\
    \ i)\n   | |             ^^^^^^^^^^^^ expected `&isize`, found `()`\n14 | |  \
    \       }\n   | |_________- `if` and `else` have incompatible types\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    // Step 1: find the\
    \ indices of the odd elements of l\n    let mut odd_inds = vec![];\n    for i\
    \ in l.iter().skip(1) {\n        if i % 2 == 0 {\n            odd_inds.push(i);\n\
    \        }\n    }\n\n    // Step 2: get the even elements of l, sorted and inserted\n\
    \    let mut even = vec![];\n    for i in l.iter().skip(1) {\n        if i % 2\
    \ == 0 {\n            even.push(i);\n        }\n    }\n    for x in even {\n \
    \       odd_inds.insert(odd_inds.iter().find(|&y| y == x).unwrap() + 1, x);\n\
    \    }\n    odd_inds\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpm0icre6m.rs:25:53\n\
    \   |\n25 |         odd_inds.insert(odd_inds.iter().find(|&y| y == x).unwrap()\
    \ + 1, x);\n   |                                                     ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n   = note: required because of the requirements\
    \ on the impl of `PartialEq<&isize>` for `&&isize`\n\nerror[E0369]: cannot add\
    \ `{integer}` to `&&isize`\n  --> /tmp/tmpm0icre6m.rs:25:68\n   |\n25 |      \
    \   odd_inds.insert(odd_inds.iter().find(|&y| y == x).unwrap() + 1, x);\n   |\
    \                         ------------------------------------------ ^ - {integer}\n\
    \   |                         |\n   |                         &&isize\n   |\n\
    help: `+` can be used on `isize`, you can dereference `odd_inds.iter().find(|&y|\
    \ y == x).unwrap()`\n   |\n25 |         odd_inds.insert(*odd_inds.iter().find(|&y|\
    \ y == x).unwrap() + 1, x);\n   |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpm0icre6m.rs:27:5\n   |\n8  | fn sort_even(l: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                ---------- expected `Vec<isize>`\
    \ because of return type\n...\n27 |     odd_inds\n   |     ^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l2 = l.clone();\n\
    \    for (i, &v) in l2.iter_mut().enumerate() {\n        if i % 2 == 0 {\n   \
    \         *v = *i.to_owned() as isize;\n        } else {\n            *v = *i;\n\
    \        }\n    }\n    l2\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5lybnjwe.rs:10:13\n   |\n\
    10 |     for (i, &v) in l2.iter_mut().enumerate() {\n   |             ^^     -------------------------\
    \ this expression has type `Option<(usize, &mut isize)>`\n   |             |\n\
    \   |             types differ in mutability\n   |             help: you can probably\
    \ remove the explicit borrow: `v`\n   |\n   = note: expected mutable reference\
    \ `&mut isize`\n                      found reference `&_`\n\nerror[E0614]: type\
    \ `usize` cannot be dereferenced\n  --> /tmp/tmp5lybnjwe.rs:12:18\n   |\n12 |\
    \             *v = *i.to_owned() as isize;\n   |                  ^^^^^^^^^^^^^\n\
    \nerror[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmp5lybnjwe.rs:14:18\n\
    \   |\n14 |             *v = *i;\n   |                  ^^\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().enumerate().sorted(|(a,b),\
    \ (c,d)| (*a < *c) < *b).collect().cloned().collect()\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Enumerate` in\
    \ the current scope\n --> /tmp/tmpc9w1qqqa.rs:9:35\n  |\n9 |     l.iter().cloned().enumerate().sorted(|(a,b),\
    \ (c,d)| (*a < *c) < *b).collect().cloned().collect()\n  |                   \
    \                ^^^^^^ method not found in `Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().rev().enumerate().filter(|&(i,\
    \ e)| i % 2 == 0).map(|&(i, e)| {\n        l.swap(i, e)\n    }).collect()\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgg536f9g.rs:9:66\n  |\n9 |\
    \     l.iter().rev().enumerate().filter(|&(i, e)| i % 2 == 0).map(|&(i, e)| {\n\
    \  |                                                                  ^^^^^^-\n\
    \  |                                                                  |     |\n\
    \  |                                                                  |     expected\
    \ due to this\n  |                                                           \
    \       expected tuple, found reference\n  |\n  = note:  expected tuple `(usize,\
    \ &isize)`\n          found reference `&_`\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `()`\n    --> /tmp/tmpgg536f9g.rs:11:8\n\
    \     |\n11   |     }).collect()\n     |        ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=()>`\n     |\n     = help: the\
    \ trait `FromIterator<()>` is not implemented for `Vec<isize>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| if a == 0 || b == 0 { a } else { a < b });\n    l\n}\n\nfn main() {\n   \
    \ let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n --> /tmp/tmpyo7y9r_e.rs:9:36\n\
    \  |\n9 |     l.sort_unstable_by(|a, b| if a == 0 || b == 0 { a } else { a < b\
    \ });\n  |                                    ^^ no implementation for `&isize\
    \ == {integer}`\n  |\n  = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n --> /tmp/tmpyo7y9r_e.rs:9:46\n\
    \  |\n9 |     l.sort_unstable_by(|a, b| if a == 0 || b == 0 { a } else { a < b\
    \ });\n  |                                              ^^ no implementation for\
    \ `&isize == {integer}`\n  |\n  = help: the trait `PartialEq<{integer}>` is not\
    \ implemented for `&isize`\n  = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n            f32\n            f64\n            i128\n    \
    \        i16\n            i32\n            i64\n            i8\n            isize\n\
    \          and 6 others\n\nerror[E0308]: mismatched types\n --> /tmp/tmpyo7y9r_e.rs:9:53\n\
    \  |\n9 |     l.sort_unstable_by(|a, b| if a == 0 || b == 0 { a } else { a < b\
    \ });\n  |                                                     ^ expected enum\
    \ `std::cmp::Ordering`, found `&isize`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpyo7y9r_e.rs:9:64\n  |\n9 |     l.sort_unstable_by(|a, b| if a == 0 ||\
    \ b == 0 { a } else { a < b });\n  |                                         \
    \                       ^^^^^ expected enum `std::cmp::Ordering`, found `bool`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even_indexes\
    \ = vec![];\n    let mut even_values = vec![];\n    for i in l.iter() {\n    \
    \    if i % 2 == 0 {\n            even_indexes.push(i);\n            even_values.push(i);\n\
    \        } else {\n            let mut smallest = i;\n            for j in even_indexes\
    \ {\n                if even_values[j] < smallest {\n                    even_indexes.swap(j,\
    \ i);\n                    even_values.swap(j, i);\n                    smallest\
    \ = even_values[j];\n                }\n            }\n        }\n    }\n    even_indexes.iter()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[&isize]` cannot be indexed by `&isize`\n  -->\
    \ /tmp/tmpz8u8qvs5.rs:18:20\n   |\n18 |                 if even_values[j] < smallest\
    \ {\n   |                    ^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[&isize]>` is not\
    \ implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz8u8qvs5.rs:19:39\n\
    \   |\n19 |                     even_indexes.swap(j, i);\n   |               \
    \                        ^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz8u8qvs5.rs:19:42\n   |\n19 |                     even_indexes.swap(j,\
    \ i);\n   |                                          ^ expected `usize`, found\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz8u8qvs5.rs:20:38\n\
    \   |\n20 |                     even_values.swap(j, i);\n   |                \
    \                      ^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz8u8qvs5.rs:20:41\n   |\n20 |                     even_values.swap(j,\
    \ i);\n   |                                         ^ expected `usize`, found\
    \ `&isize`\n\nerror[E0277]: the type `[&isize]` cannot be indexed by `&isize`\n\
    \  --> /tmp/tmpz8u8qvs5.rs:21:32\n   |\n21 |                     smallest = even_values[j];\n\
    \   |                                ^^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[&isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz8u8qvs5.rs:26:5\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                \
    \                ---------- expected `Vec<isize>` because of return type\n...\n\
    26 |     even_indexes.iter()\n   |     ^^^^^^^^^^^^"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut even_big: Vec<isize> = even;\n    for i in 0..even.len() {\n    \
    \    if even.len() - i & 1 == 0 {\n            even_big.swap(i, even.len() - i\
    \ & 1);\n        } else {\n            even_big.swap(i, i + 1);\n        }\n \
    \   }\n    even_big\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpbfjjx47r.rs:9:9\n\
    \  |\n9 |     let mut even = l;\n  |         ----^^^^\n  |         |\n  |    \
    \     help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0382]: borrow of moved value: `even`\n  --> /tmp/tmpbfjjx47r.rs:11:17\n\
    \   |\n9  |     let mut even = l;\n   |         -------- move occurs because `even`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n10 |     let\
    \ mut even_big: Vec<isize> = even;\n   |                                    ----\
    \ value moved here\n11 |     for i in 0..even.len() {\n   |                 ^^^^^^^^^^\
    \ value borrowed here after move\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    for i in even.iter_mut() {\n        *i /= 2;\n    }\n \
    \   even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 1]`,\n right: `[1, 2, 3]`', /tmp/tmpttxqzq97.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l2 = l.iter();\n\
    \    for i in 0..l.len() - 1 {\n        if i % 2 == 0 {\n            l2.swap(0,\
    \ i);\n        }\n    }\n    l2\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `swap` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpddrhagw5.rs:12:16\n   |\n12 |          \
    \   l2.swap(0, i);\n   |                ^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpddrhagw5.rs:15:5\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                \
    \                ---------- expected `Vec<isize>` because of return type\n...\n\
    15 |     l2\n   |     ^^ expected struct `Vec`, found struct `std::slice::Iter`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().enumerate().map(|(i,\
    \ v)| {\n        match i % 2 {\n            0 => v,\n            1 => v.clone(),\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0004]: non-exhaustive patterns: `_` not covered\n  --> /tmp/tmp953rphz_.rs:10:15\n\
    \   |\n10 |         match i % 2 {\n   |               ^^^^^ pattern `_` not covered\n\
    \   |\n   = note: the matched value is of type `usize`\n   = note: `usize` does\
    \ not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n\
    help: ensure that all possible cases are being handled by adding a match arm with\
    \ a wildcard pattern or an explicit pattern as shown\n   |\n12 ~             1\
    \ => v.clone(),\n13 ~             _ => todo!(),\n   |\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0004`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \n    for i in 0..l.len() / 2 {\n        if i % 2 == 0 {\n            l.swap(i,\
    \ l.len() - i - 1);\n        }\n    }\n\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `l` as immutable because it is also borrowed\
    \ as mutable\n  --> /tmp/tmp6qpu8x2a.rs:13:23\n   |\n13 |             l.swap(i,\
    \ l.len() - i - 1);\n   |             ----------^^^^^^^---------\n   |       \
    \      | |       |\n   |             | |       immutable borrow occurs here\n\
    \   |             | mutable borrow later used by call\n   |             mutable\
    \ borrow occurs here\n   |\nhelp: try adding a local storing this argument...\n\
    \  --> /tmp/tmp6qpu8x2a.rs:13:23\n   |\n13 |             l.swap(i, l.len() - i\
    \ - 1);\n   |                       ^^^^^^^\nhelp: ...and then using that local\
    \ as the argument to this call\n  --> /tmp/tmp6qpu8x2a.rs:13:13\n   |\n13 |  \
    \           l.swap(i, l.len() - i - 1);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| if a % 2 == 1 { b } else { a })\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4cek35v.rs:9:47\n  |\n9 |\
    \     l.sort_unstable_by(|a, b| if a % 2 == 1 { b } else { a })\n  |         \
    \                                      ^ expected enum `std::cmp::Ordering`, found\
    \ `&isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpu4cek35v.rs:9:58\n\
    \  |\n9 |     l.sort_unstable_by(|a, b| if a % 2 == 1 { b } else { a })\n  | \
    \                                                         ^ expected enum `std::cmp::Ordering`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpu4cek35v.rs:9:5\n\
    \  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n  |                   \
    \             ---------- expected `Vec<isize>` because of return type\n9 |   \
    \  l.sort_unstable_by(|a, b| if a % 2 == 1 { b } else { a })\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \          found unit type `()`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let even = l.iter().cloned().enumerate().filter_map(|(i,\
    \ v)| {\n        if i % 2 == 0 {\n            Some((i, v))\n        } else {\n\
    \            None\n        }\n    }).collect();\n\n    even.sort_by_key(|&(_,\
    \ v)| v);\n    even.clone().into_iter().collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpbkk44s0a.rs:17:5\n\
    \   |\n9  |     let even = l.iter().cloned().enumerate().filter_map(|(i, v)| {\n\
    \   |         ---- consider giving `even` a type\n...\n17 |     even.sort_by_key(|&(_,\
    \ v)| v);\n   |     ^^^^ cannot infer type\n   |\n   = note: type must be known\
    \ at this point\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    if l.len() <= 2 {\n\
    \        l\n    } else {\n        let mut s = l[0];\n        let mut e = 1;\n\
    \        let mut m = 2;\n        while e <= l.len() {\n            let mut i =\
    \ 0;\n            while i < e && m == e.saturating_sub(s.saturating_add((l[i]\
    \ - s).unwrap())) {\n                i += 1;\n            }\n            if i\
    \ != e {\n                s = l[i];\n                e += 1;\n               \
    \ m = e.saturating_sub(s.saturating_add((l[e] - s).unwrap()));\n            }\
    \ else {\n                s.push(l[e]);\n                s.pop();\n          \
    \      e += 1;\n                m = e.saturating_sub(s.saturating_add((l[e] -\
    \ s).unwrap()));\n            }\n        }\n        l\n    }\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpbrb20usg.rs:17:78\n   |\n17 |             while i < e &&\
    \ m == e.saturating_sub(s.saturating_add((l[i] - s).unwrap())) {\n   |       \
    \                                                                       ^^^^^^\
    \ method not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbrb20usg.rs:17:50\n\
    \   |\n17 |             while i < e && m == e.saturating_sub(s.saturating_add((l[i]\
    \ - s).unwrap())) {\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n17 |           \
    \  while i < e && m == e.saturating_sub(s.saturating_add((l[i] - s).unwrap()).try_into().unwrap())\
    \ {\n   |                                                                    \
    \                   ++++++++++++++++++++\n\nerror[E0599]: no method named `unwrap`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpbrb20usg.rs:23:66\n\
    \   |\n23 |                 m = e.saturating_sub(s.saturating_add((l[e] - s).unwrap()));\n\
    \   |                                                                  ^^^^^^\
    \ method not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbrb20usg.rs:23:38\n\
    \   |\n23 |                 m = e.saturating_sub(s.saturating_add((l[e] - s).unwrap()));\n\
    \   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n23 |           \
    \      m = e.saturating_sub(s.saturating_add((l[e] - s).unwrap()).try_into().unwrap());\n\
    \   |                                                                        \
    \   ++++++++++++++++++++\n\nerror[E0599]: no method named `push` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpbrb20usg.rs:25:19\n   |\n25 |  \
    \               s.push(l[e]);\n   |                   ^^^^ method not found in\
    \ `isize`\n\nerror[E0599]: n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort();\n    l\
    \ as Vec<isize>\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpp3pg9lvn.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort();\n  |     ^^^^^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut evens = Vec::new();\n\
    \    let mut odds = Vec::new();\n    for (i, val) in l.iter().enumerate() {\n\
    \        evens.push_back(val);\n        odds.push((i + 1) * 2 - 1);\n    }\n\n\
    \    odds = evens.iter().zip(odds).filter(|&(a, b)| a % 2 == 1).collect();\n\n\
    \    evens.sort_unstable();\n    evens.extend(odds);\n\n    evens.iter().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpdmxkb2pm.rs:12:15\n   |\n12 |         evens.push_back(val);\n\
    \   |               ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0277]: a\
    \ value of type `Vec<usize>` cannot be built from an iterator over elements of\
    \ type `(&_, usize)`\n    --> /tmp/tmpdmxkb2pm.rs:16:64\n     |\n16   |     odds\
    \ = evens.iter().zip(odds).filter(|&(a, b)| a % 2 == 1).collect();\n     |   \
    \                                                             ^^^^^^^ value of\
    \ type `Vec<usize>` cannot be built from `std::iter::Iterator<Item=(&_, usize)>`\n\
    \     |\n     = help: the trait `FromIterator<(&_, usize)>` is not implemented\
    \ for `Vec<usize>`\n     = help: the trait `FromIterator<T>` is implemented for\
    \ `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0277]: a value of\
    \ type `Vec<isize>` cannot be built from an iterator over elements of type `&usize`\n\
    \    --> /tmp/tmpdmxkb2pm.rs:21:18\n     |\n21   |     evens.iter().collect()\n\
    \     |                  ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&usize>`\n     |\n     = help: the trait `FromIterator<&usize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n\
    \    let mut even = Vec::with_capacity(l.len());\n    let mut odd = Vec::with_capacity(l.len());\n\
    \    for index in range(l.len()) {\n        if index % 2 == 0 {\n            even.push(l[index]);\n\
    \        } else {\n            odd.push(l[index]);\n        }\n    }\n    odd.sort();\n\
    \    for index in 0..even.len() {\n        l[even[index]] = l[odd[index]];\n \
    \   }\n    return l;\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp3onb_dom.rs:12:18\n\
    \   |\n12 |     for index in range(l.len()) {\n   |                  ^^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing this function\n   |\n1 \
    \ | use std::slice::range;\n   |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| a % 2 != b);\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n \
    \   assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpobhma92b.rs:9:40\n  |\n9 |\
    \     l.sort_unstable_by(|a, b| a % 2 != b);\n  |                            \
    \            ^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n9 |     l.sort_unstable_by(|a, b| a % 2 != *b);\n  |      \
    \                                  +\n\nerror[E0308]: mismatched types\n --> /tmp/tmpobhma92b.rs:9:31\n\
    \  |\n9 |     l.sort_unstable_by(|a, b| a % 2 != b);\n  |                    \
    \           ^^^^^^^^^^ expected enum `std::cmp::Ordering`, found `bool`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize>\
    \ = l.to_vec();\n    even.sort_unstable();\n    even.copy_from_slice(&l);\n  \
    \  even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmp_wo1ekg_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let even = l.clone();\n\
    \    for (i, &x) in even.iter_mut().enumerate() {\n        if i % 2 == 0 {\n \
    \           *x = *i;\n        }\n    }\n    even.iter().cloned().collect()\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg_6evm3s.rs:10:13\n   |\n\
    10 |     for (i, &x) in even.iter_mut().enumerate() {\n   |             ^^   \
    \  --------------------------- this expression has type `Option<(usize, &mut isize)>`\n\
    \   |             |\n   |             types differ in mutability\n   |       \
    \      help: you can probably remove the explicit borrow: `x`\n   |\n   = note:\
    \ expected mutable reference `&mut isize`\n                      found reference\
    \ `&_`\n\nerror[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmpg_6evm3s.rs:12:18\n\
    \   |\n12 |             *x = *i;\n   |                  ^^\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by_key(|x|\
    \ x % 2)\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp22g73o8_.rs:9:5\n  |\n8 |\
    \ fn sort_even(l: Vec<isize>) -> Vec<isize> {\n  |                           \
    \     ---------- expected `Vec<isize>` because of return type\n9 |     l.sort_unstable_by_key(|x|\
    \ x % 2)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found\
    \ `()`\n  |\n  = note: expected struct `Vec<isize>`\n          found unit type\
    \ `()`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().sort().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `Cloned` in the current\
    \ scope\n --> /tmp/tmp0hi32sdg.rs:9:23\n  |\n9 |     l.iter().cloned().sort().collect()\n\
    \  |                       ^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l.to_vec();\n\
    \    let mut even = vec![];\n    even.push(l[0]);\n    let mut odd = vec![];\n\
    \    odd.push(l[0]);\n    for i in 1..l.len() {\n        if i & 1 == 1 {\n   \
    \         even.push(l[i]);\n        } else {\n            odd.push(l[i]);\n  \
    \      }\n    }\n    let mut even = even.clone();\n    let mut even = even.sort_by(|&a|\
    \ a);\n    for i in 0..even.len() {\n        even[i] = even[even.len() - i];\n\
    \    }\n    let mut odd = odd.clone();\n    let mut odd = odd.sort_by(|&a| a);\n\
    \    for i in 0..odd.len() {\n        odd[i] = odd[odd.len() - i];\n    }\n  \
    \  even.extend(&odd);\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n\
    \  --> /tmp/tmpt4mv2piz.rs:22:25\n   |\n22 |     let mut even = even.sort_by(|&a|\
    \ a);\n   |                         ^^^^^^^ ---- takes 1 argument\n   |      \
    \                   |\n   |                         expected closure that takes\
    \ 2 arguments\n\nerror[E0599]: no method named `len` found for unit type `()`\
    \ in the current scope\n  --> /tmp/tmpt4mv2piz.rs:23:22\n   |\n23 |     for i\
    \ in 0..even.len() {\n   |                      ^^^ method not found in `()`\n\
    \nerror[E0608]: cannot index into a value of type `()`\n  --> /tmp/tmpt4mv2piz.rs:24:9\n\
    \   |\n24 |         even[i] = even[even.len() - i];\n   |         ^^^^^^^\n  \
    \ |\n   = help: to access tuple elements, use tuple indexing syntax (e.g., `tuple.0`)\n\
    \nerror[E0599]: no method named `len` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpt4mv2piz.rs:24:29\n   |\n24 |         even[i] = even[even.len()\
    \ - i];\n   |                             ^^^ method not found in `()`\n\nerror[E0593]:\
    \ closure is expected to take 2 arguments, but it takes 1 argument\n  --> /tmp/tmpt4mv2piz.rs:27:23\n\
    \   |\n27 |     let mut odd = odd.sort_by(|&a| a);\n   |                     \
    \  ^^^^^^^ ---- takes 1 argument\n   |                       |\n   |         \
    \              expected closure that takes 2 arguments\n\nerror[E0599]: no method\
    \ named `len` found for unit type `()` in the current scope\n  --> /tmp/tmpt4mv2piz.rs:28:21\n\
    \   |\n28 |     for i in 0..odd.len() {\n   |                     ^^^ method not\
    \ found in `()`\n\nerror[E0608]: cannot index into a value of type `()`\n  -->\
    \ /tmp/tmpt4mv2piz.rs:29:9\n   |\n29 |         odd[i] = odd[odd.len() - i];\n\
    \   |         ^^^^^^\n   |\n   = help: to access tuple elements, use tuple indexing\
    \ syntax (e.g., `tuple.0`)\n\nerror[E0599]: no method named `len` found for unit\
    \ type `()` in the current scope\n  --> /tmp/tmpt4mv2piz.rs:29:26\n   |\n29 |\
    \         odd[i] = odd[odd.len() - i];\n   |                          ^^^ method\
    \ not found in `()`\n\nerror[E0277]: `&()` is not an iterator\n   --> /tmp/tmpt4mv2piz.rs:31"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l2 = l;\n\
    \    let mut even_indicators = vec![];\n    let mut i = 0;\n    while i < l2.len()\
    \ {\n        if i % 2 == 0 {\n            even_indicators.push(l2[i]);\n     \
    \   } else {\n            let mut j = i;\n            while j < l2.len() && l2[j]\
    \ % 2 == 0 {\n                j += 1;\n            }\n            even_indicators.push(l2[j]);\n\
    \            l2.swap(i, j);\n        }\n        i += 1;\n    }\n    l2\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpsgrv3gos.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().filter(|&x| x % 2 == 0).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpl93mtkl2.rs:10:38\n     |\n\
    10   |     l.iter().filter(|&x| x % 2 == 0).collect()\n     |                \
    \                      ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().enumerate().filter_map(|(i,\
    \ v)| {\n        if i.is_odd() {\n            Some(v)\n        } else {\n    \
    \        None\n        }\n    }).cloned().collect::<Vec<_>>()\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmplvuspd3z.rs:10:14\n   |\n10 |         if i.is_odd() {\n\
    \   |              ^^^^^^ method not found in `usize`\n\nerror[E0271]: type mismatch\
    \ resolving `<[closure@/tmp/tmplvuspd3z.rs:9:46: 15:6] as FnOnce<((usize, isize),)>>::Output\
    \ == Option<&_>`\n    --> /tmp/tmplvuspd3z.rs:15:8\n     |\n15   |     }).cloned().collect::<Vec<_>>()\n\
    \     |        ^^^^^^ expected reference, found `isize`\n     |\n     = note:\
    \ expected enum `Option<&_>`\n                found enum `Option<isize>`\n   \
    \  = note: required because of the requirements on the impl of `Iterator` for\
    \ `FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmplvuspd3z.rs:9:46:\
    \ 15:6]>`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method `collect`\
    \ exists for struct `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>,\
    \ [closure@/tmp/tmplvuspd3z.rs:9:46: 15:6]>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmplvuspd3z.rs:15:17\n   |\n15 |        }).cloned().collect::<Vec<_>>()\n\
    \   |                    ^^^^^^^ method cannot be called on `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmplvuspd3z.rs:9:46: 15:6]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmplvuspd3z.rs:9:46:\
    \ 15:6]> as Iterator>::Item = &_`\n           which is required by `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmplvuspd3z.rs:9:46: 15:6]>>: Iterator`\n          \
    \ `Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmplvuspd3z.rs:9:46:\
    \ 15:6]>>: Iterator`\n           which is required by `&mut Cloned<FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmplvuspd3z.rs:9:46: 15:6]>>: Iterator`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, t"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize>\
    \ = Vec::new();\n    for i in l {\n        if i % 2 == 0 {\n            even.push(i);\n\
    \        } else {\n            even.sort_unstable();\n            even.push(i);\n\
    \        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-5, -3, 0, 2, 3, 3, 5, 9, 123, 1, -10]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpl8_j11q0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    if l.len() % 2 == 0 {\n        l.iter().cloned().collect()\n    } else {\n\
    \        l.iter_mut().cloned().collect()\n    }\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::IterMut<'_, isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpwckik_mu.rs:13:22\n     |\n13   |\
    \         l.iter_mut().cloned().collect()\n     |                      ^^^^^^\
    \ types differ in mutability\n     |\n     = note:      expected reference `&_`\n\
    \             found mutable reference `&mut isize`\nnote: required by a bound\
    \ in `cloned`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<std::slice::IterMut<'_,\
    \ isize>>`, but its trait bounds were not satisfied\n   --> /tmp/tmpwckik_mu.rs:13:31\n\
    \    |\n13  |           l.iter_mut().cloned().collect()\n    |               \
    \                  ^^^^^^^ method cannot be called on `Cloned<std::slice::IterMut<'_,\
    \ isize>>` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `<std::slice::IterMut<'_, isize> as\
    \ Iterator>::Item = &_`\n            which is required by `Cloned<std::slice::IterMut<'_,\
    \ isize>>: Iterator`\n            `Cloned<std::slice::IterMut<'_, isize>>: Iterator`\n\
    \            which is required by `&mut Cloned<std::slice::IterMut<'_, isize>>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.clone();\n\
    \    let mut odd = even.clone();\n    for i in 0..even.len() {\n        let mut\
    \ j = 1;\n        let mut x = even[i];\n        odd[i] = odd[j];\n        while\
    \ j + 1 < odd.len() && x == even[j + 1] {\n            even[j] = even[j + 1];\n\
    \            odd[j] = odd[j + 1];\n            j += 1;\n        }\n        even[i]\
    \ = x;\n    }\n    odd\n}\n\nfn main() {\n    let candidate = sort_even;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpozei6kup.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    // we go through\
    \ l twice because we can't reuse l\n    for index in 0..l.len() {\n        if\
    \ index & 1 == 0 {\n            let val = l[index];\n            l.swap(index,\
    \ index + 1);\n            l.swap(index, index + 1);\n        }\n    }\n    l\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "warning: unused variable: `val`\n  --> /tmp/tmpi3ffmgb4.rs:12:17\n   |\n\
    12 |             let val = l[index];\n   |                 ^^^ help: if this is\
    \ intentional, prefix it with an underscore: `_val`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0596]: cannot borrow `l` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpi3ffmgb4.rs:13:13\n   |\n8  | fn sort_even(l: Vec<isize>)\
    \ -> Vec<isize> {\n   |              - help: consider changing this to be mutable:\
    \ `mut l`\n...\n13 |             l.swap(index, index + 1);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `l` as mutable, as it\
    \ is not declared as mutable\n  --> /tmp/tmpi3ffmgb4.rs:14:13\n   |\n8  | fn sort_even(l:\
    \ Vec<isize>) -> Vec<isize> {\n   |              - help: consider changing this\
    \ to be mutable: `mut l`\n...\n14 |             l.swap(index, index + 1);\n  \
    \ |             ^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to 2 previous errors; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n\
    \    let mut odd = Vec::new();\n    for i in 0..l.len() {\n        match i % 2\
    \ {\n            0 => even.push(l[i]),\n            _ => odd.push(l[i]),\n   \
    \     }\n    }\n    even.sort_unstable();\n    even.extend(odd);\n    even\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 2]`,\n right: `[1, 2, 3]`', /tmp/tmpr2q082o0.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_by_key(|x|\
    \ x % 2);\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpyss9plth.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_by_key(|x| x % 2);\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow\
    \ as mutable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| if a < b {\n        -1\n    } else if b < a {\n        1\n    } else {\n\
    \        0\n    })\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6ro7xuup.rs:10:9\n   |\n\
    10 |         -1\n   |         ^^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6ro7xuup.rs:12:9\n   |\n12 | \
    \        1\n   |         ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6ro7xuup.rs:14:9\n   |\n14 | \
    \        0\n   |         ^ expected enum `std::cmp::Ordering`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6ro7xuup.rs:9:5\n   |\n8  |  \
    \ fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                          \
    \        ---------- expected `Vec<isize>` because of return type\n9  | /     l.sort_unstable_by(|a,\
    \ b| if a < b {\n10 | |         -1\n11 | |     } else if b < a {\n12 | |     \
    \    1\n13 | |     } else {\n14 | |         0\n15 | |     })\n   | |______^ expected\
    \ struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n  \
    \         found unit type `()`\n\nerror: aborting due to 4 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    for i in even.iter().cloned().skip(1).cloned().rev() {\n        let pos =\
    \ even.iter().position(|&x| x % 2 == 0).unwrap();\n        if pos > 0 {\n    \
    \        even[pos] = i;\n        }\n    }\n    even\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmp8s6bra3t.rs:10:43\n     |\n10   | \
    \    for i in even.iter().cloned().skip(1).cloned().rev() {\n     |          \
    \                                 ^^^^^^ expected reference, found `isize`\n \
    \    |\n     = note: expected reference `&&_`\n                found reference\
    \ `&isize`\n     = note: required because of the requirements on the impl of `Iterator`\
    \ for `Cloned<std::slice::Iter<'_, isize>>`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `rev` exists for struct `Cloned<Skip<Cloned<std::slice::Iter<'_,\
    \ isize>>>>`, but its trait bounds were not satisfied\n  --> /tmp/tmp8s6bra3t.rs:10:52\n\
    \   |\n10 |        for i in even.iter().cloned().skip(1).cloned().rev() {\n  \
    \ |                                                       ^^^ method cannot be\
    \ called on `Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<Skip<Cloned<std::slice::Iter<'_, isize>>> as Iterator>::Item = &_`\n\
    \           which is required by `Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>:\
    \ Iterator`\n           `Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>: Iterator`\n\
    \           which is required by `&mut Cloned<Skip<Cloned<std::slice::Iter<'_,\
    \ isize>>>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter_mut().zip(l.iter_mut()).map(|(a, b)| { b.swap(*a); a }).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `swap` found for mutable reference `&mut\
    \ isize` in the current scope\n  --> /tmp/tmpzdbm9qld.rs:10:53\n   |\n10 |   \
    \  l.iter_mut().zip(l.iter_mut()).map(|(a, b)| { b.swap(*a); a }).collect()\n\
    \   |                                                     ^^^^ method not found\
    \ in `&mut isize`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built\
    \ from an iterator over elements of type `&mut isize`\n    --> /tmp/tmpzdbm9qld.rs:10:68\n\
    \     |\n10   |     l.iter_mut().zip(l.iter_mut()).map(|(a, b)| { b.swap(*a);\
    \ a }).collect()\n     |                                                     \
    \               ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&mut\
    \ isize>`\n     |\n     = help: the trait `FromIterator<&mut isize>` is not implemented\
    \ for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for\
    \ `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n\n    for i in 0..even.len() {\n        odd.swap(0, i);\n\
    \n        // Check if the last element in even is the last element in odd\n  \
    \      if odd.len() == even.len() {\n            let last = odd.pop();\n     \
    \       if even.last().unwrap() > last {\n                odd.push(last);\n  \
    \          }\n        }\n    }\n\n    odd\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptuvgzt72.rs:18:39\n   |\n\
    18 |             if even.last().unwrap() > last {\n   |                      \
    \                 ^^^^ expected `&isize`, found enum `Option`\n   |\n   = note:\
    \ expected reference `&isize`\n                   found enum `Option<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptuvgzt72.rs:19:26\n   |\n19 |\
    \                 odd.push(last);\n   |                          ^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    for i in 0..even.len() {\n        let mut j = 1;\n        while j < even.len()\
    \ && (even[j] as usize + i) == even[j + i] {\n            even.swap(j, j + i);\n\
    \            i += j;\n            j += 1;\n        }\n    }\n    even\n}\n\nfn\
    \ main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnz4oamhw.rs:12:59\n   |\n\
    12 |         while j < even.len() && (even[j] as usize + i) == even[j + i] {\n\
    \   |                                                           ^^^^^^^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |         while j < even.len()\
    \ && (even[j] as usize + i) == even[j + i].try_into().unwrap() {\n   |       \
    \                                                               ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut sorted_even\
    \ = l.clone();\n    for i in sorted_even.iter_mut() {\n        if i % 2 == 1 {\n\
    \            sorted_even[i] = sorted_even[i - 1];\n        }\n    }\n    sorted_even\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmphzwuq2uk.rs:11:14\n\
    \   |\n11 |         if i % 2 == 1 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `i`\n   |\n11 |         if *i % 2 == 1 {\n   |         \
    \   +\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&mut isize`\n\
    \  --> /tmp/tmphzwuq2uk.rs:12:13\n   |\n12 |             sorted_even[i] = sorted_even[i\
    \ - 1];\n   |             ^^^^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `&mut isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for\
    \ `usize`\n   = note: required because of the requirements on the impl of `Index<&mut\
    \ isize>` for `Vec<isize>`\n\nerror[E0369]: cannot subtract `{integer}` from `&mut\
    \ isize`\n  --> /tmp/tmphzwuq2uk.rs:12:44\n   |\n12 |             sorted_even[i]\
    \ = sorted_even[i - 1];\n   |                                          - ^ - {integer}\n\
    \   |                                          |\n   |                       \
    \                   &mut isize\n   |\nhelp: `-` can be used on `isize`, you can\
    \ dereference `i`\n   |\n12 |             sorted_even[i] = sorted_even[*i - 1];\n\
    \   |                                          +\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().partition(|&x|\
    \ x % 2 == 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `(_, _)` is not an iterator\n --> /tmp/tmp0ess4f85.rs:9:50\n\
    \  |\n9 |     l.iter().cloned().partition(|&x| x % 2 == 0).cloned().collect()\n\
    \  |                                                  ^^^^^^ `(_, _)` is not an\
    \ iterator\n  |\n  = note: the following trait bounds were not satisfied:\n  \
    \        `(_, _): Iterator`\n          which is required by `&mut (_, _): Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut sl = l.iter().cloned();\n\
    \    sort_even_indicies(sl);\n    sl\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sort_even_indicies` in this scope\n\
    \  --> /tmp/tmpln9fts57.rs:10:5\n   |\n10 |     sort_even_indicies(sl);\n   |\
    \     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpln9fts57.rs:11:5\n   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                ---------- expected `Vec<isize>` because\
    \ of return type\n...\n11 |     sl\n   |     ^^ expected struct `Vec`, found struct\
    \ `Cloned`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().zip(0..).filter_map(|(&x,\
    \ _)| x).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptbqwhea9.rs:9:45\n  |\n9 |\
    \     l.iter().cloned().zip(0..).filter_map(|(&x, _)| x).collect()\n  |      \
    \                                       ^^   - expected due to this\n  |     \
    \                                        |\n  |                              \
    \               expected `isize`, found reference\n  |                       \
    \                      help: you can probably remove the explicit borrow: `x`\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    let mut l = l;\n    l.sort_unstable();\n    l.iter_mut().for_each(|a| {\n\
    \        let mut idx = 1;\n        while idx < l.len() && l[idx] % 2 == 0 {\n\
    \            *a = *a ^ (a[idx] as usize);\n            idx += 1;\n        }\n\
    \    });\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `&mut isize`\n  --> /tmp/tmprm4iq5_g.rs:15:24\n\
    \   |\n15 |             *a = *a ^ (a[idx] as usize);\n   |                   \
    \     ^^^^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0608`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    for i in 0..l.len() {\n        if i % 2 == 0 {\n            l[i] = l[i /\
    \ 2];\n        } else {\n            l[i] = l[i];\n        }\n    }\n    l\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpsls6l__3.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpsls6l__3.rs:12:13\n   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |              - help: consider changing this to be mutable: `mut l`\n\
    ...\n12 |             l[i] = l[i / 2];\n   |             ^ cannot borrow as mutable\n\
    \nerror[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpsls6l__3.rs:14:13\n   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |              - help: consider changing this to be mutable: `mut l`\n\
    ...\n14 |             l[i] = l[i];\n   |             ^ cannot borrow as mutable\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even_idx\
    \ = Vec::new();\n    let mut even = Vec::new();\n\n    for i in 0..l.len() {\n\
    \        if i % 2 == 0 {\n            even_idx.push(i);\n            even.push(l[i]);\n\
    \        } else {\n            let mut last = even_idx[0];\n            while\
    \ last != i {\n                even_idx.swap(0, last);\n                even.swap(0,\
    \ last);\n                last = even_idx[0];\n            }\n        }\n    }\n\
    \n    let mut odd_idx = Vec::new();\n    let mut odd = Vec::new();\n    for i\
    \ in 0..even.len() {\n        odd_idx.push(i);\n        odd.push(even[i]);\n \
    \   }\n\n    even_idx.extend(odd_idx);\n    odd.extend(even);\n    odd\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l;\n\
    \    for &i in &l {\n        if i % 2 == 0 {\n            l.swap(i, l.iter().cloned().find(|&j|\
    \ j % 2 == 0).unwrap().0);\n        }\n    }\n    l\n}\n\nfn main() {\n    let\
    \ candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2,\
    \ 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf4hyxmwm.rs:12:20\n   |\n\
    12 |             l.swap(i, l.iter().cloned().find(|&j| j % 2 == 0).unwrap().0);\n\
    \   |                    ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |             l.swap(i.try_into().unwrap(), l.iter().cloned().find(|&j|\
    \ j % 2 == 0).unwrap().0);\n   |                     ++++++++++++++++++++\n\n\
    error[E0610]: `isize` is a primitive type and therefore doesn't have fields\n\
    \  --> /tmp/tmpf4hyxmwm.rs:12:72\n   |\n12 |             l.swap(i, l.iter().cloned().find(|&j|\
    \ j % 2 == 0).unwrap().0);\n   |                                             \
    \                           ^\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0610.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().sorted().collect()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpjvgsb91k.rs:9:23\n  |\n9 |     l.iter().cloned().sorted().collect()\n\
    \  |                       ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    // Create a copy\
    \ of the list.\n    let mut l2 = l.iter().cloned();\n\n    // Sort the odd indicies\
    \ and copy the even indicies to their corresponding even indicies\n    l2.sort_unstable();\n\
    \    let mut even = vec![];\n    for i in 0..l.len() {\n        if i % 2 == 0\
    \ {\n            even.push(l2[i]);\n        } else {\n            even.push(l2[l\
    \ - 1 - i]);\n        }\n    }\n\n    // Copy evens into odd indicies\n    for\
    \ i in 0..l.len() {\n        if i % 2 == 0 {\n            l.swap(i, l - 1 - i);\n\
    \        }\n    }\n\n    // Return the sorted list\n    l2\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_unstable` found for struct `Cloned`\
    \ in the current scope\n  --> /tmp/tmps31gubw8.rs:13:8\n   |\n13 |     l2.sort_unstable();\n\
    \   |        ^^^^^^^^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \nerror[E0608]: cannot index into a value of type `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n  --> /tmp/tmps31gubw8.rs:17:23\n   |\n17 |             even.push(l2[i]);\n\
    \   |                       ^^^^^\n\nerror[E0369]: cannot subtract `{integer}`\
    \ from `Vec<isize>`\n  --> /tmp/tmps31gubw8.rs:19:28\n   |\n19 |             even.push(l2[l\
    \ - 1 - i]);\n   |                          - ^ - {integer}\n   |            \
    \              |\n   |                          Vec<isize>\n\nerror[E0369]: cannot\
    \ subtract `{integer}` from `Vec<isize>`\n  --> /tmp/tmps31gubw8.rs:26:25\n  \
    \ |\n26 |             l.swap(i, l - 1 - i);\n   |                       - ^ -\
    \ {integer}\n   |                       |\n   |                       Vec<isize>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmps31gubw8.rs:31:5\n   |\n8  | fn\
    \ sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                             \
    \   ---------- expected `Vec<isize>` because of return type\n...\n31 |     l2\n\
    \   |     ^^ expected struct `Vec`, found struct `Cloned`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0369, E0599, E0608.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by(|a,\
    \ b| {\n        if a % 2 == 1 {\n            a < b\n        } else {\n       \
    \     b < a\n        }\n    })\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjajg649j.rs:11:13\n   |\n\
    11 |             a < b\n   |             ^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjajg649j.rs:13:13\n\
    \   |\n13 |             b < a\n   |             ^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjajg649j.rs:9:5\n\
    \   |\n8  |   fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    9  | /     l.sort_unstable_by(|a, b| {\n10 | |         if a % 2 == 1 {\n11 | |\
    \             a < b\n12 | |         } else {\n13 | |             b < a\n14 | |\
    \         }\n15 | |     })\n   | |______^ expected struct `Vec`, found `()`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpetdf65cb.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by_key(|&i|\
    \ i & 1)\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxzn34648.rs:9:5\n  |\n8 |\
    \ fn sort_even(l: Vec<isize>) -> Vec<isize> {\n  |                           \
    \     ---------- expected `Vec<isize>` because of return type\n9 |     l.sort_unstable_by_key(|&i|\
    \ i & 1)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found\
    \ `()`\n  |\n  = note: expected struct `Vec<isize>`\n          found unit type\
    \ `()`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut sorted_even\
    \ = l.clone();\n    for i in (0..l.len()).step_by(2) {\n        sorted_even.swap(i,\
    \ i + 1);\n    }\n    sorted_even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 3 but the index\
    \ is 3', /tmp/tmpbmey1d9y.rs:11:21\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l.to_vec();\n\
    \    for &i in l {\n        if i % 2 == 0 {\n            l.swap(i, l.iter().rev().next().unwrap());\n\
    \        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n \
    \   assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzodlj2pm.rs:10:9\n   |\n\
    10 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpzodlj2pm.rs:12:23\n   |\n12 |             l.swap(i, l.iter().rev().next().unwrap());\n\
    \   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found\
    \ `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l.iter().cloned().collect::<Vec<isize>>();\n\
    \    for (i, elt) in l.iter().enumerate() {\n        if i % 2 == 0 {\n       \
    \     l.insert(i, elt);\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphr5ne592.rs:12:25\n   |\n\
    12 |             l.insert(i, elt);\n   |                         ^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |             l.insert(i, *elt);\n   |                         +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by_key(|x|\
    \ {\n        if x.is_odd() {\n            x.clone()\n        } else {\n      \
    \      x.clone() + 1\n        }\n    });\n    l\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmp2edo9l3o.rs:10:14\n   |\n10 |         if x.is_odd()\
    \ {\n   |              ^^^^^^ method not found in `&isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort();\n    for\
    \ i in 0..l.len() - 1 {\n        if i % 2 == 0 {\n            l[i] = l[i / 2];\n\
    \        } else {\n            l[i] = l[i / 2];\n        }\n    }\n    l\n}\n\n\
    fn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmp32j090cb.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort();\n  |     ^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]:\
    \ cannot borrow `l` as mutable, as it is not declared as mutable\n  --> /tmp/tmp32j090cb.rs:12:13\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - help:\
    \ consider changing this to be mutable: `mut l`\n...\n12 |             l[i] =\
    \ l[i / 2];\n   |             ^ cannot borrow as mutable\n\nerror[E0596]: cannot\
    \ borrow `l` as mutable, as it is not declared as mutable\n  --> /tmp/tmp32j090cb.rs:14:13\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - help:\
    \ consider changing this to be mutable: `mut l`\n...\n14 |             l[i] =\
    \ l[i / 2];\n   |             ^ cannot borrow as mutable\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    even.sort();\n    even.iter_mut().zip(0..even.len()).for_each(|(l, e)| {\n\
    \        let mut l = l;\n        even[e] = l;\n    });\n    even\n}\n\nfn main()\
    \ {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptkhdtrwk.rs:13:19\n   |\n\
    13 |         even[e] = l;\n   |         -------   ^ expected `isize`, found `&mut\
    \ isize`\n   |         |\n   |         expected due to the type of this binding\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |         even[e] = *l;\n\
    \   |                   +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter()\n        .enumerate()\n        .map(|(ix, e)| if ix == 0 { e } else\
    \ { e - l[ix - 1] }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpr26uuopf.rs:12:48\n\
    \   |\n12 |         .map(|(ix, e)| if ix == 0 { e } else { e - l[ix - 1] }).collect()\n\
    \   |                                     -          ^^^^^^^^^^^^^ expected `&isize`,\
    \ found `isize`\n   |                                     |\n   |            \
    \                         expected because of this\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    // l is sorted in\
    \ order from the even indicies down to the odd indicies.\n    // The odd/even\
    \ indicies are consecutive with each other, and the even\n    // indicies are\
    \ in increasing order.\n    // So we make l into a slice that starts with l from\
    \ the even indicies and ends\n    // with l from the odd indicies.\n    let mut\
    \ even = l.iter().cloned().skip(1).collect::<Vec<_>>();\n    let mut odd = l.iter().cloned().skip(1).collect::<Vec<_>>();\n\
    \    // Copy all the even indicies into their corresponding odd indicies.\n  \
    \  let mut odd_map = even.into_iter().enumerate().collect::<HashMap<isize, usize>>();\n\
    \    // Copy all the odd indicies into their corresponding even indicies.\n  \
    \  let mut even_map = odd.into_iter().enumerate().collect::<HashMap<isize, usize>>();\n\
    \    for (key, val) in even_map {\n        odd_map.insert(key, *val);\n    }\n\
    \    let mut odd_l = odd_map.into_iter().collect::<Vec<_>>();\n    let mut even_l\
    \ = even.into_iter().collect::<Vec<_>>();\n    even_l.sort_by_key(|x| odd_l.iter().position(|y|\
    \ x == y));\n    odd_l.sort_by_key(|x| even_l.iter().position(|y| x == y));\n\
    \    odd_l.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n  --> /tmp/tmp9vu48wga.rs:17:62\n\
    \   |\n17 |     let mut odd_map = even.into_iter().enumerate().collect::<HashMap<isize,\
    \ usize>>();\n   |                                                           \
    \   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0412]: cannot find\
    \ type `HashMap` in this scope\n  --> /tmp/tmp9vu48wga.rs:19:62\n   |\n19 |  \
    \   let mut even_map = odd.into_iter().enumerate().collect::<HashMap<isize, usize>>();\n\
    \   |                                                              ^^^^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing this struct\n   |\n1  |\
    \ use std::collections::HashMap;\n   |\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().filter(|&x|\
    \ *x % 2 == 0).cloned().sorted().collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmplzj7pdtp.rs:9:35\n\
    \  |\n9 |     l.iter().cloned().filter(|&x| *x % 2 == 0).cloned().sorted().collect()\n\
    \  |                                   ^^\n\nerror[E0271]: type mismatch resolving\
    \ `<std::slice::Iter<'_, isize> as Iterator>::Item == &&_`\n --> /tmp/tmplzj7pdtp.rs:9:48\n\
    \  |\n9 |     l.iter().cloned().filter(|&x| *x % 2 == 0).cloned().sorted().collect()\n\
    \  |                                                ^^^^^^ expected reference,\
    \ found `isize`\n  |\n  = note: expected reference `&&_`\n             found reference\
    \ `&isize`\n  = note: required because of the requirements on the impl of `Iterator`\
    \ for `Cloned<std::slice::Iter<'_, isize>>`\n  = note: 1 redundant requirement\
    \ hidden\n  = note: required because of the requirements on the impl of `Iterator`\
    \ for `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmplzj7pdtp.rs:9:30:\
    \ 9:46]>`\n\nerror[E0631]: type mismatch in closure arguments\n --> /tmp/tmplzj7pdtp.rs:9:48\n\
    \  |\n9 |     l.iter().cloned().filter(|&x| *x % 2 == 0).cloned().sorted().collect()\n\
    \  |                              ----------------  ^^^^^^ expected signature\
    \ of `for<'r> fn(&'r &_) -> _`\n  |                              |\n  |      \
    \                        found signature of `for<'r> fn(&'r isize) -> _`\n  |\n\
    \  = note: required because of the requirements on the impl of `Iterator` for\
    \ `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmplzj7pdtp.rs:9:30:\
    \ 9:46]>`\n\nerror[E0599]: no method named `sorted` found for struct `Cloned`\
    \ in the current scope\n --> /tmp/tmplzj7pdtp.rs:9:57\n  |\n9 |     l.iter().cloned().filter(|&x|\
    \ *x % 2 == 0).cloned().sorted().collect()\n  |                              \
    \                           ^^^^^^ method not found in `Cloned<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmplzj7pdtp.rs:9:30: 9:46]>>`\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0271, E0599,\
    \ E0614, E0631.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut s = l.clone();\n\
    \    sort_even_inplace(s);\n    s\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sort_even_inplace` in this scope\n\
    \  --> /tmp/tmp8wy10q34.rs:10:5\n   |\n10 |     sort_even_inplace(s);\n   |  \
    \   ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l = l.into_iter().map(|x|\
    \ *x).collect();\n    let mut l1 = l.into_iter().enumerate().map(|(v, i)| *i);\n\
    \    for &(i1, v) in l1.clone() {\n        l.swap(i1, i1 + 1);\n    }\n    l\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpwxvuy3wo.rs:9:39\n\
    \  |\n9 |     let mut l = l.into_iter().map(|x| *x).collect();\n  |          \
    \                             ^^\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_by_key(|x|\
    \ {\n        if x % 2 == 0 {\n            x.clone()\n        } else {\n      \
    \      x.clone().swap(1)\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `swap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpesndxsz3.rs:13:23\n   |\n13 |             x.clone().swap(1)\n\
    \   |                       ^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpesndxsz3.rs:9:5\n   |\n8  |   fn sort_even(l:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                  ----------\
    \ expected `Vec<isize>` because of return type\n9  | /     l.sort_by_key(|x| {\n\
    10 | |         if x % 2 == 0 {\n11 | |             x.clone()\n12 | |         }\
    \ else {\n13 | |             x.clone().swap(1)\n14 | |         }\n15 | |     })\n\
    \   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.clone();\n\
    \    even.sort_unstable();\n    even\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmpgivkrli5.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    if l.len() == 0 {\n\
    \        return l;\n    }\n\n    l.sort_unstable();\n    for i in 0..l.len() -\
    \ 1 {\n        if i % 2 == 0 {\n            l[i] = l[i + 1];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpy7xg_7el.rs:13:5\n   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |              - help: consider changing this to be mutable: `mut l`\n\
    ...\n13 |     l.sort_unstable();\n   |     ^^^^^^^^^^^^^^^^^ cannot borrow as\
    \ mutable\n\nerror[E0596]: cannot borrow `l` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpy7xg_7el.rs:16:13\n   |\n8  | fn sort_even(l: Vec<isize>)\
    \ -> Vec<isize> {\n   |              - help: consider changing this to be mutable:\
    \ `mut l`\n...\n16 |             l[i] = l[i + 1];\n   |             ^ cannot borrow\
    \ as mutable\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l\n        .iter()\n\
    \        .cloned()\n        .zip(&vec![l.iter().skip(1).cloned()]).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjywlgw8n.rs:9:5\n   |\n8\
    \  |   fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |                     \
    \             ---------- expected `Vec<isize>` because of return type\n9  | /\
    \     l\n10 | |         .iter()\n11 | |         .cloned()\n12 | |         .zip(&vec![l.iter().skip(1).cloned()]).collect::<Vec<_>>()\n\
    \   | |__________________________________________________________________^ expected\
    \ `isize`, found tuple\n   |\n   = note: expected struct `Vec<isize>`\n      \
    \        found struct `Vec<(isize, &Cloned<Skip<std::slice::Iter<'_, isize>>>)>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable_by_key(|e|\
    \ e % 2);\n    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpv0l09dlp.rs:9:5\n  |\n8 | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    9 |     l.sort_unstable_by_key(|e| e % 2);\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    // TODO: this could\
    \ be optimized a little further\n    l.sort_unstable();\n    if l.len() % 2 ==\
    \ 0 {\n        l\n    } else {\n        let even = l.len() / 2;\n        let odd\
    \ = l.len() / 2 - 1;\n        let mut l_even = l;\n        let mut l_odd = l;\n\
    \        let mut tmp;\n        loop {\n            let i = even;\n           \
    \ let j = odd;\n            if l_even[i] <= l_odd[j] {\n                tmp =\
    \ l_even[i];\n                l_even[i] = l_odd[j];\n                l_odd[j]\
    \ = tmp;\n                even += 1;\n                odd += 1;\n            }\
    \ else if l_even[i] > l_odd[j] {\n                tmp = l_odd[j];\n          \
    \      l_odd[j] = l_even[i];\n                l_even[i] = tmp;\n             \
    \   even += 1;\n                odd += 1;\n            } else {\n            \
    \    break;\n            }\n        }\n        l_even\n    }\n}\n\nfn main() {\n\
    \    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpgpiw6r9a.rs:10:5\n   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |              - help: consider changing this to be mutable: `mut l`\n\
    9  |     // TODO: this could be optimized a little further\n10 |     l.sort_unstable();\n\
    \   |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0382]: use of moved\
    \ value: `l`\n  --> /tmp/tmpgpiw6r9a.rs:17:25\n   |\n8  | fn sort_even(l: Vec<isize>)\
    \ -> Vec<isize> {\n   |              - move occurs because `l` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n...\n16 |         let mut l_even\
    \ = l;\n   |                          - value moved here\n17 |         let mut\
    \ l_odd = l;\n   |                         ^ value used here after move\n\nerror[E0384]:\
    \ cannot assign twice to immutable variable `even`\n  --> /tmp/tmpgpiw6r9a.rs:26:17\n\
    \   |\n14 |         let even = l.len() / 2;\n   |             ----\n   |     \
    \        |\n   |             first assignment to `even`\n   |             help:\
    \ consider making this binding mutable: `mut even`\n...\n26 |                \
    \ even += 1;\n   |                 ^^^^^^^^^ cannot assign twice to immutable\
    \ variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n\
    \  --> /tmp/tmpgpiw6r9a.rs:27:17\n   |\n15 |         let odd = l.len() / 2 - 1;\n\
    \   |             ---\n   |             |\n   |             first assignment to\
    \ `odd`\n   |             help: consider making this binding mutable: `mut odd`\n\
    ...\n27 |                 odd += 1;\n   |                 ^^^^^^^^ cannot assign\
    \ twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable\
    \ variable `even`\n  --> /tmp/tmpgpiw6r9a.rs:32:17\n   |\n14 |         let even\
    \ = l.len() / 2;\n   |             ----\n   |             |\n   |            \
    \ first assignment to `even`\n   |             help: consider making this binding\
    \ mutable: `mut even`\n...\n32 |                 even += 1;\n   |            \
    \     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot\
    \ assign twice to immutable variable"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l2 = l.clone();\n\
    \    l2.sort();\n    let mut even_ind = 0;\n    let mut odd_ind = 1;\n    while\
    \ even_ind < l2.len() {\n        if even_ind + 1 == l2.len() {\n            l2[even_ind..odd_ind].sort();\n\
    \        } else {\n            if even_ind < odd_ind {\n                l2[even_ind..odd_ind].sort();\n\
    \                l2[even_ind..odd_ind].swap(even_ind, odd_ind);\n            }\n\
    \            even_ind += 1;\n            odd_ind += 1;\n        }\n    }\n   \
    \ vec![l2[0], *l2[even_ind..], l2[-1]]\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `[isize]` cannot be dereferenced\n  --> /tmp/tmptrcj91ux.rs:25:17\n\
    \   |\n25 |     vec![l2[0], *l2[even_ind..], l2[-1]]\n   |                 ^^^^^^^^^^^^^^^\n\
    \nerror: negative integers cannot be used to index on a `Vec<isize>`\n  --> /tmp/tmptrcj91ux.rs:25:37\n\
    \   |\n25 |     vec![l2[0], *l2[even_ind..], l2[-1]]\n   |                   \
    \                  ^^ cannot use a negative integer for indexing on `Vec<isize>`\n\
    \   |\nhelp: to access an element starting from the end of the `Vec<isize>`, compute\
    \ the index\n   |\n25 |     vec![l2[0], *l2[even_ind..], l2[l2.len() -1]]\n  \
    \ |                                     ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut v = l.to_owned();\n\
    \    let mut i = 0;\n    loop {\n        if i % 2 == 0 {\n            if v.len()\
    \ == 0 {\n                break;\n            }\n            v.swap(0, v.len()\
    \ - 1);\n        }\n        i += 1;\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `v` as immutable because it is also borrowed\
    \ as mutable\n  --> /tmp/tmpuvp0xmcv.rs:16:23\n   |\n16 |             v.swap(0,\
    \ v.len() - 1);\n   |             ----------^^^^^^^-----\n   |             | |\
    \       |\n   |             | |       immutable borrow occurs here\n   |     \
    \        | mutable borrow later used by call\n   |             mutable borrow\
    \ occurs here\n   |\nhelp: try adding a local storing this argument...\n  -->\
    \ /tmp/tmpuvp0xmcv.rs:16:23\n   |\n16 |             v.swap(0, v.len() - 1);\n\
    \   |                       ^^^^^^^\nhelp: ...and then using that local as the\
    \ argument to this call\n  --> /tmp/tmpuvp0xmcv.rs:16:13\n   |\n16 |         \
    \    v.swap(0, v.len() - 1);\n   |             ^^^^^^^^^^^^^^^^^^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut evens = l.clone();\
    \ evens.sort();\n    let mut odds = evens.clone();\n    odds[1..].iter().cloned().zip(evens.iter().cloned()).for_each(|(o,e)|\
    \ *o = *e );\n    odds\n}\n\nfn main() {\n    let candidate = sort_even;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpgrm5kmea.rs:11:75\n\
    \   |\n11 |     odds[1..].iter().cloned().zip(evens.iter().cloned()).for_each(|(o,e)|\
    \ *o = *e );\n   |                                                           \
    \                ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n  -->\
    \ /tmp/tmpgrm5kmea.rs:11:80\n   |\n11 |     odds[1..].iter().cloned().zip(evens.iter().cloned()).for_each(|(o,e)|\
    \ *o = *e );\n   |                                                           \
    \                     ^^\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().zip(l.iter().cloned())\n\
    \        .filter_map(|v| {\n            if v % 2 == 0 {\n                Some(v.0)\n\
    \            } else {\n                None\n            }\n        })\n     \
    \   .collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = sort_even;\n \
    \   assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `(isize, isize)` by `{integer}`\n  --> /tmp/tmpppmo2fwj.rs:11:18\n\
    \   |\n11 |             if v % 2 == 0 {\n   |                - ^ - {integer}\n\
    \   |                |\n   |                (isize, isize)\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l;\n\
    \    let mut odd = l;\n    even.sort();\n    odd.sort();\n    even.extend(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmpc7jc75wh.rs:10:19\n\
    \   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize> {\n   |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n9  |     let mut even = l;\n   |                    - value moved here\n\
    10 |     let mut odd = l;\n   |                   ^ value used here after move\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().windows(2).fold(l,\
    \ |mut l, w| {\n        w.iter().cloned().fold(l, |mut l, x| {\n            l.push(x.clone());\n\
    \            l\n        })\n    })\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `windows` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpayjrf8jy.rs:9:23\n  |\n9 |     l.iter().cloned().windows(2).fold(l,\
    \ |mut l, w| {\n  |                       ^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut ln = l.len();\n\
    \    if ln % 2 == 1 {\n        ln -= 1;\n    }\n    let mut even = vec![0; ln];\n\
    \    let mut odd = vec![0; ln];\n    for i in 0..ln {\n        if i % 2 == 0 {\n\
    \            even[i] = l[i];\n        } else {\n            odd[i] = l[i];\n \
    \       }\n    }\n    for i in 0..ln {\n        if i % 2 == 0 {\n            l[i]\
    \ = even[i];\n        } else {\n            l[i] = odd[i];\n        }\n    }\n\
    \    l\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpwa8jrmiw.rs:24:13\n   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |              - help: consider changing this to be mutable: `mut l`\n\
    ...\n24 |             l[i] = even[i];\n   |             ^ cannot borrow as mutable\n\
    \nerror[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpwa8jrmiw.rs:26:13\n   |\n8  | fn sort_even(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |              - help: consider changing this to be mutable: `mut l`\n\
    ...\n26 |             l[i] = odd[i];\n   |             ^ cannot borrow as mutable\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().cloned().zip(0..l.len()).map(|(a, b)| if *a %2 == *b { a.into()\
    \ } else { b.into() }).collect()\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpy1xibs9l.rs:10:55\n\
    \   |\n10 |     l.iter().cloned().zip(0..l.len()).map(|(a, b)| if *a %2 == *b\
    \ { a.into() } else { b.into() }).collect()\n   |                            \
    \                           ^^\n\nerror[E0614]: type `usize` cannot be dereferenced\n\
    \  --> /tmp/tmpy1xibs9l.rs:10:64\n   |\n10 |     l.iter().cloned().zip(0..l.len()).map(|(a,\
    \ b)| if *a %2 == *b { a.into() } else { b.into() }).collect()\n   |         \
    \                                                       ^^\n\nerror[E0277]: the\
    \ trait bound `isize: From<usize>` is not satisfied\n  --> /tmp/tmpy1xibs9l.rs:10:89\n\
    \   |\n10 |     l.iter().cloned().zip(0..l.len()).map(|(a, b)| if *a %2 == *b\
    \ { a.into() } else { b.into() }).collect()\n   |                            \
    \                                                             ^^^^ the trait `From<usize>`\
    \ is not implemented for `isize`\n   |\n   = help: the following other types implement\
    \ trait `From<T>`:\n             <f32 as From<i16>>\n             <f32 as From<i8>>\n\
    \             <f32 as From<u16>>\n             <f32 as From<u8>>\n           \
    \  <f64 as From<f32>>\n             <f64 as From<i16>>\n             <f64 as From<i32>>\n\
    \             <f64 as From<i8>>\n           and 67 others\n   = note: required\
    \ because of the requirements on the impl of `Into<isize>` for `usize`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut l2 = l.clone();\n\
    \    l2.sort_unstable();\n    l2\n}\n\nfn main() {\n    let candidate = sort_even;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -5, -3, 0, 1, 2, 3, 3, 5, 9, 123]`,\n right: `[-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123]`', /tmp/tmptm19uhrj.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize>\
    \ = vec![];\n    let mut odd: Vec<isize> = vec![];\n    for (idx, val) in l.iter().enumerate()\
    \ {\n        if idx % 2 == 0 {\n            even.push(val);\n        } else {\n\
    \            odd.push(val);\n        }\n    }\n    even.sort_unstable();\n   \
    \ odd.sort_unstable();\n    even + odd\n}\n\nfn main() {\n    let candidate =\
    \ sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123]);\n    assert_eq!(candidate(vec![5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),\
    \ vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcrgfytcz.rs:13:23\n   |\n\
    13 |             even.push(val);\n   |                       ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |  \
    \           even.push(*val);\n   |                       +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcrgfytcz.rs:15:22\n   |\n15 |             odd.push(val);\n\
    \   |                      ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n15 |             odd.push(*val);\n   |     \
    \                 +\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n\
    \  --> /tmp/tmpcrgfytcz.rs:20:10\n   |\n20 |     even + odd\n   |     ---- ^ ---\
    \ Vec<isize>\n   |     |\n   |     Vec<isize>\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().rev().fold(Vec::new(),\
    \ |mut l, rev| {\n        l.extend(rev);\n        l.sort_unstable();\n       \
    \ l\n    })\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `&isize` is not an iterator\n   --> /tmp/tmp53_4tav1.rs:10:18\n\
    \    |\n10  |         l.extend(rev);\n    |           ------ ^^^ `&isize` is not\
    \ an iterator\n    |           |\n    |           required by a bound introduced\
    \ by this call\n    |\n    = help: the trait `Iterator` is not implemented for\
    \ `&isize`\n    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&isize`\nnote: required by a bound in `extend`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = l.iter().cloned().enumerate().filter_map(|(i,\
    \ e)| if e.1 % 2 == 0 { Some(i) } else { None });\n    let mut odd = l.iter().cloned().enumerate().filter_map(|(i,\
    \ e)| if e.1 % 2 == 1 { Some(i) } else { None });\n    for e in even {\n     \
    \   odd.get(e.0).unwrap() = e.1;\n    }\n    even = even.cloned();\n    odd =\
    \ odd.cloned();\n    even.sort_unstable();\n    odd.sort_unstable();\n    let\
    \ mut even = even.into_iter().cloned().enumerate().collect();\n    let mut odd\
    \ = odd.into_iter().cloned().enumerate().collect();\n    for e in even {\n   \
    \     odd.get(e.0).unwrap() = e.1;\n    }\n    return odd\n        .into_iter()\n\
    \        .cloned()\n        .enumerate()\n        .filter_map(|(i, e)| if e.1\
    \ % 2 == 1 { Some(e.0) } else { None })\n        .collect::<Vec<_>>()\n}\n\nfn\
    \ main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0610]: `isize` is a primitive type and therefore doesn't have fields\n\
    \ --> /tmp/tmpr4qv4kv8.rs:9:75\n  |\n9 |     let mut even = l.iter().cloned().enumerate().filter_map(|(i,\
    \ e)| if e.1 % 2 == 0 { Some(i) } else { None });\n  |                       \
    \                                                    ^\n\nerror[E0610]: `isize`\
    \ is a primitive type and therefore doesn't have fields\n  --> /tmp/tmpr4qv4kv8.rs:10:74\n\
    \   |\n10 |     let mut odd = l.iter().cloned().enumerate().filter_map(|(i, e)|\
    \ if e.1 % 2 == 1 { Some(i) } else { None });\n   |                          \
    \                                                ^\n\nerror[E0070]: invalid left-hand\
    \ side of assignment\n  --> /tmp/tmpr4qv4kv8.rs:12:31\n   |\n12 |         odd.get(e.0).unwrap()\
    \ = e.1;\n   |         --------------------- ^\n   |         |\n   |         cannot\
    \ assign to this expression\n\nerror[E0599]: no method named `get` found for struct\
    \ `FilterMap` in the current scope\n  --> /tmp/tmpr4qv4kv8.rs:12:13\n   |\n12\
    \ |         odd.get(e.0).unwrap() = e.1;\n   |             ^^^ method not found\
    \ in `FilterMap<Enumerate<Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmpr4qv4kv8.rs:10:60:\
    \ 10:110]>`\n\nerror[E0610]: `usize` is a primitive type and therefore doesn't\
    \ have fields\n  --> /tmp/tmpr4qv4kv8.rs:12:19\n   |\n12 |         odd.get(e.0).unwrap()\
    \ = e.1;\n   |                   ^\n\nerror[E0610]: `usize` is a primitive type\
    \ and therefore doesn't have fields\n  --> /tmp/tmpr4qv4kv8.rs:12:35\n   |\n12\
    \ |         odd.get(e.0).unwrap() = e.1;\n   |                               \
    \    ^\n\nerror[E0271]: type mismatch resolving `<[closure@/tmp/tmpr4qv4kv8.rs:9:61:\
    \ 9:111] as FnOnce<((usize, isize),)>>::Output == Option<&_>`\n    --> /tmp/tmpr4qv4kv8.rs:14:17\n\
    \     |\n14   |     even = even.cloned();\n     |                 ^^^^^^ expected\
    \ reference, found `usize`\n     |\n     = note: expected enum `Option<&_>`\n\
    \                found enum `Option<usize>`\n     = note: required because of\
    \ the requirements on the impl of `Iterator` for `FilterMap<Enumerate<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    let mut even = vec![];\n\
    \    let mut odd = vec![];\n    for &i in l {\n        if i % 2 == 0 {\n     \
    \       even.push(i);\n        } else {\n            odd.push(i);\n        }\n\
    \    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend_from_slice(odd);\n\
    \    even\n}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwzxx4x7u.rs:11:9\n   |\n\
    11 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwzxx4x7u.rs:20:28\n   |\n20 |     even.extend_from_slice(odd);\n\
    \   |                            ^^^\n   |                            |\n   |\
    \                            expected `&[_]`, found struct `Vec`\n   |       \
    \                     help: consider borrowing here: `&odd`\n   |\n   = note:\
    \ expected reference `&[_]`\n                 found struct `Vec<_>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().enumerate().filter_map(|(_,\
    \ i)| if i %2 ==  0 { Some(i) } else { None }).collect()\n}\n\nfn main() {\n \
    \   let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),\
    \ vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpqctgp93f.rs:9:87\n     |\n9\
    \    |     l.iter().enumerate().filter_map(|(_, i)| if i %2 ==  0 { Some(i) }\
    \ else { None }).collect()\n     |                                           \
    \                                            ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.sort_unstable();\n\
    \    l.iter().cloned().zip(0..l.len() - 1).map(|(_, even)| even).collect()\n}\n\
    \nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `usize`\n    --> /tmp/tmp8s1og24p.rs:10:65\n     |\n10\
    \   |     l.iter().cloned().zip(0..l.len() - 1).map(|(_, even)| even).collect()\n\
    \     |                                                                 ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=usize>`\n\
    \     |\n     = help: the trait `FromIterator<usize>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    l.iter().cloned().enumerate().rev().filter_map(|(i,\
    \ el)| if i % 2 == 0 { None } else { Some(el) }).collect::<Vec<_>>()\n}\n\nfn\
    \ main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 2, 3]`', /tmp/tmp7hfnbbvd.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n    if l.len() <= 1 {\n\
    \        return l;\n    }\n\n    let mut even = l.clone();\n    even.sort_unstable();\n\
    \n    let mut odd = even.clone();\n    odd.iter().cloned().skip(1).cloned().zip2(even.iter().cloned(),\
    \ |a, b| b);\n\n    odd.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_even;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n   \
    \ assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]), vec![-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmpnyu8oci1.rs:17:33\n     |\n17   | \
    \    odd.iter().cloned().skip(1).cloned().zip2(even.iter().cloned(), |a, b| b);\n\
    \     |                                 ^^^^^^ expected reference, found `isize`\n\
    \     |\n     = note: expected reference `&&_`\n                found reference\
    \ `&isize`\n     = note: required because of the requirements on the impl of `Iterator`\
    \ for `Cloned<std::slice::Iter<'_, isize>>`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: no method named `zip2` found for struct `Cloned` in the current\
    \ scope\n  --> /tmp/tmpnyu8oci1.rs:17:42\n   |\n17 |     odd.iter().cloned().skip(1).cloned().zip2(even.iter().cloned(),\
    \ |a, b| b);\n   |                                          ^^^^ method not found\
    \ in `Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
