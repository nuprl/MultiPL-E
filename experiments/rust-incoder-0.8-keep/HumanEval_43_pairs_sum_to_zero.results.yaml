name: HumanEval_43_pairs_sum_to_zero
language: rust
results:
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(false, |acc, x| acc || accs_are_in_consecutive(&l,\
    \ x))\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `accs_are_in_consecutive` in this scope\n\
    \  --> /tmp/tmpd0sq3t03.rs:15:42\n   |\n15 |     l.iter().fold(false, |acc, x|\
    \ acc || accs_are_in_consecutive(&l, x))\n   |                               \
    \           ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().any(|&x| x == 0)\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptc52roth.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    use std::cmp::Ordering::{Equal, Less, Greater};\n\n    l.iter().cloned().fold(false,\
    \ |a, b| {\n        if b > 0 {\n            false\n        } else {\n        \
    \    a == 0\n        }\n    })\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "warning: unused imports: `Equal`, `Greater`, `Less`\n  --> /tmp/tmp3zkvxepn.rs:15:30\n\
    \   |\n15 |     use std::cmp::Ordering::{Equal, Less, Greater};\n   |        \
    \                      ^^^^^  ^^^^  ^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]`\
    \ on by default\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3zkvxepn.rs:21:18\n\
    \   |\n21 |             a == 0\n   |                  ^ expected `bool`, found\
    \ integer\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return false;\n    }\n    let mut s\
    \ = l[0];\n    for i in 1..l.len() {\n        s += l[i];\n        if s == 0 {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpw_3m5reg.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().cloned().fold(true, |b, _| b && pairs_sum_to_zero(l.iter().cloned().take_while(|&i|\
    \ i != b).collect()))\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiuhbg_cs.rs:15:103\n   |\n\
    15 |     l.iter().cloned().fold(true, |b, _| b && pairs_sum_to_zero(l.iter().cloned().take_while(|&i|\
    \ i != b).collect()))\n   |                                                  \
    \                                                     ^ expected `isize`, found\
    \ `bool`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut seen: HashSet<isize> = HashSet::new();\n    for i in\
    \ l.iter() {\n        if seen.contains(i) {\n            return false;\n     \
    \   }\n        seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpu8rxxezu.rs:15:19\n\
    \   |\n15 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpu8rxxezu.rs:15:36\n\
    \   |\n15 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().combination(2).all(|(a,b)|b == 0)\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `combination` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpntc9yzn1.rs:15:14\n   |\n15 |     l.iter().combination(2).all(|(a,b)|b\
    \ == 0)\n   |              ^^^^^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |prev, cur| *prev && cur == 0)\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `bool` cannot be dereferenced\n  --> /tmp/tmp8ydnnq12.rs:15:37\n\
    \   |\n15 |     l.iter().fold(true, |prev, cur| *prev && cur == 0)\n   |     \
    \                                ^^^^^\n\nerror[E0277]: can't compare `&isize`\
    \ with `{integer}`\n  --> /tmp/tmp8ydnnq12.rs:15:50\n   |\n15 |     l.iter().fold(true,\
    \ |prev, cur| *prev && cur == 0)\n   |                                       \
    \           ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the\
    \ trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut pair: (isize, isize) -> bool = |i, j| l == 0 || i ==\
    \ 0 || j == 0 || (i + j) == l\n    pair(0, 0)\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `;` or `=`, found `->`\n  --> /tmp/tmprjexlkc7.rs:15:34\n\
    \   |\n15 |     let mut pair: (isize, isize) -> bool = |i, j| l == 0 || i == 0\
    \ || j == 0 || (i + j) == l\n   |                                  ^^ expected\
    \ one of `;` or `=`\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum = 0;\n    for (i, &e) in l.iter().enumerate() {\n\
    \        if e != 0 {\n            if sum == 0 {\n                return false;\n\
    \            }\n            sum += e;\n        } else {\n            sum += e;\n\
    \        }\n    }\n    sum == 0 // if there are no zeroes\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprp_5v67i.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 1;\n    let mut j = 1;\n    while i < l.len() {\n\
    \        if l[i - 1] > (l[j - 1] + 1) {\n            i += 1;\n            j +=\
    \ 1;\n        }\n        else {\n            i += 1;\n        }\n    }\n    i\
    \ != l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjc07cbnh.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut first = true;\n    let mut sum = 0;\n    for i in l {\n\
    \        if !first {\n            sum += i;\n        } else {\n            first\
    \ = false;\n        }\n        if sum == 0 {\n            return true;\n     \
    \   }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpk9gh3sea.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return false;\n    }\n\n    let mut\
    \ total = 0;\n    let mut count = 0;\n    let mut min_sum = l[0];\n    let mut\
    \ max_sum = l[0];\n    for i in l.iter().rev() {\n        total += i;\n      \
    \  count += 1;\n        if total < min_sum {\n            min_sum = total;\n \
    \       }\n        if total > max_sum {\n            max_sum = total;\n      \
    \  }\n    }\n\n    if count == 0 {\n        return false;\n    }\n\n    let total_diff\
    \ = max_sum - min_sum;\n    min_sum = max_sum + total_diff;\n    for i in l.iter().rev()\
    \ {\n        total -= i;\n        if total < min_sum {\n            min_sum =\
    \ total;\n        }\n    }\n\n    let mut is_even = count % 2 == 0;\n    for i\
    \ in l.iter().rev() {\n        if i % 2 == 0 {\n            is_even = false;\n\
    \        }\n        if total - i >= 0 {\n            is_even = false;\n      \
    \  }\n    }\n    is_even\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnk67kxsm.rs:64:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum = 0;\n    for elt in l {\n        sum += elt;\n \
    \   }\n    return sum == 0;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsrjdv7yu.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut flag = false;\n    for i in l {\n        for j in l {\n\
    \            if i != j {\n                if i + j == 0 {\n                  \
    \  flag = true;\n                }\n            }\n        }\n    }\n    flag\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmp2jy7rbse.rs:17:18\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     let mut flag = false;\n16  |     for i in l {\n\
    \    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    17  |         for j in l {\n    |                  ^ value used here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n    |    \
    \          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    for &i in l {\n        if i != 0 {\n            return false;\n        }\n\
    \    }\n    if sum == 0 {\n        return true;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv3faxk_1.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpv3faxk_1.rs:19:9\n   |\n19 |     for &i in l {\n   |         ^^\
    \    - this expression has type `Option<isize>`\n   |         |\n   |        \
    \ expected `isize`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() == 1 {\n        true\n    } else {\n        let mut\
    \ sum = 0;\n        for i in l.iter() {\n            sum += i;\n            if\
    \ sum < 0 {\n                sum = 0;\n            }\n        }\n        if sum\
    \ == 0 {\n            false\n        } else {\n            true\n        }\n \
    \   }\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmqx6xx2c.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.is_empty() {\n        return false;\n    }\n    let mut\
    \ pairs = l.to_vec();\n    pairs.remove(0);\n    let pairs: Vec<_> = pairs.into_iter().map(|x|\
    \ {\n        (x, 0)\n    }).collect();\n    for &(x, _) in pairs {\n        if\
    \ l.iter().any(|y| y != x + y) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplavom4_b.rs:23:9\n   |\n\
    23 |     for &(x, _) in pairs {\n   |         ^^^^^^^    ----- this expression\
    \ has type `Option<(isize, {integer})>`\n   |         |\n   |         expected\
    \ tuple, found reference\n   |\n   = note:  expected tuple `(isize, {integer})`\n\
    \           found reference `&_`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() == 0 {\n        return false;\n    }\n    let mut\
    \ pairs = vec![(0, 0)];\n    for &x in l {\n        pairs.push((x, 0));\n    }\n\
    \    loop {\n        let mut pair = pairs.last();\n        if pair.0 == pair.1\
    \ {\n            return false;\n        }\n        for &p in pairs[..] {\n   \
    \         if p.0 != pair.0 {\n                break;\n            }\n        \
    \    pair.1 += p.1;\n        }\n        pairs.pop();\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp67fw13kq.rs:19:9\n   |\n\
    19 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0609]: no field `0`\
    \ on type `Option<&({integer}, {integer})>`\n  --> /tmp/tmp67fw13kq.rs:24:17\n\
    \   |\n24 |         if pair.0 == pair.1 {\n   |                 ^\n\nerror[E0609]:\
    \ no field `1` on type `Option<&({integer}, {integer})>`\n  --> /tmp/tmp67fw13kq.rs:24:27\n\
    \   |\n24 |         if pair.0 == pair.1 {\n   |                           ^\n\n\
    error[E0277]: the size for values of type `[({integer}, {integer})]` cannot be\
    \ known at compilation time\n  --> /tmp/tmp67fw13kq.rs:27:19\n   |\n27 |     \
    \    for &p in pairs[..] {\n   |                   ^^^^^^^^^ expected an implementor\
    \ of trait `IntoIterator`\n   |\n   = note: the trait bound `[({integer}, {integer})]:\
    \ IntoIterator` is not satisfied\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `[({integer}, {integer})]`\nhelp: consider\
    \ borrowing here\n   |\n27 |         for &p in &pairs[..] {\n   |            \
    \       +\n27 |         for &p in &mut pairs[..] {\n   |                   ++++\n\
    \nerror[E0277]: `[({integer}, {integer})]` is not an iterator\n  --> /tmp/tmp67fw13kq.rs:27:19\n\
    \   |\n27 |         for &p in pairs[..] {\n   |                   ^^^^^^^^^ expected\
    \ an implementor of trait `IntoIterator`\n   |\n   = note: the trait bound `[({integer},\
    \ {integer})]: IntoIterator` is not satisfied\n   = note: required because of\
    \ the requirements on the impl of `IntoIterator` for `[({integer}, {integer})]`\n\
    help: consider borrowing here\n   |\n27 |         for &p in &pairs[..] {\n   |\
    \                   +\n27 |         for &p in &mut pairs[..] {\n   |         \
    \          ++++\n\nerror[E0609]: no field `0` on type `Option<&({integer}, {integer})>`\n\
    \  --> /tmp/tmp67fw13kq.rs:28:28\n   |\n28 |             if p.0 != pair.0 {\n\
    \   |        "
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum = 0;\n    for elt in l {\n        sum += elt;\n \
    \       if sum < 0 {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsqvntb75.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut pairs = vec![(0, 0)];\n    for i in l.iter() {\n    \
    \    let mut pair = pairs.iter().filter(|&(_, w)| w > 0).count();\n        while\
    \ pair == 2 {\n            pair = pairs.iter().filter(|&(_, w)| w > 0).count();\n\
    \        }\n        if pair == 2 {\n            return false;\n        }\n   \
    \     pairs.push((i, w));\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `w` in this scope\n  --> /tmp/tmpoj9lr741.rs:24:24\n\
    \   |\n24 |         pairs.push((i, w));\n   |                        ^ help: a\
    \ local variable with a similar name exists: `i`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpoj9lr741.rs:17:58\n   |\n17 |         let mut pair = pairs.iter().filter(|&(_,\
    \ w)| w > 0).count();\n   |                                                  \
    \        ^\n   |                                                          |\n\
    \   |                                                          expected reference,\
    \ found integer\n   |                                                        \
    \  help: consider borrowing here: `&0`\n   |\n   = note: expected reference `&_`\n\
    \                   found type `{integer}`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpoj9lr741.rs:19:54\n   |\n19 |             pair = pairs.iter().filter(|&(_,\
    \ w)| w > 0).count();\n   |                                                  \
    \    ^\n   |                                                      |\n   |    \
    \                                                  expected reference, found integer\n\
    \   |                                                      help: consider borrowing\
    \ here: `&0`\n   |\n   = note: expected reference `&_`\n                   found\
    \ type `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoj9lr741.rs:24:21\n\
    \   |\n24 |         pairs.push((i, w));\n   |                     ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |  \
    \       pairs.push((*i, w));\n   |                     +\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return false;\n    }\n    let mut\
    \ i = 0;\n    let mut j = l.len() - 1;\n    let mut k = l.len() - 2;\n    while\
    \ i <= j && j <= k {\n        if l[i] + l[j] == 0 {\n            if i == j {\n\
    \                i += 1;\n            } else if j == k {\n                j -=\
    \ 1;\n            } else {\n                i += 1;\n                j -= 1;\n\
    \            }\n        } else {\n            i += 1;\n            j -= 1;\n \
    \       }\n        k += 1;\n    }\n    if i == j || *i == *j {\n        return\
    \ false;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmpah357z5p.rs:37:18\n\
    \   |\n37 |     if i == j || *i == *j {\n   |                  ^^\n\nerror[E0614]:\
    \ type `usize` cannot be dereferenced\n  --> /tmp/tmpah357z5p.rs:37:24\n   |\n\
    37 |     if i == j || *i == *j {\n   |                        ^^\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return false;\n    }\n\n    let mut\
    \ seen = vec![false; l.len()];\n\n    for i in l.iter() {\n        let mut j =\
    \ 0;\n        while j < i {\n            if seen[j] {\n                return\
    \ false;\n            }\n            seen[j] = true;\n            j = j + 1;\n\
    \        }\n    }\n\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmp5hjr2yb7.rs:23:17\n\
    \   |\n23 |         while j < i {\n   |                 ^ no implementation for\
    \ `isize < &isize` and `isize > &isize`\n   |\n   = help: the trait `PartialOrd<&isize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: the type `[bool]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5hjr2yb7.rs:24:16\n   |\n24 |         \
    \    if seen[j] {\n   |                ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp5hjr2yb7.rs:27:13\n   |\n27 |            \
    \ seen[j] = true;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l\n        .iter()\n        .zip(l.iter().cloned().filter(|&x|\
    \ x > 0))\n        .all(|&(x1, x2)| x1 == x2)\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwls615q6.rs:18:15\n   |\n\
    18 |         .all(|&(x1, x2)| x1 == x2)\n   |               ^^^^^^^^-\n   |  \
    \             |       |\n   |               |       expected due to this\n   |\
    \               expected tuple, found reference\n   |\n   = note:  expected tuple\
    \ `(&isize, isize)`\n           found reference `&_`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l\n        .iter()\n        .zip(l.iter().cloned())\n       \
    \ .filter(|&(e1, e2)| e1 + e2 == 0)\n        .all(|&(_, e1)| e1 == 0)\n}\n\nfn\
    \ main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpft6j04cd.rs:19:15\n   |\n\
    19 |         .all(|&(_, e1)| e1 == 0)\n   |               ^^^^^^^-\n   |     \
    \          |      |\n   |               |      expected due to this\n   |    \
    \           expected tuple, found reference\n   |\n   = note:  expected tuple\
    \ `(&isize, isize)`\n           found reference `&_`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    use std::cmp::Ordering;\n    let mut s = 0;\n    for &n in l\
    \ {\n        s += n;\n    }\n    if s == 0 {\n        false\n    } else if s ==\
    \ l.len() {\n        true\n    } else {\n        let mut first = true;\n     \
    \   for &n in l {\n            if s -= n != 0 || first {\n                first\
    \ = false;\n            } else {\n                return true;\n            }\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmpjbip3n0l.rs:15:9\n\
    \   |\n15 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjbip3n0l.rs:17:9\n   |\n17 |     for &n in l {\n   |  \
    \       ^^    - this expression has type `Option<isize>`\n   |         |\n   |\
    \         expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `n`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjbip3n0l.rs:26:13\n\
    \   |\n26 |         for &n in l {\n   |             ^^    - this expression has\
    \ type `Option<isize>`\n   |             |\n   |             expected `isize`,\
    \ found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `n`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjbip3n0l.rs:27:16\n  \
    \ |\n27 |             if s -= n != 0 || first {\n   |                ^^^^^^^^^^^^^^^^^^^^\
    \ expected `bool`, found `()`\n\nerror[E0277]: cannot subtract-assign `bool` from\
    \ `usize`\n  --> /tmp/tmpjbip3n0l.rs:27:18\n   |\n27 |             if s -= n !=\
    \ 0 || first {\n   |                  ^^ no implementation for `usize -= bool`\n\
    \   |\n   = help: the trait `SubAssign<bool>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `SubAssign<Rhs>`:\n    \
    \         <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n        \
    \     <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n            \
    \ <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n             <i16\
    \ as SubAssign<&i16>>\n             <i16 as SubAssign>\n           and 20 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjbip3n0l.rs:26:9\n   |\n14 | \
    \  fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n   |                       \
    \                   ---- expected `bool` because of return type\n...\n26 | / \
    \        for &n in l {\n27 | |             if s -= n != 0 |"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(false, |acc, x| acc && x.iter().fold(false, |a,\
    \ y| a && a + y == 0))\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmp5kot0ye0.rs:15:44\n   |\n15 |     l.iter().fold(false,\
    \ |acc, x| acc && x.iter().fold(false, |a, y| a && a + y == 0))\n   |        \
    \                                    ^^^^ method not found in `&isize`\n\nerror[E0369]:\
    \ cannot add `_` to `bool`\n  --> /tmp/tmp5kot0ye0.rs:15:77\n   |\n15 |     l.iter().fold(false,\
    \ |acc, x| acc && x.iter().fold(false, |a, y| a && a + y == 0))\n   |        \
    \                                                                   - ^ - _\n\
    \   |                                                                        \
    \   |\n   |                                                                  \
    \         bool\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0369, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    use std::cmp::Ordering;\n\n    if l.len() < 2 {\n        return\
    \ false;\n    }\n\n    let mut first: usize = 0;\n    let mut second: usize =\
    \ 0;\n    for &i in l {\n        if first == second {\n            return false;\n\
    \        }\n        first += i;\n        second += i;\n    }\n\n    let mut sum:\
    \ usize = 0;\n    for &i in l {\n        sum += i;\n    }\n\n    if sum == 0 {\n\
    \        return true;\n    }\n    if sum > 0 {\n        return false;\n    }\n\
    \    for &i in l {\n        first--;\n        second++;\n        if first != second\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmp_nyoh629.rs:43:16\n\
    \   |\n43 |         first--;\n   |                ^ expected expression\n\nwarning:\
    \ unused import: `std::cmp::Ordering`\n  --> /tmp/tmp_nyoh629.rs:15:9\n   |\n\
    15 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n   =\
    \ note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_nyoh629.rs:23:9\n   |\n23 |     for &i in l {\n   |         ^^\
    \    - this expression has type `Option<isize>`\n   |         |\n   |        \
    \ expected `isize`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_nyoh629.rs:32:9\n\
    \   |\n32 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_nyoh629.rs:42:9\n   |\n42 |     for &i in l {\n   |         ^^\
    \    - this expression has type `Option<isize>`\n   |         |\n   |        \
    \ expected `isize`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror: aborting due to 4 previous errors; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(false, |state, x| {\n        state || x == 0\n\
    \    })\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpk0q8r2so.rs:16:20\n\
    \   |\n16 |         state || x == 0\n   |                    ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l\n        .iter()\n        .fold(false, |x, y| x == 0 || x +\
    \ y == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_5_o6e7j.rs:17:34\n   |\n\
    17 |         .fold(false, |x, y| x == 0 || x + y == 0)\n   |                 \
    \                 ^ expected `bool`, found integer\n\nerror[E0369]: cannot add\
    \ `&isize` to `bool`\n  --> /tmp/tmp_5_o6e7j.rs:17:41\n   |\n17 |         .fold(false,\
    \ |x, y| x == 0 || x + y == 0)\n   |                                       - ^\
    \ - &isize\n   |                                       |\n   |               \
    \                        bool\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum = 0;\n    for n in l {\n        sum += *n;\n    }\n\
    \    l == l.iter().zip(l.iter().skip(1)).all(|(a, b)| a + b == 0)\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp8ddn0mkd.rs:17:16\n\
    \   |\n17 |         sum += *n;\n   |                ^^\n\nerror[E0277]: can't\
    \ compare `Vec<isize>` with `bool`\n  --> /tmp/tmp8ddn0mkd.rs:19:7\n   |\n19 |\
    \     l == l.iter().zip(l.iter().skip(1)).all(|(a, b)| a + b == 0)\n   |     \
    \  ^^ no implementation for `Vec<isize> == bool`\n   |\n   = help: the trait `PartialEq<bool>`\
    \ is not implemented for `Vec<isize>`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n\
    \             <Vec<T, A> as PartialEq<&[U; N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n\
    \             <Vec<T, A> as PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<[U]>>\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    for i in l {\n        for j in l {\n            if i + j == 0\
    \ {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmp18uoh62a.rs:16:18\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     for i in l {\n    |              - `l` moved due\
    \ to this implicit call to `.into_iter()`\n16  |         for j in l {\n    | \
    \                 ^ value used here after move\n    |\nnote: this function takes\
    \ ownership of the receiver `self`, which moves `l`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n15  |     for i in &l {\n    |              +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = l.len();\n\
    \    while i < k {\n        if i != j {\n            if l[i] + l[j] == 0 {\n \
    \               return true;\n            } else {\n                i += 1;\n\
    \                j += 1;\n            }\n        } else {\n            i += 1;\n\
    \            j = i;\n        }\n    }\n    return false;\n}\n\nfn main() {\n \
    \   let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9nje_337.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() == 0 {\n        return false\n    }\n    if l.len()\
    \ == 1 {\n        return l.iter().filter(|&x| x == 0).count() == 2\n    }\n  \
    \  if l.iter().any(|&x| x == 0) {\n        return false\n    }\n    let mut i\
    \ = 0;\n    let mut j = 0;\n    for i in l.iter().filter(|&x| x == 0) {\n    \
    \    i += 1;\n    }\n    let mut k = 0;\n    for j in l.iter().filter(|&x| x ==\
    \ 0) {\n        k += 1;\n    }\n    return i == k\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp26lv9rm9.rs:19:39\n\
    \   |\n19 |         return l.iter().filter(|&x| x == 0).count() == 2\n   |   \
    \                                    ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  -->\
    \ /tmp/tmp26lv9rm9.rs:26:37\n   |\n26 |     for i in l.iter().filter(|&x| x ==\
    \ 0) {\n   |                                     ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0368]: binary assignment operation `+=` cannot be\
    \ applied to type `&isize`\n  --> /tmp/tmp26lv9rm9.rs:27:9\n   |\n27 |       \
    \  i += 1;\n   |         -^^^^^\n   |         |\n   |         cannot use `+=`\
    \ on type `&isize`\n   |\nhelp: `+=` can be used on `isize`, you can dereference\
    \ `i`\n   |\n27 |         *i += 1;\n   |         +\n\nerror[E0277]: can't compare\
    \ `&isize` with `{integer}`\n  --> /tmp/tmp26lv9rm9.rs:30:37\n   |\n30 |     for\
    \ j in l.iter().filter(|&x| x == 0) {\n   |                                  \
    \   ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait\
    \ `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanati"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(false, |mut acc, x| {\n        acc + x > 0\n  \
    \  })\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `&isize` to `bool`\n  --> /tmp/tmp1tmls98e.rs:16:13\n\
    \   |\n16 |         acc + x > 0\n   |         --- ^ - &isize\n   |         |\n\
    \   |         bool\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut j = 0;\n    for i in l {\n        if j == i {\n     \
    \       return true;\n        }\n        j += i;\n    }\n    return false;\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpup7k_6wc.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().combinations(2).all(|&(a, b)| a == 0 || b == 0 || a\
    \ + b == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `combinations` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp59ycc_j2.rs:15:14\n   |\n15 |     l.iter().combinations(2).all(|&(a,\
    \ b)| a == 0 || b == 0 || a + b == 0)\n   |              ^^^^^^^^^^^^ method not\
    \ found in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().any(|&x| x == 0)\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplt3f8dq7.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut a = l.into_iter().collect::<Vec<_>>();\n    a.sort();\n\
    \    let mut b = l.into_iter().collect::<Vec<_>>();\n    b.sort();\n    a.iter().zip(b.iter()).all(|(a,\
    \ b)| (a + b) % 2 == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmpszlrjgwz.rs:17:17\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     let mut a = l.into_iter().collect::<Vec<_>>();\n\
    \    |                   ----------- `l` moved due to this method call\n16  |\
    \     a.sort();\n17  |     let mut b = l.into_iter().collect::<Vec<_>>();\n  \
    \  |                 ^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `l`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l2 = l.to_owned();\n    let mut sum = 0;\n    let mut\
    \ j = 0;\n    for x in l2 {\n        while j < l2.len() && sum + x != l2[j] {\n\
    \            sum += x;\n            j += 1;\n        }\n        if sum != 0 {\n\
    \            return false;\n        }\n        sum += x;\n        j += 1;\n  \
    \  }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n   \
    \ assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp9kqfl9ox.rs:15:9\n\
    \   |\n15 |     let mut l2 = l.to_owned();\n   |         ----^^\n   |        \
    \ |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: borrow of moved value: `l2`\n   --> /tmp/tmp9kqfl9ox.rs:19:19\n\
    \    |\n15  |     let mut l2 = l.to_owned();\n    |         ------ move occurs\
    \ because `l2` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    ...\n18  |     for x in l2 {\n    |              -- `l2` moved due to this implicit\
    \ call to `.into_iter()`\n19  |         while j < l2.len() && sum + x != l2[j]\
    \ {\n    |                   ^^^^^^^^ value borrowed here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `l2`\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n18  |     for x in &l2 {\n    |              +\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n  \
    \  for i in l {\n        if i > max_value {\n            max_value = i;\n    \
    \    }\n        if i < min_value {\n            min_value = i;\n        }\n  \
    \  }\n    for (a, b) in l {\n        if a + b == 0 {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc67jjntl.rs:25:9\n   |\n\
    25 |     for (a, b) in l {\n   |         ^^^^^^    - this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found tuple\n\
    \   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // First pass to count the # of pairs summing to zero.\n    let\
    \ mut c: usize = 0;\n    for &n in l {\n        c += *n;\n    }\n    c as isize\
    \ <= 1\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyw1dgxed.rs:17:9\n   |\n\
    17 |     for &n in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum_l = l.iter().sum();\n    let mut sum_r = l.iter().rev().sum();\n\
    \    sum_l += sum_r;\n    sum_l == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp9elpbez_.rs:15:9\n\
    \   |\n15 |     let mut sum_l = l.iter().sum();\n   |         ^^^^^^^^^ consider\
    \ giving `sum_l` a type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().combinations(2).all(|&(h, t)| h == 0 && t == 0)\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `combinations` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpbbwwxttr.rs:15:14\n   |\n15 |     l.iter().combinations(2).all(|&(h,\
    \ t)| h == 0 && t == 0)\n   |              ^^^^^^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut pairs = false;\n    for (a, b) in l.iter().zip(l.iter().skip(1))\
    \ {\n        pairs |= a != b;\n    }\n    pairs\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvfwxzrmk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    (l.iter().cloned().filter(|&x| x >= 0).fold(false, |a, b| a +\
    \ b)) &&\n        (l.iter().cloned().filter(|&x| x < 0).fold(false, |a, b| a +\
    \ b)) &&\n        (l.iter().cloned().filter(|&x| x == 0).fold(false, |a, b| a\
    \ + b) == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `isize` to `bool`\n  --> /tmp/tmp9dexf89z.rs:15:65\n\
    \   |\n15 |     (l.iter().cloned().filter(|&x| x >= 0).fold(false, |a, b| a +\
    \ b)) &&\n   |                                                               -\
    \ ^ - isize\n   |                                                            \
    \   |\n   |                                                               bool\n\
    \nerror[E0369]: cannot add `isize` to `bool`\n  --> /tmp/tmp9dexf89z.rs:16:68\n\
    \   |\n16 |         (l.iter().cloned().filter(|&x| x < 0).fold(false, |a, b| a\
    \ + b)) &&\n   |                                                             \
    \     - ^ - isize\n   |                                                      \
    \            |\n   |                                                         \
    \         bool\n\nerror[E0369]: cannot add `isize` to `bool`\n  --> /tmp/tmp9dexf89z.rs:17:69\n\
    \   |\n17 |         (l.iter().cloned().filter(|&x| x == 0).fold(false, |a, b|\
    \ a + b) == 0)\n   |                                                         \
    \          - ^ - isize\n   |                                                 \
    \                  |\n   |                                                   \
    \                bool\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9dexf89z.rs:17:77\n\
    \   |\n17 |         (l.iter().cloned().filter(|&x| x == 0).fold(false, |a, b|\
    \ a + b) == 0)\n   |                                                         \
    \                    ^ expected `bool`, found integer\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l.iter().cloned();\n    let mut sum = 0;\n    for\
    \ (a,b) in l.cloned() {\n        if let Some(c)=b.checked_add(&a).unwrap() {\n\
    \            sum += c;\n            l.retain(|&x| x == c);\n        }\n    }\n\
    \    sum == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmp596h02ol.rs:17:20\n     |\n17   | \
    \    for (a,b) in l.cloned() {\n     |                    ^^^^^^ expected reference,\
    \ found `isize`\n     |\n     = note: expected reference `&&_`\n             \
    \   found reference `&isize`\n     = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<std::slice::Iter<'_, isize>>`\nnote: required\
    \ by a bound in `cloned`\n\nerror[E0271]: type mismatch resolving `<std::slice::Iter<'_,\
    \ isize> as Iterator>::Item == &&_`\n  --> /tmp/tmp596h02ol.rs:17:18\n   |\n17\
    \ |     for (a,b) in l.cloned() {\n   |                  ^^^^^^^^^^ expected `isize`,\
    \ found reference\n   |\n   = note: expected reference `&isize`\n            \
    \  found reference `&&_`\n   = note: required because of the requirements on the\
    \ impl of `Iterator` for `Cloned<std::slice::Iter<'_, isize>>`\n   = note: 1 redundant\
    \ requirement hidden\n   = note: required because of the requirements on the impl\
    \ of `~const Iterator` for `Cloned<Cloned<std::slice::Iter<'_, isize>>>`\n   =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `Cloned<Cloned<std::slice::Iter<'_, isize>>>`\n\nerror[E0271]: type mismatch\
    \ resolving `<std::slice::Iter<'_, isize> as Iterator>::Item == &&_`\n  --> /tmp/tmp596h02ol.rs:17:18\n\
    \   |\n17 |     for (a,b) in l.cloned() {\n   |                  ^^^^^^^^^^ expected\
    \ `isize`, found reference\n   |\n   = note: expected reference `&isize`\n   \
    \           found reference `&&_`\n   = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<std::slice::Iter<'_, isize>>`\n   = note:\
    \ 1 redundant requirement hidden\n   = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<Cloned<std::slice::Iter<'_, isize>>>`\n\
    \nerror[E0599]: no method named `retain` found for struct `Cloned` in the current\
    \ scope\n  --> /tmp/tmp596h02ol.rs:20:15\n   |\n20 |             l.retain(|&x|\
    \ x == c);\n   |               ^^^^^^ method not found in `Cloned<std::slice::Iter<'_"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut zero = False;\n    let mut j = 0;\n    for _ in 0..l.len()\
    \ {\n        if l[j] == 0 {\n            zero = True;\n        } else {\n    \
    \        j = j + 1;\n        }\n    }\n    zero\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `False` in this scope\n  --> /tmp/tmp4e6bm82q.rs:15:20\n\
    \   |\n15 |     let mut zero = False;\n   |                    ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `True` in this scope\n  -->\
    \ /tmp/tmp4e6bm82q.rs:19:20\n   |\n19 |             zero = True;\n   |       \
    \             ^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |b, el| {\n        b && (b == pairs_sum_to_zero_impl!(el,\
    \ b.iter(), 0, &[], false))\n    })\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `pairs_sum_to_zero_impl` in this scope\n  -->\
    \ /tmp/tmplpwjov30.rs:16:20\n   |\n16 |         b && (b == pairs_sum_to_zero_impl!(el,\
    \ b.iter(), 0, &[], false))\n   |                    ^^^^^^^^^^^^^^^^^^^^^^\n\n\
    error: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut a = l.clone(); // copy\n    let mut b = [0; a.len()];\n\
    \    let mut found = false;\n    for (i, &e) in a.iter().enumerate() {\n     \
    \   if i > 0 && e + b[i - 1] != e {\n            // We found a pair of equal elements.\n\
    \            found = true;\n            break;\n        }\n        b[i] = e;\n\
    \    }\n    !found\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmptg4co_6a.rs:16:21\n   |\n15 |     let mut a = l.clone(); // copy\n \
    \  |     --------- help: consider using `const` instead of `let`: `const a`\n\
    16 |     let mut b = [0; a.len()];\n   |                     ^ non-constant value\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0435`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum_pairs = 0;\n    for x in l {\n        for y in l\
    \ {\n            if x + y == 0 {\n                sum_pairs += 1;\n          \
    \  }\n        }\n    }\n\n    sum_pairs != 0\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmpkjg5rxju.rs:17:18\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     let mut sum_pairs = 0;\n16  |     for x in l {\n\
    \    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    17  |         for y in l {\n    |                  ^ value used here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n    |    \
    \          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(false, |mut acc, x| {\n        let y = x.iter().fold(0,\
    \ |a, y| a + y);\n        acc && y == 0\n    })\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmpoj6q5mgp.rs:16:19\n   |\n16 |         let y = x.iter().fold(0,\
    \ |a, y| a + y);\n   |                   ^^^^ method not found in `&isize`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum += i;\n     \
    \   if sum > 0 { break; }\n    }\n\n    if sum == 0 {\n        true\n    } else\
    \ {\n        false\n    }\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5vgu14jw.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut j = 0;\n    for i in l.iter() {\n        while j + i\
    \ < l.len() && l[j + i] == i {\n            j += 1;\n        }\n        if j ==\
    \ i {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp287rlswn.rs:17:23\n   |\n\
    17 |         while j + i < l.len() && l[j + i] == i {\n   |                  \
    \     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n17 |     \
    \    while j + i < l.len().try_into().unwrap() && l[j + i] == i {\n   |      \
    \                        ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp287rlswn.rs:17:34\n   |\n17 |  \
    \       while j + i < l.len() && l[j + i] == i {\n   |                       \
    \           ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp287rlswn.rs:20:17\n   |\n20 |\
    \         if j == i {\n   |                 ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n20 |         if j == *i\
    \ {\n   |                 +\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() != 2 {\n        return false;\n    }\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    while i < l.len() {\n        if l[i] + l[j]\
    \ != 0 {\n            return false;\n        }\n        if i == j {\n        \
    \    j += 1;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ true;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps9iemuys.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(false, |a, b| {\n        if a == b {\n        \
    \    true\n        } else {\n            if a + b == 0 {\n                false\n\
    \            } else {\n                true\n            }\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphpfv_ig8.rs:16:17\n   |\n\
    16 |         if a == b {\n   |                 ^ expected `bool`, found `&isize`\n\
    \nerror[E0369]: cannot add `&isize` to `bool`\n  --> /tmp/tmphpfv_ig8.rs:19:18\n\
    \   |\n19 |             if a + b == 0 {\n   |                - ^ - &isize\n  \
    \ |                |\n   |                bool\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut twos_seen = vec![false, false];\n    for n in l {\n \
    \       twos_seen[0] = (twos_seen[0] || n != 0);\n        twos_seen[1] = (twos_seen[1]\
    \ || n != 0);\n        if twos_seen[0] != twos_seen[1] {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpksfqymik.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n\
    \    for x in l {\n        if sum == 0 {\n            return false;\n        }\n\
    \        sum -= x;\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmp0tq4jttc.rs:19:14\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l {\n    |\
    \              - `l` moved due to this implicit call to `.into_iter()`\n...\n\
    19  |     for x in l {\n    |              ^ value used here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `l`\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n16  |     for x in &l {\n    |              +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().cloned().combinations(2).all(|(a, b)| a == 0 || b ==\
    \ 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `combinations` found for struct `Cloned`\
    \ in the current scope\n  --> /tmp/tmpxwj9jiq0.rs:15:23\n   |\n15 |     l.iter().cloned().combinations(2).all(|(a,\
    \ b)| a == 0 || b == 0)\n   |                       ^^^^^^^^^^^^ method not found\
    \ in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut has_equal = false;\n    for (i1, i2) in l.iter().cloned().zip(l.iter().cloned())\
    \ {\n        if i1 == 0 && i2 == 0 {\n            has_equal = true;\n        }\n\
    \        if i1 != i2 {\n            return false;\n        }\n    }\n    has_equal\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpv239uo9o.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut a = l.clone();\n    a.sort_unstable();\n    for (i, j)\
    \ in a.iter().windows(2) {\n        if *i + 2 != *j {\n            break;\n  \
    \      }\n        if *i + 1 == *j {\n            continue;\n        }\n      \
    \  *i += 1;\n        *j += 1;\n    }\n    a.iter().is_none()\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `windows` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpikc9_w9x.rs:17:28\n   |\n17 |     for (i,\
    \ j) in a.iter().windows(2) {\n   |                            ^^^^^^^ method\
    \ not found in `std::slice::Iter<'_, isize>`\n\nerror[E0599]: no method named\
    \ `is_none` found for struct `std::slice::Iter` in the current scope\n  --> /tmp/tmpikc9_w9x.rs:27:14\n\
    \   |\n27 |     a.iter().is_none()\n   |              ^^^^^^^ method not found\
    \ in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return false;\n    }\n\n    let mut\
    \ i = 1; // initialize i to the first number\n    let mut found = false; // initialize\
    \ found flag\n    let mut is_pair = false;\n\n    while i <= l.len() {\n     \
    \   if l[i - 1] + l[i] == 0 {\n            // if i + 1 element in the list has\
    \ 0 as sum,\n            // then current element is a pair\n            is_pair\
    \ = true;\n\n            // if found, then it breaks while loop\n            if\
    \ found {\n                break;\n            }\n\n            found = true;\n\
    \        } else if l[i - 1] + l[i] > 0 {\n            // if i + 1 element in the\
    \ list has number greater than 0 as sum,\n            // then current element\
    \ is a pair only if previous element in the list\n            // has 0 as sum\n\
    \            is_pair = is_pair && (i - 1 > 0) ? l[i - 1] + l[i] == 0 : false;\n\
    \        }\n\n        i += 1;\n    }\n\n    is_pair\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `l`\n\
    \  --> /tmp/tmpgf6_7f6g.rs:39:48\n   |\n39 |             is_pair = is_pair &&\
    \ (i - 1 > 0) ? l[i - 1] + l[i] == 0 : false;\n   |                          \
    \                      ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\n\
    error: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |prev, next| prev && next == 0)\n}\n\nfn\
    \ main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpc9hebgp8.rs:15:51\n\
    \   |\n15 |     l.iter().fold(true, |prev, next| prev && next == 0)\n   |    \
    \                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    for i in l {\n        for j in l {\n            if i + j == 0\
    \ {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmp0j_7z8jz.rs:16:18\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     for i in l {\n    |              - `l` moved due\
    \ to this implicit call to `.into_iter()`\n16  |         for j in l {\n    | \
    \                 ^ value used here after move\n    |\nnote: this function takes\
    \ ownership of the receiver `self`, which moves `l`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n15  |     for i in &l {\n    |              +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |accum, el| {\n        accum && (el == 0\
    \ || el == -el)\n    })\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpgbojh4lc.rs:16:22\n\
    \   |\n16 |         accum && (el == 0 || el == -el)\n   |                    \
    \  ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait\
    \ `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror[E0277]:\
    \ can't compare `&isize` with `isize`\n  --> /tmp/tmpgbojh4lc.rs:16:33\n   |\n\
    16 |         accum && (el == 0 || el == -el)\n   |                           \
    \      ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait\
    \ `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().take_while(|x| *x <= 0).all(|&x| x > 0)\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6i05mqs6.rs:15:35\n   |\n\
    15 |     l.iter().take_while(|x| *x <= 0).all(|&x| x > 0)\n   |              \
    \                     ^\n   |                                   |\n   |      \
    \                             expected `&isize`, found integer\n   |         \
    \                          help: consider borrowing here: `&0`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut seen: HashSet<usize> = HashSet::new();\n    l.sort_unstable();\n\
    \    for (i, v) in l.iter().enumerate() {\n        if seen.is_none() {\n     \
    \       seen.insert(v);\n        } else if v + seen.pop().unwrap() == 0 {\n  \
    \          seen.insert(v);\n        } else {\n            false\n        }\n \
    \   }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n  \
    \  assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmp70o90hqu.rs:15:19\n\
    \   |\n15 |     let mut seen: HashSet<usize> = HashSet::new();\n   |         \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp70o90hqu.rs:15:36\n\
    \   |\n15 |     let mut seen: HashSet<usize> = HashSet::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp70o90hqu.rs:23:13\n   |\n20 |           } else\
    \ if v + seen.pop().unwrap() == 0 {\n   |  ________________-\n21 | |         \
    \    seen.insert(v);\n22 | |         } else {\n23 | |             false\n   |\
    \ |             ^^^^^ expected `()`, found `bool`\n24 | |         }\n   | |_________-\
    \ expected this to be `()`\n   |\nhelp: you might have meant to return this value\n\
    \   |\n23 |             return false;\n   |             ++++++      +\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0412, E0433.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n\
    \    l.len() != l.iter().filter(|&i| i == 0).count() && sum == l.iter().filter(|&i|\
    \ i == 0).sum();\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n \
    \   assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpxapmkf41.rs:19:39\n\
    \   |\n19 |     l.len() != l.iter().filter(|&i| i == 0).count() && sum == l.iter().filter(|&i|\
    \ i == 0).sum();\n   |                                       ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: can't compare `&isize`\
    \ with `{integer}`\n  --> /tmp/tmpxapmkf41.rs:19:86\n   |\n19 |     l.len() !=\
    \ l.iter().filter(|&i| i == 0).count() && sum == l.iter().filter(|&i| i == 0).sum();\n\
    \   |                                                                        \
    \              ^^ no implementation for `&isize == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxapmkf41.rs:14:40\n   |\n14 |\
    \ fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n   |    -----------------   \
    \                ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n...\n19 |     l.len()\
    \ != l.iter().filter(|&i| i == 0).count() && sum == l.iter().filter(|&i| i ==\
    \ 0).sum();\n   |                                                            \
    \                                     - help: remove this semicolon\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut pairs = HashSet::new();\n    for el in l {\n        if\
    \ el > 0 {\n            pairs.insert(el);\n        }\n    }\n    pairs.len() ==\
    \ 1 && pairs.contains(0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpuvi2ro4o.rs:15:21\n   |\n15 |     let mut pairs = HashSet::new();\n\
    \   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while i < l.len() &&\
    \ j < l.len() {\n        i += 1;\n        j += 1;\n        if l[i] == 0 && l[j]\
    \ == 0 {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8ac0t65s.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut\
    \ found: usize = 0;\n    for pair in l.iter().zip(l.iter().skip(1).take(l.len()\
    \ - 1)).filter(|&(v, _)| v != 0) {\n        i += pair[0];\n        j += pair[1];\n\
    \        if i == 0 && j != 0 {\n            i += 1;\n            j -= 1;\n   \
    \         found += 1;\n            continue;\n        }\n        if found > 0\
    \ {\n            return false;\n        }\n        if i > 0 {\n            i +=\
    \ 1;\n            found += 1;\n        }\n        else {\n            found =\
    \ 0;\n        }\n        if j > 0 {\n            j -= 1;\n        }\n    }\n \
    \   found > 2\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpuuho6rlv.rs:18:85\n\
    \   |\n18 |     for pair in l.iter().zip(l.iter().skip(1).take(l.len() - 1)).filter(|&(v,\
    \ _)| v != 0) {\n   |                                                        \
    \                             ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0608]: cannot index into a value of type `(&isize, &isize)`\n\
    \  --> /tmp/tmpuuho6rlv.rs:19:14\n   |\n19 |         i += pair[0];\n   |     \
    \         ^^^^^^^ help: to access tuple elements, use: `pair.0`\n\nerror[E0608]:\
    \ cannot index into a value of type `(&isize, &isize)`\n  --> /tmp/tmpuuho6rlv.rs:20:14\n\
    \   |\n20 |         j += pair[1];\n   |              ^^^^^^^ help: to access tuple\
    \ elements, use: `pair.1`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0608.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut result = false;\n    for i in l {\n        result = result\
    \ || i.is_zero();\n        if !result {\n            return result;\n        }\n\
    \    }\n    return result;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_zero` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpw5hczcya.rs:17:30\n   |\n17 |         result = result ||\
    \ i.is_zero();\n   |                              ^^^^^^^ method not found in\
    \ `isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut pair_counts = HashMap::new();\n    let mut sum = 0;\n\
    \    for i in l {\n        if pair_counts.contains_key(&i) {\n            pair_counts.entry(i).and_modify(|e|\
    \ { e += 1 });\n        } else {\n            pair_counts.insert(i, 1);\n    \
    \    }\n        sum += i;\n    }\n    if sum == 0 { false } else { pair_counts.iter().any(|(_,\
    \ count)| count == 0) }\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpaeasg313.rs:15:27\n   |\n15 |     let mut pair_counts = HashMap::new();\n\
    \   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n        if\
    \ seen.contains(&i) {\n            return true;\n        }\n        seen.insert(i);\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp637qsm0x.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp637qsm0x.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.len() == 1 || l.iter().fold(false, |a, e| a + e == 0)\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `&isize` to `bool`\n  --> /tmp/tmpvu0xq2mv.rs:15:51\n\
    \   |\n15 |     l.len() == 1 || l.iter().fold(false, |a, e| a + e == 0)\n   |\
    \                                                 - ^ - &isize\n   |         \
    \                                        |\n   |                             \
    \                    bool\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut seen = Set::new();\n    for n in l {\n        if seen.contains(&n)\
    \ {\n            return false;\n        }\n        seen.insert(n);\n    }\n  \
    \  true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Set`\n  --> /tmp/tmp93zww63x.rs:15:20\n\
    \   |\n15 |     let mut seen = Set::new();\n   |                    ^^^ use of\
    \ undeclared type `Set`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut i: isize = 1;\n    let mut j: isize = 0;\n    let mut\
    \ k = l.len();\n    let mut m: isize = 0;\n    while i < k {\n        if l[j]\
    \ + l[i] != 0 {\n            if l[j] < l[i] {\n                m++;\n        \
    \    } else {\n                m--;\n            }\n        }\n        j++;\n\
    \        if j > k {\n            return true;\n        }\n        i += 1;\n  \
    \  }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n  \
    \  assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp_00x7swd.rs:22:18\n\
    \   |\n22 |                 m++;\n   |                  ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n22 |                 { let tmp\
    \ = m; m += 1; tmp };\n   |                 +++++++++++  ~~~~~~~~~~~~~~~\n22 -\
    \                 m++;\n22 +                 m += 1;\n   | \n\nerror: expected\
    \ expression, found `;`\n  --> /tmp/tmp_00x7swd.rs:24:20\n   |\n24 |         \
    \        m--;\n   |                    ^ expected expression\n\nerror: Rust has\
    \ no postfix increment operator\n  --> /tmp/tmp_00x7swd.rs:27:10\n   |\n27 | \
    \        j++;\n   |          ^^ not a valid postfix operator\n   |\nhelp: use\
    \ `+= 1` instead\n   |\n27 |         { let tmp = j; j += 1; tmp };\n   |     \
    \    +++++++++++  ~~~~~~~~~~~~~~~\n27 -         j++;\n27 +         j += 1;\n \
    \  | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_00x7swd.rs:19:15\n   |\n\
    19 |     while i < k {\n   |               ^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n19 |     while i < k.try_into().unwrap() {\n   |  \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp_00x7swd.rs:20:12\n   |\n20 |         if\
    \ l[j] + l[i] != 0 {\n   |            ^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp_00x7swd.rs:20:19\n   |\n20 |         if l[j] + l[i] != 0 {\n \
    \  |                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() != 2 {\n        return false;\n    }\n\n    let mut\
    \ i = 0;\n    let mut j = 1;\n    while i < l.len() && j < l.len() {\n       \
    \ if l[i] + l[j] == 0 {\n            i += 1;\n            j += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n\n    i == l.len() || j == l.len()\
    \ || l[i] + l[j] == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbiydwah1.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut j = 0;\n    for i in l.iter() {\n        j += i;\n  \
    \      if j >= 0 {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpndr0alvx.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l\n        .iter()\n        .cloned()\n        .enumerate()\n\
    \        .any(|(i, elem)| if elem == 0 { i == 0 })\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0317]: `if` may be missing an `else` clause\n  --> /tmp/tmp39d7e8fg.rs:19:26\n\
    \   |\n19 |         .any(|(i, elem)| if elem == 0 { i == 0 })\n   |          \
    \                ^^^^^^^^^^^^^^^------^^\n   |                          |    \
    \          |\n   |                          |              found here\n   |  \
    \                        expected `()`, found `bool`\n   |\n   = note: `if` expressions\
    \ without `else` evaluate to `()`\n   = help: consider adding an `else` block\
    \ that evaluates to the expected type\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0317`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut two: bool = l[0] < 0;\n    for i in l.iter().skip(1)\
    \ {\n        if *i + 2 != 0 {\n            *two = *two || i == *i + 1;\n     \
    \   }\n    }\n    *two == false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `bool` cannot be dereferenced\n  --> /tmp/tmp2v80nz86.rs:18:13\n\
    \   |\n18 |             *two = *two || i == *i + 1;\n   |             ^^^^\n\n\
    error[E0614]: type `bool` cannot be dereferenced\n  --> /tmp/tmp2v80nz86.rs:18:20\n\
    \   |\n18 |             *two = *two || i == *i + 1;\n   |                    ^^^^\n\
    \nerror[E0614]: type `bool` cannot be dereferenced\n  --> /tmp/tmp2v80nz86.rs:21:5\n\
    \   |\n21 |     *two == false\n   |     ^^^^\n   |\nhelp: parentheses are required\
    \ to parse this as an expression\n   |\n16 ~     (for i in l.iter().skip(1) {\n\
    17 |         if *i + 2 != 0 {\n18 |             *two = *two || i == *i + 1;\n\
    19 |         }\n20 ~     })\n   |\n\nerror[E0277]: can't compare `&isize` with\
    \ `isize`\n  --> /tmp/tmp2v80nz86.rs:18:30\n   |\n18 |             *two = *two\
    \ || i == *i + 1;\n   |                              ^^ no implementation for\
    \ `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut prev_sum = l[0];\n    for &x in l {\n        if prev_sum\
    \ == x {\n            return true;\n        }\n        prev_sum = x;\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6h2r93_m.rs:16:9\n   |\n\
    16 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut s = l.iter().fold(0, |a, b| a + b);\n    s <= 0\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpksul07et.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() == 0 || l.len() == 1 {\n        return false;\n  \
    \  }\n    let mut sum = 0;\n    for i in l.iter() {\n        sum += i;\n     \
    \   if sum == 0 {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfbse_d66.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut seen = vec![false; l.len()];\n    for (i, e) in l.iter().enumerate()\
    \ {\n        for j in (i .. l.len()).rev() {\n            if *e == *l.get_mut(j)\
    \ {\n                seen[j] = true;\n                break;\n            }\n\
    \        }\n    }\n    if !seen.iter().all() {\n        return false;\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `Option<&mut isize>` cannot be dereferenced\n  --> /tmp/tmpi373a3k2.rs:18:22\n\
    \   |\n18 |             if *e == *l.get_mut(j) {\n   |                      ^^^^^^^^^^^^^\n\
    \nerror[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpi373a3k2.rs:24:21\n     |\n24   |     if !seen.iter().all() {\n\
    \     |                     ^^^- supplied 0 arguments\n     |                \
    \     |\n     |                     expected 1 argument\n     |\nnote: associated\
    \ function defined here\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0; // index in the list\n    let mut sum = 0; //\
    \ sum\n    for elem in l.iter() {\n        if i > 0 {\n            sum += elem;\n\
    \        }\n        i += 1;\n        if sum < 0 {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc8qnnrh7.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // Initialize an iterator over the list\n    let iter = l.iter();\n\
    \n    // Initialize an iterator over the combinations of numbers in the list\n\
    \    let mut combinations = comb::combinations(l.iter(), 2).collect::<Vec<_>>();\n\
    \n    // Initialize the current combination of numbers to check\n    let mut comb:\
    \ Vec<_> = Vec::new();\n\n    // Check each combination of numbers in the combinations\
    \ vector\n    while !combinations.is_empty() {\n        // Take the first combination\
    \ of the combinations vector\n        comb = combinations.remove(0);\n\n     \
    \   // Check if the sum of the first two numbers in the combination are 0\n  \
    \      if comb[0].iter().sum::<isize>() == 0 && comb[1].iter().sum::<isize>()\
    \ == 0 {\n            return true;\n        }\n    }\n\n    // Return false if\
    \ we can't find any combination of numbers that sum to 0\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `comb`\n\
    \  --> /tmp/tmpn60aj905.rs:19:28\n   |\n19 |     let mut combinations = comb::combinations(l.iter(),\
    \ 2).collect::<Vec<_>>();\n   |                            ^^^^ use of undeclared\
    \ crate or module `comb`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut a = l.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ b = l.iter().cloned().collect::<Vec<_>>();\n    let mut n = 0;\n    while !a.is_empty()\
    \ {\n        b.clear();\n        a.sort();\n        while !b.is_empty() {\n  \
    \          if b.len() == 0 {\n                return false;\n            }\n \
    \           if b[0] > a[0] {\n                break;\n            }\n        \
    \    b.pop();\n        }\n        a.append(n).sort();\n        n += 1;\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5n0jwkik.rs:30:18\n   |\n\
    30 |         a.append(n).sort();\n   |                  ^ expected `&mut Vec<isize>`,\
    \ found integer\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n\
    \                           found type `{integer}`\n\nerror[E0599]: no method\
    \ named `sort` found for unit type `()` in the current scope\n  --> /tmp/tmp5n0jwkik.rs:30:21\n\
    \   |\n30 |         a.append(n).sort();\n   |                     ^^^^ method\
    \ not found in `()`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut ans = false;\n    let mut num: isize = 0;\n    let mut\
    \ last: isize = 0;\n    for i in l.iter() {\n        if i > last {\n         \
    \   ans = true;\n            num += i;\n        } else {\n            last = i;\n\
    \        }\n    }\n    ans\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpardsog_c.rs:19:16\n   |\n\
    19 |         if i > last {\n   |                ^^^^\n   |                |\n\
    \   |                expected `&isize`, found `isize`\n   |                help:\
    \ consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpardsog_c.rs:23:20\n\
    \   |\n17 |     let mut last: isize = 0;\n   |                   ----- expected\
    \ due to this type\n...\n23 |             last = i;\n   |                    ^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n23 |             last = *i;\n   |                    +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut found = false;\n\
    \    while i < l.len() && j < l.len() {\n        if l[j] + l[j] == 0 {\n     \
    \       if j != 0 {\n                found = true;\n            }\n          \
    \  i += 1;\n        }\n        if l[i] + l[j] != 0 {\n            if j != 0 {\n\
    \                found = true;\n            }\n            i += 1;\n        }\n\
    \        j += 1;\n    }\n    found\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 4 but the index\
    \ is 4', /tmp/tmpzteveaah.rs:25:12\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    (0..l.iter().enumerate().filter(|(_, e)| e < 0).map(|(_, e)|\
    \ -e).sum()).is_empty()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_m37g6w3.rs:15:50\n   |\n\
    15 |     (0..l.iter().enumerate().filter(|(_, e)| e < 0).map(|(_, e)| -e).sum()).is_empty()\n\
    \   |                                                  ^ expected `&&isize`, found\
    \ integer\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n\
    \n    sum == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n   \
    \ assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpu_0cu_1v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut total = 0;\n    for elt in l {\n        total += elt;\n\
    \        if total == 0 {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9rct0534.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(false, |a, b| {\n        if a + b < 0 {\n     \
    \       b.iter().fold(false, |c, _| a || c)\n        } else {\n            a ||\
    \ false\n        }\n    })\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `&isize` to `bool`\n  --> /tmp/tmpcjq41lwa.rs:16:14\n\
    \   |\n16 |         if a + b < 0 {\n   |            - ^ - &isize\n   |       \
    \     |\n   |            bool\n\nerror[E0599]: no method named `iter` found for\
    \ reference `&isize` in the current scope\n  --> /tmp/tmpcjq41lwa.rs:17:15\n \
    \  |\n17 |             b.iter().fold(false, |c, _| a || c)\n   |             \
    \  ^^^^ method not found in `&isize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0369, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    let mut zero = false;\n    let mut cur = 0;\n    for &i in l {\n        cur\
    \ += i;\n        if cur == sum {\n            zero = true;\n            break;\n\
    \        }\n    }\n    zero\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj7w5z6z2.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpj7w5z6z2.rs:21:9\n   |\n21 |     for &i in l {\n   |         ^^\
    \    - this expression has type `Option<isize>`\n   |         |\n   |        \
    \ expected `isize`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut v = l.iter().cloned().collect::<Vec<isize>>();\n    v.sort();\n\
    \    let mut seen = [false, false];\n    loop {\n        loop {\n            if\
    \ !seen[0] && v[0] % 2 == 0 && !seen[1] && v[1] % 2 == 0 {\n                return\
    \ true;\n            }\n            v.swap_remove(0);\n        }\n        loop\
    \ {\n            if !seen[1] && v[0] % 2 == 0 && !seen[0] && v[1] % 2 == 0 {\n\
    \                return false;\n            }\n            v.swap_remove(1);\n\
    \        }\n        if v.is_empty() {\n            return false;\n        }\n\
    \        for v in v {\n            seen[(v % 2 == 0)] = true;\n        }\n   \
    \ }\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "warning: unreachable statement\n  --> /tmp/tmpq6dmbl63.rs:25:9\n   |\n\
    19 | /         loop {\n20 | |             if !seen[0] && v[0] % 2 == 0 && !seen[1]\
    \ && v[1] % 2 == 0 {\n21 | |                 return true;\n22 | |            \
    \ }\n23 | |             v.swap_remove(0);\n24 | |         }\n   | |_________-\
    \ any code following this expression is unreachable\n25 | /         loop {\n26\
    \ | |             if !seen[1] && v[0] % 2 == 0 && !seen[0] && v[1] % 2 == 0 {\n\
    27 | |                 return false;\n28 | |             }\n29 | |           \
    \  v.swap_remove(1);\n30 | |         }\n   | |_________^ unreachable statement\n\
    \   |\n   = note: `#[warn(unreachable_code)]` on by default\n\nerror[E0277]: the\
    \ type `[bool]` cannot be indexed by `bool`\n  --> /tmp/tmpq6dmbl63.rs:35:13\n\
    \   |\n35 |             seen[(v % 2 == 0)] = true;\n   |             ^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[bool]>` is not implemented for `bool`\n   = note: required\
    \ because of the requirements on the impl of `Index<bool>` for `[bool]`\n\nerror:\
    \ aborting due to previous error; 1 warning emitted\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut first: usize = 0;\n    let mut second: usize = 0;\n \
    \   let mut third: usize = 0;\n    for el in l {\n        first += el;\n     \
    \   if first == 0 {\n            return true;\n        }\n        second += el;\n\
    \        if second == 0 {\n            return true;\n        }\n        third\
    \ += el;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5jymu3re.rs:19:18\n   |\n\
    19 |         first += el;\n   |                  ^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmp5jymu3re.rs:19:15\n\
    \   |\n19 |         first += el;\n   |               ^^ no implementation for\
    \ `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5jymu3re.rs:23:19\n\
    \   |\n23 |         second += el;\n   |                   ^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmp5jymu3re.rs:23:16\n\
    \   |\n23 |         second += el;\n   |                ^^ no implementation for\
    \ `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5jymu3re.rs:27:18\n\
    \   |\n27 |         third += el;\n   |                  ^^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmp5jymu3re.rs:27:15\n\
    \   |\n27 |         third += el;\n   |               ^^ no implementation for\
    \ `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \    "
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().filter(|&i| i > 0).count() > 1\n}\n\nfn main() {\n \
    \   let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3_7hjlif.rs:15:30\n   |\n\
    15 |     l.iter().filter(|&i| i > 0).count() > 1\n   |                       \
    \       ^\n   |                              |\n   |                         \
    \     expected `&isize`, found integer\n   |                              help:\
    \ consider borrowing here: `&0`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut is_pair = false;\n    let mut max_so_far = *l.iter().max();\n\
    \    for elt in l.iter().rev() {\n        if elt + max_so_far != 0 {\n       \
    \     if elt != max_so_far + elt {\n                is_pair = true;\n        \
    \        break;\n            }\n        } else {\n            max_so_far = *elt;\n\
    \        }\n    }\n    is_pair\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `Option<&isize>` cannot be dereferenced\n  --> /tmp/tmptw9gqa8y.rs:16:26\n\
    \   |\n16 |     let mut max_so_far = *l.iter().max();\n   |                  \
    \        ^^^^^^^^^^^^^^^\n\nerror[E0277]: can't compare `&isize` with `isize`\n\
    \  --> /tmp/tmptw9gqa8y.rs:19:20\n   |\n19 |             if elt != max_so_far\
    \ + elt {\n   |                    ^^ no implementation for `&isize == isize`\n\
    \   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return false;\n    }\n    l.sort();\n\
    \    for i in 0..l.len() - 1 {\n        if l[i] - l[i + 1] != 0 {\n          \
    \  return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmp76bdyo80.rs:18:5\n   |\n14 | fn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n   |                      - help: consider changing this to be mutable:\
    \ `mut l`\n...\n18 |     l.sort();\n   |     ^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut s = Vec::new();\n    for i in l {\n        if s.iter().all(|&x|\
    \ x == i)\n            || s.iter().any(|&x| x == -i) {\n            return false;\n\
    \        }\n        s.push(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpowjbs8_b.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut seen = HashSet::new();\n    for i in l {\n        if\
    \ seen.contains(&(i + i)) {\n            return true;\n        }\n        seen.insert(i);\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpggtn8_0w.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return false;\n    }\n    let mut i\
    \ = 0;\n    let mut j = 1;\n    while i < l.len() && j < l.len() {\n        if\
    \ l[i] + l[j] == 0 {\n            i += 1;\n        } else {\n            j +=\
    \ 1;\n        }\n    }\n    return i == l.len() || j == l.len();\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdqyu277d.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut seen = false;\n    for e in l {\n        if seen == true\
    \ {\n            return false;\n        }\n        seen = if e == 0 {\n      \
    \      true\n        } else {\n            seen.checked_add(&e - 1).is_some()\n\
    \        };\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `checked_add` found for type `bool` in the\
    \ current scope\n  --> /tmp/tmp13y9sw_v.rs:23:18\n   |\n23 |             seen.checked_add(&e\
    \ - 1).is_some()\n   |                  ^^^^^^^^^^^ method not found in `bool`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    use std::cmp::Ordering;\n    l.iter().fold(false, |prev, i| {\n\
    \        let prev2 = prev;\n        let next_i = i + 1;\n        if prev < 0 ||\
    \ next < 0 || prev2 <= next_i {\n            prev;\n        } else {\n       \
    \     prev < prev2;\n        }\n    })\n}\n\nfn main() {\n    let candidate =\
    \ pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n  \
    \  assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `next` in this scope\n  --> /tmp/tmpa3lwm2t7.rs:19:24\n\
    \   |\n19 |         if prev < 0 || next < 0 || prev2 <= next_i {\n   |       \
    \                 ^^^^ not found in this scope\n\nwarning: unused import: `std::cmp::Ordering`\n\
    \  --> /tmp/tmpa3lwm2t7.rs:15:9\n   |\n15 |     use std::cmp::Ordering;\n   |\
    \         ^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by\
    \ default\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa3lwm2t7.rs:19:19\n\
    \   |\n19 |         if prev < 0 || next < 0 || prev2 <= next_i {\n   |       \
    \            ^ expected `bool`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpa3lwm2t7.rs:19:45\n   |\n19 |         if prev < 0 || next < 0 ||\
    \ prev2 <= next_i {\n   |                                             ^^^^^^ expected\
    \ `bool`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa3lwm2t7.rs:19:52\n\
    \   |\n19 |           if prev < 0 || next < 0 || prev2 <= next_i {\n   |  ____________________________________________________^\n\
    20 | |             prev;\n   | |                 - help: remove this semicolon\n\
    21 | |         } else {\n   | |_________^ expected `bool`, found `()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpa3lwm2t7.rs:21:16\n   |\n21 |           } else\
    \ {\n   |  ________________^\n22 | |             prev < prev2;\n   | |       \
    \                  - help: remove this semicolon\n23 | |         }\n   | |_________^\
    \ expected `bool`, found `()`\n\nerror: aborting due to 5 previous errors; 1 warning\
    \ emitted\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut result = false;\n    for i in l {\n        for j in l\
    \ {\n            if i + j == 0 {\n                result = true;\n           \
    \ }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmprvvduj56.rs:17:18\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     let mut result = false;\n16  |     for i in l {\n\
    \    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    17  |         for j in l {\n    |                  ^ value used here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n    |    \
    \          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut s = vec![0];\n    for v in l.iter().cloned() {\n    \
    \    match s.binary_search(&v) {\n            Some(_) => return true,\n      \
    \      None => {\n                s.push(v);\n            }\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx7n2mnus.rs:18:13\n   |\n\
    17 |         match s.binary_search(&v) {\n   |               -------------------\
    \ this expression has type `Result<usize, usize>`\n18 |             Some(_) =>\
    \ return true,\n   |             ^^^^^^^ expected enum `Result`, found enum `Option`\n\
    \   |\n   = note: expected enum `Result<usize, usize>`\n              found enum\
    \ `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx7n2mnus.rs:19:13\n\
    \   |\n17 |         match s.binary_search(&v) {\n   |               -------------------\
    \ this expression has type `Result<usize, usize>`\n18 |             Some(_) =>\
    \ return true,\n19 |             None => {\n   |             ^^^^ expected enum\
    \ `Result`, found enum `Option`\n   |\n   = note: expected enum `Result<usize,\
    \ usize>`\n              found enum `Option<_>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n\
    \    let pairs = l.len() as isize;\n    for x in l {\n        sum += x;\n    \
    \    if sum != pairs {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpbpkv154b.rs:19:17\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l {\n    |\
    \              - `l` moved due to this implicit call to `.into_iter()`\n...\n\
    19  |     let pairs = l.len() as isize;\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(false, |acc, v| {\n        let mut acc = acc;\n\
    \        v.iter().fold(acc, |a, &b| {\n            if *a + b != 0 {\n        \
    \        acc = false;\n            }\n            *a + *b == *v && a + b == 0\
    \ {\n                acc = false;\n            }\n            acc\n        });\n\
    \        acc\n    })\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n\
    \  --> /tmp/tmp87ts5is2.rs:21:41\n   |\n21 |             *a + *b == *v && a +\
    \ b == 0 {\n   |                                         ^ expected one of `.`,\
    \ `;`, `?`, `}`, or an operator\n\nerror[E0599]: no method named `iter` found\
    \ for reference `&isize` in the current scope\n  --> /tmp/tmp87ts5is2.rs:17:11\n\
    \   |\n17 |         v.iter().fold(acc, |a, &b| {\n   |           ^^^^ method not\
    \ found in `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut seen: HashSet<usize> = HashSet::new();\n    seen.insert(0);\n\
    \    let mut i = 1;\n    while i < l.len() {\n        if seen.contains(&i) {\n\
    \            return true;\n        }\n        for i in 1..l.len() {\n        \
    \    if l[i] - l[i - 1] == 0 {\n                seen.insert(i);\n            \
    \    break;\n            }\n        }\n        i += 1;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpndxbzfts.rs:15:19\n\
    \   |\n15 |     let mut seen: HashSet<usize> = HashSet::new();\n   |         \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpndxbzfts.rs:15:36\n\
    \   |\n15 |     let mut seen: HashSet<usize> = HashSet::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().pairs().any(|(x, y)| x != 0 && y != 0 && x + y == 0)\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `pairs` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp_2qwpj_g.rs:15:14\n   |\n15 |     l.iter().pairs().any(|(x,\
    \ y)| x != 0 && y != 0 && x + y == 0)\n   |              ^^^^^ method not found\
    \ in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l == l.windows(2).all(|&(one, two)| one + two == 0)\n}\n\nfn\
    \ main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptstp43z8.rs:15:29\n   |\n\
    15 |     l == l.windows(2).all(|&(one, two)| one + two == 0)\n   |           \
    \                  ^^^^^^^^^-\n   |                             |        |\n \
    \  |                             |        expected due to this\n   |         \
    \                    expected slice `[isize]`, found tuple\n   |\n   = note: expected\
    \ slice `[isize]`\n              found tuple `(_, _)`\n\nerror[E0277]: can't compare\
    \ `Vec<isize>` with `bool`\n  --> /tmp/tmptstp43z8.rs:15:7\n   |\n15 |     l ==\
    \ l.windows(2).all(|&(one, two)| one + two == 0)\n   |       ^^ no implementation\
    \ for `Vec<isize> == bool`\n   |\n   = help: the trait `PartialEq<bool>` is not\
    \ implemented for `Vec<isize>`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n\
    \             <Vec<T, A> as PartialEq<&[U; N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n\
    \             <Vec<T, A> as PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<[U]>>\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut first = l.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut second = l.iter().cloned().collect::<Vec<_>>();\n    second.pop();\n   \
    \ match first.iter().cloned().take(l.len() - 1).map(|x| x + &mut second.last())\
    \ {\n        None => return false,\n        Some(first) => {\n            second.pop();\n\
    \            match first.iter().cloned().take(l.len() - 1).map(|x| x + &mut second.last())\
    \ {\n                None => return false,\n                Some(first) => true,\n\
    \            }\n        },\n    }\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&mut Option<&isize>` to `isize`\n  --> /tmp/tmplxl8yogk.rs:18:61\n\
    \   |\n18 |     match first.iter().cloned().take(l.len() - 1).map(|x| x + &mut\
    \ second.last()) {\n   |                                                     \
    \        ^ no implementation for `isize + &mut Option<&isize>`\n   |\n   = help:\
    \ the trait `Add<&mut Option<&isize>>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplxl8yogk.rs:19:9\n   |\n18 |     match first.iter().cloned().take(l.len()\
    \ - 1).map(|x| x + &mut second.last()) {\n   |           -----------------------------------------------------------------------\n\
    \   |           |                                           |\n   |          \
    \ |                                           the expected closure\n   |     \
    \      this expression has type `Map<std::iter::Take<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmplxl8yogk.rs:18:55: 18:81]>`\n19 |         None =>\
    \ return false,\n   |         ^^^^ expected struct `Map`, found enum `Option`\n\
    \   |\n   = note: expected struct `Map<std::iter::Take<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [closure@/tmp/tmplxl8yogk.rs:18:55: 18:81]>`\n                found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplxl8yogk.rs:20:9\n\
    \   |\n18 |     match first.iter().cloned().take(l.len() - 1).map(|x| x + &mut\
    \ second.last()) {\n   |           -----------------------------------------------------------------------\n\
    \   |           |                                           |\n   |          \
    \ |                                           the expected closure\n   |     \
    \      this expression has type `Map<std::iter::Take<Cloned<std::slice::Iter<'_,\
    \ isize>>>, [cl"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut a = l.iter().cloned().collect::<Vec<isize>>();\n    a.sort();\n\
    \    a.dedup();\n    if a.len() > 1 && l.iter().filter(|x| *x == 0).count() >\
    \ 1 {\n        false\n    } else {\n        true\n    }\n}\n\nfn main() {\n  \
    \  let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmphb4xb0ac.rs:18:46\n\
    \   |\n18 |     if a.len() > 1 && l.iter().filter(|x| *x == 0).count() > 1 {\n\
    \   |                                              ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return false;\n    }\n\n    let mut\
    \ low = l[0];\n    let mut high = l[0];\n    for &x in l {\n        high -= x;\n\
    \        if high < low {\n            return false;\n        }\n        low =\
    \ high;\n    }\n\n    l.iter().all(|x| *x == 0)\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgnblehf_.rs:21:9\n   |\n\
    21 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut first = l[0];\n    let mut last = l[0];\n\n    for v\
    \ in l.iter().rev() {\n        last += v;\n        if first != last {\n      \
    \      return true;\n        }\n        first = v;\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuaskb9du.rs:23:17\n   |\n\
    15 |     let mut first = l[0];\n   |                     ---- expected due to\
    \ this value\n...\n23 |         first = v;\n   |                 ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n23 |  \
    \       first = *v;\n   |                 +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut sum = 0;\n  \
    \  while i < l.len() && j < l.len() {\n        sum += l[i];\n        i += 1;\n\
    \        j += 1;\n        if sum == 0 {\n            return false;\n        }\n\
    \    }\n    return i != l.len();\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgznta8a0.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().windows(2).all(|&(a, b)| a == b).count() == l.len()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `windows` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpfqbrfdk3.rs:15:14\n   |\n15 |     l.iter().windows(2).all(|&(a,\
    \ b)| a == b).count() == l.len()\n   |              ^^^^^^^ method not found in\
    \ `std::slice::Iter<'_, isize>`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return false;\n    }\n    let mut curr\
    \ = l.len();\n    let mut sum = 0;\n    while curr > 0 {\n        sum += l.len()\
    \ - curr - 1;\n        curr = curr - 1;\n        if sum < 0 {\n            sum\
    \ = 0;\n        }\n    }\n    curr == 0 && sum == 0\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp7uhzqgyp.rs:21:16\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut min_sum = MAX_INT;\n    for i in l {\n        if i ==\
    \ 0 {\n            continue;\n        }\n        let cur = i + min_sum;\n    \
    \    if cur < 0 || cur > MAX_INT {\n            continue;\n        }\n       \
    \ min_sum = min(min_sum, cur);\n    }\n    min_sum < 0\n}\n\nfn main() {\n   \
    \ let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `MAX_INT` in this scope\n  --> /tmp/tmp4_mylo4a.rs:15:23\n\
    \   |\n15 |     let mut min_sum = MAX_INT;\n   |                       ^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `MAX_INT` in this\
    \ scope\n  --> /tmp/tmp4_mylo4a.rs:21:29\n   |\n21 |         if cur < 0 || cur\
    \ > MAX_INT {\n   |                             ^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp4_mylo4a.rs:24:19\n\
    \   |\n24 |         min_sum = min(min_sum, cur);\n   |                   ^^^\n\
    ...\n29 | fn main() {\n   | --------- similarly named function `main` defined\
    \ here\n   |\nhelp: a function with a similar name exists\n   |\n24 |        \
    \ min_sum = main(min_sum, cur);\n   |                   ~~~~\nhelp: consider importing\
    \ this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.len() >= 2 && l.rev().fold(false, |x, y| x + y > 0)\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp0zilaz_2.rs:15:23\n\
    \    |\n15  |       l.len() >= 2 && l.rev().fold(false, |x, y| x + y > 0)\n  \
    \  |                         ^^^ `Vec<isize>` is not an iterator\n    |\n    =\
    \ note: the following trait bounds were not satisfied:\n            `Vec<isize>:\
    \ Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n  \
    \          `[isize]: Iterator`\n            which is required by `&mut [isize]:\
    \ Iterator`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut seen = HashSet::new();\n    for i in l.iter() {\n   \
    \     if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n \
    \   assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpuzbn24w0.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum = 0;\n    for (i, x) in\n        l.iter().enumerate()\
    \ {\n        sum += x;\n        if sum < 0 {\n            return false;\n    \
    \    }\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpol3yd_u1.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(false, |acc, x| acc && acc + x <= 0)\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `&isize` to `bool`\n  --> /tmp/tmpuk7pbgbb.rs:15:46\n\
    \   |\n15 |     l.iter().fold(false, |acc, x| acc && acc + x <= 0)\n   |     \
    \                                     --- ^ - &isize\n   |                   \
    \                       |\n   |                                          bool\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut ans = false;\n    for i in l.iter().rev() {\n       \
    \ for j in l.iter().rev() {\n            if i + j == 0 {\n                ans\
    \ = true;\n            }\n        }\n    }\n    ans\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpk1tzv5bq.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut total = 0;\n    let mut last = 0;\n    let mut has_pairs\
    \ = false;\n\n    for &i in l {\n        if i == 0 {\n            continue;\n\
    \        }\n        if total + i > 0 {\n            total += i;\n            last\
    \ = i;\n        } else {\n            has_pairs = true;\n        }\n    }\n\n\
    \    has_pairs && has_pairs == last\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy86q_pwi.rs:19:9\n   |\n\
    19 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpy86q_pwi.rs:31:31\n   |\n31 |     has_pairs && has_pairs == last\n\
    \   |                               ^^^^ expected `bool`, found integer\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut hash: usize = 0;\n    let mut seen: HashSet<usize> =\
    \ HashSet::new();\n    for e in l {\n        seen.insert(e);\n        hash +=\
    \ e;\n    }\n    seen.len() == l.len() && seen.len() == 2 * l.len() - hash\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmph5pzdeob.rs:16:19\n\
    \   |\n16 |     let mut seen: HashSet<usize> = HashSet::new();\n   |         \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmph5pzdeob.rs:16:36\n\
    \   |\n16 |     let mut seen: HashSet<usize> = HashSet::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmph5pzdeob.rs:19:17\n   |\n19 |         hash +=\
    \ e;\n   |                 ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `usize`\n  --> /tmp/tmph5pzdeob.rs:19:14\n   |\n\
    19 |         hash += e;\n   |              ^^ no implementation for `usize +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0412, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut a = vec![];\n    let mut b = vec![];\n    let mut c =\
    \ vec![];\n    for i in l.iter() {\n        b.push(i);\n    }\n    for i in 0..(b.len()\
    \ - 1) {\n        if b[i] == 0 {\n            continue;\n        }\n        if\
    \ a[b[i]] == 1 {\n            continue;\n        }\n        c.push(b[i]);\n  \
    \      a.push(b[i]);\n    }\n    c.len() >= 2\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpmd3b2941.rs:22:17\n\
    \   |\n22 |         if b[i] == 0 {\n   |                 ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: the type `[_]` cannot\
    \ be indexed by `&isize`\n  --> /tmp/tmpmd3b2941.rs:25:12\n   |\n25 |        \
    \ if a[b[i]] == 1 {\n   |            ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut m = std::collections::hash_map::HashMap::new();\n   \
    \ for x in l {\n        if !m.contains_key(x) {\n            m.insert(x, 0);\n\
    \        }\n        m[x]++;\n    }\n\n    for x in m.keys() {\n        if m[x]\
    \ > 1 {\n            return true;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpgvcx1lhf.rs:20:13\n\
    \   |\n20 |         m[x]++;\n   |             ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n20 |         { let tmp = m[x]; m[x] +=\
    \ 1; tmp };\n   |         +++++++++++     ~~~~~~~~~~~~~~~~~~\n20 -         m[x]++;\n\
    20 +         m[x] += 1;\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgvcx1lhf.rs:17:28\n\
    \   |\n17 |         if !m.contains_key(x) {\n   |                            ^\n\
    \   |                            |\n   |                            expected reference,\
    \ found `isize`\n   |                            help: consider borrowing here:\
    \ `&x`\n   |\n   = note: expected reference `&_`\n                   found type\
    \ `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return false;\n    }\n    let mut first\
    \ = l[0];\n    let mut last = l[l..].iter().max().unwrap();\n    for &x in l[l..].iter()\
    \ {\n        if x+1 != last {\n            return false;\n        }\n        last\
    \ = x;\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `RangeFrom<Vec<isize>>`\n\
    \  --> /tmp/tmpbbmz7qu6.rs:19:20\n   |\n19 |     let mut last = l[l..].iter().max().unwrap();\n\
    \   |                    ^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `RangeFrom<Vec<isize>>`\n   = help: the following other types implement\
    \ trait `SliceIndex<T>`:\n             <RangeFrom<usize> as SliceIndex<[T]>>\n\
    \             <RangeFrom<usize> as SliceIndex<str>>\n   = note: required because\
    \ of the requirements on the impl of `Index<RangeFrom<Vec<isize>>>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `RangeFrom<Vec<isize>>`\n\
    \  --> /tmp/tmpbbmz7qu6.rs:20:15\n   |\n20 |     for &x in l[l..].iter() {\n \
    \  |               ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `RangeFrom<Vec<isize>>`\n\
    \   = help: the following other types implement trait `SliceIndex<T>`:\n     \
    \        <RangeFrom<usize> as SliceIndex<[T]>>\n             <RangeFrom<usize>\
    \ as SliceIndex<str>>\n   = note: required because of the requirements on the\
    \ impl of `Index<RangeFrom<Vec<isize>>>` for `Vec<isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |a, b| a && b && (a ^ b))\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplvjpdp0_.rs:15:37\n   |\n\
    15 |     l.iter().fold(true, |a, b| a && b && (a ^ b))\n   |                 \
    \                    ^ expected `bool`, found `&isize`\n\nerror[E0277]: no implementation\
    \ for `bool ^ &isize`\n  --> /tmp/tmplvjpdp0_.rs:15:45\n   |\n15 |     l.iter().fold(true,\
    \ |a, b| a && b && (a ^ b))\n   |                                            \
    \ ^ no implementation for `bool ^ &isize`\n   |\n   = help: the trait `BitXor<&isize>`\
    \ is not implemented for `bool`\n   = help: the following other types implement\
    \ trait `BitXor<Rhs>`:\n             <&'a bool as BitXor<bool>>\n            \
    \ <&bool as BitXor<&bool>>\n             <bool as BitXor<&bool>>\n           \
    \  <bool as BitXor<Mask<T, LANES>>>\n             <bool as BitXor>\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut j = 0;\n    for i in l.iter() {\n        for _ in 0..i[j].iter()\
    \ {\n            j += 1;\n            if i == 0 || j == 0 {\n                return\
    \ false;\n            }\n        }\n        j = 0;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `&isize`\n  --> /tmp/tmpinshtebb.rs:17:21\n\
    \   |\n17 |         for _ in 0..i[j].iter() {\n   |                     ^^^^\n\
    \nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpinshtebb.rs:19:18\n\
    \   |\n19 |             if i == 0 || j == 0 {\n   |                  ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    for i in l.iter().cloned() {\n        for j in l.iter().cloned()\
    \ {\n            if *i + j == 0 {\n                return true;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp53e06gla.rs:17:16\n\
    \   |\n17 |             if *i + j == 0 {\n   |                ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n\
    \    sum == 0 // True if there are no negative elements\n}\n\nfn main() {\n  \
    \  let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptklaw0j7.rs:16:9\n   |\n\
    16 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        return false;\n    }\n\n    let mut\
    \ n = 0;\n    let mut s = 0;\n    let mut max = l[0];\n    let mut i = 0;\n  \
    \  let mut j = 0;\n    let mut pair = true;\n    loop {\n        n += 1;\n   \
    \     s += l[i];\n        if n == 2 {\n            if s >= max {\n           \
    \     pair = false;\n                break;\n            }\n            max +=\
    \ 1;\n            s = 0;\n            i += 1;\n        }\n\n        if n == 4\
    \ {\n            if s == 0 {\n                pair = false;\n                break;\n\
    \            }\n            i += 1;\n            i += 1;\n            i += 1;\n\
    \        }\n        i += 1;\n        if j == l.len() {\n            break;\n \
    \       }\n        max = l[j];\n        s += l[i];\n        j += 1;\n    }\n \
    \   pair && n == l.len() && s == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpr56zbatx.rs:63:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // write your code here\n    let mut s = Vec::new();\n    l.iter().fold(0,\
    \ |c, &x| {\n        if x + c == 0 {\n            s.push(x);\n        }\n    \
    \    c\n    });\n    if s.len() != l.len() {\n        return false;\n    }\n \
    \   let mut i = 0;\n    for &x in l {\n        if x + s[i] != 0 {\n          \
    \  return false;\n        }\n        i += 1;\n    }\n    return true;\n}\n\nfn\
    \ main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpncam1kbn.rs:27:9\n   |\n\
    27 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut twos = 0;\n    for i in l {\n        if i == 0 {\n  \
    \          return false;\n        }\n        if twos == i {\n            return\
    \ true;\n        }\n        twos += i;\n    }\n    false\n}\n\nfn main() {\n \
    \   let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl3ucz05x.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    (l).is_sorted_by(|&x, &y| x.partial_cmp(y).is_none())\n     \
    \   && (l[..].iter().take_while(|&x| x < 0).count() == 0)\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0658]: use of unstable library feature 'is_sorted': new API\n  -->\
    \ /tmp/tmpzv3_ndek.rs:15:9\n   |\n15 |     (l).is_sorted_by(|&x, &y| x.partial_cmp(y).is_none())\n\
    \   |         ^^^^^^^^^^^^\n   |\n   = note: see issue #53485 <https://github.com/rust-lang/rust/issues/53485>\
    \ for more information\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzv3_ndek.rs:15:45\n\
    \   |\n15 |     (l).is_sorted_by(|&x, &y| x.partial_cmp(y).is_none())\n   |  \
    \                                           ^\n   |                          \
    \                   |\n   |                                             expected\
    \ `&isize`, found `isize`\n   |                                             help:\
    \ consider borrowing here: `&y`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzv3_ndek.rs:15:31\n\
    \   |\n15 |     (l).is_sorted_by(|&x, &y| x.partial_cmp(y).is_none())\n   |  \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found `bool`\n   |\n   = note: expected enum `Option<std::cmp::Ordering>`\n\
    \              found type `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzv3_ndek.rs:16:46\n\
    \   |\n16 |         && (l[..].iter().take_while(|&x| x < 0).count() == 0)\n  \
    \ |                                              ^\n   |                     \
    \                         |\n   |                                            \
    \  expected `&isize`, found integer\n   |                                    \
    \          help: consider borrowing here: `&0`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0658.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.len() <= 1\n        || (l.len() == 2 && l.iter().product().filter(|&x|\
    \ *x == 0).count() > 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpjme5df6_.rs:16:38\n\
    \   |\n16 |         || (l.len() == 2 && l.iter().product().filter(|&x| *x == 0).count()\
    \ > 0)\n   |                                      ^^^^^^^ cannot infer type for\
    \ type parameter `P` declared on the associated function `product`\n   |\n   =\
    \ note: type must be known at this point\nhelp: consider specifying the type argument\
    \ in the method call\n   |\n16 |         || (l.len() == 2 && l.iter().product::<P>().filter(|&x|\
    \ *x == 0).count() > 0)\n   |                                             +++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut i = l.iter().rev().collect::<Vec<_>>();\n    i.sort();\n\
    \    if i.len() == 1 {\n        return false;\n    }\n    let mut cnt = 0;\n \
    \   let mut prev_val = i[0] as isize;\n    for i in i {\n        cnt += *i;\n\
    \        if cnt == 0 {\n            return false;\n        }\n        if prev_val\
    \ == cnt as isize {\n            return false;\n        }\n        prev_val =\
    \ cnt;\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmpyreabsjn.rs:21:24\n\
    \   |\n21 |     let mut prev_val = i[0] as isize;\n   |                      \
    \  ----^^^^^^^^^\n   |                        |\n   |                        cannot\
    \ cast `&isize` as `isize`\n   |                        help: dereference the\
    \ expression: `*i[0]`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0606`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut n = 0;\n    for elt in l {\n        if n == 0 || elt\
    \ + n != 0 {\n            break;\n        }\n        n += 1;\n    }\n    n <=\
    \ 1\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpv3r8k4sq.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // Find out how many pairs to compare with zero\n    let mut\
    \ cnt = 0;\n    let mut pairs = 0;\n    for (i, _) in l.iter().enumerate() {\n\
    \        pairs += 1;\n        if l[i] == 0 {\n            cnt += 1;\n        }\n\
    \        if cnt > 1 {\n            break;\n        }\n    }\n\n    // if cnt ==\
    \ 1 then we have only one element in the list that sums to zero\n    return cnt\
    \ == 1;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp829_a80s.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n\
    \    sum == 0 && l.len() > 1\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpmodmwu2z.rs:19:17\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l {\n    |\
    \              - `l` moved due to this implicit call to `.into_iter()`\n...\n\
    19  |     sum == 0 && l.len() > 1\n    |                 ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n16  |     for x in &l {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |b, e| b && e == 0)\n}\n\nfn main() {\n \
    \   let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmppqw30sqz.rs:15:39\n\
    \   |\n15 |     l.iter().fold(true, |b, e| b && e == 0)\n   |                \
    \                       ^^ no implementation for `&isize == {integer}`\n   |\n\
    \   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(false, |acc, &x| acc + x == 0)\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `isize` to `bool`\n  --> /tmp/tmpu16ls1et.rs:15:40\n\
    \   |\n15 |     l.iter().fold(false, |acc, &x| acc + x == 0)\n   |           \
    \                         --- ^ - isize\n   |                                \
    \    |\n   |                                    bool\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut pair = Vec::new();\n    for i in 0..l.len() {\n     \
    \   pair += [(i, l[i])];\n    }\n    let mut pairs = pair.iter().distinct();\n\
    \    for pair in pairs {\n        if pair.1 == pair.0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<_>`\n  --> /tmp/tmpl7bbqw0s.rs:17:9\n   |\n17 |         pair += [(i, l[i])];\n\
    \   |         ----^^^^^^^^^^^^^^^\n   |         |\n   |         cannot use `+=`\
    \ on type `Vec<_>`\n\nerror[E0599]: no method named `distinct` found for struct\
    \ `std::slice::Iter` in the current scope\n  --> /tmp/tmpl7bbqw0s.rs:19:33\n \
    \  |\n19 |     let mut pairs = pair.iter().distinct();\n   |                 \
    \                ^^^^^^^^ method not found in `std::slice::Iter<'_, _>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0368, E0599.\nFor more information about an error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut pairs = l.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut i = 0;\n\n    while i < pairs.len() {\n        if pairs[i + 2] > 0 {\n \
    \           i += 3;\n        } else {\n            i += 1;\n        }\n    }\n\
    \n    i < pairs.len() && pairs[i] == 0\n}\n\nfn main() {\n    let candidate =\
    \ pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n  \
    \  assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 4 but the index\
    \ is 5', /tmp/tmppeab7v3t.rs:19:12\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum_minus_two = l[0];\n    let mut sum_minus_one = l[0];\n\
    \    for el in l {\n        if el > 0 {\n            if el < sum_minus_two {\n\
    \                sum_minus_two = el;\n            } else {\n                sum_minus_one\
    \ = el;\n            }\n        }\n    }\n    if sum_minus_one == 0 { true } else\
    \ { false }\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp141jazv4.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.rev().iter().pairs().any(|(_, left)| l.iter().any(|right| left\
    \ < right && left - right == 0))\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpsdm49f75.rs:15:7\n\
    \    |\n15  |       l.rev().iter().pairs().any(|(_, left)| l.iter().any(|right|\
    \ left < right && left - right == 0))\n    |         ^^^ `Vec<isize>` is not an\
    \ iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(false, |acc, x| acc && x == 0 || pairs(l).contains(&(x,\
    \ 0)))\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `pairs` in this scope\n  --> /tmp/tmpd4xe5rw3.rs:15:52\n\
    \   |\n15 |     l.iter().fold(false, |acc, x| acc && x == 0 || pairs(l).contains(&(x,\
    \ 0)))\n   |                                                    ^^^^^ not found\
    \ in this scope\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  -->\
    \ /tmp/tmpd4xe5rw3.rs:15:44\n   |\n15 |     l.iter().fold(false, |acc, x| acc\
    \ && x == 0 || pairs(l).contains(&(x, 0)))\n   |                             \
    \               ^^ no implementation for `&isize == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut seen = HashSet::new();\n    for i in l {\n        if\
    \ seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n \
    \   assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpyj0ak528.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut is_sum_to_zero = false;\n    let mut pairs = 0;\n\n \
    \   for ele in l {\n        if ele == 0 {\n            is_sum_to_zero = true;\n\
    \            pairs += 1;\n        } else {\n            if pairs > 1 {\n     \
    \           is_sum_to_zero = is_sum_to_zero && ele == 0;\n            }\n    \
    \        pairs = 0;\n        }\n    }\n\n    is_sum_to_zero\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzfdtiwuk.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut j = 0;\n    for k in l.iter().rev() {\n        if k ==\
    \ 0 {\n            return false;\n        }\n        if j + k > 0 {\n        \
    \    if *j + k != *k {\n                return false;\n            }\n       \
    \     j = k;\n        } else {\n            j = k;\n        }\n    }\n    return\
    \ true;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpb5kk_f7l.rs:17:14\n\
    \   |\n17 |         if k == 0 {\n   |              ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0614]: type `isize` cannot be dereferenced\n  -->\
    \ /tmp/tmpb5kk_f7l.rs:21:16\n   |\n21 |             if *j + k != *k {\n   |  \
    \              ^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb5kk_f7l.rs:24:17\n\
    \   |\n15 |     let mut j = 0;\n   |                 - expected due to this value\n\
    ...\n24 |             j = k;\n   |                 ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n24 |             j = *k;\n\
    \   |                 +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb5kk_f7l.rs:26:17\n\
    \   |\n15 |     let mut j = 0;\n   |                 - expected due to this value\n\
    ...\n26 |             j = k;\n   |                 ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n26 |             j = *k;\n\
    \   |                 +\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l == l.iter().cloned().collect::<Vec<_>>().into_iter().count(|x|\
    \ x == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpf1x3krtk.rs:15:60\n    |\n15  |     l == l.iter().cloned().collect::<Vec<_>>().into_iter().count(|x|\
    \ x == 0)\n    |                                                            ^^^^^\
    \ ---------- supplied 1 argument\n    |                                      \
    \                      |\n    |                                              \
    \              expected 0 arguments\n    |\nnote: associated function defined\
    \ here\n\nerror[E0277]: can't compare `Vec<isize>` with `usize`\n  --> /tmp/tmpf1x3krtk.rs:15:7\n\
    \   |\n15 |     l == l.iter().cloned().collect::<Vec<_>>().into_iter().count(|x|\
    \ x == 0)\n   |       ^^ no implementation for `Vec<isize> == usize`\n   |\n \
    \  = help: the trait `PartialEq<usize>` is not implemented for `Vec<isize>`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n             <Vec<T, A> as PartialEq<&[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n             <Vec<T, A> as\
    \ PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U; N]>>\n      \
    \       <Vec<T, A> as PartialEq<[U]>>\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0277.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return false;\n    }\n    let mut\
    \ i = 0;\n    let mut j = 1;\n    while i < l.len() && j < l.len() {\n       \
    \ if l[j] + l[i] == 0 {\n            i += 1;\n        }\n        else {\n    \
    \        j += 1;\n        }\n    }\n    j == l.len()\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_itj6ay7.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 2 {\n        return false;\n    }\n\n    for i\
    \ in l.iter().rev() {\n        let prev = i - 1;\n\n        if *prev < 0 {\n \
    \           return false;\n        }\n\n        if *prev == i {\n            return\
    \ true;\n        }\n    }\n\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpjpmlyruv.rs:22:12\n\
    \   |\n22 |         if *prev < 0 {\n   |            ^^^^^\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n  --> /tmp/tmpjpmlyruv.rs:26:12\n   |\n26 |\
    \         if *prev == i {\n   |            ^^^^^\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut pairs: HashMap<_, _> = HashMap::new();\n    for &x in\
    \ l {\n        pairs.insert(x, x);\n    }\n    pairs.is_empty()\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n  --> /tmp/tmprfwtb9g3.rs:15:20\n\
    \   |\n15 |     let mut pairs: HashMap<_, _> = HashMap::new();\n   |         \
    \           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n  --> /tmp/tmprfwtb9g3.rs:15:36\n\
    \   |\n15 |     let mut pairs: HashMap<_, _> = HashMap::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprfwtb9g3.rs:16:9\n   |\n16 |     for &x in l\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `x`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0412, E0433.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(false, |x, y| x || y + x == 0)\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `bool` to `&isize`\n  --> /tmp/tmpq46iejmg.rs:15:40\n\
    \   |\n15 |     l.iter().fold(false, |x, y| x || y + x == 0)\n   |           \
    \                             ^ no implementation for `&isize + bool`\n   |\n\
    \   = help: the trait `Add<bool>` is not implemented for `&isize`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(true, |acc, x| acc && acc == sum_to_zero(x))\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sum_to_zero` in this scope\n  --> /tmp/tmp2h3uw8rp.rs:15:48\n\
    \   |\n15 |     l.iter().fold(true, |acc, x| acc && acc == sum_to_zero(x))\n \
    \  |                                                ^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.len() > 1 &&\n    l.iter().fold(false, |a, b| b && a + b ==\
    \ 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf8y56iyw.rs:16:33\n   |\n\
    16 |     l.iter().fold(false, |a, b| b && a + b == 0)\n   |                  \
    \               ^ expected `bool`, found `&isize`\n\nerror[E0369]: cannot add\
    \ `&isize` to `bool`\n  --> /tmp/tmpf8y56iyw.rs:16:40\n   |\n16 |     l.iter().fold(false,\
    \ |a, b| b && a + b == 0)\n   |                                      - ^ - &isize\n\
    \   |                                      |\n   |                           \
    \           bool\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0369.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut has_pair = false;\n    let mut seen = HashSet::new();\n\
    \n    for n in l {\n        if seen.contains(&n) && has_pair {\n            return\
    \ true;\n        }\n        if seen.insert(n).is_some() {\n            has_pair\
    \ = true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n  \
    \  assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp109g_7bh.rs:16:20\n   |\n16 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut is_pair = false;\n    let mut max_value = 0;\n    for\
    \ (i, el) in l.iter().enumerate() {\n        if el > 0 {\n            if max_value\
    \ < el {\n                max_value = el;\n                is_pair = true;\n \
    \           }\n        } else {\n            if max_value < 0 {\n            \
    \    max_value = 0;\n                is_pair = true;\n            }\n        }\n\
    \    }\n    is_pair\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7i508685.rs:18:17\n   |\n\
    18 |         if el > 0 {\n   |                 ^\n   |                 |\n   |\
    \                 expected `&isize`, found integer\n   |                 help:\
    \ consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7i508685.rs:20:29\n\
    \   |\n16 |     let mut max_value = 0;\n   |                         - expected\
    \ due to this value\n...\n20 |                 max_value = el;\n   |         \
    \                    ^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n20 |                 max_value = *el;\n   |\
    \                             +\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \  --> /tmp/tmp7i508685.rs:19:26\n   |\n19 |             if max_value < el {\n\
    \   |                          ^ no implementation for `isize < &isize` and `isize\
    \ > &isize`\n   |\n   = help: the trait `PartialOrd<&isize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `PartialOrd<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut a = l.iter().cloned().collect::<Vec<_>>();\n    let mut\
    \ b = a.clone();\n    b.sort_unstable();\n    let mut sum = 0;\n    while a.len()\
    \ > 0 {\n        let i = a.len() - 1;\n        sum += a[i];\n        a.remove(i);\n\
    \        let j = b.len() - 1;\n        sum += b[j];\n        b.remove(j);\n  \
    \      if sum == 0 {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpv9lnnfxi.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l\n        .iter()\n        .fold(false, |b, a| b.unwrap_or(a\
    \ > 0))\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap_or` found for type `bool` in the\
    \ current scope\n  --> /tmp/tmpmvtzeriy.rs:17:31\n   |\n17 |         .fold(false,\
    \ |b, a| b.unwrap_or(a > 0))\n   |                               ^^^^^^^^^ method\
    \ not found in `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmvtzeriy.rs:17:45\n\
    \   |\n17 |         .fold(false, |b, a| b.unwrap_or(a > 0))\n   |            \
    \                                 ^\n   |                                    \
    \         |\n   |                                             expected `&isize`,\
    \ found integer\n   |                                             help: consider\
    \ borrowing here: `&0`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut j = 0;\n    for pair in l {\n        j += pair;\n   \
    \     j -= pair;\n        if j != 0 {\n            return false;\n        }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n \
    \   assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptn0jsrgv.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut seen = HashSet::new();\n    \n    for i in l {\n    \
    \    if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n \
    \   assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpxiu1r3qf.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut min_pair = vec![vec![]; 2];\n    for a in l {\n     \
    \   let mut b = vec![];\n        for b in min_pair[0].iter_mut() {\n         \
    \   *b += a;\n        }\n        min_pair[0] = b;\n    }\n    min_pair[0][0] ==\
    \ min_pair[0][1]\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n \
    \   assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed for `&mut T`\n  --> /tmp/tmp7d3zor8w.rs:15:29\n\
    \   |\n15 |     let mut min_pair = vec![vec![]; 2];\n   |         ------------\
    \        ^^^^^^ cannot infer type for type parameter `T`\n   |         |\n   |\
    \         consider giving `min_pair` the explicit type `&mut T`, where the type\
    \ parameter `T` is specified\n   |\n   = note: this error originates in the macro\
    \ `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    for i in l.iter().enumerate() {\n        let mut j = 0;\n   \
    \     match i {\n            (i, _) => { continue },\n            (_, i) => {\
    \ j = i; continue },\n        }\n        if l[i] - l[j] != 0 {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfxvh1xro.rs:19:29\n   |\n\
    16 |         let mut j = 0;\n   |                     - expected due to this value\n\
    ...\n19 |             (_, i) => { j = i; continue },\n   |                   \
    \          ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n19 |             (_, i) => { j = *i; continue },\n   |   \
    \                          +\n\nwarning: unreachable expression\n  --> /tmp/tmpfxvh1xro.rs:21:9\n\
    \   |\n17 | /         match i {\n18 | |             (i, _) => { continue },\n\
    19 | |             (_, i) => { j = i; continue },\n20 | |         }\n   | |_________-\
    \ any code following this `match` expression is unreachable, as all arms diverge\n\
    21 | /         if l[i] - l[j] != 0 {\n22 | |             return false;\n23 | |\
    \         }\n   | |_________^ unreachable expression\n   |\n   = note: `#[warn(unreachable_code)]`\
    \ on by default\n\nerror[E0277]: the type `[isize]` cannot be indexed by `(usize,\
    \ &isize)`\n  --> /tmp/tmpfxvh1xro.rs:21:12\n   |\n21 |         if l[i] - l[j]\
    \ != 0 {\n   |            ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `(usize, &isize)`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `(Bound<usize>, Bound<usize>)`\n   = note: required because of the requirements\
    \ on the impl of `Index<(usize, &isize)>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 2 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l\n        .iter()\n        .zip(l.iter().skip(1))\n        .all(|(a,\
    \ b)| a + b == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3t4cpqek.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum = 0;\n    let mut last_pair: Option<(isize, isize)>\
    \ = None;\n    for el in l.iter() {\n        sum += el;\n        last_pair = Some((sum,\
    \ el));\n    }\n    sum == 0 && last_pair.is_none()\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8esyh6dd.rs:19:32\n   |\n\
    19 |         last_pair = Some((sum, el));\n   |                              \
    \  ^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n19 |         last_pair = Some((sum, *el));\n   |             \
    \                   +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut i = l.len() - 1;\n    let mut j = l.len() - 1;\n    let\
    \ mut sum = 0;\n    loop {\n        if i == j {\n            break;\n        }\n\
    \        if l[i] == l[j] {\n            sum += l[i];\n            i -= 1;\n  \
    \          j -= 1;\n        } else if l[i] > l[j] {\n            i -= 1;\n   \
    \     } else {\n            j -= 1;\n        }\n        if sum != 0 {\n      \
    \      return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnodkm_fv.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut sum = 0;\n  \
    \  let mut pairs = vec![];\n    while i < l.len() && j < l.len() {\n        if\
    \ l[j] + l[i] == 0 {\n            pairs.push(l[j]);\n            i += 1;\n   \
    \         j += 1;\n        } else {\n            sum += l[j];\n            i +=\
    \ 1;\n        }\n    }\n    if pairs.len() == 0 {\n        return true;\n    }\n\
    \    if sum == 0 {\n        return false;\n    }\n    // If the current sum is\
    \ greater than zero, there must exist one zero\n    // and the remaining sum.\n\
    \    for pair in pairs {\n        if pair > 0 {\n            if sum == pair {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnaevdjeh.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut curr = l.iter().enumerate().map(|(idx, el)| {\n     \
    \   if idx == 0 {\n            el\n        } else {\n            let tmp = el\
    \ - curr.next().unwrap().0;\n            if tmp < 0 {\n                curr\n\
    \            } else {\n                false\n            }\n        }\n    }).collect::<Vec<_>>();\n\
    \    curr.dedup().is_empty()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `curr` in this scope\n  --> /tmp/tmpammi5n6o.rs:19:28\n\
    \   |\n19 |             let tmp = el - curr.next().unwrap().0;\n   |         \
    \                   ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `curr` in this scope\n  --> /tmp/tmpammi5n6o.rs:21:17\n   |\n21 |    \
    \             curr\n   |                 ^^^^ not found in this scope\n\nerror[E0599]:\
    \ no method named `is_empty` found for unit type `()` in the current scope\n \
    \ --> /tmp/tmpammi5n6o.rs:27:18\n   |\n27 |     curr.dedup().is_empty()\n   |\
    \                  ^^^^^^^^ method not found in `()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut map: HashMap<isize, isize> = HashMap::new();\n\n    for\
    \ &i in l {\n        map.entry(i).or_default() = 0;\n    }\n\n    for (key, val)\
    \ in map.into_iter().filter_map(|(k, v)| *v == 0).cloned().into_iter() {\n   \
    \     if *val != 0 {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n  --> /tmp/tmp3lzfngu_.rs:15:18\n\
    \   |\n15 |     let mut map: HashMap<isize, isize> = HashMap::new();\n   |   \
    \               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n  --> /tmp/tmp3lzfngu_.rs:15:42\n\
    \   |\n15 |     let mut map: HashMap<isize, isize> = HashMap::new();\n   |   \
    \                                       ^^^^^^^ not found in this scope\n   |\n\
    help: consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3lzfngu_.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0070]: invalid left-hand\
    \ side of assignment\n  --> /tmp/tmp3lzfngu_.rs:18:35\n   |\n18 |         map.entry(i).or_default()\
    \ = 0;\n   |         ------------------------- ^\n   |         |\n   |       \
    \  cannot assign to this expression\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0070, E0308, E0412, E0433.\nFor more\
    \ information about an error, try `rustc --explain E0070`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().map(|x| x.to_owned()).zip(0..).all(|(a, b)| a != b)\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptp2kyw7a.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut curr = l[0];\n    for &i in l[1..].iter().rev() {\n \
    \       let n = i - curr;\n        if n != 0 && n % n == 0 {\n            curr\
    \ += n;\n        } else {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1v1o_5vf.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().zip(l.iter().skip(1)).all(|(a, b)| *a + b == 0)\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpidccw72i.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    for i in l.iter() {\n        for j in l.iter() {\n          \
    \  if i == j && i != 0 && j != 0 && i != j {\n                return false;\n\
    \            }\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpgji7d7a2.rs:17:28\n\
    \   |\n17 |             if i == j && i != 0 && j != 0 && i != j {\n   |      \
    \                      ^^ no implementation for `&isize == {integer}`\n   |\n\
    \   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  -->\
    \ /tmp/tmpgji7d7a2.rs:17:38\n   |\n17 |             if i == j && i != 0 && j !=\
    \ 0 && i != j {\n   |                                      ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n\n    let mut\
    \ sum_l = 0;\n    for &i in l {\n        sum_l += i;\n    }\n\n    let mut sum_r\
    \ = *l.iter().rnext();\n    for &i in l {\n        if i == 0 {\n            continue;\n\
    \        }\n        if sum_r == i {\n            return false;\n        }\n  \
    \      sum_r -= i;\n    }\n\n    return true;\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2a8bnkr1.rs:20:9\n   |\n\
    20 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0599]: no method named\
    \ `rnext` found for struct `std::slice::Iter` in the current scope\n  --> /tmp/tmp2a8bnkr1.rs:24:31\n\
    \   |\n24 |     let mut sum_r = *l.iter().rnext();\n   |                     \
    \          ^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2a8bnkr1.rs:25:9\n   |\n25 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    for i in l.iter() {\n        let j = (i + 1);\n        let mut\
    \ ans = 0;\n        ans += i;\n        for j in l.iter() {\n            ans +=\
    \ j;\n            if ans == 0 {\n                return false;\n            }\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp04ua8prl.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().fold(false, |mut a, &i| {\n        if *a > 0 && *a.checked_sub(*i)\
    \ == 0 {\n            a.swap(*i);\n            true\n        } else {\n      \
    \      a\n        }\n    })\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `bool` cannot be dereferenced\n  --> /tmp/tmprcg9gbnq.rs:16:12\n\
    \   |\n16 |         if *a > 0 && *a.checked_sub(*i) == 0 {\n   |            ^^\n\
    \nerror[E0599]: no method named `checked_sub` found for type `bool` in the current\
    \ scope\n  --> /tmp/tmprcg9gbnq.rs:16:25\n   |\n16 |         if *a > 0 && *a.checked_sub(*i)\
    \ == 0 {\n   |                         ^^^^^^^^^^^ method not found in `bool`\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmprcg9gbnq.rs:16:37\n\
    \   |\n16 |         if *a > 0 && *a.checked_sub(*i) == 0 {\n   |             \
    \                        ^^\n\nerror[E0599]: no method named `swap` found for\
    \ type `bool` in the current scope\n  --> /tmp/tmprcg9gbnq.rs:17:15\n   |\n17\
    \ |             a.swap(*i);\n   |               ^^^^ method not found in `bool`\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmprcg9gbnq.rs:17:20\n\
    \   |\n17 |             a.swap(*i);\n   |                    ^^\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0599, E0614.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum_pairs = 0usize;\n    for pair in l.iter().cloned()\
    \ {\n        sum_pairs += pair;\n    }\n    if sum_pairs == 0 {\n        return\
    \ false;\n    }\n    let mut sum_pairs_upto_zero = 0usize;\n    for pair in l.iter().cloned()\
    \ {\n        if pair > 0 {\n            sum_pairs_upto_zero += pair;\n       \
    \     if sum_pairs_upto_zero > sum_pairs {\n                return true;\n   \
    \         }\n        } else {\n            if sum_pairs_upto_zero >= sum_pairs\
    \ {\n                return false;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf8l0_05j.rs:17:22\n   |\n\
    17 |         sum_pairs += pair;\n   |                      ^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmpf8l0_05j.rs:17:19\n\
    \   |\n17 |         sum_pairs += pair;\n   |                   ^^ no implementation\
    \ for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf8l0_05j.rs:25:36\n\
    \   |\n25 |             sum_pairs_upto_zero += pair;\n   |                   \
    \                 ^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `usize`\n  --> /tmp/tmpf8l0_05j.rs:25:33\n   |\n25 | \
    \            sum_pairs_upto_zero += pair;\n   |                              \
    \   ^^ no implementation for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut has_pair = false;\n    for &x in l {\n        for &y\
    \ in l {\n            if x == y {\n                continue;\n            }\n\
    \            if x + y == 0 {\n                has_pair = true;\n             \
    \   break;\n            }\n        }\n        if has_pair {\n            break;\n\
    \        }\n    }\n    has_pair\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2l549efx.rs:16:9\n   |\n\
    16 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2l549efx.rs:17:13\n   |\n17 |         for &y in l {\n   |     \
    \        ^^    - this expression has type `Option<isize>`\n   |             |\n\
    \   |             expected `isize`, found reference\n   |             help: you\
    \ can probably remove the explicit borrow: `y`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut first = l.iter().next();\n    let mut second = l.iter().next();\n\
    \    loop {\n        if second == 0 {\n            return false;\n        }\n\
    \        if first + second != 0 {\n            return false;\n        }\n    \
    \    if !l.contains(first) {\n            break;\n        }\n        first = l.iter().next();\n\
    \        second = l.iter().next();\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkjts1f0n.rs:18:22\n   |\n\
    18 |         if second == 0 {\n   |                      ^ expected enum `Option`,\
    \ found integer\n   |\n   = note: expected enum `Option<&isize>`\n           \
    \   found type `{integer}`\n\nerror[E0369]: cannot add `Option<&isize>` to `Option<&isize>`\n\
    \  --> /tmp/tmpkjts1f0n.rs:21:18\n   |\n21 |         if first + second != 0 {\n\
    \   |            ----- ^ ------ Option<&isize>\n   |            |\n   |      \
    \      Option<&isize>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkjts1f0n.rs:24:24\n\
    \   |\n24 |         if !l.contains(first) {\n   |                        ^^^^^\
    \ expected `&isize`, found enum `Option`\n   |\n   = note: expected reference\
    \ `&isize`\n                   found enum `Option<&isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut seen = HashSet::new();\n    for i in l {\n        if\
    \ seen.contains(i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n \
    \   assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp2nw7bblq.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // Check all pairs of numbers for pairs that sum to zero\n  \
    \  for pair in l.iter().zip(l.iter().skip(1))\n        .filter(|(a, b)| a + b\
    \ == 0)\n    {\n        let (a0, a1) = *pair;\n        if a0 < a1 {\n        \
    \    return false;\n        }\n    }\n    // If there is no pair that sums to\
    \ zero, return true\n    return true;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `&&isize` to `&&isize`\n  --> /tmp/tmp724_76n8.rs:17:28\n\
    \   |\n17 |         .filter(|(a, b)| a + b == 0)\n   |                       \
    \   - ^ - &&isize\n   |                          |\n   |                     \
    \     &&isize\n\nerror[E0614]: type `(&isize, &isize)` cannot be dereferenced\n\
    \  --> /tmp/tmp724_76n8.rs:19:24\n   |\n19 |         let (a0, a1) = *pair;\n \
    \  |                        ^^^^^\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0369, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum = 0;\n    let mut ans = false;\n    for (i, _) in\
    \ l.iter().enumerate() {\n        if sum == 0 {\n            if i != 0 {\n   \
    \             ans = true;\n            }\n        } else {\n            sum +=\
    \ i;\n            if sum == 0 {\n                if i != 0 {\n               \
    \     ans = true;\n                }\n            }\n        }\n    }\n    ans\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgf79acdk.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n        if\
    \ seen.contains(&i) {\n            return true;\n        }\n        seen.insert(i);\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp9shuaiue.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9shuaiue.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    l.iter().cloned().combinations(2).all(|(a, b)| a + b == 0)\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `combinations` found for struct `Cloned`\
    \ in the current scope\n  --> /tmp/tmpfmn4il7h.rs:15:23\n   |\n15 |     l.iter().cloned().combinations(2).all(|(a,\
    \ b)| a + b == 0)\n   |                       ^^^^^^^^^^^^ method not found in\
    \ `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    if l.len() < 2 {\n        true\n    } else {\n        let mut\
    \ i = 0;\n        let mut j = 0;\n        while j < l.len() && i < l.len() {\n\
    \            if l[i] + l[j] != 0 {\n                return false;\n          \
    \  }\n            i += 1;\n            j += 1;\n        }\n        true\n    }\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7eecmk9r.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut pairs = Vec::new();\n    for (i, j) in l.iter().rev().zip(0..l.len()\
    \ - 1) {\n        if i + 1 < l.len() && j + 1 < l.len() {\n            if l[i]\
    \ + l[j] == 0 {\n                pairs.push(std::pair(i, j));\n            }\n\
    \        }\n    }\n    pairs.len() <= 2\n}\n\nfn main() {\n    let candidate =\
    \ pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n  \
    \  assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `pair` in crate `std`\n  --> /tmp/tmperx53u2v.rs:19:33\n\
    \   |\n19 |                 pairs.push(std::pair(i, j));\n   |               \
    \                  ^^^^ not found in `std`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmperx53u2v.rs:17:20\n   |\n17 |         if i + 1 < l.len() && j +\
    \ 1 < l.len() {\n   |                    ^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n17 |         if i + 1 < l.len().try_into().unwrap()\
    \ && j + 1 < l.len() {\n   |                           ++++++++++++++++++++\n\n\
    error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmperx53u2v.rs:18:16\n\
    \   |\n18 |             if l[i] + l[j] == 0 {\n   |                ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut zeros = Vec::with_capacity(l.len() / 2);\n    let mut\
    \ s = vec![0; l.len()];\n    for &i in l {\n        if i > 0 {\n            let\
    \ mut j = i / 2;\n            while j > 0 {\n                if s[j] > 0 && (s[j]\
    \ % 2) == 0 {\n                    zeros.push(j);\n                    break;\n\
    \                } else {\n                    s -= vec![s[j / 2]; s[j / 2]];\n\
    \                    j -= 1;\n                }\n            }\n        }\n  \
    \      s[j] = i;\n    }\n    for &i in &zeros {\n        if i != 0 && s[i / 2]\
    \ != 0 {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `j` in this scope\n  --> /tmp/tmpzy1hi6db.rs:30:11\n\
    \   |\n30 |         s[j] = i;\n   |           ^ help: a local variable with a\
    \ similar name exists: `i`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzy1hi6db.rs:17:9\n\
    \   |\n17 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0368]: binary assignment\
    \ operation `-=` cannot be applied to type `Vec<{integer}>`\n  --> /tmp/tmpzy1hi6db.rs:25:21\n\
    \   |\n25 |                     s -= vec![s[j / 2]; s[j / 2]];\n   |         \
    \            -^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                     |\n   | \
    \                    cannot use `-=` on type `Vec<{integer}>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0368,\
    \ E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut i = 0;\n    for j in l.iter() {\n        i += j;\n  \
    \      if i == 0 {\n            return true;\n        }\n    }\n    false\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbac1asah.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut s = std::mem::zeroed();\n    pairs_sum_to_zero(l.iter(),\
    \ &mut s);\n    s == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \  --> /tmp/tmpm364k2qt.rs:16:5\n   |\n16 |     pairs_sum_to_zero(l.iter(), &mut\
    \ s);\n   |     ^^^^^^^^^^^^^^^^^ --------  ------ supplied 2 arguments\n   |\
    \     |\n   |     expected 1 argument\n   |\nnote: function defined here\n  -->\
    \ /tmp/tmpm364k2qt.rs:14:4\n   |\n14 | fn pairs_sum_to_zero(l: Vec<isize>) ->\
    \ bool {\n   |    ^^^^^^^^^^^^^^^^^ -------------\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    (&l as &[isize]).iter().fold(false, |mut acc, x| {\n        acc\
    \ && x.iter().fold(false, |mut acc, y| acc + *y != 0);\n        acc\n    });\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmp0nqr7a7r.rs:16:18\n   |\n16 |         acc && x.iter().fold(false,\
    \ |mut acc, y| acc + *y != 0);\n   |                  ^^^^ method not found in\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0nqr7a7r.rs:14:40\n\
    \   |\n14 | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n   |    -----------------\
    \                   ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n...\n18 |     });\n\
    \   |       - help: remove this semicolon\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut twos = 0\n    let mut threes = 0\n    let mut fours =\
    \ 0\n    let mut fives = 0\n    let mut sixes = 0\n    let mut sevens = 0\n  \
    \  let mut eights = 0\n    let mut nines = 0\n    for &x in l {\n        if x\
    \ % 2 == 0 {\n            twos += x;\n        } else if x % 3 == 0 {\n       \
    \     threes += x;\n        } else if x % 4 == 0 {\n            fours += x;\n\
    \        } else if x % 5 == 0 {\n            fives += x;\n        } else if x\
    \ % 6 == 0 {\n            sixes += x;\n        } else if x % 7 == 0 {\n      \
    \      sevens += x;\n        } else if x % 8 == 0 {\n            eights += x;\n\
    \        } else if x % 9 == 0 {\n            nines += x;\n        }\n    }\n \
    \   (twos % 2 == 0) == (threes % 2 == 0) == (fours % 2 == 0) == (fives % 2 ==\
    \ 0) == (sixes % 2 == 0) == (sevens % 2 == 0) == (eights % 2 == 0) == (nines %\
    \ 2 == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpobxm82bd.rs:15:21\n\
    \   |\n15 |     let mut twos = 0\n   |                     ^ help: add `;` here\n\
    16 |     let mut threes = 0\n   |     --- unexpected token\n\nerror: expected\
    \ `;`, found keyword `let`\n  --> /tmp/tmpobxm82bd.rs:16:23\n   |\n16 |     let\
    \ mut threes = 0\n   |                       ^ help: add `;` here\n17 |     let\
    \ mut fours = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword\
    \ `let`\n  --> /tmp/tmpobxm82bd.rs:17:22\n   |\n17 |     let mut fours = 0\n \
    \  |                      ^ help: add `;` here\n18 |     let mut fives = 0\n \
    \  |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  -->\
    \ /tmp/tmpobxm82bd.rs:18:22\n   |\n18 |     let mut fives = 0\n   |          \
    \            ^ help: add `;` here\n19 |     let mut sixes = 0\n   |     --- unexpected\
    \ token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpobxm82bd.rs:19:22\n\
    \   |\n19 |     let mut sixes = 0\n   |                      ^ help: add `;` here\n\
    20 |     let mut sevens = 0\n   |     --- unexpected token\n\nerror: expected\
    \ `;`, found keyword `let`\n  --> /tmp/tmpobxm82bd.rs:20:23\n   |\n20 |     let\
    \ mut sevens = 0\n   |                       ^ help: add `;` here\n21 |     let\
    \ mut eights = 0\n   |     --- unexpected token\n\nerror: expected `;`, found\
    \ keyword `let`\n  --> /tmp/tmpobxm82bd.rs:21:23\n   |\n21 |     let mut eights\
    \ = 0\n   |                       ^ help: add `;` here\n22 |     let mut nines\
    \ = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n\
    \  --> /tmp/tmpobxm82bd.rs:22:22\n   |\n22 |     let mut nines = 0\n   |     \
    \                 ^ help: add `;` here\n23 |     for &x in l {\n   |     --- unexpected\
    \ token\n\nerror: comparison operators cannot be chained\n  --> /tmp/tmpobxm82bd.rs:42:21\n\
    \   |\n42 |     (twos % 2 == 0) == (threes % 2 == 0) == (fours % 2 == 0) == (fives\
    \ % 2 == 0) == (sixes % 2 == 0) == (sevens % 2 == 0) == (eights % 2 ...\n   |\
    \                     ^^                   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n42 |     (twos % 2 == 0) == (threes % 2 ="
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut prev_zero = false;\n    for &e in l.iter() {\n      \
    \  if e == 0 {\n            if prev_zero {\n                return false;\n  \
    \          }\n            prev_zero = true;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpi6laqm19.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    (0..l.len()).all(|i| l.iter().any(|j| j + i != 0))\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb5h4dpnu.rs:15:47\n   |\n\
    15 |     (0..l.len()).all(|i| l.iter().any(|j| j + i != 0))\n   |            \
    \                                   ^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot add `usize` to `&isize`\n  --> /tmp/tmpb5h4dpnu.rs:15:45\n   |\n15 |\
    \     (0..l.len()).all(|i| l.iter().any(|j| j + i != 0))\n   |               \
    \                              ^ no implementation for `&isize + usize`\n   |\n\
    \   = help: the trait `Add<usize>` is not implemented for `&isize`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut j = 0;\n    for i in l {\n        j += i;\n        if\
    \ j == 0 {\n            return true;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptot3c8no.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut prev_sum = 0;\n    let mut next_sum = 0;\n\n    for (ii,\
    \ elt) in l.iter().enumerate() {\n        prev_sum += elt;\n        next_sum +=\
    \ elt;\n\n        if prev_sum == 0 {\n            if next_sum == 0 {\n       \
    \         return true;\n            }\n        }\n\n        if next_sum == 0 {\n\
    \            return false;\n        }\n    }\n\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8vfazbwd.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
