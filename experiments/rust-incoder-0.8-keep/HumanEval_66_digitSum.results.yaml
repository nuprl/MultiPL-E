name: HumanEval_66_digitSum
language: rust
results:
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = match s.len() {\n        0 => 0,\n        1 => 0,\n        2 => 0,\n \
    \       _ => {\n            let mut num = 0;\n            for &c in s.chars()\
    \ {\n                num = if c >= 'a' && c <= 'z' { num + 10 } else { num + c\
    \ };\n            }\n            num + (s.len() - s.chars().count())\n       \
    \ }\n    };\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpygycmetg.rs:18:17\n   |\n\
    18 |             for &c in s.chars() {\n   |                 ^^    --------- this\
    \ expression has type `Option<char>`\n   |                 |\n   |           \
    \      expected `char`, found reference\n   |                 help: you can probably\
    \ remove the explicit borrow: `c`\n   |\n   = note:   expected type `char`\n \
    \          found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpygycmetg.rs:24:5\n\
    \   |\n11 | fn digitSum(s: String) -> isize {\n   |                          \
    \ ----- expected `isize` because of return type\n...\n24 |     sum\n   |     ^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n24 |     sum.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().map(|c|\
    \ *c - '0').sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpae0z513d.rs:12:23\n\
    \   |\n12 |     s.chars().map(|c| *c - '0').sum()\n   |                      \
    \ ^^\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c.is_ascii_upper()).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_upper` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpie6vtl05.rs:12:28\n   |\n12 |     s.chars().filter(|c|\
    \ c.is_ascii_upper()).sum()\n   |                            ^^^^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `is_ascii`\n\nerror[E0277]:\
    \ the trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpie6vtl05.rs:12:46\n\
    \     |\n12   |     s.chars().filter(|c| c.is_ascii_upper()).sum()\n     |   \
    \                                           ^^^ the trait `Sum<char>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    let len = s.len();\n    for i in 0..len {\n        if s.chars().any(|&c|\
    \ c < 'A' || c > 'Z') {\n            continue;\n        }\n        sum += s.chars().nth(i).unwrap().digits(10);\n\
    \    }\n    return sum;\n}\n\nfn main() {\n    let candidate = digitSum;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6b9e1mu2.rs:15:27\n   |\n\
    15 |         if s.chars().any(|&c| c < 'A' || c > 'Z') {\n   |               \
    \            ^--\n   |                           ||\n   |                    \
    \       |expected due to this\n   |                           expected `char`,\
    \ found reference\n   |                           help: did you mean `c`: `&char`\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\n\n\
    error[E0599]: no method named `digits` found for type `char` in the current scope\n\
    \  --> /tmp/tmp6b9e1mu2.rs:18:42\n   |\n18 |         sum += s.chars().nth(i).unwrap().digits(10);\n\
    \   |                                          ^^^^^^ method not found in `char`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    digits(s).iter().sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `digits` in this scope\n  --> /tmp/tmp2dwv9sez.rs:12:5\n\
    \   |\n12 |     digits(s).iter().sum()\n   |     ^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    if s ==\
    \ \"\" {\n        return 0\n    }\n\n    let mut digits = String::new();\n\n \
    \   for (i, c) in s.chars().enumerate().filter(|&(idx, _)| idx % 3 == 0) {\n \
    \       digits += c;\n    }\n\n    let digits_as_integer: isize = digits.parse().unwrap();\n\
    \    let sum = digits_as_integer.checked_mul(10).unwrap();\n\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptn2z3w8n.rs:19:19\n   |\n\
    19 |         digits += c;\n   |                   ^ expected `&str`, found `char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars()\n\
    \        .filter(|&c| c <= 'Z')\n        .map(|c| 'A'..'Z').filter(|c| c <= 'Z').count()\
    \ + s.chars().filter(|c| 'A'..'Z').filter(|c| c <= 'Z').count()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjws_1w5o.rs:14:44\n   |\n\
    14 |         .map(|c| 'A'..'Z').filter(|c| c <= 'Z').count() + s.chars().filter(|c|\
    \ 'A'..'Z').filter(|c| c <= 'Z').count()\n   |                               \
    \             ^^^\n   |                                            |\n   |   \
    \                                         expected reference, found `char`\n \
    \  |                                            help: consider borrowing here:\
    \ `&'Z'`\n   |\n   = note: expected reference `&_`\n                   found type\
    \ `char`\n\nerror[E0369]: binary operation `<=` cannot be applied to type `&std::ops::Range<char>`\n\
    \  --> /tmp/tmpjws_1w5o.rs:14:41\n   |\n14 |         .map(|c| 'A'..'Z').filter(|c|\
    \ c <= 'Z').count() + s.chars().filter(|c| 'A'..'Z').filter(|c| c <= 'Z').count()\n\
    \   |                                       - ^^ --- &_\n   |                \
    \                       |\n   |                                       &std::ops::Range<char>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjws_1w5o.rs:14:80\n   |\n14 |\
    \         .map(|c| 'A'..'Z').filter(|c| c <= 'Z').count() + s.chars().filter(|c|\
    \ 'A'..'Z').filter(|c| c <= 'Z').count()\n   |                               \
    \                                                 ^^^^^^^^ expected `bool`, found\
    \ struct `std::ops::Range`\n   |\n   = note: expected type `bool`\n          \
    \  found struct `std::ops::Range<char>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpjws_1w5o.rs:14:106\n   |\n14 |         .map(|c| 'A'..'Z').filter(|c|\
    \ c <= 'Z').count() + s.chars().filter(|c| 'A'..'Z').filter(|c| c <= 'Z').count()\n\
    \   |                                                                        \
    \                                  ^^^\n   |                                 \
    \                                                                         |\n\
    \   |                                                                        \
    \                                  expected `&char`, found `char`\n   |      \
    \                                                                            \
    \                        help: co"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars()\n\
    \        .filter(|c| c.is_upper())\n        .filter(|c| c >= '0' && c <= '9')\n\
    \        .sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmpnhpxg0ju.rs:13:23\n   |\n13 |         .filter(|c|\
    \ c.is_upper())\n   |                       ^^^^^^^^ help: there is an associated\
    \ function with a similar name: `is_uppercase`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnhpxg0ju.rs:14:26\n   |\n14 |         .filter(|c| c >= '0' && c\
    \ <= '9')\n   |                          ^^^\n   |                          |\n\
    \   |                          expected `&char`, found `char`\n   |          \
    \                help: consider borrowing here: `&'0'`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnhpxg0ju.rs:14:38\n   |\n14 |         .filter(|c| c >=\
    \ '0' && c <= '9')\n   |                                      ^^^\n   |      \
    \                                |\n   |                                     \
    \ expected `&char`, found `char`\n   |                                      help:\
    \ consider borrowing here: `&'9'`\n\nerror[E0277]: the trait bound `isize: Sum<char>`\
    \ is not satisfied\n    --> /tmp/tmpnhpxg0ju.rs:15:10\n     |\n15   |        \
    \ .sum()\n     |          ^^^ the trait `Sum<char>` is not implemented for `isize`\n\
    \     |\n     = help: the following other types implement trait `Sum<A>`:\n  \
    \             <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n           \
    \    <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbhhtf_gj.rs:12:31\n   |\n\
    12 |     s.chars().filter(|c| c >= 'a' && c <= 'z').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'a'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbhhtf_gj.rs:12:43\n   |\n12 |     s.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'z'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpbhhtf_gj.rs:12:48\n\
    \     |\n12   |     s.chars().filter(|c| c >= 'a' && c <= 'z').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c.is_upper()).fold(0, |acc, _| acc + c.to_digit(16).unwrap())\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpzifh0wuw.rs:12:63\n\
    \   |\n12 |     s.chars().filter(|c| c.is_upper()).fold(0, |acc, _| acc + c.to_digit(16).unwrap())\n\
    \   |                                                               ^ help: a\
    \ local variable with a similar name exists: `s`\n\nerror[E0599]: no method named\
    \ `is_upper` found for reference `&char` in the current scope\n  --> /tmp/tmpzifh0wuw.rs:12:28\n\
    \   |\n12 |     s.chars().filter(|c| c.is_upper()).fold(0, |acc, _| acc + c.to_digit(16).unwrap())\n\
    \   |                            ^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_uppercase`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().fold(0,\
    \ |acc, x| acc + (x.to_digit(10).unwrap() as isize))\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpx__ekd2o.rs:12:54\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.length()\n\
    \        .iter()\n        .map(|x| x.to_ascii_lowercase())\n        .filter_map(|x|\
    \ x.chars().sum::<i32>())\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp_3cwdke2.rs:12:7\n   |\n12 |     s.length()\n \
    \  |       ^^^^^^ help: there is an associated function with a similar name: `len`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n        \
    \    sum += c.to_digit(10).unwrap();\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1ep3c4jp.rs:18:5\n   |\n\
    11 | fn digitSum(s: String) -> isize {\n   |                           ----- expected\
    \ `isize` because of return type\n...\n18 |     sum\n   |     ^^^ expected `isize`,\
    \ found `u32`\n   |\nhelp: you can convert a `u32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n18 |     sum.try_into().unwrap()\n  \
    \ |        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for ch in s.chars() {\n        sum += ch.to_ascii_uppercase().into();\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp1hag7my7.rs:14:13\n\
    \   |\n14 |         sum += ch.to_ascii_uppercase().into();\n   |             ^^\
    \ ------------------------------ this method call resolves to `T`\n   |      \
    \       |\n   |             cannot infer type\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    if s.is_empty()\
    \ {\n        return 0\n    }\n    let mut sum = 0isize;\n    let mut last_char\
    \ = 0;\n    for ch in s.chars() {\n        if ch.is_upper() {\n            last_char\
    \ = ch;\n        }\n        sum += last_char.as_bytes()[0];\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpsc6n9c5d.rs:18:15\n   |\n18 |         if ch.is_upper()\
    \ {\n   |               ^^^^^^^^ help: there is an associated function with a\
    \ similar name: `is_uppercase`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsc6n9c5d.rs:19:25\n\
    \   |\n16 |     let mut last_char = 0;\n   |                         - expected\
    \ due to this value\n...\n19 |             last_char = ch;\n   |             \
    \            ^^ expected integer, found `char`\n\nerror[E0689]: can't call method\
    \ `as_bytes` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpsc6n9c5d.rs:21:26\n\
    \   |\n21 |         sum += last_char.as_bytes()[0];\n   |                    \
    \      ^^^^^^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n\
    \   |\n16 |     let mut last_char: i32 = 0;\n   |         ~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599, E0689.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ counter = 0;\n    for c in s.chars() {\n        counter += if !c.is_ascii_uppercase()\
    \ {\n            c.code()\n        } else {\n            10\n        };\n    }\n\
    \    counter\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `code` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpno01qhlk.rs:15:15\n   |\n15 |             c.code()\n  \
    \ |               ^^^^ method not found in `char`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().fold(0,\
    \ |acc, x| acc + x.digits_upper().sum::<isize>())\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `digits_upper` found for type `char` in the\
    \ current scope\n  --> /tmp/tmpj8huoz60.rs:12:40\n   |\n12 |     s.chars().fold(0,\
    \ |acc, x| acc + x.digits_upper().sum::<isize>())\n   |                      \
    \                  ^^^^^^^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z')\n        .filter(|c| *c >= 'a' && *c <= 'z')\n     \
    \   .sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n   \
    \ --> /tmp/tmp6nf0k1lm.rs:14:10\n     |\n14   |         .sum()\n     |       \
    \   ^^^ the trait `Sum<char>` is not implemented for `isize`\n     |\n     = help:\
    \ the following other types implement trait `Sum<A>`:\n               <f32 as\
    \ Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n\
    \               <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n       \
    \        <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16\
    \ as Sum>\n             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n   \
    \ --> /tmp/tmps4ltg984.rs:12:50\n     |\n12   |     s.chars().filter(|c| *c >=\
    \ 'a' && *c <= 'z').sum()\n     |                                            \
    \      ^^^ the trait `Sum<char>` is not implemented for `isize`\n     |\n    \
    \ = help: the following other types implement trait `Sum<A>`:\n              \
    \ <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a\
    \ f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n\
    \               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n        \
    \       <i16 as Sum>\n             and 20 others\nnote: required by a bound in\
    \ `std::iter::Iterator::sum`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum: isize = 0;\n    for (i, c) in s.chars().enumerate() {\n        if c >=\
    \ '0' && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmp5hjpks5b.rs:15:22\n\
    \   |\n15 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    if s ==\
    \ \"\" {\n        return 0;\n    }\n\n    let mut sum = 0;\n\n    for (i, c) in\
    \ s.chars().enumerate() {\n        if c > 'Z' && c < 'A' {\n            sum +=\
    \ c - 'A' + 1;\n        }\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpl_ayx7j8.rs:20:22\n\
    \   |\n20 |             sum += c - 'A' + 1;\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for &c in s.as_bytes() {\n        if c >= b'A' && c <= b'Z' {\n\
    \            sum += c - b'A' + 10;\n        }\n    }\n    return sum;\n}\n\nfn\
    \ main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4jonyjhg.rs:18:12\n   |\n\
    11 | fn digitSum(s: String) -> isize {\n   |                           ----- expected\
    \ `isize` because of return type\n...\n18 |     return sum;\n   |            ^^^\
    \ expected `isize`, found `u8`\n   |\nhelp: you can convert a `u8` to an `isize`\n\
    \   |\n18 |     return sum.into();\n   |               +++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ total: isize = 0;\n    for c in s.chars() {\n        if !c.is_ascii_uppercase()\
    \ {\n            continue;\n        }\n        total += c.to_ascii_lowercase().unwrap();\n\
    \    }\n    total\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `char` in the current\
    \ scope\n  --> /tmp/tmptb7n2yde.rs:17:41\n   |\n17 |         total += c.to_ascii_lowercase().unwrap();\n\
    \   |                                         ^^^^^^ method not found in `char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    digitSumHelper(\"\
    \", s)\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `digitSumHelper` in this scope\n  -->\
    \ /tmp/tmpzulzeyxm.rs:12:5\n   |\n12 |     digitSumHelper(\"\", s)\n   |     ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c.is_ascii_upper()).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_upper` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpfcmhfpp8.rs:12:28\n   |\n12 |     s.chars().filter(|c|\
    \ c.is_ascii_upper()).sum()\n   |                            ^^^^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `is_ascii`\n\nerror[E0277]:\
    \ the trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpfcmhfpp8.rs:12:46\n\
    \     |\n12   |     s.chars().filter(|c| c.is_ascii_upper()).sum()\n     |   \
    \                                           ^^^ the trait `Sum<char>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().map(|c|\
    \ c.code()).sum::<isize>()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `code` found for type `char` in the current\
    \ scope\n  --> /tmp/tmplrej4q7_.rs:12:25\n   |\n12 |     s.chars().map(|c| c.code()).sum::<isize>()\n\
    \   |                         ^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n        \
    \    sum += c.as_byte().wrapping_add(b'A');\n        } else {\n            sum\
    \ += c.as_byte().wrapping_add(b'a');\n        }\n    }\n    sum as isize\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `as_byte` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpe2sn68ei.rs:15:22\n   |\n15 |             sum += c.as_byte().wrapping_add(b'A');\n\
    \   |                      ^^^^^^^ method not found in `char`\n\nerror[E0599]:\
    \ no method named `as_byte` found for type `char` in the current scope\n  -->\
    \ /tmp/tmpe2sn68ei.rs:17:22\n   |\n17 |             sum += c.as_byte().wrapping_add(b'a');\n\
    \   |                      ^^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for &c in s.chars() {\n        if c >= 'a' && c <= 'z' {\n   \
    \         sum += (c - 'a' + 10);\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpx_e8_d9s.rs:15:20\n\
    \   |\n15 |             sum += (c - 'a' + 10);\n   |                    ^    \
    \        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove\
    \ these parentheses\n   |\n15 -             sum += (c - 'a' + 10);\n15 +     \
    \        sum += c - 'a' + 10;\n   | \n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpx_e8_d9s.rs:13:9\n   |\n13 |     for &c in s.chars() {\n   |       \
    \  ^^    --------- this expression has type `Option<char>`\n   |         |\n \
    \  |         expected `char`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `c`\n   |\n   = note:   expected type `char`\n \
    \          found reference `&_`\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for i in s.chars() {\n        if i > 'Z' {\n            sum +=\
    \ (i - 'A');\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmp1ut7w5tp.rs:15:20\n\
    \   |\n15 |             sum += (i - 'A');\n   |                    ^       ^\n\
    \   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n15 -             sum += (i - 'A');\n15 +             sum += i - 'A';\n\
    \   | \n\nerror[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmp1ut7w5tp.rs:15:23\n\
    \   |\n15 |             sum += (i - 'A');\n   |                     - ^ --- char\n\
    \   |                     |\n   |                     char\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    s.chars().for_each(|x|\n        if x >= 'a' && x <= 'z' {\n  \
    \          sum += x - 'a' + 10;\n        } else if x >= 'A' && x <= 'Z' {\n  \
    \          sum += x - 'A' + 10;\n        } else {\n            sum += x\n    \
    \    }\n    );\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmp1nba_2j4.rs:15:22\n\
    \   |\n15 |             sum += x - 'a' + 10;\n   |                    - ^ ---\
    \ char\n   |                    |\n   |                    char\n\nerror[E0369]:\
    \ cannot subtract `char` from `char`\n  --> /tmp/tmp1nba_2j4.rs:17:22\n   |\n\
    17 |             sum += x - 'A' + 10;\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror[E0277]: cannot\
    \ add-assign `char` to `{integer}`\n  --> /tmp/tmp1nba_2j4.rs:19:17\n   |\n19\
    \ |             sum += x\n   |                 ^^ no implementation for `{integer}\
    \ += char`\n   |\n   = help: the trait `AddAssign<char>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if ('A' <= c && c <= 'Z') {\n  \
    \          sum += c - 'A' as isize;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp7ojdv1jx.rs:14:12\n\
    \   |\n14 |         if ('A' <= c && c <= 'Z') {\n   |            ^           \
    \         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove\
    \ these parentheses\n   |\n14 -         if ('A' <= c && c <= 'Z') {\n14 +    \
    \     if 'A' <= c && c <= 'Z' {\n   | \n\nerror[E0369]: cannot subtract `isize`\
    \ from `char`\n  --> /tmp/tmp7ojdv1jx.rs:15:22\n   |\n15 |             sum +=\
    \ c - 'A' as isize;\n   |                    - ^ ------------ isize\n   |    \
    \                |\n   |                    char\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ digits = 0;\n    for c in s.chars() {\n        if !c.is_ascii_uppercase() {\n\
    \            digits += c.to_digit(10).unwrap();\n        } else {\n          \
    \  digits += c;\n        }\n    }\n    digits\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `char` to `u32`\n  --> /tmp/tmpcfq0l1ao.rs:17:20\n\
    \   |\n17 |             digits += c;\n   |                    ^^ no implementation\
    \ for `u32 += char`\n   |\n   = help: the trait `AddAssign<char>` is not implemented\
    \ for `u32`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcfq0l1ao.rs:20:5\n\
    \   |\n11 | fn digitSum(s: String) -> isize {\n   |                          \
    \ ----- expected `isize` because of return type\n...\n20 |     digits\n   |  \
    \   ^^^^^^ expected `isize`, found `u32`\n   |\nhelp: you can convert a `u32`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n20 |     digits.try_into().unwrap()\n\
    \   |           ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_ascii_lowercase();\n        }\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp2bovy0bd.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `char` to `{integer}`\n\
    \  --> /tmp/tmp2bovy0bd.rs:15:17\n   |\n15 |             sum += c.to_ascii_lowercase();\n\
    \   |                 ^^ no implementation for `{integer} += char`\n   |\n   =\
    \ help: the trait `AddAssign<char>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c < 'A' || c > 'Z').sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9tpy0ry8.rs:12:30\n   |\n\
    12 |     s.chars().filter(|c| c < 'A' || c > 'Z').sum()\n   |                \
    \              ^^^\n   |                              |\n   |                \
    \              expected `&char`, found `char`\n   |                          \
    \    help: consider borrowing here: `&'A'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9tpy0ry8.rs:12:41\n   |\n12 |     s.chars().filter(|c| c < 'A'\
    \ || c > 'Z').sum()\n   |                                         ^^^\n   |  \
    \                                       |\n   |                              \
    \           expected `&char`, found `char`\n   |                             \
    \            help: consider borrowing here: `&'Z'`\n\nerror[E0277]: the trait\
    \ bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmp9tpy0ry8.rs:12:46\n\
    \     |\n12   |     s.chars().filter(|c| c < 'A' || c > 'Z').sum()\n     |   \
    \                                           ^^^ the trait `Sum<char>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for (i, _) in s.chars().enumerate() {\n        if i > 0 {\n  \
    \          sum += s.chars()[i - 1] as usize;\n        }\n        if i < s.len()\
    \ - 1 {\n            sum += s.chars()[i + 1] as usize;\n        }\n    }\n   \
    \ sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpvux23c49.rs:15:20\n\
    \   |\n15 |             sum += s.chars()[i - 1] as usize;\n   |              \
    \      ^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n\
    \  --> /tmp/tmpvux23c49.rs:18:20\n   |\n18 |             sum += s.chars()[i +\
    \ 1] as usize;\n   |                    ^^^^^^^^^^^^^^^^\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0608`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for ch in s.chars() {\n        let code: usize = match ch {\n\
    \            c if c.is_digit() => c as usize,\n            _ => 0,\n        };\n\
    \        sum += code;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpttcfepps.rs:15:20\n    |\n15  |             c if c.is_digit()\
    \ => c as usize,\n    |                    ^^^^^^^^- supplied 0 arguments\n  \
    \  |                    |\n    |                    expected 1 argument\n    |\n\
    note: associated function defined here\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpttcfepps.rs:20:5\n   |\n11 | fn digitSum(s: String) -> isize {\n   |\
    \                           ----- expected `isize` because of return type\n...\n\
    20 |     sum\n   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n20 |     sum.try_into().unwrap()\n   |        ++++++++++++++++++++\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n        \
    \    sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmpuobyv1jm.rs:15:17\n\
    \   |\n15 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    let mut last_digit = 0;\n    let mut max_digit = s.len() - 1;\n\
    \    let mut last_char: char;\n    for &c in s.chars() {\n        if *c >= '0'\
    \ && *c <= '9' {\n            sum += (*c - '0');\n        }\n        if *c >=\
    \ 'A' && *c <= 'Z' {\n            sum += (*c - 'A' + 10);\n        }\n       \
    \ if *c >= 'a' && *c <= 'z' {\n            sum += (*c - 'a' + 10);\n        }\n\
    \        last_digit = *c - '0';\n        last_char = c;\n        if sum > max_digit\
    \ {\n            break;\n        }\n    }\n    last_digit;\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmp4u15v1lv.rs:18:20\n\
    \   |\n18 |             sum += (*c - '0');\n   |                    ^        ^\n\
    \   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n18 -             sum += (*c - '0');\n18 +             sum += *c - '0';\n\
    \   | \n\nwarning: unnecessary parentheses around assigned value\n  --> /tmp/tmp4u15v1lv.rs:21:20\n\
    \   |\n21 |             sum += (*c - 'A' + 10);\n   |                    ^   \
    \          ^\n   |\nhelp: remove these parentheses\n   |\n21 -             sum\
    \ += (*c - 'A' + 10);\n21 +             sum += *c - 'A' + 10;\n   | \n\nwarning:\
    \ unnecessary parentheses around assigned value\n  --> /tmp/tmp4u15v1lv.rs:24:20\n\
    \   |\n24 |             sum += (*c - 'a' + 10);\n   |                    ^   \
    \          ^\n   |\nhelp: remove these parentheses\n   |\n24 -             sum\
    \ += (*c - 'a' + 10);\n24 +             sum += *c - 'a' + 10;\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4u15v1lv.rs:16:9\n   |\n16 |     for &c in s.chars()\
    \ {\n   |         ^^    --------- this expression has type `Option<char>`\n  \
    \ |         |\n   |         expected `char`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `c`\n   |\n   = note:   expected\
    \ type `char`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4u15v1lv.rs:11:27\n   |\n11 | fn digitSum(s: String) -> isize {\n\
    \   |    --------               ^^^^^ expected `isize`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    ...\n32 |     last_digit;\n   |               - help: remove this semicolon\n\n\
    error: aborting due to 2 previous errors; 3 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1reqkzod.rs:12:31\n   |\n\
    12 |     s.chars().filter(|c| c >= 'a' && c <= 'z').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'a'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp1reqkzod.rs:12:43\n   |\n12 |     s.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'z'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmp1reqkzod.rs:12:48\n\
    \     |\n12   |     s.chars().filter(|c| c >= 'a' && c <= 'z').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ acc = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            acc\
    \ += 1;\n        }\n    }\n    acc\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpghl4ocyc.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    s.chars().filter_map(|c| if c.is_upper() { sum += c.digit() }\
    \ else { 0 }).sum();\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp_hd71vb6.rs:13:35\n   |\n13 |     s.chars().filter_map(|c|\
    \ if c.is_upper() { sum += c.digit() } else { 0 }).sum();\n   |              \
    \                     ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0599]: no method named `digit` found for type\
    \ `char` in the current scope\n  --> /tmp/tmp_hd71vb6.rs:13:57\n   |\n13 |   \
    \  s.chars().filter_map(|c| if c.is_upper() { sum += c.digit() } else { 0 }).sum();\n\
    \   |                                                         ^^^^^ help: there\
    \ is an associated function with a similar name: `is_digit`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_hd71vb6.rs:13:48\n   |\n13 |     s.chars().filter_map(|c|\
    \ if c.is_upper() { sum += c.digit() } else { 0 }).sum();\n   |              \
    \                                  ^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `()`\n   |\n   = note:   expected enum `Option<_>`\n           found unit type\
    \ `()`\nhelp: try adding an expression at the end of the block\n   |\n13 ~   \
    \  s.chars().filter_map(|c| if c.is_upper() { sum += c.digit();\n14 ~     None\
    \ } else { 0 }).sum();\n   |\n13 ~     s.chars().filter_map(|c| if c.is_upper()\
    \ { sum += c.digit();\n14 ~     Some(()) } else { 0 }).sum();\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_hd71vb6.rs:13:74\n   |\n13 |     s.chars().filter_map(|c|\
    \ if c.is_upper() { sum += c.digit() } else { 0 }).sum();\n   |              \
    \                                                            ^ expected enum `Option`,\
    \ found integer\n   |\n   = note: expected enum `Option<_>`\n              found\
    \ type `{integer}`\nhelp: try wrapping the expression in `Some`\n   |\n13 |  \
    \   s.chars().filter_map(|c| if c.is_upper() { sum += c.digit() } else { Some(0)\
    \ }).sum();\n   |                                                            \
    \              +++++ +\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E030"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ *c >= '0' && *c <= '9').sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n   \
    \ --> /tmp/tmpn6oaaf9l.rs:12:50\n     |\n12   |     s.chars().filter(|c| *c >=\
    \ '0' && *c <= '9').sum()\n     |                                            \
    \      ^^^ the trait `Sum<char>` is not implemented for `isize`\n     |\n    \
    \ = help: the following other types implement trait `Sum<A>`:\n              \
    \ <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a\
    \ f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n\
    \               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n        \
    \       <i16 as Sum>\n             and 20 others\nnote: required by a bound in\
    \ `std::iter::Iterator::sum`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase() {\n  \
    \          sum += c.to_ascii_uppercase().unwrap();\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp2r0755j6.rs:15:43\n   |\n15 |             sum += c.to_ascii_uppercase().unwrap();\n\
    \   |                                           ^^^^^^ method not found in `char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ chars: Vec<char> = s.chars().collect();\n    chars.sort_by(|a, b| a.cmp(b));\n\
    \    let mut sum = 0;\n    for i in chars.iter().rev() {\n        sum += i[..1].as_bytes().iter().sum()\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `&char`\n  --> /tmp/tmp0qplx99v.rs:16:16\n\
    \   |\n16 |         sum += i[..1].as_bytes().iter().sum()\n   |              \
    \  ^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0608`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    digitSumHelper(s.chars().map(|x|\
    \ *x).collect(), 0, 0).0\n}\n\nfn main() {\n    let candidate = digitSum;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `digitSumHelper` in this scope\n  -->\
    \ /tmp/tmpbd295agi.rs:12:5\n   |\n12 |     digitSumHelper(s.chars().map(|x| *x).collect(),\
    \ 0, 0).0\n   |     ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0614]: type\
    \ `char` cannot be dereferenced\n  --> /tmp/tmpbd295agi.rs:12:38\n   |\n12 | \
    \    digitSumHelper(s.chars().map(|x| *x).collect(), 0, 0).0\n   |           \
    \                           ^^\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0425, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|&c|\
    \ c >= 'A' && c <= 'Z').sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n   \
    \ --> /tmp/tmp5866andc.rs:12:49\n     |\n12   |     s.chars().filter(|&c| c >=\
    \ 'A' && c <= 'Z').sum()\n     |                                             \
    \    ^^^ the trait `Sum<char>` is not implemented for `isize`\n     |\n     =\
    \ help: the following other types implement trait `Sum<A>`:\n               <f32\
    \ as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a\
    \ f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n\
    \               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n        \
    \       <i16 as Sum>\n             and 20 others\nnote: required by a bound in\
    \ `std::iter::Iterator::sum`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    let mut i = 1;\n    let len = s.len();\n    let mut digits = vec![0;\
    \ len as usize];\n    \n    while(i < len){\n        digits[i as usize] =\n  \
    \          s[i as usize].chars().map(|c| c as usize).sum();\n        i += 1;\n\
    \    }\n    \n    for i in 0..len {\n        sum += digits[i];\n    }\n    \n\
    \    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpitr7bcdv.rs:17:10\n\
    \   |\n17 |     while(i < len){\n   |          ^       ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n17 -     while(i < len){\n\
    17 +     while i < len {\n   | \n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `usize`\n  --> /tmp/tmpitr7bcdv.rs:19:13\n   |\n19 |             s[i as usize].chars().map(|c|\
    \ c as usize).sum();\n   |             ^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for (i, c) in s.chars().enumerate() {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            sum += c - 'a' + 10;\n        } else {\n           \
    \ sum += c - '0';\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpdkqjpt40.rs:15:22\n\
    \   |\n15 |             sum += c - 'a' + 10;\n   |                    - ^ ---\
    \ char\n   |                    |\n   |                    char\n\nerror[E0369]:\
    \ cannot subtract `char` from `char`\n  --> /tmp/tmpdkqjpt40.rs:17:22\n   |\n\
    17 |             sum += c - '0';\n   |                    - ^ --- char\n   | \
    \                   |\n   |                    char\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    // We convert\
    \ the string to an array of chars, because that way we can\n    // perform a map\
    \ operation on that array, which can convert each char\n    // to a number between\
    \ 0 and 9\n    let chars = s.chars().map(|c| c.to_digit(10)).collect();\n    //\
    \ We find the index of the first non-digit character (i.e. the first\n    // character\
    \ that is not a digit)\n    let firstNonDigit = chars.iter().position(|c| c <\
    \ '0');\n    // The position of the last non-digit char\n    let lastNonDigit\
    \ = chars.iter().rposition(|c| c < '0').unwrap_or(0);\n    // Then we sum the\
    \ chars between the two indices\n    let sum: isize = chars[firstNonDigit..lastNonDigit].sum()\n\
    \        + chars[0..firstNonDigit].sum();\n    // Finally we return that sum\n\
    \    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpf8qp6_84.rs:18:25\n\
    \   |\n15 |     let chars = s.chars().map(|c| c.to_digit(10)).collect();\n   |\
    \         ----- consider giving `chars` a type\n...\n18 |     let firstNonDigit\
    \ = chars.iter().position(|c| c < '0');\n   |                         ^^^^^ cannot\
    \ infer type\n   |\n   = note: type must be known at this point\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars()\n\
    \        .filter(|c| c.is_upper())\n        .sum()\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for reference `&char` in\
    \ the current scope\n  --> /tmp/tmp0tdq9v4c.rs:13:23\n   |\n13 |         .filter(|c|\
    \ c.is_upper())\n   |                       ^^^^^^^^ help: there is an associated\
    \ function with a similar name: `is_uppercase`\n\nerror[E0277]: the trait bound\
    \ `isize: Sum<char>` is not satisfied\n    --> /tmp/tmp0tdq9v4c.rs:14:10\n   \
    \  |\n14   |         .sum()\n     |          ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxa6ukmvj.rs:12:31\n   |\n\
    12 |     s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'A'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxa6ukmvj.rs:12:43\n   |\n12 |     s.chars().filter(|c| c >= 'A'\
    \ && c <= 'Z').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'Z'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpxa6ukmvj.rs:12:48\n\
    \     |\n12   |     s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0isize;\n    for c in s.chars() {\n        if c.is_upper() {\n       \
    \     sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmppd5awghh.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `isize`\n\
    \  --> /tmp/tmppd5awghh.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `isize += Option<u32>`\n   |\n\
    \   = help: the trait `AddAssign<Option<u32>>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    if s.is_empty()\
    \ {\n        return 0\n    }\n    let mut sum_ = 0;\n    for i in s.chars() {\n\
    \        if i as usize + sum_ > 123 {\n            sum_ = 0;\n        } else {\n\
    \            sum_ += i as usize;\n        }\n    }\n    sum_\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmjxghgfl.rs:23:5\n   |\n\
    11 | fn digitSum(s: String) -> isize {\n   |                           ----- expected\
    \ `isize` because of return type\n...\n23 |     sum_\n   |     ^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n23 |     sum_.try_into().unwrap()\n\
    \   |         ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if ('A' <= c && c <= 'Z') {\n  \
    \          sum += c - 'A' + 10;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpueqcbqcf.rs:14:12\n\
    \   |\n14 |         if ('A' <= c && c <= 'Z') {\n   |            ^           \
    \         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove\
    \ these parentheses\n   |\n14 -         if ('A' <= c && c <= 'Z') {\n14 +    \
    \     if 'A' <= c && c <= 'Z' {\n   | \n\nerror[E0369]: cannot subtract `char`\
    \ from `char`\n  --> /tmp/tmpueqcbqcf.rs:15:22\n   |\n15 |             sum +=\
    \ c - 'A' + 10;\n   |                    - ^ --- char\n   |                  \
    \  |\n   |                    char\n\nerror: aborting due to previous error; 1\
    \ warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.code();\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpy520pbl9.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0599]: no method named `code` found for type\
    \ `char` in the current scope\n  --> /tmp/tmpy520pbl9.rs:15:22\n   |\n15 |   \
    \          sum += c.code();\n   |                      ^^^^ method not found in\
    \ `char`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    use std::cmp::Ordering;\n\
    \    s.chars().filter(|c| c.is_ascii_upper()).fold(0, Ordering::Equal)\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_upper` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpsn1b7qo7.rs:13:28\n   |\n13 |     s.chars().filter(|c|\
    \ c.is_ascii_upper()).fold(0, Ordering::Equal)\n   |                         \
    \   ^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_ascii`\n\nerror[E0277]: expected a `FnMut<(isize, char)>` closure, found\
    \ `std::cmp::Ordering`\n    --> /tmp/tmpsn1b7qo7.rs:13:54\n     |\n13   |    \
    \ s.chars().filter(|c| c.is_ascii_upper()).fold(0, Ordering::Equal)\n     |  \
    \                                            ----    ^^^^^^^^^^^^^^^ expected\
    \ an `FnMut<(isize, char)>` closure, found `std::cmp::Ordering`\n     |      \
    \                                        |\n     |                           \
    \                   required by a bound introduced by this call\n     |\n    \
    \ = help: the trait `FnMut<(isize, char)>` is not implemented for `std::cmp::Ordering`\n\
    note: required by a bound in `fold`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0i32;\n    for c in s.chars() {\n        if c.is_uppercase() {\n     \
    \       sum += c.code_point().unwrap() as isize;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `code_point` found for type `char` in the\
    \ current scope\n  --> /tmp/tmpr1_n2j2b.rs:15:22\n   |\n15 |             sum +=\
    \ c.code_point().unwrap() as isize;\n   |                      ^^^^^^^^^^ method\
    \ not found in `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1_n2j2b.rs:18:5\n\
    \   |\n11 | fn digitSum(s: String) -> isize {\n   |                          \
    \ ----- expected `isize` because of return type\n...\n18 |     sum\n   |     ^^^\
    \ expected `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n18 |     sum.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    DIGITS.iter().fold(0,\
    \ |sum, item| {\n        match item.to_ascii_uppercase() {\n            None =>\
    \ sum,\n            Some(x) => sum + x.to_digit(),\n        }\n    })\n}\n\nfn\
    \ main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `DIGITS` in this scope\n  --> /tmp/tmp_yx1wkoy.rs:12:5\n\
    \   |\n12 |     DIGITS.iter().fold(0, |sum, item| {\n   |     ^^^^^^ not found\
    \ in this scope\n   |\nhelp: consider importing one of these items\n   |\n1  |\
    \ use std::f32::DIGITS;\n   |\n1  | use std::f64::DIGITS;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for ch in s.chars() {\n        sum += ch.to_ascii_uppercase().unwrap();\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpy5891ez0.rs:14:40\n   |\n14 |         sum += ch.to_ascii_uppercase().unwrap();\n\
    \   |                                        ^^^^^^ method not found in `char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for ch in s.chars() {\n        if ch > 'Z' {\n            sum\
    \ += ch - 'A' + 1;\n        } else {\n            sum += ch;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpmqyi7z66.rs:15:23\n\
    \   |\n15 |             sum += ch - 'A' + 1;\n   |                    -- ^ ---\
    \ char\n   |                    |\n   |                    char\n\nerror[E0277]:\
    \ cannot add-assign `char` to `{integer}`\n  --> /tmp/tmpmqyi7z66.rs:17:17\n \
    \  |\n17 |             sum += ch;\n   |                 ^^ no implementation for\
    \ `{integer} += char`\n   |\n   = help: the trait `AddAssign<char>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum: isize = 0;\n    for c in s.chars() {\n        if c < '0' || c > '9' {\n\
    \            break;\n        }\n        sum += c - '0';\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmp_17wx3ez.rs:17:18\n\
    \   |\n17 |         sum += c - '0';\n   |                - ^ --- char\n   |  \
    \              |\n   |                char\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    // Write\
    \ your code in Rust starting here.\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpynux1fn5.rs:11:27\n   |\n\
    11 | fn digitSum(s: String) -> isize {\n   |    --------               ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.length()\n\
    \        .par_iter()\n        .filter_map(|c| c >= 'A' && c <= 'Z')\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpjlfdkefc.rs:12:7\n   |\n12 |     s.length()\n \
    \  |       ^^^^^^ help: there is an associated function with a similar name: `len`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars()\n\
    \        .filter(|c| c.is_ascii_upper())\n        .sum()\n}\n\nfn main() {\n \
    \   let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_upper` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmp1q1gsww7.rs:13:23\n   |\n13 |         .filter(|c|\
    \ c.is_ascii_upper())\n   |                       ^^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `is_ascii`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmp1q1gsww7.rs:14:10\n\
    \     |\n14   |         .sum()\n     |          ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().map(|c|\
    \ *c).filter(|&x| x.is_uppercase()).sum()\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpc692_i1_.rs:12:23\n\
    \   |\n12 |     s.chars().map(|c| *c).filter(|&x| x.is_uppercase()).sum()\n  \
    \ |                       ^^\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for (i, ch) in s.chars().enumerate() {\n        sum += if ch >=\
    \ 'a' && ch <= 'z' { ch - 'a' + 1 } else { 0 };\n        if i == s.len() - 1 {\n\
    \            return sum;\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpm07fs7ye.rs:14:47\n\
    \   |\n14 |         sum += if ch >= 'a' && ch <= 'z' { ch - 'a' + 1 } else { 0\
    \ };\n   |                                            -- ^ --- char\n   |    \
    \                                        |\n   |                             \
    \               char\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm07fs7ye.rs:13:5\n\
    \   |\n11 |   fn digitSum(s: String) -> isize {\n   |                        \
    \     ----- expected `isize` because of return type\n12 |       let mut sum =\
    \ 0;\n13 | /     for (i, ch) in s.chars().enumerate() {\n14 | |         sum +=\
    \ if ch >= 'a' && ch <= 'z' { ch - 'a' + 1 } else { 0 };\n15 | |         if i\
    \ == s.len() - 1 {\n16 | |             return sum;\n17 | |         }\n18 | | \
    \    }\n   | |_____^ expected `isize`, found `()`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    digits(s,\
    \ false).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `digits` in this scope\n  --> /tmp/tmpzgvk9txj.rs:12:5\n\
    \   |\n12 |     digits(s, false).sum()\n   |     ^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c < 'A' || c > 'Z').count()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprhmw2ic3.rs:12:30\n   |\n\
    12 |     s.chars().filter(|c| c < 'A' || c > 'Z').count()\n   |              \
    \                ^^^\n   |                              |\n   |              \
    \                expected `&char`, found `char`\n   |                        \
    \      help: consider borrowing here: `&'A'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprhmw2ic3.rs:12:41\n   |\n12 |     s.chars().filter(|c| c < 'A'\
    \ || c > 'Z').count()\n   |                                         ^^^\n   |\
    \                                         |\n   |                            \
    \             expected `&char`, found `char`\n   |                           \
    \              help: consider borrowing here: `&'Z'`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprhmw2ic3.rs:12:5\n   |\n11 | fn digitSum(s: String) ->\
    \ isize {\n   |                           ----- expected `isize` because of return\
    \ type\n12 |     s.chars().filter(|c| c < 'A' || c > 'Z').count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     s.chars().filter(|c|\
    \ c < 'A' || c > 'Z').count().try_into().unwrap()\n   |                      \
    \                               ++++++++++++++++++++\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ s = String::from(s);\n    let mut sum: isize = 0;\n    while !s.is_empty() {\n\
    \        sum = sum + (s.chars().filter(|c| !c.is_digit()).collect::<Vec<_>>().last().unwrap()\
    \ as isize);\n        s.clear();\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpwhss2bm7.rs:15:46\n    |\n15  |         sum = sum + (s.chars().filter(|c|\
    \ !c.is_digit()).collect::<Vec<_>>().last().unwrap() as isize);\n    |       \
    \                                       ^^^^^^^^- supplied 0 arguments\n    |\
    \                                              |\n    |                      \
    \                        expected 1 argument\n    |\nnote: associated function\
    \ defined here\n\nerror[E0606]: casting `&char` as `isize` is invalid\n  --> /tmp/tmpwhss2bm7.rs:15:21\n\
    \   |\n15 |         sum = sum + (s.chars().filter(|c| !c.is_digit()).collect::<Vec<_>>().last().unwrap()\
    \ as isize);\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = help: cast through a raw pointer first\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0061, E0606.\nFor\
    \ more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for (i, c) in s.chars().enumerate() {\n        let c = c.to_string();\n\
    \        if c.chars().any(|x| *x != 'A' || *x != 'a') {\n            sum += i;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpzvobn3px.rs:15:30\n\
    \   |\n15 |         if c.chars().any(|x| *x != 'A' || *x != 'a') {\n   |     \
    \                         ^^\n\nerror[E0614]: type `char` cannot be dereferenced\n\
    \  --> /tmp/tmpzvobn3px.rs:15:43\n   |\n15 |         if c.chars().any(|x| *x !=\
    \ 'A' || *x != 'a') {\n   |                                           ^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzvobn3px.rs:19:5\n   |\n11 | fn digitSum(s:\
    \ String) -> isize {\n   |                           ----- expected `isize` because\
    \ of return type\n...\n19 |     sum\n   |     ^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n19 |     sum.try_into().unwrap()\n   |        ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0isize;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' { sum\
    \ += c - '0'; }\n        else { break; }\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpjxcr3y7f.rs:14:44\n\
    \   |\n14 |         if c >= '0' && c <= '9' { sum += c - '0'; }\n   |        \
    \                                  - ^ --- char\n   |                        \
    \                  |\n   |                                          char\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n\n    for c in s.chars() {\n        if c.is_upper() {\n          \
    \  sum += c.to_digit(10);\n        }\n    }\n\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpuyyakf2m.rs:15:14\n   |\n15 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpuyyakf2m.rs:16:17\n   |\n16 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ res = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n        \
    \    res += c.as_bytes().iter().map(|b| b as usize).sum();\n        } else {\n\
    \            return res;\n        }\n    }\n    return res;\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `as_bytes` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp9_scr5gf.rs:15:22\n   |\n15 |             res += c.as_bytes().iter().map(|b|\
    \ b as usize).sum();\n   |                      ^^^^^^^^ method not found in `char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for (i, ch) in s.chars().enumerate() {\n        if ch <= '9' {\n\
    \            sum += ch as isize - (i + 1);\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvq23u70b.rs:15:34\n   |\n\
    15 |             sum += ch as isize - (i + 1);\n   |                         \
    \         ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot subtract\
    \ `usize` from `isize`\n  --> /tmp/tmpvq23u70b.rs:15:32\n   |\n15 |          \
    \   sum += ch as isize - (i + 1);\n   |                                ^ no implementation\
    \ for `isize - usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    if s.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut result = 0.;\n    let mut pos = 0;\n\
    \    let mut s = s;\n\n    while pos < s.len() {\n        let mut sum = 0;\n \
    \       let mut digit = s.chars().nth(pos)?.chars().sum();\n        if digit ==\
    \ 0 {\n            sum += 1;\n        }\n        else {\n            sum += digit;\n\
    \        }\n        pos += 1;\n        result = result + sum;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the `?` operator can only be used in a function that returns\
    \ `Result` or `Option` (or another type that implements `FromResidual`)\n  -->\
    \ /tmp/tmpyh4be0ug.rs:22:43\n   |\n11 | / fn digitSum(s: String) -> isize {\n\
    12 | |     if s.is_empty() {\n13 | |         return 0;\n14 | |     }\n...  |\n\
    22 | |         let mut digit = s.chars().nth(pos)?.chars().sum();\n   | |    \
    \                                       ^ cannot use the `?` operator in a function\
    \ that returns `isize`\n...  |\n32 | |     result\n33 | | }\n   | |_- this function\
    \ should return `Result` or `Option` to accept `?`\n   |\n   = help: the trait\
    \ `FromResidual<Option<Infallible>>` is not implemented for `isize`\n\nerror[E0599]:\
    \ no method named `chars` found for type `char` in the current scope\n  --> /tmp/tmpyh4be0ug.rs:22:45\n\
    \   |\n22 |         let mut digit = s.chars().nth(pos)?.chars().sum();\n   | \
    \                                            ^^^^^ method not found in `char`\n\
    \nerror[E0277]: cannot add an integer to a float\n  --> /tmp/tmpyh4be0ug.rs:30:25\n\
    \   |\n30 |         result = result + sum;\n   |                         ^ no\
    \ implementation for `{float} + {integer}`\n   |\n   = help: the trait `Add<{integer}>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyh4be0ug.rs:32:5\n\
    \   |\n11 | fn digitSum(s: String) -> isize {\n   |                          \
    \ ----- expected `isize` because of return type\n...\n32 |     result\n   |  \
    \   ^^^^^^ expected `isize`, found floating-point number\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        sum += c;\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `char` to `{integer}`\n  --> /tmp/tmph1r3x8lw.rs:14:13\n\
    \   |\n14 |         sum += c;\n   |             ^^ no implementation for `{integer}\
    \ += char`\n   |\n   = help: the trait `AddAssign<char>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n        \
    \    sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmpg04panjd.rs:15:17\n\
    \   |\n15 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ result = 1;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n \
    \           result += c - '0';\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmp43p01l30.rs:15:25\n\
    \   |\n15 |             result += c - '0';\n   |                       - ^ ---\
    \ char\n   |                       |\n   |                       char\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum: isize = 0;\n    for ch in s.chars() {\n        if ch >= '0' && ch <= '9'\
    \ {\n            sum += ch as isize;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `131`', /tmp/tmp4qif2zip.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for (i, c) in s.chars().enumerate() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_digit(10).unwrap();\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx9du6du1.rs:18:5\n   |\n\
    11 | fn digitSum(s: String) -> isize {\n   |                           ----- expected\
    \ `isize` because of return type\n...\n18 |     sum\n   |     ^^^ expected `isize`,\
    \ found `u32`\n   |\nhelp: you can convert a `u32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n18 |     sum.try_into().unwrap()\n  \
    \ |        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ total: isize = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n   \
    \         total += c.to_digit();\n        }\n    }\n    total\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpkzmizyp1.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpkzmizyp1.rs:15:24\n    |\n15  |             total\
    \ += c.to_digit();\n    |                        ^^^^^^^^- supplied 0 arguments\n\
    \    |                        |\n    |                        expected 1 argument\n\
    \    |\nnote: associated function defined here\n\nerror[E0277]: cannot add-assign\
    \ `Option<u32>` to `isize`\n  --> /tmp/tmpkzmizyp1.rs:15:19\n   |\n15 |      \
    \       total += c.to_digit();\n   |                   ^^ no implementation for\
    \ `isize += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0061, E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().enumerate().filter(|&(_,\
    \ c)| c.is_upper()).map(|(i, c)| c).sum()\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpi9fwfgxv.rs:12:46\n   |\n12 |     s.chars().enumerate().filter(|&(_,\
    \ c)| c.is_upper()).map(|(i, c)| c).sum()\n   |                              \
    \                ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: the trait bound `isize: Sum<char>` is\
    \ not satisfied\n    --> /tmp/tmpi9fwfgxv.rs:12:74\n     |\n12   |     s.chars().enumerate().filter(|&(_,\
    \ c)| c.is_upper()).map(|(i, c)| c).sum()\n     |                            \
    \                                              ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ counter = s.chars().filter(|&c| c >= '0' && c <= '9').count();\n    while counter\
    \ > 0 {\n        counter -= 1;\n        s -= &s[counter..counter + 1];\n    }\n\
    \    s.chars().filter(|&c| c >= 'a' && c <= 'z').count()\n}\n\nfn main() {\n \
    \   let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `-=` cannot be applied to type\
    \ `String`\n  --> /tmp/tmpmynot8yr.rs:15:9\n   |\n15 |         s -= &s[counter..counter\
    \ + 1];\n   |         -^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |         |\n   |    \
    \     cannot use `-=` on type `String`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpmynot8yr.rs:17:5\n   |\n11 | fn digitSum(s: String) -> isize {\n   |\
    \                           ----- expected `isize` because of return type\n...\n\
    17 |     s.chars().filter(|&c| c >= 'a' && c <= 'z').count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n17 |     s.chars().filter(|&c|\
    \ c >= 'a' && c <= 'z').count().try_into().unwrap()\n   |                    \
    \                                    ++++++++++++++++++++\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ result = 0;\n    for ch in s.chars() {\n        if ch.is_upper() {\n       \
    \     result += ch.code();\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpvjrhxvjf.rs:14:15\n   |\n14 |         if ch.is_upper()\
    \ {\n   |               ^^^^^^^^ help: there is an associated function with a\
    \ similar name: `is_uppercase`\n\nerror[E0599]: no method named `code` found for\
    \ type `char` in the current scope\n  --> /tmp/tmpvjrhxvjf.rs:15:26\n   |\n15\
    \ |             result += ch.code();\n   |                          ^^^^ method\
    \ not found in `char`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for (i, c) in s.chars().enumerate() {\n        if c.is_upper()\
    \ {\n            sum += c - '0';\n        } else {\n            sum += c.to_ascii_uppercase().to_usize()\
    \ - '0';\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpfehtvjpx.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0369]: cannot subtract `char` from `char`\n \
    \ --> /tmp/tmpfehtvjpx.rs:15:22\n   |\n15 |             sum += c - '0';\n   |\
    \                    - ^ --- char\n   |                    |\n   |           \
    \         char\n\nerror[E0599]: no method named `to_usize` found for type `char`\
    \ in the current scope\n  --> /tmp/tmpfehtvjpx.rs:17:43\n   |\n17 |          \
    \   sum += c.to_ascii_uppercase().to_usize() - '0';\n   |                    \
    \                       ^^^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0369, E0599.\n\
    For more information about an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c < 64).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ofrrd1w.rs:12:30\n   |\n\
    12 |     s.chars().filter(|c| c < 64).sum()\n   |                            \
    \  ^^ expected `&char`, found integer\n\nerror[E0277]: the trait bound `isize:\
    \ Sum<char>` is not satisfied\n    --> /tmp/tmp8ofrrd1w.rs:12:34\n     |\n12 \
    \  |     s.chars().filter(|c| c < 64).sum()\n     |                          \
    \        ^^^ the trait `Sum<char>` is not implemented for `isize`\n     |\n  \
    \   = help: the following other types implement trait `Sum<A>`:\n            \
    \   <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as\
    \ Sum<&'a f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a\
    \ i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n\
    \               <i16 as Sum>\n             and 20 others\nnote: required by a\
    \ bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.length()\n\
    \        .iter()\n        .filter_map(|c| c as u32)\n        .filter_map(|c| c.checked_add(c\
    \ - 32) as u32)\n        .sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpqpy3_4j3.rs:12:7\n   |\n12 |     s.length()\n \
    \  |       ^^^^^^ help: there is an associated function with a similar name: `len`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c >= '0' && c <= '9').sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps7nijw4f.rs:12:31\n   |\n\
    12 |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'0'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmps7nijw4f.rs:12:43\n   |\n12 |     s.chars().filter(|c| c >= '0'\
    \ && c <= '9').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'9'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmps7nijw4f.rs:12:48\n\
    \     |\n12   |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvxc8uf7h.rs:12:31\n   |\n\
    12 |     s.chars().filter(|c| c >= 'a' && c <= 'z').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'a'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpvxc8uf7h.rs:12:43\n   |\n12 |     s.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'z'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpvxc8uf7h.rs:12:48\n\
    \     |\n12   |     s.chars().filter(|c| c >= 'a' && c <= 'z').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0usize;\n    for (i, c) in s.chars().enumerate() {\n        if i > 0 &&\
    \ c >= 'A' && c <= 'Z' {\n            sum += c - 'A';\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmp319w2y9a.rs:15:22\n\
    \   |\n15 |             sum += c - 'A';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp319w2y9a.rs:18:12\n   |\n11 | fn digitSum(s: String) ->\
    \ isize {\n   |                           ----- expected `isize` because of return\
    \ type\n...\n18 |     return sum;\n   |            ^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n18 |     return sum.try_into().unwrap();\n\
    \   |               ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    digitSum_helper(&s[..],\
    \ s.len() as usize)\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `digitSum_helper` in this scope\n  -->\
    \ /tmp/tmpuvoir6pk.rs:12:5\n   |\n12 |     digitSum_helper(&s[..], s.len() as\
    \ usize)\n   |     ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        let code = (c.code() as i32).wrapping_add(32);\n\
    \        sum += if code > 'z' { code - 'z' + 1 } else { code };\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `code` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpck9sqszu.rs:14:23\n   |\n14 |         let code = (c.code()\
    \ as i32).wrapping_add(32);\n   |                       ^^^^ method not found\
    \ in `char`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().fold(0,\
    \ |acc, x| acc + x.as_byte().to_ascii_uppercase().or_insert(0u));\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error: invalid suffix `u` for number literal\n  --> /tmp/tmp0a2d0u4i.rs:12:81\n\
    \   |\n12 |     s.chars().fold(0, |acc, x| acc + x.as_byte().to_ascii_uppercase().or_insert(0u));\n\
    \   |                                                                        \
    \         ^^ invalid suffix `u`\n   |\n   = help: the suffix must be one of the\
    \ numeric types (`u32`, `isize`, `f32`, etc.)\n\nerror[E0599]: no method named\
    \ `as_byte` found for type `char` in the current scope\n  --> /tmp/tmp0a2d0u4i.rs:12:40\n\
    \   |\n12 |     s.chars().fold(0, |acc, x| acc + x.as_byte().to_ascii_uppercase().or_insert(0u));\n\
    \   |                                        ^^^^^^^ method not found in `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0a2d0u4i.rs:11:27\n   |\n11 |\
    \ fn digitSum(s: String) -> isize {\n   |    --------               ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n12 |     s.chars().fold(0, |acc, x| acc\
    \ + x.as_byte().to_ascii_uppercase().or_insert(0u));\n   |                   \
    \                                                                  - help: remove\
    \ this semicolon\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ result = s.len();\n    let mut accum = s.len() as isize;\n\n    for c in s.chars()\
    \ {\n        if c.is_uppercase() {\n            result -= c.to_ascii_digit().unwrap();\n\
    \        } else {\n            accum += c.to_ascii_digit().unwrap();\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_ascii_digit` found for type `char` in\
    \ the current scope\n  --> /tmp/tmp1es9bex3.rs:17:25\n   |\n17 |             result\
    \ -= c.to_ascii_digit().unwrap();\n   |                         ^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `to_digit`\n\nerror[E0599]:\
    \ no method named `to_ascii_digit` found for type `char` in the current scope\n\
    \  --> /tmp/tmp1es9bex3.rs:19:24\n   |\n19 |             accum += c.to_ascii_digit().unwrap();\n\
    \   |                        ^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `to_digit`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1es9bex3.rs:22:5\n\
    \   |\n11 | fn digitSum(s: String) -> isize {\n   |                          \
    \ ----- expected `isize` because of return type\n...\n22 |     result\n   |  \
    \   ^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n22 |     result.try_into().unwrap()\n\
    \   |           ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for (i, &c) in s.chars().enumerate() {\n        if c > '9' {\n\
    \            sum += c - '0';\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxsraa1i_.rs:13:13\n   |\n\
    13 |     for (i, &c) in s.chars().enumerate() {\n   |             ^^     ---------------------\
    \ this expression has type `Option<(usize, char)>`\n   |             |\n   | \
    \            expected `char`, found reference\n   |             help: you can\
    \ probably remove the explicit borrow: `c`\n   |\n   = note:   expected type `char`\n\
    \           found reference `&_`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ total = 0;\n    for c in s.chars() {\n        if c > 'Z' {\n            total\
    \ += c - 'A' + 1;\n        }\n    }\n    return total;\n}\n\nfn main() {\n   \
    \ let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmp4jp8qr3z.rs:15:24\n\
    \   |\n15 |             total += c - 'A' + 1;\n   |                      - ^ ---\
    \ char\n   |                      |\n   |                      char\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0 as isize;\n    for ch in s.chars() {\n        sum += ch.to_ascii_upper()\
    \ as isize;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_ascii_upper` found for type `char` in\
    \ the current scope\n  --> /tmp/tmpqfdzdxhu.rs:14:19\n   |\n14 |         sum +=\
    \ ch.to_ascii_upper() as isize;\n   |                   ^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `to_ascii_uppercase`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for i in s.chars() {\n        if i.is_uppercase() {\n        \
    \    sum += i.to_ascii_digit().unwrap();\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_ascii_digit` found for type `char` in\
    \ the current scope\n  --> /tmp/tmp5yt2kn8a.rs:15:22\n   |\n15 |             sum\
    \ += i.to_ascii_digit().unwrap();\n   |                      ^^^^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `to_digit`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    digitSum(s.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<Vec<_>>(), 0)\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \  --> /tmp/tmp4l0w7lfg.rs:12:5\n   |\n12 |     digitSum(s.chars().filter(|c|\
    \ !c.is_whitespace()).collect::<Vec<_>>(), 0)\n   |     ^^^^^^^^ ------------------------------------------------------------\
    \  - supplied 2 arguments\n   |     |\n   |     expected 1 argument\n   |\nnote:\
    \ function defined here\n  --> /tmp/tmp4l0w7lfg.rs:11:4\n   |\n11 | fn digitSum(s:\
    \ String) -> isize {\n   |    ^^^^^^^^ ---------\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ result = usize::MAX;\n    s.chars()\n        .filter(|c| c >= 'a' && c <= 'z')\n\
    \        .for_each(|c| {\n            if c >= 'A' && c <= 'Z' {\n            \
    \    result += c - 'A' + 10;\n            } else {\n                result +=\
    \ c - 'a' + 10;\n            }\n        });\n    result\n}\n\nfn main() {\n  \
    \  let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpogciqi4n.rs:14:26\n   |\n\
    14 |         .filter(|c| c >= 'a' && c <= 'z')\n   |                         \
    \ ^^^\n   |                          |\n   |                          expected\
    \ `&char`, found `char`\n   |                          help: consider borrowing\
    \ here: `&'a'`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpogciqi4n.rs:14:38\n\
    \   |\n14 |         .filter(|c| c >= 'a' && c <= 'z')\n   |                  \
    \                    ^^^\n   |                                      |\n   |  \
    \                                    expected `&char`, found `char`\n   |    \
    \                                  help: consider borrowing here: `&'z'`\n\nerror[E0369]:\
    \ cannot subtract `char` from `char`\n  --> /tmp/tmpogciqi4n.rs:17:29\n   |\n\
    17 |                 result += c - 'A' + 10;\n   |                           -\
    \ ^ --- char\n   |                           |\n   |                         \
    \  char\n\nerror[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpogciqi4n.rs:19:29\n\
    \   |\n19 |                 result += c - 'a' + 10;\n   |                    \
    \       - ^ --- char\n   |                           |\n   |                 \
    \          char\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpogciqi4n.rs:22:5\n\
    \   |\n11 | fn digitSum(s: String) -> isize {\n   |                          \
    \ ----- expected `isize` because of return type\n...\n22 |     result\n   |  \
    \   ^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n22 |     result.try_into().unwrap()\n\
    \   |           ++++++++++++++++++++\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    digitSum_impl(s,\
    \ 0, s.len(), 0)\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `digitSum_impl` in this scope\n  -->\
    \ /tmp/tmptr6xewx8.rs:12:5\n   |\n12 |     digitSum_impl(s, 0, s.len(), 0)\n \
    \  |     ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    let len = s.len();\n    for i in 0..len {\n        let ch = s[i];\n\
    \        if ch >= 'A' && ch <= 'Z' {\n            sum += ch - 'A' as isize;\n\
    \        } else if ch >= 'a' && ch <= 'z' {\n            sum += ch - 'a' as isize;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp_wq9id13.rs:15:18\n\
    \   |\n15 |         let ch = s[i];\n   |                  ^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ total = 0usize;\n    for c in s.chars() {\n        total += c as isize - 'A'\
    \ as isize;\n    }\n    total\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx0stzkfq.rs:14:18\n   |\n\
    14 |         total += c as isize - 'A' as isize;\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot add-assign `isize` to\
    \ `usize`\n  --> /tmp/tmpx0stzkfq.rs:14:15\n   |\n14 |         total += c as isize\
    \ - 'A' as isize;\n   |               ^^ no implementation for `usize += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpx0stzkfq.rs:16:5\n   |\n11 | fn\
    \ digitSum(s: String) -> isize {\n   |                           ----- expected\
    \ `isize` because of return type\n...\n16 |     total\n   |     ^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n16 |     total.try_into().unwrap()\n\
    \   |          ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').sum().wrapping_add(digitSum(s.chars().filter(|c| *c\
    \ >= 'A' && *c <= 'Z').sum().wrapping_add(*c)))\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpvssscri6.rs:12:143\n\
    \   |\n12 | ... 'A' && *c <= 'Z').sum().wrapping_add(*c)))\n   |             \
    \                              ^ help: a local variable with a similar name exists:\
    \ `s`\n\nerror[E0282]: type annotations needed\n  --> /tmp/tmpvssscri6.rs:12:50\n\
    \   |\n12 | ...*c >= 'a' && *c <= 'z').sum().wrapping_add(digitSum(s.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').sum().wrapping_add(*c)))\n   |                     \
    \       ^^^ cannot infer type for type parameter `S` declared on the associated\
    \ function `sum`\n   |\n   = note: type must be known at this point\nhelp: consider\
    \ specifying the type argument in the method call\n   |\n12 |     s.chars().filter(|c|\
    \ *c >= 'a' && *c <= 'z').sum::<S>().wrapping_add(digitSum(s.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').sum().wrapping_add(*c)))\n   |                     \
    \                                +++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0282, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwofvgj16.rs:12:31\n   |\n\
    12 |     s.chars().filter(|c| c >= 'a' && c <= 'z').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'a'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwofvgj16.rs:12:43\n   |\n12 |     s.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'z'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpwofvgj16.rs:12:48\n\
    \     |\n12   |     s.chars().filter(|c| c >= 'a' && c <= 'z').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for &c in s.chars() {\n        if !c.is_ascii_uppercase() {\n\
    \            continue;\n        }\n        sum += c.code().unwrap() as isize;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn3y0pig9.rs:13:9\n   |\n\
    13 |     for &c in s.chars() {\n   |         ^^    --------- this expression has\
    \ type `Option<char>`\n   |         |\n   |         expected `char`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `c`\n   |\n \
    \  = note:   expected type `char`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    digits.iter()\n\
    \        .fold(0, |sum, c| sum + c.to_ascii_digit(s.chars().count()))\n}\n\nfn\
    \ main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `digits` in this scope\n  --> /tmp/tmpfbe67e1g.rs:12:5\n\
    \   |\n12 |     digits.iter()\n   |     ^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if !c.is_ascii_upper() {\n     \
    \       continue;\n        }\n        sum += c.to_ascii_uppercase().unwrap() as\
    \ isize;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_upper` found for type `char` in\
    \ the current scope\n  --> /tmp/tmpjv73nhdg.rs:14:15\n   |\n14 |         if !c.is_ascii_upper()\
    \ {\n   |               ^^^^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `is_ascii`\n\nerror[E0599]: no method named `unwrap` found for\
    \ type `char` in the current scope\n  --> /tmp/tmpjv73nhdg.rs:17:39\n   |\n17\
    \ |         sum += c.to_ascii_uppercase().unwrap() as isize;\n   |           \
    \                            ^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let len\
    \ = s.len();\n    if len == 0 {\n        return 0;\n    }\n\n    let mut sum =\
    \ 0;\n    let mut last_ascii_code = s.chars().last().unwrap();\n    for i in s.chars().skip(len\
    \ - 1).rev() {\n        if i > (last_ascii_code as isize) + 1 {\n            return\
    \ -1;\n        }\n        last_ascii_code += 1;\n        sum += last_ascii_code;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n\
    \    --> /tmp/tmpikb8o6s9.rs:19:38\n     |\n19   |     for i in s.chars().skip(len\
    \ - 1).rev() {\n     |                                      ^^^ the trait `ExactSizeIterator`\
    \ is not implemented for `Chars<'_>`\n     |\n     = help: the following other\
    \ types implement trait `ExactSizeIterator`:\n               &mut I\n        \
    \       Args\n               ArgsOs\n               ArrayChunks<'_, T, N>\n  \
    \             ArrayChunksMut<'_, T, N>\n               ArrayWindows<'_, T, N>\n\
    \               Box<I, A>\n               Chunks<'_, T>\n             and 109\
    \ others\n     = note: required because of the requirements on the impl of `DoubleEndedIterator`\
    \ for `Skip<Chars<'_>>`\nnote: required by a bound in `rev`\n\nerror[E0277]: the\
    \ trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n  --> /tmp/tmpikb8o6s9.rs:19:14\n\
    \   |\n19 |     for i in s.chars().skip(len - 1).rev() {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ the trait `ExactSizeIterator` is not implemented for `Chars<'_>`\n   |\n   =\
    \ help: the following other types implement trait `ExactSizeIterator`:\n     \
    \        &mut I\n             Args\n             ArgsOs\n             ArrayChunks<'_,\
    \ T, N>\n             ArrayChunksMut<'_, T, N>\n             ArrayWindows<'_,\
    \ T, N>\n             Box<I, A>\n             Chunks<'_, T>\n           and 109\
    \ others\n   = note: required because of the requirements on the impl of `DoubleEndedIterator`\
    \ for `Skip<Chars<'_>>`\n   = note: required because of the requirements on the\
    \ impl of `Iterator` for `Rev<Skip<Chars<'_>>>`\n   = note: required because of\
    \ the requirements on the impl of `IntoIterator` for `Rev<Skip<Chars<'_>>>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpikb8o6s9.rs:20:16\n   |\n20 |  \
    \       if i > (last_ascii_code as isize) + 1 {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `char`\n  --> /tmp/tmpikb8o6s9.rs:23:9\n   |\n\
    23 |         last_ascii_code += 1;\n   |  "
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase() {\n  \
    \          sum += c.as_bytes().iter().map(|c| c as i16).sum();\n        }\n  \
    \  }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `as_bytes` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpqb9zsi2h.rs:15:22\n   |\n15 |             sum += c.as_bytes().iter().map(|c|\
    \ c as i16).sum();\n   |                      ^^^^^^^^ method not found in `char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    digits(s).iter().sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `digits` in this scope\n  --> /tmp/tmp1xmt9ycf.rs:12:5\n\
    \   |\n12 |     digits(s).iter().sum()\n   |     ^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    digitSum(s.chars().map(|c|\
    \ c.to_digit()).collect::<Vec<_>>()).unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpgd_lxcd5.rs:12:34\n    |\n12  |     digitSum(s.chars().map(|c|\
    \ c.to_digit()).collect::<Vec<_>>()).unwrap()\n    |                         \
    \         ^^^^^^^^- supplied 0 arguments\n    |                              \
    \    |\n    |                                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgd_lxcd5.rs:12:14\n\
    \   |\n12 |     digitSum(s.chars().map(|c| c.to_digit()).collect::<Vec<_>>()).unwrap()\n\
    \   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `String`, found struct `Vec`\n   |\n   = note: expected struct `String`\n\
    \              found struct `Vec<Option<u32>>`\n\nerror[E0599]: no method named\
    \ `unwrap` found for type `isize` in the current scope\n  --> /tmp/tmpgd_lxcd5.rs:12:67\n\
    \   |\n12 |     digitSum(s.chars().map(|c| c.to_digit()).collect::<Vec<_>>()).unwrap()\n\
    \   |                                                                   ^^^^^^\
    \ method not found in `isize`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0061, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum: usize = 0;\n\n    for c in s.chars() {\n        if c > '9' {\n        \
    \    sum += c - '0';\n        } else {\n            sum += 10 - c - 'a' + 1;\n\
    \        }\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpyxfpt0yq.rs:16:22\n\
    \   |\n16 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror[E0277]: cannot\
    \ subtract `char` from `{integer}`\n  --> /tmp/tmpyxfpt0yq.rs:18:23\n   |\n18\
    \ |             sum += 10 - c - 'a' + 1;\n   |                       ^ no implementation\
    \ for `{integer} - char`\n   |\n   = help: the trait `Sub<char>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfpt0yq.rs:22:5\n\
    \   |\n11 | fn digitSum(s: String) -> isize {\n   |                          \
    \ ----- expected `isize` because of return type\n...\n22 |     sum\n   |     ^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n22 |     sum.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for &c in s.chars() {\n        sum += c as isize;\n    }\n   \
    \ sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkwd7el_6.rs:13:9\n   |\n\
    13 |     for &c in s.chars() {\n   |         ^^    --------- this expression has\
    \ type `Option<char>`\n   |         |\n   |         expected `char`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `c`\n   |\n \
    \  = note:   expected type `char`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().map(|c|\
    \ c.to_digit(10)).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<Option<u32>>` is not satisfied\n\
    \    --> /tmp/tmpbo0mp05n.rs:12:39\n     |\n12   |     s.chars().map(|c| c.to_digit(10)).sum()\n\
    \     |                                       ^^^ the trait `Sum<Option<u32>>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n   \
    \ --> /tmp/tmp_zrccl_e.rs:12:50\n     |\n12   |     s.chars().filter(|c| *c >=\
    \ 'A' && *c <= 'Z').sum()\n     |                                            \
    \      ^^^ the trait `Sum<char>` is not implemented for `isize`\n     |\n    \
    \ = help: the following other types implement trait `Sum<A>`:\n              \
    \ <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a\
    \ f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n\
    \               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n        \
    \       <i16 as Sum>\n             and 20 others\nnote: required by a bound in\
    \ `std::iter::Iterator::sum`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n\n    for c in s.chars() {\n        if c.is_upper() {\n          \
    \  sum += c.to_digit(10);\n        }\n    }\n\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpb6m6mb9p.rs:15:14\n   |\n15 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpb6m6mb9p.rs:16:17\n   |\n16 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for ch in s {\n        sum += ch.to_ascii_digit().unwrap();\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `String` is not an iterator\n  --> /tmp/tmpb7c8cpo1.rs:13:15\n\
    \   |\n13 |     for ch in s {\n   |               ^ `String` is not an iterator;\
    \ try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator`\
    \ is not implemented for `String`\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if !c.is_upper() {\n           \
    \ sum += c.as_bytes().last().unwrap() as isize;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp_shpmiwq.rs:14:15\n   |\n14 |         if !c.is_upper()\
    \ {\n   |               ^^^^^^^^ help: there is an associated function with a\
    \ similar name: `is_uppercase`\n\nerror[E0599]: no method named `as_bytes` found\
    \ for type `char` in the current scope\n  --> /tmp/tmp_shpmiwq.rs:15:22\n   |\n\
    15 |             sum += c.as_bytes().last().unwrap() as isize;\n   |         \
    \             ^^^^^^^^ method not found in `char`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    if s.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    let len = s.len();\n\
    \    for i in 0..len {\n        if s[i..].is_uppercase().any() {\n           \
    \ sum += s[i..].chars().filter(|&c| c == 'A'..='Z').count() as isize;\n      \
    \  }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_uppercase` found for type `str` in the\
    \ current scope\n  --> /tmp/tmpp5cfse04.rs:18:19\n   |\n18 |         if s[i..].is_uppercase().any()\
    \ {\n   |                   ^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `to_uppercase`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpp5cfse04.rs:19:58\n   |\n19 |             sum += s[i..].chars().filter(|&c|\
    \ c == 'A'..='Z').count() as isize;\n   |                                    \
    \                      ^^^ expected `bool`, found `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpp5cfse04.rs:19:47\n   |\n19 |             sum += s[i..].chars().filter(|&c|\
    \ c == 'A'..='Z').count() as isize;\n   |                                    \
    \           ^^^^^^^^^^^^^^ expected `bool`, found struct `RangeInclusive`\n  \
    \ |\n   = note: expected type `bool`\n            found struct `RangeInclusive<bool>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let len\
    \ = s.len();\n    let mut sum = 0;\n\n    for i in 0..len {\n        let c1 =\
    \ s.chars().nth(i);\n        match c1 {\n            'A' | 'a' => sum += 32,\n\
    \            'B' | 'b' => sum += 16,\n            'C' | 'c' => sum += 8,\n   \
    \         'D' | 'd' => sum += 4,\n            'E' | 'e' => sum += 2,\n       \
    \     'F' | 'f' => sum += 1,\n            _ => continue,\n        }\n    }\n\n\
    \    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw2rjnxx5.rs:18:13\n   |\n\
    17 |         match c1 {\n   |               -- this expression has type `Option<char>`\n\
    18 |             'A' | 'a' => sum += 32,\n   |             ^^^ expected enum `Option`,\
    \ found `char`\n   |\n   = note: expected enum `Option<char>`\n              found\
    \ type `char`\nhelp: try wrapping the pattern in `Some`\n   |\n18 |          \
    \   Some('A') | 'a' => sum += 32,\n   |             +++++   +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw2rjnxx5.rs:18:19\n   |\n17 |         match\
    \ c1 {\n   |               -- this expression has type `Option<char>`\n18 |  \
    \           'A' | 'a' => sum += 32,\n   |                   ^^^ expected enum\
    \ `Option`, found `char`\n   |\n   = note: expected enum `Option<char>`\n    \
    \          found type `char`\nhelp: try wrapping the pattern in `Some`\n   |\n\
    18 |             'A' | Some('a') => sum += 32,\n   |                   +++++ \
    \  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw2rjnxx5.rs:19:13\n   |\n\
    17 |         match c1 {\n   |               -- this expression has type `Option<char>`\n\
    18 |             'A' | 'a' => sum += 32,\n19 |             'B' | 'b' => sum +=\
    \ 16,\n   |             ^^^ expected enum `Option`, found `char`\n   |\n   = note:\
    \ expected enum `Option<char>`\n              found type `char`\nhelp: try wrapping\
    \ the pattern in `Some`\n   |\n19 |             Some('B') | 'b' => sum += 16,\n\
    \   |             +++++   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw2rjnxx5.rs:19:19\n\
    \   |\n17 |         match c1 {\n   |               -- this expression has type\
    \ `Option<char>`\n18 |             'A' | 'a' => sum += 32,\n19 |             'B'\
    \ | 'b' => sum += 16,\n   |                   ^^^ expected enum `Option`, found\
    \ `char`\n   |\n   = note: expected enum `Option<char>`\n              found type\
    \ `char`\nhelp: try wrapping the pattern in `Some`\n   |\n19 |             'B'\
    \ | Some('b') => sum += 16,\n   |                   +++++   +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw2rjnxx5.rs:20:13\n   |\n17 |         match\
    \ c1 {\n   |               -- this expression has type"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for (i, c) in s.chars().enumerate() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit();\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpw4rglfcq.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpw4rglfcq.rs:15:22\n    |\n15  |             sum\
    \ += c.to_digit();\n    |                      ^^^^^^^^- supplied 0 arguments\n\
    \    |                      |\n    |                      expected 1 argument\n\
    \    |\nnote: associated function defined here\n\nerror[E0277]: cannot add-assign\
    \ `Option<u32>` to `{integer}`\n  --> /tmp/tmpw4rglfcq.rs:15:17\n   |\n15 |  \
    \           sum += c.to_digit();\n   |                 ^^ no implementation for\
    \ `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0061, E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c > '9').map(|c| c as usize + 10).sum::<usize>()\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmohejwrz.rs:12:30\n   |\n\
    12 |     s.chars().filter(|c| c > '9').map(|c| c as usize + 10).sum::<usize>()\n\
    \   |                              ^^^\n   |                              |\n\
    \   |                              expected `&char`, found `char`\n   |      \
    \                        help: consider borrowing here: `&'9'`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmohejwrz.rs:12:5\n   |\n11 | fn digitSum(s:\
    \ String) -> isize {\n   |                           ----- expected `isize` because\
    \ of return type\n12 |     s.chars().filter(|c| c > '9').map(|c| c as usize +\
    \ 10).sum::<usize>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     s.chars().filter(|c|\
    \ c > '9').map(|c| c as usize + 10).sum::<usize>().try_into().unwrap()\n   | \
    \                                                                         ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    match s\
    \ {\n        s @ \"\" => 0,\n        s @ c => s.chars().filter(|x| x >= 'A' &&\
    \ x <= 'Z').count(),\n    }\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps51mkxzl.rs:13:13\n   |\n\
    12 |     match s {\n   |           - this expression has type `String`\n13 | \
    \        s @ \"\" => 0,\n   |             ^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmps51mkxzl.rs:14:44\n   |\n14 |\
    \         s @ c => s.chars().filter(|x| x >= 'A' && x <= 'Z').count(),\n   | \
    \                                           ^^^\n   |                        \
    \                    |\n   |                                            expected\
    \ `&char`, found `char`\n   |                                            help:\
    \ consider borrowing here: `&'A'`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps51mkxzl.rs:14:56\n\
    \   |\n14 |         s @ c => s.chars().filter(|x| x >= 'A' && x <= 'Z').count(),\n\
    \   |                                                        ^^^\n   |       \
    \                                                 |\n   |                    \
    \                                    expected `&char`, found `char`\n   |    \
    \                                                    help: consider borrowing\
    \ here: `&'Z'`\n\nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmps51mkxzl.rs:14:18\n\
    \   |\n12 | /     match s {\n13 | |         s @ \"\" => 0,\n   | |           \
    \        - this is found to be of type `isize`\n14 | |         s @ c => s.chars().filter(|x|\
    \ x >= 'A' && x <= 'Z').count(),\n   | |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n15 | |     }\n   | |_____- `match` arms have\
    \ incompatible types\n   |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n14 |         s @ c => s.chars().filter(|x|\
    \ x >= 'A' && x <= 'Z').count().try_into().unwrap(),\n   |                   \
    \                                                 ++++++++++++++++++++\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c.is_ascii_uppercase()).sum::<isize>()\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n   \
    \ --> /tmp/tmp5s9ngb05.rs:12:50\n     |\n12   |     s.chars().filter(|c| c.is_ascii_uppercase()).sum::<isize>()\n\
    \     |                                                  ^^^ the trait `Sum<char>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.as_bytes().last().unwrap();\n        } else {\n            sum += c.as_bytes().last().unwrap()\
    \ - 32;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp6pmummh2.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0599]: no method named `as_bytes` found for type\
    \ `char` in the current scope\n  --> /tmp/tmp6pmummh2.rs:15:22\n   |\n15 |   \
    \          sum += c.as_bytes().last().unwrap();\n   |                      ^^^^^^^^\
    \ method not found in `char`\n\nerror[E0599]: no method named `as_bytes` found\
    \ for type `char` in the current scope\n  --> /tmp/tmp6pmummh2.rs:17:22\n   |\n\
    17 |             sum += c.as_bytes().last().unwrap() - 32;\n   |             \
    \         ^^^^^^^^ method not found in `char`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for i in s.chars().filter(|c| *c >= '0' && *c <= '9') {\n    \
    \    sum += *i as isize;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpb2u6b1p8.rs:14:16\n\
    \   |\n14 |         sum += *i as isize;\n   |                ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i > 0 && c.is_uppercase()\
    \ && !s.chars().skip_while(|&c| *c != *c).last().unwrap().is_uppercase() {\n \
    \           sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpizivjjtu.rs:14:68\n\
    \   |\n14 |         if i > 0 && c.is_uppercase() && !s.chars().skip_while(|&c|\
    \ *c != *c).last().unwrap().is_uppercase() {\n   |                           \
    \                                         ^^\n\nerror[E0614]: type `char` cannot\
    \ be dereferenced\n  --> /tmp/tmpizivjjtu.rs:14:74\n   |\n14 |         if i >\
    \ 0 && c.is_uppercase() && !s.chars().skip_while(|&c| *c != *c).last().unwrap().is_uppercase()\
    \ {\n   |                                                                    \
    \      ^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpizivjjtu.rs:18:5\n\
    \   |\n11 | fn digitSum(s: String) -> isize {\n   |                          \
    \ ----- expected `isize` because of return type\n...\n18 |     sum\n   |     ^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n18 |     sum.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|&x|\
    \ x > 64 && x < 128).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_h0dizw4.rs:12:31\n   |\n\
    12 |     s.chars().filter(|&x| x > 64 && x < 128).sum()\n   |                \
    \               ^^ expected `char`, found `u8`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_h0dizw4.rs:12:41\n   |\n12 |     s.chars().filter(|&x| x > 64\
    \ && x < 128).sum()\n   |                                         ^^^ expected\
    \ `char`, found `u8`\n\nerror[E0277]: the trait bound `isize: Sum<char>` is not\
    \ satisfied\n    --> /tmp/tmp_h0dizw4.rs:12:46\n     |\n12   |     s.chars().filter(|&x|\
    \ x > 64 && x < 128).sum()\n     |                                           \
    \   ^^^ the trait `Sum<char>` is not implemented for `isize`\n     |\n     = help:\
    \ the following other types implement trait `Sum<A>`:\n               <f32 as\
    \ Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n\
    \               <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n       \
    \        <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16\
    \ as Sum>\n             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for i in s.chars().filter(|c| *c >= 'A' && *c <= 'Z').take(s.size())\
    \ {\n        sum += *i as isize;\n    }\n    return sum;\n}\n\nfn main() {\n \
    \   let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp2vy3ulw0.rs:13:66\n   |\n13 |     for i in s.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').take(s.size()) {\n   |                             \
    \                                     ^^^^ method not found in `String`\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n  --> /tmp/tmp2vy3ulw0.rs:14:16\n   |\n\
    14 |         sum += *i as isize;\n   |                ^^\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0614.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().map(|c|\
    \ c.to_ascii_digit()).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_ascii_digit` found for type `char` in\
    \ the current scope\n  --> /tmp/tmpd57n7k8w.rs:12:25\n   |\n12 |     s.chars().map(|c|\
    \ c.to_ascii_digit()).sum()\n   |                         ^^^^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `to_digit`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    use std::iter::FromIterator;\n\
    \    let mut sum = s.chars().map(|x| x.to_digit()).sum();\n    sum = sum.to_ascii_lowercase().to_digit().to_ascii_uppercase().to_digit().sum();\n\
    \    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "warning: unused import: `std::iter::FromIterator`\n  --> /tmp/tmpysg5274l.rs:12:9\n\
    \   |\n12 |     use std::iter::FromIterator;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0061]: this\
    \ function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmpysg5274l.rs:13:39\n\
    \    |\n13  |     let mut sum = s.chars().map(|x| x.to_digit()).sum();\n    |\
    \                                       ^^^^^^^^- supplied 0 arguments\n    |\
    \                                       |\n    |                             \
    \          expected 1 argument\n    |\nnote: associated function defined here\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        match c {\n            'A' | 'a'\
    \ => sum += 1,\n            'B' | 'b' => sum += 2,\n            'C' | 'c' => sum\
    \ += 3,\n            'D' | 'd' => sum += 4,\n            'E' | 'e' => sum += 5,\n\
    \            'F' | 'f' => sum += 6,\n            'G' | 'g' => sum += 7,\n    \
    \        'H' | 'h' => sum += 8,\n            'I' | 'i' => sum += 9,\n        \
    \    'J' | 'j' => sum += 10,\n            'K' | 'k' => sum += 11,\n          \
    \  'L' | 'l' => sum += 12,\n            'M' | 'm' => sum += 13,\n            'N'\
    \ | 'n' => sum += 14,\n            'O' | 'o' => sum += 15,\n            'P' |\
    \ 'p' => sum += 16,\n            'Q' | 'q' => sum += 17,\n            'R' | 'r'\
    \ => sum += 18,\n            'S' | 's' => sum += 19,\n            'T' | 't' =>\
    \ sum += 20,\n            'U' | 'u' => sum += 21,\n            'V' | 'v' => sum\
    \ += 22,\n            'W' | 'w' => sum += 23,\n            'X' | 'x' => sum +=\
    \ 24,\n            'Y' | 'y' => sum += 25,\n            'Z' | 'z' => sum += 26,\n\
    \            _ => continue,\n        }\n    }\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `131`', /tmp/tmpcznxftmc.rs:50:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ *c >= '0' && *c <= '9' && *c != '-').sum()\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n   \
    \ --> /tmp/tmp5m49lb3a.rs:12:63\n     |\n12   |     s.chars().filter(|c| *c >=\
    \ '0' && *c <= '9' && *c != '-').sum()\n     |                               \
    \                                ^^^ the trait `Sum<char>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        sum += (c - 'a') as isize;\n   \
    \ }\n    return sum;\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpvsme_75j.rs:14:19\n\
    \   |\n14 |         sum += (c - 'a') as isize;\n   |                 - ^ --- char\n\
    \   |                 |\n   |                 char\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().map(|c|\
    \ c.to_digit(10)).sum::<isize>()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<Option<u32>>` is not satisfied\n\
    \    --> /tmp/tmpkvw1o8kv.rs:12:39\n     |\n12   |     s.chars().map(|c| c.to_digit(10)).sum::<isize>()\n\
    \     |                                       ^^^ the trait `Sum<Option<u32>>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum: isize = 0;\n    let mut s = String::from(s);\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i > 0 && sum > 122 {\n            return sum;\n        }\n   \
    \     sum += c;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `char` to `isize`\n  --> /tmp/tmpi7tp2www.rs:18:13\n\
    \   |\n18 |         sum += c;\n   |             ^^ no implementation for `isize\
    \ += char`\n   |\n   = help: the trait `AddAssign<char>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').map(|c| c - 'a' as isize).sum()\n}\n\nfn main() {\n  \
    \  let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpce9vayth.rs:12:31\n   |\n\
    12 |     s.chars().filter(|c| c >= 'a' && c <= 'z').map(|c| c - 'a' as isize).sum()\n\
    \   |                               ^^^\n   |                               |\n\
    \   |                               expected `&char`, found `char`\n   |     \
    \                          help: consider borrowing here: `&'a'`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpce9vayth.rs:12:43\n   |\n12 |     s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').map(|c| c - 'a' as isize).sum()\n   |                \
    \                           ^^^\n   |                                        \
    \   |\n   |                                           expected `&char`, found\
    \ `char`\n   |                                           help: consider borrowing\
    \ here: `&'z'`\n\nerror[E0369]: cannot subtract `isize` from `char`\n  --> /tmp/tmpce9vayth.rs:12:58\n\
    \   |\n12 |     s.chars().filter(|c| c >= 'a' && c <= 'z').map(|c| c - 'a' as\
    \ isize).sum()\n   |                                                        -\
    \ ^ ------------ isize\n   |                                                 \
    \       |\n   |                                                        char\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c <= '9' {\n            sum +=\
    \ c - '0';\n        } else {\n            sum += 10 + c - 'a' - 1;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpj9ijl_23.rs:15:22\n\
    \   |\n15 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror[E0277]: cannot\
    \ add `char` to `{integer}`\n  --> /tmp/tmpj9ijl_23.rs:17:23\n   |\n17 |     \
    \        sum += 10 + c - 'a' - 1;\n   |                       ^ no implementation\
    \ for `{integer} + char`\n   |\n   = help: the trait `Add<char>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        sum += c.to_digit(10).unwrap();\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx6lp34lj.rs:16:5\n   |\n\
    11 | fn digitSum(s: String) -> isize {\n   |                           ----- expected\
    \ `isize` because of return type\n...\n16 |     sum\n   |     ^^^ expected `isize`,\
    \ found `u32`\n   |\nhelp: you can convert a `u32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n16 |     sum.try_into().unwrap()\n  \
    \ |        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    fn digits(s:\
    \ &str) -> Option<usize> {\n        if !s.is_empty() {\n            Some(s.chars().filter(|c|\
    \ c.is_ascii_upper()).count())\n        } else {\n            None\n        }\n\
    \    }\n\n    digits(s).unwrap()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnn3lqa19.rs:20:12\n   |\n\
    20 |     digits(s).unwrap()\n   |            ^\n   |            |\n   |      \
    \      expected `&str`, found struct `String`\n   |            help: consider\
    \ borrowing here: `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnn3lqa19.rs:20:5\n\
    \   |\n11 | fn digitSum(s: String) -> isize {\n   |                          \
    \ ----- expected `isize` because of return type\n...\n20 |     digits(s).unwrap()\n\
    \   |     ^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n20 |     digits(s).unwrap().try_into().unwrap()\n   |           \
    \            ++++++++++++++++++++\n\nerror[E0599]: no method named `is_ascii_upper`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpnn3lqa19.rs:14:41\n\
    \   |\n14 |             Some(s.chars().filter(|c| c.is_ascii_upper()).count())\n\
    \   |                                         ^^^^^^^^^^^^^^ help: there is an\
    \ associated function with a similar name: `is_ascii`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    loop {\n\
    \        let mut s = s.to_string();\n        s += 'A';\n        loop {\n     \
    \       if s.chars().any(|c| c > 'Z') {\n                break;\n            }\n\
    \            s += '0';\n        }\n        if s.chars().any(|c| c > '9') {\n \
    \           break;\n        }\n        s += '0';\n    }\n    let mut s: String\
    \ = s;\n    loop {\n        s += 'A';\n        loop {\n            if s.chars().any(|c|\
    \ c > 'Z') {\n                break;\n            }\n            s += '0';\n \
    \       }\n        if s.chars().any(|c| c > '9') {\n            break;\n     \
    \   }\n        s += '0';\n    }\n    s.parse()\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsxs000xu.rs:14:14\n   |\n\
    14 |         s += 'A';\n   |              ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    14 |         s += \"A\";\n   |              ~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsxs000xu.rs:19:18\n   |\n19 |             s += '0';\n   |     \
    \             ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant to write\
    \ a `str` literal, use double quotes\n   |\n19 |             s += \"0\";\n   |\
    \                  ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsxs000xu.rs:24:14\n\
    \   |\n24 |         s += '0';\n   |              ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    24 |         s += \"0\";\n   |              ~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsxs000xu.rs:28:14\n   |\n28 |         s += 'A';\n   |         \
    \     ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant to write a `str`\
    \ literal, use double quotes\n   |\n28 |         s += \"A\";\n   |           \
    \   ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsxs000xu.rs:33:18\n \
    \  |\n33 |             s += '0';\n   |                  ^^^ expected `&str`, found\
    \ `char`\n   |\nhelp: if you meant to write a `str` literal, use double quotes\n\
    \   |\n33 |             s += \"0\";\n   |                  ~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsxs000xu.rs:38:14\n   |\n38 |         s += '0';\n\
    \   |              ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n   |\n38 |         s += \"0\";\n\
    \   |              ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsxs000xu.rs:40:5\n\
    \   |\n11 | fn digitSum(s: String) -> isize {\n   |                          \
    \ ----- expected `isize` because of return type\n...\n40 |     s.parse()\n   |\
    \     ^^^^^^^^^ expected `isize`, found enum `Result`\n   |\n   = note: expected\
    \ type `isize`\n              found enum `Result<_, _>`\n\nerror: aborting due\
    \ to 7 previous errors\n\nFor more information about this error, try `rustc --explain "
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().map(|&c|\
    \ c as isize)\n        .filter(|x| x >= '0' && x <= '9')\n        .sum()\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptp0p2ref.rs:12:20\n   |\n\
    12 |     s.chars().map(|&c| c as isize)\n   |                    ^--\n   |   \
    \                 ||\n   |                    |expected due to this\n   |    \
    \                expected `char`, found reference\n   |                    help:\
    \ did you mean `c`: `&char`\n   |\n   = note:   expected type `char`\n       \
    \    found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptp0p2ref.rs:13:26\n\
    \   |\n13 |         .filter(|x| x >= '0' && x <= '9')\n   |                  \
    \        ^^^ expected `&isize`, found `char`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmptp0p2ref.rs:13:38\n   |\n13 |         .filter(|x| x >= '0' && x\
    \ <= '9')\n   |                                      ^^^ expected `&isize`, found\
    \ `char`\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ s: String = s.to_string();\n    let mut sum = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        sum += c as isize - '0';\n        if i < s.len() - 1 {\n        \
    \    s += &s[..i + 1];\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot subtract `char` from `isize`\n  --> /tmp/tmptwlcxqao.rs:15:27\n\
    \   |\n15 |         sum += c as isize - '0';\n   |                           ^\
    \ no implementation for `isize - char`\n   |\n   = help: the trait `Sub<char>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|&c|\
    \ c >= '0' && c <= '9').sum::<usize>()\n}\n\nfn main() {\n    let candidate =\
    \ digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Sum<char>` is not satisfied\n   \
    \ --> /tmp/tmpxr34v3u4.rs:12:49\n     |\n12   |     s.chars().filter(|&c| c >=\
    \ '0' && c <= '9').sum::<usize>()\n     |                                    \
    \             ^^^ the trait `Sum<char>` is not implemented for `usize`\n     |\n\
    \     = help: the following other types implement trait `Sum<A>`:\n          \
    \     <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64\
    \ as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a\
    \ i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n\
    \               <i16 as Sum>\n             and 20 others\nnote: required by a\
    \ bound in `std::iter::Iterator::sum`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxr34v3u4.rs:12:5\n   |\n11 | fn digitSum(s: String) -> isize {\n   |\
    \                           ----- expected `isize` because of return type\n12\
    \ |     s.chars().filter(|&c| c >= '0' && c <= '9').sum::<usize>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     s.chars().filter(|&c|\
    \ c >= '0' && c <= '9').sum::<usize>().try_into().unwrap()\n   |             \
    \                                                  ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ result = isize::zero();\n    for c in s.chars() {\n        if c.is_upper() {\n\
    \            result += c.as_bytes().iter().filter(|&b| b != b'_').count() as isize;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `zero` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpmrdhe978.rs:12:29\n   |\n12 |  \
    \   let mut result = isize::zero();\n   |                             ^^^^ function\
    \ or associated item not found in `isize`\n\nerror[E0599]: no method named `is_upper`\
    \ found for type `char` in the current scope\n  --> /tmp/tmpmrdhe978.rs:14:14\n\
    \   |\n14 |         if c.is_upper() {\n   |              ^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_uppercase`\n\nerror[E0599]:\
    \ no method named `as_bytes` found for type `char` in the current scope\n  -->\
    \ /tmp/tmpmrdhe978.rs:15:25\n   |\n15 |             result += c.as_bytes().iter().filter(|&b|\
    \ b != b'_').count() as isize;\n   |                         ^^^^^^^^ method not\
    \ found in `char`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c.is_ascii()).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n   \
    \ --> /tmp/tmpmidcftva.rs:12:40\n     |\n12   |     s.chars().filter(|c| c.is_ascii()).sum()\n\
    \     |                                        ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ s = s;\n    s.par_iter().filter(|c| c >= 'A' && c <= 'Z').map(|c| c - 'A' as\
    \ isize)\n        .sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `par_iter` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpkgycntch.rs:13:7\n   |\n13 |     s.par_iter().filter(|c|\
    \ c >= 'A' && c <= 'Z').map(|c| c - 'A' as isize)\n   |       ^^^^^^^^ method\
    \ not found in `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    // TODO:\
    \ Write code here.\n    return 0\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `131`', /tmp/tmpaseu3jyy.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n\n    for ch in s.chars() {\n        if ch.is_upper() {\n        \
    \    sum += ch.to_ascii_uppercase().unwrap().to_digit().unwrap();\n        }\n\
    \    }\n\n    return sum;\n}\n\nfn main() {\n    let candidate = digitSum;\n \
    \   assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpryhagzwl.rs:15:15\n   |\n15 |         if ch.is_upper()\
    \ {\n   |               ^^^^^^^^ help: there is an associated function with a\
    \ similar name: `is_uppercase`\n\nerror[E0599]: no method named `unwrap` found\
    \ for type `char` in the current scope\n  --> /tmp/tmpryhagzwl.rs:16:44\n   |\n\
    16 |             sum += ch.to_ascii_uppercase().unwrap().to_digit().unwrap();\n\
    \   |                                            ^^^^^^ method not found in `char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if let Some(d) = c.to_digit(10)\
    \ {\n            sum += *d;\n        }\n    }\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `u32` cannot be dereferenced\n  --> /tmp/tmp9raiq9bd.rs:15:20\n\
    \   |\n15 |             sum += *d;\n   |                    ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for &c in s.as_bytes() {\n        if !c.is_ascii() {\n       \
    \     return 0;\n        }\n        sum += c;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq1nxr2t6.rs:19:5\n   |\n\
    11 | fn digitSum(s: String) -> isize {\n   |                           ----- expected\
    \ `isize` because of return type\n...\n19 |     sum\n   |     ^^^ expected `isize`,\
    \ found `u8`\n   |\nhelp: you can convert a `u8` to an `isize`\n   |\n19 |   \
    \  sum.into()\n   |        +++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    match s.chars().windows(4)\
    \ {\n        None => 0,\n        Some(w) => w.iter().filter(|c| c.is_uppercase()).sum(|c|\
    \ c.code()),\n    }\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `windows` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmpcet4e7ot.rs:12:21\n   |\n12 |     match s.chars().windows(4)\
    \ {\n   |                     ^^^^^^^ method not found in `Chars<'_>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c.is_ascii_uppercase()).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n   \
    \ --> /tmp/tmpo0l39lr1.rs:12:50\n     |\n12   |     s.chars().filter(|c| c.is_ascii_uppercase()).sum()\n\
    \     |                                                  ^^^ the trait `Sum<char>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for ch in s.chars() {\n        if ch >= 'a' && ch <= 'z' {\n \
    \           sum += ch as isize - 'a' as isize;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `131`', /tmp/tmpk98lhgg8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    use std::cmp::Ordering;\n\
    \    use std::ascii::AsciiExt;\n\n    match s.chars().map(|c| c.to_ascii_upper()).fold(0,\
    \ Ordering::Add) {\n        Ok(a) => a,\n        Err(a) => a,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "warning: unused import: `std::ascii::AsciiExt`\n  --> /tmp/tmpsvmhzcnt.rs:13:9\n\
    \   |\n13 |     use std::ascii::AsciiExt;\n   |         ^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(unused_imports)]` on by default\n\nwarning: use of deprecated\
    \ trait `std::ascii::AsciiExt`: use inherent methods instead\n  --> /tmp/tmpsvmhzcnt.rs:13:21\n\
    \   |\n13 |     use std::ascii::AsciiExt;\n   |                     ^^^^^^^^\n\
    \   |\n   = note: `#[warn(deprecated)]` on by default\n\nerror[E0599]: no method\
    \ named `to_ascii_upper` found for type `char` in the current scope\n  --> /tmp/tmpsvmhzcnt.rs:15:31\n\
    \   |\n15 |     match s.chars().map(|c| c.to_ascii_upper()).fold(0, Ordering::Add)\
    \ {\n   |                               ^^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `to_ascii_uppercase`\n\nerror[E0599]: no variant\
    \ or associated item named `Add` found for enum `std::cmp::Ordering` in the current\
    \ scope\n  --> /tmp/tmpsvmhzcnt.rs:15:67\n   |\n15 |     match s.chars().map(|c|\
    \ c.to_ascii_upper()).fold(0, Ordering::Add) {\n   |                         \
    \                                          ^^^ variant or associated item not\
    \ found in `std::cmp::Ordering`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsvmhzcnt.rs:16:9\n\
    \   |\n15 |     match s.chars().map(|c| c.to_ascii_upper()).fold(0, Ordering::Add)\
    \ {\n   |           ------------------------------------------------------------\
    \ this expression has type `{integer}`\n16 |         Ok(a) => a,\n   |       \
    \  ^^^^^ expected integer, found enum `Result`\n   |\n   = note: expected type\
    \ `{integer}`\n              found enum `Result<_, _>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsvmhzcnt.rs:17:9\n   |\n15 |     match s.chars().map(|c|\
    \ c.to_ascii_upper()).fold(0, Ordering::Add) {\n   |           ------------------------------------------------------------\
    \ this expression has type `{integer}`\n16 |         Ok(a) => a,\n17 |       \
    \  Err(a) => a,\n   |         ^^^^^^ expected integer, found enum `Result`\n \
    \  |\n   = note: expected type `{integer}`\n              found enum `Result<_,\
    \ _>`\n\nerror: aborting due "
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for i in s.chars() {\n        if i >= 'A' && i <= 'Z' {\n    \
    \        sum += i - 'A' as isize;\n        } else {\n            sum += i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n \
    \   assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `isize` from `char`\n  --> /tmp/tmpge3kjb9y.rs:15:22\n\
    \   |\n15 |             sum += i - 'A' as isize;\n   |                    - ^\
    \ ------------ isize\n   |                    |\n   |                    char\n\
    \nerror[E0277]: cannot add-assign `char` to `{integer}`\n  --> /tmp/tmpge3kjb9y.rs:17:17\n\
    \   |\n17 |             sum += i;\n   |                 ^^ no implementation for\
    \ `{integer} += char`\n   |\n   = help: the trait `AddAssign<char>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').sum::<isize>()\n}\n\nfn main() {\n    let candidate =\
    \ digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjj6jf5da.rs:12:31\n   |\n\
    12 |     s.chars().filter(|c| c >= 'A' && c <= 'Z').sum::<isize>()\n   |     \
    \                          ^^^\n   |                               |\n   |   \
    \                            expected `&char`, found `char`\n   |            \
    \                   help: consider borrowing here: `&'A'`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjj6jf5da.rs:12:43\n   |\n12 |     s.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').sum::<isize>()\n   |                                 \
    \          ^^^\n   |                                           |\n   |       \
    \                                    expected `&char`, found `char`\n   |    \
    \                                       help: consider borrowing here: `&'Z'`\n\
    \nerror[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpjj6jf5da.rs:12:48\n\
    \     |\n12   |     s.chars().filter(|c| c >= 'A' && c <= 'Z').sum::<isize>()\n\
    \     |                                                ^^^ the trait `Sum<char>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    sum(s.chars().rev().filter_map(|x|\
    \ *x <= 'z' && *x >= 'A' as usize).rev())\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sum` in this scope\n  --> /tmp/tmpq6d84sez.rs:12:5\n\
    \   |\n12 |     sum(s.chars().rev().filter_map(|x| *x <= 'z' && *x >= 'A' as usize).rev())\n\
    \   |     ^^^ not found in this scope\n\nerror[E0614]: type `char` cannot be dereferenced\n\
    \  --> /tmp/tmpq6d84sez.rs:12:40\n   |\n12 |     sum(s.chars().rev().filter_map(|x|\
    \ *x <= 'z' && *x >= 'A' as usize).rev())\n   |                              \
    \          ^^\n\nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpq6d84sez.rs:12:53\n\
    \   |\n12 |     sum(s.chars().rev().filter_map(|x| *x <= 'z' && *x >= 'A' as usize).rev())\n\
    \   |                                                     ^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpq6d84sez.rs:12:40\n   |\n12 |     sum(s.chars().rev().filter_map(|x|\
    \ *x <= 'z' && *x >= 'A' as usize).rev())\n   |                              \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `bool`\n\
    \   |\n   = note: expected enum `Option<_>`\n              found type `bool`\n\
    help: try wrapping the expression in `Some`\n   |\n12 |     sum(s.chars().rev().filter_map(|x|\
    \ Some(*x <= 'z' && *x >= 'A' as usize)).rev())\n   |                        \
    \                +++++                               +\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425,\
    \ E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c.is_uppercase()).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n \
    \   assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n   \
    \ --> /tmp/tmpcl3sdw6d.rs:12:44\n     |\n12   |     s.chars().filter(|c| c.is_uppercase()).sum()\n\
    \     |                                            ^^^ the trait `Sum<char>` is\
    \ not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ accum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n  \
    \          accum += c - '0';\n        }\n    }\n    accum\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmprsxmxvm6.rs:15:24\n\
    \   |\n15 |             accum += c - '0';\n   |                      - ^ --- char\n\
    \   |                      |\n   |                      char\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase() {\n  \
    \          sum += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n  --> /tmp/tmpvm9ezzaz.rs:15:17\n\
    \   |\n15 |             sum += c.to_digit(10);\n   |                 ^^ no implementation\
    \ for `{integer} += Option<u32>`\n   |\n   = help: the trait `AddAssign<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for i in s.chars() {\n        if i >= 'a' && i <= 'z' {\n    \
    \        sum += i as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `195`,\n right: `131`', /tmp/tmp9lt8irav.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().sum().unwrap_or(0)\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpw41lqul7.rs:12:15\n\
    \   |\n12 |     s.chars().sum().unwrap_or(0)\n   |               ^^^ cannot infer\
    \ type for type parameter `S` declared on the associated function `sum`\n   |\n\
    \   = note: type must be known at this point\nhelp: consider specifying the type\
    \ argument in the method call\n   |\n12 |     s.chars().sum::<S>().unwrap_or(0)\n\
    \   |                  +++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy743sfxq.rs:12:31\n   |\n\
    12 |     s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'A'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpy743sfxq.rs:12:43\n   |\n12 |     s.chars().filter(|c| c >= 'A'\
    \ && c <= 'Z').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'Z'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpy743sfxq.rs:12:48\n\
    \     |\n12   |     s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars()\n\
    \        .filter(|c| c.is_ascii_upper())\n        .sum()\n}\n\nfn main() {\n \
    \   let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ascii_upper` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpr1h73kfq.rs:13:23\n   |\n13 |         .filter(|c|\
    \ c.is_ascii_upper())\n   |                       ^^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `is_ascii`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpr1h73kfq.rs:14:10\n\
    \     |\n14   |         .sum()\n     |          ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    // TODO\n\
    \    let sum = s.chars().filter_map(|c| c.to_digit()).sum();\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmptt0zniyi.rs:13:42\n    |\n13  |     let sum = s.chars().filter_map(|c|\
    \ c.to_digit()).sum();\n    |                                          ^^^^^^^^-\
    \ supplied 0 arguments\n    |                                          |\n   \
    \ |                                          expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0277]: the trait bound `isize: Sum<u32>`\
    \ is not satisfied\n    --> /tmp/tmptt0zniyi.rs:13:54\n     |\n13   |     let\
    \ sum = s.chars().filter_map(|c| c.to_digit()).sum();\n     |                \
    \                                      ^^^ the trait `Sum<u32>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ s = s;\n    while s.len() > 0 {\n        s = s.to_string();\n        let mut\
    \ sum = 0;\n        for c in s.chars() {\n            sum += c as isize - '0';\n\
    \        }\n        s = s.chars().skip(1).collect::<String>().to_string();\n \
    \       return sum;\n    }\n    0\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot subtract `char` from `isize`\n  --> /tmp/tmpn1w5pasi.rs:17:31\n\
    \   |\n17 |             sum += c as isize - '0';\n   |                       \
    \        ^ no implementation for `isize - char`\n   |\n   = help: the trait `Sub<char>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n   \
    \ --> /tmp/tmpv0hiiq61.rs:12:50\n     |\n12   |     s.chars().filter(|c| *c >=\
    \ 'A' && *c <= 'Z').sum()\n     |                                            \
    \      ^^^ the trait `Sum<char>` is not implemented for `isize`\n     |\n    \
    \ = help: the following other types implement trait `Sum<A>`:\n              \
    \ <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a\
    \ f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n\
    \               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n        \
    \       <i16 as Sum>\n             and 20 others\nnote: required by a bound in\
    \ `std::iter::Iterator::sum`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s |> String::to_char\
    \ |> char_to_u8 |> char_to_usize |> sum\n}\n\nfn main() {\n    let candidate =\
    \ digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `>`\n  --> /tmp/tmp3cu2bzty.rs:12:8\n\
    \   |\n12 |     s |> String::to_char |> char_to_u8 |> char_to_usize |> sum\n \
    \  |        ^ expected expression\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ acc: isize = s.chars().filter(|c| c >= 'A' && c <= 'Z').sum();\n    for c in\
    \ s.chars() {\n        if c >= 'A' && c <= 'Z' {\n            acc += c - 'A' as\
    \ isize;\n        }\n    }\n    acc\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3qtichqb.rs:12:52\n   |\n\
    12 |     let mut acc: isize = s.chars().filter(|c| c >= 'A' && c <= 'Z').sum();\n\
    \   |                                                    ^^^\n   |           \
    \                                         |\n   |                            \
    \                        expected `&char`, found `char`\n   |                \
    \                                    help: consider borrowing here: `&'A'`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp3qtichqb.rs:12:64\n   |\n12 |  \
    \   let mut acc: isize = s.chars().filter(|c| c >= 'A' && c <= 'Z').sum();\n \
    \  |                                                                ^^^\n   |\
    \                                                                |\n   |     \
    \                                                           expected `&char`,\
    \ found `char`\n   |                                                         \
    \       help: consider borrowing here: `&'Z'`\n\nerror[E0277]: the trait bound\
    \ `isize: Sum<char>` is not satisfied\n    --> /tmp/tmp3qtichqb.rs:12:69\n   \
    \  |\n12   |     let mut acc: isize = s.chars().filter(|c| c >= 'A' && c <= 'Z').sum();\n\
    \     |                                                                     ^^^\
    \ the trait `Sum<char>` is not implemented for `isize`\n     |\n     = help: the\
    \ following other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a\
    \ f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n \
    \              <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n        \
    \       <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16\
    \ as Sum>\n             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror[E0369]: cannot subtract `isize` from `char`\n  --> /tmp/tmp3qtichqb.rs:15:22\n\
    \   |\n15 |             acc += c - 'A' as isize;\n   |                    - ^\
    \ ------------ isize\n   |                    |\n   |                    char\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0369.\nFor more information about an"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum: isize = 0;\n    for &c in s.chars() {\n        if c < '0' || c > '9' {\n\
    \            continue;\n        }\n        sum += (c - '0').wrapping_add(10);\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphsw8izqm.rs:13:9\n   |\n\
    13 |     for &c in s.chars() {\n   |         ^^    --------- this expression has\
    \ type `Option<char>`\n   |         |\n   |         expected `char`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `c`\n   |\n \
    \  = note:   expected type `char`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s + \"\
    0\".repeat(s.len()).chars().filter(|c| c == 'A' || c == 'a').sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpazsu7sj1.rs:12:50\n\
    \   |\n12 |     s + \"0\".repeat(s.len()).chars().filter(|c| c == 'A' || c ==\
    \ 'a').sum::<isize>()\n   |                                                  ^^\
    \ no implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpazsu7sj1.rs:12:62\n\
    \   |\n12 |     s + \"0\".repeat(s.len()).chars().filter(|c| c == 'A' || c ==\
    \ 'a').sum::<isize>()\n   |                                                  \
    \            ^^ no implementation for `&char == char`\n   |\n   = help: the trait\
    \ `PartialEq<char>` is not implemented for `&char`\n   = help: the trait `PartialEq`\
    \ is implemented for `char`\n\nerror[E0277]: the trait bound `isize: Sum<char>`\
    \ is not satisfied\n    --> /tmp/tmpazsu7sj1.rs:12:70\n     |\n12   |     s +\
    \ \"0\".repeat(s.len()).chars().filter(|c| c == 'A' || c == 'a').sum::<isize>()\n\
    \     |                                                                      ^^^\
    \ the trait `Sum<char>` is not implemented for `isize`\n     |\n     = help: the\
    \ following other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a\
    \ f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n \
    \              <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n        \
    \       <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16\
    \ as Sum>\n             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpazsu7sj1.rs:12:9\n   |\n12 | \
    \    s + \"0\".repeat(s.len()).chars().filter(|c| c == 'A' || c == 'a').sum::<isize>()\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpazsu7sj1.rs:12:5\n\
    \   |\n11 | fn digitSum(s: String) -> isize {\n   |                          \
    \ ----- expected `isize` because of return type\n12 |     s + \"0\".r"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ total = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n          \
    \  total += c.digits();\n        }\n    }\n    total\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpzjqjis0e.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0599]: no method named `digits` found for type\
    \ `char` in the current scope\n  --> /tmp/tmpzjqjis0e.rs:15:24\n   |\n15 |   \
    \          total += c.digits();\n   |                        ^^^^^^ method not\
    \ found in `char`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n\n    for ch in s.chars() {\n        if ch >= 'A' && ch <= 'Z' {\n\
    \            sum += ch as isize - 'A' as isize;\n        }\n    }\n\n    sum\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `131`', /tmp/tmp877u9_l3.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter_map(|c|\
    \ c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')\n        .sum()\n}\n\nfn main()\
    \ {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplvm2rg3v.rs:12:30\n   |\n\
    12 |     s.chars().filter_map(|c| c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')\n\
    \   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n   |\n   = note: expected enum `Option<_>`\n\
    \              found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n12 |     s.chars().filter_map(|c| Some(c >= 'A' && c <= 'Z' || c >= 'a'\
    \ && c <= 'z'))\n   |                              +++++                     \
    \                       +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    if s.is_empty()\
    \ { return 0; }\n    let mut sum = 0;\n    for c in s.chars() {\n        if c\
    \ >= '0' && c <= '9' {\n            sum += c - '0';\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmp3ymim146.rs:16:22\n\
    \   |\n16 |             sum += c - '0';\n   |                    - ^ --- char\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c.is_ascii_uppercase()).sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n   \
    \ --> /tmp/tmp3ydbjmx9.rs:12:50\n     |\n12   |     s.chars().filter(|c| c.is_ascii_uppercase()).sum()\n\
    \     |                                                  ^^^ the trait `Sum<char>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            sum\
    \ += c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpw7xhzpir.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0277]: cannot add-assign `Option<u32>` to `{integer}`\n\
    \  --> /tmp/tmpw7xhzpir.rs:15:17\n   |\n15 |             sum += c.to_digit(10);\n\
    \   |                 ^^ no implementation for `{integer} += Option<u32>`\n  \
    \ |\n   = help: the trait `AddAssign<Option<u32>>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    if s.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n\n    for c in s.chars()\
    \ {\n        if c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' {\n            sum\
    \ += c - 'a' as isize;\n        }\n    }\n\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `isize` from `char`\n  --> /tmp/tmp9f4hq0s4.rs:20:22\n\
    \   |\n20 |             sum += c - 'a' as isize;\n   |                    - ^\
    \ ------------ isize\n   |                    |\n   |                    char\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ c >= '0' && c <= '9').sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuq03y2p5.rs:12:31\n   |\n\
    12 |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n   |              \
    \                 ^^^\n   |                               |\n   |            \
    \                   expected `&char`, found `char`\n   |                     \
    \          help: consider borrowing here: `&'0'`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuq03y2p5.rs:12:43\n   |\n12 |     s.chars().filter(|c| c >= '0'\
    \ && c <= '9').sum()\n   |                                           ^^^\n   |\
    \                                           |\n   |                          \
    \                 expected `&char`, found `char`\n   |                       \
    \                    help: consider borrowing here: `&'9'`\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpuq03y2p5.rs:12:48\n\
    \     |\n12   |     s.chars().filter(|c| c >= '0' && c <= '9').sum()\n     | \
    \                                               ^^^ the trait `Sum<char>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    let mut s = s;\n    while !s.is_empty() {\n        sum += s.chars().take(3).fold(0,\
    \ |sum, ch| sum + ch.to_digit(10));\n        s = s.chars().skip(3).take(s.len()\
    \ - 1).collect();\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `Option<u32>` to `{integer}`\n  --> /tmp/tmpqpnii80b.rs:15:56\n\
    \   |\n15 |         sum += s.chars().take(3).fold(0, |sum, ch| sum + ch.to_digit(10));\n\
    \   |                                                        ^ no implementation\
    \ for `{integer} + Option<u32>`\n   |\n   = help: the trait `Add<Option<u32>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ s = s.to_string();\n    s.chars().filter(|c| c.is_ascii_uppercase()).sum()\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n   \
    \ --> /tmp/tmpt3qj7rn1.rs:13:50\n     |\n13   |     s.chars().filter(|c| c.is_ascii_uppercase()).sum()\n\
    \     |                                                  ^^^ the trait `Sum<char>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    sums.insert(s.chars().filter(|c|\
    \ c.is_ascii_upper()).sum());\n    sums.into_iter().sum()\n}\n\nfn main() {\n\
    \    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `sums` in this scope\n  --> /tmp/tmpppz8c63n.rs:12:5\n\
    \   |\n12 |     sums.insert(s.chars().filter(|c| c.is_ascii_upper()).sum());\n\
    \   |     ^^^^ not found in this scope\n\nerror[E0425]: cannot find value `sums`\
    \ in this scope\n  --> /tmp/tmpppz8c63n.rs:13:5\n   |\n13 |     sums.into_iter().sum()\n\
    \   |     ^^^^ not found in this scope\n\nerror[E0599]: no method named `is_ascii_upper`\
    \ found for reference `&char` in the current scope\n  --> /tmp/tmpppz8c63n.rs:12:40\n\
    \   |\n12 |     sums.insert(s.chars().filter(|c| c.is_ascii_upper()).sum());\n\
    \   |                                        ^^^^^^^^^^^^^^ help: there is an\
    \ associated function with a similar name: `is_ascii`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    str.chars().filter(|c|\
    \ c.is_ascii_upper()).fold(0, |x, c| c + x)\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0423]: expected value, found builtin type `str`\n  --> /tmp/tmpw4zjlcw8.rs:12:5\n\
    \   |\n12 |     str.chars().filter(|c| c.is_ascii_upper()).fold(0, |x, c| c +\
    \ x)\n   |     ^^^ not a value\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0423`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    // Write\
    \ your code in terms of digitSum\n    // Do not forget to handle the empty string\
    \ case\n    return digitSumHelper(s.chars().filter(|x| x.isupper()).cloned());\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `digitSumHelper` in this scope\n  -->\
    \ /tmp/tmpva_o68bk.rs:14:12\n   |\n14 |     return digitSumHelper(s.chars().filter(|x|\
    \ x.isupper()).cloned());\n   |            ^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0599]: no method named `isupper` found for reference `&char` in the current\
    \ scope\n  --> /tmp/tmpva_o68bk.rs:14:50\n   |\n14 |     return digitSumHelper(s.chars().filter(|x|\
    \ x.isupper()).cloned());\n   |                                              \
    \    ^^^^^^^ help: there is an associated function with a similar name: `is_uppercase`\n\
    \nerror[E0271]: type mismatch resolving `<Filter<Chars<'_>, [closure@/tmp/tmpva_o68bk.rs:14:44:\
    \ 14:59]> as Iterator>::Item == &_`\n    --> /tmp/tmpva_o68bk.rs:14:61\n     |\n\
    14   |     return digitSumHelper(s.chars().filter(|x| x.isupper()).cloned());\n\
    \     |                                                             ^^^^^^ expected\
    \ reference, found `char`\n     |\n     = note: expected reference `&_`\n    \
    \                 found type `char`\nnote: required by a bound in `cloned`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0425, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let len\
    \ = s.len();\n    if len < 2 {\n        return 0;\n    }\n    let mut sum = 0;\n\
    \    let mut max_len = s.chars().max().unwrap();\n    for &x in s.chars() {\n\
    \        sum += x;\n        if sum > max_len {\n            sum = sum - max_len;\n\
    \            max_len = 0;\n        }\n        max_len = max(max_len, x);\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuephy3jx.rs:24:19\n\
    \   |\n24 |         max_len = max(max_len, x);\n   |                   ^^^ not\
    \ found in this scope\n   |\nhelp: consider importing this function\n   |\n1 \
    \ | use std::cmp::max;\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuephy3jx.rs:18:9\n\
    \   |\n18 |     for &x in s.chars() {\n   |         ^^    --------- this expression\
    \ has type `Option<char>`\n   |         |\n   |         expected `char`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `x`\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpuephy3jx.rs:20:18\n   |\n20 |  \
    \       if sum > max_len {\n   |                  ^^^^^^^ expected integer, found\
    \ `char`\n\nerror[E0277]: can't compare `{integer}` with `char`\n  --> /tmp/tmpuephy3jx.rs:20:16\n\
    \   |\n20 |         if sum > max_len {\n   |                ^ no implementation\
    \ for `{integer} < char` and `{integer} > char`\n   |\n   = help: the trait `PartialOrd<char>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: cannot subtract `char`\
    \ from `{integer}`\n  --> /tmp/tmpuephy3jx.rs:21:23\n   |\n21 |             sum\
    \ = sum - max_len;\n   |                       ^ no implementation for `{integer}\
    \ - char`\n   |\n   = help: the trait `Sub<char>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuephy3jx.rs:22:23\n   |\n17 |     let mut ma"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    // Your\
    \ code here\n    sumDigits(s.to_owned())\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sumDigits` in this scope\n  --> /tmp/tmp0zrea4sg.rs:13:5\n\
    \   |\n13 |     sumDigits(s.to_owned())\n   |     ^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n\n    for c in s.chars() {\n        if c.to_ascii_uppercase().is_none()\
    \ {\n            sum += c.to_digit().unwrap();\n        }\n    }\n\n    sum\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_none` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp03hj020z.rs:15:35\n   |\n15 |         if c.to_ascii_uppercase().is_none()\
    \ {\n   |                                   ^^^^^^^ method not found in `char`\n\
    \nerror[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmp03hj020z.rs:16:22\n    |\n16  |             sum += c.to_digit().unwrap();\n\
    \    |                      ^^^^^^^^- supplied 0 arguments\n    |            \
    \          |\n    |                      expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp03hj020z.rs:20:5\n\
    \   |\n11 | fn digitSum(s: String) -> isize {\n   |                          \
    \ ----- expected `isize` because of return type\n...\n20 |     sum\n   |     ^^^\
    \ expected `isize`, found `u32`\n   |\nhelp: you can convert a `u32` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n20 |     sum.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    match s.chars().map(|c|\
    \ *c as usize).sum() {\n        None => 0,\n        Some(s) => s,\n    }\n}\n\n\
    fn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp6ocsu6rz.rs:12:29\n\
    \   |\n12 |     match s.chars().map(|c| *c as usize).sum() {\n   |           \
    \                  ^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c < '0' || c > '9' {\n      \
    \      continue;\n        }\n        sum += (c - '0').to_digit(10).unwrap();\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpgfi8lg16.rs:17:19\n\
    \   |\n17 |         sum += (c - '0').to_digit(10).unwrap();\n   |            \
    \     - ^ --- char\n   |                 |\n   |                 char\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    s.chars().filter_map(|c| {\n        if c < '0' || '9' < c {\n\
    \            0\n        } else {\n            match c {\n                'A'..='Z'\
    \ as _ => 65 - c + 1,\n                'a'..='z' as _ => 97 - c + 1,\n       \
    \         _ => 0,\n            }\n        }\n    }).fold(0, |acc, x| {\n     \
    \   sum += acc;\n        sum\n    });\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error: expected one of `=>`, `if`, or `|`, found keyword `as`\n  --> /tmp/tmpxqq8ya_s.rs:18:27\n\
    \   |\n18 |                 'A'..='Z' as _ => 65 - c + 1,\n   |              \
    \             ^^ expected one of `=>`, `if`, or `|`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxqq8ya_s.rs:15:13\n   |\n15 |             0\n   |     \
    \        ^ expected enum `Option`, found integer\n   |\n   = note: expected enum\
    \ `Option<_>`\n              found type `{integer}`\nhelp: try wrapping the expression\
    \ in `Some`\n   |\n15 |             Some(0)\n   |             +++++ +\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    digits(s).map(|x|\
    \ x.to_ascii_lowercase().chars().sum::<usize>()).sum()\n}\n\nfn main() {\n   \
    \ let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `digits` in this scope\n  --> /tmp/tmp9gso7ohy.rs:12:5\n\
    \   |\n12 |     digits(s).map(|x| x.to_ascii_lowercase().chars().sum::<usize>()).sum()\n\
    \   |     ^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|&c|\
    \ *c >= 'A' && *c <= 'Z').sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmprh5ds_84.rs:12:27\n\
    \   |\n12 |     s.chars().filter(|&c| *c >= 'A' && *c <= 'Z').sum()\n   |    \
    \                       ^^\n\nerror[E0614]: type `char` cannot be dereferenced\n\
    \  --> /tmp/tmprh5ds_84.rs:12:40\n   |\n12 |     s.chars().filter(|&c| *c >= 'A'\
    \ && *c <= 'Z').sum()\n   |                                        ^^\n\nerror[E0277]:\
    \ the trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmprh5ds_84.rs:12:51\n\
    \     |\n12   |     s.chars().filter(|&c| *c >= 'A' && *c <= 'Z').sum()\n    \
    \ |                                                   ^^^ the trait `Sum<char>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    // Your\
    \ code goes here\n    return s.chars().filter(|c| *c >= 'A' && *c <= 'Z').sum();\n\
    }\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n   \
    \ --> /tmp/tmpwveaedcs.rs:13:57\n     |\n13   |     return s.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').sum();\n     |                                     \
    \                    ^^^ the trait `Sum<char>` is not implemented for `isize`\n\
    \     |\n     = help: the following other types implement trait `Sum<A>`:\n  \
    \             <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n           \
    \    <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for (i, &c) in s.chars().enumerate() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        } else {\n            sum +=\
    \ c.to_digit(10);\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digitSum;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpta7_kssb.rs:13:13\n   |\n\
    13 |     for (i, &c) in s.chars().enumerate() {\n   |             ^^     ---------------------\
    \ this expression has type `Option<(usize, char)>`\n   |             |\n   | \
    \            expected `char`, found reference\n   |             help: you can\
    \ probably remove the explicit borrow: `c`\n   |\n   = note:   expected type `char`\n\
    \           found reference `&_`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum: isize = 0;\n\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            sum += c.to_ascii_upper().unwrap() as isize;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_ascii_upper` found for type `char` in\
    \ the current scope\n  --> /tmp/tmps86l65f3.rs:16:22\n   |\n16 |             sum\
    \ += c.to_ascii_upper().unwrap() as isize;\n   |                      ^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `to_ascii_uppercase`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        sum = sum + c.to_ascii_lowercase().chars().sum();\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
    abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n  \
    \  assert_eq!(candidate(String::from(\"woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"\
    aAaaaXa\")), 153);\n    assert_eq!(candidate(String::from(\" How are yOu?\")),\
    \ 151);\n    assert_eq!(candidate(String::from(\"You arE Very Smart\")), 327);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `chars` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpicjhagz4.rs:14:44\n   |\n14 |         sum = sum + c.to_ascii_lowercase().chars().sum();\n\
    \   |                                            ^^^^^ method not found in `char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    let mut\
    \ res = 0;\n    for c in s.chars() {\n        if c.is_upper() {\n            res\
    \ += c.code().wrapping_add(32);\n        } else {\n            res += c.code();\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpo7dtkvjp.rs:14:14\n   |\n14 |         if c.is_upper() {\n\
    \   |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_uppercase`\n\nerror[E0599]: no method named `code` found for type\
    \ `char` in the current scope\n  --> /tmp/tmpo7dtkvjp.rs:15:22\n   |\n15 |   \
    \          res += c.code().wrapping_add(32);\n   |                      ^^^^ method\
    \ not found in `char`\n\nerror[E0599]: no method named `code` found for type `char`\
    \ in the current scope\n  --> /tmp/tmpo7dtkvjp.rs:17:22\n   |\n17 |          \
    \   res += c.code();\n   |                      ^^^^ method not found in `char`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ digitSum(\"\") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\")\
    \ => 67\n/// digitSum(\"helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n///\
    \ digitSum(\"aAaaaXa\") => 153\nfn digitSum(s: String) -> isize {\n    s.chars().filter(|c|\
    \ *c >= '0' && *c <= '9').sum()\n}\n\nfn main() {\n    let candidate = digitSum;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abAB\")), 131);\n    assert_eq!(candidate(String::from(\"abcCd\")), 67);\n   \
    \ assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
    woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
    \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
    You arE Very Smart\")), 327);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<char>` is not satisfied\n   \
    \ --> /tmp/tmp2t3fjep1.rs:12:50\n     |\n12   |     s.chars().filter(|c| *c >=\
    \ '0' && *c <= '9').sum()\n     |                                            \
    \      ^^^ the trait `Sum<char>` is not implemented for `isize`\n     |\n    \
    \ = help: the following other types implement trait `Sum<A>`:\n              \
    \ <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a\
    \ f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n\
    \               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n        \
    \       <i16 as Sum>\n             and 20 others\nnote: required by a bound in\
    \ `std::iter::Iterator::sum`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
