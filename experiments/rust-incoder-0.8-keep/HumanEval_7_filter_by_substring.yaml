name: HumanEval_7_filter_by_substring
language: rust
prompt: "/// Filter an input list of strings only for ones that contain given substring\n\
  /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
  \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfn filter_by_substring(strings:\
  \ Vec<String>, substring: String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
  xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
  xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
  )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
  ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")),\
  \ vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
completions: ["    let mut found = Vec::new();\n\n    for string in strings {\n  \
    \      if string.contains(&substring) {\n            found.push(string);\n   \
    \     }\n    }\n\n    found", "    let substring = substring.to_lowercase();\n\
    \    strings.iter().filter(|s| s.contains(substring)).collect()", "    strings\n\
    \        .iter()\n        .filter_map(|string| {\n            if string.contains(substring)\
    \ {\n                Ok(string)\n            } else {\n                Err(String::from(\"\
    \"))\n            }\n        })\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter_map(|s| s.contains(substring))\n        .collect()", "    let\
    \ mut filtered_strings = Vec::new();\n    for string in strings.iter() {\n   \
    \     if string.contains(substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    let mut result = Vec::new();\n\
    \    for s in strings.iter() {\n        if s.contains(substring) {\n         \
    \   result.push(s);\n        }\n    }\n    result", "    let mut result = strings.clone();\n\
    \    result.retain(|string| string.contains(substring));\n    result", "    strings.iter().filter_map(|s|\
    \ {\n        if s.contains(substring) {\n            Some(s)\n        } else {\n\
    \            None\n        }\n    }).collect()", "    if strings.is_empty() {\n\
    \        return strings;\n    }\n\n    let mut filtered_strings = Vec::new();\n\
    \    let mut current_substring = String::from(substring);\n\n    strings.iter().for_each(|s|\
    \ {\n        if s.contains(&current_substring) {\n            filtered_strings.push(s);\n\
    \        }\n    });\n\n    filtered_strings", "    let mut index = 0;\n    let\
    \ mut found = false;\n    strings\n        .iter()\n        .filter(|s| {\n  \
    \          let mut index = s.find(substring, index);\n            found = match\
    \ index {\n                Some(i) => true,\n                None => false,\n\
    \            };\n            index = i + 1;\n            found\n        })\n \
    \       .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.contains(substring).unwrap_or(false))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|x| x.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|e| e.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings.iter().filter_map(|s| {\n        if s.contains(substring)\
    \ {\n            Some(s)\n        } else {\n            None\n        }\n    }).collect()",
  "    let mut index = String::npos;\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            index = s.find(substring);\n            if index != String::npos\
    \ {\n                index = s.rfind(substring);\n                if index !=\
    \ String::npos {\n                    return strings[..index].to_vec();\n    \
    \            }\n            }\n        }\n    }\n    strings", "    let mut results\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            results.push(string);\n        }\n    }\n    results", "    if\
    \ substring.is_empty() {\n        return strings\n    }\n    strings.iter().filter(|s|\
    \ s.contains(substring)).collect()", "    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.contains(&substring) {\n                Some(s.to_string())\n\
    \            } else {\n                None\n            }\n        })\n     \
    \   .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings.into_iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", '    strings.iter().filter_map(|s| if s.contains(substring).map(|s|
    s) { None } else { Some(s) }).collect()', "    strings\n        .iter()\n    \
    \    .filter(|string| string.contains(substring))\n        .collect()", "    strings.iter()\n\
    \        .filter_map(|s| s.contains(substring).unwrap_or(false))\n        .collect()",
  "    strings.iter()\n        .filter(|s| s.contains(substring))\n        .collect()",
  '    strings.iter().filter(|s| s.contains(substring)).collect()', "    strings\n\
    \        .iter()\n        .filter_map(|s| s.contains(substring))\n        .collect()",
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    strings.iter().filter_map(|s|\
    \ {\n        match s.contains(substring) {\n            true => Some(s),\n   \
    \         false => None,\n        }\n    }).collect()", "    let mut found_substring\
    \ = false;\n    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .cloned()\n        .collect()", "    let mut string = String::new();\n\
    \n    for s in strings {\n        if s.contains(&substring) {\n            string.push_str(s);\n\
    \        }\n    }\n    Vec::from(string.into_bytes())", "    if strings.is_empty()\
    \ {\n        return strings;\n    }\n\n    if substring.is_empty() {\n       \
    \ return strings;\n    }\n\n    let mut current_substring = String::new();\n\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            current_substring\
    \ = s;\n        } else {\n            break;\n        }\n    }\n\n    strings.iter().filter(|s|\
    \ {\n        if s.contains(&current_substring) {\n            false\n        }\
    \ else {\n            true\n        }\n    }).collect()", '    strings.iter().filter(|s|
    s.contains(substring))', "    strings\n        .iter()\n        .filter_map(|string|\
    \ {\n            if string.contains(&substring) {\n                Some(string)\n\
    \            } else {\n                None\n            }\n        })\n     \
    \   .collect()", '    strings.iter().filter(|s| s.contains(substring)).collect()',
  "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n    \
    \    .cloned()\n        .collect()", "    if strings.is_empty() {\n        return\
    \ strings;\n    }\n    strings\n        .into_iter()\n        .filter(|&s| s.contains(substring))\n\
    \        .collect()", "    let mut found_substring = false;\n    for s in strings\
    \ {\n        if substring == s.to_string() {\n            found_substring = true;\n\
    \        }\n    }\n    if found_substring {\n        strings\n    } else {\n \
    \       Vec::new()\n    }", "    if strings.is_empty() {\n        strings\n  \
    \  } else {\n        if strings.iter().any(|s| s.contains(&substring)) {\n   \
    \         strings\n        } else {\n            Vec::new()\n        }\n    }",
  "    if substring.is_empty() {\n        return strings;\n    }\n\n    let mut found\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n\
    \            found.push(s);\n        }\n    }\n\n    found", "    strings\n  \
    \      .iter()\n        .filter(|s| s.contains(substring))\n        .collect()",
  "    strings.iter()\n        .filter(|s| s.contains(substring))\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|&s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()", "    strings\n        .iter()\n\
    \        .filter(|string| string.contains(substring))\n        .collect()", " \
    \   strings\n        .iter()\n        .filter_map(|s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.contains(substring))\n\
    \        .cloned()\n        .collect()", "    strings\n        .iter()\n     \
    \   .filter(|s| s.contains(substring))\n        .collect()", "    strings\n  \
    \      .iter()\n        .filter_map(|string| {\n            if string.contains(substring)\
    \ {\n                Some(string.to_owned())\n            } else {\n         \
    \       None\n            }\n        })\n        .collect()", "    strings\n \
    \       .into_iter()\n        .filter_map(|s| s.contains(substring))\n       \
    \ .collect()", '    strings.iter().filter(|s| s.contains(substring)).collect()',
  "    let mut filtered_strings = Vec::new();\n    for string in strings {\n     \
    \   if string.contains(substring) {\n            filtered_strings.push(*string);\n\
    \        }\n    }\n    return filtered_strings;", "    if strings.is_empty() {\n\
    \        return strings\n    }\n\n    let mut index = strings.len() - 1;\n   \
    \ let mut index = strings.len() - 1;\n\n    let mut index = strings.len() - 1;\n\
    \    while index >= 0 {\n        if strings.get_mut(index).contains(&substring)\
    \ {\n            return strings.drain(..index + 1);\n        }\n        index\
    \ -= 1;\n    }\n\n    strings", '    strings.iter().filter(|s| s.contains(substring)).collect()',
  '    strings.iter().filter(|s| s.contains(substring)).collect()', "    strings\n\
    \        .iter()\n        .filter(|s| s.contains(substring))\n        .cloned()",
  "    let mut filtered_strings = Vec::new();\n    for string in strings.iter() {\n\
    \        if string.contains(&substring) {\n            filtered_strings.push(*string);\n\
    \        }\n    }\n    return filtered_strings", '    strings.iter().filter(|s|
    s.contains(substring)).collect()', "    strings\n        .iter()\n        .filter_map(|x|\
    \ x.contains(substring))\n        .collect()", '    strings.iter().filter_map(|s|
    s.contains(substring)).collect()', "    let mut substrings = Vec::new();\n   \
    \ for s in strings {\n        if s.contains(substring) {\n            substrings.push(s);\n\
    \        }\n    }\n    substrings", "    strings\n        .iter()\n        .filter(|s|\
    \ s.contains(substring))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .cloned()\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| {\n            s.contains(&substring)\n\
    \                .map(|t| {\n                    if t {\n                    \
    \    Some(s)\n                    } else {\n                        None\n   \
    \                 }\n                })\n                .unwrap_or(None)\n  \
    \      })\n        .collect::<Vec<String>>()", "    strings.iter()\n        .filter(|s|\
    \ s.contains(substring))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|string| string.contains(substring))\n     \
    \   .collect()", "    let mut found_indices = Vec::new();\n    for string in strings.iter()\
    \ {\n        if string.contains(substring) {\n            found_indices.push(*strings.iter().position(|x|\
    \ x == string));\n        }\n    }\n\n    let mut filtered_strings = Vec::new();\n\
    \    for i in found_indices.iter() {\n        filtered_strings.push(*strings.iter().skip(i).take(1).collect::<String>());\n\
    \    }\n\n    filtered_strings", "    strings\n        .iter()\n        .filter(|s|\
    \ s.contains(substring))\n        .collect()", "    let mut filtered = Vec::new();\n\
    \    for s in strings.iter() {\n        if s.contains(substring) {\n         \
    \   filtered.push(s);\n        }\n    }\n    filtered", "    strings\n       \
    \ .iter()\n        .filter(|s| s.contains(substring))\n        .collect()", " \
    \   let mut result = Vec::new();\n    for s in strings {\n        if !s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    strings\n\
    \        .iter()\n        .filter(|s| s.contains(substring))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n    \
    \    .collect()", "    let mut index = String::new();\n    for s in strings {\n\
    \        if s.contains(substring) {\n            if index.is_empty() {\n     \
    \           index = s;\n            } else {\n                index = index.to_string();\n\
    \            }\n        }\n    }\n    let mut strings = strings.clone();\n   \
    \ strings.retain(|s| {\n        let mut indexed = String::new();\n        for\
    \ c in s.chars() {\n            if indexed.contains(index) {\n               \
    \ indexed.push_str(&c);\n            }\n        }\n        indexed\n    });\n\
    \    strings", "    strings.iter()\n        .filter_map(|s| if s.contains(substring)\
    \ => Some(s) else None)\n        .collect()", "    let mut filtered = vec![];\n\
    \    for s in strings {\n        if s.contains(substring) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered", "    if strings.is_empty() {\n        return\
    \ vec![];\n    }\n    let mut indexes = vec![];\n    for (idx, string) in strings.iter().enumerate().filter(|(idx,\
    \ _)| {\n        strings.contains(substring)\n    }).cloned().enumerate() {\n\
    \        indexes.push(idx);\n    }\n    indexes.reverse().collect()", "    strings.iter().filter_map(|s|\
    \ {\n        if s.contains(&substring) {\n            Some(s)\n        } else\
    \ {\n            None\n        }\n    })", "    let mut strings_ = strings.clone();\n\
    \    strings_.retain(|s| s.contains(substring));\n    strings_", "    let mut\
    \ filtered_strings = strings;\n    filtered_strings.retain(|s| s.contains(substring));\n\
    \    filtered_strings", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(substring))\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s|\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        )\n        .collect()", '    strings.iter().filter(|s| s.contains(&substring)).collect()',
  "    let mut s = strings.clone();\n    let mut i = 0;\n    while i < s.len() {\n\
    \        if s.len() - i > substring.length() {\n            break;\n        }\n\
    \        if s.subslice(i, i + substring.length()).contains(&substring) {\n   \
    \         i += substring.length();\n        } else {\n            i += 1;\n  \
    \      }\n    }\n    s", "    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.contains(substring) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|&s| s.contains(&substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|string|\
    \ string.contains(substring))\n        .collect()", "    let mut found = Vec::new();\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      found.push(string);\n        }\n    }\n    found", "    strings\n     \
    \   .iter()\n        .filter(|s| s.contains(substring))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.contains(&substring))\n   \
    \     .cloned()\n        .collect()", "    strings\n        .iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", '    strings.iter().filter(|s|
    s.contains(substring)).collect()', '    strings.iter().filter(|s| s.contains(substring)).collect()',
  "    let mut filtered = String::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered.push(s);\n        }\n    }\n    filtered.into_boxed_slice()",
  "    let mut results = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            results.push(string);\n        }\n    }\n    results", "    strings\n\
    \        .iter()\n        .filter(|s| s.contains(substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    if strings.is_empty() {\n        return vec![];\n \
    \   }\n    let mut result: Vec<String> = vec![];\n    for &s in strings {\n  \
    \      if s.contains(&substring) {\n            result.push(s);\n        }\n \
    \   }\n    result", "    strings\n        .iter()\n        .filter_map(|str| str\n\
    \            .iter()\n            .filter_map(|c| c.contains(substring))\n   \
    \         .take_if(|&b| b)\n            .collect::<Vec<_>>()\n        )\n    \
    \    .collect()", "    let mut index = -1;\n    let mut result: Vec<String> =\
    \ vec![];\n    for str in strings {\n        let new_str = match str.as_str().find(|c|\
    \ *c == substring) {\n            None => continue,\n            Some(start) =>\
    \ str[start..].to_string(),\n        };\n        result.push(new_str);\n     \
    \   match str[new_str.len() - substring.len()..] {\n            None => continue,\n\
    \            Some(end) => str.truncate(start + new_str.len() + end),\n       \
    \ }\n    }\n    result", "    if strings.is_empty() {\n        return vec![];\n\
    \    }\n\n    strings\n        .iter()\n        .filter_map(|string| string.contains(&substring))\n\
    \        .cloned()\n        .collect()", "    let mut retvec = vec![];\n    for\
    \ str in strings {\n        if str.contains(substring) {\n            retvec.push(str);\n\
    \        }\n    }\n    retvec", "    let mut strings_to_keep = Vec::new();\n \
    \   for string in strings.iter() {\n        if string.contains(substring) {\n\
    \            strings_to_keep.push(string);\n        }\n    }\n    strings_to_keep",
  "    strings\n        .iter()\n        .filter_map(|s| s.contains(substring).unwrap_or(false))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|string|\
    \ string.contains(substring))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter_map(|string| string.contains(&substring))\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.contains(substring).unwrap_or(false))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|s| s.contains(&substring))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.contains(substring))\n        .collect()",
  "    let mut filtered = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered.push(s);\n        }\n    }\n    filtered", "    let\
    \ mut filtered = vec![];\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered.push(s);\n        }\n    }\n    filtered", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(substring))\n        .collect()",
  "    let mut output = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            output.push(s);\n        }\n    }\n    output", "    let mut\
    \ found_strings = Vec::new();\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            found_strings.push(string);\n        }\n    }\n    found_strings",
  "    let mut out = Vec::with_capacity(strings.len());\n    for s in strings {\n\
    \        if s.contains(substring) {\n            out.push(s);\n        }\n   \
    \ }\n    out", "    let mut result = Vec::new();\n    for s in strings {\n   \
    \     if !s.contains(substring) {\n            result.push(s);\n        }\n  \
    \  }\n    result", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", '    strings.iter().filter_map(|s| s.contains(&substring)).collect()',
  "    if strings.is_empty() {\n        return strings\n    }\n    let mut result\
    \ = Vec::with_capacity(strings.len());\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut i = 0;\n    for string in strings {\n \
    \       i += 1;\n        if string.contains(&substring) {\n            result.push_str(&string);\n\
    \        }\n    }\n    if i != 0 {\n        result\n    } else {\n        vec![]\n\
    \    }", "    strings\n        .into_iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    let mut string = strings.clone();\n    string.retain(|x|\
    \ x.contains(substring));\n    string", '    strings.iter().filter(|s| s.contains(substring)).collect()',
  "    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()", "    let mut found_substring = false;\n\
    \    let mut filtered_strings = Vec::new();\n    for str in strings {\n      \
    \  if str.contains(substring) {\n            found_substring = true;\n       \
    \ } else {\n            if found_substring {\n                filtered_strings.push(str);\n\
    \            }\n        }\n    }\n    filtered_strings", '    strings.iter().filter(|s|
    s.contains(&substring)).collect()', "    strings\n        .iter()\n        .filter(|&s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .into_iter()\n\
    \        .filter(|string| string.contains(substring))\n        .collect()", " \
    \   strings\n        .iter()\n        .filter_map(|s| s.contains(substring))\n\
    \        .collect()", "    // Split input strings via delimiter\n    let mut split_strings\
    \ = strings.into_iter().map(|s| s.split(substring)).collect::<Vec<_>>();\n   \
    \ // Filter all substrings from input strings before return\n    split_strings.filter_map(|s|\
    \ s.iter().filter_map(|s| s.to_owned()).collect::<Vec<_>>()).collect()", '    strings.iter().filter(|s|
    s.contains(substring)).collect()', "    strings\n        .iter()\n        .filter(|s|\
    \ s.contains(substring))\n        .collect()", "    let mut index = strings.iter().position(|s|\
    \ s == substring).unwrap();\n    let mut new_strings = vec![];\n    while let\
    \ Some(pos) = index {\n        new_strings.push(*strings.remove(index));\n   \
    \     index = strings.iter().position(|s| s == substring).unwrap();\n    }\n \
    \   new_strings.extend(strings)", "    strings\n        .into_iter()\n       \
    \ .filter(|s| s.contains(substring))\n        .collect()", "    strings\n    \
    \    .iter()\n        .filter(|s| s.contains(substring))\n        .collect()",
  "    let mut result = Vec::new();\n    for (index, string) in strings.iter().enumerate()\
    \ {\n        if string.contains(substring) {\n            result.push(string);\n\
    \        }\n    }\n    result", "    let mut new_strings = strings.clone();\n\
    \    new_strings.retain(|s| s.contains(&substring));\n    new_strings", "    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(substring))\n        .collect()",
  "    let mut result = Vec::new();\n    for (i, s) in strings.iter().enumerate()\
    \ {\n        if s.contains(substring) {\n            result.push(s);\n       \
    \ }\n    }\n    result", "    if strings.is_empty() {\n        return strings;\n\
    \    }\n\n    if strings[0].is_prefix(&substring) {\n        strings\n    } else\
    \ {\n        let index = substring.chars().iter().position(|c| strings.iter().any(|s|\
    \ s.contains(&c)));\n        if index != 0 {\n            let result = strings.split_at(index).collect();\n\
    \            result.extend(strings.split_at(0));\n            result\n       \
    \ } else {\n            strings\n        }\n    }", "    strings\n        .iter()\n\
    \        .filter(|s| s.contains(substring))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()", "    let mut found = Vec::new();\n\
    \    for s in strings {\n        if s.contains(substring) {\n            found.push(s);\n\
    \        }\n    }\n    found", "    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.contains(substring) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()",
  "    if strings.is_empty() {\n        return strings;\n    }\n    strings\n    \
    \    .iter()\n        .filter(|x| x.contains(substring))\n        .collect()",
  "    if let Some(idx) = string_indices().position(|idx| strings.contains(&strings[idx]))\
    \ {\n        if strings.len() == 1 {\n            strings\n        } else {\n\
    \            strings[..idx].iter().filter(|s| strings.contains(&s)).collect()\n\
    \        }\n    } else {\n        strings\n    }", '    strings.iter().filter(|s|
    s.contains(substring)).collect()', '    strings.iter().filter(|s| s.contains(substring)).collect()',
  '    strings.iter().filter_map(|s| s.contains(substring)).collect()', '    strings.iter().filter(|s|
    s.contains(&substring)).collect()', "    let mut string_with_substring = String::from(\"\
    \");\n    for &s in strings {\n        string_with_substring.push_str(&s);\n \
    \       string_with_substring.push_str(&substring);\n    }\n    strings.iter().filter(|s|\
    \ string_with_substring.contains(&s)).collect()", "    strings.iter().filter_map(|s|\
    \ {\n        if s.contains(substring) {\n            Some(s)\n        } else {\n\
    \            None\n        }\n    })\n    .collect()", '    strings.iter().filter(|&s|
    s.contains(substring)).collect()', "    let mut filtered = vec![];\n    for string\
    \ in strings {\n        if string.contains(substring) {\n            filtered.push(string);\n\
    \        }\n    }\n    return filtered;", '    strings.iter().filter(|s| s.contains(substring)).collect()',
  "    if strings.is_empty() {\n        return strings\n    }\n    if strings.len()\
    \ == 1 {\n        return vec![''];\n    }\n    let mut i = 0;\n    while i < strings.len()\
    \ && i < strings.len() - substring.len() {\n        if strings[i] == substring\
    \ {\n            i += substring.len();\n        } else {\n            i += 1;\n\
    \        }\n    }\n    strings\n        .iter()\n        .take(i)\n        .chain(\n\
    \            strings\n                .iter()\n                .skip(i + substring.len()),\n\
    \        )\n        .collect()", "    strings\n        .iter()\n        .filter(|s|\
    \ s.contains(substring))\n        .collect()", "    let mut filtered_strings =\
    \ strings.clone();\n    filtered_strings.retain(|s| s.contains(substring));\n\
    \    filtered_strings", "    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.contains(substring) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(&substring))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter_map(|e| {\n            if e.contains(substring) {\n         \
    \       Some(e)\n            } else {\n                None\n            }\n \
    \       })\n        .collect()", "    strings\n        .iter()\n        .filter_map(|x|\
    \ {\n            if x.contains(&substring) {\n                Some(x)\n      \
    \      } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    let mut matched: Vec<String> = Vec::new();\n    for\
    \ string in strings.iter() {\n        if string.contains(substring) {\n      \
    \      matched.push(string)\n        }\n    }\n    return matched", "    if substring.is_empty()\
    \ {\n        strings\n    } else {\n        strings.iter().filter_map(|s| {\n\
    \            if s.contains(&substring) {\n                Some(s)\n          \
    \  } else {\n                None\n            }\n        }).collect()\n    }",
  "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(substring))\n        .collect()", "    if strings.is_empty() {\n\
    \        return strings;\n    }\n    let mut result = Vec::with_capacity(strings.len());\n\
    \    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n\
    \        }\n    }\n    result", "    let mut string_iter = strings.iter();\n \
    \   let mut substring_iter = substring.chars().cloned().collect::<Vec<_>>();\n\
    \    loop {\n        if let Some(found) = substring_iter.find(|&c| string_iter.next().contains(&c))\
    \ {\n            string_iter.next()\n        } else {\n            break;\n  \
    \      }\n    }\n    string_iter.collect()", "    strings\n        .iter()\n \
    \       .filter(|s| s.contains(substring))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.contains(substring))\n        .collect()",
  "    let mut out = Vec::new();\n\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            out.push(s);\n        }\n    }\n\n    out", "    strings\n  \
    \      .iter()\n        .filter(|s| s.contains(&substring))\n        .collect()",
  "    strings\n        .into_iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    strings\n        .into_iter()\n        .filter(|s|\
    \ s.contains(substring))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter(|&s| s.contains(substring))\n        .collect()", "    let mut\
    \ iter = strings.iter();\n    let mut found = false;\n    while let Some(found_str)\
    \ = iter.next() {\n        if found_str.contains(&substring) {\n            found\
    \ = true;\n            break;\n        }\n    }\n    if !found {\n        return\
    \ vec![];\n    }\n    iter", '    strings.iter().filter(|s| s.contains(substring)).collect()',
  "    strings\n        .iter()\n        .filter_map(|s| if s.contains(substring)\
    \ {\n            Some(s)\n        } else {\n            None\n        })\n   \
    \     .collect()", "    let mut filtered = Vec::new();\n    for string in strings\
    \ {\n        if string.contains(substring) {\n            filtered.push(string);\n\
    \        }\n    }\n    filtered", '    strings.iter().filter(|s| s.contains(substring)).collect()',
  "    let mut output = Vec::new();\n    for string in strings.iter() {\n        if\
    \ string.contains(substring) {\n            output.push(string);\n        }\n\
    \    }\n    output", "    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()", "    let mut res = Vec::new();\n    for s in strings {\n\
    \        if s.contains(substring) {\n            res.push(s);\n        }\n   \
    \ }\n    res", "    if strings.is_empty() {\n        return strings;\n    }\n\n\
    \    let substrings = strings.split_first(|&s| s.contains(substring));\n    if\
    \ substrings.is_empty() {\n        return strings;\n    }\n\n    let mut strings_with_substrings\
    \ = Vec::new();\n\n    for &s in strings {\n        if s.contains(substring) {\n\
    \            strings_with_substrings.push((s));\n        }\n    }\n\n    strings_with_substrings",
  "    let mut found = false;\n\n    for (i, s) in strings.iter().enumerate() {\n\
    \        if substring == &s[..] {\n            found = true;\n            break;\n\
    \        }\n    }\n\n    if !found {\n        return strings;\n    }\n\n    strings\n\
    \        .into_iter()\n        .filter(|s| s.contains(substring))\n        .collect()",
  "    let mut result = Vec::new();\n    for string in strings {\n        if string.find(substring).is_some()\
    \ {\n            result.push(string);\n        }\n    }\n    result", "    let\
    \ mut out = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            out.push(s);\n        }\n    }\n    out", "    let mut result:\
    \ Vec<String> = Vec::new();\n    strings.iter().for_each(|s| {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    });\n    result"]
stop_tokens:
- "\n}"
