name: HumanEval_71_triangle_area
language: rust
results:
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    (a, b, c)\n        .iter()\n      \
    \  .fold(0.0, |tri, (a, b, c) => (a + b, a + c, b + c))\n        .0\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `,` or `:`, found `=>`\n  --> /tmp/tmpgekqj2k0.rs:12:36\n\
    \   |\n12 |         .fold(0.0, |tri, (a, b, c) => (a + b, a + c, b + c))\n   |\
    \                                    ^^ expected one of `,` or `:`\n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let is_valid_triangle =\n        a\
    \ * b + c * c >= a * c;\n    if is_valid_triangle { a / b + c / b }\n    else\
    \ { -1.0 }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmig_rcuj.rs:12:28\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n12 |     if is_valid_triangle { a / b + c / b }\n   |           \
    \                 ^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n12 |     if is_valid_triangle {\
    \ (a / b + c / b) as f64 }\n   |                            +             ++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        a\n    } else\
    \ {\n        b\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdfhv78kv.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         a\n   |         ^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    11 |         a as f64\n   |           ++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdfhv78kv.rs:13:9\n   |\n9  | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n13 |         b\n   |         ^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    13 |         b as f64\n   |           ++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let area = sqrt((a*a) + (b*b) - (c*c))\n\
    \    if area > 0 {\n        area / 2.0\n    } else {\n        -1\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp3blsf5lg.rs:10:43\n\
    \   |\n10 |     let area = sqrt((a*a) + (b*b) - (c*c))\n   |                 \
    \                          ^ help: add `;` here\n11 |     if area > 0 {\n   |\
    \     -- unexpected token\n\nerror[E0425]: cannot find function `sqrt` in this\
    \ scope\n  --> /tmp/tmp3blsf5lg.rs:10:16\n   |\n10 |     let area = sqrt((a*a)\
    \ + (b*b) - (c*c))\n   |                ^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3blsf5lg.rs:14:9\n   |\n9  | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n14 |       \
    \  -1\n   |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let a = (a * (b - c)) as f64;\n   \
    \ let b = (b * (c - a)) as f64;\n    let c = (a * (b + c)) as f64;\n    (a + b\
    \ + c) / ((a * b).recip() as f64)\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot subtract `f64` from `isize`\n  --> /tmp/tmp9ig2oli6.rs:11:21\n\
    \   |\n11 |     let b = (b * (c - a)) as f64;\n   |                     ^ no implementation\
    \ for `isize - f64`\n   |\n   = help: the trait `Sub<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `f64`\n  --> /tmp/tmp9ig2oli6.rs:12:21\n\
    \   |\n12 |     let c = (a * (b + c)) as f64;\n   |                     ^ no implementation\
    \ for `f64 + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c || (b + c) > a || (c +\
    \ a) > b {\n        -1\n    } else {\n        ((b * b) - ((3 * b) * c) - ((a *\
    \ a) - ((3 * a) * b))) / 2.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1y2nyjvu.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c || (b + c) > a || (c + a) > b {\n11 |         -1\n\
    \   |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmp1y2nyjvu.rs:13:63\n   |\n13 |         ((b\
    \ * b) - ((3 * b) * c) - ((a * a) - ((3 * a) * b))) / 2.0\n   |              \
    \                                                 ^ no implementation for `isize\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // a <= b and b <= c\n    if a <= b\
    \ {\n        if b <= c {\n            1.0\n        } else {\n            -1.0\n\
    \        }\n    } else {\n        if c <= a {\n            -1.0\n        } else\
    \ {\n            1.0\n        }\n    }\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.0`,\n right: `6.0`', /tmp/tmpxacbn_hv.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a: f64 = f64::MIN;\n    let\
    \ mut b: f64 = f64::MIN;\n    let mut c: f64 = f64::MIN;\n    if a > b {\n   \
    \     a = b; b = c; c = a; \n    }\n    if c > b {\n        c = b; b = a; a =\
    \ c;\n    }\n    if a + b > c {\n        if b + c > a {\n            return a\
    \ + b + c;\n        } else {\n            return a + c;\n        }\n    } else\
    \ {\n        if a + c > b {\n            return a + b + c;\n        } else {\n\
    \            return a + c;\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-inf`,\n right: `6.0`', /tmp/tmph_k9klm0.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c || a + c > b || b + c\
    \ > a {\n        -1\n    } else {\n        (a * b) - ((a * c) - (b * a))\n   \
    \ }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpstfgrj9_.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c || a + c > b || b + c > a {\n11 |         -1\n \
    \  |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpstfgrj9_.rs:13:9\n   |\n9  | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n13 |         (a * b) - ((a * c)\
    \ - (b * a))\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n13 |      \
    \   ((a * b) - ((a * c) - (b * a))) as f64\n   |         +                   \
    \          ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    a + b + c as f64\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `f64` to `isize`\n  --> /tmp/tmpn9z6ezd9.rs:10:11\n\
    \   |\n10 |     a + b + c as f64\n   |           ^ no implementation for `isize\
    \ + f64`\n   |\n   = help: the trait `Add<f64>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a > b + c || b > a + c || c > a\
    \ + b {\n        return -1;\n    }\n    if a > b {\n        return b * b - 4 *\
    \ c * a;\n    }\n    if b > c {\n        return c * c - 4 * a * b\n    }\n   \
    \ return a * a - 4 * b * b + 4 * c * c;\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb83_b5tr.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a > b + c || b > a + c || c > a + b {\n11 |         return\
    \ -1;\n   |                ^^\n   |                |\n   |                expected\
    \ `f64`, found integer\n   |                help: use a float literal: `-1.0`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        l if l >\
    \ c => 0.,\n        l if l > b => 0.,\n        l if l > a => 0.,\n        l =>\
    \ l / 2.,\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpbpt8zd33.rs:14:16\n\
    \   |\n14 |         l => l / 2.,\n   |                ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let area: isize = a + b + c; // total\
    \ area of the triangle\n    let area_round: f64 = area.round(); // round to the\
    \ nearest whole number\n    if area_round >= c {\n        area_round - c\n   \
    \ } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `round` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpdg9cs6eo.rs:11:32\n   |\n11 |     let area_round: f64 =\
    \ area.round(); // round to the nearest whole number\n   |                   \
    \             ^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdg9cs6eo.rs:12:22\n   |\n12 |     if area_round >= c {\n   |  \
    \                    ^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n12 |     if area_round >= c as f64 {\n   |     \
    \                   ++++++\n\nerror[E0277]: cannot subtract `isize` from `f64`\n\
    \  --> /tmp/tmpdg9cs6eo.rs:13:20\n   |\n13 |         area_round - c\n   |    \
    \                ^ no implementation for `f64 - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `f64`\n   = help: the following other types\
    \ implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n          \
    \   <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n            \
    \ <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a\
    \ i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a isize\
    \ as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdg9cs6eo.rs:15:9\n   |\n9  | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n15 |         -1\n   |         ^^\n\
    \   |         |\n   |         expected `f64`, found integer\n   |         help:\
    \ use a float literal: `-1.0`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let area = (a + b + c) * (a + b + c)\
    \ / 2.0;\n    \n    // Test for triangle form\n    if area == 0.0 {\n        return\
    \ 0.0;\n    }\n    if a + b > c {\n        return area;\n    }\n    if a + c >\
    \ b {\n        return area;\n    }\n    if b + c > a {\n        return area;\n\
    \    }\n    return 0.0;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpw1x1kjny.rs:10:42\n\
    \   |\n10 |     let area = (a + b + c) * (a + b + c) / 2.0;\n   |            \
    \                              ^ no implementation for `isize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a == 0 && b == 0 && c == 0 { return\
    \ 0; }\n    if a + b > c { \n        return -1.0\n    }\n    \n    match a + b\
    \ + c {\n        0 => 0.0,\n        _ => a + b + c\n    } / 2.0\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `/`\n  --> /tmp/tmp8lzrx6fo.rs:18:7\n\
    \   |\n18 |     } / 2.0\n   |       ^ expected expression\n   |\nhelp: parentheses\
    \ are required to parse this as an expression\n   |\n15 ~     (match a + b + c\
    \ {\n16 |         0 => 0.0,\n17 |         _ => a + b + c\n18 ~     }) / 2.0\n\
    \   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8lzrx6fo.rs:10:44\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a == 0 && b == 0 && c == 0 { return 0; }\n   |           \
    \                                 ^\n   |                                    \
    \        |\n   |                                            expected `f64`, found\
    \ integer\n   |                                            help: use a float literal:\
    \ `0.0`\n\nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp8lzrx6fo.rs:17:14\n\
    \   |\n15 | /     match a + b + c {\n16 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `{float}`\n17 | |         _ => a + b +\
    \ c\n   | |              ^^^^^^^^^ expected floating-point number, found `isize`\n\
    18 | |     } / 2.0\n   | |_____- `match` arms have incompatible types\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c && a + c > b && b + c\
    \ > a {\n        std::f64::consts::PI * a / std::f64::consts::sqrt((a * b + c)\
    \ * (a + b + c))\n    } else {\n        -1.\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sqrt` in module `std::f64::consts`\n\
    \  --> /tmp/tmpa5r_5bfx.rs:11:54\n   |\n11 |         std::f64::consts::PI * a\
    \ / std::f64::consts::sqrt((a * b + c) * (a + b + c))\n   |                  \
    \                                    ^^^^ not found in `std::f64::consts`\n\n\
    error[E0277]: cannot multiply `f64` by `isize`\n  --> /tmp/tmpa5r_5bfx.rs:11:30\n\
    \   |\n11 |         std::f64::consts::PI * a / std::f64::consts::sqrt((a * b +\
    \ c) * (a + b + c))\n   |                              ^ no implementation for\
    \ `f64 * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `Mul<Rhs>`:\n  \
    \           <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n      \
    \       <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n        \
    \     <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n            \
    \ <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // Three sides make a valid triangle\
    \ when the sum of any two sides is greater\n    // than the third side\n    if\
    \ a + b > c || a + c > b || b + c > a {\n        return -1.0;\n    }\n    \n \
    \   let area = a + (b - c) * (a / b).pow((c / a).sqrt());\n    return area as\
    \ f64;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp3rg8nfd_.rs:16:50\n   |\n16 |     let area = a + (b - c)\
    \ * (a / b).pow((c / a).sqrt());\n   |                                       \
    \           ^^^^ method not found in `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut triangle_area = 0.0;\n    if\
    \ a + b > c {\n        triangle_area += c - b;\n    }\n    if a + c > b {\n  \
    \      triangle_area += b - a;\n    }\n    if b + c > a {\n        triangle_area\
    \ += a - b;\n    }\n    return triangle_area;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp209h0_4m.rs:12:23\n\
    \   |\n12 |         triangle_area += c - b;\n   |                       ^^ no\
    \ implementation for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmp209h0_4m.rs:15:23\n   |\n15 |         triangle_area += b - a;\n\
    \   |                       ^^ no implementation for `{float} += isize`\n   |\n\
    \   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `AddAssign<Rhs>`:\n      \
    \       <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n          \
    \   <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128\
    \ as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as\
    \ AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp209h0_4m.rs:18:23\n\
    \   |\n18 |         triangle_area += a - b;\n   |                       ^^ no\
    \ implementation for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error,"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    \n    match {\n        \n        a\
    \ > 0 && b > 0 && c > 0 => {\n            \n            \n            match (a,\
    \ b) {\n                (s, e) => (a + s, b + e),\n                (_, 0) => (a\
    \ + b, b + c),\n                (s, _) => (a + s, b + c),\n            }\n   \
    \     }\n        _ => -1.0,\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `=>`\n\
    \  --> /tmp/tmpc56n9oud.rs:13:33\n   |\n13 |         a > 0 && b > 0 && c > 0 =>\
    \ {\n   |                                 ^^ expected one of `.`, `;`, `?`, `}`,\
    \ or an operator\n\nerror: expected one of `.`, `?`, `{`, or an operator, found\
    \ `}`\n  --> /tmp/tmpc56n9oud.rs:24:1\n   |\n11 |     match {\n   |     -----\
    \ while parsing this `match` expression\n...\n23 |     }\n   |      - expected\
    \ one of `.`, `?`, `{`, or an operator\n24 | }\n   | ^ unexpected token\n\nerror:\
    \ aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // return if triangle is invalid and\
    \ prints error\n    if a + b + c <= 0 {\n        println!(\"Invalid triangle side\
    \ lengths.\");\n        -1\n    } else {\n        // add up all sides\n      \
    \  let sides = a + b + c;\n        // return the area rounded up to 2 digits\n\
    \        let area = sides / 2.0\n        return area as f64;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `return`\n  --> /tmp/tmpzoazhaf1.rs:18:31\n\
    \   |\n18 |         let area = sides / 2.0\n   |                             \
    \  ^ help: add `;` here\n19 |         return area as f64;\n   |         ------\
    \ unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzoazhaf1.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpzoazhaf1.rs:18:26\n\
    \   |\n18 |         let area = sides / 2.0\n   |                          ^ no\
    \ implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b + c > b + c { \n        -1\n\
    \    } else {\n        ((b * b) - (a * c)) / (2.0 * a)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2mxstaal.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b + c > b + c { \n11 |         -1\n   |         ^^\n \
    \  |         |\n   |         expected `f64`, found integer\n   |         help:\
    \ use a float literal: `-1.0`\n\nerror[E0277]: cannot multiply `{float}` by `isize`\n\
    \  --> /tmp/tmp2mxstaal.rs:13:36\n   |\n13 |         ((b * b) - (a * c)) / (2.0\
    \ * a)\n   |                                    ^ no implementation for `{float}\
    \ * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut total: f64 = 0.0;\n    for\
    \ &s in &[a, b, c] {\n        if s > 0 {\n            total += s;\n        }\n\
    \    }\n    if total < a || total < b {\n        return -1.0;\n    }\n    total\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmpkjmdvvt6.rs:13:19\n\
    \   |\n13 |             total += s;\n   |                   ^^ no implementation\
    \ for `f64 += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkjmdvvt6.rs:16:16\n\
    \   |\n16 |     if total < a || total < b {\n   |                ^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    16 |     if total < a as f64 || total < b {\n   |                  ++++++\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpkjmdvvt6.rs:16:29\n   |\n16 |  \
    \   if total < a || total < b {\n   |                             ^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    16 |     if total < a || total < b as f64 {\n   |                            \
    \   ++++++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // return -1 if sum of three sides\
    \ is greater than the third side\n    if a + b > c {\n        return -1.0;\n \
    \   }\n\n    // else return area of the triangle \n    return (a * b * c) / (a\
    \ + b + c);\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7mho4fer.rs:16:12\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     return (a * b * c) / (a + b + c);\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n16 |     return ((a * b * c) / (a + b + c)) as f64;\n   | \
    \           +                         ++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c && a + c > b && b + c\
    \ > a {\n        let mut s = (a + b) * 2.0 + c;\n        let mut u = a + (a +\
    \ c) / 2.0;\n        let mut v = (b + c) / 2.0;\n        let mut w = (b + a) /\
    \ 2.0;\n        while u > v && u > w {\n            s = s + u * u;\n         \
    \   u = u - v;\n            v = v - w;\n            w = w - u;\n        }\n  \
    \      if u > v {\n            s = s + u * v;\n            w = w + v - u;\n  \
    \      } else {\n            s = s + v * w;\n            v = v - w;\n        }\n\
    \        if s > 0.0 && s < 1.0 {\n            return s * 100.0;\n        }\n \
    \       return -1.0;\n    }\n    -1.0;\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpzozbbke6.rs:11:29\n\
    \   |\n11 |         let mut s = (a + b) * 2.0 + c;\n   |                     \
    \        ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmpzozbbke6.rs:12:33\n   |\n12 |         let\
    \ mut u = a + (a + c) / 2.0;\n   |                                 ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpzozbbke6.rs:13:29\n\
    \   |\n13 |         let mut v = (b + c) / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmpzozbbke6.rs:14:29\n   |\n14 |"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match triangle_check(a, b, c){\n  \
    \      Ok(_) => a / b * c / b,\n        Err(_) => -1.0,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `triangle_check` in this scope\n  -->\
    \ /tmp/tmp8ibxrbgk.rs:10:11\n   |\n10 |     match triangle_check(a, b, c){\n \
    \  |           ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8ibxrbgk.rs:11:18\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n10 |     match triangle_check(a,\
    \ b, c){\n11 |         Ok(_) => a / b * c / b,\n   |                  ^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n11 |         Ok(_) => (a / b * c / b) as f64,\n   |       \
    \           +             ++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // Return 0 if all sides are equal\n\
    \    // Return 0 if all sides are zero\n    // Return 1 if all sides are greater\
    \ than the third side\n    \n    match a > 0 && b > 0 && c > 0 { \n        true\
    \ => \n            match b > c {\n                true => \n                 \
    \   match a > c {\n                        true => c * c + (b + a) * b + (a +\
    \ c) * a,\n                        false => 0\n                    },\n      \
    \          false => 0\n            },\n        false => 0\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph9rp_zrs.rs:19:33\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n19 |                         true => c * c + (b + a) * b + (a + c)\
    \ * a,\n   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n19 |                         true => (c * c + (b + a) * b +\
    \ (a + c) * a) as f64,\n   |                                 +               \
    \                  ++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        0.0\n    }\
    \ else {\n        let d = b - c;\n        d * (d - a) * (c - b)\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp11xno3cp.rs:14:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |         d * (d - a) * (c - b)\n   |         ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n14 |         (d * (d - a) * (c - b)) as f64\n   |         +\
    \                     ++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut sum = a * a + b * b + c * c;\n\
    \    if sum > c * c {\n        return -1.0;\n    }\n    else if sum < a * a ||\
    \ sum < b * b {\n        return 0.0;\n    }\n    return sqrt {sum / 2.0};\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `,` or `}`, found `/`\n  --> /tmp/tmpl3fwcejy.rs:17:22\n\
    \   |\n17 |     return sqrt {sum / 2.0};\n   |            ----      ^ expected\
    \ one of `,` or `}`\n   |            |\n   |            while parsing this struct\n\
    \nerror[E0422]: cannot find struct, variant or union type `sqrt` in this scope\n\
    \  --> /tmp/tmpl3fwcejy.rs:17:12\n   |\n17 |     return sqrt {sum / 2.0};\n  \
    \ |            ^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0422`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s <\
    \ 0 {\n        return -1;\n    }\n    s / 4\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0kt6mp02.rs:12:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n12 |         return -1;\n   |                ^^\n   |           \
    \     |\n   |                expected `f64`, found integer\n   |             \
    \   help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp0kt6mp02.rs:14:5\n   |\n9  | fn triangle_area(a: isize, b: isize, c:\
    \ isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n14 |     s / 4\n   |     ^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    14 |     (s / 4) as f64\n   |     +     ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b + c < 3 {\n        return\
    \ -1.0;\n    }\n    let area = (a * b + c) / 2.0;\n    area\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpv6y5got6.rs:13:28\n\
    \   |\n13 |     let area = (a * b + c) / 2.0;\n   |                          \
    \  ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // Validate the sums of the sides are\
    \ valid\n    if a + b > c || a + c > b || b + c > a {\n        return -1;\n  \
    \  }\n\n    // Return the area of the triangle (rounding to 2 decimal points)\n\
    \    (a + b + c) * 0.5\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcnxt3p4r.rs:12:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n12 |         return -1;\n   |                ^^\n   |           \
    \     |\n   |                expected `f64`, found integer\n   |             \
    \   help: use a float literal: `-1.0`\n\nerror[E0277]: cannot multiply `isize`\
    \ by `{float}`\n  --> /tmp/tmpcnxt3p4r.rs:16:17\n   |\n16 |     (a + b + c) *\
    \ 0.5\n   |                 ^ no implementation for `isize * {float}`\n   |\n\
    \   = help: the trait `Mul<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n             <&'a f32\
    \ as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as\
    \ Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n\
    \             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n      \
    \       <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n    if a + b > c\
    \ {\n        s = s + triangle_area(a, b, c);\n    }\n    if a + c > b {\n    \
    \    s = s + triangle_area(a, c, b);\n    }\n    if b + c > a {\n        s = s\
    \ + triangle_area(b, c,  a);\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match b - a {\n        0 | a => 1.0\
    \ * (a + b + c) / 4.0,\n        _ => 0.0,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0408]: variable `a` is not bound in all patterns\n  --> /tmp/tmphf97cwu5.rs:11:9\n\
    \   |\n11 |         0 | a => 1.0 * (a + b + c) / 4.0,\n   |         ^   - variable\
    \ not in all patterns\n   |         |\n   |         pattern doesn't bind `a`\n\
    \nerror[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmphf97cwu5.rs:11:22\n\
    \   |\n11 |         0 | a => 1.0 * (a + b + c) / 4.0,\n   |                  \
    \    ^ no implementation for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0408.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        triangle_area(b,\
    \ c, a)\n    } else {\n        if a + c > b {\n            triangle_area(c, a,\
    \ b)\n        } else {\n            (b * b) - ((a * a) + (c * c))\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptsvi0waj.rs:16:13\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |             (b * b) - ((a * a) + (c * c))\n   |            \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n16 |             ((b * b) - ((a\
    \ * a) + (c * c))) as f64\n   |             +                             ++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c { \n        (a * b).round()\n\
    \    } else {\n        ((c * a) + b).round()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `round` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmprkleqojj.rs:11:17\n   |\n11 |         (a * b).round()\n\
    \   |                 ^^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `round` found for type `isize` in the current scope\n  --> /tmp/tmprkleqojj.rs:13:23\n\
    \   |\n13 |         ((c * a) + b).round()\n   |                       ^^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a > c && b > c && a > b {\n \
    \       true => a + b + c,\n        false => -1.0,\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3591hap2.rs:11:17\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     match a > c && b > c && a > b {\n11 |         true => a + b +\
    \ c,\n   |                 ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n11 |         true => (a + b + c)\
    \ as f64,\n   |                 +         ++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let side1 = b - a;\n    let side2 =\
    \ c - a;\n    let side3 = side1 + side2;\n    if side1 == 0 || side2 == 0 || side3\
    \ == 0 {\n        return -1;\n    }\n    let mut area: f64 = 0.0;\n    let mut\
    \ area2 = 0.0;\n    let mut area3 = 0.0;\n    for side in 0..3 {\n        let\
    \ side = side as isize;\n        let square = (side*side) + a*side;\n        area\
    \ += square;\n        area2 += square;\n        area3 += square;\n    }\n    if\
    \ area3 >= side3 * side3 && area2 > side2 * side2 {\n        area = round(sqrt(area\
    \ / side3));\n    }\n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpcoh77q6c.rs:27:16\n\
    \   |\n27 |         area = round(sqrt(area / side3));\n   |                ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `sqrt` in this\
    \ scope\n  --> /tmp/tmpcoh77q6c.rs:27:22\n   |\n27 |         area = round(sqrt(area\
    \ / side3));\n   |                      ^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcoh77q6c.rs:14:16\n   |\n9  | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n14 |       \
    \  return -1;\n   |                ^^\n   |                |\n   |           \
    \     expected `f64`, found integer\n   |                help: use a float literal:\
    \ `-1.0`\n\nerror[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmpcoh77q6c.rs:22:14\n\
    \   |\n22 |         area += square;\n   |              ^^ no implementation for\
    \ `f64 += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpcoh77q6c.rs:23:15\n\
    \   |\n23 |         area2 += square;\n   |               ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area: f64 = 0.0;\n    for i\
    \ in 0..2 {\n        for j in 0..2 {\n            for k in 0..2 {\n          \
    \      let side = a * (i + j + k);\n                if side > b * c {\n      \
    \              break;\n                }\n                if side < b * c {\n\
    \                    continue;\n                }\n                let mut tri\
    \ = 0.0;\n                for m in 0..2 {\n                    let side = c *\
    \ i + m * (j + k);\n                    if side > b * c {\n                  \
    \      break;\n                    }\n                    tri += side * side;\n\
    \                    if side < b * c {\n                        continue;\n  \
    \                  }\n                    break;\n                }\n        \
    \        area += tri / 4.0;\n                if area > 0.0 {\n               \
    \     area = f64::ceil(2.0 / 3.0).powf(area as f64);\n                }\n    \
    \            break;\n            }\n        }\n    }\n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpoupszcun.rs:27:25\n\
    \   |\n27 |                     tri += side * side;\n   |                    \
    \     ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait\
    \ `AddAssign<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a / 2;\n    let mut b =\
    \ b / 2;\n    let mut c = c / 2;\n\n    loop {\n        match a + b + c {\n  \
    \          3 => return a + b + c,\n            _ => return -1, // one of the sides\
    \ doesn't fit the triangle\n        }\n\n        match a - b - c {\n         \
    \   3 => return a + b + c,\n            _ => return -1, // one of the sides doesn't\
    \ fit the triangle\n        }\n\n        match a - b + c {\n            3 => return\
    \ a + b + c,\n            _ => return -1, // one of the sides doesn't fit the\
    \ triangle\n        }\n\n        match a + b - c {\n            3 => return a\
    \ + b + c,\n            _ => return -1, // one of the sides doesn't fit the triangle\n\
    \        }\n\n        match a + b + c {\n            3 => return a + b + c,\n\
    \            _ => return -1, // one of the sides doesn't fit the triangle\n  \
    \      }\n\n        match a - b - c {\n            3 => return a + b + c,\n  \
    \          _ => return -1, // one of the sides doesn't fit the triangle\n    \
    \    }\n\n        a = a / 2;\n        b = b / 2;\n        c = c / 2;\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfpqoa6em.rs:16:25\n   |\n\
    16 |             3 => return a + b + c,\n   |                         ^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n16 |             3 => return (a + b + c) as f64,\n   |    \
    \                     +         ++++++++\n\nwarning: unreachable statement\n \
    \ --> /tmp/tmpfpqoa6em.rs:20:9\n   |\n15 | /         match a + b + c {\n16 | |\
    \             3 => return a + b + c,\n17 | |             _ => return -1, // one\
    \ of the sides doesn't fit the triangle\n18 | |         }\n   | |_________- any\
    \ code following this `match` expression is unreachable, as all arms diverge\n\
    19 | \n20 | /         match a - b - c {\n21 | |             3 => return a + b\
    \ + c,\n22 | |             _ => return -1, // one of the sides doesn't fit the\
    \ triangle\n23 | |         }\n   | |_________^ unreachable statement\n   |\n \
    \  = note: `#[warn(unreachable_code)]` on by default\n\nerror: aborting due to\
    \ previous error; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let side_sum = (a * b) + c * c;\n \
    \   if side_sum == 0 {\n        return 0.0;\n    }\n    let area = side_sum /\
    \ 2.0;\n    let rounded_area = round(area);\n    if rounded_area < area {\n  \
    \      rounded_area\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpbnx7lk0_.rs:15:24\n\
    \   |\n15 |     let rounded_area = round(area);\n   |                        ^^^^^\
    \ not found in this scope\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmpbnx7lk0_.rs:14:25\n   |\n14 |     let area = side_sum / 2.0;\n\
    \   |                         ^ no implementation for `isize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbnx7lk0_.rs:19:9\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n19 |         -1\n \
    \  |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0425.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    use std::f64;\n\n    fn clamp<T>(x:\
    \ T) -> T { std::cmp::min(std::cmp::max(x,0), std::numeric_limits<T>::max()) as\
    \ T }\n\n    let a = clamp(a);\n    let b = clamp(b);\n    let c = clamp(c);\n\
    \    let s = (a + b + c).sqrt();\n\n    if a == 0 || b == 0 || c == 0 || (s >\
    \ a && s > b && s > c) { return -1; }\n    else { return (s * s).ceil() as f64\
    \ }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmprngqpqha.rs:12:83\n\
    \   |\n12 |     fn clamp<T>(x: T) -> T { std::cmp::min(std::cmp::max(x,0), std::numeric_limits<T>::max())\
    \ as T }\n   |                                                               \
    \                    ^ ^\n   |\nhelp: use `::<...>` instead of `<...>` to specify\
    \ lifetime, type, or const arguments\n   |\n12 |     fn clamp<T>(x: T) -> T {\
    \ std::cmp::min(std::cmp::max(x,0), std::numeric_limits::<T>::max()) as T }\n\
    \   |                                                                        \
    \           ++\n\nerror[E0599]: no method named `sqrt` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmprngqpqha.rs:17:25\n   |\n17 |     let s\
    \ = (a + b + c).sqrt();\n   |                         ^^^^ method not found in\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprngqpqha.rs:19:73\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n19 |     if a == 0 || b == 0 || c == 0 || (s > a && s > b\
    \ && s > c) { return -1; }\n   |                                             \
    \                            ^^\n   |                                        \
    \                                 |\n   |                                    \
    \                                     expected `f64`, found integer\n   |    \
    \                                                                     help: use\
    \ a float literal: `-1.0`\n\nerror[E0277]: the trait bound `T: Ord` is not satisfied\n\
    \    --> /tmp/tmprngqpqha.rs:12:44\n     |\n12   |     fn clamp<T>(x: T) -> T\
    \ { std::cmp::min(std::cmp::max(x,0), std::numeric_limits<T>::max()) as T }\n\
    \     |                                            ^^^^^^^^^^^^^ the trait `Ord`\
    \ is not implemented for `T`\n     |\nnote: required by a bound in `std::cmp::max`\n\
    help: consider restricting type parameter `T`\n     |\n12   |     fn clamp<T:\
    \ std::cmp::Ord>(x: T) -> T { std::cmp::min(std::cmp::max(x,0), std::numeric_limits<T>::max())\
    \ as T }\n     |               ++++"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area: f64 = 0.0;\n    if a\
    \ + b > c { area = -1.0 }\n    else {\n        area = (a * b) / c;\n    }\n  \
    \  area = area.round() as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5i5v61cb.rs:13:16\n   |\n\
    10 |     let mut area: f64 = 0.0;\n   |                   --- expected due to\
    \ this type\n...\n13 |         area = (a * b) / c;\n   |                ^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n13 |         area = ((a * b) / c) as f64;\n   |           \
    \     +           ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5i5v61cb.rs:15:5\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |     area = area.round() as f64\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `()`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n  if a <= 0 || b <= 0 || c <= 0 {\n   \
    \ return -1;\n  }\n  if a + b > c || a + c > b || b + c > a {\n    return -1;\n\
    \  }\n  let a: f64 = a / c;\n  let b: f64 = b / c;\n  let c: f64 = c / c;\n  let\
    \ s1: f64 = a + b + c;\n  let s2: f64 = a - b - c;\n  let s3: f64 = a - b + c;\n\
    \  if s1 < s2 == s3 {\n    return s1;\n  }\n  else if s2 < s1 == s3 {\n    return\
    \ s2;\n  }\n  else {\n    return s3;\n  }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found keyword `return`\n  --> /tmp/tmps1zc35uy.rs:23:5\n\
    \   |\n22 |   if s1 < s2 == s3 {\n   |                 -- while parsing this struct\n\
    23 |     return s1;\n   |     ^^^^^^ expected identifier, found keyword\n\nerror:\
    \ comparison operators cannot be chained\n  --> /tmp/tmps1zc35uy.rs:22:9\n   |\n\
    22 |   if s1 < s2 == s3 {\n   |         ^    ^^\n   |\nhelp: parenthesize the\
    \ comparison\n   |\n22 |   if (s1 < s2) == s3 {\n   |      +       +\n\nerror:\
    \ missing condition for `if` expression\n  --> /tmp/tmps1zc35uy.rs:22:5\n   |\n\
    22 |   if s1 < s2 == s3 {\n   |     ^ expected if condition here\n\nerror: expected\
    \ identifier, found keyword `return`\n  --> /tmp/tmps1zc35uy.rs:26:5\n   |\n25\
    \ |   else if s2 < s1 == s3 {\n   |                      -- while parsing this\
    \ struct\n26 |     return s2;\n   |     ^^^^^^ expected identifier, found keyword\n\
    \nerror: comparison operators cannot be chained\n  --> /tmp/tmps1zc35uy.rs:25:14\n\
    \   |\n25 |   else if s2 < s1 == s3 {\n   |              ^    ^^\n   |\nhelp:\
    \ parenthesize the comparison\n   |\n25 |   else if (s2 < s1) == s3 {\n   |  \
    \         +       +\n\nerror: missing condition for `if` expression\n  --> /tmp/tmps1zc35uy.rs:25:10\n\
    \   |\n25 |   else if s2 < s1 == s3 {\n   |          ^ expected if condition here\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmps1zc35uy.rs:11:12\n   |\n9  |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |              \
    \                                     --- expected `f64` because of return type\n\
    10 |   if a <= 0 || b <= 0 || c <= 0 {\n11 |     return -1;\n   |            ^^\n\
    \   |            |\n   |            expected `f64`, found integer\n   |      \
    \      help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmps1zc35uy.rs:16:16\n   |\n16 |   let a: f64 = a / c;\n   |      \
    \    ---   ^^^^^ expected `f64`, found `isize`\n   |          |\n   |        \
    \  expected due to this\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    16 |   let a: f64 = (a / c) as f64;\n   |  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a > b {\n        true => b -\
    \ a,\n        false => c - a,\n    }\n    match b > c {\n        true => c - b,\n\
    \        false => a - b,\n    }\n    match c > a {\n        true => a - c,\n \
    \       false => b - c,\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_cumyqfs.rs:10:5\n   |\n\
    10 | /     match a > b {\n11 | |         true => b - a,\n12 | |         false\
    \ => c - a,\n13 | |     }\n   | |     ^- help: consider using a semicolon here\n\
    \   | |_____|\n   |       expected `()`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_cumyqfs.rs:14:5\n   |\n14 | /     match b > c {\n15 |\
    \ |         true => c - b,\n16 | |         false => a - b,\n17 | |     }\n   |\
    \ |     ^- help: consider using a semicolon here\n   | |_____|\n   |       expected\
    \ `()`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_cumyqfs.rs:19:17\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n19 |         true => a - c,\n   |                 ^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    19 |         true => (a - c) as f64,\n   |                 +     ++++++++\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let sum = a + b + c;\n    if sum <\
    \ c {\n        sum\n    } else {\n        c - (sum % c)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp172_0hyb.rs:12:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n12 |         sum\n   |         ^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n12 |         sum\
    \ as f64\n   |             ++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp172_0hyb.rs:14:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n14 |         c - (sum % c)\n   |         ^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    14 |         (c - (sum % c)) as f64\n   |         +             ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut sum = f64::INFINITY;\n    for\
    \ i in 0..3 {\n        if b > i {\n            sum += (a * b) / ((b - i) * (b\
    \ - i));\n        }\n        if c > i {\n            sum += (a * c) / ((c - i)\
    \ * (c - i));\n        }\n    }\n    if sum > a * b {\n        sum = a * b;\n\
    \    }\n    sum.round() as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmpc5tgirn_.rs:13:17\n\
    \   |\n13 |             sum += (a * b) / ((b - i) * (b - i));\n   |          \
    \       ^^ no implementation for `f64 += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `f64`\n\
    \  --> /tmp/tmpc5tgirn_.rs:16:17\n   |\n16 |             sum += (a * c) / ((c\
    \ - i) * (c - i));\n   |                 ^^ no implementation for `f64 += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc5tgirn_.rs:19:14\n   |\n19 |\
    \     if sum > a * b {\n   |              ^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n19 |     if sum >\
    \ (a * b) as f64 {\n   |              +     ++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc5tgirn_.rs:20:15\n   |\n10 |     let mut sum = f64::INFINITY;\n\
    \   |                   ------------- expected due to this value\n...\n20 |  \
    \       sum = a * b;\n   |               ^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if neces"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area: f64 = 0.0;\n    let mut\
    \ area_sum = 0.0;\n    \n    // calculate the area of the triangle\n    area =\
    \ ((b * b) - (4 * a * c))\n    \n    // if the area is positive \n    if area\
    \ >= 0.0 {\n        // get the sum of each side\n        area_sum = (a + b + c);\
    \ \n        // if the sum of each side is greater than the area of the triangle\
    \ \n        if area_sum > area {\n            area = area_sum;\n        }\n  \
    \  }\n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpt_ijujt4.rs:14:35\n\
    \   |\n14 |     area = ((b * b) - (4 * a * c))\n   |                         \
    \          ^ help: add `;` here\n...\n17 |     if area >= 0.0 {\n   |     -- unexpected\
    \ token\n\nwarning: unnecessary parentheses around assigned value\n  --> /tmp/tmpt_ijujt4.rs:14:12\n\
    \   |\n14 |     area = ((b * b) - (4 * a * c))\n   |            ^            \
    \         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove\
    \ these parentheses\n   |\n14 -     area = ((b * b) - (4 * a * c))\n14 +     area\
    \ = (b * b) - (4 * a * c)\n   | \n\nwarning: unnecessary parentheses around assigned\
    \ value\n  --> /tmp/tmpt_ijujt4.rs:19:20\n   |\n19 |         area_sum = (a + b\
    \ + c); \n   |                    ^         ^\n   |\nhelp: remove these parentheses\n\
    \   |\n19 -         area_sum = (a + b + c); \n19 +         area_sum = a + b +\
    \ c; \n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt_ijujt4.rs:14:12\n\
    \   |\n10 |     let mut area: f64 = 0.0;\n   |                   --- expected\
    \ due to this type\n...\n14 |     area = ((b * b) - (4 * a * c))\n   |       \
    \     ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n14 |     area = (((b * b) - (4 *\
    \ a * c))) as f64\n   |            +                       ++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt_ijujt4.rs:19:20\n   |\n11 |     let mut area_sum\
    \ = 0.0;\n   |                        --- expected due to this value\n...\n19\
    \ |         area_sum = (a + b + c); \n   |                    ^^^^^^^^^^^ expected\
    \ floating-point number, found `isize`\n\nerror: aborting due to 3 previous errors;\
    \ 2 warnings emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c && a + c > b && b + c\
    \ > a {\n        std::mem::uninitialized().unwrap().f64()\n    } else {\n    \
    \    -1\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "warning: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit`\
    \ instead\n  --> /tmp/tmp0sydry_m.rs:11:19\n   |\n11 |         std::mem::uninitialized().unwrap().f64()\n\
    \   |                   ^^^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]`\
    \ on by default\n\nerror[E0282]: type annotations needed\n  --> /tmp/tmp0sydry_m.rs:11:9\n\
    \   |\n11 |         std::mem::uninitialized().unwrap().f64()\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\
    \ cannot infer type for type parameter `T` declared on the function `uninitialized`\n\
    \   |\n   = note: type must be known at this point\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0sydry_m.rs:13:9\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n13 |         -1\n \
    \  |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror: aborting due to 2 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0282,\
    \ E0308.\nFor more information about an error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let area = (b * b) - 4.0 * a * (c +\
    \ a);\n    if area >= 0.0 {\n        return area/2;\n    } else {\n        return\
    \ -1.0;\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmp9kjar4jv.rs:10:30\n\
    \   |\n10 |     let area = (b * b) - 4.0 * a * (c + a);\n   |                \
    \              ^ no implementation for `{float} * isize`\n   |\n   = help: the\
    \ trait `Mul<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // TODO: use mathematical formula\n\
    \    \n    let ab = a * b\n    let bc = b * c\n    let ac = a * c\n    \n    if\
    \ ab > bc || ab > ac {\n        return -1.0;\n    } else {\n        return ab\
    \ + bc + ac\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n   \
    \ assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpb8jc4aj0.rs:12:19\n\
    \   |\n12 |     let ab = a * b\n   |                   ^ help: add `;` here\n\
    13 |     let bc = b * c\n   |     --- unexpected token\n\nerror: expected `;`,\
    \ found keyword `let`\n  --> /tmp/tmpb8jc4aj0.rs:13:19\n   |\n13 |     let bc\
    \ = b * c\n   |                   ^ help: add `;` here\n14 |     let ac = a *\
    \ c\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpb8jc4aj0.rs:14:19\n   |\n14 |     let ac = a * c\n   |        \
    \           ^ help: add `;` here\n15 |     \n16 |     if ab > bc || ab > ac {\n\
    \   |     -- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb8jc4aj0.rs:19:16\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n19 |         return ab + bc + ac\n   |                ^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n19 |         return (ab + bc + ac) as f64\n   |           \
    \     +            ++++++++\n\nerror: aborting due to 4 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let a = a / 2.0; \n    let b = b /\
    \ 2.0; \n    let c = c / 2.0; \n    if a + b > c {\n        return -1\n    } else\
    \ {\n        let d = (b * b) - (4 * a * c);\n        if d < 0.0 {\n          \
    \  return -1.0\n        } else {\n            return std::sqrt(d) \n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sqrt` in crate `std`\n  --> /tmp/tmp0gnbu6ke.rs:20:25\n\
    \   |\n20 |             return std::sqrt(d) \n   |                         ^^^^\
    \ not found in `std`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  -->\
    \ /tmp/tmp0gnbu6ke.rs:10:15\n   |\n10 |     let a = a / 2.0; \n   |          \
    \     ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmp0gnbu6ke.rs:11:15\n   |\n11 |     let b = b / 2.0; \n   |     \
    \          ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Div<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmp0gnbu6ke.rs:12:15\n   |\n12 |     let c\
    \ = c / 2.0; \n   |               ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a <= 0 || b <= 0 || c <= 0 || b\
    \ == c {\n        return -1;\n    }\n    \n    (a * a + b * b + c * c - a * b\
    \ - 2 * b * c) / (2.0 * a * b)\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9p2q30uq.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a <= 0 || b <= 0 || c <= 0 || b == c {\n11 |         return\
    \ -1;\n   |                ^^\n   |                |\n   |                expected\
    \ `f64`, found integer\n   |                help: use a float literal: `-1.0`\n\
    \nerror[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmp9p2q30uq.rs:14:56\n\
    \   |\n14 |     (a * a + b * b + c * c - a * b - 2 * b * c) / (2.0 * a * b)\n\
    \   |                                                        ^ no implementation\
    \ for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b + c < 3 {\n        return\
    \ -1;\n    }\n    let mut area: f64 = 0.0;\n\n    for _ in 0..3 {\n        let\
    \ x: f64 = (a + (b * 1.0))/(c * 1.0);\n        let y: f64 = (b + (c * 1.0))/(a\
    \ * 1.0);\n        area += x * y;\n        \n        if area > 1.0 {\n       \
    \     return -1.0;\n        }\n    }\n\n    area\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp934dmpqg.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b + c < 3 {\n11 |         return -1;\n   |           \
    \     ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmp934dmpqg.rs:16:30\n   |\n16 | \
    \        let x: f64 = (a + (b * 1.0))/(c * 1.0);\n   |                       \
    \       ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot multiply\
    \ `isize` by `{float}`\n  --> /tmp/tmp934dmpqg.rs:16:41\n   |\n16 |         let\
    \ x: f64 = (a + (b * 1.0))/(c * 1.0);\n   |                                  \
    \       ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot multiply\
    \ `isize` by `{float}`\n  --> /tmp/tmp934dmpqg.rs:17:30\n   |\n17 |         let\
    \ y: f64 = (b + (c * 1.0))/(a * 1.0);\n   |                              ^ no\
    \ implementation for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>`\
    \ is not implemented for "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    (a * b + c) / 2.0\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpq1a5vbse.rs:10:17\n\
    \   |\n10 |     (a * b + c) / 2.0\n   |                 ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area_sum = f64::ZERO;\n   \
    \ for a in 0..a {\n        for b in 0..b {\n            for c in 0..c {\n    \
    \            if a + b > c {\n                    break;\n                }\n \
    \               area_sum += pow((pow(b, 2) - pow(a, 2) + pow(c, 2) - 1), 0.5);\n\
    \            }\n        }\n    }\n    area_sum / pow(a * c, 0.5)\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `pow` in this scope\n  --> /tmp/tmpqyxyv88b.rs:17:29\n\
    \   |\n17 |                 area_sum += pow((pow(b, 2) - pow(a, 2) + pow(c, 2)\
    \ - 1), 0.5);\n   |                             ^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `pow` in this scope\n  --> /tmp/tmpqyxyv88b.rs:17:34\n\
    \   |\n17 |                 area_sum += pow((pow(b, 2) - pow(a, 2) + pow(c, 2)\
    \ - 1), 0.5);\n   |                                  ^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `pow` in this scope\n  --> /tmp/tmpqyxyv88b.rs:17:46\n\
    \   |\n17 |                 area_sum += pow((pow(b, 2) - pow(a, 2) + pow(c, 2)\
    \ - 1), 0.5);\n   |                                              ^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `pow` in this scope\n  -->\
    \ /tmp/tmpqyxyv88b.rs:17:58\n   |\n17 |                 area_sum += pow((pow(b,\
    \ 2) - pow(a, 2) + pow(c, 2) - 1), 0.5);\n   |                               \
    \                           ^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `pow` in this scope\n  --> /tmp/tmpqyxyv88b.rs:21:16\n   |\n21\
    \ |     area_sum / pow(a * c, 0.5)\n   |                ^^^ not found in this\
    \ scope\n\nwarning: unnecessary parentheses around function argument\n  --> /tmp/tmpqyxyv88b.rs:17:33\n\
    \   |\n17 |                 area_sum += pow((pow(b, 2) - pow(a, 2) + pow(c, 2)\
    \ - 1), 0.5);\n   |                                 ^                        \
    \             ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n17 -                 area_sum += pow((pow(b,\
    \ 2) - pow(a, 2) + pow(c, 2) - 1), 0.5);\n17 +                 area_sum += pow(pow(b,\
    \ 2) - pow(a, 2) + pow(c, 2) - 1, 0.5);\n   | \n\nerror[E0599]: no associated\
    \ item named `ZERO` found for type `f64` in the current scope\n  --> /tmp/tmpqyxyv88b.rs:10:29\n\
    \   |\n10 |     let mut area_sum = f64::ZERO;\n   |                          \
    \   ^^^^ associated item not found in `f64`\n\nerror: aborting due to 6 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0425,\
    \ E0"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    (a * b + c).abs() / (a * a + b * b).sqrt()\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpkfwm7qno.rs:10:41\n   |\n10 |     (a * b + c).abs() / (a\
    \ * a + b * b).sqrt()\n   |                                         ^^^^ method\
    \ not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkfwm7qno.rs:10:5\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n10 |     (a * b + c).abs() / (a * a + b * b).sqrt()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n10 |     ((a * b + c).abs() / (a * a + b * b).sqrt()) as f64\n\
    \   |     +                                          ++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a == 0 || b == 0 || c == 0 {\n \
    \       return -1.0;\n    }\n    let mut tri_area = 0.0;\n    for i in 0..3 {\n\
    \        tri_area += pow(a, (i - 0.5)) * pow(b, i);\n    }\n    tri_area += pow(c,\
    \ 0.5);\n    tri_area = f64::from(tri_area);\n    tri_area < 0 ? -1.0 : tri_area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `pow` in this scope\n  --> /tmp/tmpire5hc_k.rs:15:21\n\
    \   |\n15 |         tri_area += pow(a, (i - 0.5)) * pow(b, i);\n   |         \
    \            ^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `pow` in this scope\n  --> /tmp/tmpire5hc_k.rs:15:41\n   |\n15 |         tri_area\
    \ += pow(a, (i - 0.5)) * pow(b, i);\n   |                                    \
    \     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `pow`\
    \ in this scope\n  --> /tmp/tmpire5hc_k.rs:17:17\n   |\n17 |     tri_area += pow(c,\
    \ 0.5);\n   |                 ^^^ not found in this scope\n\nerror[E0573]: expected\
    \ type, found local variable `tri_area`\n  --> /tmp/tmpire5hc_k.rs:19:27\n   |\n\
    19 |     tri_area < 0 ? -1.0 : tri_area\n   |                           ^^^^^^^^\
    \ expecting a type here because of type ascription\n\nwarning: unnecessary parentheses\
    \ around function argument\n  --> /tmp/tmpire5hc_k.rs:15:28\n   |\n15 |      \
    \   tri_area += pow(a, (i - 0.5)) * pow(b, i);\n   |                         \
    \   ^       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n15 -         tri_area += pow(a, (i - 0.5)) *\
    \ pow(b, i);\n15 +         tri_area += pow(a, i - 0.5) * pow(b, i);\n   | \n\n\
    error[E0277]: cannot subtract `{float}` from `{integer}`\n  --> /tmp/tmpire5hc_k.rs:15:31\n\
    \   |\n15 |         tri_area += pow(a, (i - 0.5)) * pow(b, i);\n   |         \
    \                      ^ no implementation for `{integer} - {float}`\n   |\n \
    \  = help: the trait `Sub<{float}>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the\
    \ `?` operator can only be applied to values that implement `Try`\n  --> /tmp/tmpire5hc_k.rs:19:16\n\
    \   |\n19 |     tri_area "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ if a + c > b {\n        -1\n    } else {\n        ((a + b) as f64) / ((a + c)\
    \ as f64) as f64\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjqop4nsy.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjqop4nsy.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area: f64 = 0.0;\n\n    if\
    \ a >= c && b >= c {\n        // all three sides are greater than or equal to\
    \ each other\n        let mut sum: f64 = 0.0;\n        sum += a;\n        sum\
    \ += b;\n        sum += c;\n        // check if triangle area is valid\n     \
    \   if sum >= 6.0 {\n            area = sum.pow(1.0 / 3.0);\n        } else {\n\
    \            area = -1.0;\n        }\n    } else {\n        let mut sum: f64 =\
    \ 0.0;\n        sum += a;\n        sum += b;\n        sum += c;\n        // check\
    \ if triangle area is valid\n        if sum >= 6.0 {\n            area = sum.pow(1.0\
    \ / 3.0);\n        } else {\n            area = -1.0;\n        }\n    }\n\n  \
    \  if area < -1.0 {\n        area = -1.0;\n    }\n\n    if area > 1.0 {\n    \
    \    area = 1.0;\n    }\n\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmp0cmaht2r.rs:15:13\n\
    \   |\n15 |         sum += a;\n   |             ^^ no implementation for `f64\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmp0cmaht2r.rs:16:13\n\
    \   |\n16 |         sum += b;\n   |             ^^ no implementation for `f64\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmp0cmaht2r.rs:17:13\n\
    \   |\n17 |         sum += c;\n   |             ^^ no implementation for `f64\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0599]: no method named `pow` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp0cmaht2r.rs:20:24\n   |\n20 |             area\
    \ = sum.pow(1.0 / 3.0);\n   |                        ^"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c && a + c > b && b + c\
    \ > a { \n        return (a * b * c) / (a * b + c * a + b * c);\n    } else {\n\
    \        return -1;\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr9mkcx27.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c && a + c > b && b + c > a { \n11 |         return\
    \ (a * b * c) / (a * b + c * a + b * c);\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n11 |         return ((a * b * c) / (a * b + c * a + b * c))\
    \ as f64;\n   |                +                                     ++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c || a + c > b || b + c\
    \ > a {\n        -1.0;\n    } else {\n        ((a + b + c) * 0.25).round() as\
    \ f64\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpte7r3m31.rs:10:44\n   |\n\
    10 |       if a + b > c || a + c > b || b + c > a {\n   |  ____________________________________________^\n\
    11 | |         -1.0;\n   | |             - help: remove this semicolon\n12 | |\
    \     } else {\n   | |_____^ expected `f64`, found `()`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmpte7r3m31.rs:13:22\n   |\n13 | \
    \        ((a + b + c) * 0.25).round() as f64\n   |                      ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area = 0;\n    if a + b > c\
    \ {\n        if b > c {\n            area += (b + c) / 2;\n            area +=\
    \ a / 2;\n            area += c / 2;\n        } else {\n            area += (a\
    \ + b) / 2;\n            area += a / 2;\n            area += b / 2;\n        }\n\
    \    } else {\n        if b > c {\n            area += (a + c) / 2;\n        \
    \    area += a / 2;\n            area += c / 2;\n        } else {\n          \
    \  area += a / 2;\n            area += b / 2;\n            area += c / 2;\n  \
    \      }\n    }\n    area /= 2\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcfcwa_55.rs:32:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n32 |     area /= 2\n   |     ^^^^^^^^^ expected `f64`, found `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let sum = a + b + c;\n\n    if sum\
    \ < 4 {\n        -1\n    } else {\n        (sum - a + b - c) / (2.0 * a)\n   \
    \ }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6o_ca272.rs:13:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot multiply `{float}` by `isize`\n  --> /tmp/tmp6o_ca272.rs:15:34\n   |\n\
    15 |         (sum - a + b - c) / (2.0 * a)\n   |                             \
    \     ^ no implementation for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1.;\n\
    \    }\n    let mut a2 = 0.;\n    let mut b2 = 0.;\n    let mut c2 = 0.;\n   \
    \ let mut s = 0.;\n    for i in 0..a {\n        a2 += i;\n    }\n    for i in\
    \ 0..b {\n        b2 += i;\n    }\n    for i in 0..c {\n        c2 += i;\n   \
    \ }\n    s = a2 * b2 + c2 * a2 + b2 * c2;\n    if s > 0. {\n        return s /\
    \ sqrt(a * c + b * b);\n    }\n    return -1.;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmpaw7rp90x.rs:28:20\n\
    \   |\n28 |         return s / sqrt(a * c + b * b);\n   |                    ^^^^\
    \ not found in this scope\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpaw7rp90x.rs:18:12\n   |\n18 |         a2 += i;\n   |          \
    \  ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpaw7rp90x.rs:21:12\n   |\n21 |         b2 += i;\n   |          \
    \  ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpaw7rp90x.rs:24:12\n   |\n24 |         c2 += i;\n   |          \
    \  ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as Add"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // if a>b+c then a,b,c are colinear\n\
    \    if a+b+c < a {\n        return -1;\n    }\n\n    // if a<b+c then a,b,c are\
    \ colinear\n    if a+b+c > b {\n        return -1;\n    }\n\n    // if b<a+c then\
    \ a,b,c are colinear\n    if a+b+c < b+c {\n        return -1;\n    }\n\n    //\
    \ if a<b+c and b<a+c then a,b,c are colinear\n    if a+b+c < b+c {\n        return\
    \ -1;\n    }\n\n    // if a>b+c and b<a+c then a,b,c are colinear\n    if a+b+c\
    \ > b+c {\n        return -1;\n    }\n\n    let area = (a * b + c * a * b) / (4.0\
    \ * std::sqrt(a * b + c * a * b));\n    if area < 0 {\n        return -1;\n  \
    \  }\n    return area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sqrt` in crate `std`\n  --> /tmp/tmpp0fycapd.rs:35:50\n\
    \   |\n35 |     let area = (a * b + c * a * b) / (4.0 * std::sqrt(a * b + c *\
    \ a * b));\n   |                                                  ^^^^ not found\
    \ in `std`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp0fycapd.rs:12:16\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n12 |         return -1;\n   |                ^^\n   |    \
    \            |\n   |                expected `f64`, found integer\n   |      \
    \          help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide `isize`\
    \ by `{float}`\n  --> /tmp/tmpp0fycapd.rs:35:36\n   |\n35 |     let area = (a\
    \ * b + c * a * b) / (4.0 * std::sqrt(a * b + c * a * b));\n   |             \
    \                       ^ no implementation for `isize / {float}`\n   |\n   =\
    \ help: the trait `Div<{float}>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Div<Rhs>`:\n             <&'a f32 as\
    \ Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n\
    \             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n    \
    \         <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n          \
    \   <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let side1 = b * 2 - c;\n    let side2\
    \ = a * 2 - b;\n    let side3 = a * 2 - c;\n    if side1 + side2 > side3 {\n \
    \       // Valid triangle\n        let area = side1 / (side1 + side2);\n     \
    \   \n        if area > 1 {\n            area.round() as f64\n        } else {\n\
    \            -1.0 as f64\n        }\n    } else {\n        -1.0 as f64\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `round` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpx92k_6yl.rs:18:18\n   |\n18 |             area.round()\
    \ as f64\n   |                  ^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let side1: f64 = a + b + c;\n    if\
    \ side1 < 3 {\n        return -1.0;\n    }\n\n    let side2: f64 = a - b - c;\n\
    \    if side2 < 3 {\n        return -1.0;\n    }\n\n    let side3: f64 = a - b\
    \ + c;\n    if side3 < 3 {\n        return -1.0;\n    }\n\n    let area = (a *\
    \ b * c) / (side1 * side2 * side3);\n    // rounding up to the 2 decimal points\
    \ if area is greater than 1.0\n    area.round();\n    area\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4fckdp82.rs:10:22\n   |\n\
    10 |     let side1: f64 = a + b + c;\n   |                ---   ^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |                |\n   |                expected due\
    \ to this\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n10 |     let\
    \ side1: f64 = (a + b + c) as f64;\n   |                      +         ++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4fckdp82.rs:11:16\n   |\n11 |\
    \     if side1 < 3 {\n   |                ^\n   |                |\n   |     \
    \           expected `f64`, found integer\n   |                help: use a float\
    \ literal: `3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4fckdp82.rs:15:22\n\
    \   |\n15 |     let side2: f64 = a - b - c;\n   |                ---   ^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |                |\n   |                expected\
    \ due to this\n   |\nhelp: you can convert an `isize` to an `f64`, producing the\
    \ floating point representation of the integer, rounded if necessary\n   |\n15\
    \ |     let side2: f64 = (a - b - c) as f64;\n   |                      +    \
    \     ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4fckdp82.rs:16:16\n\
    \   |\n16 |     if side2 < 3 {\n   |                ^\n   |                |\n\
    \   |                expected `f64`, found integer\n   |                help:\
    \ use a float literal: `3.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4fckdp82.rs:20:22\n\
    \   |\n20 |     let side3: f64 = a - b + c;\n   |                ---   ^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |                |\n   |                expected\
    \ due to this\n   |\nhelp: you can convert an `isize` to an `f64`, producing the\
    \ floating point representation of the integer, rounded if necessary\n   |\n20\
    \ |     let side3: f64 = (a - b + c) as f64;\n   |                      +    \
    \     ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4fckdp82.rs:21:16\n\
    \   |\n21 |     if side3 < 3 {\n   |                ^\n   |                |\n\
    \   |                expected `f64`, found i"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    (a + b + c).abs() / 3.0\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp612wjttp.rs:10:23\n\
    \   |\n10 |     (a + b + c).abs() / 3.0\n   |                       ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n  use std::cmp::Ordering;\n\n  if a + b\
    \ > c {\n    if a + c > b {\n      return (a * b) / c;\n    }\n    if c + b >\
    \ a { \n      return (c + a) / b;\n    }\n  }\n  if a + c > b {\n    if b + c\
    \ > a { \n      return (b + a) / c;\n    }\n    if a + b > c { \n      return\
    \ (b + c) / a;\n    }\n  }\n  if b + c > a {\n    if a + c > b { \n      return\
    \ (a + b) / c;\n    }\n    if b + a > c { \n      return (a + c) / b;\n    }\n\
    \  }\n  if c + a > b {\n    if a + b > c { \n      return (a + b) / c;\n    }\n\
    \    if c + b > a { \n      return (c + a) / b;\n    }\n  }\n  if a + b > c &&\
    \ b + c > a && c + a > b && a + c > b {\n    (a + b) * (b + c) * (c + a) as f64\n\
    \  }\n  else {\n    -1\n  }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmpsi_n99h2.rs:10:7\n\
    \   |\n10 |   use std::cmp::Ordering;\n   |       ^^^^^^^^^^^^^^^^^^\n   |\n \
    \  = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsi_n99h2.rs:14:14\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n14 |       return (a\
    \ * b) / c;\n   |              ^^^^^^^^^^^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n14 |       return ((a * b) / c)\
    \ as f64;\n   |              +           ++++++++\n\nerror[E0277]: cannot multiply\
    \ `isize` by `f64`\n  --> /tmp/tmpsi_n99h2.rs:45:23\n   |\n45 |     (a + b) *\
    \ (b + c) * (c + a) as f64\n   |                       ^ no implementation for\
    \ `isize * f64`\n   |\n   = help: the trait `Mul<f64>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsi_n99h2.rs:48:5\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n48 |     -1\n   |     ^^\n   |     |\n   |     expected `f64`,\
    \ found integer\n   |     help: use a float literal: `-1.0`\n\nerror: aborting\
    \ due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match triangle_condition(a, b, c) {\n\
    \        true => 1.0,\n        false => -1.0,\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `triangle_condition` in this scope\n\
    \  --> /tmp/tmpx03xj59o.rs:10:11\n   |\n10 |     match triangle_condition(a, b,\
    \ c) {\n   |           ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match (a, b ,c) {\n        (0 .. 2)\
    \ => (a + b + c) / 2,\n        (2 .. 3) => (a + b + c) / 2,\n        _ => -1\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmp8p9nkoys.rs:11:10\n\
    \   |\n11 |         (0 .. 2) => (a + b + c) / 2,\n   |          ^^^^^^\n   |\n\
    \   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmp8p9nkoys.rs:12:10\n   |\n12 |         (2 .. 3) => (a + b + c) /\
    \ 2,\n   |          ^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8p9nkoys.rs:11:10\n\
    \   |\n10 |     match (a, b ,c) {\n   |           --------- this expression has\
    \ type `(isize, isize, isize)`\n11 |         (0 .. 2) => (a + b + c) / 2,\n  \
    \ |          ^    - this is of type `{integer}`\n   |          |\n   |       \
    \   expected tuple, found integer\n   |\n   = note: expected tuple `(isize, isize,\
    \ isize)`\n               found type `{integer}`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8p9nkoys.rs:11:15\n   |\n10 |     match (a, b ,c) {\n   |     \
    \      --------- this expression has type `(isize, isize, isize)`\n11 |      \
    \   (0 .. 2) => (a + b + c) / 2,\n   |          -    ^ expected tuple, found integer\n\
    \   |          |\n   |          this is of type `{integer}`\n   |\n   = note:\
    \ expected tuple `(isize, isize, isize)`\n               found type `{integer}`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8p9nkoys.rs:12:10\n   |\n10 |\
    \     match (a, b ,c) {\n   |           --------- this expression has type `(isize,\
    \ isize, isize)`\n11 |         (0 .. 2) => (a + b + c) / 2,\n12 |         (2 ..\
    \ 3) => (a + b + c) / 2,\n   |          ^    - this is of type `{integer}`\n \
    \  |          |\n   |          expected tuple, found integer\n   |\n   = note:\
    \ expected tuple `(isize, isize, isize)`\n               found type `{integer}`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8p9nkoys.rs:12:15\n   |\n10 |\
    \     match (a, b ,c) {\n   |           --------- this expression has type `(isize,\
    \ isize, isize)`\n11 |         (0 .. 2) => (a + b + c) / 2,\n12 |         (2 ..\
    \ 3) ="
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a < b + c ? a : b + c;\n\
    \    let mut b = a < c + b ? a : c + b;\n    let mut c = b < a + c ? b : a + c;\n\
    \    a + b + c\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpectxpi0v.rs:10:29\n   |\n10 |     let mut a = a < b + c ? a : b\
    \ + c;\n   |                             ^ expected one of `.`, `;`, `?`, `else`,\
    \ or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area_sum: f64 = a + b + c;\n\
    \    if area_sum > c {\n        area_sum -= c;\n    }\n    area_sum\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp76ueupl5.rs:10:29\n   |\n\
    10 |     let mut area_sum: f64 = a + b + c;\n   |                       ---  \
    \ ^^^^^^^^^ expected `f64`, found `isize`\n   |                       |\n   |\
    \                       expected due to this\n   |\nhelp: you can convert an `isize`\
    \ to an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n   |\n10 |     let mut area_sum: f64 = (a + b + c) as f64;\n \
    \  |                             +         ++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp76ueupl5.rs:11:19\n   |\n11 |     if area_sum > c {\n \
    \  |                   ^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n11 |     if area_sum > c as f64 {\n   |        \
    \             ++++++\n\nerror[E0277]: cannot subtract-assign `isize` from `f64`\n\
    \  --> /tmp/tmp76ueupl5.rs:12:18\n   |\n12 |         area_sum -= c;\n   |    \
    \              ^^ no implementation for `f64 -= isize`\n   |\n   = help: the trait\
    \ `SubAssign<isize>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n\
    \             <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n    \
    \         <f64 as SubAssign>\n             <i128 as SubAssign<&i128>>\n      \
    \       <i128 as SubAssign>\n             <i16 as SubAssign<&i16>>\n         \
    \    <i16 as SubAssign>\n           and 20 others\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a.round();\n    let mut\
    \ b = b.round();\n    let mut c = c.round();\n    \n    if a + b > c {\n     \
    \   if a + c > b {\n            a += c;\n            c += b;\n            b +=\
    \ a;\n        } else {\n            a += b;\n            b += c;\n           \
    \ c += a;\n        }\n    }\n    \n    a /= 2;\n    b /= 2;\n    c /= 2;\n   \
    \ \n    if a + b > c {\n        a + b + c\n    } else {\n        -1\n    }\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `round` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpvnesa2n7.rs:10:19\n   |\n10 |     let mut a = a.round();\n\
    \   |                   ^^^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `round` found for type `isize` in the current scope\n  --> /tmp/tmpvnesa2n7.rs:11:19\n\
    \   |\n11 |     let mut b = b.round();\n   |                   ^^^^^ method not\
    \ found in `isize`\n\nerror[E0599]: no method named `round` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpvnesa2n7.rs:12:19\n   |\n12 |     let mut\
    \ c = c.round();\n   |                   ^^^^^ method not found in `isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpvnesa2n7.rs:33:9\n   |\n9  | fn\
    \ triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |                 \
    \                                  --- expected `f64` because of return type\n\
    ...\n33 |         -1\n   |         ^^\n   |         |\n   |         expected `f64`,\
    \ found integer\n   |         help: use a float literal: `-1.0`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        c if a <\
    \ b || b < a || c < a => {\n            std::f64::EPSILON * std::f64::from((a\
    \ + b + c) / 2.0).sqrt()\n        }\n        _ => -1.0\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `from` in module `std::f64`\n  --> /tmp/tmpwcn4c_24.rs:12:43\n\
    \   |\n12 |             std::f64::EPSILON * std::f64::from((a + b + c) / 2.0).sqrt()\n\
    \   |                                           ^^^^ not found in `std::f64`\n\
    \nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpwcn4c_24.rs:12:60\n\
    \   |\n12 |             std::f64::EPSILON * std::f64::from((a + b + c) / 2.0).sqrt()\n\
    \   |                                                            ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    assert!(a + b + c > 0);\n    if a +\
    \ b > c { a + b - c } else { c - a + b }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpckgcxm96.rs:11:20\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     assert!(a + b + c > 0);\n11 |     if a + b > c { a + b - c }\
    \ else { c - a + b }\n   |                    ^^^^^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n11 |     if\
    \ a + b > c { (a + b - c) as f64 } else { c - a + b }\n   |                  \
    \  +         ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckgcxm96.rs:11:39\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n10 |     assert!(a + b + c > 0);\n11 |     if a + b > c { a + b\
    \ - c } else { c - a + b }\n   |                                       ^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n11 |     if a + b > c { a + b - c } else { (c - a + b) as f64\
    \ }\n   |                                       +         ++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n  if a + b > c || a + c > b || b + c >\
    \ a {\n    return -1.0;\n  }\n  \n  a*a + b*b + c*c \n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkwviwy_9.rs:14:3\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |   a*a + b*b + c*c \n   |   ^^^^^^^^^^^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n14 |   (a*a\
    \ + b*b + c*c) as f64 \n   |   +               ++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        1.0\n    }\
    \ else if b + c > a {\n        1.0\n    } else if c + a > b {\n        1.0\n \
    \   } else {\n        (b * b) - (a * c)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvqjyh0rq.rs:17:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n17 |         (b * b) - (a * c)\n   |         ^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    17 |         ((b * b) - (a * c)) as f64\n   |         +                 ++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let ab = a + b;\n    let ac = a + c;\n\
    \    let bc = b + c;\n    let min = ab < ac && bc < ac ? ab : bc;\n    let max\
    \ = ab > bc ? ab : bc;\n    min / (max - min) as f64\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `ab`\n\
    \  --> /tmp/tmp5lx4wcqz.rs:13:36\n   |\n13 |     let min = ab < ac && bc < ac\
    \ ? ab : bc;\n   |                                    ^^ expected one of `.`,\
    \ `;`, `?`, `else`, or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    } else if a + c > b {\n        return -1;\n    } else if b + c > a {\n  \
    \      return -1;\n    } else {\n        return triangle_perimeter(a, b, c) /\
    \ 2.0;\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `triangle_perimeter` in this scope\n\
    \  --> /tmp/tmp7dm8x5bj.rs:17:16\n   |\n17 |         return triangle_perimeter(a,\
    \ b, c) / 2.0;\n   |                ^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7dm8x5bj.rs:11:16\n   |\n9  |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |              \
    \                                     --- expected `f64` because of return type\n\
    10 |     if a + b > c {\n11 |         return -1;\n   |                ^^\n   |\
    \                |\n   |                expected `f64`, found integer\n   |  \
    \              help: use a float literal: `-1.0`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area_sum = 0;\n\n    // Calculate\
    \ the area\n    if a + b > c {\n        area_sum += (a * b) / (c * c) as f64;\n\
    \    } else if a + c > b {\n        area_sum += (a + c) * (b - a) / (c * c) as\
    \ f64;\n    } else {\n        area_sum += (a + b) * (c + b - a) / (c * c) as f64;\n\
    \    }\n\n    // Round the area to 2 decimal places\n    area_sum.round()\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `f64`\n  --> /tmp/tmprpo8s6n4.rs:14:29\n\
    \   |\n14 |         area_sum += (a * b) / (c * c) as f64;\n   |              \
    \               ^ no implementation for `isize / f64`\n   |\n   = help: the trait\
    \ `Div<f64>` is not implemented for `isize`\n   = help: the following other types\
    \ implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n          \
    \   <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n            \
    \ <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a\
    \ i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize\
    \ as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot divide `isize`\
    \ by `f64`\n  --> /tmp/tmprpo8s6n4.rs:16:39\n   |\n16 |         area_sum += (a\
    \ + c) * (b - a) / (c * c) as f64;\n   |                                     \
    \  ^ no implementation for `isize / f64`\n   |\n   = help: the trait `Div<f64>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `isize` by `f64`\n  -->\
    \ /tmp/tmprpo8s6n4.rs:18:43\n   |\n18 |         area_sum += (a + b) * (c + b -\
    \ a) / (c * c) as f64;\n   |                                           ^ no implementation\
    \ for `isize / f64`\n   |\n   = help: the trait `Div<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0689]: can't call method `round` on ambiguous numeri"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // Calculate the area of the triangle\
    \ when two sides are equal\n    let area_equal = a + b + c == 0;\n\n    if area_equal\
    \ {\n        // Calculate the area of the triangle when one side is equal\n  \
    \      let area_one = (a + b) * (b + c) * (a + c) == 0;\n\n        // Calculate\
    \ the area of the triangle when all sides are equal\n        let area_all = (a\
    \ * b) * (b * c) * (c * a) == 0;\n\n        // Calculate the area of the triangle\
    \ when all sides are equal\n        let area_all_rounded = (a * b * c) / (f64::from(a\
    \ + b + c));\n\n        area_equal || area_one || area_all || area_all_rounded\n\
    \    } else { \n        // Calculate the area of the triangle when all sides are\
    \ equal\n        let area_all = (a * b) * (b * c) * (a * c) == 0;\n\n        //\
    \ Calculate the area of the triangle when all sides are equal\n        let area_all_rounded\
    \ = (a * b * c) / (f64::from(a + b + c));\n\n        area_all || area_all_rounded\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: From<isize>` is not satisfied\n  -->\
    \ /tmp/tmpna4tr0ca.rs:21:47\n   |\n21 |         let area_all_rounded = (a * b\
    \ * c) / (f64::from(a + b + c));\n   |                                       \
    \        ^^^^^^^^^ the trait `From<isize>` is not implemented for `f64`\n   |\n\
    \   = help: the following other types implement trait `From<T>`:\n           \
    \  <f32 as From<i16>>\n             <f32 as From<i8>>\n             <f32 as From<u16>>\n\
    \             <f32 as From<u8>>\n             <f64 as From<f32>>\n           \
    \  <f64 as From<i16>>\n             <f64 as From<i32>>\n             <f64 as From<i8>>\n\
    \           and 67 others\n\nerror[E0277]: cannot divide `isize` by `f64`\n  -->\
    \ /tmp/tmpna4tr0ca.rs:21:44\n   |\n21 |         let area_all_rounded = (a * b\
    \ * c) / (f64::from(a + b + c));\n   |                                       \
    \     ^ no implementation for `isize / f64`\n   |\n   = help: the trait `Div<f64>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpna4tr0ca.rs:23:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n23 |         area_equal || area_one || area_all || area_all_rounded\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `bool`\n\nerror[E0277]: the trait bound `f64: From<isize>` is not\
    \ satisfied\n  --> /tmp/tmpna4tr0ca.rs:29:47\n   |\n29 |         let area_all_rounded\
    \ = (a * b * c) / (f64::from(a + b + c));\n   |                              \
    \                 ^^^^^^^^^ the trait `From<isize>` is not implemented for `f64`\n\
    \   |\n   = help: the following other ty"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let area = (a * b) - (a * c);\n   \
    \ if area < 0 {\n        return -1.0;\n    } else {\n        return std::f64::from(sqrt(area));\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `from` in module `std::f64`\n  --> /tmp/tmpfyngdskw.rs:14:26\n\
    \   |\n14 |         return std::f64::from(sqrt(area));\n   |                 \
    \         ^^^^ not found in `std::f64`\n\nerror[E0425]: cannot find function `sqrt`\
    \ in this scope\n  --> /tmp/tmpfyngdskw.rs:14:31\n   |\n14 |         return std::f64::from(sqrt(area));\n\
    \   |                               ^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    use std::f64;\n    if a + b > c {\n\
    \        return -1.0;\n    }\n    else if a > b {\n        return (a * b) / c\n\
    \    }\n    else {\n        return (a + (b - c) * a) / c\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::f64`\n  --> /tmp/tmpr684aipw.rs:10:9\n  \
    \ |\n10 |     use std::f64;\n   |         ^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]`\
    \ on by default\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr684aipw.rs:15:16\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         return (a * b) / c\n   |                ^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n15 |         return ((a * b) / c) as f64\n   |            \
    \    +           ++++++++\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a; // local variable a\
    \ to be more readable.\n    let mut b = b; // local variable b to be more readable.\n\
    \    let mut c = c; // local variable c to be more readable.\n    if a + b > c\
    \ {\n        if a + c > b {\n            return c / 2 * (a + b);\n        }\n\
    \        return -c/2 * (a - b);\n    }\n    if a + c > b {\n        return b /2\
    \ * (a + c);\n    }\n    return -a/2 * (b - c);\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpat0u62_i.rs:15:20\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n15 |             return c / 2 * (a + b);\n   |                  \
    \  ^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n15 |             return (c / 2 * (a + b)) as f64;\n\
    \   |                    +               ++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    use std::f64;\n\n    // Check for valid\
    \ triangle \n    if a + b > c || a + c > b || b + c > a {\n        return -1.0;\n\
    \    }\n\n    // Calculate the area of the triangle\n    let area = ((a + b) *\
    \ (c - a) * (b - c));\n\n    // Round the result to two decimal places if needed\n\
    \    if area < 1.0 {\n        return area * 1000.0;\n    }\n\n    area\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::f64`\n  --> /tmp/tmp9l6b7z1u.rs:10:9\n  \
    \ |\n10 |     use std::f64;\n   |         ^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]`\
    \ on by default\n\nwarning: unnecessary parentheses around assigned value\n  -->\
    \ /tmp/tmp9l6b7z1u.rs:18:16\n   |\n18 |     let area = ((a + b) * (c - a) * (b\
    \ - c));\n   |                ^                           ^\n   |\n   = note:\
    \ `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n\
    18 -     let area = ((a + b) * (c - a) * (b - c));\n18 +     let area = (a + b)\
    \ * (c - a) * (b - c);\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9l6b7z1u.rs:21:15\n\
    \   |\n21 |     if area < 1.0 {\n   |               ^^^ expected `isize`, found\
    \ floating-point number\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n\
    \  --> /tmp/tmp9l6b7z1u.rs:22:21\n   |\n22 |         return area * 1000.0;\n \
    \  |                     ^ no implementation for `isize * {float}`\n   |\n   =\
    \ help: the trait `Mul<{float}>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Mul<Rhs>`:\n             <&'a f32 as\
    \ Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n\
    \             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n    \
    \         <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n          \
    \   <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9l6b7z1u.rs:25:5\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n25 |     area\n   |\
    \     ^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n   |\n25 |     area as f64\n   |          ++++++\n\nerror: aborting\
    \ due to 3 previous errors; 2 warnings emitted\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    a.powi(2) + b.powi(2) + c.powi(2) -\
    \ a.powi(2) - b.powi(2) - c.powi()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `powi` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpei6_tg97.rs:10:7\n   |\n10 |     a.powi(2) + b.powi(2)\
    \ + c.powi(2) - a.powi(2) - b.powi(2) - c.powi()\n   |       ^^^^ help: there\
    \ is an associated function with a similar name: `pow`\n\nerror[E0599]: no method\
    \ named `powi` found for type `isize` in the current scope\n  --> /tmp/tmpei6_tg97.rs:10:19\n\
    \   |\n10 |     a.powi(2) + b.powi(2) + c.powi(2) - a.powi(2) - b.powi(2) - c.powi()\n\
    \   |                   ^^^^ help: there is an associated function with a similar\
    \ name: `pow`\n\nerror[E0599]: no method named `powi` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpei6_tg97.rs:10:31\n   |\n10 |     a.powi(2)\
    \ + b.powi(2) + c.powi(2) - a.powi(2) - b.powi(2) - c.powi()\n   |           \
    \                    ^^^^ help: there is an associated function with a similar\
    \ name: `pow`\n\nerror[E0599]: no method named `powi` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpei6_tg97.rs:10:43\n   |\n10 |     a.powi(2)\
    \ + b.powi(2) + c.powi(2) - a.powi(2) - b.powi(2) - c.powi()\n   |           \
    \                                ^^^^ help: there is an associated function with\
    \ a similar name: `pow`\n\nerror[E0599]: no method named `powi` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpei6_tg97.rs:10:55\n   |\n10 |  \
    \   a.powi(2) + b.powi(2) + c.powi(2) - a.powi(2) - b.powi(2) - c.powi()\n   |\
    \                                                       ^^^^ help: there is an\
    \ associated function with a similar name: `pow`\n\nerror[E0599]: no method named\
    \ `powi` found for type `isize` in the current scope\n  --> /tmp/tmpei6_tg97.rs:10:67\n\
    \   |\n10 |     a.powi(2) + b.powi(2) + c.powi(2) - a.powi(2) - b.powi(2) - c.powi()\n\
    \   |                                                                   ^^^^ help:\
    \ there is an associated function with a similar name: `pow`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        0 => 0.0,\
    \ // Triangle is degenerate\n        a if b > c => 1.0,\n        a if c > b =>\
    \ 0.5,\n        b => 0.0,\n        c => 0.0,\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.5`,\n right: `6.0`', /tmp/tmpydxqxlhl.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    return ((a * b) - ((a * c) - (b * c))) / 2.0\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw74hc6pz.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmpw74hc6pz.rs:13:44\n   |\n13 |     return\
    \ ((a * b) - ((a * c) - (b * c))) / 2.0\n   |                                \
    \            ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Div<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s >\
    \ 0 {\n        let mut area_sum = s + s + s;\n        area_sum /= 2.0;\n     \
    \   return area_sum;\n    } else {\n        return -1.0;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide-assign `isize` by `{float}`\n  --> /tmp/tmp_q9jx1tq.rs:13:18\n\
    \   |\n13 |         area_sum /= 2.0;\n   |                  ^^ no implementation\
    \ for `isize /= {float}`\n   |\n   = help: the trait `DivAssign<{float}>` is not\
    \ implemented for `isize`\n   = help: the following other types implement trait\
    \ `DivAssign<Rhs>`:\n             <f32 as DivAssign<&f32>>\n             <f32\
    \ as DivAssign>\n             <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n\
    \             <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n \
    \            <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n     \
    \      and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_q9jx1tq.rs:14:16\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n14 |         return area_sum;\n   |                ^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n14 |         return area_sum as f64;\n   |                \
    \         ++++++\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    (a + b + c) as f64 / 3\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmpdcdtb4hb.rs:10:24\n\
    \   |\n10 |     (a + b + c) as f64 / 3\n   |                        ^ no implementation\
    \ for `f64 / {integer}`\n   |\n   = help: the trait `Div<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n10 |     (a + b + c) as f64 / 3.0\n   |                        \
    \   ++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // check input values\n    if a <=\
    \ 0 || b <= 0 || c <= 0 ||\n        a + b < c || b + c < a || c + a < b {\n  \
    \      return -1.0;\n    }\n    let d = (a + b + c) / 2.0f;\n    \n    let mut\
    \ s: f64 = 0.0;\n    if a < b {\n        s += (a * d) / 2.0;\n    }\n    if b\
    \ < c {\n        s += (b * d) / 2.0;\n    }\n    if c < a {\n        s += (c *\
    \ d) / 2.0;\n    }\n    if a + b + c > d {\n        s += (d * (a + b - c)) / 2.0;\n\
    \    }\n    if b + c + a > d {\n        s += (d * (b + c - a)) / 2.0;\n    }\n\
    \    if c + a + b > d {\n        s += (d * (c + a - b)) / 2.0;\n    }\n    if\
    \ a + b + c < d {\n        s += (d * (a - b + c)) / 2.0;\n    }\n    if b + c\
    \ + a < d {\n        s += (d * (b - c + a)) / 2.0;\n    }\n    if c + a + b <\
    \ d {\n        s += (d * (c - a + b)) / 2.0;\n    }\n    return s;\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: invalid suffix `f` for float literal\n  --> /tmp/tmp67shfeey.rs:15:27\n\
    \   |\n15 |     let d = (a + b + c) / 2.0f;\n   |                           ^^^^\
    \ invalid suffix `f`\n   |\n   = help: valid suffixes are `f32` and `f64`\n\n\
    error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp67shfeey.rs:19:22\n\
    \   |\n19 |         s += (a * d) / 2.0;\n   |                      ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp67shfeey.rs:22:22\n\
    \   |\n22 |         s += (b * d) / 2.0;\n   |                      ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp67shfeey.rs:25:22\n\
    \   |\n25 |         s += (c * d) / 2.0;\n   |                      ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // Check base case\n    if a + b >\
    \ c || b + c > a || c + a > b {\n        return -1.0;\n    }\n    // If this point\
    \ is on one of the two sides of the triangle, return its area\n    if a + b >\
    \ c {\n        let a = a - c;\n        let b = b - c;\n        let c = c - a;\n\
    \        return ((a + b + c) / 2);\n    }\n    if b + c > a {\n        let a =\
    \ a - b;\n        let b = b - c;\n        let c = c - a;\n        return ((a +\
    \ b + c) / 2);\n    }\n    let a = a - b;\n    let b = b - c;\n    let c = c -\
    \ a;\n    return (a + b + c) / 2;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around `return` value\n  --> /tmp/tmpn9s3n6ip.rs:19:16\n\
    \   |\n19 |         return ((a + b + c) / 2);\n   |                ^         \
    \      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove\
    \ these parentheses\n   |\n19 -         return ((a + b + c) / 2);\n19 +      \
    \   return (a + b + c) / 2;\n   | \n\nwarning: unnecessary parentheses around\
    \ `return` value\n  --> /tmp/tmpn9s3n6ip.rs:25:16\n   |\n25 |         return ((a\
    \ + b + c) / 2);\n   |                ^               ^\n   |\nhelp: remove these\
    \ parentheses\n   |\n25 -         return ((a + b + c) / 2);\n25 +         return\
    \ (a + b + c) / 2;\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn9s3n6ip.rs:19:16\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n19 |         return ((a + b + c) / 2);\n   |             \
    \   ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n19 |         return (((a + b + c) / 2)) as f64;\n\
    \   |                +                 ++++++++\n\nerror: aborting due to previous\
    \ error; 2 warnings emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ if b + c > a {\n        -1\n    } else if a + c > b {\n        -1\n    } else\
    \ {\n        (b * b) - ((a * a) - (b * b))\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvtngp5du.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvtngp5du.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvtngp5du.rs:15:9\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvtngp5du.rs:17:9\n   |\n9  | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n17 |       \
    \  (b * b) - ((a * a) - (b * b))\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    17 |         ((b * b) - ((a * a) - (b * b))) as f64\n   |         +          \
    \                   ++++++++\n\nerror: aborting due to 4 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    (a * b) - (c * b)\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmqvttlr_.rs:10:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     (a * b) - (c * b)\n   |     ^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    10 |     ((a * b) - (c * b)) as f64\n   |     +                 ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if b + c > a {\n        return -1;\n    }\n    if c + a > b {\n  \
    \      return -1;\n    }\n    let mut area = 0.;\n    area = area + (b * b);\n\
    \    area = area + (c * c);\n    area = area + (a * a);\n    area = area / (a\
    \ * b * c);\n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr0ld3e91.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpr0ld3e91.rs:20:17\n   |\n20 |     area\
    \ = area + (b * b);\n   |                 ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Add<Rhs>`:\n            \
    \ <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpr0ld3e91.rs:21:17\n   |\n21 |\
    \     area = area + (c * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpr0ld3e91.rs:22:17\n   |\n22 |\
    \     area = area + (a * a);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c && a + c > b && b + c\
    \ > a {\n        (a * b * c) / (a + b + c)\n    } else {\n        -1\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp71bdddhq.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c && a + c > b && b + c > a {\n11 |         (a * b\
    \ * c) / (a + b + c)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n11 |      \
    \   ((a * b * c) / (a + b + c)) as f64\n   |         +                       \
    \  ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp71bdddhq.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    a + b > c && a + c > b && b + c > a\
    \ ? b * b + c * c - (a + b + c) * a / 3 : -1.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `b`\n\
    \  --> /tmp/tmpgheyincr.rs:10:43\n   |\n10 |     a + b > c && a + c > b && b +\
    \ c > a ? b * b + c * c - (a + b + c) * a / 3 : -1.0\n   |                   \
    \                        ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let ac = a * c;\n    let bc = b * c;\n\
    \    let ac_bc = ac + bc;\n    let ab = a * b\n    let ab_bc = ab + bc;\n    if\
    \ ac_bc >= ab_bc {\n        ac_bc / ab_bc\n    } else {\n        -1\n    }\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpbd3d8468.rs:13:19\n\
    \   |\n13 |     let ab = a * b\n   |                   ^ help: add `;` here\n\
    14 |     let ab_bc = ab + bc;\n   |     --- unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbd3d8468.rs:16:9\n   |\n9  | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n16 |       \
    \  ac_bc / ab_bc\n   |         ^^^^^^^^^^^^^ expected `f64`, found `isize`\n \
    \  |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |         (ac_bc\
    \ / ab_bc) as f64\n   |         +             ++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbd3d8468.rs:18:9\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n18 |         -1\n \
    \  |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    use std::sqrt;\n    \n    // Check\
    \ for invalid triangle\n    if a < 0 || b < 0 || c < 0 {\n        return -1.0;\n\
    \    }\n    \n    // Check for triangles\n    if a + b > c || a + c > b || b +\
    \ c > a {\n        return -1.0;\n    }\n    \n    // Find possible area with double\
    \ precision numbers\n    let area = 0.5 * f64::sqrt(f64::pow(a as f64, 2) + f64::pow(b\
    \ as f64, 2));\n    \n    // Round if possible\n    if area < std::f64::EPSILON\
    \ {\n        area = area.round();\n    }\n    \n    area\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0432]: unresolved import `std::sqrt`\n  --> /tmp/tmp51_zdkcp.rs:10:9\n\
    \   |\n10 |     use std::sqrt;\n   |         ^^^^^^^^^ no `sqrt` in the root\n\
    \nerror[E0599]: no function or associated item named `pow` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp51_zdkcp.rs:23:37\n   |\n23 |     let area\
    \ = 0.5 * f64::sqrt(f64::pow(a as f64, 2) + f64::pow(b as f64, 2));\n   |    \
    \                                 ^^^\n   |                                  \
    \   |\n   |                                     function or associated item not\
    \ found in `f64`\n   |                                     help: there is an associated\
    \ function with a similar name: `powf`\n\nerror[E0599]: no function or associated\
    \ item named `pow` found for type `f64` in the current scope\n  --> /tmp/tmp51_zdkcp.rs:23:61\n\
    \   |\n23 |     let area = 0.5 * f64::sqrt(f64::pow(a as f64, 2) + f64::pow(b\
    \ as f64, 2));\n   |                                                         \
    \    ^^^\n   |                                                             |\n\
    \   |                                                             function or\
    \ associated item not found in `f64`\n   |                                   \
    \                          help: there is an associated function with a similar\
    \ name: `powf`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0432, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0432`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1\n\
    \    }\n    \n    if a + c > b {\n        return -1\n    }\n\n    if b + c > a\
    \ {\n        return -1\n    }\n\n    a * b * c\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4s56krq0.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4s56krq0.rs:22:5\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n22 |     a * b * c\n\
    \   |     ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n22 |     (a * b * c) as f64\n   |     +        \
    \ ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        if b > c {\n\
    \            return triangle_area(b, c, a)\n        } else {\n            return\
    \ triangle_area(a, c, b)\n        }\n    } else {\n        if c > b {\n      \
    \      return triangle_area(a, c, b)\n        } else {\n            return sqrt(a\
    \ * a + b * b + c * c) / 2.0\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmpk6_87sd7.rs:20:20\n\
    \   |\n20 |             return sqrt(a * a + b * b + c * c) / 2.0\n   |       \
    \             ^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // The sum of the sides is greater\
    \ than the third side, so the triangle is invalid\n    if a + b > c {\n      \
    \  return -1;\n    }\n\n    // Calculate area of triangle\n    let area = (a +\
    \ b + c) / 2\n    \n    // Round to 2 decimal points\n    let rounded = area.round()\n\
    \    \n    // Return result\n    rounded\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy9dvocnq.rs:16:31\n\
    \   |\n16 |     let area = (a + b + c) / 2\n   |                             \
    \  ^ help: add `;` here\n...\n19 |     let rounded = area.round()\n   |     ---\
    \ unexpected token\n\nerror: expected `;`, found `rounded`\n  --> /tmp/tmpy9dvocnq.rs:19:31\n\
    \   |\n19 |     let rounded = area.round()\n   |                             \
    \  ^ help: add `;` here\n...\n22 |     rounded\n   |     ------- unexpected token\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpy9dvocnq.rs:12:16\n   |\n9  |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |              \
    \                                     --- expected `f64` because of return type\n\
    ...\n12 |         return -1;\n   |                ^^\n   |                |\n\
    \   |                expected `f64`, found integer\n   |                help:\
    \ use a float literal: `-1.0`\n\nerror[E0599]: no method named `round` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmpy9dvocnq.rs:19:24\n   |\n19\
    \ |     let rounded = area.round()\n   |                        ^^^^^ method not\
    \ found in `isize`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c || b + c > a || c + a\
    \ > b {\n        return -1.0;\n    }\n    a + b + c\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiq7d6vvb.rs:13:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n13 |     a + b + c\n   |     ^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n13 |     (a + b +\
    \ c) as f64\n   |     +         ++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ {\n        a + b + c\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsnxe0g3p.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsnxe0g3p.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         a + b + c\n   |         ^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    13 |         (a + b + c) as f64\n   |         +         ++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a, b, c {\n        0 => 0.0,\n\
    \        1 => 1.0,\n        _ => match a + b + c {\n            4 => a,\n    \
    \        5 => b,\n            6 => c,\n            _ => return -1.0,\n       \
    \ }\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `?`, `{`, or an operator, found\
    \ `,`\n  --> /tmp/tmp_vm7xydn.rs:10:12\n   |\n10 |     match a, b, c {\n   | \
    \    -----  ^ expected one of `!`, `.`, `::`, `?`, `{`, or an operator\n   | \
    \    |\n   |     while parsing this `match` expression\n\nerror: aborting due\
    \ to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        a + b - c\n\
    \    } else {\n        if b > c {\n            b - c\n        } else {\n     \
    \       0.0\n        }\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmshmff7u.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         a + b - c\n   |         ^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n11 |         (a + b - c) as f64\n   |         +         ++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmshmff7u.rs:14:13\n   |\n9  |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |              \
    \                                     --- expected `f64` because of return type\n\
    ...\n14 |             b - c\n   |             ^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n14 |            \
    \ (b - c) as f64\n   |             +     ++++++++\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        a > b &&\
    \ a > c && b > c => a + b + c,\n        _ => -1.0,\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `=>`, `@`, `if`, or `|`, found `>`\n  --> /tmp/tmpyoig1e34.rs:11:11\n\
    \   |\n11 |         a > b && a > c && b > c => a + b + c,\n   |           ^ expected\
    \ one of `=>`, `@`, `if`, or `|`\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        0.0\n    }\
    \ else {\n        0.5 * (a + b - c)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmpj55bsx7g.rs:13:13\n\
    \   |\n13 |         0.5 * (a + b - c)\n   |             ^ no implementation for\
    \ `{float} * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c && a + c > b && b + c\
    \ > a && a + b + c != 0 {\n        (b * b - a * a) / 2.0 as f64\n    } else {\n\
    \        -1\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n   \
    \ assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `f64`\n  --> /tmp/tmp8glyqm86.rs:11:25\n\
    \   |\n11 |         (b * b - a * a) / 2.0 as f64\n   |                       \
    \  ^ no implementation for `isize / f64`\n   |\n   = help: the trait `Div<f64>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8glyqm86.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1 \n    }\
    \ else {\n        a + b + c\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqfo9n1up.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1 \n   |         ^^\n   |     \
    \    |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqfo9n1up.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         a + b + c\n   |         ^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    13 |         (a + b + c) as f64\n   |         +         ++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area = 0.0;\n\n    area = if\
    \ a + b > c {\n        a + b + c\n    } else if a + c > b {\n        a + c + b\n\
    \    } else {\n        a + b + c\n    };\n\n    if area > 0.0 {\n        return\
    \ area.round(2);\n    } else {\n        return -1.0;\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo0eqfjkk.rs:13:9\n   |\n\
    13 |         a + b + c\n   |         ^^^^^^^^^ expected floating-point number,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo0eqfjkk.rs:15:9\n\
    \   |\n15 |         a + c + b\n   |         ^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo0eqfjkk.rs:17:9\n\
    \   |\n17 |         a + b + c\n   |         ^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0689]: can't call method `round` on ambiguous\
    \ numeric type `{float}`\n  --> /tmp/tmpo0eqfjkk.rs:21:21\n   |\n21 |        \
    \ return area.round(2);\n   |                     ^^^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `f32`\n   |\n10 |     let mut area: f32\
    \ = 0.0;\n   |         ~~~~~~~~~~~~~\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ {\n        let area_a = a * b\n        let area_b = (b * c) - area_a\n     \
    \   let area_c = (a * c) - area_a\n        area_a\n            + (area_a / 2)\n\
    \            + area_b\n            - (area_b / 2)\n            - (area_c / 2)\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpl8gl79rr.rs:13:27\n\
    \   |\n13 |         let area_a = a * b\n   |                           ^ help:\
    \ add `;` here\n14 |         let area_b = (b * c) - area_a\n   |         --- unexpected\
    \ token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl8gl79rr.rs:14:38\n\
    \   |\n14 |         let area_b = (b * c) - area_a\n   |                      \
    \                ^ help: add `;` here\n15 |         let area_c = (a * c) - area_a\n\
    \   |         --- unexpected token\n\nerror: expected `;`, found `area_a`\n  -->\
    \ /tmp/tmpl8gl79rr.rs:15:38\n   |\n15 |         let area_c = (a * c) - area_a\n\
    \   |                                      ^ help: add `;` here\n16 |        \
    \ area_a\n   |         ------ unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl8gl79rr.rs:11:9\n   |\n9  | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n10 |     if a + b > c {\n11 |       \
    \  -1\n   |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl8gl79rr.rs:16:9\n   |\n9  |   fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   \
    \  --- expected `f64` because of return type\n...\n16 | /         area_a\n17 |\
    \ |             + (area_a / 2)\n18 | |             + area_b\n19 | |          \
    \   - (area_b / 2)\n20 | |             - (area_c / 2)\n   | |__________________________^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n16 ~         (area_a\n17 |             + (area_a / 2)\n18 |\
    \             + area_b\n19 |             - (area_b / 2)\n20 ~             - (area_c\
    \ / 2)) as f64\n   |\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    a + b + c > c ? (a + b + c) - c : -1\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected type, found `-`\n  --> /tmp/tmphdj97xp2.rs:10:39\n   |\n\
    10 |     a + b + c > c ? (a + b + c) - c : -1\n   |                          \
    \           - ^ expected type\n   |                                     |\n  \
    \ |                                     tried to parse a type due to this\n\n\
    error: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    \n    let mut area_sum = 0.0; // sum\
    \ of all 3 sides\n    \n    // if sum of any two sides are greater than 3rd side\
    \ then triangle is invalid\n    if a + b > c {\n        return -1.0;\n    }\n\
    \    if a + c > b {\n        return -1.0;\n    }\n    if b + c > a {\n       \
    \ return -1.0;\n    }\n\n    // if sum of all 3 sides are equal to each other\
    \ then triangle is valid\n    area_sum += a;\n    area_sum += b;\n    area_sum\
    \ += c;\n    \n    if area_sum == c {\n        return area_sum;\n    }\n\n   \
    \ // otherwise triangle is invalid\n    return -1.0;\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpah6s5x9d.rs:25:14\n\
    \   |\n25 |     area_sum += a;\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpah6s5x9d.rs:26:14\n\
    \   |\n26 |     area_sum += b;\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpah6s5x9d.rs:27:14\n\
    \   |\n27 |     area_sum += c;\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpah6s5x9d.rs:29:20\n\
    \   |\n29 |     if area_sum == c {\n   |                    ^ expected floating-point "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = a + b + c;\n    if s <=\
    \ 0 {\n        return -1.0;\n    }\n    let mut s = s / 2;\n    s = s * (s - a)\
    \ * (s - b) * (s - c);\n    if s < 0.0 {\n        s = 0.0;\n    } else {\n   \
    \     s = s / 3.0;\n    }\n    s * 0.5\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph_sed7q9.rs:16:12\n   |\n\
    16 |     if s < 0.0 {\n   |            ^^^ expected `isize`, found floating-point\
    \ number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph_sed7q9.rs:17:13\n\
    \   |\n14 |     let mut s = s / 2;\n   |                 ----- expected due to\
    \ this value\n...\n17 |         s = 0.0;\n   |             ^^^ expected `isize`,\
    \ found floating-point number\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmph_sed7q9.rs:19:15\n   |\n19 |         s = s / 3.0;\n   |      \
    \         ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Div<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot multiply\
    \ `isize` by `{float}`\n  --> /tmp/tmph_sed7q9.rs:21:7\n   |\n21 |     s * 0.5\n\
    \   |       ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut triangle_area = 0.;\n    if\
    \ a + b > c {\n        triangle_area = b * b - 4 * a * c;\n    }\n    if b > c\
    \ {\n        triangle_area = b * b - 4 * a * c;\n    }\n    if c > a {\n     \
    \   triangle_area = b * b - 4 * a * c;\n    }\n    triangle_area /= 2.0;\n   \
    \ if triangle_area > 0. {\n        triangle_area = f64::from(triangle_area);\n\
    \    }\n    triangle_area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4khjrebb.rs:12:25\n   |\n\
    10 |     let mut triangle_area = 0.;\n   |                             -- expected\
    \ due to this value\n11 |     if a + b > c {\n12 |         triangle_area = b *\
    \ b - 4 * a * c;\n   |                         ^^^^^^^^^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4khjrebb.rs:15:25\n\
    \   |\n10 |     let mut triangle_area = 0.;\n   |                            \
    \ -- expected due to this value\n...\n15 |         triangle_area = b * b - 4 *\
    \ a * c;\n   |                         ^^^^^^^^^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4khjrebb.rs:18:25\n\
    \   |\n10 |     let mut triangle_area = 0.;\n   |                            \
    \ -- expected due to this value\n...\n18 |         triangle_area = b * b - 4 *\
    \ a * c;\n   |                         ^^^^^^^^^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area = f64::MAX;\n    let mut\
    \ side1 = a + b;\n    let mut side2 = b + c;\n    let mut side3 = c + a;\n   \
    \ if side1 > side2 && side1 > side3 {\n        area = side1.sqrt();\n    } else\
    \ if side2 > side3 {\n        area = side2.sqrt();\n    } else {\n        area\
    \ = side3.sqrt();\n    }\n    area = area.round();\n    area = area.round() /\
    \ 3.;\n    if area < 0.0 {\n        return -1.;\n    }\n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp351w0ae1.rs:15:22\n   |\n15 |         area = side1.sqrt();\n\
    \   |                      ^^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `sqrt` found for type `isize` in the current scope\n  --> /tmp/tmp351w0ae1.rs:17:22\n\
    \   |\n17 |         area = side2.sqrt();\n   |                      ^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `sqrt` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmp351w0ae1.rs:19:22\n   |\n19 |  \
    \       area = side3.sqrt();\n   |                      ^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // check for invalid inputs\n    if\
    \ a + b > c || a + c > b || b + c > a {\n        return -1.0;\n    }\n    // calculate\
    \ area of triangle with two sides lengths a, b and c\n    let mut area, a, b,\
    \ c =\n        (a * b * c) as f64, b - a, c - b, a - c;\n    // check for a possible\
    \ overflow\n    if a > c {\n        a = c;\n        area += b * c;\n    }\n  \
    \  if b > c {\n        b = c;\n        area += a * c;\n    }\n    if c > a {\n\
    \        c = a;\n        area += b * c;\n    }\n    // return the result\n   \
    \ area / f64::sqrt((a * b + c * a + b * c + a * b) / (a * b + c * a + b * c))\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: unexpected `,` in pattern\n  --> /tmp/tmpi0vm0ff7.rs:15:17\n   |\n\
    15 |     let mut area, a, b, c =\n   |                 ^\n   |\nhelp: try adding\
    \ parentheses to match on a tuple\n   |\n15 |     let (mut area, a, b, c) =\n\
    \   |         +                 +\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    (a+b+c).is_greatest() ? ((a+b+c).sqrt()).round()\
    \ as f64 : -1.0 \n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected type, found `-`\n  --> /tmp/tmp54zxcaxj.rs:10:63\n   |\n\
    10 |     (a+b+c).is_greatest() ? ((a+b+c).sqrt()).round() as f64 : -1.0 \n   |\
    \                                                             - ^ expected type\n\
    \   |                                                             |\n   |    \
    \                                                         tried to parse a type\
    \ due to this\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n  if a + b > c {\n    -1\n  } else if a\
    \ + c > b {\n    -1\n  } else {\n    a * b * c / sqrt((a * b).round() as f64)\n\
    \  }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmpqkzapjs5.rs:15:17\n\
    \   |\n15 |     a * b * c / sqrt((a * b).round() as f64)\n   |               \
    \  ^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqkzapjs5.rs:11:5\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n10 |   if a + b > c {\n11 |     -1\n   |     ^^\n   |     |\n \
    \  |     expected `f64`, found integer\n   |     help: use a float literal: `-1.0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqkzapjs5.rs:13:5\n   |\n9  | fn\
    \ triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |                 \
    \                                  --- expected `f64` because of return type\n\
    ...\n13 |     -1\n   |     ^^\n   |     |\n   |     expected `f64`, found integer\n\
    \   |     help: use a float literal: `-1.0`\n\nerror[E0599]: no method named `round`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpqkzapjs5.rs:15:30\n\
    \   |\n15 |     a * b * c / sqrt((a * b).round() as f64)\n   |               \
    \               ^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqkzapjs5.rs:15:5\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n15 |     a * b * c\
    \ / sqrt((a * b).round() as f64)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n15 |     (a * b * c / sqrt((a * b).round() as f64)) as f64\n\
    \   |     +                                        ++++++++\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0425,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n    if a + b > c\
    \ {\n        s = c * a * 0.5;\n    } else {\n        if a + c > b {\n        \
    \    s = b * c;\n        } else {\n            s = a * c * 0.5;\n        }\n \
    \   }\n    if s > 0.0 {\n        return s.ceil() as f64;\n    }\n    return -1.0;\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpgi054th0.rs:12:19\n\
    \   |\n12 |         s = c * a * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgi054th0.rs:15:17\n\
    \   |\n10 |     let mut s = 0.0;\n   |                 --- expected due to this\
    \ value\n...\n15 |             s = b * c;\n   |                 ^^^^^ expected\
    \ floating-point number, found `isize`\n\nerror[E0277]: cannot multiply `isize`\
    \ by `{float}`\n  --> /tmp/tmpgi054th0.rs:17:23\n   |\n17 |             s = a\
    \ * c * 0.5;\n   |                       ^ no implementation for `isize * {float}`\n\
    \   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0689]:\
    \ can't call method `ceil` on ambiguous numeric type `{float}`\n  --> /tmp/tmpgi054th0.rs:21:18\n\
    \   |\n21 |         return s.ceil() as f64;\n   |                  ^^^^\n   |\n\
    help: you must specify a type for this binding, like `f32`\n   |\n10 |     let\
    \ mut s: f32 = 0.0;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0689.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    a + b + c > c ? c + b + a \n\t: a +\
    \ c + b \n\t: -1\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `c`\n\
    \  --> /tmp/tmpfqrsidde.rs:10:21\n   |\n10 |     a + b + c > c ? c + b + a \n\
    \   |                     ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let area = (a * b) / (c * c);\n   \
    \ if area > 0.0 {\n        let rounded = round(area as f64 * 100);\n        if\
    \ rounded > 100.0 {\n            return -1;\n        }\n        return rounded\
    \ as f64;\n    }\n    return -1.0;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmppo9di51b.rs:12:23\n\
    \   |\n12 |         let rounded = round(area as f64 * 100);\n   |            \
    \           ^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppo9di51b.rs:11:15\n   |\n11 |     if area > 0.0 {\n   |       \
    \        ^^^ expected `isize`, found floating-point number\n\nerror[E0277]: cannot\
    \ multiply `f64` by `{integer}`\n  --> /tmp/tmppo9di51b.rs:12:41\n   |\n12 | \
    \        let rounded = round(area as f64 * 100);\n   |                       \
    \                  ^ no implementation for `f64 * {integer}`\n   |\n   = help:\
    \ the trait `Mul<{integer}>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\nhelp: consider using a\
    \ floating-point literal by writing it with `.0`\n   |\n12 |         let rounded\
    \ = round(area as f64 * 100.0);\n   |                                        \
    \      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppo9di51b.rs:14:20\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n14 |             return -1;\n   |                    ^^\n\
    \   |                    |\n   |                    expected `f64`, found integer\n\
    \   |                    help: use a float literal: `-1.0`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        (a, b, c)\
    \ => a + b + c <= a + c ? a / b + c / b : -1.0\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `a`\n\
    \  --> /tmp/tmpqmn16af1.rs:11:43\n   |\n11 |         (a, b, c) => a + b + c <=\
    \ a + c ? a / b + c / b : -1.0\n   |                   --                    \
    \  ^ expected one of `,`, `.`, `?`, `}`, or an operator\n   |                \
    \   |\n   |                   while parsing the `match` arm starting here\n\n\
    error: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c && a + c > b && b + c\
    \ > a {\n        (b * b) - (a * c)\n    } else {\n        -1\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0jsniain.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c && a + c > b && b + c > a {\n11 |         (b * b)\
    \ - (a * c)\n   |         ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n11 |         ((b\
    \ * b) - (a * c)) as f64\n   |         +                 ++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0jsniain.rs:13:9\n   |\n9  | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n13 |       \
    \  -1\n   |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let area_1 = if a + b > c { a } else\
    \ { b };\n    let area_2 = if a + c > b { a } else { c };\n    let area_3 = if\
    \ b + c > a { b } else { c };\n    area_1 + area_2 + area_3 / (a + b + c)\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8m5j17x3.rs:13:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n13 |     area_1 + area_2 + area_3 / (a + b + c)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n13 |     (area_1 + area_2 + area_3 / (a + b + c)) as f64\n\
    \   |     +                                      ++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area_sum = 0.0;\n\n    if a\
    \ > b {\n        let mut min_a = a;\n        min_a = min_a.min(&b).min(&c).unwrap_or(-1);\n\
    \        area_sum += min_a * min_a;\n    }\n\n    if b > c {\n        let mut\
    \ min_b = b;\n        min_b = min_b.min(&c).min(&a).unwrap_or(-1);\n        area_sum\
    \ += min_b * min_b;\n    }\n\n    if c > a {\n        let mut min_c = c;\n   \
    \     min_c = min_c.min(&a).min(&b).unwrap_or(-1);\n        area_sum += min_c\
    \ * min_c;\n    }\n\n    area_sum\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp509z9k8h.rs:14:27\n   |\n\
    14 |         min_a = min_a.min(&b).min(&c).unwrap_or(-1);\n   |              \
    \             ^^ expected `isize`, found `&isize`\n   |\nhelp: consider removing\
    \ the borrow\n   |\n14 -         min_a = min_a.min(&b).min(&c).unwrap_or(-1);\n\
    14 +         min_a = min_a.min(b).min(&c).unwrap_or(-1);\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp509z9k8h.rs:14:35\n   |\n14 |         min_a\
    \ = min_a.min(&b).min(&c).unwrap_or(-1);\n   |                               \
    \    ^^ expected `isize`, found `&isize`\n   |\nhelp: consider removing the borrow\n\
    \   |\n14 -         min_a = min_a.min(&b).min(&c).unwrap_or(-1);\n14 +       \
    \  min_a = min_a.min(&b).min(c).unwrap_or(-1);\n   | \n\nerror[E0599]: no method\
    \ named `unwrap_or` found for type `isize` in the current scope\n  --> /tmp/tmp509z9k8h.rs:14:39\n\
    \   |\n14 |         min_a = min_a.min(&b).min(&c).unwrap_or(-1);\n   |       \
    \                                ^^^^^^^^^ method not found in `isize`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp509z9k8h.rs:15:18\n  \
    \ |\n15 |         area_sum += min_a * min_a;\n   |                  ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp509z9k8h.rs:20:27\n\
    \   |\n20 |         min_b = min_b.min(&c).min(&a).unwrap_or(-1);\n   |       \
    \                    ^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ removing the borrow\n   |\n20 -         min_b = min_b.min(&c).min(&a).unwrap_or(-1);\n\
    20 +         min_b = min_b.min(c).min(&a).unwrap_or(-1);\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/t"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = (a + b + c) / 2.0; \n \
    \   if s >= a {\n        if b > c {\n            s -= 1;\n        }\n    } else\
    \ {\n        if b > c {\n            s += 1;\n        }\n    }\n    if s > c {\n\
    \        s -= 1;\n    }\n    s * s\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpy_kk6lwd.rs:10:29\n\
    \   |\n10 |     let mut s = (a + b + c) / 2.0; \n   |                        \
    \     ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    (a * a + b * b + c * c) /2.0\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp5w55aqyl.rs:10:29\n\
    \   |\n10 |     (a * a + b * b + c * c) /2.0\n   |                           \
    \  ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // if any of a, b and c is negative,\
    \ then we know that they are not all positive\n    // so it's sufficient to just\
    \ return -1 to indicate that the triangle isn't valid\n    if a < 0 || b < 0 ||\
    \ c < 0 {\n        return -1.0;\n    }\n    let sides = a + b + c;\n    // if\
    \ sides is zero, they don't form a triangle\n    if sides == 0 {\n        return\
    \ -1.0;\n    }\n    // if all sides are positive, we know that they form a triangle\n\
    \    if sides > 0 {\n        let area_1 = (a + b) / sides;\n        let area_2\
    \ = ((a + c) / sides) - (area_1 * area_1);\n        let area_3 = ((b + c) / sides)\
    \ - (area_1 * area_2);\n        // area of triangle formed is sides times area\
    \ of hypotenuse times area of right triangle\n        // so return area_1 * area_2\
    \ * area_3\n        return area_1 * area_2 * area_3;\n    }\n    // if all sides\
    \ are negative, then we have an invalid triangle\n    return -1.0;\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph1s9lz7e.rs:27:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n27 |         return area_1 * area_2 * area_3;\n   |             \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n27 |         return (area_1 * area_2\
    \ * area_3) as f64;\n   |                +                        ++++++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    assert!(a + b > c && a + c > b && b\
    \ + c > a);\n    assert!(a + b > c && a + c > b && b + c > a);\n    \n    match\
    \ a + b + c {\n        c => c,\n        b => b,\n        c => c,\n        a =>\
    \ a,\n        b => b\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa1ujio4z.rs:14:14\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |         c => c,\n   |              ^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n14 |         c =>\
    \ c as f64,\n   |                ++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    (a + b + c) as f64 / 3.0 \n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4.0`,\n right: `6.0`', /tmp/tmphbt_pdmz.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    \n    if a + b > c || a + c > b ||\
    \ b + c > a || a + b + c < 3 {\n        return -1.0;\n    }\n    \n    let mut\
    \ a = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    \n\
    \    if a + b > c {\n        a -= (b - c);\n        b -= a;\n        c -= (a);\n\
    \    }\n    \n    if a + c > b {\n        b -= (c - b);\n        c -= (b);\n \
    \   }\n    \n    if b + c > a {\n        a -= (c - a);\n        c -= (a);\n  \
    \  }\n    \n    let mut square_of_a_b = std::pow(a, 2.0) + std::pow(b, 2.0) as\
    \ f64;\n    let mut square_of_c_a = std::pow(c, 2.0) + std::pow(a, 2.0) as f64;\n\
    \    \n    if square_of_a_b >= square_of_c_a {\n        square_of_a_b -= square_of_c_a;\n\
    \        square_of_c_a -= square_of_a_b;\n    }\n    \n    let mut square_of_a_b\
    \ = std::pow(a, 2.0) + std::pow(b, 2.0) as f64;\n    let mut square_of_c_a = std::pow(c,\
    \ 2.0) + std::pow(a, 2.0) as f64;\n    \n    if square_of_a_b >= square_of_c_a\
    \ {\n        square_of_a_b -= square_of_c_a;\n        square_of_c_a -= square_of_a_b;\n\
    \    }\n    \n    square_of_a_b * square_of_c_a / 3.0\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `pow` in crate `std`\n  --> /tmp/tmpvxk9qrs4.rs:35:34\n\
    \   |\n35 |     let mut square_of_a_b = std::pow(a, 2.0) + std::pow(b, 2.0) as\
    \ f64;\n   |                                  ^^^ not found in `std`\n\nerror[E0425]:\
    \ cannot find function `pow` in crate `std`\n  --> /tmp/tmpvxk9qrs4.rs:35:53\n\
    \   |\n35 |     let mut square_of_a_b = std::pow(a, 2.0) + std::pow(b, 2.0) as\
    \ f64;\n   |                                                     ^^^ not found\
    \ in `std`\n\nerror[E0425]: cannot find function `pow` in crate `std`\n  --> /tmp/tmpvxk9qrs4.rs:36:34\n\
    \   |\n36 |     let mut square_of_c_a = std::pow(c, 2.0) + std::pow(a, 2.0) as\
    \ f64;\n   |                                  ^^^ not found in `std`\n\nerror[E0425]:\
    \ cannot find function `pow` in crate `std`\n  --> /tmp/tmpvxk9qrs4.rs:36:53\n\
    \   |\n36 |     let mut square_of_c_a = std::pow(c, 2.0) + std::pow(a, 2.0) as\
    \ f64;\n   |                                                     ^^^ not found\
    \ in `std`\n\nerror[E0425]: cannot find function `pow` in crate `std`\n  --> /tmp/tmpvxk9qrs4.rs:43:34\n\
    \   |\n43 |     let mut square_of_a_b = std::pow(a, 2.0) + std::pow(b, 2.0) as\
    \ f64;\n   |                                  ^^^ not found in `std`\n\nerror[E0425]:\
    \ cannot find function `pow` in crate `std`\n  --> /tmp/tmpvxk9qrs4.rs:43:53\n\
    \   |\n43 |     let mut square_of_a_b = std::pow(a, 2.0) + std::pow(b, 2.0) as\
    \ f64;\n   |                                                     ^^^ not found\
    \ in `std`\n\nerror[E0425]: cannot find function `pow` in crate `std`\n  --> /tmp/tmpvxk9qrs4.rs:44:34\n\
    \   |\n44 |     let mut square_of_c_a = std::pow(c, 2.0) + std::pow(a, 2.0) as\
    \ f64;\n   |                                  ^^^ not found in `std`\n\nerror[E0425]:\
    \ cannot find function `pow` in crate `std`\n  --> /tmp/tmpvxk9qrs4.rs:44:53\n\
    \   |\n44 |     let mut square_of_c_a = std::pow(c, 2.0) + std::pow(a, 2.0) as\
    \ f64;\n   |                                                     ^^^ not found\
    \ in `std`\n\nwarning: unnecessary parentheses around assigned value\n  --> /tmp/tmpvxk9qrs4.rs:20:14\n\
    \   |\n20 |         a -= (b - c"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a < b + c || a < b - c || a < c\
    \ + b || b < a + c || b < a - c || b < c + a || c < a + b || c < a - b || c <\
    \ b + a {\n        return -1.0;\n    }\n\n    a.to_f64().powi(2).mul(b.to_f64().powi(2)).mul(c.to_f64().powi(2)).sqrt()\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_f64` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpzz2nmaa3.rs:14:7\n   |\n14 |     a.to_f64().powi(2).mul(b.to_f64().powi(2)).mul(c.to_f64().powi(2)).sqrt()\n\
    \   |       ^^^^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `to_f64` found for type `isize` in the current scope\n  --> /tmp/tmpzz2nmaa3.rs:14:30\n\
    \   |\n14 |     a.to_f64().powi(2).mul(b.to_f64().powi(2)).mul(c.to_f64().powi(2)).sqrt()\n\
    \   |                              ^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `to_f64` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpzz2nmaa3.rs:14:54\n   |\n14 |     a.to_f64().powi(2).mul(b.to_f64().powi(2)).mul(c.to_f64().powi(2)).sqrt()\n\
    \   |                                                      ^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area: f64 = 0.0;\n    if a\
    \ + b > c {\n        area = (a * b) / c;\n    } else {\n        area = (a * c)\
    \ / (a + b + c);\n    }\n    area = roundf(area, 2);\n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `roundf` in this scope\n  --> /tmp/tmpygf_1kqf.rs:16:12\n\
    \   |\n16 |     area = roundf(area, 2);\n   |            ^^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpygf_1kqf.rs:12:16\n \
    \  |\n10 |     let mut area: f64 = 0.0;\n   |                   --- expected due\
    \ to this type\n11 |     if a + b > c {\n12 |         area = (a * b) / c;\n  \
    \ |                ^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n12 |         area = ((a * b) / c)\
    \ as f64;\n   |                +           ++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpygf_1kqf.rs:14:16\n   |\n10 |     let mut area: f64 = 0.0;\n\
    \   |                   --- expected due to this type\n...\n14 |         area\
    \ = (a * c) / (a + b + c);\n   |                ^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    14 |         area = ((a * c) / (a + b + c)) as f64;\n   |                +   \
    \                  ++++++++\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c && a + c > b && b + c\
    \ > a {\n        (b * b) - ((a + c) * a) - ((c + b) * c)\n    } else {\n     \
    \   -1\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcsm63mpq.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c && a + c > b && b + c > a {\n11 |         (b * b)\
    \ - ((a + c) * a) - ((c + b) * c)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n11 |         ((b * b) - ((a + c) * a) - ((c + b) * c)) as f64\n\
    \   |         +                                       ++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcsm63mpq.rs:13:9\n   |\n9  | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n13 |       \
    \  -1\n   |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // check three sides\n    if a + b\
    \ + c <= 3 {\n        return -1;\n    }\n    \n    let a = a + b + c;\n    let\
    \ mut b = a - b;\n    let mut c = c - a;\n    \n    b.checked_sub(a).ok_or(\"\
    check three sides\").checked_mul(1.0 / c).ok_or(\"check three sides\").checked_add(1.0).ok_or(\"\
    check three sides\")\n}\n\nfn main() {\n    let candidate = triangle_area;\n \
    \   assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxhvfmz92.rs:12:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n12 |         return -1;\n   |                ^^\n   |           \
    \     |\n   |                expected `f64`, found integer\n   |             \
    \   help: use a float literal: `-1.0`\n\nerror[E0599]: no method named `checked_mul`\
    \ found for enum `Result` in the current scope\n  --> /tmp/tmpxhvfmz92.rs:19:49\n\
    \   |\n19 |     b.checked_sub(a).ok_or(\"check three sides\").checked_mul(1.0\
    \ / c).ok_or(\"check three sides\").checked_add(1.0).ok_or(\"check three sides\"\
    )\n   |                                                 ^^^^^^^^^^^ method not\
    \ found in `Result<isize, &str>`\n\nerror[E0277]: cannot divide `{float}` by `isize`\n\
    \  --> /tmp/tmpxhvfmz92.rs:19:65\n   |\n19 |     b.checked_sub(a).ok_or(\"check\
    \ three sides\").checked_mul(1.0 / c).ok_or(\"check three sides\").checked_add(1.0).ok_or(\"\
    check three sides\")\n   |                                                   \
    \              ^ no implementation for `{float} / isize`\n   |\n   = help: the\
    \ trait `Div<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c || a + c > b || b + c\
    \ > a {\n        -1.\n    } else {\n        (((b * b) - ((2 * b) * c)) / ((2.0\
    \ * b) * a))\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n  \
    \  assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around block return value\n  --> /tmp/tmpij41bbqt.rs:13:9\n\
    \   |\n13 |         (((b * b) - ((2 * b) * c)) / ((2.0 * b) * a))\n   |      \
    \   ^                                           ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n13 -         (((b * b)\
    \ - ((2 * b) * c)) / ((2.0 * b) * a))\n13 +         ((b * b) - ((2 * b) * c))\
    \ / ((2.0 * b) * a)\n   | \n\nerror[E0277]: cannot multiply `{float}` by `isize`\n\
    \  --> /tmp/tmpij41bbqt.rs:13:44\n   |\n13 |         (((b * b) - ((2 * b) * c))\
    \ / ((2.0 * b) * a))\n   |                                            ^ no implementation\
    \ for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // calculate the area of the triangle\n\
    \    let mut area: f64 = 0.0;\n    let mut side_length: f64 = a + b + c;\n   \
    \ if side_length < 0.0 {\n        return -1.0;\n    } else {\n        while side_length\
    \ != 0.0 {\n            side_length = side_length / 2.0;\n            area = area\
    \ + (a * side_length) * (side_length + b);\n            area = area + (side_length\
    \ * c) - (side_length * b) - (a * side_length);\n        }\n    }\n    return\
    \ area.round();\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph41zv9kz.rs:12:32\n   |\n\
    12 |     let mut side_length: f64 = a + b + c;\n   |                         \
    \ ---   ^^^^^^^^^ expected `f64`, found `isize`\n   |                        \
    \  |\n   |                          expected due to this\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n12 |     let mut side_length: f64\
    \ = (a + b + c) as f64;\n   |                                +         ++++++++\n\
    \nerror[E0277]: cannot multiply `isize` by `f64`\n  --> /tmp/tmph41zv9kz.rs:18:30\n\
    \   |\n18 |             area = area + (a * side_length) * (side_length + b);\n\
    \   |                              ^ no implementation for `isize * f64`\n   |\n\
    \   = help: the trait `Mul<f64>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Mul<Rhs>`:\n             <&'a f32 as\
    \ Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n\
    \             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n    \
    \         <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n          \
    \   <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot\
    \ add `isize` to `f64`\n  --> /tmp/tmph41zv9kz.rs:18:60\n   |\n18 |          \
    \   area = area + (a * side_length) * (side_length + b);\n   |               \
    \                                             ^ no implementation for `f64 + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ multiply `f64` by `isize`\n  --> /tmp/tmph41zv9kz.rs:19:40\n   |\n19 |     \
    \        area = area + (side_length * c) - (side_length * b) - (a * si"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a + b + c {\n        \n     \
    \   // Triangle is valid if:\n        // a + b > c\n        // a + c > b\n   \
    \     // b + c > a\n        // a > 0 && b > 0 && c > 0\n        \n        0 =>\
    \ 0.0, \n        \n        a if b > a && c > b => 0.0, \n        \n        a if\
    \ b > a && c > a => a + c, \n        \n        b if c > a && b > a => b + c, \n\
    \        \n        a if c > a && b > a => 0.0, \n        \n        a if c > b\
    \ && b > a => 0.0, \n        \n        a if c > b && c > a => 0.0, \n        \n\
    \        b | c => 0.0, \n        \n        _ => -1.0,\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0408]: variable `b` is not bound in all patterns\n  --> /tmp/tmp5z6tnnx7.rs:32:13\n\
    \   |\n32 |         b | c => 0.0, \n   |         -   ^ pattern doesn't bind `b`\n\
    \   |         |\n   |         variable not in all patterns\n\nerror[E0408]: variable\
    \ `c` is not bound in all patterns\n  --> /tmp/tmp5z6tnnx7.rs:32:9\n   |\n32 |\
    \         b | c => 0.0, \n   |         ^   - variable not in all patterns\n  \
    \ |         |\n   |         pattern doesn't bind `c`\n\nerror[E0308]: `match`\
    \ arms have incompatible types\n  --> /tmp/tmp5z6tnnx7.rs:22:32\n   |\n10 | /\
    \     match a + b + c {\n11 | |         \n12 | |         // Triangle is valid\
    \ if:\n13 | |         // a + b > c\n...  |\n18 | |         0 => 0.0, \n   | |\
    \              --- this is found to be of type `f64`\n19 | |         \n20 | |\
    \         a if b > a && c > b => 0.0, \n   | |                               \
    \ --- this is found to be of type `f64`\n21 | |         \n22 | |         a if\
    \ b > a && c > a => a + c, \n   | |                                ^^^^^ expected\
    \ `f64`, found `isize`\n...  |\n34 | |         _ => -1.0,\n35 | |     }\n   |\
    \ |_____- `match` arms have incompatible types\n   |\nhelp: you can convert an\
    \ `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n22 |         a if b > a && c > a => (a + c) as f64,\
    \ \n   |                                +     ++++++++\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0408.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a < 0 || b < 0 || c < 0 {\n    \
    \    return -1;\n    }\n    let area: f64 = (a + b + c) as f64 / 2;\n    if area\
    \ >= c {\n        return area;\n    } else {\n        return -1;\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjk2lnt53.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a < 0 || b < 0 || c < 0 {\n11 |         return -1;\n   | \
    \               ^^\n   |                |\n   |                expected `f64`,\
    \ found integer\n   |                help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot divide `f64` by `{integer}`\n  --> /tmp/tmpjk2lnt53.rs:13:40\n   |\n\
    13 |     let area: f64 = (a + b + c) as f64 / 2;\n   |                       \
    \                 ^ no implementation for `f64 / {integer}`\n   |\n   = help:\
    \ the trait `Div<{integer}>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\nhelp: consider using a\
    \ floating-point literal by writing it with `.0`\n   |\n13 |     let area: f64\
    \ = (a + b + c) as f64 / 2.0;\n   |                                          \
    \ ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjk2lnt53.rs:14:16\n   |\n\
    14 |     if area >= c {\n   |                ^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n14 |     if area\
    \ >= c as f64 {\n   |                  ++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    use std::f64::consts::PI;\n\n    if\
    \ a + b > c {\n        return -1;\n    }\n\n    if a + c > b {\n        return\
    \ -1;\n    }\n\n    if c + b > a {\n        return -1;\n    }\n\n    if a + b\
    \ + c <= 3 {\n        let mut area_rounded = 0;\n        area_rounded += a * PI\
    \ / 6.0;\n        area_rounded += b * PI / 6.0;\n        area_rounded += c * PI\
    \ / 6.0;\n        area_rounded /= 4.0;\n        return area_rounded;\n    }\n\n\
    \    let mut area_rounded = 0;\n    area_rounded += a * PI / 6.0;\n    area_rounded\
    \ += b * PI / 6.0;\n    area_rounded += c * PI / 6.0;\n    area_rounded /= 4.0;\n\
    \    area_rounded = round(area_rounded, 2);\n\n    return area_rounded;\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp5om8ju2g.rs:38:20\n\
    \   |\n38 |     area_rounded = round(area_rounded, 2);\n   |                 \
    \   ^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5om8ju2g.rs:13:16\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         return -1;\n   |                ^^\n   |    \
    \            |\n   |                expected `f64`, found integer\n   |      \
    \          help: use a float literal: `-1.0`\n\nerror[E0277]: cannot multiply\
    \ `isize` by `f64`\n  --> /tmp/tmp5om8ju2g.rs:26:27\n   |\n26 |         area_rounded\
    \ += a * PI / 6.0;\n   |                           ^ no implementation for `isize\
    \ * f64`\n   |\n   = help: the trait `Mul<f64>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `f64`\n  --> /tmp/tmp5om8ju2g.rs:27:27\n   |\n27\
    \ |         area_rounded += b * PI / 6.0;\n   |                           ^ no\
    \ implementation for `isize * f64`\n   |\n   = help: the trait `Mul<f64>` is not\
    \ implemented for `isize`\n   = help: the following other types implement trait\
    \ `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n\
    \             <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n  \
    \           <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n      \
    \       <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n        \
    \   and 49 others\n\nerror[E0277]: cannot multiply `isize` by `f64`\n  --> /tmp/tmp5om8ju2g.rs:28:27\n\
    \   |\n28 |         area_rounded += c * PI / 6.0;\n   |                      \
    \     ^ no implem"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0\n    if a + b > c {\n\
    \        s += (c - (a + b)) * (b - c)\n    }\n    if a + c > b {\n        s +=\
    \ (c - (a + b)) * (a - b)\n    }\n    if a + b > c {\n        s += (c - (a + b))\
    \ * (b - c)\n    }\n    if a == b {\n        return s * 0.5\n    }\n    if a ==\
    \ c {\n        return s * 0.5\n    }\n    if b == c {\n        return s * 0.5\n\
    \    }\n    if a > b {\n        s += (a - b) * (b - c)\n    }\n    if a > c {\n\
    \        s += (a - c) * (c - b)\n    }\n    if b > c {\n        s += (b - c) *\
    \ (c - a)\n    }\n    s * 0.5\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp6sma2ysu.rs:10:20\n\
    \   |\n10 |     let mut s = 0.0\n   |                    ^ help: add `;` here\n\
    11 |     if a + b > c {\n   |     -- unexpected token\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmp6sma2ysu.rs:12:11\n   |\n12 |\
    \         s += (c - (a + b)) * (b - c)\n   |           ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp6sma2ysu.rs:15:11\n\
    \   |\n15 |         s += (c - (a + b)) * (a - b)\n   |           ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmp6sma2ysu.rs:18:11\n   |\n18 |         s += (c - (a + b)) * (b -\
    \ c)\n   |           ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssi"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    (b - a) * (c - b) as f64 / b\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `isize` by `f64`\n  --> /tmp/tmp2b7f8mh7.rs:10:13\n\
    \   |\n10 |     (b - a) * (c - b) as f64 / b\n   |             ^ no implementation\
    \ for `isize * f64`\n   |\n   = help: the trait `Mul<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c || a + c > b || b + c\
    \ > a {\n        return -1.0\n    }\n    (b * b) - (a * c) - (a * b) - (c * c)\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjgwf4t2r.rs:13:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n13 |     (b * b) - (a * c) - (a * b) - (c * c)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n13 |     ((b * b) - (a * c) - (a * b) - (c * c)) as f64\n \
    \  |     +                                     ++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a1 = a + b + c;\n    let mut\
    \ a2 = a + c;\n    let mut a3 = a + b;\n    let mut b1 = b + c;\n    let mut b2\
    \ = b + a;\n    let mut b3 = b + a1;\n    let mut c1 = c + b;\n    let mut c2\
    \ = c + a2;\n    let mut c3 = c + a3;\n\n    let area_sum = &a1 + &a2 + &a3 +\
    \ &b1 + &b2 + &b3 + &c1 + &c2 + &c3;\n\n    if area_sum >= 0.f64 {\n        let\
    \ mut sum = 0.0;\n        let mut i = 0;\n        let mut limit = 0.0;\n\n   \
    \     while i < area_sum {\n            sum += i as f64;\n            i += 1.0;\n\
    \        }\n\n        if sum > area_sum {\n            sum -= area_sum;\n    \
    \    }\n        limit = (limit + sum) / 2.0;\n        return limit;\n    }\n \
    \   return -1.0;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0610]: `{integer}` is a primitive type and therefore doesn't have\
    \ fields\n  --> /tmp/tmpax80_6rq.rs:22:22\n   |\n22 |     if area_sum >= 0.f64\
    \ {\n   |                      ^^^\n\nerror[E0277]: cannot add-assign `{float}`\
    \ to `isize`\n  --> /tmp/tmpax80_6rq.rs:29:15\n   |\n29 |             i += 1.0;\n\
    \   |               ^^ no implementation for `isize += {float}`\n   |\n   = help:\
    \ the trait `AddAssign<{float}>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpax80_6rq.rs:32:18\n   |\n32 |         if sum > area_sum\
    \ {\n   |                  ^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n32 |         if sum > area_sum as\
    \ f64 {\n   |                           ++++++\n\nerror[E0277]: cannot subtract-assign\
    \ `isize` from `f64`\n  --> /tmp/tmpax80_6rq.rs:33:17\n   |\n33 |            \
    \ sum -= area_sum;\n   |                 ^^ no implementation for `f64 -= isize`\n\
    \   |\n   = help: the trait `SubAssign<isize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `SubAssign<Rhs>`:\n    \
    \         <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n        \
    \     <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n            \
    \ <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n             <i16\
    \ as SubAssign<&i16>>\n             <i16 as SubAssign>\n           and 20 others\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0610.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if b >= c {\n        return 0;\n  \
    \  }\n    if a >= b {\n        return 0;\n    }\n    if a >= c {\n        return\
    \ 0;\n    }\n    return std::f64::consts::Pi / (4.0 * (a + b + c));\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `Pi` in module `std::f64::consts`\n   -->\
    \ /tmp/tmp_fc_2hfi.rs:19:30\n    |\n19  |     return std::f64::consts::Pi / (4.0\
    \ * (a + b + c));\n    |                              ^^ help: a constant with\
    \ a similar name exists (notice the capitalization): `PI`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_fc_2hfi.rs:11:16\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n10 |     if b >= c {\n11\
    \ |         return 0;\n   |                ^\n   |                |\n   |    \
    \            expected `f64`, found integer\n   |                help: use a float\
    \ literal: `0.0`\n\nerror[E0277]: cannot multiply `{float}` by `isize`\n  -->\
    \ /tmp/tmp_fc_2hfi.rs:19:40\n   |\n19 |     return std::f64::consts::Pi / (4.0\
    \ * (a + b + c));\n   |                                        ^ no implementation\
    \ for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a <= 0 || b <= 0 || c <= 0 {\n \
    \       return -1;\n    }\n    a + b + c\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0rq0rxt_.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a <= 0 || b <= 0 || c <= 0 {\n11 |         return -1;\n  \
    \ |                ^^\n   |                |\n   |                expected `f64`,\
    \ found integer\n   |                help: use a float literal: `-1.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0rq0rxt_.rs:13:5\n   |\n9  | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n13 |     a +\
    \ b + c\n   |     ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n13 |     (a + b + c) as f64\n  \
    \ |     +         ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut x = a + b + c;\n    if x >\
    \ c {\n        return -1.0\n    }\n    if a >= b {\n        x -= a;\n    }\n \
    \   if a >= c {\n        x -= b;\n    }\n    x / 2.0\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpwd3o28bn.rs:20:7\n\
    \   |\n20 |     x / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let area = (a * b + c * a) / 2.0;\n\
    \    if area > 0.0 {\n        area.round()\n    } else {\n        -1\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpul8u9emb.rs:10:32\n\
    \   |\n10 |     let area = (a * b + c * a) / 2.0;\n   |                      \
    \          ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Div<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpul8u9emb.rs:14:9\n   |\n9  | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n14 |         -1\n   |         ^^\n\
    \   |         |\n   |         expected `f64`, found integer\n   |         help:\
    \ use a float literal: `-1.0`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // if abc is valid triangle, calculate\
    \ area\n    if a == b && b == c {\n        return c * (a + b) / 2\n    }\n   \
    \ if a == c && b != c {\n        return a * b / 2\n    }\n    if b == c && a !=\
    \ c {\n        return a * a / 2\n    }\n    // return -1 if triangle is not valid\n\
    \    return -1.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps96ipt83.rs:12:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n12 |         return c * (a + b) / 2\n   |                ^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n12 |         return (c * (a + b) / 2) as f64\n   |        \
    \        +               ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c && a + c > b {\n     \
    \   return (a * b + b * c + c * a) / 4\n    }\n    return -1\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb9hiqhy9.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c && a + c > b {\n11 |         return (a * b + b *\
    \ c + c * a) / 4\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    11 |         return ((a * b + b * c + c * a) / 4) as f64\n   |               \
    \ +                           ++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a;\n    let mut b = b;\n\
    \    let mut c = c;\n    let mut acum = 0;\n    let mut bcum = 0;\n    let mut\
    \ caccum = 0;\n    while a != b {\n        if a > c {\n            a -= c;\n \
    \           acum -= c;\n        } else {\n            acum += a;\n           \
    \ a -= b;\n        }\n        \n        if b > c {\n            b -= c;\n    \
    \        bcum -= c;\n        } else {\n            bcum += b;\n            b -=\
    \ a;\n        }\n        \n        if c > b {\n            c -= b;\n         \
    \   caccum -= b;\n        } else {\n            caccum += c;\n            c -=\
    \ a;\n        }\n    }\n    acum * bcum / caccum\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3bfszagk.rs:41:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n41 |     acum * bcum / caccum\n   |     ^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    41 |     (acum * bcum / caccum) as f64\n   |     +                    ++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    (a + b + c).sqrt() / 2.0\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpvppmmxpb.rs:10:17\n   |\n10 |     (a + b + c).sqrt() /\
    \ 2.0\n   |                 ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    area_of(a, b, c).round()\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `area_of` in this scope\n  --> /tmp/tmp2h_yglvm.rs:10:5\n\
    \   |\n10 |     area_of(a, b, c).round()\n   |     ^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // If all sides are the same, no area\
    \ exists\n    if a + b + c == 0 {\n        return 0.0;\n    }\n\n    // A triangle\
    \ is valid if the two sides are greater than the third side\n    if a + b > c\
    \ {\n        return 0.0;\n    }\n\n    // Calculate the area of a triangle if\
    \ all sides are equal or greater than the third side\n    // The area of a triangle\
    \ is equal to the base of the triangle times the height of the \n    // triangle\
    \ times the hypotenuse divided by the length of each side.\n    let area = a *\
    \ b * c / std::pow((a + b), 2);\n\n    // Return the area rounded to 2 decimal\
    \ points\n    round(area)\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `pow` in crate `std`\n  --> /tmp/tmpik9l5wd3.rs:23:33\n\
    \   |\n23 |     let area = a * b * c / std::pow((a + b), 2);\n   |           \
    \                      ^^^ not found in `std`\n\nerror[E0425]: cannot find function\
    \ `round` in this scope\n  --> /tmp/tmpik9l5wd3.rs:26:5\n   |\n26 |     round(area)\n\
    \   |     ^^^^^ not found in this scope\n\nwarning: unnecessary parentheses around\
    \ function argument\n  --> /tmp/tmpik9l5wd3.rs:23:37\n   |\n23 |     let area\
    \ = a * b * c / std::pow((a + b), 2);\n   |                                  \
    \   ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove\
    \ these parentheses\n   |\n23 -     let area = a * b * c / std::pow((a + b), 2);\n\
    23 +     let area = a * b * c / std::pow(a + b, 2);\n   | \n\nerror: aborting\
    \ due to 2 previous errors; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut s = 0.0;\n    if a + b > c\
    \ {\n        s -= b;\n    }\n    if a + c > b {\n        s += c;\n    }\n    if\
    \ b + c > a {\n        s -= a;\n    }\n    s * s\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot subtract-assign `isize` from `{float}`\n  --> /tmp/tmps06is5u_.rs:12:11\n\
    \   |\n12 |         s -= b;\n   |           ^^ no implementation for `{float}\
    \ -= isize`\n   |\n   = help: the trait `SubAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n\
    \             <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n    \
    \         <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n        \
    \     <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n         \
    \    <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmps06is5u_.rs:15:11\n\
    \   |\n15 |         s += c;\n   |           ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot subtract-assign `isize` from `{float}`\n \
    \ --> /tmp/tmps06is5u_.rs:18:11\n   |\n18 |         s -= a;\n   |           ^^\
    \ no implementation for `{float} -= isize`\n   |\n   = help: the trait `SubAssign<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n           \
    \  <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n             <f64\
    \ as SubAssign>\n             <i128 as SubAssign<&i128>>\n             <i128 as\
    \ SubAssign>\n             <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n\
    \           and 20 others\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n\n    let area_one = a + b - c;\n    let area_two = (a + b) * c;\n   \
    \ let area_three = a * b * c;\n    if area_one + area_two + area_three == 0 {\n\
    \        return area_one / 2;\n    }\n    return area_one + area_two + area_three\
    \ - area_one * area_two / 2;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi4xctu91.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let area = (a + b + c) / 2\n    if\
    \ a + b > c {\n        area\n    } else {\n        let area = area - (a * c -\
    \ b * a)\n        area.to_f64()\n    }\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp2u_4y83d.rs:10:31\n\
    \   |\n10 |     let area = (a + b + c) / 2\n   |                             \
    \  ^ help: add `;` here\n11 |     if a + b > c {\n   |     -- unexpected token\n\
    \nerror: expected `;`, found `area`\n  --> /tmp/tmp2u_4y83d.rs:14:42\n   |\n14\
    \ |         let area = area - (a * c - b * a)\n   |                          \
    \                ^ help: add `;` here\n15 |         area.to_f64()\n   |      \
    \   ---- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2u_4y83d.rs:12:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n12 |         area\n   |         ^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n12 |      \
    \   area as f64\n   |              ++++++\n\nerror[E0599]: no method named `to_f64`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmp2u_4y83d.rs:15:14\n\
    \   |\n15 |         area.to_f64()\n   |              ^^^^^^ method not found in\
    \ `isize`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ if a + c > b {\n        -1\n    } else {\n        (c * b) - (a * c)\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqgr_3mss.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqgr_3mss.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqgr_3mss.rs:15:9\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n15 |         (c * b) - (a * c)\n   |         ^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    15 |         ((c * b) - (a * c)) as f64\n   |         +                 ++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a > c {\n        true => a *\
    \ (b - a),\n        false => c * (a - b),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp011et2gr.rs:11:17\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     match a > c {\n11 |         true => a * (b - a),\n   |      \
    \           ^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n11 |         true => (a * (b - a)) as f64,\n   |\
    \                 +           ++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let area = sqrt((a * b) * (b * c));\n\
    \    if area < 0 {\n        -1\n    } else {\n        area/2\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmpnt4twls0.rs:10:16\n\
    \   |\n10 |     let area = sqrt((a * b) * (b * c));\n   |                ^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnt4twls0.rs:12:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n12 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let area = a * b * c;\n    if area\
    \ > c {\n        area / c\n    } else {\n        -1\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp61e217cs.rs:12:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n12 |         area / c\n   |         ^^^^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n12 |      \
    \   (area / c) as f64\n   |         +        ++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp61e217cs.rs:14:9\n   |\n9  | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n14 |         -1\n \
    \  |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c && a + c > b {\n     \
    \   // The triangle is valid\n        if a + b + c <= 100 {\n            // If\
    \ the sum of the two sides is <= 100 then it is valid\n            (a + b + c)\
    \ as f64\n        } else {\n            // Otherwise it isn't valid\n        \
    \    -1.0 // Return -1\n        }\n    } else {\n        // The triangle is invalid\n\
    \        -1.0 // Return -1\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12.0`,\n right: `6.0`', /tmp/tmpaealsdoq.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let (ab, bc, ac) = (a * b) - (b * c);\n\
    \    if ab < 0.0 {\n        return -1.0\n    }\n    else if bc < 0.0 {\n     \
    \   return -1.0;\n    }\n    else if ac < 0.0 {\n        return -1.0;\n    }\n\
    \    else if ab == 0.0 {\n        if bc != 0.0 {\n            return bc / a;\n\
    \        }\n        else if ac != 0.0 {\n            return ac / a;\n        }\n\
    \        else {\n            return 0.0;\n        }\n    }\n    else if bc !=\
    \ 0.0 {\n        return ab / b;\n    }\n    else {\n        return ac / c;\n \
    \   }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1pn0pn0d.rs:10:9\n   |\n\
    10 |     let (ab, bc, ac) = (a * b) - (b * c);\n   |         ^^^^^^^^^^^^   -----------------\
    \ this expression has type `isize`\n   |         |\n   |         expected `isize`,\
    \ found tuple\n   |\n   = note: expected type `isize`\n             found tuple\
    \ `(_, _, _)`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        // If a + b\
    \ > c then a + b is the smaller side\n        triangle_area(b, c, a)\n    } else\
    \ if b + c > a {\n        // If b + c > a then b + c is the smaller side\n   \
    \     triangle_area(a, c, b)\n    } else {\n        // a + b + c is the smaller\
    \ side\n        (a * b + c) / 2\n    }\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9nd8c8r2.rs:18:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n18 |         (a * b + c) / 2\n   |         ^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    18 |         ((a * b + c) / 2) as f64\n   |         +               ++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let abs = match abs::abs(b) {\n   \
    \     Some(i) => i as f64,\n        None => 0.0\n    };\n    let bc = match bcs::abs(c)\
    \ {\n        Some(i) => i as f64,\n        None => 0.0\n    };\n    let abc =\
    \ match abcs::abs(a + b + c) {\n        Some(i) => i as f64,\n        None =>\
    \ 0.0\n    };\n    match abs > bc && abs > abc {\n        true => abs,\n     \
    \   false => abc\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `abs`\n\
    \  --> /tmp/tmpzrpzzofe.rs:10:21\n   |\n10 |     let abs = match abs::abs(b) {\n\
    \   |                     ^^^ use of undeclared crate or module `abs`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `bcs`\n  --> /tmp/tmpzrpzzofe.rs:14:20\n\
    \   |\n14 |     let bc = match bcs::abs(c) {\n   |                    ^^^ use\
    \ of undeclared crate or module `bcs`\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared crate or module `abcs`\n  --> /tmp/tmpzrpzzofe.rs:18:21\n   |\n\
    18 |     let abc = match abcs::abs(a + b + c) {\n   |                     ^^^^\
    \ use of undeclared crate or module `abcs`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ if b + c > a {\n        -1\n    } else if c + a > b {\n        -1\n    } else\
    \ {\n        ((a + b) * (b + c) * (c + a)) as f64 / 9.0\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwdg78or9.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwdg78or9.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwdg78or9.rs:15:9\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let tri = (a, b, c).min(|a, b, _| b);\n\
    \n    (tri.a + tri.b + tri.c).sqrt()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpww0timev.rs:10:29\n   |\n\
    10 |     let tri = (a, b, c).min(|a, b, _| b);\n   |                         \
    \    ^^^^^^^^^^^ expected tuple, found closure\n   |\n   = note: expected tuple\
    \ `(isize, isize, isize)`\n            found closure `[closure@/tmp/tmpww0timev.rs:10:29:\
    \ 10:40]`\n\nerror[E0609]: no field `a` on type `(isize, isize, isize)`\n  -->\
    \ /tmp/tmpww0timev.rs:12:10\n   |\n12 |     (tri.a + tri.b + tri.c).sqrt()\n \
    \  |          ^\n\nerror[E0609]: no field `b` on type `(isize, isize, isize)`\n\
    \  --> /tmp/tmpww0timev.rs:12:18\n   |\n12 |     (tri.a + tri.b + tri.c).sqrt()\n\
    \   |                  ^\n\nerror[E0609]: no field `c` on type `(isize, isize,\
    \ isize)`\n  --> /tmp/tmpww0timev.rs:12:26\n   |\n12 |     (tri.a + tri.b + tri.c).sqrt()\n\
    \   |                          ^\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1.0\n\
    \    }\n    if a + c > b {\n        return -1.0\n    }\n    if b + c > a {\n \
    \       return -1.0\n    }\n    return a * b * c / 2.0\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n \
    \   assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp_t4mx3q8.rs:19:22\n\
    \   |\n19 |     return a * b * c / 2.0\n   |                      ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a > c {\n        let temp = a;\n\
    \        a = c;\n        c = temp;\n    }\n\n    if b > c {\n        let temp\
    \ = b;\n        b = c;\n        c = temp;\n    }\n\n    c / (a + b + c)\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgbv3p1w3.rs:22:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n22 |     c / (a + b + c)\n   |     ^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    22 |     (c / (a + b + c)) as f64\n   |     +               ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    a + b + c > c ? f64::sqrt((a * b +\
    \ c) / ((a + b) * (b + c))) / 2.0 : -1.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `f64`\n\
    \  --> /tmp/tmpj2yc1k6d.rs:10:21\n   |\n10 |     a + b + c > c ? f64::sqrt((a\
    \ * b + c) / ((a + b) * (b + c))) / 2.0 : -1.0\n   |                     ^^^ expected\
    \ one of `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a_sq_root = Math::sqrt(a);\n\
    \    let mut b_sq_root = Math::sqrt(b);\n    let mut c_sq_root = Math::sqrt(c);\n\
    \    let mut side_a = (b_sq_root - a_sq_root).abs();\n    let mut side_b = (c_sq_root\
    \ - b_sq_root).abs();\n    let mut side_c = (b_sq_root - c_sq_root).abs();\n\n\
    \    if side_b > side_c\n        && side_b > side_a\n        && side_a > 0.0\n\
    \    {\n        side_a = side_b;\n        side_b = side_c;\n        side_c = side_a;\n\
    \    }\n\n    side_a\n}\n\nfn main() {\n    let candidate = triangle_area;\n \
    \   assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Math`\n  --> /tmp/tmp595b641u.rs:10:25\n\
    \   |\n10 |     let mut a_sq_root = Math::sqrt(a);\n   |                     \
    \    ^^^^ use of undeclared type `Math`\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared type `Math`\n  --> /tmp/tmp595b641u.rs:11:25\n   |\n11 |     let\
    \ mut b_sq_root = Math::sqrt(b);\n   |                         ^^^^ use of undeclared\
    \ type `Math`\n\nerror[E0433]: failed to resolve: use of undeclared type `Math`\n\
    \  --> /tmp/tmp595b641u.rs:12:25\n   |\n12 |     let mut c_sq_root = Math::sqrt(c);\n\
    \   |                         ^^^^ use of undeclared type `Math`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut area = 0;\n    if a + b > c\
    \ {\n        area = -1 as f64;\n    } else if a + c > b {\n        area = -1 as\
    \ f64;\n    } else {\n        area = (a * b) - (c * a);\n    }\n    area = area.round()\
    \ / 2;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyuxj24t2.rs:12:16\n   |\n\
    10 |     let mut area = 0;\n   |                    - expected due to this value\n\
    11 |     if a + b > c {\n12 |         area = -1 as f64;\n   |                ^^^^^^^^^\
    \ expected integer, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyuxj24t2.rs:14:16\n\
    \   |\n10 |     let mut area = 0;\n   |                    - expected due to this\
    \ value\n...\n14 |         area = -1 as f64;\n   |                ^^^^^^^^^ expected\
    \ integer, found `f64`\n\nerror[E0599]: no method named `round` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpyuxj24t2.rs:18:17\n   |\n18 |  \
    \   area = area.round() / 2;\n   |                 ^^^^^ method not found in `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyuxj24t2.rs:19:5\n   |\n9  | fn\
    \ triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |                 \
    \                                  --- expected `f64` because of return type\n\
    ...\n19 |     area\n   |     ^^^^ expected `f64`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n19 |     area as f64\n   |     \
    \     ++++++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1.0;\n\
    \    }\n    \n    (a * b) - (c * a)\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprt917y4o.rs:14:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |     (a * b) - (c * a)\n   |     ^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    14 |     ((a * b) - (c * a)) as f64\n   |     +                 ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c && a + c > b && b + c\
    \ > a {\n        return 0.5 * ((a * b + c) - (b * a + c));\n    }\n    else {\n\
    \        return -1.0;\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmp_kgzu2bf.rs:11:20\n\
    \   |\n11 |         return 0.5 * ((a * b + c) - (b * a + c));\n   |          \
    \          ^ no implementation for `{float} * isize`\n   |\n   = help: the trait\
    \ `Mul<isize>` is not implemented for `{float}`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let a: f64 = f64::from(a);\n    let\
    \ b: f64 = f64::from(b);\n    let c: f64 = f64::from(c);\n\n    if a > b + c &&\
    \ b > a + c {\n        return 0.0;\n    }\n\n    if a + b > c {\n        return\
    \ 0.5 * b * b - c;\n    }\n\n    if a + c > b {\n        return 0.5 * b * c -\
    \ a;\n    }\n\n    if b + c > a {\n        return 0.5 * a * c - b;\n    }\n\n\
    \    return 0.0;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: From<isize>` is not satisfied\n  -->\
    \ /tmp/tmpxsabkgg7.rs:10:18\n   |\n10 |     let a: f64 = f64::from(a);\n   | \
    \                 ^^^^^^^^^ the trait `From<isize>` is not implemented for `f64`\n\
    \   |\n   = help: the following other types implement trait `From<T>`:\n     \
    \        <f32 as From<i16>>\n             <f32 as From<i8>>\n             <f32\
    \ as From<u16>>\n             <f32 as From<u8>>\n             <f64 as From<f32>>\n\
    \             <f64 as From<i16>>\n             <f64 as From<i32>>\n          \
    \   <f64 as From<i8>>\n           and 67 others\n\nerror[E0277]: the trait bound\
    \ `f64: From<isize>` is not satisfied\n  --> /tmp/tmpxsabkgg7.rs:11:18\n   |\n\
    11 |     let b: f64 = f64::from(b);\n   |                  ^^^^^^^^^ the trait\
    \ `From<isize>` is not implemented for `f64`\n   |\n   = help: the following other\
    \ types implement trait `From<T>`:\n             <f32 as From<i16>>\n        \
    \     <f32 as From<i8>>\n             <f32 as From<u16>>\n             <f32 as\
    \ From<u8>>\n             <f64 as From<f32>>\n             <f64 as From<i16>>\n\
    \             <f64 as From<i32>>\n             <f64 as From<i8>>\n           and\
    \ 67 others\n\nerror[E0277]: the trait bound `f64: From<isize>` is not satisfied\n\
    \  --> /tmp/tmpxsabkgg7.rs:12:18\n   |\n12 |     let c: f64 = f64::from(c);\n\
    \   |                  ^^^^^^^^^ the trait `From<isize>` is not implemented for\
    \ `f64`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <f32 as From<i16>>\n             <f32 as From<i8>>\n           \
    \  <f32 as From<u16>>\n             <f32 as From<u8>>\n             <f64 as From<f32>>\n\
    \             <f64 as From<i16>>\n             <f64 as From<i32>>\n          \
    \   <f64 as From<i8>>\n           and 67 others\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut sum: isize = 0;\n    let mut\
    \ sum: isize = 0;\n    let mut sum: isize = 0;\n    sum += a;\n    sum += b;\n\
    \    sum += c;\n    let s = ((sum * sum) - (a * b) - (b * c));\n    if s == 0\
    \ {\n        0\n    } else {\n        s / 3.\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpitxneve4.rs:16:13\n\
    \   |\n16 |     let s = ((sum * sum) - (a * b) - (b * c));\n   |             ^\
    \                               ^\n   |\n   = note: `#[warn(unused_parens)]` on\
    \ by default\nhelp: remove these parentheses\n   |\n16 -     let s = ((sum * sum)\
    \ - (a * b) - (b * c));\n16 +     let s = (sum * sum) - (a * b) - (b * c);\n \
    \  | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpitxneve4.rs:18:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n18 |         0\n   |         ^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `0.0`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpitxneve4.rs:20:11\n   |\n\
    20 |         s / 3.\n   |           ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut sum: isize = 0;\n    \n   \
    \ // Add up all sides of triangle\n    sum += a;\n    sum += b;\n    sum += c;\n\
    \n    // Check if sum of two sides is greater than third side\n    if sum >= c\
    \ {\n        return sum * 0.5;\n    }\n\n    // Not a valid triangle\n    return\
    \ -1;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmps4y20983.rs:19:20\n\
    \   |\n19 |         return sum * 0.5;\n   |                    ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps4y20983.rs:23:12\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n23 |     return -1;\n   |            ^^\n   |            |\n\
    \   |            expected `f64`, found integer\n   |            help: use a float\
    \ literal: `-1.0`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ if b + c > a {\n        -1\n    } else if c + a > b {\n        -1\n    } else\
    \ {\n        (a * b + b * c + c * a) * (a + b + c)\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmif_4ev8.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmif_4ev8.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmif_4ev8.rs:15:9\n \
    \  |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmif_4ev8.rs:17:9\n   |\n9  | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n17 |       \
    \  (a * b + b * c + c * a) * (a + b + c)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n17 |         ((a * b + b * c + c * a) * (a + b + c)) as f64\n\
    \   |         +                                     ++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a > 0 && b > 0 && c > 0 && a < b\
    \ + c && b < a + c && c < a + b {\n        let mut s: f64 = 0;\n        if a <\
    \ c {\n            s = b * c - a;\n        } else if c < b {\n            s =\
    \ (a-c) * b;\n        } else {\n            s = (a-b) * c;\n        }\n      \
    \  (s * s + a * b * c).sqrt()\n    } else {\n        -1\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppbyc2mm1.rs:11:26\n   |\n\
    11 |         let mut s: f64 = 0;\n   |                    ---   ^\n   |      \
    \              |     |\n   |                    |     expected `f64`, found integer\n\
    \   |                    |     help: use a float literal: `0.0`\n   |        \
    \            expected due to this\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppbyc2mm1.rs:13:17\n\
    \   |\n11 |         let mut s: f64 = 0;\n   |                    --- expected\
    \ due to this type\n12 |         if a < c {\n13 |             s = b * c - a;\n\
    \   |                 ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n13 |             s = (b * c - a)\
    \ as f64;\n   |                 +         ++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppbyc2mm1.rs:15:17\n   |\n11 |         let mut s: f64 =\
    \ 0;\n   |                    --- expected due to this type\n...\n15 |       \
    \      s = (a-c) * b;\n   |                 ^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |            \
    \ s = ((a-c) * b) as f64;\n   |                 +         ++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppbyc2mm1.rs:17:17\n   |\n11 |         let mut\
    \ s: f64 = 0;\n   |                    --- expected due to this type\n...\n17\
    \ |             s = (a-b) * c;\n   |                 ^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    17 |             s = ((a-b) * c) as f64;\n   |                 +         ++++++++\n\
    \nerror[E0277]: cannot add `isize` to `f64`\n  --> /tmp/tmppbyc2mm1.rs:19:16\n\
    \   |\n19 |         (s * s + a * b * c).sqrt()\n   |                ^ no implementation\
    \ for `f64 + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    (a + b + c).abs() / 2.0\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp63k58i6y.rs:10:23\n\
    \   |\n10 |     (a + b + c).abs() / 2.0\n   |                       ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1\n    } else\
    \ if a + c > b {\n        -1\n    } else {\n        (a + b + c).sqrt()\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn_9di65a.rs:11:9\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn_9di65a.rs:13:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n13 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0599]: no method named `sqrt` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpn_9di65a.rs:15:21\n   |\n15 |         (a + b +\
    \ c).sqrt()\n   |                     ^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // The triangle is valid if all sides\
    \ are greater than 0\n    // The sum of any two sides is greater than the third\
    \ side\n    if a + b > c || a + c > b || b + c > a {\n        return -1.0;\n \
    \   }\n\n    let mut a: f64 = a + b + c;\n    let mut b: f64 = a * b + c;\n  \
    \  let mut c: f64 = a * a + b * b;\n    \n    while a >= b {\n        c = b;\n\
    \        b = a % b;\n        a = c;\n    }\n    while b >= c {\n        a = c;\n\
    \        c = b % c;\n        b = a;\n    }\n    while c >= a {\n        b = a;\n\
    \        a = c % b;\n        c = a;\n    }\n\n    a / b;\n    b / c;\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd61_hfh4.rs:16:22\n   |\n\
    16 |     let mut a: f64 = a + b + c;\n   |                ---   ^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |                |\n   |                expected due\
    \ to this\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n16 |     let\
    \ mut a: f64 = (a + b + c) as f64;\n   |                      +         ++++++++\n\
    \nerror[E0277]: cannot multiply `f64` by `isize`\n  --> /tmp/tmpd61_hfh4.rs:17:24\n\
    \   |\n17 |     let mut b: f64 = a * b + c;\n   |                        ^ no\
    \ implementation for `f64 * isize`\n   |\n   = help: the trait `Mul<isize>` is\
    \ not implemented for `f64`\n   = help: the following other types implement trait\
    \ `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n\
    \             <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n  \
    \           <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n      \
    \       <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n        \
    \   and 49 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd61_hfh4.rs:9:51\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    -------------\
    \                                  ^^^ expected `f64`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    ...\n37 |     b / c;\n   |          - help: remove this semicolon\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    a.abs() + b.abs() + c.abs() - a.abs()\
    \ + b.abs() + c.abs()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplyqxprlq.rs:10:5\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     a.abs() + b.abs() + c.abs() - a.abs() + b.abs() + c.abs()\n \
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    10 |     (a.abs() + b.abs() + c.abs() - a.abs() + b.abs() + c.abs()) as f64\n\
    \   |     +                                                         ++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    // use type aliases to make the code\
    \ a bit more readable\n    type TPoint = (isize, isize);\n    type TVector = (isize,\
    \ isize);\n\n    // check that the sides make a valid triangle\n    if a + b >\
    \ c {\n        return -1.0;\n    }\n    if b + c > a {\n        return -1.0;\n\
    \    }\n\n    // calculate the area of the triangle\n    let mut a = a / 2.0;\n\
    \    let mut b = b / 2.0;\n    let mut c = c / 2.0;\n    let mut s = (a + b +\
    \ c) / 2.0;\n    while s >= 1.0 {\n        let mut i = 0;\n        let mut j =\
    \ 0;\n        let mut k = 0;\n        let mut n = 0;\n        while i < 3 {\n\
    \            let mut x = 0.0;\n            let mut y = 0.0;\n            let mut\
    \ z = 0.0;\n            let mut a = 0.0;\n            let mut b = 0.0;\n     \
    \       let mut c = 0.0;\n            let mut d = 0.0;\n            for _ in 0..n\
    \ {\n                x = 0.0;\n                y = 0.0;\n                z = 0.0;\n\
    \                a = a * a + a * b + a * c;\n                b = 2.0 * a * b +\
    \ b * c;\n                c = a * c + b * d;\n                d = c * c + d *\
    \ d;\n                i += 1;\n                j += 1;\n                k += 1;\n\
    \            }\n            n = i;\n            let mut a = 0.0;\n           \
    \ let mut b = 0.0;\n            let mut c = 0.0;\n            let mut d = 0.0;\n\
    \            for i in 0..n {\n                x = x * x + a * x;\n           \
    \     y = y * y + b * y;\n                z = z * z + c * z;\n               \
    \ a = a + b + c;\n                b = 2 * a + c;\n                c = a + d;\n\
    \                d = 2 * c + d;\n            }\n            s = s / 2.0;\n   \
    \     }\n    }\n    return s;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp2zcryrnq.rs:23:19\n\
    \   |\n23 |     let mut a = a / 2.0;\n   |                   ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp2zcryrnq.rs:24:19\n\
    \   |\n24 |     let mut b = b / 2.0;\n   |                   ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp2zcryrnq.rs:25:19\n\
    \   |\n25 |     let mut c = c / 2.0;\n   |                   ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot multiply `{integer}` by `{float}`\n  --> /tmp/tmp2zcryrnq.rs:62:23\n\
    \   |\n62 |                 b = 2 * a + c;\n   |                       ^ no impl"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b + c > b + a + c { \n     \
    \   // One side is greater than the other two sides\n        return -1\n    }\n\
    \n    let area = (a * b * c) / 4.0\n    area > 0.0\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `area`\n  --> /tmp/tmpqto3ecwe.rs:15:33\n  \
    \ |\n15 |     let area = (a * b * c) / 4.0\n   |                             \
    \    ^ help: add `;` here\n16 |     area > 0.0\n   |     ---- unexpected token\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqto3ecwe.rs:12:16\n   |\n9  |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |              \
    \                                     --- expected `f64` because of return type\n\
    ...\n12 |         return -1\n   |                ^^\n   |                |\n \
    \  |                expected `f64`, found integer\n   |                help: use\
    \ a float literal: `-1.0`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmpqto3ecwe.rs:15:28\n   |\n15 |     let area = (a * b * c) / 4.0\n\
    \   |                            ^ no implementation for `isize / {float}`\n \
    \  |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Div<Rhs>`:\n             <&'a\
    \ f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128\
    \ as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as\
    \ Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqto3ecwe.rs:16:5\n   |\n9  | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n16 |     area\
    \ > 0.0\n   |     ^^^^^^^^^^ expected `f64`, found `bool`\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a, b, c {\n        0, 1, 2 =>\
    \ 1.0,\n        _, _, _ => -1.0, \n        _, _, _ => -1.0\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `?`, `{`, or an operator, found\
    \ `,`\n  --> /tmp/tmpletcbrh3.rs:10:12\n   |\n10 |     match a, b, c {\n   | \
    \    -----  ^ expected one of `!`, `.`, `::`, `?`, `{`, or an operator\n   | \
    \    |\n   |     while parsing this `match` expression\n\nerror: aborting due\
    \ to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    match a > b + c {\n        true =>\
    \ b * b * c / a,\n        false => -1.0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplkthb8iw.rs:11:17\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     match a > b + c {\n11 |         true => b * b * c / a,\n   |\
    \                 ^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n11 |         true => (b * b * c\
    \ / a) as f64,\n   |                 +             ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    if a + c > b {\n        return -1;\n    }\n    if b + c > a {\n  \
    \      return -1;\n    }\n    \n    if a + b + c > 0 {\n        let s = (a * b\
    \ + c * a - b * c) / (a * a + b * b + c * c);\n        if s < 0 {\n          \
    \  return -1;\n        }\n        return s * 100.0;\n    }\n    \n    if a ==\
    \ 0 || b == 0 || c == 0 {\n        return 0;\n    }\n    \n    if a < b {\n  \
    \      return 0;\n    }\n    \n    if b < c {\n        return 0;\n    }\n    \n\
    \    if c < a {\n        return 0;\n    }\n    \n    -1\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqcq4bwgz.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmpqcq4bwgz.rs:25:18\n   |\n25 | \
    \        return s * 100.0;\n   |                  ^ no implementation for `isize\
    \ * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqcq4bwgz.rs:44:5\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n44 |     -1\n   |     ^^ expected `f64`, found integer\n \
    \  |\nhelp: use a float literal\n   |\n44 |     -1.0\n   |\nhelp: parentheses\
    \ are required to parse this as an expression\n   |\n40 ~     (if c < a {\n41\
    \ |         return 0;\n42 ~     })\n   |\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c || a + c > b || b + c\
    \ > a {\n        return -1.0;\n    }\n    let mut a = a * 0.5 as f64;\n    let\
    \ mut b = b * 0.5 as f64;\n    let mut c = c * 0.5 as f64;\n    if a + b > c ||\
    \ a + c > b || b + c > a {\n        return -1.0;\n    }\n    let mut s = (a +\
    \ b + c) * 0.5 as f64;\n    let mut area: f64 = 0.0;\n    if s > 0.0 {\n     \
    \   if s <= 1.0 {\n            area = s * s;\n        } else {\n            area\
    \ = 2.0 / 3.0 as f64 * s;\n        }\n    }\n    if area > 1.0 {\n        area\
    \ = 0.0;\n    }\n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `isize` by `f64`\n  --> /tmp/tmp5r09v5qb.rs:13:19\n\
    \   |\n13 |     let mut a = a * 0.5 as f64;\n   |                   ^ no implementation\
    \ for `isize * f64`\n   |\n   = help: the trait `Mul<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `f64`\n  --> /tmp/tmp5r09v5qb.rs:14:19\n\
    \   |\n14 |     let mut b = b * 0.5 as f64;\n   |                   ^ no implementation\
    \ for `isize * f64`\n   |\n   = help: the trait `Mul<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `f64`\n  --> /tmp/tmp5r09v5qb.rs:15:19\n\
    \   |\n15 |     let mut c = c * 0.5 as f64;\n   |                   ^ no implementation\
    \ for `isize * f64`\n   |\n   = help: the trait `Mul<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let s = (a+b+c).sqrt();\n    let mut\
    \ area = 0.0;\n    if s != 0 {\n        let area_ab = s/(a+b);\n        let area_bc\
    \ = s/(b+c);\n        let area_abc = s/(a+b+c);\n        let area_bca = s/(b+c-a);\n\
    \        let area_cab = s/(c+a-b);\n        let area_cba = s/(c+b-a);\n      \
    \  let area_cda = s/(c+a-b);\n        let area_cde = s/(c+b-a);\n        let area_cdae\
    \ = s/(c+a-b);\n        let area_cdee = s/(c+b-a);\n        let area_cdeeb = s/(c+b+a);\n\
    \        let area_cdeea = s/(c+a+b);\n        area = area_ab*area_ab*area_ab*area_ab\
    \ + area_bc*area_bc*area_bc*area_bc + area_abc*area_abc*area_abc*area_abc + area_bca*area_bca*area_bca*area_bca\
    \ + area_cab*area_cab*area_cab*area_cab + area_cba*area_cba*area_cba*area_cba\
    \ + area_cda*area_cda*area_cda*area_cda + area_cde*area_cde*area_cde*area_cde\
    \ + area_cdae*area_cdae*area_cdae*area_cda + area_cdee*area_cdee*area_cdee*area_cdee\
    \ + area_cdeeb*area_cdeeb*area_cdeeb*area_cdee + area_cdeea*area_cdeea*area_cdeea*area_cdeeb\n\
    \    }\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpmxsdn25q.rs:10:21\n   |\n10 |     let s = (a+b+c).sqrt();\n\
    \   |                     ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a <= 0 || b <= 0 || c <= 0 || a\
    \ + b + c <= 0 { \n        return -1.0;\n    }\n    \n    let area = a * b * c\n\
    \    if area < 0 {\n        return -1.0;\n    }\n    \n    let area = area.sqrt();\n\
    \    if area < 1.0e-9 {\n        return -1.0;\n    }\n    \n    area\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp1hpiew0d.rs:14:25\n\
    \   |\n14 |     let area = a * b * c\n   |                         ^ help: add\
    \ `;` here\n15 |     if area < 0 {\n   |     -- unexpected token\n\nerror[E0599]:\
    \ no method named `sqrt` found for type `isize` in the current scope\n  --> /tmp/tmp1hpiew0d.rs:19:21\n\
    \   |\n19 |     let area = area.sqrt();\n   |                     ^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        -1.\n    }\
    \ else {\n        a * b * c / 2.\n    }\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmptyulboef.rs:13:19\n\
    \   |\n13 |         a * b * c / 2.\n   |                   ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n  if a + b > c {\n    if a + c > b {\n\
    \      if b + c > a {\n        return ((a + c) - (b + c)) / (2.0 * a);\n     \
    \ }\n      else {\n        return ((b + c) - (a + c)) / (2.0 * b);\n      }\n\
    \    }\n    else {\n      if b + c > a {\n        return ((b + c) - (a + c)) /\
    \ (2.0 * b);\n      }\n      else {\n        return ((a + c) - (b + c)) / (2.0\
    \ * a);\n      }\n    }\n  }\n  else {\n    if a + c > b {\n      if a + b > c\
    \ {\n        if b + c > a {\n          return ((b + c) - (a + c)) / (2.0 * b);\n\
    \        }\n        else {\n          return ((a + c) - (b + c)) / (2.0 * a);\n\
    \        }\n      }\n      else {\n        return ((b + c) - (a + c)) / (2.0 *\
    \ b);\n      }\n    }\n    else {\n      if a + b > c {\n        if b + c > a\
    \ {\n          return ((b + c) - (a + c)) / (2.0 * b);\n        }\n        else\
    \ {\n          return ((a + c) - (b + c)) / (2.0 * a);\n        }\n      }\n \
    \     else {\n        return ((b + c) - (a + c)) / (2.0 * b);\n      }\n    }\n\
    \  }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmp459v33qx.rs:13:43\n\
    \   |\n13 |         return ((a + c) - (b + c)) / (2.0 * a);\n   |            \
    \                               ^ no implementation for `{float} * isize`\n  \
    \ |\n   = help: the trait `Mul<isize>` is not implemented for `{float}`\n   =\
    \ help: the following other types implement trait `Mul<Rhs>`:\n             <&'a\
    \ f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128\
    \ as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as\
    \ Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `{float}` by `isize`\n  --> /tmp/tmp459v33qx.rs:16:43\n   |\n\
    16 |         return ((b + c) - (a + c)) / (2.0 * b);\n   |                   \
    \                        ^ no implementation for `{float} * isize`\n   |\n   =\
    \ help: the trait `Mul<isize>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `Mul<Rhs>`:\n             <&'a f32 as\
    \ Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n\
    \             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n    \
    \         <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n          \
    \   <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot\
    \ multiply `{float}` by `isize`\n  --> /tmp/tmp459v33qx.rs:21:43\n   |\n21 | \
    \        return ((b + c) - (a + c)) / (2.0 * b);\n   |                       \
    \                    ^ no implementation for `{float} * isize`\n   |\n   = help:\
    \ the trait `Mul<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: can"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut a = a - b as isize;\n    let\
    \ mut b = b - c as isize;\n    let mut c = c - a as isize;\n    if a > b {\n \
    \       if b > c {\n            // We need to swap a and c\n            let tmp\
    \ = c;\n            c = b;\n            b = tmp;\n        }\n        let tmp =\
    \ b;\n        b = a;\n        a = tmp;\n    }\n    let mut a = a - b as isize;\n\
    \    let mut b = b - c as isize;\n    let mut c = c - a as isize;\n    if a >\
    \ b {\n        if b > c {\n            // We need to swap a and c\n          \
    \  let tmp = c;\n            c = b;\n            b = tmp;\n        }\n       \
    \ let tmp = b;\n        b = a;\n        a = tmp;\n    }\n    if a == 0 || b ==\
    \ 0 || c == 0 {\n        return -1.0;\n    }\n    let area_one = (a * a + b *\
    \ b) * (c / 2.0);\n    let area_two = (a * a + c * c) * (b / 2.0);\n    let area_three\
    \ = (b * b + c * c) * (a / 2.0);\n    area_one + area_two + area_three\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp0ud1c083.rs:41:41\n\
    \   |\n41 |     let area_one = (a * a + b * b) * (c / 2.0);\n   |            \
    \                             ^ no implementation for `isize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmp0ud1c083.rs:42:41\n   |\n42 |   \
    \  let area_two = (a * a + c * c) * (b / 2.0);\n   |                         \
    \                ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmp0ud1c083.rs:43:43\n   |\n43 |   \
    \  let area_three = (b * b + c * c) * (a / 2.0);\n   |                       \
    \                    ^ no implementation for `isize / {float}`\n   |\n   = help:\
    \ the trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 3 "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        0.0 - triangle_area(b,\
    \ a, c)\n    } else if a + c > b {\n        0.0 - triangle_area(a, c, b)\n   \
    \ } else {\n        0.5 * (triangle_area(a, b, c) + triangle_area(b, a, c))\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    let mut ac = a + c;\n    let mut bc\
    \ = b + c;\n    let mut ab = a + b;\n    let mut bp = b + c;\n\n    while ac >\
    \ bc && ac > ab && bc > bp {\n        ac -= bc;\n        bc += a;\n        ab\
    \ += b;\n        bp += c;\n    }\n\n    let mut am = a + m;\n    let mut bm =\
    \ b + m;\n    let mut bn = b + n;\n    let mut an = a + n;\n\n    while am < bm\
    \ && am < an && bm < bn && bm < an {\n        am += a;\n        bm += b;\n   \
    \     bn += c;\n        an += d;\n    }\n\n    if ac > bc && ac > ab && bc > bp\
    \ && am < an && am < bn && bm > bn {\n        ac - bc\n    } else {\n        -1\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `m` in this scope\n  --> /tmp/tmpolo48qwj.rs:22:22\n\
    \   |\n22 |     let mut am = a + m;\n   |                      ^ help: a local\
    \ variable with a similar name exists: `a`\n\nerror[E0425]: cannot find value\
    \ `m` in this scope\n  --> /tmp/tmpolo48qwj.rs:23:22\n   |\n23 |     let mut bm\
    \ = b + m;\n   |                      ^ help: a local variable with a similar\
    \ name exists: `a`\n\nerror[E0425]: cannot find value `n` in this scope\n  -->\
    \ /tmp/tmpolo48qwj.rs:24:22\n   |\n24 |     let mut bn = b + n;\n   |        \
    \              ^ help: a local variable with a similar name exists: `a`\n\nerror[E0425]:\
    \ cannot find value `n` in this scope\n  --> /tmp/tmpolo48qwj.rs:25:22\n   |\n\
    25 |     let mut an = a + n;\n   |                      ^ help: a local variable\
    \ with a similar name exists: `a`\n\nerror[E0425]: cannot find value `d` in this\
    \ scope\n  --> /tmp/tmpolo48qwj.rs:31:15\n   |\n31 |         an += d;\n   |  \
    \             ^ help: a local variable with a similar name exists: `a`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpolo48qwj.rs:35:9\n   |\n9  | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n35 |       \
    \  ac - bc\n   |         ^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n35 |         (ac - bc) as f64\n\
    \   |         +       ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpolo48qwj.rs:37:9\n\
    \   |\n9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n37 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n    if a + b > c {\n        return -1;\n\
    \    }\n    let s = b * b - 4 * a * c;\n    if s == 0 {\n        return 0;\n \
    \   }\n    s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n   \
    \ assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvnc2inhx.rs:11:16\n   |\n\
    9  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n10 |     if a + b > c {\n11 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpvnc2inhx.rs:17:7\n   |\n17 |    \
    \ s / 2.0\n   |       ^ no implementation for `isize / {float}`\n   |\n   = help:\
    \ the trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
