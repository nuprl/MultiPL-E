name: HumanEval_155_even_odd_count
language: rust
results:
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = num;\n    let mut odd = num;\n    for &i in num.chars()\
    \ {\n        if i % 2 == 0 {\n            even += 1;\n        } else {\n     \
    \       odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `chars` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp8lkcnhvn.rs:8:19\n  |\n8 |     for &i in num.chars() {\n\
    \  |                   ^^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n\n    let mut n = num;\n   \
    \ while n > 0 {\n        if n % 2 == 0 {\n            even += 1;\n           \
    \ n /= 2;\n        } else {\n            odd += 1;\n            n /= 2;\n    \
    \    }\n    }\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 3)`,\n right: `(0, 1)`', /tmp/tmpkezethn3.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd_digits = 0;\n    let mut even_digits = 0;\n    while num\
    \ > 0 {\n        if num % 2 == 0 {\n            even_digits += 1;\n        }\n\
    \        odd_digits += 1;\n        num = (num / 2).saturating_add(1);\n    }\n\
    \    (even_digits, odd_digits)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpf2oyyyj9.rs:13:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n13 |\
    \         num = (num / 2).saturating_add(1);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd = 1;\n    let mut even = 0;\n\n    for &n in num.to_str_radix(10).chars().take(64)\
    \ {\n        if n.is_odd()\n            || (n.is_even() && even == 0)\n      \
    \      || (n.is_even() && even == odd)\n        {\n            odd += 1;\n   \
    \     } else {\n            even += 1;\n        }\n    }\n\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_str_radix` found for type `isize` in\
    \ the current scope\n --> /tmp/tmpf5rozwkk.rs:9:19\n  |\n9 |     for &n in num.to_str_radix(10).chars().take(64)\
    \ {\n  |                   ^^^^^^^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    fn is_even(n: isize) -> bool {\n        (n % 2) == 0\n    }\n    fn is_odd(n:\
    \ isize) -> bool {\n        (n % 2) == 1\n    }\n    let mut even = 0usize;\n\
    \    let mut odd = 0usize;\n    let mut digits = num.to_digits();\n    for digit\
    \ in digits {\n        if is_even(digit) {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp7paanc5z.rs:14:26\n   |\n14 |     let mut digits\
    \ = num.to_digits();\n   |                          ^^^^^^^^^ method not found\
    \ in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7paanc5z.rs:22:6\n\
    \   |\n22 |     (even, odd)\n   |      ^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n22 |     (even.try_into().unwrap(), odd)\n   |    \
    \      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7paanc5z.rs:22:12\n\
    \   |\n22 |     (even, odd)\n   |            ^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n22 |     (even, odd.try_into().unwrap())\n   |    \
    \           ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num % 2, num / 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 3)`,\n right: `(0, 1)`', /tmp/tmpcfdsnul9.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = num;\n    let mut odd = num;\n    while even % 2 == 0\
    \ {\n        even /= 2;\n        odd++;\n    }\n    while odd % 2 == 0 {\n   \
    \     odd /= 2;\n        even++;\n    }\n    (even, odd)\n}\n\nfn main() {\n \
    \   let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n \
    \   assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpchpssd6w.rs:10:12\n\
    \   |\n10 |         odd++;\n   |            ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n10 |         { let tmp = odd; odd += 1;\
    \ tmp };\n   |         +++++++++++    ~~~~~~~~~~~~~~~~~\n10 -         odd++;\n\
    10 +         odd += 1;\n   | \n\nerror: Rust has no postfix increment operator\n\
    \  --> /tmp/tmpchpssd6w.rs:14:13\n   |\n14 |         even++;\n   |           \
    \  ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n14 |\
    \         { let tmp = even; even += 1; tmp };\n   |         +++++++++++     ~~~~~~~~~~~~~~~~~~\n\
    14 -         even++;\n14 +         even += 1;\n   | \n\nerror: aborting due to\
    \ 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n\n    while num > 0 {\n    \
    \    match num % 2 {\n            1 => even += 1,\n            0 => odd += 1,\n\
    \        }\n        num = num / 2;\n    }\n\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0004]: non-exhaustive patterns: `_` not covered\n  --> /tmp/tmpwyzp4prv.rs:10:15\n\
    \   |\n10 |         match num % 2 {\n   |               ^^^^^^^ pattern `_` not\
    \ covered\n   |\n   = note: the matched value is of type `isize`\n   = note: `isize`\
    \ does not have a fixed maximum value, so a wildcard `_` is necessary to match\
    \ exhaustively\nhelp: ensure that all possible cases are being handled by adding\
    \ a match arm with a wildcard pattern or an explicit pattern as shown\n   |\n\
    12 ~             0 => odd += 1,\n13 ~             _ => todo!(),\n   |\n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmpwyzp4prv.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0004, E0384.\nFor more information about an error, try `rustc\
    \ --explain E0004`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        panic!(\"even_odd_count requires a non-negative\
    \ integer\");\n    }\n    let mut num_even: usize = 0;\n    let mut num_odd: usize\
    \ = 0;\n    for digit in num.clone() {\n        if digit % 2 == 0 {\n        \
    \    num_even += 1;\n        } else {\n            num_odd += 1;\n        }\n\
    \    }\n    (num_even, num_odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `isize` is not an iterator\n  --> /tmp/tmp4ip0ugkh.rs:11:18\n\
    \   |\n11 |     for digit in num.clone() {\n   |                  ^^^^^^^^^^^\
    \ `isize` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `isize`\n   = note: if you want to iterate between `start` until a value\
    \ `end`, use the exclusive range syntax `start..end` or the inclusive range syntax\
    \ `start..=end`\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4ip0ugkh.rs:18:6\n\
    \   |\n18 |     (num_even, num_odd)\n   |      ^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n18 |     (num_even.try_into().unwrap(), num_odd)\n\
    \   |              ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp4ip0ugkh.rs:18:16\n   |\n18 |     (num_even, num_odd)\n   |        \
    \        ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    18 |     (num_even, num_odd.try_into().unwrap())\n   |                       ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        (num as isize, num / 2)\n    } else {\n       \
    \ (num % 2 != 0, num % 2)\n    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpip0wlag3.rs:9:10\n  |\n9 |\
    \         (num % 2 != 0, num % 2)\n  |          ^^^^^^^^^^^^ expected `isize`,\
    \ found `bool`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num == 0 {\n        return (0, 0);\n    }\n    let mut num_even =\
    \ 0;\n    let mut num_odd = 0;\n    for i in (0..num).rev() {\n        let num:\
    \ isize = num % 10;\n        if num % 2 == 0 {\n            num_even += 1;\n \
    \       } else {\n            num_odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (num_even, num_odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `i`\n  --> /tmp/tmpgnifai7c.rs:11:9\n   |\n11\
    \ |     for i in (0..num).rev() {\n   |         ^ help: if this is intentional,\
    \ prefix it with an underscore: `_i`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: value assigned to `num` is never read\n  --> /tmp/tmpgnifai7c.rs:18:9\n\
    \   |\n18 |         num = num / 10;\n   |         ^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign twice to immutable variable `num`\n  --> /tmp/tmpgnifai7c.rs:18:9\n\
    \   |\n12 |         let num: isize = num % 10;\n   |             ---\n   |   \
    \          |\n   |             first assignment to `num`\n   |             help:\
    \ consider making this binding mutable: `mut num`\n...\n18 |         num = num\
    \ / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\
    \nerror: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut sum = 0;\n    let mut i = 0;\n\n    while num > 0 {\n       \
    \ sum += num % 10;\n        num = num / 10;\n        i += 1;\n    }\n\n    if\
    \ i == 0 {\n        return (1, 0);\n    }\n\n    let mut odd_count = 0;\n    let\
    \ mut even_count = 0;\n    while sum > 0 {\n        let num = sum % 10;\n    \
    \    sum += num / 10;\n        even_count += 1;\n        if num % 2 == 0 {\n \
    \           odd_count += 1;\n        }\n    }\n\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpmuep1wcj.rs:11:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = num;\n    let mut odd = num;\n    while even % 2 == 0\
    \ {\n        even /= 2;\n        even += 1;\n    }\n    while odd % 2 == 0 {\n\
    \        odd /= 2;\n        odd += 1;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 7)`,\n right: `(0, 1)`', /tmp/tmpha897fhg.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num % 2, num / 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 3)`,\n right: `(0, 1)`', /tmp/tmpa07cn5rs.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        (even_odd_count(-num) as u32, even_odd_count(-num\
    \ + 1) as u32)\n    } else {\n        (\n            even_odd_count(num as u32),\n\
    \            even_odd_count(num as u32 + 1).min(num as u32),\n        )\n    }\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz8px7vpv.rs:7:10\n  |\n7 |\
    \         (even_odd_count(-num) as u32, even_odd_count(-num + 1) as u32)\n  |\
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `u32`\n  |\nhelp:\
    \ you can convert a `u32` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |         ((even_odd_count(-num) as u32).try_into().unwrap(), even_odd_count(-num\
    \ + 1) as u32)\n  |          +                           +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpz8px7vpv.rs:7:39\n  |\n7 |    \
    \     (even_odd_count(-num) as u32, even_odd_count(-num + 1) as u32)\n  |    \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `u32`\n  |\nhelp: you can convert a `u32` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n7 |         (even_odd_count(-num) as u32,\
    \ (even_odd_count(-num + 1) as u32).try_into().unwrap())\n  |                \
    \                       +                               +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpz8px7vpv.rs:10:28\n   |\n10 |\
    \             even_odd_count(num as u32),\n   |                            ^^^^^^^^^^\
    \ expected `isize`, found `u32`\n   |\nhelp: you can convert a `u32` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |             even_odd_count((num\
    \ as u32).try_into().unwrap()),\n   |                            +          +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpz8px7vpv.rs:10:13\n   |\n10 |\
    \             even_odd_count(num as u32),\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n    \
    \         found tuple `(isize, isize)`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpz8px7vpv.rs:11:28\n   |\n11 |             even_odd_count(num as u32\
    \ + 1).min(num as u32),\n   |                            ^^^^^^^^^^^^^^ expected\
    \ `isize`, found `u32`\n   |\nhelp: you can convert a `u32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n11 |             even_odd_count((num\
    \ as u32 + 1)."
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num % 2 == 0, num % 2 != 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4ropitho.rs:6:6\n  |\n6 |\
    \     (num % 2 == 0, num % 2 != 0)\n  |      ^^^^^^^^^^^^ expected `isize`, found\
    \ `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4ropitho.rs:6:20\n  |\n\
    6 |     (num % 2 == 0, num % 2 != 0)\n  |                    ^^^^^^^^^^^^ expected\
    \ `isize`, found `bool`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n\n    let mut n\
    \ = num;\n    while n != 0 {\n        let digit = n % 10;\n        if digit %\
    \ 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count\
    \ += 1;\n        }\n        n /= 10;\n    }\n    (even_count, odd_count)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpdio0vggx.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0isize;\n    let mut odd = 0isize;\n    let mut i = num;\n\
    \    while i >= 10 {\n        i += 1;\n        if i % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpmg0kxk7o.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (\n        std::mem::size_of::<isize>() as usize * num\n            .checked_div(2).unwrap()\n\
    \            .checked_div(2).unwrap(),\n        num.checked_div(2).unwrap(),\n\
    \    )\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy53n39ay.rs:7:49\n  |\n7 |\
    \           std::mem::size_of::<isize>() as usize * num\n  |  _________________________________________________^\n\
    8 | |             .checked_div(2).unwrap()\n9 | |             .checked_div(2).unwrap(),\n\
    \  | |____________________________________^ expected `usize`, found `isize`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpy53n39ay.rs:7:9\n  |\n7 | /     \
    \    std::mem::size_of::<isize>() as usize * num\n8 | |             .checked_div(2).unwrap()\n\
    9 | |             .checked_div(2).unwrap(),\n  | |____________________________________^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 ~         (std::mem::size_of::<isize>()\
    \ as usize * num\n8 |             .checked_div(2).unwrap()\n9 ~             .checked_div(2).unwrap()).try_into().unwrap(),\n\
    \  |\n\nerror[E0277]: cannot multiply `usize` by `isize`\n --> /tmp/tmpy53n39ay.rs:7:47\n\
    \  |\n7 |         std::mem::size_of::<isize>() as usize * num\n  |           \
    \                                    ^ no implementation for `usize * isize`\n\
    \  |\n  = help: the trait `Mul<isize>` is not implemented for `usize`\n  = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n            <&'a f32\
    \ as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n            <&'a i128 as Mul<i128>>\n\
    \            <&'a i16 as Mul<i16>>\n            <&'a i32 as Mul<i32>>\n      \
    \      <&'a i64 as Mul<i64>>\n            <&'a i8 as Mul<i8>>\n            <&'a\
    \ isize as Mul<isize>>\n          and 49 others\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        (even_odd_count(-num.0), even_odd_count(-num.0\
    \ % isize))\n    } else {\n        (even_odd_count(num), even_odd_count(num %\
    \ isize))\n    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0423]: expected value, found builtin type `isize`\n --> /tmp/tmpkeah_f6x.rs:7:58\n\
    \  |\n7 |         (even_odd_count(-num.0), even_odd_count(-num.0 % isize))\n \
    \ |                                                          ^^^^^ not a value\n\
    \nerror[E0423]: expected value, found builtin type `isize`\n --> /tmp/tmpkeah_f6x.rs:9:52\n\
    \  |\n9 |         (even_odd_count(num), even_odd_count(num % isize))\n  |    \
    \                                                ^^^^^ not a value\n\nerror[E0610]:\
    \ `isize` is a primitive type and therefore doesn't have fields\n --> /tmp/tmpkeah_f6x.rs:7:30\n\
    \  |\n7 |         (even_odd_count(-num.0), even_odd_count(-num.0 % isize))\n \
    \ |                              ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpkeah_f6x.rs:7:10\n\
    \  |\n7 |         (even_odd_count(-num.0), even_odd_count(-num.0 % isize))\n \
    \ |          ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n  |\n  = note:\
    \ expected type `isize`\n            found tuple `(isize, isize)`\n\nerror[E0610]:\
    \ `isize` is a primitive type and therefore doesn't have fields\n --> /tmp/tmpkeah_f6x.rs:7:54\n\
    \  |\n7 |         (even_odd_count(-num.0), even_odd_count(-num.0 % isize))\n \
    \ |                                                      ^\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpkeah_f6x.rs:7:34\n  |\n7 |         (even_odd_count(-num.0),\
    \ even_odd_count(-num.0 % isize))\n  |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected type `isize`\n      \
    \      found tuple `(isize, isize)`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpkeah_f6x.rs:9:10\n\
    \  |\n9 |         (even_odd_count(num), even_odd_count(num % isize))\n  |    \
    \      ^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n  |\n  = note: expected\
    \ type `isize`\n            found tuple `(isize, isize)`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpkeah_f6x.rs:9:31\n  |\n9 |         (even_odd_count(num),\
    \ even_odd_count(num % isize))\n  |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected type `isize`\n      \
    \      f"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut counts = vec![];\n    let mut num = num;\n    let mut digit =\
    \ 0;\n    while num > 0 {\n        let mut x = num % 10;\n        counts.push(x\
    \ % 2);\n        num = x / 10;\n        digit += x;\n    }\n    counts.insert(0,\
    \ digit);\n    (counts[0], counts[1] + 1)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 2)`,\n right: `(0, 1)`', /tmp/tmpj3jomlap.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut n = num;\n    let mut even = 0;\n    let mut odd = 0;\n\n   \
    \ while n > 0 {\n        if n % 2 == 0 {\n            even += 1;\n           \
    \ n /= 2;\n        } else {\n            odd += 1;\n            n /= 2;\n    \
    \    }\n    }\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 3)`,\n right: `(0, 1)`', /tmp/tmpqmz0bghh.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        panic!(\"even_odd_count requires num > 0\")\n \
    \   }\n\n    let mut even_count = 0\n    let mut odd_count = 0\n    let mut remainder\
    \ = num;\n\n    while remainder > 0 {\n        let mut temp = remainder % 10;\n\
    \        remainder = remainder / 10;\n\n        // Even\n        if temp == 0\
    \ {\n            even_count += 1;\n        }\n\n        // Odd\n        if temp\
    \ != 0 {\n            odd_count += 1;\n        }\n    }\n\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpllh0dxcq.rs:10:27\n\
    \   |\n10 |     let mut even_count = 0\n   |                           ^ help:\
    \ add `;` here\n11 |     let mut odd_count = 0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpllh0dxcq.rs:11:26\n\
    \   |\n11 |     let mut odd_count = 0\n   |                          ^ help: add\
    \ `;` here\n12 |     let mut remainder = num;\n   |     --- unexpected token\n\
    \nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd = 1;\n    let mut even = num;\n    while even > 0 {\n   \
    \     if even % 2 == 1 {\n            odd += 1;\n        }\n        even /= 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 4)`,\n right: `(0, 1)`', /tmp/tmpfgid8f0w.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num_digits = num;\n    let mut evens = 0;\n    let mut odds =\
    \ 0;\n    while num_digits > 0 {\n        if num_digits & 1 == 0 {\n         \
    \   evens += 1;\n        }\n        num_digits /= 2;\n    }\n    while num_digits\
    \ > 0 {\n        if num_digits & 1 == 1 {\n            odds += 1;\n        }\n\
    \        num_digits /= 2;\n    }\n    (evens, odds)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmp28zr3ovu.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0, odd = 0;\n\n    for &n in num.iter().take(2) {\n  \
    \      even += n;\n    }\n\n    for &n in num.iter().skip(1).take(2) {\n     \
    \   odd += n;\n    }\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate =\
    \ even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmpqqfqt4co.rs:6:21\n  |\n6 |     let mut even = 0, odd = 0;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut count = 0;\n    let mut even_count = 0;\n    let mut odd_count\
    \ = 0;\n\n    for i in num.iter() {\n        if i % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n\n \
    \   (even_count, odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp1lwonaul.rs:10:18\n   |\n10 |     for i in num.iter() {\n\
    \   |                  ^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let even = num / 2;\n    let odd = num - even;\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 4)`,\n right: `(0, 1)`', /tmp/tmprso6is9q.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut n = 0;\n    let mut even = 0;\n    let mut odd = 1;\n\n    while\
    \ num > 0 {\n        n += 1;\n        num = num % 10;\n        if num % 2 == 0\
    \ {\n            even += 1;\n        } else {\n            odd += 1;\n       \
    \ }\n    }\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: variable `n` is assigned to, but never used\n --> /tmp/tmpdszw31vz.rs:6:13\n\
    \  |\n6 |     let mut n = 0;\n  |             ^\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n  = note: consider using `_n` instead\n\nerror[E0384]: cannot\
    \ assign to immutable argument `num`\n  --> /tmp/tmpdszw31vz.rs:12:9\n   |\n5\
    \  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                 \
    \  --- help: consider making this binding mutable: `mut num`\n...\n12 |      \
    \   num = num % 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0, odd = 0;\n    for i in 1..num {\n        if num % 2\
    \ == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n  \
    \      }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmpmhoitdzp.rs:6:21\n  |\n6 |     let mut even = 0, odd = 0;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even: isize = 0;\n    let mut odd: isize = 0;\n    for &n in\
    \ num.digits().clone() {\n        match n % 10 {\n            0 => { even += 1\
    \ },\n            1 => { odd += 1 },\n            _ => (),\n        }\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpsqgyqf68.rs:8:19\n  |\n8 |     for &n in num.digits().clone()\
    \ {\n  |                   ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num / 2, num % 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 1)`,\n right: `(0, 1)`', /tmp/tmp1pk0cf18.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut value = num as i32;\n\
    \    while value > 0 {\n        if value % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        value /= 2;\n   \
    \ }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 3)`,\n right: `(0, 1)`', /tmp/tmpcfohxfsb.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let even = num & num - 1;\n    let odd = (num >> 1) & num;\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(6, 3)`,\n right: `(0, 1)`', /tmp/tmppkwp6ehe.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut sum = 0;\n    let mut even = 0;\n    let mut odd = 0;\n    while\
    \ num > 0 {\n        sum += num % 10;\n        num /= 10;\n    }\n    if sum %\
    \ 2 == 0 {\n        even = sum;\n    } else {\n        odd = sum;\n    }\n   \
    \ (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8vulucb6.rs:11:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        (num / 2, num % 2)\n    } else {\n        (num\
    \ / 2, num % 2 + 1)\n    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 2)`,\n right: `(0, 1)`', /tmp/tmpx98jh0cp.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        return (0, 1);\n    }\n\n    let mut count = 0;\n\
    \    let mut odd = 0;\n\n    while num >= 10 {\n        if num % 10 == 0 {\n \
    \           count += 1;\n        } else {\n            odd += 1;\n        }\n\
    \        num = num / 10;\n    }\n\n    (count, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpeba4rdui.rs:19:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n19 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut count_even = 0, count_odd = 0;\n    loop {\n        let tmp =\
    \ num % 10;\n        if tmp == 0 {\n            break;\n        }\n        count_even\
    \ += 1;\n        count_odd += 1;\n        num /= 10;\n    }\n    (count_even,\
    \ count_odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmptedfppji.rs:6:27\n  |\n6 |     let mut count_even = 0, count_odd\
    \ = 0;\n  |                           ^ expected one of `.`, `;`, `?`, `else`,\
    \ or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut count = 0;\n    let mut last_odd_digit = 0;\n    while num >\
    \ 0 {\n        if num % 2 == 0 {\n            count += 1;\n        } else {\n\
    \            last_odd_digit += 1;\n        }\n        num /= 10;\n    }\n    (count,\
    \ last_odd_digit)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n   \
    \ assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpu0hwm7zs.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut count = 0;\n    let mut digits = num;\n    while digits.is_positive()\
    \ {\n        count = digits::mod(2) + 1;\n        digits = digits / 10;\n    }\n\
    \    (count, digits)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found keyword `mod`\n --> /tmp/tmpfdfzpe3l.rs:9:25\n\
    \  |\n9 |         count = digits::mod(2) + 1;\n  |                         ^^^\
    \ expected identifier, found keyword\n  |\nhelp: escape `mod` to use it as an\
    \ identifier\n  |\n9 |         count = digits::r#mod(2) + 1;\n  |            \
    \             ++\n\nerror[E0433]: failed to resolve: use of undeclared crate or\
    \ module `digits`\n --> /tmp/tmpfdfzpe3l.rs:9:17\n  |\n9 |         count = digits::mod(2)\
    \ + 1;\n  |                 ^^^^^^ use of undeclared crate or module `digits`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut n = 0;\n    let mut odd_count = 0;\n    let mut even_count =\
    \ 0;\n    for n in &num {\n        if n % 2 == 0 {\n            even_count +=\
    \ 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n    (even_count,\
    \ odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `&isize` is not an iterator\n --> /tmp/tmpx8mzz8hk.rs:9:14\n\
    \  |\n9 |     for n in &num {\n  |              ^^^^ `&isize` is not an iterator\n\
    \  |\n  = help: the trait `Iterator` is not implemented for `&isize`\n  = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `&isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    // Return even number count for even digits in num.\n    // Return odd\
    \ number count for odd digits in num.\n    // Return 0 for the digit 0.\n    let\
    \ mut count = (0, 1)\n    if num < 0 {\n        return (0, 1);\n    }\n    for\
    \ i in 0..num {\n        if num % i == 0 {\n            count += (num / i as isize)\
    \ / 2;\n            count += 1;\n        }\n    }\n    (count[0], count[1])\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpz1rkzr9q.rs:9:27\n\
    \   |\n9  |     let mut count = (0, 1)\n   |                           ^ help:\
    \ add `;` here\n10 |     if num < 0 {\n   |     -- unexpected token\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `({integer}, {integer})`\n\
    \  --> /tmp/tmpz1rkzr9q.rs:15:13\n   |\n15 |             count += (num / i as\
    \ isize) / 2;\n   |             -----^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |        \
    \     |\n   |             cannot use `+=` on type `({integer}, {integer})`\n\n\
    error[E0368]: binary assignment operation `+=` cannot be applied to type `({integer},\
    \ {integer})`\n  --> /tmp/tmpz1rkzr9q.rs:16:13\n   |\n16 |             count +=\
    \ 1;\n   |             -----^^^^^\n   |             |\n   |             cannot\
    \ use `+=` on type `({integer}, {integer})`\n\nerror[E0608]: cannot index into\
    \ a value of type `({integer}, {integer})`\n  --> /tmp/tmpz1rkzr9q.rs:19:6\n \
    \  |\n19 |     (count[0], count[1])\n   |      ^^^^^^^^ help: to access tuple\
    \ elements, use: `count.0`\n\nerror[E0608]: cannot index into a value of type\
    \ `({integer}, {integer})`\n  --> /tmp/tmpz1rkzr9q.rs:19:16\n   |\n19 |     (count[0],\
    \ count[1])\n   |                ^^^^^^^^ help: to access tuple elements, use:\
    \ `count.1`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0368, E0608.\nFor more information about an error, try `rustc\
    \ --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num % 2 == 0, num / 2 % 2 == 0)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc75l4r_u.rs:6:6\n  |\n6 |\
    \     (num % 2 == 0, num / 2 % 2 == 0)\n  |      ^^^^^^^^^^^^ expected `isize`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpc75l4r_u.rs:6:20\n\
    \  |\n6 |     (num % 2 == 0, num / 2 % 2 == 0)\n  |                    ^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `bool`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num / 2, num % 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 1)`,\n right: `(0, 1)`', /tmp/tmpmr06v3vn.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        (num, 0)\n    } else {\n        let mut c = 0isize;\n\
    \        let mut n = 0isize;\n        let mut digits = num % 10;\n        while\
    \ digits != 0 {\n            if digits % 2 == 0 {\n                c += 1;\n \
    \           }\n            digits /= 10;\n            n += 1;\n        }\n   \
    \     (c + n, c)\n    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 0)`,\n right: `(0, 1)`', /tmp/tmpr9n933a7.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit_count = 0;\n\
    \n    for digit in num.digits() {\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n\n        digit_count\
    \ += 1;\n    }\n\n    (even, odd, digit_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp_52hvh4b.rs:10:22\n   |\n10 |     for digit in num.digits()\
    \ {\n   |                      ^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_52hvh4b.rs:20:5\n   |\n5  | fn even_odd_count(num:\
    \ isize) -> (isize, isize) {\n   |                                  --------------\
    \ expected `(isize, isize)` because of return type\n...\n20 |     (even, odd,\
    \ digit_count)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected a tuple with 2 elements,\
    \ found one with 3 elements\n   |\n   = note: expected tuple `(isize, isize)`\n\
    \              found tuple `(isize, isize, {integer})`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 1;\n    let mut i = 0;\n    while\
    \ i < num {\n        i += 1;\n        if num % i == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(2, 6)`,\n right: `(0, 1)`', /tmp/tmpyxpy9ga3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut counter = 0;\n    let mut evens = 1;\n    let mut odds = 1;\n\
    \n    while counter < 10 {\n        let mut current_digit = num / 10;\n      \
    \  counter += 1;\n        if current_digit % 2 == 0 {\n            evens += 1;\n\
    \        } else {\n            odds += 1;\n        }\n        current_digit /=\
    \ 10;\n    }\n\n    (evens, odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(11, 1)`,\n right: `(0, 1)`', /tmp/tmpxdu78k6k.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        panic!(\"Cannot count even and odd digits of a\
    \ negative number\")\n    }\n\n    let mut count = 0;\n    let mut odd = false;\n\
    \    loop {\n        if num % 10 == 0 {\n            count++;\n        }\n   \
    \     if odd {\n            if num % 10 == 0 {\n                count++;\n   \
    \             break;\n            } else {\n                odd = false;\n   \
    \         }\n        } else {\n            if num % 10 != 0 {\n              \
    \  count++;\n                break;\n            }\n        }\n        num *=\
    \ 10;\n    }\n    (count, count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp9ri9syad.rs:14:18\n\
    \   |\n14 |             count++;\n   |                  ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n14 |             { let tmp =\
    \ count; count += 1; tmp };\n   |             +++++++++++      ~~~~~~~~~~~~~~~~~~~\n\
    14 -             count++;\n14 +             count += 1;\n   | \n\nerror: Rust\
    \ has no postfix increment operator\n  --> /tmp/tmp9ri9syad.rs:18:22\n   |\n18\
    \ |                 count++;\n   |                      ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n18 |                 { let tmp\
    \ = count; count += 1; tmp };\n   |                 +++++++++++      ~~~~~~~~~~~~~~~~~~~\n\
    18 -                 count++;\n18 +                 count += 1;\n   | \n\nerror:\
    \ Rust has no postfix increment operator\n  --> /tmp/tmp9ri9syad.rs:25:22\n  \
    \ |\n25 |                 count++;\n   |                      ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n25 |                 { let tmp\
    \ = count; count += 1; tmp };\n   |                 +++++++++++      ~~~~~~~~~~~~~~~~~~~\n\
    25 -                 count++;\n25 +                 count += 1;\n   | \n\nwarning:\
    \ unreachable expression\n  --> /tmp/tmp9ri9syad.rs:31:5\n   |\n12 | /     loop\
    \ {\n13 | |         if num % 10 == 0 {\n14 | |             count++;\n15 | |  \
    \       }\n...  |\n29 | |         num *= 10;\n30 | |     }\n   | |_____- any code\
    \ following this expression is unreachable\n31 |       (count, count)\n   |  \
    \     ^^^^^^^^^^^^^^ unreachable expression\n   |\n   = note: `#[warn(unreachable_code)]`\
    \ on by default\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let num = num;\n    let mut odd_count = 0;\n    let mut even_count =\
    \ 0;\n    for i in 0..num {\n        if num % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ = num / 2;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `i`\n --> /tmp/tmpv58hjbrg.rs:9:9\n  |\n9 | \
    \    for i in 0..num {\n  |         ^ help: if this is intentional, prefix it\
    \ with an underscore: `_i`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\
    \nerror[E0384]: cannot assign twice to immutable variable `num`\n  --> /tmp/tmpv58hjbrg.rs:15:9\n\
    \   |\n6  |     let num = num;\n   |         ---\n   |         |\n   |       \
    \  first assignment to `num`\n   |         help: consider making this binding\
    \ mutable: `mut num`\n...\n15 |         num = num / 2;\n   |         ^^^^^^^^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = num / 10;\n    let mut odd = num % 10;\n    if even %\
    \ 2 == 0 {\n        even = even / 2;\n    }\n    if odd % 2 == 1 {\n        odd\
    \ = odd / 2;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 3)`,\n right: `(0, 1)`', /tmp/tmpq5xxnsa8.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    // Evens\n    let evens = num.trailing_zeros();\n\n    // Odds\n    let\
    \ odds = num.iter().filter(|x| x % 2 != 0).count();\n\n    (evens, odds)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp2sybbprj.rs:10:20\n   |\n10 |     let odds = num.iter().filter(|x|\
    \ x % 2 != 0).count();\n   |                    ^^^^ method not found in `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2sybbprj.rs:12:6\n   |\n12 | \
    \    (evens, odds)\n   |      ^^^^^ expected `isize`, found `u32`\n   |\nhelp:\
    \ you can convert a `u32` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |     (evens.try_into().unwrap(), odds)\n   |           ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num, num / 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 3)`,\n right: `(0, 1)`', /tmp/tmp0uabv7r7.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    debug_assert!(num <= 10i16);\n    let mut even = num.count_digits(|x|\
    \ x % 2 == 0);\n    let mut odd = num.count_digits(|x| x % 2 != 0);\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm88xbf9u.rs:6:26\n  |\n6 |\
    \     debug_assert!(num <= 10i16);\n  |                          ^^^^^ expected\
    \ `isize`, found `i16`\n  |\nhelp: change the type of the numeric literal from\
    \ `i16` to `isize`\n  |\n6 |     debug_assert!(num <= 10isize);\n  |         \
    \                   ~~~~~\n\nerror[E0599]: no method named `count_digits` found\
    \ for type `isize` in the current scope\n --> /tmp/tmpm88xbf9u.rs:7:24\n  |\n\
    7 |     let mut even = num.count_digits(|x| x % 2 == 0);\n  |                \
    \        ^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `count_ones`\n\nerror[E0599]: no method named `count_digits` found for type\
    \ `isize` in the current scope\n --> /tmp/tmpm88xbf9u.rs:8:23\n  |\n8 |     let\
    \ mut odd = num.count_digits(|x| x % 2 != 0);\n  |                       ^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `count_ones`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n\n    while num != 0 {\n   \
    \     if num % 2 == 0 {\n            even += 1;\n        }\n\n        if num %\
    \ 2 == 1 {\n            odd += 1;\n        }\n\n        num /= 2;\n    }\n\n \
    \   (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpkidk6ort.rs:18:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n18 |\
    \         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut count: (usize, usize) = (0, 0);\n    let num = num / 10;\n  \
    \  loop {\n        count += (num % 2 == 0);\n        if num < 10 {\n         \
    \   break;\n        }\n        num = num / 10;\n        count += (num % 2 == 1);\n\
    \    }\n    (count[0], count[1])\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n --> /tmp/tmpatjuvnaw.rs:9:18\n\
    \  |\n9 |         count += (num % 2 == 0);\n  |                  ^           \
    \ ^\n  |\n  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these\
    \ parentheses\n  |\n9 -         count += (num % 2 == 0);\n9 +         count +=\
    \ num % 2 == 0;\n  | \n\nwarning: unnecessary parentheses around assigned value\n\
    \  --> /tmp/tmpatjuvnaw.rs:14:18\n   |\n14 |         count += (num % 2 == 1);\n\
    \   |                  ^            ^\n   |\nhelp: remove these parentheses\n\
    \   |\n14 -         count += (num % 2 == 1);\n14 +         count += num % 2 ==\
    \ 1;\n   | \n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `(usize, usize)`\n --> /tmp/tmpatjuvnaw.rs:9:9\n  |\n9 |         count\
    \ += (num % 2 == 0);\n  |         -----^^^^^^^^^^^^^^^^^^\n  |         |\n  |\
    \         cannot use `+=` on type `(usize, usize)`\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `(usize, usize)`\n  --> /tmp/tmpatjuvnaw.rs:14:9\n\
    \   |\n14 |         count += (num % 2 == 1);\n   |         -----^^^^^^^^^^^^^^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `(usize, usize)`\n\nerror[E0608]:\
    \ cannot index into a value of type `(usize, usize)`\n  --> /tmp/tmpatjuvnaw.rs:16:6\n\
    \   |\n16 |     (count[0], count[1])\n   |      ^^^^^^^^ help: to access tuple\
    \ elements, use: `count.0`\n\nerror[E0608]: cannot index into a value of type\
    \ `(usize, usize)`\n  --> /tmp/tmpatjuvnaw.rs:16:16\n   |\n16 |     (count[0],\
    \ count[1])\n   |                ^^^^^^^^ help: to access tuple elements, use:\
    \ `count.1`\n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\n\
    Some errors have detailed explanations: E0368, E0608.\nFor more information about\
    \ an error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut sum = 0;\n    for i in num.to_digits().into_iter() {\n      \
    \  if i % 2 == 0 {\n            sum += 1;\n        } else {\n            sum -=\
    \ 1;\n        }\n    }\n    (sum, sum)\n}\n\nfn main() {\n    let candidate =\
    \ even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmps_qk6dij.rs:7:18\n  |\n7 |     for i in num.to_digits().into_iter()\
    \ {\n  |                  ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    // even\n    if num % 2 == 0 {\n        (num / 2, 0)\n    } else {\n\
    \        // odd\n        (num / 2, num % 2)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 1)`,\n right: `(0, 1)`', /tmp/tmp3csri9za.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    debug_assert!(num >= 0);\n    let mut n = 0;\n    let mut evens = 0;\n\
    \    let mut odds = 0;\n    while n > 0 {\n        if n % 2 == 0 {\n         \
    \   evens += 1;\n        } else {\n            odds += 1;\n        }\n       \
    \ n /= 2;\n    }\n    (evens, odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmp8p959izw.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut sum = 0;\n    let mut odd_count = 0;\n    for n in num {\n  \
    \      if n % 2 == 0 {\n            sum += n;\n            odd_count += 1;\n \
    \       }\n    }\n    (sum, odd_count)\n}\n\nfn main() {\n    let candidate =\
    \ even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `isize` is not an iterator\n --> /tmp/tmp4mwnuj1v.rs:8:14\n\
    \  |\n8 |     for n in num {\n  |              ^^^ `isize` is not an iterator\n\
    \  |\n  = help: the trait `Iterator` is not implemented for `isize`\n  = note:\
    \ if you want to iterate between `start` until a value `end`, use the exclusive\
    \ range syntax `start..end` or the inclusive range syntax `start..=end`\n  = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 1;\n    while num != 0 {\n     \
    \   even = num % 10;\n        odd = odd + (even % 2 == 0);\n        num /= 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `bool` to `{integer}`\n  --> /tmp/tmph40zzf6d.rs:10:19\n\
    \   |\n10 |         odd = odd + (even % 2 == 0);\n   |                   ^ no\
    \ implementation for `{integer} + bool`\n   |\n   = help: the trait `Add<bool>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut sum = 0;\n    let mut evens = 0;\n    let mut odds = 0;\n   \
    \ let mut last_digit = num / 10;\n\n    while last_digit != 0 {\n        sum +=\
    \ last_digit % 10;\n        if sum % 2 == 0 {\n            evens += 1;\n     \
    \   }\n        else {\n            odds += 1;\n        }\n        last_digit =\
    \ last_digit / 10;\n    }\n\n    (evens, odds)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpu9v1exo4.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num_odd_count = 0;\n    let mut num_even_count = 0;\n    while\
    \ num > 0 {\n        let tmp = num % 10;\n        if tmp == 0 {\n            num_even_count++;\n\
    \        } else {\n            num_odd_count++;\n        }\n        num /= 10;\n\
    \    }\n    (num_odd_count, num_even_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp49f66q5m.rs:11:27\n\
    \   |\n11 |             num_even_count++;\n   |                           ^^ not\
    \ a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n11 |       \
    \      { let tmp = num_even_count; num_even_count += 1; tmp };\n   |         \
    \    +++++++++++               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n11 -            \
    \ num_even_count++;\n11 +             num_even_count += 1;\n   | \n\nerror: Rust\
    \ has no postfix increment operator\n  --> /tmp/tmp49f66q5m.rs:13:26\n   |\n13\
    \ |             num_odd_count++;\n   |                          ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n13 |             { let\
    \ tmp = num_odd_count; num_odd_count += 1; tmp };\n   |             +++++++++++\
    \              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n13 -             num_odd_count++;\n\
    13 +             num_odd_count += 1;\n   | \n\nerror: aborting due to 2 previous\
    \ errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut result = (num / 2, num % 2);\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while num != 0 {\n        if num % 2 == 0 {\n            i += 1;\n\
    \        } else {\n            i += 2;\n        }\n        num = num / 2;\n  \
    \  }\n    (i, j)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `result`\n --> /tmp/tmpn0gusy_n.rs:6:13\n  |\n\
    6 |     let mut result = (num / 2, num % 2);\n  |             ^^^^^^ help: if\
    \ this is intentional, prefix it with an underscore: `_result`\n  |\n  = note:\
    \ `#[warn(unused_variables)]` on by default\n\nwarning: variable does not need\
    \ to be mutable\n --> /tmp/tmpn0gusy_n.rs:6:9\n  |\n6 |     let mut result = (num\
    \ / 2, num % 2);\n  |         ----^^^^^^\n  |         |\n  |         help: remove\
    \ this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\nwarning: variable\
    \ does not need to be mutable\n --> /tmp/tmpn0gusy_n.rs:8:9\n  |\n8 |     let\
    \ mut j = 0;\n  |         ----^\n  |         |\n  |         help: remove this\
    \ `mut`\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpn0gusy_n.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 3 warnings emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    match num {\n        0 => (0, 0),\n        1 => (0, 0),\n        2 =>\
    \ (0, 1),\n        _ => (num % 2 == 0 ? 1 : 2, num % 2 == 0 ? 2 : 3),\n    }\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `1`\n\
    \  --> /tmp/tmpmx0lx81b.rs:10:30\n   |\n10 |         _ => (num % 2 == 0 ? 1 :\
    \ 2, num % 2 == 0 ? 2 : 3),\n   |                              ^ expected one\
    \ of `)`, `,`, `.`, `?`, or an operator\n\nerror: expected one of `!`, `&&`, `&`,\
    \ `(`, `)`, `*`, `,`, `...`, `.`, `<`, `?`, `[`, `_`, `async`, `const`, `dyn`,\
    \ `extern`, `fn`, `for`, `impl`, `unsafe`, `}`, `~`, an operator, lifetime, or\
    \ path, found `2`\n  --> /tmp/tmpmx0lx81b.rs:10:34\n   |\n10 |         _ => (num\
    \ % 2 == 0 ? 1 : 2, num % 2 == 0 ? 2 : 3),\n   |           --                \
    \     ^ expected one of 26 possible tokens\n   |           |\n   |           while\
    \ parsing the `match` arm starting here\n\nerror: aborting due to 2 previous errors\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = num / 10;\n    let mut odd = num % 10;\n    (even, odd\
    \ + 1)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 8)`,\n right: `(0, 1)`', /tmp/tmpwe_r2lqy.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num_copy: isize = num;\n    let mut even = 0;\n    let mut odd\
    \ = 0;\n    while num_copy > 0 {\n        even = num_copy % 10;\n        odd +=\
    \ even;\n        num_copy /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n \
    \   let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n \
    \   assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 7)`,\n right: `(0, 1)`', /tmp/tmpfkyoq1ug.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num % 2 == 0 {\n        (num / 2, num % 2)\n    } else {\n       \
    \ (num / 2 + 1, num % 2)\n    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(4, 1)`,\n right: `(0, 1)`', /tmp/tmp9z91ukq4.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let digits = num.abs();\n    let mut even_count = 0;\n    let mut odd_count\
    \ = 0;\n\n    for i in 0..(digits.len() - 1) {\n        let digit = digits[i];\n\
    \        if digit % 2 == 0 {\n            even_count += 1;\n        } else {\n\
    \            odd_count += 1;\n        }\n    }\n\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpyw4qimgc.rs:10:25\n   |\n10 |     for i in 0..(digits.len()\
    \ - 1) {\n   |                         ^^^ method not found in `isize`\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmpyw4qimgc.rs:11:21\n\
    \   |\n11 |         let digit = digits[i];\n   |                     ^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut evens = 0;\n    let mut odds = 0;\n\n    for i in num.abs() {\n\
    \        if i % 2 == 0 {\n            evens += 1;\n        } else {\n        \
    \    odds += 1;\n        }\n    }\n    (evens, odds)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `isize` is not an iterator\n --> /tmp/tmpovccwdiu.rs:9:14\n\
    \  |\n9 |     for i in num.abs() {\n  |              ^^^^^^^^^ `isize` is not\
    \ an iterator\n  |\n  = help: the trait `Iterator` is not implemented for `isize`\n\
    \  = note: if you want to iterate between `start` until a value `end`, use the\
    \ exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n\
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n\n    for n in num.abs() {\n\
    \        if n % 2 == 0 {\n            even += 1;\n        } else {\n         \
    \   odd += 1;\n        }\n    }\n\n    (even, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `isize` is not an iterator\n --> /tmp/tmpn1brghmy.rs:9:14\n\
    \  |\n9 |     for n in num.abs() {\n  |              ^^^^^^^^^ `isize` is not\
    \ an iterator\n  |\n  = help: the trait `Iterator` is not implemented for `isize`\n\
    \  = note: if you want to iterate between `start` until a value `end`, use the\
    \ exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n\
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut count = 0;\n    let mut even = 0;\n    let mut odd = 1;\n   \
    \ let mut n = num;\n\n    while n > 0 {\n        count += n / 10;\n        n =\
    \ n % 10;\n\n        if (n % 2 == 0) {\n            even = even * 10 + n;\n  \
    \      } else {\n            odd = odd * 10 + n;\n        }\n    }\n\n    (count,\
    \ even)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to multiply with overflow', /tmp/tmpw7ox6beb.rs:18:19\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut counts: Vec<_> = vec![0; 10];\n    let mut digits = num;\n  \
    \  while digits > 0 {\n        digits = digits / 10;\n        counts[digits %\
    \ 10] += 1;\n    }\n    counts.iter().enumerate().filter(|(_, v)| v % 2 == 0).count().map(|x|\
    \ x.0).unwrap_or(0, 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpt6xo_wxg.rs:10:9\n   |\n10 |         counts[digits % 10] += 1;\n   |\
    \         ^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0369]: cannot mod `&&{integer}` by `{integer}`\n  --> /tmp/tmpt6xo_wxg.rs:12:49\n\
    \   |\n12 |     counts.iter().enumerate().filter(|(_, v)| v % 2 == 0).count().map(|x|\
    \ x.0).unwrap_or(0, 0)\n   |                                               - ^\
    \ - {integer}\n   |                                               |\n   |    \
    \                                           &&{integer}\n   |\nhelp: `%` can be\
    \ used on `{integer}`, you can dereference `v`\n   |\n12 |     counts.iter().enumerate().filter(|(_,\
    \ v)| *v % 2 == 0).count().map(|x| x.0).unwrap_or(0, 0)\n   |                \
    \                               +\n\nerror[E0599]: `usize` is not an iterator\n\
    \  --> /tmp/tmpt6xo_wxg.rs:12:67\n   |\n12 |     counts.iter().enumerate().filter(|(_,\
    \ v)| v % 2 == 0).count().map(|x| x.0).unwrap_or(0, 0)\n   |                 \
    \                                                  ^^^ `usize` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `usize:\
    \ Iterator`\n           which is required by `&mut usize: Iterator`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0369, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num % 10 as isize, num / 10 as isize)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 0)`,\n right: `(0, 1)`', /tmp/tmp4attn8cc.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    debug_assert!(num > 0);\n    let mut even = num % 2 == 0;\n    let mut\
    \ odd = num % 2 == 0;\n    for _ in 0..(num as usize) {\n        if odd { odd\
    \ *= -1; } else { even *= -1; }\n    }\n    (even, odd)\n}\n\nfn main() {\n  \
    \  let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n  \
    \  assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `*=` cannot be applied to type\
    \ `bool`\n  --> /tmp/tmpyz9rab_2.rs:10:18\n   |\n10 |         if odd { odd *=\
    \ -1; } else { even *= -1; }\n   |                  ---^^^^^^\n   |          \
    \        |\n   |                  cannot use `*=` on type `bool`\n\nerror[E0368]:\
    \ binary assignment operation `*=` cannot be applied to type `bool`\n  --> /tmp/tmpyz9rab_2.rs:10:38\n\
    \   |\n10 |         if odd { odd *= -1; } else { even *= -1; }\n   |         \
    \                             ----^^^^^^\n   |                               \
    \       |\n   |                                      cannot use `*=` on type `bool`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyz9rab_2.rs:12:6\n   |\n12 | \
    \    (even, odd)\n   |      ^^^^ expected `isize`, found `bool`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyz9rab_2.rs:12:12\n   |\n12 |     (even, odd)\n\
    \   |            ^^^ expected `isize`, found `bool`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd = 1;\n    let mut even = 1;\n    let mut digits = 0;\n  \
    \  while num > 0 {\n        odd = num % 10 - 1;\n        even = num / 10 - 1;\n\
    \        digits += 1;\n        num -= 10;\n    }\n    debug!(\"Digits is {:?}\"\
    , digits);\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `debug` in this scope\n  --> /tmp/tmphv6f0uo7.rs:15:5\n\
    \   |\n15 |     debug!(\"Digits is {:?}\", digits);\n   |     ^^^^^\n\nerror:\
    \ aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for i in num\
    \ {\n        if i % 2 == 0 {\n            even_count += 1;\n        } else {\n\
    \            odd_count += 1;\n        }\n    }\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `isize` is not an iterator\n --> /tmp/tmpyyrgmc27.rs:8:14\n\
    \  |\n8 |     for i in num {\n  |              ^^^ `isize` is not an iterator\n\
    \  |\n  = help: the trait `Iterator` is not implemented for `isize`\n  = note:\
    \ if you want to iterate between `start` until a value `end`, use the exclusive\
    \ range syntax `start..end` or the inclusive range syntax `start..=end`\n  = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut count = 0;\n    let mut odd = 1;\n    for i in num.abs() {\n\
    \        if i % 2 == 1 {\n            count += 1;\n        } else {\n        \
    \    odd += 1;\n        }\n    }\n    (count, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `isize` is not an iterator\n --> /tmp/tmpqmzt444g.rs:8:14\n\
    \  |\n8 |     for i in num.abs() {\n  |              ^^^^^^^^^ `isize` is not\
    \ an iterator\n  |\n  = help: the trait `Iterator` is not implemented for `isize`\n\
    \  = note: if you want to iterate between `start` until a value `end`, use the\
    \ exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n\
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let num_digits = num % 10;\n    let even_digits = num / 10 - num_digits\
    \ * 2;\n    let odd_digits = num / 10 - num_digits * 2;\n    (even_digits, odd_digits)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(-14, -14)`,\n right: `(0, 1)`', /tmp/tmp7bi6xbjl.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        return (0, 1);\n    }\n    let mut count = 0;\n\
    \    let mut odd = 0;\n    while num > 0 {\n        count += 1;\n        if num\
    \ % 2 == 1 {\n            odd += 1;\n        }\n        num = num / 2;\n    }\n\
    \    (count, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n   \
    \ assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp1nmto38_.rs:16:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num_even = 0;\n    let mut num_odd = 0;\n\n    for i in 0..num\
    \ {\n        if num % 2 == 0 {\n            num_even += 1;\n        }\n      \
    \  if num % 2 != 0 {\n            num_odd += 1;\n        }\n    }\n    (num_even,\
    \ num_odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 7)`,\n right: `(0, 1)`', /tmp/tmpu04h3x5s.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num_str = num.to_string();\n    num_str.chars().enumerate().filter(|(_,\
    \ c)| c % 2 == 0).fold(\n        (even_odd_count(num_str.chars().enumerate().filter(|(_,\
    \ c)| c % 2 == 1).count()),\n             even_odd_count(num_str.chars().enumerate().filter(|(_,\
    \ c)| c % 2 == 0).count()))\n        * (even_odd_count(num_str.chars().enumerate().filter(|(_,\
    \ c)| c % 2 == 1).count()),\n            even_odd_count(num_str.chars().enumerate().filter(|(_,\
    \ c)| c % 2 == 0).count())),\n        (even_odd_count(num_str.chars().enumerate().filter(|(_,\
    \ c)| c % 2 == 1).count()),\n            even_odd_count(num_str.chars().enumerate().filter(|(_,\
    \ c)| c % 2 == 0).count())),\n    )\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&char` by `{integer}`\n --> /tmp/tmp7l_nhrbg.rs:7:51\n\
    \  |\n7 |     num_str.chars().enumerate().filter(|(_, c)| c % 2 == 0).fold(\n\
    \  |                                                 - ^ - {integer}\n  |    \
    \                                             |\n  |                         \
    \                        &char\n\nerror[E0369]: cannot mod `&char` by `{integer}`\n\
    \ --> /tmp/tmp7l_nhrbg.rs:8:71\n  |\n8 |         (even_odd_count(num_str.chars().enumerate().filter(|(_,\
    \ c)| c % 2 == 1).count()),\n  |                                             \
    \                        - ^ - {integer}\n  |                                \
    \                                     |\n  |                                 \
    \                                    &char\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp7l_nhrbg.rs:8:25\n  |\n8 |         (even_odd_count(num_str.chars().enumerate().filter(|(_,\
    \ c)| c % 2 == 1).count()),\n  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n8 |         (even_odd_count(num_str.chars().enumerate().filter(|(_,\
    \ c)| c % 2 == 1).count().try_into().unwrap()),\n  |                         \
    \                                                               ++++++++++++++++++++\n\
    \nerror[E0369]: cannot mod `&char` by `{integer}`\n --> /tmp/tmp7l_nhrbg.rs:9:75\n\
    \  |\n9 |              even_odd_count(num_str.chars().enumerate().filter(|(_,\
    \ c)| c % 2 == 0).count()))\n  |                                             \
    \                            - ^ - {integer}\n  |                            \
    \                                             |\n  |                         \
    \                                                &char\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp7l_nhrbg.rs:9:29\n  |\n9 |              even_odd_count(num_str.chars().enumerate().filter(|(_,\
    \ c)| c % 2 == 0).count()))\n  |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        (even_odd_count(-num), even_odd_count(-num))\n\
    \    } else {\n        let mut count = 0;\n        let mut odd = 1;\n        while\
    \ num > 0 {\n            count += 1;\n            num = num / 10;\n          \
    \  if num > 0 {\n                odd += 1;\n            }\n        }\n       \
    \ (odd, count)\n    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjzz68ctc.rs:7:10\n  |\n7 |\
    \         (even_odd_count(-num), even_odd_count(-num))\n  |          ^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected type `isize`\n      \
    \      found tuple `(isize, isize)`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjzz68ctc.rs:7:32\n\
    \  |\n7 |         (even_odd_count(-num), even_odd_count(-num))\n  |          \
    \                      ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n  |\n\
    \  = note: expected type `isize`\n            found tuple `(isize, isize)`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = even_count_helper(num);\n    let mut odd_count =\
    \ odd_count_helper(num, &mut even_count);\n    let result = even_count.0 + odd_count.0;\n\
    \    even_count.0 -= odd_count.0;\n    even_count.1 -= odd_count.1;\n    odd_count.0\
    \ -= even_count.1;\n    (result, even_count, odd_count)\n}\n\nfn main() {\n  \
    \  let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n  \
    \  assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `even_count_helper` in this scope\n\
    \ --> /tmp/tmp8oqs7x0h.rs:6:26\n  |\n6 |     let mut even_count = even_count_helper(num);\n\
    \  |                          ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `odd_count_helper` in this scope\n --> /tmp/tmp8oqs7x0h.rs:7:25\n\
    \  |\n7 |     let mut odd_count = odd_count_helper(num, &mut even_count);\n  |\
    \                         ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    // Only proceed if the number is positive\n    if num < 0 {\n       \
    \ return (0, num);\n    }\n    // Use unsigned integer division and mod operator\
    \ to find even and odd digits in num.\n    (num / 10_usize, num % 10_usize) /\
    \ 2\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp83la7os_.rs:11:12\n   |\n\
    11 |     (num / 10_usize, num % 10_usize) / 2\n   |            ^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot divide `isize` by `usize`\n \
    \ --> /tmp/tmp83la7os_.rs:11:10\n   |\n11 |     (num / 10_usize, num % 10_usize)\
    \ / 2\n   |          ^ no implementation for `isize / usize`\n   |\n   = help:\
    \ the trait `Div<usize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp83la7os_.rs:11:28\n   |\n11 |     (num / 10_usize, num\
    \ % 10_usize) / 2\n   |                            ^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n  --> /tmp/tmp83la7os_.rs:11:26\n\
    \   |\n11 |     (num / 10_usize, num % 10_usize) / 2\n   |                   \
    \       ^ no implementation for `isize % usize`\n   |\n   = help: the trait `Rem<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64\
    \ as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as\
    \ Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n\
    \             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n  \
    \         and 54 others\n\nerror[E0369]: cannot divide `(isize, isize)` by `{integer}`\n\
    \  --> /tmp/tmp83la7os_.rs:11:38\n   |\n11 |     (num / 10_usize, num % 10_usize)\
    \ / 2\n   |     -------------------------------- ^ - {integer}\n   |     |\n \
    \  |     (isize, isize)\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd = num as i32;\n    let mut even = num as i32;\n    even =\
    \ even % 2;\n\n    if even != 0 {\n        odd = odd.wrapping_add(1);\n    }\n\
    \n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n   \
    \ assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprcvlvvw3.rs:14:6\n   |\n\
    14 |     (even, odd)\n   |      ^^^^ expected `isize`, found `i32`\n   |\nhelp:\
    \ you can convert an `i32` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n14 |     (even.try_into().unwrap(), odd)\n   |          ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprcvlvvw3.rs:14:12\n   |\n14 |\
    \     (even, odd)\n   |            ^^^ expected `isize`, found `i32`\n   |\nhelp:\
    \ you can convert an `i32` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n14 |     (even, odd.try_into().unwrap())\n   |               ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num / 2, num % 2 as isize)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 1)`,\n right: `(0, 1)`', /tmp/tmpp5qnlxf7.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut evens = 0;\n    let mut odds = 0;\n    loop {\n        if num\
    \ % 2 == 0 {\n            evens += 1;\n            num -= 1;\n        } else {\n\
    \            odds += 1;\n            num -= 1;\n        }\n        if num == 0\
    \ {\n            break;\n        }\n    }\n    (evens, odds)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp36m0osmm.rs:11:13\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n11 |\
    \             num -= 1;\n   |             ^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp36m0osmm.rs:14:13\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \             num -= 1;\n   |             ^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut nums_odd = 1;\n    let mut nums_even = 0;\n    while num > 0\
    \ {\n        if num % 2 == 0 {\n            nums_even += 1;\n        } else {\n\
    \            nums_odd += 1;\n        }\n        num /= 10;\n    }\n    (nums_even,\
    \ nums_odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpmmi8in4s.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let num = num % 10;\n        if num % 2 == 0 {\n            even += 1;\n  \
    \      } else {\n            odd += 1;\n        }\n        num = num / 10;\n \
    \   }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: value assigned to `num` is never read\n  --> /tmp/tmprtysr96_.rs:15:9\n\
    \   |\n15 |         num = num / 10;\n   |         ^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign twice to immutable variable `num`\n  --> /tmp/tmprtysr96_.rs:15:9\n\
    \   |\n9  |         let num = num % 10;\n   |             ---\n   |          \
    \   |\n   |             first assignment to `num`\n   |             help: consider\
    \ making this binding mutable: `mut num`\n...\n15 |         num = num / 10;\n\
    \   |         ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror:\
    \ aborting due to previous error; 1 warning emitted\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num <= 0 {\n        return (num / 2, num % 2);\n    }\n    let mut\
    \ even = 0;\n    let mut odd = 0;\n    let mut num_digits = num / 10;\n    while\
    \ num_digits > 0 {\n        let digit = num_digits % 10;\n        if digit % 2\
    \ == 0 {\n            even = even + digit;\n        } else {\n            odd\
    \ = odd + digit;\n        }\n        num_digits = num_digits / 10;\n    }\n  \
    \  (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpltutv96q.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num <= 0 {\n        (0, 0)\n    } else {\n        let mut evens =\
    \ 1;\n        let mut odds = 1;\n        let mut n = num;\n        while n > 0\
    \ {\n            n %= 10;\n            if n % 2 == 0 {\n                evens\
    \ *= 2;\n                evens += n % 2;\n            } else {\n             \
    \   odds *= 2;\n                odds += n % 2;\n            }\n            n /=\
    \ 10;\n        }\n        (evens, odds)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 3)`,\n right: `(0, 1)`', /tmp/tmpd4f8096r.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut evens = 0;\n    let mut odds = 0;\n    let mut n = num;\n   \
    \ while n > 0 {\n        let remainder = n % 10;\n        if remainder % 2 ==\
    \ 0 {\n            evens += 1;\n        }\n        else {\n            odds +=\
    \ 1;\n        }\n        n /= 10;\n    }\n    (evens, odds)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpxar_7m5m.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut evens = 0;\n    let mut odds = 0;\n    while num > 0 {\n    \
    \    num /= 10;\n        evens += (num % 2) == 0;\n        odds += (num % 2) ==\
    \ 1;\n    }\n    (evens, odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpt241lb_y.rs:10:15\n\
    \   |\n10 |         evens += (num % 2) == 0;\n   |               ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpt241lb_y.rs:11:14\n   |\n11 |         odds += (num % 2) == 1;\n\
    \   |              ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        (0, num)\n    } else {\n        if num % 2 == 0\
    \ {\n            (1, num / 2)\n        } else {\n            (num / 2, num)\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n   \
    \ assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 7)`,\n right: `(0, 1)`', /tmp/tmpp4slh536.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        (even_odd_count(-num).0, even_odd_count(-num).1)\n\
    \    } else {\n        (even_odd_count(num).0 + 1, even_odd_count(num).1 + 1)\n\
    \    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut digits = num;\n    let mut odd = 0;\n    let mut even = 0;\n\
    \    while digits > 0 {\n        digits &= digits - 1;\n        even += 1;\n \
    \       digits &= digits;\n    }\n    while even > 0 {\n        even -= 1;\n \
    \       odd += 1;\n    }\n    (odd, even)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 0)`,\n right: `(0, 1)`', /tmp/tmp7w3buizm.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num % 2, num % 3 % 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 1)`,\n right: `(0, 1)`', /tmp/tmp1_novvcc.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 1;\n    for d in num.to_digits(10)\
    \ {\n        if d % 2 == 0 {\n            even = even + d;\n        } else {\n\
    \            odd = odd + d;\n        }\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpa9abxjci.rs:8:18\n  |\n8 |     for d in num.to_digits(10)\
    \ {\n  |                  ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num / 10, num % 10)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 7)`,\n right: `(0, 1)`', /tmp/tmpatamjcdd.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        panic!(\"Invalid number for counting digits\")\n\
    \    }\n    let mut count = num / 10;\n    (count % 2 == 0, count % 2 != 0)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiv68hobe.rs:10:6\n   |\n\
    10 |     (count % 2 == 0, count % 2 != 0)\n   |      ^^^^^^^^^^^^^^ expected `isize`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv68hobe.rs:10:22\n\
    \   |\n10 |     (count % 2 == 0, count % 2 != 0)\n   |                      ^^^^^^^^^^^^^^\
    \ expected `isize`, found `bool`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd_digits = i32::from(0);\n    let mut even_digits = i32::from(0);\n\
    \    for i in num.abs() {\n        if i % 2 == 0 {\n            even_digits +=\
    \ i32::from(*i);\n        } else {\n            odd_digits += i32::from(*i);\n\
    \        }\n    }\n    (even_digits, odd_digits)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `isize` is not an iterator\n --> /tmp/tmptah9k83g.rs:8:14\n\
    \  |\n8 |     for i in num.abs() {\n  |              ^^^^^^^^^ `isize` is not\
    \ an iterator\n  |\n  = help: the trait `Iterator` is not implemented for `isize`\n\
    \  = note: if you want to iterate between `start` until a value `end`, use the\
    \ exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n\
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptah9k83g.rs:15:6\n\
    \   |\n15 |     (even_digits, odd_digits)\n   |      ^^^^^^^^^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n15 |     (even_digits.try_into().unwrap(),\
    \ odd_digits)\n   |                 ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptah9k83g.rs:15:19\n   |\n15 |     (even_digits, odd_digits)\n\
    \   |                   ^^^^^^^^^^ expected `isize`, found `i32`\n   |\nhelp:\
    \ you can convert an `i32` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     (even_digits, odd_digits.try_into().unwrap())\n   |    \
    \                         ++++++++++++++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odds = num.trailing_zeros();\n    let mut evens = num.trailing_zeros()\
    \ - odds;\n    let mut new_odd = evens % 2 == 1;\n    odds -= new_odd;\n    evens\
    \ -= new_odd;\n    (evens, odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot subtract-assign `bool` from `u32`\n --> /tmp/tmpjfbqtua6.rs:9:10\n\
    \  |\n9 |     odds -= new_odd;\n  |          ^^ no implementation for `u32 -=\
    \ bool`\n  |\n  = help: the trait `SubAssign<bool>` is not implemented for `u32`\n\
    \  = help: the following other types implement trait `SubAssign<Rhs>`:\n     \
    \       <f32 as SubAssign<&f32>>\n            <f32 as SubAssign>\n           \
    \ <f64 as SubAssign<&f64>>\n            <f64 as SubAssign>\n            <i128\
    \ as SubAssign<&i128>>\n            <i128 as SubAssign>\n            <i16 as SubAssign<&i16>>\n\
    \            <i16 as SubAssign>\n          and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjfbqtua6.rs:11:6\n   |\n11 |     (evens, odds)\n   |  \
    \    ^^^^^ expected `isize`, found `u32`\n   |\nhelp: you can convert a `u32`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n11 |     (evens.try_into().unwrap(),\
    \ odds)\n   |           ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjfbqtua6.rs:11:13\n   |\n11 |     (evens, odds)\n   |         \
    \    ^^^^ expected `isize`, found `u32`\n   |\nhelp: you can convert a `u32` to\
    \ an `isize` and panic if the converted value doesn't fit\n   |\n11 |     (evens,\
    \ odds.try_into().unwrap())\n   |                 ++++++++++++++++++++\n\nerror[E0277]:\
    \ cannot subtract-assign `bool` from `u32`\n  --> /tmp/tmpjfbqtua6.rs:10:11\n\
    \   |\n10 |     evens -= new_odd;\n   |           ^^ no implementation for `u32\
    \ -= bool`\n   |\n   = help: the trait `SubAssign<bool>` is not implemented for\
    \ `u32`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n\
    \             <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n    \
    \         <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n        \
    \     <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n         \
    \    <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num, num.wrapping_div_2())\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `wrapping_div_2` found for type `isize` in\
    \ the current scope\n --> /tmp/tmpi3tl6qcz.rs:6:15\n  |\n6 |     (num, num.wrapping_div_2())\n\
    \  |               ^^^^^^^^^^^^^^ help: there is an associated function with a\
    \ similar name: `wrapping_div`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0, odd = 0;\n    let mut n = num;\n    while n != 0 {\n\
    \        if n % 2 == 0 {\n            even += 1;\n        } else {\n         \
    \   odd += 1;\n        }\n        n /= 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmphe_r39yp.rs:6:21\n  |\n6 |     let mut even = 0, odd = 0;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num_even = 0;\n    let mut num_odd = 0;\n    loop {\n       \
    \ if num % 2 == 0 {\n            num_even += 1;\n        } else {\n          \
    \  num_odd += 1;\n        }\n        num = num / 2;\n        if num == 0 {\n \
    \           break;\n        }\n    }\n    (num_even, num_odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp3s7bku19.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num_even = 1;\n    let mut num_odd = 0;\n\n    let mut i = num;\n\
    \    while i >= 0 {\n        if i % 2 == 0 {\n            num_even *= 2;\n   \
    \     } else {\n            num_odd += 1;\n        }\n\n        i = i / 2;\n \
    \   }\n\n    (num_even, num_odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to multiply with overflow', /tmp/tmpzs61f6ag.rs:12:13\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num % 2, num / 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 3)`,\n right: `(0, 1)`', /tmp/tmpk21sr0j_.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num / 2, num % 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 1)`,\n right: `(0, 1)`', /tmp/tmpg7200pae.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        (num, 0)\n    } else if num < 10 {\n        (num,\
    \ 1)\n    } else {\n        let mut odd_digits = 0;\n        let mut even_digits\
    \ = 0;\n        let mut temp = num;\n        while temp >= 10 {\n            even_digits\
    \ += 1;\n            temp -= 10;\n        }\n        while temp > 0 {\n      \
    \      odd_digits += 1;\n            temp -= 1;\n        }\n        (even_digits,\
    \ odd_digits)\n    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 1)`,\n right: `(0, 1)`', /tmp/tmppz9k47o8.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd_count = 1;\n    let mut even_count = 0;\n    while num >\
    \ 0 {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n          \
    \  even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n\
    \        num /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n  \
    \  let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n  \
    \  assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmppls031nd.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even, odd = 0, 1;\n\n    let mut num = num;\n    while num >\
    \ 0 {\n        num = num % 10;\n        if num % 2 == 0 {\n            even =\
    \ even * 10 + num;\n        }\n        else {\n            odd = odd * 10 + num;\n\
    \        }\n    }\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error: unexpected `,` in pattern\n --> /tmp/tmp8qyke3dd.rs:6:17\n  |\n\
    6 |     let mut even, odd = 0, 1;\n  |                 ^\n  |\nhelp: try adding\
    \ parentheses to match on a tuple\n  |\n6 |     let (mut even, odd) = 0, 1;\n\
    \  |         +             +\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        (num, num)\n    } else {\n        (\n         \
    \   num,\n            num.clone(),\n        )\n    }\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 7)`,\n right: `(0, 1)`', /tmp/tmp4703udyg.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num / 2, num % 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 1)`,\n right: `(0, 1)`', /tmp/tmpdyu0n_um.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n\n    while num > 0 {\n    \
    \    if num % 2 == 0 {\n            even = even * 10 + num.log10();\n        }\
    \ else {\n            odd = odd * 10 + num.log10();\n        }\n\n        num\
    \ = num / 10;\n    }\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate =\
    \ even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0658]: use of unstable library feature 'int_log'\n  --> /tmp/tmpe2b57do0.rs:11:36\n\
    \   |\n11 |             even = even * 10 + num.log10();\n   |                \
    \                    ^^^^^\n   |\n   = note: see issue #70887 <https://github.com/rust-lang/rust/issues/70887>\
    \ for more information\n\nerror[E0658]: use of unstable library feature 'int_log'\n\
    \  --> /tmp/tmpe2b57do0.rs:13:34\n   |\n13 |             odd = odd * 10 + num.log10();\n\
    \   |                                  ^^^^^\n   |\n   = note: see issue #70887\
    \ <https://github.com/rust-lang/rust/issues/70887> for more information\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe2b57do0.rs:19:6\n   |\n19 |     (even, odd)\n\
    \   |      ^^^^ expected `isize`, found `u32`\n   |\nhelp: you can convert a `u32`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n19 |     (even.try_into().unwrap(),\
    \ odd)\n   |          ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpe2b57do0.rs:19:12\n   |\n19 |     (even, odd)\n   |           \
    \ ^^^ expected `isize`, found `u32`\n   |\nhelp: you can convert a `u32` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n19 |     (even,\
    \ odd.try_into().unwrap())\n   |               ++++++++++++++++++++\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0658.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    debug_assert_eq!(num >= 0, \"Invalid input\");\n    if num < 0 {\n  \
    \      (\n            -(num % 2) as isize,\n            -(num % 2 + num as isize)\
    \ as isize,\n        )\n    } else {\n        (\n            (num % 2) as isize,\n\
    \            (num % 2 + num as isize) as isize,\n        )\n    }\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdubboz1j.rs:6:5\n  |\n6 |\
    \     debug_assert_eq!(num >= 0, \"Invalid input\");\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `bool`, found `&str`\n  |\n  = note: this error originates in the macro\
    \ `$crate::assert_eq` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even: isize = 0;\n    let mut odd: isize = 0;\n    let mut count\
    \ = 1i32;\n    while num > 0 {\n        let digit = num % 10;\n        num = num\
    \ / 10;\n\n        if digit % 2 == 0 {\n            even = even * 10 + digit;\n\
    \            count = (count * 10) + 1;\n        } else {\n            odd = (odd\
    \ * 10) + digit;\n            count = (count * 10) - 1;\n        }\n    }\n\n\
    \    (even, odd, count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv7_w4u1h.rs:22:5\n   |\n\
    5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                 \
    \                 -------------- expected `(isize, isize)` because of return type\n\
    ...\n22 |     (even, odd, count)\n   |     ^^^^^^^^^^^^^^^^^^ expected a tuple\
    \ with 2 elements, found one with 3 elements\n   |\n   = note: expected tuple\
    \ `(isize, isize)`\n              found tuple `(isize, isize, i32)`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num % 10, (num / (10 * (num % 10))))\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 0)`,\n right: `(0, 1)`', /tmp/tmp5b18iw85.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0, odd = 0, n = num;\n    while n > 0 {\n        n /=\
    \ 10;\n        even += n % 2 == 0;\n        odd += n % 2 != 0;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmpjxsxvtam.rs:6:21\n  |\n6 |     let mut even = 0, odd = 0, n = num;\n\
    \  |                     ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    debug_assert!(num >= 0);\n    let mut even = 0;\n    let mut odd = 0;\n\
    \n    while num > 0 {\n        let mut tmp = num % 10;\n        even += tmp /\
    \ 2;\n        odd += tmp % 2;\n        num = num / 10;\n    }\n\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmppzy9tsvy.rs:11:13\n\
    \   |\n11 |         let mut tmp = num % 10;\n   |             ----^^^\n   |  \
    \           |\n   |             help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0384]: cannot assign to immutable argument `num`\n \
    \ --> /tmp/tmppzy9tsvy.rs:14:9\n   |\n5  | fn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n   |                   --- help: consider making this binding mutable:\
    \ `mut num`\n...\n14 |         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num % 2, num / 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 3)`,\n right: `(0, 1)`', /tmp/tmp4eefwubi.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0, odd = 0;\n    let mut num_digits = num;\n    while\
    \ num_digits > 0 {\n        even = num_digits % 10;\n        odd = even + odd\
    \ + 1;\n        num_digits /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmp6cchwksg.rs:6:21\n  |\n6 |     let mut even = 0, odd = 0;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut count = 0;\n    let mut sum = 0;\n    let mut odd = false;\n\
    \    let mut even = false;\n    let mut num = num as i64;\n    while num > 0 {\n\
    \        sum += num % 10;\n        num /= 10;\n        count += 1;\n        sum\
    \ += num % 10;\n        num /= 10;\n        count += 1;\n        if count % 2\
    \ == 1 {\n            odd = true;\n        } else {\n            even = true;\n\
    \        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeuzmj0h6.rs:24:6\n   |\n\
    24 |     (even, odd)\n   |      ^^^^ expected `isize`, found `bool`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeuzmj0h6.rs:24:12\n   |\n24 |     (even, odd)\n\
    \   |            ^^^ expected `isize`, found `bool`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num % 10, num % 10).enumerate().filter {\n        |&(i, _)| {\n    \
    \        if i % 2 == 0 {\n                true\n            } else {\n       \
    \         false\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected one of `(`, `.`, `::`, `;`, `?`, `}`, or an operator, found\
    \ `{`\n --> /tmp/tmpp8cgf4yq.rs:6:45\n  |\n6 |     (num % 10, num % 10).enumerate().filter\
    \ {\n  |                                             ^ expected one of 7 possible\
    \ tokens\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num: isize = num;\n    let mut evens: isize = 0;\n    let mut\
    \ odds: isize = 0;\n    while num > 0 {\n        let mut remainder: isize = num\
    \ % 10;\n        num /= 10;\n        if remainder % 2 == 0 {\n            evens\
    \ += 1;\n        }\n        else {\n            odds += 1;\n        }\n    }\n\
    \    (evens, odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n  \
    \  assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmp0afo1fek.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let num_str = format!(\"{}\", num).to_string();\n    let mut counter\
    \ = 1;\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for digit\
    \ in num_str.chars() {\n        if digit % 2 == 0 {\n            even_count =\
    \ even_count + 1;\n        } else {\n            odd_count = odd_count + 1;\n\
    \        }\n        if digit % 10 == 0 {\n            counter = counter + 1;\n\
    \        }\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `char` by `{integer}`\n  --> /tmp/tmp5026r7_q.rs:11:18\n\
    \   |\n11 |         if digit % 2 == 0 {\n   |            ----- ^ - {integer}\n\
    \   |            |\n   |            char\n\nerror[E0369]: cannot mod `char` by\
    \ `{integer}`\n  --> /tmp/tmp5026r7_q.rs:16:18\n   |\n16 |         if digit %\
    \ 10 == 0 {\n   |            ----- ^ -- {integer}\n   |            |\n   |   \
    \         char\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut count = 0;\n    for i in num {\n        if i % 2 == 0 {\n   \
    \         count += 1;\n        }\n        if i % 2 != 0 {\n            count +=\
    \ 1;\n        }\n    }\n    (count, count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `isize` is not an iterator\n --> /tmp/tmpt8kk8bh3.rs:7:14\n\
    \  |\n7 |     for i in num {\n  |              ^^^ `isize` is not an iterator\n\
    \  |\n  = help: the trait `Iterator` is not implemented for `isize`\n  = note:\
    \ if you want to iterate between `start` until a value `end`, use the exclusive\
    \ range syntax `start..end` or the inclusive range syntax `start..=end`\n  = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = num;\n    let mut odd = num;\n    while even % 2 != 0\
    \ {\n        even /= 2;\n        odd++;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpjju9tp9_.rs:10:12\n\
    \   |\n10 |         odd++;\n   |            ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n10 |         { let tmp = odd; odd += 1;\
    \ tmp };\n   |         +++++++++++    ~~~~~~~~~~~~~~~~~\n10 -         odd++;\n\
    10 +         odd += 1;\n   | \n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd = 0;\n    let mut even = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        num = num / 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpzxvnf9d1.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        return (num, 0);\n    }\n    let mut num_bytes\
    \ = num.to_le_bytes();\n    if num_bytes[1] % 2 == 0 {\n        // If there is\
    \ an odd digit, subtract that many bytes from the original `num` variable\n  \
    \      num_bytes -= num_bytes[1];\n    }\n    (num_bytes[1] / 2, num_bytes[0]\
    \ / 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `-=` cannot be applied to type\
    \ `[u8; 8]`\n  --> /tmp/tmpt41etnsc.rs:12:9\n   |\n12 |         num_bytes -= num_bytes[1];\n\
    \   |         ---------^^^^^^^^^^^^^^^^\n   |         |\n   |         cannot use\
    \ `-=` on type `[u8; 8]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt41etnsc.rs:14:6\n\
    \   |\n14 |     (num_bytes[1] / 2, num_bytes[0] / 2)\n   |      ^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `u8`\n   |\nhelp: you can convert a `u8` to an `isize`\n\
    \   |\n14 |     ((num_bytes[1] / 2).into(), num_bytes[0] / 2)\n   |      +   \
    \             ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt41etnsc.rs:14:24\n\
    \   |\n14 |     (num_bytes[1] / 2, num_bytes[0] / 2)\n   |                   \
    \     ^^^^^^^^^^^^^^^^ expected `isize`, found `u8`\n   |\nhelp: you can convert\
    \ a `u8` to an `isize`\n   |\n14 |     (num_bytes[1] / 2, (num_bytes[0] / 2).into())\n\
    \   |                        +                ++++++++\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num % 2 == 0 {\n        (num / 2, num / 2)\n    } else {\n       \
    \ (num / 2, num % 2)\n    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 1)`,\n right: `(0, 1)`', /tmp/tmpzzs9iw9c.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n\n    for digit\
    \ in num.iter().cloned() {\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n\n \
    \   (even_count, odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpcifj7zrv.rs:9:22\n  |\n9 |     for digit in num.iter().cloned()\
    \ {\n  |                      ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num_even = 0;\n    let mut num_odd = 0;\n\n    while num > 0\
    \ {\n        if num % 2 == 0 {\n            num_even += 1;\n            num /=\
    \ 2;\n        } else {\n            num_odd += 1;\n            num -= 1;\n   \
    \     }\n    }\n\n    (num_even, num_odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpvsi7b82a.rs:12:13\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n12 |\
    \             num /= 2;\n   |             ^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpvsi7b82a.rs:15:13\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \             num -= 1;\n   |             ^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd = 1;\n    let mut even = 1;\n\n    for n in num.abs() {\n\
    \        if n % 2 == 0 {\n            even *= 2;\n        } else {\n         \
    \   odd *= 2;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `isize` is not an iterator\n --> /tmp/tmpy4plurnc.rs:9:14\n\
    \  |\n9 |     for n in num.abs() {\n  |              ^^^^^^^^^ `isize` is not\
    \ an iterator\n  |\n  = help: the trait `Iterator` is not implemented for `isize`\n\
    \  = note: if you want to iterate between `start` until a value `end`, use the\
    \ exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n\
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num % 2 == 0, num % 3 == 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1ab2_aes.rs:6:6\n  |\n6 |\
    \     (num % 2 == 0, num % 3 == 0)\n  |      ^^^^^^^^^^^^ expected `isize`, found\
    \ `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1ab2_aes.rs:6:20\n  |\n\
    6 |     (num % 2 == 0, num % 3 == 0)\n  |                    ^^^^^^^^^^^^ expected\
    \ `isize`, found `bool`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut nums = num.to_string().chars().collect::<Vec<_>>();\n    let\
    \ len = nums.len();\n    let mut even = 0;\n    let mut odd = 0;\n    for i in\
    \ 0..len {\n        if nums[i] == '0' {\n            even += 1;\n        }\n \
    \       if nums[i] != '0' {\n            odd += 1;\n        }\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 3)`,\n right: `(1, 1)`', /tmp/tmpyyg4wjfj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n\n    let mut num_str = String::from(*num);\n\
    \    loop {\n        let mut digit = num_str.chars().nth(0).unwrap();\n\n    \
    \    if digit == '0' {\n            even = even * 10;\n            if even % 2\
    \ == 0 {\n                even += 1;\n            }\n        } else {\n      \
    \      odd = odd + 1;\n        }\n\n        num_str = num_str.chars().skip(1).collect();\n\
    \        if num_str.len() < 1 {\n            break;\n        }\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpooylgty0.rs:9:36\n\
    \  |\n9 |     let mut num_str = String::from(*num);\n  |                     \
    \               ^^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0, odd = 0, last_odd = num % 10;\n\n    while num != 0\
    \ {\n        last_odd /= 10;\n        even += last_odd % 2 == 0;\n        odd\
    \ += last_odd % 2 != 0;\n        num = num / 10;\n    }\n\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmpryrepgzw.rs:6:21\n  |\n6 |     let mut even = 0, odd = 0, last_odd\
    \ = num % 10;\n  |                     ^ expected one of `.`, `;`, `?`, `else`,\
    \ or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num % 2 == 0, num % 3 == 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp2b7067m.rs:6:6\n  |\n6 |\
    \     (num % 2 == 0, num % 3 == 0)\n  |      ^^^^^^^^^^^^ expected `isize`, found\
    \ `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpp2b7067m.rs:6:20\n  |\n\
    6 |     (num % 2 == 0, num % 3 == 0)\n  |                    ^^^^^^^^^^^^ expected\
    \ `isize`, found `bool`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num % 2, num / 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 3)`,\n right: `(0, 1)`', /tmp/tmp8i7xr0h7.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num == 0 {\n        return (1, 1);\n    }\n\n    if num < 0 {\n  \
    \      return (1, 0);\n    }\n\n    // binary search\n    let mut lo = 0;\n  \
    \  let mut hi = num;\n\n    while lo < hi {\n        let mid = lo + hi / 2;\n\n\
    \        // break when reach the middle\n        if mid == 0 {\n            break;\n\
    \        }\n\n        // if mid is even\n        if num % mid == 0 {\n       \
    \     return (mid, 1);\n        }\n\n        // if mid is odd\n        if num\
    \ % mid != 0 {\n            lo = mid + 1;\n        }\n    }\n\n    // reaches\
    \ the middle\n    (lo, num / lo)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 1)`,\n right: `(0, 1)`', /tmp/tmpg1xtcs79.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in num.digits().iter()\
    \ {\n        if i % 2 == 0 {\n            even += 1;\n        } else {\n     \
    \       odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp3wcrhibz.rs:8:18\n  |\n8 |     for i in num.digits().iter()\
    \ {\n  |                  ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd_count = 0;\n    let mut even_count = 0;\n\n    for digit\
    \ in num.digits() { //iterate through digits in num\n        if digit % 2 == 0\
    \ {\n            even_count += 1;\n        } else {\n            odd_count +=\
    \ 1;\n        }\n    }\n\n    (odd_count, even_count)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpuqnqqpav.rs:9:22\n  |\n9 |     for digit in num.digits()\
    \ { //iterate through digits in num\n  |                      ^^^^^^ method not\
    \ found in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut nums = String::new();\n    let mut evens = String::new();\n \
    \   let mut odds = String::new();\n    for x in num.abs() {\n        if x % 2\
    \ == 0 {\n            evens.push_str(&x.to_string());\n        } else {\n    \
    \        odds.push_str(&x.to_string());\n        }\n    }\n    (evens.len() as\
    \ isize, odds.len() as isize)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `isize` is not an iterator\n --> /tmp/tmpi9tluxpr.rs:9:14\n\
    \  |\n9 |     for x in num.abs() {\n  |              ^^^^^^^^^ `isize` is not\
    \ an iterator\n  |\n  = help: the trait `Iterator` is not implemented for `isize`\n\
    \  = note: if you want to iterate between `start` until a value `end`, use the\
    \ exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n\
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    for d in num_digits(num)\
    \ {\n        match d {\n            0 => {},\n            1 => { even += 1 },\n\
    \            2 => { odd += 1 },\n            _ => {},\n        }\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `num_digits` in this scope\n --> /tmp/tmprf_yip40.rs:8:14\n\
    \  |\n8 |     for d in num_digits(num) {\n  |              ^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0, odd = 0;\n    let mut num_copy = num;\n    while num_copy\
    \ > 0 {\n        let digit = num_copy % 10;\n        num_copy /= 10;\n       \
    \ if digit % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmppeq2bbvu.rs:6:21\n  |\n6 |     let mut even = 0, odd = 0;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  num = num % 10;\n        if num == 2 {\n            even += 1;\n        } else\
    \ {\n            odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n --> /tmp/tmpuwy02ho3.rs:9:9\n\
    \  |\n5 | fn even_odd_count(num: isize) -> (isize, isize) {\n  |             \
    \      --- help: consider making this binding mutable: `mut num`\n...\n9 |   \
    \      num = num % 10;\n  |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n\n    loop {\n        if num\
    \ % 2 == 0 {\n            even = even + 1;\n            num = (num / 2) as isize;\n\
    \        } else {\n            odd = odd + 1;\n            num = (num / 2) as\
    \ isize;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: unreachable expression\n  --> /tmp/tmp7rmvavdu.rs:18:5\n   |\n\
    9  | /     loop {\n10 | |         if num % 2 == 0 {\n11 | |             even =\
    \ even + 1;\n12 | |             num = (num / 2) as isize;\n...  |\n16 | |    \
    \     }\n17 | |     }\n   | |_____- any code following this expression is unreachable\n\
    18 |       (even, odd)\n   |       ^^^^^^^^^^^ unreachable expression\n   |\n\
    \   = note: `#[warn(unreachable_code)]` on by default\n\nerror[E0384]: cannot\
    \ assign to immutable argument `num`\n  --> /tmp/tmp7rmvavdu.rs:12:13\n   |\n\
    5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                 \
    \  --- help: consider making this binding mutable: `mut num`\n...\n12 |      \
    \       num = (num / 2) as isize;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror[E0384]: cannot assign to immutable argument\
    \ `num`\n  --> /tmp/tmp7rmvavdu.rs:15:13\n   |\n5  | fn even_odd_count(num: isize)\
    \ -> (isize, isize) {\n   |                   --- help: consider making this binding\
    \ mutable: `mut num`\n...\n15 |             num = (num / 2) as isize;\n   |  \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign to immutable argument\n\nerror:\
    \ aborting due to 2 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 1;\n    let mut odd_count = 1;\n\n    if num < 0\
    \ {\n        even_count = (num / 2) * 2;\n        num -= even_count as isize;\n\
    \    }\n\n    for x in num {\n        match x % 10 {\n            0 => {},\n \
    \           x => match x % 10 {\n                0 => odd_count,\n           \
    \     _ => even_count,\n            },\n        }\n    }\n\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `isize` is not an iterator\n  --> /tmp/tmp2sie74ym.rs:14:14\n\
    \   |\n14 |     for x in num {\n   |              ^^^ `isize` is not an iterator\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `isize`\n   = note:\
    \ if you want to iterate between `start` until a value `end`, use the exclusive\
    \ range syntax `start..end` or the inclusive range syntax `start..=end`\n   =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `isize`\n\nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp2sie74ym.rs:17:18\n\
    \   |\n15 |           match x % 10 {\n   |           ------------ `match` arms\
    \ have incompatible types\n16 |               0 => {},\n   |                 \
    \   -- this is found to be of type `()`\n17 |               x => match x % 10\
    \ {\n   |  __________________^\n18 | |                 0 => odd_count,\n19 | |\
    \                 _ => even_count,\n20 | |             },\n   | |_____________^\
    \ expected `()`, found `isize`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num.count_digits() - num.count_zeros() as isize, num.count_ones() as\
    \ isize)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `count_digits` found for type `isize` in\
    \ the current scope\n --> /tmp/tmpana37p4n.rs:6:10\n  |\n6 |     (num.count_digits()\
    \ - num.count_zeros() as isize, num.count_ones() as isize)\n  |          ^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `count_ones`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd_count = 0;\n    let mut even_count = 0;\n\n    let mut num\
    \ = num;\n\n    while num != 0 {\n        let remainder = num % 10;\n\n      \
    \  if remainder % 2 == 0 {\n            even_count += 1;\n        } else {\n \
    \           odd_count += 1;\n        }\n\n        num /= 10;\n    }\n\n    (even_count,\
    \ odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmphp07dkzk.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even, odd = 0, 0;\n    while num > 0 {\n        even += num &\
    \ 1;\n        odd += ((num >> 1) & 1);\n        num >>= 1;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error: unexpected `,` in pattern\n --> /tmp/tmpr__p8tsy.rs:6:17\n  |\n\
    6 |     let mut even, odd = 0, 0;\n  |                 ^\n  |\nhelp: try adding\
    \ parentheses to match on a tuple\n  |\n6 |     let (mut even, odd) = 0, 0;\n\
    \  |         +             +\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num <= 0 {\n        (num, 0)\n    } else {\n        even_odd_count_helper(num,\
    \ num % 2 == 0)\n    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `even_odd_count_helper` in this scope\n\
    \ --> /tmp/tmp6z3yljsu.rs:9:9\n  |\n9 |         even_odd_count_helper(num, num\
    \ % 2 == 0)\n  |         ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0, odd = 0;\n    while num > 0 {\n        let remainder\
    \ = num % 10;\n        even = even * 10 + remainder;\n        odd = odd + 1;\n\
    \        num = num / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmp2z01kmgy.rs:6:21\n  |\n6 |     let mut even = 0, odd = 0;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num <= 0 {\n        return (0, 0)\n    }\n    let mut nums: Vec<_>\
    \ = num.to_digits().collect();\n    let mut even: isize = 0;\n    let mut odd:\
    \ isize = 0;\n    for i in nums.iter() {\n        if i % 2 == 0 {\n          \
    \  even = even + 1;\n        } else {\n            odd = odd + 1;\n        }\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpsicfrvyv.rs:9:32\n  |\n9 |     let mut nums: Vec<_>\
    \ = num.to_digits().collect();\n  |                                ^^^^^^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    fn check(i: isize) -> (isize, isize) {\n        if i > 0 {\n        \
    \    if i % 2 == 0 {\n                return (i + 1, i / 2);\n            } else\
    \ {\n                return (i / 2, i + 1);\n            }\n        }\n      \
    \  (i, i);\n    }\n    (check(*num).0, check(*num + 1).0)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpri05cf1j.rs:16:12\n\
    \   |\n16 |     (check(*num).0, check(*num + 1).0)\n   |            ^^^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpri05cf1j.rs:16:27\n   |\n\
    16 |     (check(*num).0, check(*num + 1).0)\n   |                           ^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpri05cf1j.rs:6:27\n   |\n6  | \
    \    fn check(i: isize) -> (isize, isize) {\n   |        -----              ^^^^^^^^^^^^^^\
    \ expected tuple, found `()`\n   |        |\n   |        implicitly returns `()`\
    \ as its body has no tail or `return` expression\n...\n14 |         (i, i);\n\
    \   |               - help: remove this semicolon\n   |\n   = note:  expected\
    \ tuple `(isize, isize)`\n           found unit type `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        panic!(\"cannot get even and odd count for a negative\
    \ number\")\n    }\n\n    let mut even_count = 0;\n    let mut odd_count = 0;\n\
    \n    let mut val = num;\n    while val > 0 {\n        val /= 10;\n        even_count\
    \ += 1;\n        val %= 10;\n    }\n\n    let mut val = num;\n    while val >\
    \ 0 {\n        val /= 10;\n        odd_count += 1;\n        val %= 10;\n    }\n\
    \n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 1)`,\n right: `(0, 1)`', /tmp/tmphm0c4lvl.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0, odd = 0;\n    for n in num {\n        if n % 2 == 0\
    \ {\n            even += n;\n        } else {\n            odd += n;\n       \
    \ }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmpjf_vfxoh.rs:6:21\n  |\n6 |     let mut even = 0, odd = 0;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    // Even and Odd count logic from here https://github.com/google/leveldb/tree/master/doc/leveldb-overview-slides.pdf\n\
    \    let mut odd_count = 0;\n    let mut even_count = 0;\n\n    let digits = num.to_digits();\n\
    \    let mut digits_len = digits.length;\n\n    while digits_len > 0 {\n     \
    \   let digit = digits.pop();\n\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n\n        digits_len\
    \ -= 1;\n    }\n\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpfsqqrymf.rs:10:22\n   |\n10 |     let digits =\
    \ num.to_digits();\n   |                      ^^^^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  if num % 2 == 0 {\n            even += 1;\n        }\n        else {\n    \
    \        odd += 1;\n        }\n        num /= 2;\n    }\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpsf517l3z.rs:15:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n\n    while num\
    \ > 0 {\n        num /= 10;\n        even_count += 1;\n        odd_count += num\
    \ % 10 == 0 as isize;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmpbrcm9jcc.rs:12:19\n\
    \   |\n12 |         odd_count += num % 10 == 0 as isize;\n   |               \
    \    ^^ no implementation for `{integer} += bool`\n   |\n   = help: the trait\
    \ `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut evens = 0.0;\n    let mut odds = 0.0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            evens\
    \ += 1;\n        } else {\n            odds += 1;\n        }\n        num = num\
    \ / 10;\n    }\n    (evens, odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `{integer}` to `{float}`\n  --> /tmp/tmphe0pzcww.rs:11:19\n\
    \   |\n11 |             evens += 1;\n   |                   ^^ no implementation\
    \ for `{float} += {integer}`\n   |\n   = help: the trait `AddAssign<{integer}>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `{integer}` to `{float}`\n\
    \  --> /tmp/tmphe0pzcww.rs:13:18\n   |\n13 |             odds += 1;\n   |    \
    \              ^^ no implementation for `{float} += {integer}`\n   |\n   = help:\
    \ the trait `AddAssign<{integer}>` is not implemented for `{float}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphe0pzcww.rs:17:6\n   |\n17 |     (evens, odds)\n   |  \
    \    ^^^^^ expected `isize`, found floating-point number\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphe0pzcww.rs:17:13\n   |\n17 |     (evens, odds)\n   | \
    \            ^^^^ expected `isize`, found floating-point number\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        panic!(\"Negative number not allowed\")\n    }\n\
    \    let mut num1 = num;\n    let mut num_odd: isize = 0;\n    let mut num_even:\
    \ isize = 0;\n    while num1 > 0 {\n        let div = num1 as isize / 10;\n  \
    \      num1 -= div * 10;\n        if div % 2 != 0 {\n            num_even += 1;\n\
    \        } else {\n            num_odd += 1;\n        }\n    }\n    (num_even,\
    \ num_odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0, odd = 0;\n    while num > 0 {\n        let tmp = num\
    \ % 10;\n        if tmp % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        num = num / 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmpe3sb8jhs.rs:6:21\n  |\n6 |     let mut even = 0, odd = 0;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0 as isize;\n    let mut odd_count = 0 as isize;\n\
    \    while num > 0 {\n        if num % 2 == 0 {\n            even_count += 1;\n\
    \        } else {\n            odd_count += 1;\n        }\n        num = num /\
    \ 2;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpviw17qa9.rs:14:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = num / 10;\n    let mut odd = num % 10;\n\n    while even\
    \ < 10 {\n        even += 2;\n        odd -= 1;\n    }\n\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(10, 2)`,\n right: `(0, 1)`', /tmp/tmp61f3lk3m.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    debug_assert!(num >= 0);\n    let mut even = 0;\n    let mut odd = 0;\n\
    \    let mut tmp = num;\n    while tmp > 0 {\n        even = tmp % 10;\n     \
    \   tmp = tmp / 10;\n        odd = odd + 1;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 1)`,\n right: `(0, 1)`', /tmp/tmp9rd9a1ry.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut odd_count = 0;\n    let mut even_count = 0;\n    for _ in 0..=num\
    \ {\n        if num % 2 == 0 {\n            even_count++;\n        }\n       \
    \ else {\n            odd_count++;\n        }\n    }\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp35mfrw4_.rs:10:23\n\
    \   |\n10 |             even_count++;\n   |                       ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n10 |             { let\
    \ tmp = even_count; even_count += 1; tmp };\n   |             +++++++++++    \
    \       ~~~~~~~~~~~~~~~~~~~~~~~~\n10 -             even_count++;\n10 +       \
    \      even_count += 1;\n   | \n\nerror: Rust has no postfix increment operator\n\
    \  --> /tmp/tmp35mfrw4_.rs:13:22\n   |\n13 |             odd_count++;\n   |  \
    \                    ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n\
    \   |\n13 |             { let tmp = odd_count; odd_count += 1; tmp };\n   |  \
    \           +++++++++++          ~~~~~~~~~~~~~~~~~~~~~~~\n13 -             odd_count++;\n\
    13 +             odd_count += 1;\n   | \n\nerror: aborting due to 2 previous errors\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut evens = 0.;\n    let mut odds = 0.;\n    let mut i = num;\n \
    \   while i >= 0 {\n        let digit = i % 10;\n        if digit % 2 == 0 {\n\
    \            evens += 1;\n        } else {\n            odds += 1;\n        }\n\
    \        i /= 10;\n    }\n    (evens, odds)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `{integer}` to `{float}`\n  --> /tmp/tmp9mscglcj.rs:12:19\n\
    \   |\n12 |             evens += 1;\n   |                   ^^ no implementation\
    \ for `{float} += {integer}`\n   |\n   = help: the trait `AddAssign<{integer}>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `{integer}` to `{float}`\n\
    \  --> /tmp/tmp9mscglcj.rs:14:18\n   |\n14 |             odds += 1;\n   |    \
    \              ^^ no implementation for `{float} += {integer}`\n   |\n   = help:\
    \ the trait `AddAssign<{integer}>` is not implemented for `{float}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9mscglcj.rs:18:6\n   |\n18 |     (evens, odds)\n   |  \
    \    ^^^^^ expected `isize`, found floating-point number\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9mscglcj.rs:18:13\n   |\n18 |     (evens, odds)\n   | \
    \            ^^^^ expected `isize`, found floating-point number\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut evens = 0;\n    let mut odds = 0;\n\n    while num > 0 {\n  \
    \      if num % 2 == 0 {\n            evens += 1;\n        }\n        if num %\
    \ 2 != 0 {\n            odds += 1;\n        }\n        num -= 1;\n    }\n    (evens,\
    \ odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp0x67pdcu.rs:16:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num -= 1;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        return (0, 0);\n    }\n\n    if num == 0 {\n  \
    \      return (0, 0);\n    }\n\n    // get all factors of the number\n    let\
    \ factors = factorize(&num);\n\n    // get all even factors\n    let even_factors:\
    \ Vec<_> = factors.iter().filter(|x| x.is_odd()).collect();\n\n    // get all\
    \ odd factors\n    let odd_factors: Vec<_> = factors.iter().filter(|x| !x.is_odd()).collect();\n\
    \n    // return the count\n    (even_factors.len(), odd_factors.len())\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `factorize` in this scope\n  --> /tmp/tmp75bcrzsj.rs:15:19\n\
    \   |\n15 |     let factors = factorize(&num);\n   |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp75bcrzsj.rs:24:6\n\
    \   |\n24 |     (even_factors.len(), odd_factors.len())\n   |      ^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n24 |     (even_factors.len().try_into().unwrap(),\
    \ odd_factors.len())\n   |                        ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp75bcrzsj.rs:24:26\n   |\n24 |     (even_factors.len(),\
    \ odd_factors.len())\n   |                          ^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n24 |     (even_factors.len(),\
    \ odd_factors.len().try_into().unwrap())\n   |                               \
    \            ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n\n    while num\
    \ > 0 {\n        let d = num % 10;\n        odd_count += d % 2 != 0;\n       \
    \ even_count = d % 2 == 0 ? even_count + 1 : even_count;\n        num = num /\
    \ 10;\n    }\n\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `even_count`\n\
    \  --> /tmp/tmpx597txfv.rs:12:35\n   |\n12 |         even_count = d % 2 == 0 ?\
    \ even_count + 1 : even_count;\n   |                                   ^^^^^^^^^^\
    \ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0277]: cannot add-assign\
    \ `bool` to `{integer}`\n  --> /tmp/tmpx597txfv.rs:11:19\n   |\n11 |         odd_count\
    \ += d % 2 != 0;\n   |                   ^^ no implementation for `{integer} +=\
    \ bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0 as isize;\n    let mut odd_count = 0 as isize;\n\
    \    let mut num = num as isize;\n    while num > 0 {\n        if num % 2 == 0\
    \ {\n            even_count += 1;\n        } else {\n            odd_count +=\
    \ 1;\n        }\n        num = (num / 2) as isize;\n    }\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 3)`,\n right: `(0, 1)`', /tmp/tmpjukxuu4q.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even: isize = 0;\n    let mut odd: isize = 0;\n    loop {\n \
    \       if num % 2 == 0 {\n            even += 1;\n        } else {\n        \
    \    odd += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: unreachable expression\n  --> /tmp/tmpel6pbf5p.rs:16:5\n   |\n\
    8  | /     loop {\n9  | |         if num % 2 == 0 {\n10 | |             even +=\
    \ 1;\n11 | |         } else {\n...  |\n14 | |         num = num / 2;\n15 | | \
    \    }\n   | |_____- any code following this expression is unreachable\n16 | \
    \      (even, odd)\n   |       ^^^^^^^^^^^ unreachable expression\n   |\n   =\
    \ note: `#[warn(unreachable_code)]` on by default\n\nwarning: variable `even`\
    \ is assigned to, but never used\n --> /tmp/tmpel6pbf5p.rs:6:13\n  |\n6 |    \
    \ let mut even: isize = 0;\n  |             ^^^^\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n  = note: consider using `_even` instead\n\nwarning: variable\
    \ `odd` is assigned to, but never used\n --> /tmp/tmpel6pbf5p.rs:7:13\n  |\n7\
    \ |     let mut odd: isize = 0;\n  |             ^^^\n  |\n  = note: consider\
    \ using `_odd` instead\n\nerror[E0384]: cannot assign to immutable argument `num`\n\
    \  --> /tmp/tmpel6pbf5p.rs:14:9\n   |\n5  | fn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n   |                   --- help: consider making this binding mutable:\
    \ `mut num`\n...\n14 |         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error; 3 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even, odd = 0, 0;\n    for i in num {\n        if i % 2 == 0\
    \ {\n            even += 1;\n        } else {\n            odd += 1;\n       \
    \ }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error: unexpected `,` in pattern\n --> /tmp/tmplk_hsac2.rs:6:17\n  |\n\
    6 |     let mut even, odd = 0, 0;\n  |                 ^\n  |\nhelp: try adding\
    \ parentheses to match on a tuple\n  |\n6 |     let (mut even, odd) = 0, 0;\n\
    \  |         +             +\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_counter = 0;\n    let mut odd_counter = 0;\n    for &d in\
    \ num.digits() as &[u8] {\n        if *d % 2 == 0 {\n            even_counter\
    \ += 1;\n        } else {\n            odd_counter += 1;\n        }\n    }\n \
    \   (even_counter, odd_counter)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpas26vemp.rs:8:19\n  |\n8 |     for &d in num.digits() as\
    \ &[u8] {\n  |                   ^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0isize;\n    let mut odd = 0isize;\n    while num > 0\
    \ {\n        let digit = num % 10;\n        num = num / 10;\n        if digit\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp95yxw734.rs:10:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n10 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 1;\n    \n    let mut remainder\
    \ = num;\n    while remainder > 0 {\n        remainder, remainder = remainder\
    \ / 10, remainder % 10;\n        if remainder % 2 == 0 {\n            even +=\
    \ 1;\n        } else {\n            odd += 1;\n        }\n    }\n\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found `,`\n  --> /tmp/tmp6x12wekn.rs:11:18\n   |\n11 |         remainder, remainder\
    \ = remainder / 10, remainder % 10;\n   |                  ^ expected one of 8\
    \ possible tokens\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        panic!(\n            \"The value passed to even_odd_count\
    \ is negative. Should be greater than zero.\"\n        );\n    }\n    let mut\
    \ even = num;\n    let mut odd = num;\n    while even % 2 == 0 {\n        even\
    \ /= 2;\n        odd *= 2;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 7)`,\n right: `(0, 1)`', /tmp/tmp9j8sl_09.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit = 0;\n   \
    \ for digit in num.to_str().chars() {\n        match digit {\n            '0'\
    \ => even += 1,\n            '1' => odd += 1,\n            _ => (),\n        }\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_str` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpj7_yh_kk.rs:9:22\n  |\n9 |     for digit in num.to_str().chars()\
    \ {\n  |                      ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    while num > 0 {\n      \
    \  let digit = num % 10;\n        num = num / 10;\n        if digit % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpq5b60ndi.rs:10:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n10 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut count = 0;\n    let mut odd_count = 0;\n    while num > 0 {\n\
    \        count += 1;\n        num /= 10;\n    }\n    for _ in 0..(count as usize)\
    \ {\n        odd_count += 1;\n    }\n    (count, odd_count)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp5o091j5x.rs:10:9\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n10 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num <= 0 {\n        (0,0)\n    } else {\n        let mut even = 0;\n\
    \        let mut odd = 0;\n        while num > 0 {\n            let rem = num\
    \ % 10;\n            if rem % 2 == 0 {\n                even = even * 10 + rem;\n\
    \            } else {\n                odd = odd * 10 + rem;\n            }\n\
    \            num = num / 10;\n        }\n        (even, odd)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpl8reilr0.rs:18:13\n\
    \   |\n5  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n18 |\
    \             num = num / 10;\n   |             ^^^^^^^^^^^^^^ cannot assign to\
    \ immutable argument\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        panic!(\"Input value cannot be < 0\");\n    }\n\
    \    let mut odd = 1;\n    let mut even = 0;\n    for &i in &num {\n        if\
    \ i % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `&isize` is not an iterator\n  --> /tmp/tmpv12puzay.rs:11:15\n\
    \   |\n11 |     for &i in &num {\n   |               ^^^^ `&isize` is not an iterator\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `&isize`\n   = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `&isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num % 10, num % 100 % 10).pairs().enumerate().map(|(i, &i)| (i[1], i[0]))\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0415]: identifier `i` is bound more than once in this parameter\
    \ list\n --> /tmp/tmpatcekr4o.rs:6:62\n  |\n6 |     (num % 10, num % 100 % 10).pairs().enumerate().map(|(i,\
    \ &i)| (i[1], i[0]))\n  |                                                    \
    \          ^ used as parameter more than once\n\nerror[E0599]: no method named\
    \ `pairs` found for tuple `(isize, isize)` in the current scope\n --> /tmp/tmpatcekr4o.rs:6:32\n\
    \  |\n6 |     (num % 10, num % 100 % 10).pairs().enumerate().map(|(i, &i)| (i[1],\
    \ i[0]))\n  |                                ^^^^^ method not found in `(isize,\
    \ isize)`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0415, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0415`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut result = (0, 0);\n    let mut digits = num.clone(); // clone()\
    \ is required because num is a local variable\n    while num > 0 {\n        digits\
    \ = num % 10;\n        if digits % 2 == 0 {\n            (*result) += (1, 0);\n\
    \        }\n        if digits % 2 == 1 {\n            (*result) += (0, 1);\n \
    \       }\n        num = (num - digits) / 10;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `({integer}, {integer})` cannot be dereferenced\n  -->\
    \ /tmp/tmp5lo59ah4.rs:11:13\n   |\n11 |             (*result) += (1, 0);\n   |\
    \             ^^^^^^^^^\n\nerror[E0614]: type `({integer}, {integer})` cannot\
    \ be dereferenced\n  --> /tmp/tmp5lo59ah4.rs:14:13\n   |\n14 |             (*result)\
    \ += (0, 1);\n   |             ^^^^^^^^^\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut evens = 1;\n    let mut odds = 1;\n\n    for i in 2..num {\n\
    \        if i % 2 == 0 {\n            evens *= i;\n        } else {\n        \
    \    odds *= i;\n        }\n    }\n\n    (evens, odds)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(48, 15)`,\n right: `(0, 1)`', /tmp/tmp3_hkid6a.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut nums = num.to_digits();\n    let odd = nums.filter(|&x| x % 2\
    \ != 0);\n    let even = nums.filter(|&x| x % 2 == 0);\n    (even.len(), odd.len())\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpy1r_jfrj.rs:6:24\n  |\n6 |     let mut nums = num.to_digits();\n\
    \  |                        ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in num.abs() {\n \
    \       even += i & 1;\n        odd += (i >> 1) & 1;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `isize` is not an iterator\n --> /tmp/tmpzgsb6nzq.rs:8:14\n\
    \  |\n8 |     for i in num.abs() {\n  |              ^^^^^^^^^ `isize` is not\
    \ an iterator\n  |\n  = help: the trait `Iterator` is not implemented for `isize`\n\
    \  = note: if you want to iterate between `start` until a value `end`, use the\
    \ exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n\
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut nums = Vec::new();\n    let mut num_odd = 1;\n    let mut num_even\
    \ = 1;\n    for &n in num {\n        if n % 2 == 0 {\n            num_even +=\
    \ 1;\n        } else {\n            num_odd += 1;\n        }\n        nums.push(n);\n\
    \    }\n    (num_even, num_odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `isize` is not an iterator\n --> /tmp/tmpcqplmnoe.rs:9:15\n\
    \  |\n9 |     for &n in num {\n  |               ^^^ `isize` is not an iterator\n\
    \  |\n  = help: the trait `Iterator` is not implemented for `isize`\n  = note:\
    \ if you want to iterate between `start` until a value `end`, use the exclusive\
    \ range syntax `start..end` or the inclusive range syntax `start..=end`\n  = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    while num >\
    \ 0 {\n        let mut remainder = num % 10;\n        num = num / 10;\n      \
    \  if remainder % 2 == 0 {\n            even_count = even_count*10 + remainder;\n\
    \        }\n        else {\n            odd_count = odd_count*10 + remainder;\n\
    \        }\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpw2tgomyg.rs:9:13\n\
    \  |\n9 |         let mut remainder = num % 10;\n  |             ----^^^^^^^^^\n\
    \  |             |\n  |             help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0384]: cannot assign to immutable argument `num`\n \
    \ --> /tmp/tmpw2tgomyg.rs:10:9\n   |\n5  | fn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n   |                   --- help: consider making this binding mutable:\
    \ `mut num`\n...\n10 |         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num = 0 - num;\n    let mut count = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            count += 1;\n        }\n        num -=\
    \ 1;\n    }\n    (count, count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpsvlhg5zb.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    if num < 0 {\n        return (0, 0);\n    }\n\n    let mut odd_count\
    \ = 0;\n    let mut even_count = 0;\n\n    for i in 0..num {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even_count += 1;\n   \
    \     } else {\n            odd_count += 1;\n        }\n\n        num = num /\
    \ 10;\n    }\n\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `i`\n  --> /tmp/tmp54z6v4o_.rs:13:9\n   |\n13\
    \ |     for i in 0..num {\n   |         ^ help: if this is intentional, prefix\
    \ it with an underscore: `_i`\n   |\n   = note: `#[warn(unused_variables)]` on\
    \ by default\n\nerror[E0384]: cannot assign to immutable argument `num`\n  -->\
    \ /tmp/tmp54z6v4o_.rs:21:9\n   |\n5  | fn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n   |                   --- help: consider making this binding mutable:\
    \ `mut num`\n...\n21 |         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num % 2, num / 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 3)`,\n right: `(0, 1)`', /tmp/tmpy3yvo9ab.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    // First we compute the number of digits in the number\n    let mut num_digits\
    \ = num.count_digits();\n\n    // Then we compute the number of even and odd digits\n\
    \    let num_odd = num_digits / 2;\n    let num_even = num_digits - num_odd;\n\
    \n    (num_even, num_odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `count_digits` found for type `isize` in\
    \ the current scope\n --> /tmp/tmplcynwso4.rs:7:30\n  |\n7 |     let mut num_digits\
    \ = num.count_digits();\n  |                              ^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `count_ones`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (num.count_digits() - num_digits(num) % num_digits(num) / 2, num.count_digits()\
    \ % num_digits(num))\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `num_digits` in this scope\n --> /tmp/tmpt01e5ma6.rs:6:27\n\
    \  |\n6 |     (num.count_digits() - num_digits(num) % num_digits(num) / 2, num.count_digits()\
    \ % num_digits(num))\n  |                           ^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `num_digits` in this scope\n -->\
    \ /tmp/tmpt01e5ma6.rs:6:45\n  |\n6 |     (num.count_digits() - num_digits(num)\
    \ % num_digits(num) / 2, num.count_digits() % num_digits(num))\n  |          \
    \                                   ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `num_digits` in this scope\n --> /tmp/tmpt01e5ma6.rs:6:87\n\
    \  |\n6 |     (num.count_digits() - num_digits(num) % num_digits(num) / 2, num.count_digits()\
    \ % num_digits(num))\n  |                                                    \
    \                                   ^^^^^^^^^^ not found in this scope\n\nerror[E0599]:\
    \ no method named `count_digits` found for type `isize` in the current scope\n\
    \ --> /tmp/tmpt01e5ma6.rs:6:10\n  |\n6 |     (num.count_digits() - num_digits(num)\
    \ % num_digits(num) / 2, num.count_digits() % num_digits(num))\n  |          ^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `count_ones`\n\n\
    error[E0599]: no method named `count_digits` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpt01e5ma6.rs:6:70\n  |\n6 |     (num.count_digits() - num_digits(num)\
    \ % num_digits(num) / 2, num.count_digits() % num_digits(num))\n  |          \
    \                                                            ^^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `count_ones`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let num_str = num.to_str_radix(2);\n    let mut num_even = num_str.chars().filter(|&c|\
    \ c != '0').count();\n    let mut num_odd = num_str.chars().filter(|&c| c == '0').count();\n\
    \    (*num_even, *num_odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_str_radix` found for type `isize` in\
    \ the current scope\n --> /tmp/tmpv1kdror_.rs:6:23\n  |\n6 |     let num_str =\
    \ num.to_str_radix(2);\n  |                       ^^^^^^^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even, odd = 0, 0;\n    while num > 0 {\n        even += num %\
    \ 2 == 0 ? 1 : 0;\n        odd += num % 2 != 0 ? 1 : 0;\n        num = num / 2;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error: unexpected `,` in pattern\n --> /tmp/tmpyhm1x3_4.rs:6:17\n  |\n\
    6 |     let mut even, odd = 0, 0;\n  |                 ^\n  |\nhelp: try adding\
    \ parentheses to match on a tuple\n  |\n6 |     let (mut even, odd) = 0, 0;\n\
    \  |         +             +\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut num_odd_digits = 0;\n    let mut num_even_digits = 0;\n    for\
    \ n in num.iter_digits() {\n        if n % 2 == 0 {\n            num_even_digits\
    \ += 1;\n        } else {\n            num_odd_digits += 1;\n        }\n    }\n\
    \    (num_even_digits, num_odd_digits)\n}\n\nfn main() {\n    let candidate =\
    \ even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpustl30f7.rs:8:18\n  |\n8 |     for n in num.iter_digits()\
    \ {\n  |                  ^^^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n\n    for n in num.to_digits().iter()\
    \ {\n        if n % 2 == 0 {\n            even_count += 1;\n        } else {\n\
    \            odd_count += 1;\n        }\n    }\n\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmph802j5jz.rs:9:18\n  |\n9 |     for n in num.to_digits().iter()\
    \ {\n  |                  ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
