name: HumanEval_104_unique_digits
language: rust
results:
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = vec![];\n \
    \   for &n in x {\n        let mut c = 1;\n        let mut i = 0;\n        let\
    \ mut pos = 1;\n        while n > 0 {\n            i = n * 10 + i;\n         \
    \   n /= 10;\n            pos += 1;\n        }\n        if c != 1 {\n        \
    \    res.push(pos + i);\n        }\n    }\n    res.sort();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1px1wg58.rs:11:9\n   |\n\
    11 |     for &n in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut even = Vec::new();\n\
    \    for &n in &x {\n        if n % 2 == 0 {\n            even.push(n);\n    \
    \    }\n    }\n    even.iter().cloned().collect();\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm724vgyo.rs:9:36\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |    -------------  \
    \                 ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n  \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    ...\n16 |     even.iter().cloned().collect();\n   |                          \
    \         - help: remove this semicolon\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut cur = x;\n    while !cur.is_empty() {\n        let digit = cur.pop();\n\
    \        for d in &mut result {\n            if *d < digit {\n               \
    \ continue;\n            }\n            *d = digit;\n            break;\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcxz_k3k9.rs:22:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    22 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n\
    \    for n in x {\n        if n % 2 == 0 {\n            v.push(n);\n        }\n\
    \    }\n    v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpmjn50dv0.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x.iter() {\n        if i % 2 == 0 && i !=0{\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmppgdr6gpv.rs:12:28\n\
    \   |\n12 |         if i % 2 == 0 && i !=0{\n   |                            ^^\
    \ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmppgdr6gpv.rs:17:5\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n17 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort();\n    let mut a\
    \ = vec![];\n    for i in x.iter() {\n        let mut j = 0;\n        let mut\
    \ b = 0;\n        if x[i] == 0 {\n            j = i;\n            i += 1;\n  \
    \          i += 1;\n            continue;\n        }\n        i += 1;\n      \
    \  while i < x.len() && x[i] > 0 {\n            if x[i] % 2 == 0 {\n         \
    \       j += 1;\n                i += 1;\n            } else {\n             \
    \   b += 1;\n                i += 1;\n            }\n        }\n        i += 1;\n\
    \        if j < b {\n            a.push(j);\n        }\n    }\n    a.sort();\n\
    \    a\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp85tamiw7.rs:15:12\n\
    \   |\n15 |         if x[i] == 0 {\n   |            ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp85tamiw7.rs:16:17\n\
    \   |\n13 |         let mut j = 0;\n   |                     - expected due to\
    \ this value\n...\n16 |             j = i;\n   |                 ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n16 |  \
    \           j = *i;\n   |                 +\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `&isize`\n  --> /tmp/tmp85tamiw7.rs:17:13\n\
    \   |\n17 |             i += 1;\n   |             -^^^^^\n   |             |\n\
    \   |             cannot use `+=` on type `&isize`\n   |\nhelp: `+=` can be used\
    \ on `isize`, you can dereference `i`\n   |\n17 |             *i += 1;\n   | \
    \            +\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `&isize`\n  --> /tmp/tmp85tamiw7.rs:18:13\n   |\n18 |             i\
    \ += 1;\n   |             -^^^^^\n   |             |\n   |             cannot\
    \ use `+=` on type `&isize`\n   |\nhelp: `+=` can be used on `isize`, you can\
    \ dereference `i`\n   |\n18 |             *i += 1;\n   |             +\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `&isize`\n  --> /tmp/tmp85tamiw7.rs:21:9\n\
    \   |\n21 |         i += 1;\n   |         -^^^^^\n   |         |\n   |       \
    \  cannot use `+=` on type `&isize`\n   |\nhelp: `+=` can be used on `isize`,\
    \ you can dereference `i`\n   |\n21 |         *i += 1;\n   |         +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp85tamiw7.rs:22:19\n   |\n22 |         while\
    \ i < x.len() && x[i] > 0 {\n   |                   ^^^^^^^ expected `&isize`,\
    \ found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isi"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for i in x.iter() {\n        let mut counter = 0;\n        for d in res.iter().skip(i)\
    \ {\n            if d % 10 == 0 {\n                counter++;\n            }\n\
    \        }\n        if counter == 0 {\n            res.push(i);\n        }\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpp6bessc7.rs:15:24\n\
    \   |\n15 |                 counter++;\n   |                        ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n15 |               \
    \  { let tmp = counter; counter += 1; tmp };\n   |                 +++++++++++\
    \        ~~~~~~~~~~~~~~~~~~~~~\n15 -                 counter++;\n15 +        \
    \         counter += 1;\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp6bessc7.rs:13:34\n\
    \   |\n13 |         for d in res.iter().skip(i) {\n   |                      \
    \            ^ expected `usize`, found `&isize`\n\nerror[E0277]: cannot mod `&&isize`\
    \ by `{integer}`\n  --> /tmp/tmpp6bessc7.rs:14:18\n   |\n14 |             if d\
    \ % 10 == 0 {\n   |                  ^ no implementation for `&&isize % {integer}`\n\
    \   |\n   = help: the trait `Rem<{integer}>` is not implemented for `&&isize`\n\
    \   = help: the following other types implement trait `Rem<Rhs>`:\n          \
    \   <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a\
    \ i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32\
    \ as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n\
    \             <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp6bessc7.rs:22:5\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n22 |     res\n   |     ^^^\
    \ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut s = HashSet::new();\n\
    \    x.iter().for_each(|&x| s.insert(x));\n    s.into_iter().filter(|x| *x % 2\
    \ == 0).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpyph0gb9r.rs:10:17\n   |\n10 |     let mut s = HashSet::new();\n   |\
    \                 ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut ans = vec![];\n \
    \   for d in x.iter().cloned() {\n        if d % 2 != 0 {\n            ans.push(d)\n\
    \        }\n    }\n    ans.sort();\n    ans\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[323]`,\n right: `[]`', /tmp/tmpes7gx98b.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort();\n    let mut result:\
    \ Vec<isize> = vec![];\n    for i in 0..x.len() {\n        if x[i].is_even() {\n\
    \            result.push(x[i]);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_even` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp8u81e6f2.rs:13:17\n   |\n13 |         if x[i].is_even()\
    \ {\n   |                 ^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|&x| {\n\
    \        let digit: usize = x.to_digits();\n        digit % 2 != 0\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n  --> /tmp/tmpo_crrnou.rs:11:30\n   |\n11 |         let\
    \ digit: usize = x.to_digits();\n   |                              ^^^^^^^^^ method\
    \ not found in `&isize`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpo_crrnou.rs:13:8\n\
    \     |\n13   |     }).collect()\n     |        ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut y: Vec<isize> = x.clone();\n\
    \    y.sort();\n    y.dedup();\n    y\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15, 33, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmpba0a27ld.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&x|\
    \ x > 0).map(|x| x as isize).collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp_aq63sog.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // Sort x in increasing order.\n\
    \    let mut x: Vec<_> = x.sort_by(|&a| a.clone());\n    let mut even: Vec<_>\
    \ = Vec::new();\n    let mut odd: Vec<_> = Vec::new();\n    \n    for v in x.iter()\
    \ {\n        if v % 2 == 0 {\n            even.push(v);\n        } else {\n  \
    \          odd.push(v);\n        }\n    }\n    \n    even.dedup();\n    odd.dedup();\n\
    \n    let mut result = even;\n    result.extend_from_slice(&odd);\n    \n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n\
    \  --> /tmp/tmp65_bfq1v.rs:11:27\n   |\n11 |     let mut x: Vec<_> = x.sort_by(|&a|\
    \ a.clone());\n   |                           ^^^^^^^ ---- takes 1 argument\n\
    \   |                           |\n   |                           expected closure\
    \ that takes 2 arguments\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp65_bfq1v.rs:11:25\n\
    \   |\n11 |     let mut x: Vec<_> = x.sort_by(|&a| a.clone());\n   |         \
    \       ------   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \   |                |\n   |                expected due to this\n   |\n   = note:\
    \ expected struct `Vec<_>`\n           found unit type `()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp65_bfq1v.rs:29:5\n   |\n9  | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                    ---------- expected\
    \ `Vec<isize>` because of return type\n...\n29 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found reference\n   |\n   = note: expected struct `Vec<isize>`\n  \
    \            found struct `Vec<&_>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0593.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.dedup().filter(|&x| x %\
    \ 2 == 0).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n  \
    \  assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmpduz77ji2.rs:10:15\n\
    \   |\n10 |     x.dedup().filter(|&x| x % 2 == 0).collect()\n   |            \
    \   ^^^^^^ `()` is not an iterator\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `(): Iterator`\n           which is required\
    \ by `&mut (): Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut y = vec![];\n   \
    \ for i in x {\n        if i % 2 == 0 {\n            y.push(i);\n        }\n \
    \   }\n    y\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpetcic3oq.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut digits = HashSet::new();\n\
    \    x.iter().map(|v| {\n        if digits.contains(v) {\n            None\n \
    \       } else {\n            digits.insert(v);\n            v\n        }\n  \
    \  }).filter(|v| v.is_some()).collect()\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpr80axcdp.rs:10:22\n   |\n10 |     let mut digits = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut nums: Vec<isize>\
    \ = x;\n    let mut n: isize = 0;\n    let mut num: isize = 0;\n    let mut even:\
    \ isize = 0;\n    let mut even2: isize = 0;\n    let mut nums: Vec<isize> = vec![];\n\
    \    while n <= nums.len() {\n        num = nums[n];\n        for ii in 0..(num\
    \ as usize) {\n            if nums[ii] % 2 == 0 {\n                even = even2;\n\
    \                even2 = 0;\n            } else {\n                even += 1;\n\
    \            }\n            if even > 0 {\n                nums[ii] = nums[ii]\
    \ * 10 + even;\n                even = 0;\n                even2 = 1;\n      \
    \      } else {\n                nums[ii] = nums[ii] * 10 + even2;\n         \
    \       even2 = 0;\n            }\n        }\n        nums.push(num);\n      \
    \  n += 1;\n    }\n    nums\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy8lbu6b1.rs:16:16\n   |\n\
    16 |     while n <= nums.len() {\n   |                ^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |     while n <= nums.len().try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpy8lbu6b1.rs:17:15\n  \
    \ |\n17 |         num = nums[n];\n   |               ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut ret = Vec::new();\n\
    \    let mut counter = x.iter().cloned().collect::<HashSet<_>>();\n    for &x\
    \ in x {\n        if !counter.contains(&x) {\n            ret.push(x);\n     \
    \       counter.insert(x);\n        }\n    }\n    ret\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmp779zcn51.rs:11:51\n\
    \   |\n11 |     let mut counter = x.iter().cloned().collect::<HashSet<_>>();\n\
    \   |                                                   ^^^^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashSet;\n\
    \   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp779zcn51.rs:12:9\n   |\n\
    12 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0412.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut ret = vec![];\n \
    \   for d in x.iter() {\n        if d > 9 { \n            ret.push(d);\n     \
    \   }\n    }\n    ret.sort();\n    ret\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgx9pligk.rs:12:16\n   |\n\
    12 |         if d > 9 { \n   |                ^\n   |                |\n   | \
    \               expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&9`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgx9pligk.rs:17:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n17 |     ret\n   |     ^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut seen = vec![0; x.len()];\n\n    for i in 0..x.len() {\n        if\
    \ seen[i] {\n            continue;\n        }\n\n        let mut j = 0;\n    \
    \    while j < i.len() && x[j] % 10 == 0 {\n            j += 1;\n        }\n\n\
    \        if j == i.len() {\n            result.push(x[i]);\n            seen[i]\
    \ = true;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<usize as SliceIndex<[{integer}]>>::Output\
    \ == bool`\n  --> /tmp/tmpr4stcj82.rs:14:12\n   |\n14 |         if seen[i] {\n\
    \   |            ^^^^^^^ expected integer, found `bool`\n\nerror[E0599]: no method\
    \ named `len` found for type `usize` in the current scope\n  --> /tmp/tmpr4stcj82.rs:19:21\n\
    \   |\n19 |         while j < i.len() && x[j] % 10 == 0 {\n   |              \
    \       ^^^ method not found in `usize`\n\nerror[E0599]: no method named `len`\
    \ found for type `usize` in the current scope\n  --> /tmp/tmpr4stcj82.rs:23:19\n\
    \   |\n23 |         if j == i.len() {\n   |                   ^^^ method not found\
    \ in `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr4stcj82.rs:25:23\n\
    \   |\n25 |             seen[i] = true;\n   |             -------   ^^^^ expected\
    \ integer, found `bool`\n   |             |\n   |             expected due to\
    \ the type of this binding\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0271, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort_by(|a, b| a.cmp(b));\n\
    \    let mut x = x.clone();\n    x.sort_unstable();\n    x.iter().filter(|&x|\
    \ x % 2 == 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmp8d5amfuh.rs:10:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                  - help: consider changing this to be mutable:\
    \ `mut x`\n10 |     x.sort_by(|a, b| a.cmp(b));\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len() <= 1 {\n     \
    \   return x\n    }\n    x.sort();\n    let mut y = vec![];\n    let mut z: usize\
    \ = 0;\n    for y in x {\n        z = 0;\n        while z < y.len() {\n      \
    \      if y[z] % 2 == 0 {\n                break;\n            }\n           \
    \ z +=1;\n        }\n        if z <= y.len() {\n            y.pop(z);\n      \
    \  }\n    }\n    x\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpfh61uu_7.rs:18:21\n   |\n18 |         while z < y.len()\
    \ {\n   |                     ^^^ method not found in `isize`\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmpfh61uu_7.rs:19:16\n\
    \   |\n19 |             if y[z] % 2 == 0 {\n   |                ^^^^\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpfh61uu_7.rs:24:19\n\
    \   |\n24 |         if z <= y.len() {\n   |                   ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `pop` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpfh61uu_7.rs:25:15\n   |\n25 |             y.pop(z);\n\
    \   |               ^^^ help: there is an associated function with a similar name:\
    \ `pow`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0599, E0608.\nFor more information about an error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut v = x;\n    let mut\
    \ res: Vec<isize> = vec![0; v.len()];\n\n    for i in 0..v.len() {\n        for\
    \ j in 1..i {\n            if v[j] % 2 == 0 {\n                res.push(v[j]);\n\
    \            }\n        }\n    }\n\n    for i in res.iter_mut().rev() {\n    \
    \    *i += 2;\n    }\n\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 2, 2, 1424]`,\n right: `[1, 15, 33]`', /tmp/tmpc2_pd96b.rs:30:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut list = Vec::new();\n\
    \    for n in x {\n        if n % 10 == 0 {\n            continue;\n        }\n\
    \        for d in 2..=n {\n            if n % d == 0 {\n                break;\n\
    \            }\n        }\n        if n == 0 {\n            list.push(n);\n  \
    \      }\n    }\n    list.sort();\n    list\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmpyz4qpg4f.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut seen = HashSet::new();\n\
    \    x.iter().cloned().filter(|&x| !seen.insert(x).unwrap()).collect()\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpnp0apct1.rs:10:20\n   |\n10 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut ret: Vec<isize> =\
    \ Vec::new();\n    for i in x {\n        if i % 2 == 0 {\n            ret.push(i);\n\
    \        }\n    }\n    ret.sort_unstable();\n    ret\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp36sjrmk5.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut uniques: Vec<isize>\
    \ = x.clone();\n    let mut idx: usize = 0;\n    let mut temp: isize = 0;\n  \
    \  while idx < uniques.len() {\n        temp = uniques[idx];\n        if temp\
    \ % 2 == 0 {\n            uniques.remove(idx);\n            idx += 1;\n      \
    \  } else {\n            idx += 1;\n        }\n    }\n    uniques\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpz7myj0s0.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.is_empty() { return\
    \ x; }\n    let mut y = Vec::new();\n    y.push(x.iter().filter(|&x| x % 2 ==\
    \ 0).min().unwrap());\n    \n    for &x in &x[0..x.len()-1] {\n        let y =\
    \ x + 1;\n        if y.is_odd() {\n            if !y.is_zero() {\n           \
    \     y.unwrap().unwrap();\n                y.push(0);\n            }\n      \
    \  }\n        y.iter().filter(|&x| x % 2 == 0).collect::<Vec<_>>().sort_unstable().cloned().push(x.unwrap());\n\
    \    }\n    y.iter().filter(|&x| x % 2 == 0).collect::<Vec<_>>().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmplkkmgyi5.rs:16:14\n   |\n16 |         if y.is_odd() {\n\
    \   |              ^^^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `is_zero` found for type `isize` in the current scope\n  --> /tmp/tmplkkmgyi5.rs:17:19\n\
    \   |\n17 |             if !y.is_zero() {\n   |                   ^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `unwrap` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmplkkmgyi5.rs:18:19\n   |\n18 |  \
    \               y.unwrap().unwrap();\n   |                   ^^^^^^ method not\
    \ found in `isize`\n\nerror[E0599]: no method named `push` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmplkkmgyi5.rs:19:19\n   |\n19 |          \
    \       y.push(0);\n   |                   ^^^^ method not found in `isize`\n\n\
    error[E0599]: no method named `iter` found for type `isize` in the current scope\n\
    \  --> /tmp/tmplkkmgyi5.rs:22:11\n   |\n22 |         y.iter().filter(|&x| x %\
    \ 2 == 0).collect::<Vec<_>>().sort_unstable().cloned().push(x.unwrap());\n   |\
    \           ^^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `unwrap` found for type `isize` in the current scope\n  --> /tmp/tmplkkmgyi5.rs:22:94\n\
    \   |\n22 |         y.iter().filter(|&x| x % 2 == 0).collect::<Vec<_>>().sort_unstable().cloned().push(x.unwrap());\n\
    \   |                                                                        \
    \                      ^^^^^^ method not found in `isize`\n\nerror[E0369]: cannot\
    \ mod `&&isize` by `{integer}`\n  --> /tmp/tmplkkmgyi5.rs:24:28\n   |\n24 |  \
    \   y.iter().filter(|&x| x % 2 == 0).collect::<Vec<_>>().cloned().collect()\n\
    \   |                          - ^ - {integer}\n   |                         \
    \ |\n   |                          &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n24 |     y.iter().filter(|&x| *x % 2 == 0).collect::<Vec<_>>().cloned().collect()\n\
    \   |                          +\n\nerror[E0599]: the method `cloned` exists for\
    \ struct `Vec<&&isize>`, but its trait bounds were n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len() <= 1 {\n     \
    \   return x;\n    }\n    let mut evens = Vec::new();\n    for d in x {\n    \
    \    if d % 2 == 0 {\n            evens.push(d);\n        }\n    }\n    evens\n\
    \        .iter()\n        .cloned()\n        .cloned()\n        .sort_by_key(|&x|\
    \ x)\n        .collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmpvpvl8qe2.rs:22:10\n     |\n22   | \
    \        .cloned()\n     |          ^^^^^^ expected reference, found `isize`\n\
    \     |\n     = note: expected reference `&&_`\n                found reference\
    \ `&isize`\n     = note: required because of the requirements on the impl of `Iterator`\
    \ for `Cloned<std::slice::Iter<'_, isize>>`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: no method named `sort_by_key` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmpvpvl8qe2.rs:23:10\n   |\n23 |         .sort_by_key(|&x|\
    \ x)\n   |          ^^^^^^^^^^^ method not found in `Cloned<Cloned<std::slice::Iter<'_,\
    \ isize>>>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().cloned().filter(|&x|\
    \ x % 10).sorted().collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo2x8_20r.rs:10:35\n   |\n\
    10 |     x.iter().cloned().filter(|&x| x % 10).sorted().collect()\n   |      \
    \                             ^^^^^^ expected `bool`, found `isize`\n\nerror[E0599]:\
    \ no method named `sorted` found for struct `Filter` in the current scope\n  -->\
    \ /tmp/tmpo2x8_20r.rs:10:43\n   |\n10 |     x.iter().cloned().filter(|&x| x %\
    \ 10).sorted().collect()\n   |                                           ^^^^^^\
    \ method not found in `Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpo2x8_20r.rs:10:30:\
    \ 10:41]>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // initialize vector to hold\
    \ unique integer\n    let mut result = Vec::new();\n\n    // traverse the vector\n\
    \    for i in x {\n        // if the current integer has only even digits then\
    \ remove it\n        if i % 2 == 0 {\n            result.push(i);\n        }\n\
    \    }\n\n    // return the result\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmppgw4bqfg.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len() == 0 {\n     \
    \   return vec![];\n    }\n    let mut counter = x.iter().cloned().map(|&x| x\
    \ as usize).collect::<Vec<usize>>();\n    counter.sort();\n\n    for i in 0..counter.len()\
    \ {\n        if counter[i] % 2 == 0 {\n            return vec![counter[i]];\n\
    \        }\n    }\n    return vec![];\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxvu9uc3v.rs:13:46\n   |\n\
    13 |     let mut counter = x.iter().cloned().map(|&x| x as usize).collect::<Vec<usize>>();\n\
    \   |                                              ^--\n   |                 \
    \                             ||\n   |                                       \
    \       |expected due to this\n   |                                          \
    \    expected `isize`, found reference\n   |                                 \
    \             help: did you mean `x`: `&isize`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxvu9uc3v.rs:18:25\n   |\n18 |             return vec![counter[i]];\n\
    \   |                         ^^^^^^^^^^ expected `isize`, found `usize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // TODO: Use Set\n    let\
    \ mut xs = x.iter().cloned().collect::<Vec<_>>();\n    xs.sort();\n    xs.dedup();\n\
    \    xs\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15, 33, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmpue7k1e75.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![0;\
    \ x.len()];\n    for v in x.iter() {\n        if v % 2 == 0 {\n            result.push(v);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpktu3o_14.rs:13:25\n   |\n\
    13 |             result.push(v);\n   |                         ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |  \
    \           result.push(*v);\n   |                         +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n\
    \    x.iter().for_each(|&x| v.push(*x));\n\n    let mut count: usize = 0;\n  \
    \  while !v.is_empty() {\n        if v.remove(&0).is_none() {\n            count+=1;\n\
    \        }\n    }\n    v.sort();\n\n    return v;\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpprnuefas.rs:11:35\n\
    \   |\n11 |     x.iter().for_each(|&x| v.push(*x));\n   |                    \
    \               ^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpprnuefas.rs:15:21\n\
    \   |\n15 |         if v.remove(&0).is_none() {\n   |                     ^^ expected\
    \ `usize`, found `&{integer}`\n   |\nhelp: consider removing the borrow\n   |\n\
    15 -         if v.remove(&0).is_none() {\n15 +         if v.remove(0).is_none()\
    \ {\n   | \n\nerror[E0599]: no method named `is_none` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpprnuefas.rs:15:25\n   |\n15 |         if v.remove(&0).is_none()\
    \ {\n   |                         ^^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599, E0614.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut x: Vec<_> = x.clone();\n\
    \    let mut result: Vec<_> = x.clone();\n\n    let mut hash: usize = 0;\n   \
    \ let mut x: Vec<_> = x.clone();\n    let mut last: isize = 0;\n    let mut evens:\
    \ Vec<_> = vec![];\n\n    for elt in x {\n        last = 0;\n        for x in\
    \ result {\n            if elt < x {\n                break;\n            }\n\
    \            last = x;\n        }\n        hash = (hash &* PRIME) % MODULO;\n\
    \        while evens.len() != hash {\n            if hash % 2 == 0 {\n       \
    \         evens.push(0);\n            } else {\n                evens.push(1);\n\
    \            }\n            hash /= 2;\n        }\n        result.push(last);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `PRIME` in this scope\n  --> /tmp/tmpze52nufa.rs:26:25\n\
    \   |\n26 |         hash = (hash &* PRIME) % MODULO;\n   |                   \
    \      ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `MODULO`\
    \ in this scope\n  --> /tmp/tmpze52nufa.rs:26:34\n   |\n26 |         hash = (hash\
    \ &* PRIME) % MODULO;\n   |                                  ^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for &x in x {\n        if x % 10 == 0 {\n            result.push(x);\n  \
    \      }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp54bsqyi5.rs:11:9\n   |\n\
    11 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n\
    \    for i in x {\n        if i % 2 == 0 {\n            v.push(i);\n        }\n\
    \    }\n    v.sort_unstable();\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp5thsmbrr.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort_unstable();\n    let\
    \ mut output: Vec<isize> = Vec::new();\n    for i in x.iter() {\n        if i\
    \ % 2 == 0 {\n            output.push(i);\n        }\n    }\n    output\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_yc70t81.rs:14:25\n   |\n\
    14 |             output.push(i);\n   |                         ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |  \
    \           output.push(*i);\n   |                         +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::with_capacity(x.len());\n\
    \    let mut count = x.len();\n    for &d in &x {\n        while count > 1 &&\
    \ d % 2 == 0 {\n            result.pop();\n            count -= 1;\n        }\n\
    \        result.push(d);\n        count += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpycgx1b5d.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut out = Vec::new();\n\
    \    let mut s = x.clone();\n    s.sort();\n    s.dedup();\n    let mut digits:\
    \ Vec<isize> = Vec::new();\n    for i in s {\n        if i.is_even() {\n     \
    \       digits.push(i);\n        } else {\n            let mut tmp = i;\n    \
    \        while !digits.contains(&tmp) {\n                digits.push(tmp);\n \
    \               tmp += 1;\n            }\n        }\n    }\n    for i in 0..digits.len()\
    \ {\n        if digits[i] != i {\n            out = out.push(digits[i]);\n   \
    \     }\n    }\n    out\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_even` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp0o839hga.rs:16:14\n   |\n16 |         if i.is_even() {\n\
    \   |              ^^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0o839hga.rs:27:25\n   |\n27 |         if digits[i] != i\
    \ {\n   |                         ^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n27 |         if digits[i] != i.try_into().unwrap() {\n   |      \
    \                    ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0o839hga.rs:28:19\n   |\n10 |     let mut out = Vec::new();\n \
    \  |                   ---------- expected due to this value\n...\n28 |      \
    \       out = out.push(digits[i]);\n   |                   ^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut unique_digits = vec![];\n\
    \n    for d in x {\n        if d % 2 == 0 {\n            continue;\n        }\n\
    \        let digit = d.to_string();\n        for ud in unique_digits {\n     \
    \       if ud.to_string().len() == digit {\n                if ud > d {\n    \
    \                ud -= 1;\n                }\n                break;\n       \
    \     }\n        }\n        unique_digits.push(d as isize);\n    }\n\n    unique_digits.sort_unstable();\n\
    \    unique_digits\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpratd3u1k.rs:18:16\n\
    \   |\n10 |     let mut unique_digits = vec![];\n   |         -----------------\
    \ consider giving `unique_digits` a type\n...\n18 |             if ud.to_string().len()\
    \ == digit {\n   |                ^^ cannot infer type\n   |\n   = note: type\
    \ must be known at this point\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // TODO: Better than sorting\n\
    \    let mut ans = Vec::new();\n    for e in x {\n        let mut digit = e;\n\
    \        while let Some(d) = digit.trailing_digits(3) {\n            if d.is_zero()\
    \ {\n                ans.push(e);\n                break;\n            }\n   \
    \         digit = d.clone() + digit;\n        }\n    }\n    ans\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `trailing_digits` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmppkzwq7tx.rs:14:35\n   |\n14 |         while\
    \ let Some(d) = digit.trailing_digits(3) {\n   |                             \
    \      ^^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `trailing_ones`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut new_vec: Vec<isize>\
    \ = Vec::new();\n    let mut digits = Vec::new();\n    let mut tmp = 0;\n    for\
    \ i in x.iter() {\n        if i >> 0 == 0 {\n            digits += [i];\n    \
    \    } else {\n            tmp += i;\n        }\n    }\n    \n    for i in digits.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            new_vec.push(tmp + i);\n        }\n\
    \    }\n    new_vec\n}\n\nfn main() {\n    let candidate = unique_digits;\n  \
    \  assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<_>`\n  --> /tmp/tmpl6gf96ff.rs:15:13\n   |\n15 |             digits +=\
    \ [i];\n   |             ------^^^^^^^\n   |             |\n   |             cannot\
    \ use `+=` on type `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut even = true;\n  \
    \  let mut even_indices = Vec::new();\n    let mut indices_to_remove = Vec::new();\n\
    \    for (i, item) in x.iter().enumerate() {\n        if item % 2 == 0 && even\
    \ {\n            even_indices.push(i as isize);\n        }\n        if item %\
    \ 2 != 0 && !even {\n            even = true;\n        }\n        if !even {\n\
    \            indices_to_remove.push(i as isize);\n        }\n        even = !even;\n\
    \    }\n    for i in indices_to_remove {\n        x.remove(i);\n    }\n    x.sort();\n\
    \    x\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfuiv_3g9.rs:26:18\n   |\n\
    26 |         x.remove(i);\n   |                  ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n26 |         x.remove(i.try_into().unwrap());\n   |\
    \                   ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \n    let mut cur = 0;\n\n    for i in x.iter().cloned() {\n        // if current\
    \ digit is even\n        if i % 2 == 0 {\n            // push current digit to\
    \ res vector\n            res.push(cur);\n\n            // initialize new digit\n\
    \            cur = i;\n        } else {\n            // if current digit is odd,\
    \ increment cur\n            cur += 1;\n        }\n    }\n\n    // push last element\
    \ to res vector\n    res.push(cur);\n\n    // return res\n    res\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1423]`,\n right: `[1, 15, 33]`', /tmp/tmpg3el84qx.rs:37:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len() < 2 {\n      \
    \  return x;\n    }\n    let mut y: Vec<isize> = vec![];\n    let mut last_digit:\
    \ Option<isize> = None;\n    for &x in x {\n        let mut x: isize = x;\n  \
    \      let mut remainder: isize = 0;\n        while x >= 10 {\n            let\
    \ digit = x % 10;\n            if remainder == 0 {\n                last_digit\
    \ = Some(digit);\n            }\n            if digit == 0 {\n               \
    \ break;\n            }\n            x = x / 10;\n            remainder = 0;\n\
    \        }\n        if remainder != 0 {\n            y = append(y, remainder);\n\
    \        }\n    }\n    if let Some(digit) = last_digit {\n        y = append(y,\
    \ digit);\n    }\n    if y.len() == 1 {\n        return y;\n    }\n    y.sort();\n\
    \    y\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `append` in this scope\n  --> /tmp/tmp6_i12wl0.rs:30:17\n\
    \   |\n30 |             y = append(y, remainder);\n   |                 ^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `append` in this\
    \ scope\n  --> /tmp/tmp6_i12wl0.rs:34:13\n   |\n34 |         y = append(y, digit);\n\
    \   |             ^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6_i12wl0.rs:15:9\n   |\n15 |     for &x in x {\n   |         ^^\
    \    - this expression has type `Option<isize>`\n   |         |\n   |        \
    \ expected `isize`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `x`\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len() <= 0 {\n     \
    \   return x;\n    }\n    let mut sorted_x: Vec<isize> = x.clone();\n    sorted_x.sort();\n\
    \n    for num in &sorted_x {\n        if num % 2 == 0 {\n            continue;\n\
    \        }\n        for num2 in &sorted_x {\n            if num2 % 2 == 0 {\n\
    \                continue;\n            }\n            if num == num2 {\n    \
    \            continue;\n            }\n            if num % 10 == num2 % 10 {\n\
    \                sorted_x.remove(num);\n                break;\n            }\n\
    \        }\n    }\n\n    sorted_x\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3xxgsyck.rs:28:33\n   |\n\
    28 |                 sorted_x.remove(num);\n   |                             \
    \    ^^^ expected `usize`, found `&isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        match i % 10 {\n            0 => result.push(i),\n\
    \            1 => result.push(i),\n            _ => (),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[1, 15, 33]`', /tmp/tmp18rg2c8w.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut unique_digits = Vec::new();\n\
    \    let mut digits = x.iter().map(|&x| x).collect::<Vec<_>>();\n    \n    loop\
    \ {\n        // Find the first element that isn't even digit\n        let mut\
    \ index = digits.index(|&x| !x.is_even());\n        \n        if index == 0 {\n\
    \            break;\n        }\n        \n        // Add all digits except the\
    \ first one and insert it into unique digits\n        unique_digits.push(digits[index-1]);\n\
    \        unique_digits.extend(digits.iter().skip(index).take(digits.len()-1));\n\
    \        digits = digits.iter().skip(index).take(digits.len()-1);\n    }\n   \
    \ \n    unique_digits\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `index` found for struct `Vec<isize>` in\
    \ the current scope\n  --> /tmp/tmp1m6pxiok.rs:15:32\n   |\n15 |         let mut\
    \ index = digits.index(|&x| !x.is_even());\n   |                             \
    \   ^^^^^ method not found in `Vec<isize>`\n   |\n   = help: items from traits\
    \ can only be used if the trait is in scope\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::ops::Index;\n\
    \   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1m6pxiok.rs:24:18\n   |\n\
    11 |     let mut digits = x.iter().map(|&x| x).collect::<Vec<_>>();\n   |    \
    \                  ---------------------------------------- expected due to this\
    \ value\n...\n24 |         digits = digits.iter().skip(index).take(digits.len()-1);\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `std::iter::Take`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `std::iter::Take<Skip<std::slice::Iter<'_,\
    \ isize>>>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut seen: HashSet<usize>\
    \ = HashSet::new();\n    let mut ret: Vec<isize> = Vec::new();\n    for v in x.iter()\
    \ {\n        if seen.insert(v as usize).is_none() {\n            ret.push(v);\n\
    \        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpanc1xk96.rs:10:19\n\
    \   |\n10 |     let mut seen: HashSet<usize> = HashSet::new();\n   |         \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpanc1xk96.rs:10:36\n\
    \   |\n10 |     let mut seen: HashSet<usize> = HashSet::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpanc1xk96.rs:14:22\n   |\n14 |             ret.push(v);\n\
    \   |                      ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             ret.push(*v);\n   |       \
    \               +\n\nerror[E0606]: casting `&isize` as `usize` is invalid\n  -->\
    \ /tmp/tmpanc1xk96.rs:13:24\n   |\n13 |         if seen.insert(v as usize).is_none()\
    \ {\n   |                        -^^^^^^^^^\n   |                        |\n \
    \  |                        cannot cast `&isize` as `usize`\n   |            \
    \            help: dereference the expression: `*v`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0412, E0433,\
    \ E0606.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|&d| {\n\
    \            d % 2 != 0\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmp32x0mnmv.rs:12:8\n     |\n12\
    \   |     }).collect()\n     |        ^^^^^^^ value of type `Vec<isize>` cannot\
    \ be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait\
    \ `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut x = x.clone();\n\
    \    let mut unique_digits = x.clone();\n    for &n in x {\n        let mut i\
    \ = 1;\n        while unique_digits[i] < n {\n            i += 1;\n        }\n\
    \        let mut j = i;\n        while unique_digits[j] > n {\n            j -=\
    \ 1;\n        }\n        if j == i {\n            continue;\n        }\n     \
    \   let tmp = unique_digits.clone();\n        unique_digits[j] = n;\n        unique_digits[i]\
    \ = tmp[j];\n    }\n    unique_digits\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpylniahwc.rs:12:9\n   |\n\
    12 |     for &n in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut even = x.iter().cloned().filter(|&x|\
    \ *x % 2 == 0).collect::<Vec<isize>>();\n    let mut odd = x.iter().cloned().filter(|&x|\
    \ *x % 2 != 0).collect::<Vec<isize>>();\n    even.extend(&odd);\n    even\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpjg1krf0m.rs:10:50\n\
    \   |\n10 |     let mut even = x.iter().cloned().filter(|&x| *x % 2 == 0).collect::<Vec<isize>>();\n\
    \   |                                                  ^^\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n  --> /tmp/tmpjg1krf0m.rs:11:49\n   |\n11 |\
    \     let mut odd = x.iter().cloned().filter(|&x| *x % 2 != 0).collect::<Vec<isize>>();\n\
    \   |                                                 ^^\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut x: Vec<isize> = x.clone();\n\
    \    for v in x.iter_mut() {\n        if v % 2 != 0 {\n            v += 1;\n \
    \       }\n    }\n    x\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmpbez8ysnt.rs:12:14\n\
    \   |\n12 |         if v % 2 != 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `v`\n   |\n12 |         if *v % 2 != 0 {\n   |         \
    \   +\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&mut isize`\n  --> /tmp/tmpbez8ysnt.rs:13:13\n   |\n13 |             v += 1;\n\
    \   |             -^^^^^\n   |             |\n   |             cannot use `+=`\
    \ on type `&mut isize`\n   |\nhelp: `+=` can be used on `isize`, you can dereference\
    \ `v`\n   |\n13 |             *v += 1;\n   |             +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0368, E0369.\n\
    For more information about an error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut unique_digits = vec![];\n\
    \n    for digit in x {\n        if digit % 2 == 0 {\n            unique_digits.push(digit);\n\
    \        }\n    }\n\n    unique_digits.sort_unstable();\n\n    unique_digits\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpu0lgd0n7.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|&x| x.is_multiple_of_digit()).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_multiple_of_digit` found for reference\
    \ `&isize` in the current scope\n  --> /tmp/tmp90yrxfqs.rs:10:28\n   |\n10 | \
    \    x.iter().filter(|&x| x.is_multiple_of_digit()).cloned().collect()\n   | \
    \                           ^^^^^^^^^^^^^^^^^^^^ method not found in `&isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut x = x.sort_unstable();\n    \n    while let Some(k) = x.get(x.len()\
    \ - 1) {\n        if k % 2 == 0 {\n            let mut new_v = vec![k.clone()];\n\
    \            while let Some(k_next) = x.get(x.len() - 2) {\n                if\
    \ k_next % 2 == 0 {\n                    new_v.push(k_next);\n               \
    \     x.remove(k_next);\n                    x.remove(k_next - 1);\n         \
    \       } else {\n                    break;\n                }\n            }\n\
    \            result.extend(new_v.clone());\n        }\n        x.remove(k);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `get` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpbgdtvx3_.rs:13:27\n   |\n13 |     while let Some(k) = x.get(x.len()\
    \ - 1) {\n   |                           ^^^ method not found in `()`\n\nerror[E0599]:\
    \ no method named `len` found for unit type `()` in the current scope\n  --> /tmp/tmpbgdtvx3_.rs:13:33\n\
    \   |\n13 |     while let Some(k) = x.get(x.len() - 1) {\n   |               \
    \                  ^^^ method not found in `()`\n\nerror[E0599]: no method named\
    \ `get` found for unit type `()` in the current scope\n  --> /tmp/tmpbgdtvx3_.rs:16:40\n\
    \   |\n16 |             while let Some(k_next) = x.get(x.len() - 2) {\n   |  \
    \                                      ^^^ method not found in `()`\n\nerror[E0599]:\
    \ no method named `len` found for unit type `()` in the current scope\n  --> /tmp/tmpbgdtvx3_.rs:16:46\n\
    \   |\n16 |             while let Some(k_next) = x.get(x.len() - 2) {\n   |  \
    \                                            ^^^ method not found in `()`\n\n\
    error[E0599]: no method named `remove` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpbgdtvx3_.rs:19:23\n   |\n19 |                     x.remove(k_next);\n\
    \   |                       ^^^^^^ method not found in `()`\n\nerror[E0599]: no\
    \ method named `remove` found for unit type `()` in the current scope\n  --> /tmp/tmpbgdtvx3_.rs:20:23\n\
    \   |\n20 |                     x.remove(k_next - 1);\n   |                  \
    \     ^^^^^^ method not found in `()`\n\nerror[E0599]: no method named `remove`\
    \ found for unit type `()` in the current scope\n  --> /tmp/tmpbgdtvx3_.rs:27:11\n\
    \   |\n27 |         x.remove(k);\n   |           ^^^^^^ method not found in `()`\n\
    \nerror: aborting due to 7 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut digits = Vec::new();\n    for d in x {\n        digits.push(d % 10);\n\
    \    }\n    let mut last_digit: isize = 0;\n    for d in digits {\n        if\
    \ d != last_digit {\n            result.push(d);\n            last_digit = d;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp73hgkoru.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for y in x.iter() {\n        if y % 2 == 0 {\n            for x in &y[1..]\
    \ {\n                if x % 2 != 0 {\n                    res.push(y);\n     \
    \               break;\n                }\n            }\n        }\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `&isize`\n  --> /tmp/tmpv5k_sqdu.rs:13:23\n\
    \   |\n13 |             for x in &y[1..] {\n   |                       ^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpv5k_sqdu.rs:21:5\n   |\n9  | fn\
    \ unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                         \
    \           ---------- expected `Vec<isize>` because of return type\n...\n21 |\
    \     res\n   |     ^^^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0608.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut cnt = 0;\n    x.iter().for_each(|x|{\n        if x%10 == 0 {\n  \
    \          cnt++;\n            return;\n        }\n        if cnt == 0 {\n   \
    \         result.push(x);\n            return;\n        }\n        cnt += 1;\n\
    \        if cnt > 1 {\n            result.push(x);\n        }\n    });\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpmj77zw6f.rs:14:16\n\
    \   |\n14 |             cnt++;\n   |                ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n14 |             { let tmp = cnt; cnt +=\
    \ 1; tmp };\n   |             +++++++++++    ~~~~~~~~~~~~~~~~~\n14 -         \
    \    cnt++;\n14 +             cnt += 1;\n   | \n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpmj77zw6f.rs:26:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n26 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut y = Vec::new();\n\
    \    x.iter().filter(|&x| x % 2 == 0).cloned().cloned().for_each(|x| {\n     \
    \   y.push(x);\n    });\n    y.cloned().sort();\n    y\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<Filter<std::slice::Iter<'_, isize>,\
    \ [closure@/tmp/tmpy99ia205.rs:11:21: 11:36]> as Iterator>::Item == &&_`\n   \
    \ --> /tmp/tmpy99ia205.rs:11:47\n     |\n11   |     x.iter().filter(|&x| x % 2\
    \ == 0).cloned().cloned().for_each(|x| {\n     |                             \
    \                  ^^^^^^ expected reference, found `isize`\n     |\n     = note:\
    \ expected reference `&&_`\n                found reference `&isize`\n     = note:\
    \ required because of the requirements on the impl of `Iterator` for `Cloned<Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpy99ia205.rs:11:21: 11:36]>>`\nnote: required by a bound\
    \ in `cloned`\n\nerror[E0599]: the method `for_each` exists for struct `Cloned<Cloned<Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpy99ia205.rs:11:21: 11:36]>>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmpy99ia205.rs:11:56\n   |\n11 |       x.iter().filter(|&x|\
    \ x % 2 == 0).cloned().cloned().for_each(|x| {\n   |                         \
    \                                 ^^^^^^^^ method cannot be called on `Cloned<Cloned<Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpy99ia205.rs:11:21: 11:36]>>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<Cloned<Filter<std::slice::Iter<'_, isize>, [closure@/tmp/tmpy99ia205.rs:11:21:\
    \ 11:36]>> as Iterator>::Item = &_`\n           which is required by `Cloned<Cloned<Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpy99ia205.rs:11:21: 11:36]>>>: Iterator`\n         \
    \  `Cloned<Cloned<Filter<std::slice::Iter<'_, isize>, [closure@/tmp/tmpy99ia205.rs:11:21:\
    \ 11:36]>>>: Iterator`\n           which is required by `&mut Cloned<Cloned<Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpy99ia205.rs:11:21: 11:36]>>>: Iterator`\n\nerror[E0599]:\
    \ `Vec<_>` is not an iterator\n   --> /tmp/tmpy99ia205.rs:14:7\n    |\n14  | \
    \      y.cloned().sort();\n    |         ^^^^^^ `Vec<_>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<_>: Iterator`\n         "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for i in x.iter() {\n        if i % 2 != 0 {\n            res.push(i);\n\
    \        }\n    }\n    res.sort_unstable();\n    res\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8nzjl2i4.rs:17:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    17 |     res\n   |     ^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().flat_map(|&x| x.to_digits()).map(|x|\
    \ x % 10).filter(|&x| *x == 0).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpzvgnb8u7.rs:10:30\n   |\n10 |     x.iter().flat_map(|&x|\
    \ x.to_digits()).map(|x| x % 10).filter(|&x| *x == 0).collect()\n   |        \
    \                      ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut digits = vec![];\n\
    \    for i in x {\n        if digits[i as usize].is_some() {\n            continue;\n\
    \        }\n        let mut d = i as usize;\n        d -= d % 10;\n        while\
    \ d > 0 {\n            digits.push(d);\n            d -= d % 10;\n        }\n\
    \    }\n    digits.sort();\n    let mut ans = vec![];\n    for i in 0..digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            ans.push(i as isize);\n    \
    \    }\n    }\n    return ans;\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed for `Vec<T>`\n  --> /tmp/tmp7ofex7t2.rs:12:12\n\
    \   |\n10 |     let mut digits = vec![];\n   |         ---------- consider giving\
    \ `digits` the explicit type `Vec<T>`, with the type parameters specified\n11\
    \ |     for i in x {\n12 |         if digits[i as usize].is_some() {\n   |   \
    \         ^^^^^^^^^^^^^^^^^^ cannot infer type\n   |\n   = note: type must be\
    \ known at this point\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut ret: Vec<isize> =\
    \ vec![];\n    for n in x.iter() {\n        let mut n: isize = n;\n        while\
    \ n > 0 {\n            n % 10;\n            n /= 10;\n        }\n        if n\
    \ == 0 {\n            ret.push(n);\n        }\n    }\n    ret.sort_unstable();\n\
    \    ret\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpun8ttnk2.rs:12:28\n   |\n\
    12 |         let mut n: isize = n;\n   |                    -----   ^ expected\
    \ `isize`, found `&isize`\n   |                    |\n   |                   \
    \ expected due to this\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |         let mut n: isize = *n;\n   |                            +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort_unstable();\n    let\
    \ mut x: Vec<isize> = vec![];\n    for d in x.iter().cloned() {\n        let s\
    \ = String::from(d);\n        let mut digits = s.chars().map(|c| c as usize).collect::<Vec<_>>();\n\
    \        for &digit in digits {\n            if digit % 2 == 0 {\n           \
    \     x.push(digit);\n                break;\n            }\n        }\n    }\n\
    \    x.sort_unstable();\n    x\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `String: From<isize>` is not satisfied\n\
    \  --> /tmp/tmptjo15ms3.rs:13:17\n   |\n13 |         let s = String::from(d);\n\
    \   |                 ^^^^^^^^^^^^ the trait `From<isize>` is not implemented\
    \ for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptjo15ms3.rs:15:13\n   |\n15 |\
    \         for &digit in digits {\n   |             ^^^^^^    ------ this expression\
    \ has type `Option<usize>`\n   |             |\n   |             expected `usize`,\
    \ found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `digit`\n   |\n   = note:   expected type `usize`\n           found\
    \ reference `&_`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut x: Vec<_> = x.clone();\
    \ // to avoid borrow checker error\n    x.sort();\n\n    let mut result = x.clone();\n\
    \    for &i in &x {\n        if !(&i % 2) == 0 {\n            result.swap_remove(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0fhvnpc6.rs:16:32\n   |\n\
    16 |             result.swap_remove(i);\n   |                                ^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n16 |           \
    \  result.swap_remove(i.try_into().unwrap());\n   |                          \
    \       ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut set = std::collections::HashSet::new();\n\
    \    for i in x {\n        if !set.add(i) {\n            set.insert(i);\n    \
    \    }\n    }\n    set.iter().cloned().collect::<Vec<_>>()\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `add` found for struct `HashSet` in the current\
    \ scope\n  --> /tmp/tmpgzm1gug8.rs:12:17\n   |\n12 |         if !set.add(i) {\n\
    \   |                 ^^^ method not found in `HashSet<_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort();\n    let mut rev\
    \ = x.clone();\n    \n    rev.sort();\n\n    let mut count = 0;\n    \n    for\
    \ &i in rev {\n        if i % 2 == 0 {\n            *rev.remove(i);\n        }\n\
    \        \n        count += 1;\n    }\n    \n    rev.sort_by_key(|&i| i);\n  \
    \  rev\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3oegpoeo.rs:17:9\n   |\n\
    17 |     for &i in rev {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmp3oegpoeo.rs:19:13\n   |\n19 |        \
    \     *rev.remove(i);\n   |             ^^^^^^^^^^^^^^\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut unique = vec![];\n\
    \    for d in x {\n        if d % 2 == 0 {\n            unique.push(d)\n     \
    \   }\n    }\n    unique\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpzr4cnold.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.push(n);\n    \
    \    }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpybye4ht4.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ vec![0; x.len()];\n    for i in x {\n        res.remove(i as usize);\n     \
    \   res.sort();\n    }\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'removal index (is 15) should be < len (is 4)',\
    \ /tmp/tmpru2wddp_.rs:12:13\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    let mut last = x.len() - 1;\n    let mut digit = 0;\n    while last > 0 &&\
    \ digit < 10 {\n        if x.get(last) % 10 == 0 {\n            last = last -\
    \ 1;\n        } else {\n            res.push(x.remove(last));\n        }\n   \
    \     digit = digit + 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `Option<&isize>` by `{integer}`\n  --> /tmp/tmp2x3hpn15.rs:14:24\n\
    \   |\n14 |         if x.get(last) % 10 == 0 {\n   |            ----------- ^\
    \ -- {integer}\n   |            |\n   |            Option<&isize>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if !result.contains(&i % 10) {\n            result.push(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5g0hd4dj.rs:12:29\n   |\n\
    12 |         if !result.contains(&i % 10) {\n   |                            \
    \ ^^^^^^^\n   |                             |\n   |                          \
    \   expected reference, found `isize`\n   |                             help:\
    \ consider borrowing here: `&(&i % 10)`\n   |\n   = note: expected reference `&_`\n\
    \                   found type `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len() == 0 {\n     \
    \   return vec![];\n    }\n    let mut counter = vec![0; x.len() + 1];\n    let\
    \ mut ret = vec![];\n    for i in x {\n        if i % 2 == 0 {\n            ret.append(i);\n\
    \        }\n        for j in 0..counter {\n            if j == i {\n         \
    \       continue;\n            }\n            if counter[j] > i {\n          \
    \      counter[j + 1] = i;\n                break;\n            }\n          \
    \  if counter[j + 1] == i {\n                ret.append(j + 1);\n            \
    \    break;\n            }\n        }\n    }\n    ret\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoz0fz9lu.rs:17:24\n   |\n\
    17 |             ret.append(i);\n   |                        ^ expected `&mut\
    \ Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n\
    \                           found type `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpoz0fz9lu.rs:19:21\n   |\n19 |         for j in 0..counter {\n \
    \  |                     ^^^^^^^ expected integer, found struct `Vec`\n   |\n\
    \   = note: expected type `{integer}`\n            found struct `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpoz0fz9lu.rs:23:16\n\
    \   |\n23 |             if counter[j] > i {\n   |                ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpoz0fz9lu.rs:24:17\n\
    \   |\n24 |                 counter[j + 1] = i;\n   |                 ^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpoz0fz9lu.rs:27:16\n\
    \   |\n27 |             if counter[j + 1] == i {\n   |                ^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpoz0fz9lu.rs:28:28\n   |\n28 |   "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut v: Vec<isize> = x.clone();\n\
    \    v.remove(0);\n    for v in v.iter().cloned().take_while(|&i| i % 2 == 0)\
    \ {\n        v.push(i);\n    }\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpeqi767vo.rs:13:16\n\
    \   |\n13 |         v.push(i);\n   |                ^ help: a local variable with\
    \ a similar name exists: `v`\n\nerror[E0599]: no method named `push` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmpeqi767vo.rs:13:11\n   |\n13\
    \ |         v.push(i);\n   |           ^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut ans = Vec::new();\n\
    \    for &i in x {\n        if i % 2 == 0 && i != 0 {\n            ans.push(i\
    \ / 2);\n        }\n    }\n    ans.sort();\n    ans\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqmzo51nx.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i % 2 == 0 {\n            result.push(i);\n    \
    \    }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpmntgwsy4.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut ret = vec![];\n \
    \   let mut digits = x.clone();\n    let mut digit = 0;\n\n    while !digits.is_empty()\
    \ {\n        let digit = digits.remove(0);\n        match digit % 10 {\n     \
    \       0 => {},\n            _ => {\n                ret.push(digit);\n     \
    \           digits.remove(0);\n            }\n        }\n    }\n\n    ret\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmpiqqpvszv.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut x: Vec<_> = x.into_iter().cloned().collect();\n\
    \    for &i in x {\n        if i % 2 != 0 {\n            x.remove(i);\n      \
    \  }\n    }\n    x.sort();\n    x\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpvlhd514x.rs:10:39\n     |\n10   |     let mut x: Vec<_>\
    \ = x.into_iter().cloned().collect();\n     |                                \
    \       ^^^^^^ expected reference, found `isize`\n     |\n     = note: expected\
    \ reference `&_`\n                     found type `isize`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpvlhd514x.rs:10:48\n \
    \  |\n10 |       let mut x: Vec<_> = x.into_iter().cloned().collect();\n   | \
    \                                                 ^^^^^^^ method cannot be called\
    \ on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n   |\n\
    \   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n      \
    \     which is required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpvlhd514x.rs:17:5\n   |\n9  | fn\
    \ unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                         \
    \           ---------- expected `Vec<isize>` because of return type\n...\n17 |\
    \     x\n   |     ^ expected `isize`, found `&usize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&usize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0271, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut even = true;\n  \
    \  let mut result: Vec<isize> = vec![];\n    for i in x {\n        if even {\n\
    \            if i % 2 == 0 {\n                result.push(i);\n            }\n\
    \        } else {\n            even = false;\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpo8dkyunx.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut z = x.clone();\n\
    \    z.remove(0);\n    z.iter().cloned().filter(|&x| x % 2 == 0).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n  --> /tmp/tmpqhip_q7y.rs:12:47\n   |\n12 |     z.iter().cloned().filter(|&x|\
    \ x % 2 == 0).cloned().collect()\n   |                                       \
    \        ^^^^^^ expected reference, found `isize`\n   |\n   = note: expected reference\
    \ `&&_`\n              found reference `&isize`\n   = note: required because of\
    \ the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n   = note: 1 redundant requirement hidden\n   = note: required because\
    \ of the requirements on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpqhip_q7y.rs:12:30: 12:45]>`\n\nerror[E0631]: type\
    \ mismatch in closure arguments\n  --> /tmp/tmpqhip_q7y.rs:12:47\n   |\n12 | \
    \    z.iter().cloned().filter(|&x| x % 2 == 0).cloned().collect()\n   |      \
    \                        ---------------  ^^^^^^ expected signature of `for<'r>\
    \ fn(&'r &_) -> _`\n   |                              |\n   |                \
    \              found signature of `for<'r> fn(&'r isize) -> _`\n   |\n   = note:\
    \ required because of the requirements on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpqhip_q7y.rs:12:30: 12:45]>`\n\nerror[E0599]: the method\
    \ `collect` exists for struct `Cloned<Filter<Cloned<std::slice::Iter<'_, isize>>,\
    \ [closure@/tmp/tmpqhip_q7y.rs:12:30: 12:45]>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpqhip_q7y.rs:12:56\n   |\n12 |        z.iter().cloned().filter(|&x|\
    \ x % 2 == 0).cloned().collect()\n   |                                       \
    \                    ^^^^^^^ method cannot be called on `Cloned<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpqhip_q7y.rs:12:30: 12:45]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpqhip_q7y.rs:12:30:\
    \ 12:45]> as Iterator>::Item = &_`\n           which is required by `Cloned<Filter<Cloned<std::slice::Iter<'_,"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut x: Vec<isize> = x.clone();\n\
    \    x.sort();\n    \n    let mut y = Vec::new();\n    \n    for i in x.iter()\
    \ {\n        if i / 10 == 0 && (i % 10 == 0 || i % 10 == 1) {\n            y.push(i);\n\
    \        }\n    }\n    \n    y\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4_7ud08l.rs:21:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    21 |     y\n   |     ^ expected `isize`, found `&isize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut xs = x.clone();\n\
    \    xs.sort();\n    let mut n = xs.len();\n    let mut ans = vec![];\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            ans.push(xs.pop());\n       \
    \     n--;\n        }\n        else {\n            n--;\n        }\n    }\n  \
    \  ans\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmp62pp3xqk.rs:17:16\n\
    \   |\n17 |             n--;\n   |                ^ expected expression\n\nerror:\
    \ expected expression, found `;`\n  --> /tmp/tmp62pp3xqk.rs:20:16\n   |\n20 |\
    \             n--;\n   |                ^ expected expression\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp62pp3xqk.rs:23:5\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n23 |     ans\n   |     ^^^\
    \ expected `isize`, found enum `Option`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<Option<isize>>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut sorted_x = x.sort_unstable();\n\
    \    sorted_x.dedup();\n    sorted_x\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpfviuj1yx.rs:11:14\n   |\n11 |     sorted_x.dedup();\n \
    \  |              ^^^^^ method not found in `()`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfviuj1yx.rs:12:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n12 |     sorted_x\n   |     ^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n         \
    \  found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut digits = HashMap::new();\n\
    \n    for n in x.iter() {\n        let d = n % 10;\n        if digits.contains_key(&d)\
    \ {\n            digits.remove_value(&d);\n        } else {\n            digits.insert(d,\
    \ n);\n        }\n    }\n\n    digits.iter().map(|(_, n)| n).collect()\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpwupcml9u.rs:10:22\n   |\n10 |     let mut digits = HashMap::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut nums = x.clone();\n\
    \    let mut new_x = x.clone();\n    let mut x: Vec<isize>;\n    for i in 1..nums.len()\
    \ {\n        let mut n = 0;\n        for j in 0..i {\n            if nums[j] %\
    \ 2 == 0 {\n                n = nums[j];\n                break;\n           \
    \ }\n        }\n        if n == 0 {\n            x = nums.clone();\n         \
    \   nums.remove(i);\n            new_x.append(n);\n        }\n    }\n    new_x\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmgalge7j.rs:24:26\n   |\n\
    24 |             new_x.append(n);\n   |                          ^ expected `&mut\
    \ Vec<isize>`, found `isize`\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<isize>`\n                           found type `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut y = x.clone();\n\
    \    let mut count = 0;\n    while count < x.len() {\n        assert!(y.contains(&0));\n\
    \        assert!(y.contains(&1));\n        assert!(y.contains(&2));\n        assert!(y.contains(&3));\n\
    \        assert!(y.contains(&4));\n        assert!(y.contains(&5));\n        assert!(y.contains(&6));\n\
    \        assert!(y.contains(&7));\n        assert!(y.contains(&8));\n        assert!(y.contains(&9));\n\
    \        let last_digit = y.last();\n        let tmp = &y[..last_digit];\n   \
    \     if !tmp.iter().any(|&x| x % 2 == 0) {\n            y.pop();\n        } else\
    \ {\n            count += 1;\n        }\n    }\n    y\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `RangeTo<Option<&isize>>`\n\
    \  --> /tmp/tmpr0acplr2.rs:24:20\n   |\n24 |         let tmp = &y[..last_digit];\n\
    \   |                    ^^^^^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `RangeTo<Option<&isize>>`\n   = help: the following other types implement\
    \ trait `SliceIndex<T>`:\n             <RangeTo<usize> as SliceIndex<[T]>>\n \
    \            <RangeTo<usize> as SliceIndex<str>>\n   = note: required because\
    \ of the requirements on the impl of `Index<RangeTo<Option<&isize>>>` for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for i in x {\n        if i % 2 == 0 {\n            res.push(i);\n       \
    \ }\n    }\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n  \
    \  assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpdalbrsgo.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter()\n        .filter(|e|\
    \ {\n            match e % 10 {\n                0 => true,\n                _\
    \ => false,\n            }\n        })\n        .map(|e| {\n            e % 10\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp6zvd5_2o.rs:12:21\n\
    \   |\n12 |             match e % 10 {\n   |                   - ^ -- {integer}\n\
    \   |                   |\n   |                   &&isize\n   |\nhelp: `%` can\
    \ be used on `isize`, you can dereference `e`\n   |\n12 |             match *e\
    \ % 10 {\n   |                   +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut evens = vec![0; x.len()];\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         evens[i] = x[i];\n        }\n        i += 1;\n    }\n    evens.iter().cloned().sort_unstable().collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_unstable` found for struct `Cloned`\
    \ in the current scope\n  --> /tmp/tmp8pu_nk9l.rs:18:27\n   |\n18 |     evens.iter().cloned().sort_unstable().collect()\n\
    \   |                           ^^^^^^^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut x: Vec<isize> = x.clone();\n\
    \    let mut out: Vec<isize> = vec![];\n    x.sort();\n    for &i in x {\n   \
    \     if i /= 10 {\n            let d = i as isize;\n            if d % 2 == 0\
    \ {\n                out.push(i);\n            }\n        }\n    }\n    out\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_50p3xvv.rs:13:9\n   |\n\
    13 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_50p3xvv.rs:14:12\n   |\n14 |         if i /= 10 {\n   |      \
    \      ^^^^^^^ expected `bool`, found `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.iter().any(|&x| x >\
    \ 10) {\n        vec![]\n    } else {\n        let mut y = x.clone();\n      \
    \  y.sort_unstable();\n        let mut counter = 0;\n        while let Some(x)\
    \ = y.pop() {\n            if x % 2 == 0 {\n                counter += 1;\n  \
    \          }\n        }\n        if counter == x.len() {\n            vec![x]\n\
    \        } else {\n            vec![]\n        }\n    }\n}\n\nfn main() {\n  \
    \  let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9boi2zrf.rs:22:18\n   |\n\
    22 |             vec![x]\n   |                  ^ expected `isize`, found struct\
    \ `Vec`\n   |\n   = note: expected type `isize`\n            found struct `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut x: Vec<isize> = x;\n\
    \    let mut output: Vec<isize> = Vec::new();\n    while x.len() > 0 {\n     \
    \   let mut i = x.len();\n        let mut j = 0;\n        while i > j {\n    \
    \        if x[i] % 2 == 0 {\n                i = i - 1;\n            } else {\n\
    \                output.push(x[j]);\n                j = j + 1;\n            }\n\
    \        }\n        i = i + 1;\n        while i < x.len() {\n            if x[i]\
    \ % 2 != 0 {\n                output.push(x[i]);\n                i = i + 1;\n\
    \            } else {\n                i = i + 1;\n            }\n        }\n\
    \        x = output.clone();\n    }\n    output.sort();\n    output\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 4 but the index\
    \ is 4', /tmp/tmpz5edtslk.rs:16:16\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n\
    \    for n in x {\n        if n % 2 == 0 {\n            continue;\n        }\n\
    \        v.push(n);\n    }\n    v.sort();\n    v\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[323]`,\n right: `[]`', /tmp/tmpacx_8ao2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \n    for ele in x.iter().cloned() {\n        let mut tmp = ele;\n        while\
    \ tmp % 10 == 0 {\n            tmp /= 10;\n        }\n\n        if !result.contains(&tmp)\
    \ {\n            result.push(tmp);\n        }\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp323ce312.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // Sort the input vector\
    \ in increasing order.\n    let mut s = x.iter().cloned().collect::<Vec<isize>>();\n\
    \    s.sort();\n\n    // Find all the even digit positions inside vector.\n  \
    \  let mut even: Vec<isize> = vec![];\n    for i in 0..s.len() {\n        if i\
    \ & 1 != 0 {\n            even.push(i);\n        }\n    }\n\n    // Find all odd\
    \ digit positions inside vector.\n    let mut odd: Vec<isize> = vec![];\n    for\
    \ i in 0..s.len() {\n        if i & 1 == 0 {\n            odd.push(i);\n     \
    \   }\n    }\n\n    // Combine these vectors based on positions and store in a\
    \ result vector.\n    let mut res: Vec<isize> = vec![];\n    for i in 0..even.len()\
    \ {\n        res.push(s[even[i]]);\n    }\n    for i in 0..odd.len() {\n     \
    \   res.push(s[odd[i]]);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptjcrhkma.rs:18:23\n   |\n\
    18 |             even.push(i);\n   |                       ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n18 |             even.push(i.try_into().unwrap());\n\
    \   |                        ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptjcrhkma.rs:26:22\n   |\n26 |             odd.push(i);\n\
    \   |                      ^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n26 |             odd.push(i.try_into().unwrap());\n   |         \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmptjcrhkma.rs:33:18\n   |\n33 |         res.push(s[even[i]]);\n\
    \   |                  ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmptjcrhkma.rs:36:18\n   |\n36 |         res.push(s[odd[i]]);\n  \
    \ |                  ^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut nums = x;\n    nums.sort();\n\
    \    let mut digits = vec![];\n\n    for i in nums.iter() {\n        let mut temp_digits\
    \ = vec![];\n        let mut dig = i;\n        loop {\n            let mut i =\
    \ i;\n            while i >= 10 {\n                i /= 10;\n                temp_digits.insert(0,\
    \ i%10);\n            }\n            digits.extend_from_slice(temp_digits);\n\
    \            if i < 10 {\n                break;\n            }\n            dig\
    \ = i % 10;\n            temp_digits = vec![];\n        }\n\n        for i in\
    \ digits.iter() {\n            if dig % i == 0 {\n                break;\n   \
    \         }\n        }\n\n        if i == digits.len() {\n            digits.push(i);\n\
    \        }\n    }\n\n    digits\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8uqug1ew.rs:19:24\n   |\n\
    19 |             while i >= 10 {\n   |                        ^^\n   |       \
    \                 |\n   |                        expected `&isize`, found integer\n\
    \   |                        help: consider borrowing here: `&10`\n\nerror[E0368]:\
    \ binary assignment operation `/=` cannot be applied to type `&isize`\n  --> /tmp/tmp8uqug1ew.rs:20:17\n\
    \   |\n20 |                 i /= 10;\n   |                 -^^^^^^\n   |     \
    \            |\n   |                 cannot use `/=` on type `&isize`\n   |\n\
    help: `/=` can be used on `isize`, you can dereference `i`\n   |\n20 |       \
    \          *i /= 10;\n   |                 +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8uqug1ew.rs:23:38\n   |\n23 |             digits.extend_from_slice(temp_digits);\n\
    \   |                                      ^^^^^^^^^^^\n   |                 \
    \                     |\n   |                                      expected `&[_]`,\
    \ found struct `Vec`\n   |                                      help: consider\
    \ borrowing here: `&temp_digits`\n   |\n   = note: expected reference `&[_]`\n\
    \                 found struct `Vec<isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8uqug1ew.rs:24:20\n   |\n24 |             if i < 10 {\n   |   \
    \                 ^^\n   |                    |\n   |                    expected\
    \ `&isize`, found integer\n   |                    help: consider borrowing here:\
    \ `&10`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8uqug1ew.rs:27:19\n \
    \  |\n16 |         let mut dig = i;\n   |                       - expected due\
    \ to this value\n...\n27 |             dig = i % 10;\n   |                   ^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(i % 10)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8uqug1ew.rs:37:17\n   |\n37 |         if i ==\
    \ digits.len() {\n   |                 ^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8uqug1ew.rs:38:25\n   |\n38 |\
    \             digits.push(i)"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n\
    \    let mut i = 1usize;\n    while i <= x.len() {\n        if i % 2 != 0 {\n\
    \            v.push(i);\n        }\n        i += 1;\n    }\n    v.sort();\n  \
    \  v\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkd416tjd.rs:14:20\n   |\n\
    14 |             v.push(i);\n   |                    ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n14 |             v.push(i.try_into().unwrap());\n\
    \   |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for num in x {\n        let mut tmp: Vec<isize> = Vec::new();\n        for\
    \ d in num {\n            if d % 2 == 0 {\n                tmp.push(d);\n    \
    \        }\n        }\n        if tmp.len() != 0 {\n            res.push(tmp);\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: `isize` is not an iterator\n  --> /tmp/tmphxhofkhg.rs:13:18\n\
    \   |\n13 |         for d in num {\n   |                  ^^^ `isize` is not an\
    \ iterator\n   |\n   = help: the trait `Iterator` is not implemented for `isize`\n\
    \   = note: if you want to iterate between `start` until a value `end`, use the\
    \ exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphxhofkhg.rs:22:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n22 |     res\n   |     ^^^ expected `isize`, found struct `Vec`\n   |\n \
    \  = note: expected struct `Vec<isize>`\n              found struct `Vec<Vec<isize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut set = HashSet::new();\n\
    \    let mut x: Vec<_> = x.into_iter().cloned().collect();\n    x.sort_unstable();\n\
    \    for i in x {\n        if set.add(i) {\n            set.insert(i / 10);\n\
    \        }\n    }\n    set.into_iter().cloned().collect()\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmps4m6l53i.rs:10:19\n   |\n10 |     let mut set = HashSet::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0271]:\
    \ type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item == &_`\n\
    \    --> /tmp/tmps4m6l53i.rs:11:39\n     |\n11   |     let mut x: Vec<_> = x.into_iter().cloned().collect();\n\
    \     |                                       ^^^^^^ expected reference, found\
    \ `isize`\n     |\n     = note: expected reference `&_`\n                    \
    \ found type `isize`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the\
    \ method `collect` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but\
    \ its trait bounds were not satisfied\n  --> /tmp/tmps4m6l53i.rs:11:48\n   |\n\
    11 |       let mut x: Vec<_> = x.into_iter().cloned().collect();\n   |       \
    \                                           ^^^^^^^ method cannot be called on\
    \ `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n   |\n\
    \   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n      \
    \     which is required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0433, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut set = Set::new();\n\
    \    for &d in x {\n        set.insert(d);\n    }\n    \n    let mut res = Vec::new();\n\
    \    for i in x.iter() {\n        if !set.contains(&i % 10) {\n            res.push(i);\n\
    \        }\n    }\n    \n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Set`\n  --> /tmp/tmp1gnlgj_p.rs:10:19\n\
    \   |\n10 |     let mut set = Set::new();\n   |                   ^^^ use of undeclared\
    \ type `Set`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1gnlgj_p.rs:11:9\n\
    \   |\n11 |     for &d in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `d`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0369]: cannot mod `&&isize`\
    \ by `{integer}`\n  --> /tmp/tmp1gnlgj_p.rs:17:29\n   |\n17 |         if !set.contains(&i\
    \ % 10) {\n   |                          -- ^ -- {integer}\n   |             \
    \             |\n   |                          &&isize\n   |\nhelp: `%` can be\
    \ used on `isize`, you can dereference `&i`\n   |\n17 |         if !set.contains(*&i\
    \ % 10) {\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp1gnlgj_p.rs:22:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n22 |     res\n   |     ^^^ expected `isize`, found\
    \ `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<&isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut z = x.clone();\n\
    \    z.sort();\n    let mut ans = x.clone();\n    ans.retain(|&x| x.is_odd());\n\
    \    z.remove(&0usize);\n    ans.extend(z);\n    ans\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpm0vw0r6k.rs:13:23\n   |\n13 |     ans.retain(|&x| x.is_odd());\n\
    \   |                       ^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm0vw0r6k.rs:14:14\n   |\n14 |     z.remove(&0usize);\n\
    \   |              ^^^^^^^ expected `usize`, found `&usize`\n   |\nhelp: consider\
    \ removing the borrow\n   |\n14 -     z.remove(&0usize);\n14 +     z.remove(0usize);\n\
    \   | \n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut x: Vec<isize> = x.clone();\n\
    \    x.sort_unstable();\n    let mut out: Vec<isize> = x.clone();\n    for i in\
    \ 0..x.len() {\n        if i % 2 == 0 {\n            continue;\n        }\n  \
    \      for j in (i + 1)..x.len() {\n            if x[i] == x[j] {\n          \
    \      continue;\n            }\n            if x[i] % 10 == x[j] % 10 {\n   \
    \             continue;\n            }\n            if x[i] % 10 > x[j] % 10 {\n\
    \                break;\n            }\n        }\n        out.push(x[i]);\n \
    \   }\n    out\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15, 33, 1422, 15, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmp9eu2wxve.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.iter().any(|&x| x %\
    \ 2 == 0) {\n        vec![]\n    } else {\n        let mut z = x.clone();\n  \
    \      z.remove(0);\n        z.sort_unstable();\n        z\n    }\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmp57m8dgub.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut v: Vec<isize> = x.clone();\n\
    \    v.sort();\n\n    let mut res: Vec<isize> = Vec::new();\n\n    while v.len()\
    \ > 0 {\n        let n = v.as_slice().pop().unwrap();\n        let mut even =\
    \ true;\n        let mut digits = 1;\n        let mut last = -1;\n        for\
    \ &d in &v {\n            if d % 2 == 0 {\n                even = false;\n   \
    \             break;\n            }\n\n            if d == n {\n             \
    \   digits += 1;\n            } else {\n                break;\n            }\n\
    \        }\n\n        if even {\n            res.push(n);\n        }\n\n     \
    \   // if digits are same we must check if the last digits is even\n        if\
    \ digits == 1 {\n            last += 1;\n            let mut even = true;\n  \
    \          for &d in &v {\n                if d == n {\n                    even\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if even {\n                res.push(n);\n            }\n        }\n\
    \    }\n\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `pop` found for reference `&[isize]` in the\
    \ current scope\n  --> /tmp/tmphy8ylfgy.rs:16:30\n   |\n16 |         let n = v.as_slice().pop().unwrap();\n\
    \   |                              ^^^ method not found in `&[isize]`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len() == 0 {\n     \
    \   return x;\n    }\n\n    let mut x: Vec<isize> = x.clone();\n    let mut y\
    \ = x.clone();\n\n    let mut z = x.clone();\n\n    z.sort();\n\n    while x.len()\
    \ > 0 {\n        if z[x.len() - 1] % 2 == 0 {\n            z.swap(x.len() - 1,\
    \ z.len() - 1);\n        }\n\n        x.pop();\n    }\n\n    z.sort();\n\n   \
    \ x.extend(z);\n\n    x.sort_unstable();\n\n    x\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `y`\n  --> /tmp/tmpxoze62qf.rs:15:13\n   |\n\
    15 |     let mut y = x.clone();\n   |             ^ help: if this is intentional,\
    \ prefix it with an underscore: `_y`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpxoze62qf.rs:15:9\n\
    \   |\n15 |     let mut y = x.clone();\n   |         ----^\n   |         |\n \
    \  |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on\
    \ by default\n\nerror[E0502]: cannot borrow `z` as immutable because it is also\
    \ borrowed as mutable\n  --> /tmp/tmpxoze62qf.rs:23:33\n   |\n23 |           \
    \  z.swap(x.len() - 1, z.len() - 1);\n   |             --------------------^^^^^^^-----\n\
    \   |             | |                 |\n   |             | |                \
    \ immutable borrow occurs here\n   |             | mutable borrow later used by\
    \ call\n   |             mutable borrow occurs here\n   |\nhelp: try adding a\
    \ local storing this argument...\n  --> /tmp/tmpxoze62qf.rs:23:33\n   |\n23 |\
    \             z.swap(x.len() - 1, z.len() - 1);\n   |                        \
    \         ^^^^^^^\nhelp: ...and then using that local as the argument to this\
    \ call\n  --> /tmp/tmpxoze62qf.rs:23:13\n   |\n23 |             z.swap(x.len()\
    \ - 1, z.len() - 1);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror:\
    \ aborting due to previous error; 2 warnings emitted\n\nFor more information about\
    \ this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort_unstable();\n    let\
    \ mut seen = HashSet::new();\n    x.into_iter().filter(|&x| !seen.insert(x).unwrap()).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp9o04qgvx.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut seen = BTreeSet::new();\n\
    \    \n    for i in x.iter() {\n        if !seen.contains(i) {\n            seen.insert(i);\n\
    \        }\n    }\n    \n    seen.iter().cloned().collect()\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n  -->\
    \ /tmp/tmpq_2_h6d5.rs:10:20\n   |\n10 |     let mut seen = BTreeSet::new();\n\
    \   |                    ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::BTreeSet;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = vec![];\n    result.extend_from_slice(x.iter().filter_map(|&n| {\n       \
    \ let is_even = n % 2 == 0;\n        if is_even {\n            Some(n)\n     \
    \   } else {\n            None\n        }\n    }));\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp07v8ynhi.rs:11:30\n   |\n\
    11 |       result.extend_from_slice(x.iter().filter_map(|&n| {\n   |  ______________________________^\n\
    12 | |         let is_even = n % 2 == 0;\n13 | |         if is_even {\n14 | |\
    \             Some(n)\n...  |\n17 | |         }\n18 | |     }));\n   | |______^\
    \ expected `&[isize]`, found struct `FilterMap`\n   |\n   = note: expected reference\
    \ `&[isize]`\n                 found struct `FilterMap<std::slice::Iter<'_, isize>,\
    \ [closure@/tmp/tmp07v8ynhi.rs:11:50: 18:6]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len() == 0 || x.iter().any(|&x|\
    \ *x % 2 == 0) {\n        return x;\n    }\n\n    // Sort them in increasing order.\n\
    \    let mut tmp = x.clone();\n    std::sort_unstable(&mut tmp);\n\n    // Build\
    \ a new vector that has same size as x. \n    let mut res: Vec<isize> = x.clone();\n\
    \    for i in tmp {\n        if *i % 2 == 0 {\n            continue;\n       \
    \ }\n        \n        for j in &mut res {\n            if *j == i {\n       \
    \         break;\n            }\n        }\n        \n        if j == &mut res\
    \ {\n            res.push(i);\n        }\n    }\n\n    // Sort it again.\n   \
    \ std::sort_unstable(&mut res);\n\n    return res;\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sort_unstable` in crate `std`\n  -->\
    \ /tmp/tmpjdasflck.rs:16:10\n   |\n16 |     std::sort_unstable(&mut tmp);\n  \
    \ |          ^^^^^^^^^^^^^ not found in `std`\n\nerror[E0425]: cannot find value\
    \ `j` in this scope\n  --> /tmp/tmpjdasflck.rs:31:12\n   |\n31 |         if j\
    \ == &mut res {\n   |            ^ help: a local variable with a similar name\
    \ exists: `i`\n\nerror[E0425]: cannot find function `sort_unstable` in crate `std`\n\
    \  --> /tmp/tmpjdasflck.rs:37:10\n   |\n37 |     std::sort_unstable(&mut res);\n\
    \   |          ^^^^^^^^^^^^^ not found in `std`\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmpjdasflck.rs:10:42\n   |\n10 |     if x.len()\
    \ == 0 || x.iter().any(|&x| *x % 2 == 0) {\n   |                             \
    \             ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpjdasflck.rs:21:12\n\
    \   |\n21 |         if *i % 2 == 0 {\n   |            ^^\n\nerror: aborting due\
    \ to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0614.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize>\
    \ = Vec::new();\n    let mut rest = Vec::new();\n\n    for digit in x {\n    \
    \    if digit % 2 == 0 {\n            even.push(digit);\n        } else {\n  \
    \          rest.push(digit);\n        }\n    }\n    let mut unique = Vec::new();\n\
    \n    even.sort_unstable();\n    rest.sort_unstable();\n\n    let mut iter = even.iter();\n\
    \    while let Some(digit) = iter.next() {\n        unique.push(digit);\n    \
    \    if let Some(digit2) = iter.next() {\n            if digit != digit2 {\n \
    \               while let Some(digit3) = iter.next() {\n                    if\
    \ digit3 == digit {\n                        unique.push(digit3);\n          \
    \              break;\n                    }\n                }\n            }\n\
    \        }\n    }\n\n    unique\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_vu_t5t9.rs:40:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    40 |     unique\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut i = 0;\n    while x.len() > 0 {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n        }\n        i += 1;\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 4 but the index\
    \ is 4', /tmp/tmpdrs1h57w.rs:13:12\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len() == 0 {\n     \
    \   return x;\n    }\n    let mut uniques = Vec::new();\n    let mut evens = 0;\n\
    \n    for el in x {\n        if el & 1 == 0 {\n            evens += 1;\n     \
    \   } else {\n            uniques.push(el);\n        }\n    }\n\n    if evens\
    \ == x.len() {\n        uniques\n    } else {\n        uniques\n    }\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `x`\n   --> /tmp/tmpqbj047qp.rs:24:17\n\
    \    |\n9   | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    |         \
    \         - move occurs because `x` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n16  |     for el in x {\n    |               - `x` moved\
    \ due to this implicit call to `.into_iter()`\n...\n24  |     if evens == x.len()\
    \ {\n    |                 ^^^^^^^ value borrowed here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `x`\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n16  |     for el in &x {\n    |               +\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = vec![];\n \
    \   let mut tmp = 0;\n    loop {\n        let tmp = x.iter().map(|&x| x as isize).sum();\n\
    \        if tmp % 2 == 0 {\n            res.push(tmp / 2);\n            break;\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp67916myw.rs:13:13\n\
    \   |\n13 |         let tmp = x.iter().map(|&x| x as isize).sum();\n   |     \
    \        ^^^ consider giving `tmp` a type\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut y: Vec<isize> = Vec::new();\n\
    \    let mut z: usize = 0;\n    for (i, v) in x.iter().enumerate() {\n       \
    \ if ((v / 10) % 2 == 0) {\n            y.push(v);\n        }\n        while (v\
    \ / 10 / 10) != z {\n            z += 1; \n        }\n    }\n    y\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyuh7fpqh.rs:13:12\n\
    \   |\n13 |         if ((v / 10) % 2 == 0) {\n   |            ^              \
    \   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these\
    \ parentheses\n   |\n13 -         if ((v / 10) % 2 == 0) {\n13 +         if (v\
    \ / 10) % 2 == 0 {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyuh7fpqh.rs:14:20\n\
    \   |\n14 |             y.push(v);\n   |                    ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |  \
    \           y.push(*v);\n   |                    +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyuh7fpqh.rs:16:32\n   |\n16 |         while (v / 10 / 10)\
    \ != z {\n   |                                ^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |         while (v / 10 / 10) != z.try_into().unwrap()\
    \ {\n   |                                 ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut sorted_x = x.into_iter().sorted();\n\
    \    let mut result = vec![];\n    sorted_x.peek().unwrapunwrap().iter().for_each(|x|{\n\
    \        let digits = x.digits();\n        match digits.get(0) >> 1 {\n      \
    \      0 => result.push(x),\n            _ => {}\n        }\n    });\n    sorted_x.pop().unwrap().iter().for_each(|x|{\n\
    \        let digits = x.digits();\n        match digits.get(0) >> 1 {\n      \
    \      0 => result.push(x),\n            _ => {}\n        }\n    });\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `std::vec::IntoIter`\
    \ in the current scope\n  --> /tmp/tmph0d0n61f.rs:10:38\n   |\n10 |     let mut\
    \ sorted_x = x.into_iter().sorted();\n   |                                   \
    \   ^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut y = x.clone();\n\
    \    for num in y {\n        if num % 2 == 0 {\n            y = y\n          \
    \      .iter()\n                .filter(|x| *x % 10 != 0)\n                .collect::<Vec<_>>()\n\
    \                .join();\n        } else {\n            break;\n        }\n \
    \   }\n    y\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `join` exists for struct `Vec<&isize>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpnff84pc3.rs:17:18\n   |\n17 |\
    \                 .join();\n   |                  ^^^^ method cannot be called\
    \ on `Vec<&isize>` due to unsatisfied trait bounds\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `[&isize]: Join<_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut output: Vec<isize>\
    \ = x.clone();\n    let mut map: HashMap<isize, usize> = HashMap::new();\n   \
    \ \n    for v in x.iter() {\n        map.insert(v, 1);\n    }\n    \n    for v\
    \ in map.iter() {\n        if v != 0 {\n            for &i in v.unwrap() {\n \
    \               if map.get_mut(&i).unwrap() == 0 {\n                    output.remove(i);\n\
    \                }\n            }\n        }\n    }\n    \n    output\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n  --> /tmp/tmp6y1xco88.rs:11:18\n\
    \   |\n11 |     let mut map: HashMap<isize, usize> = HashMap::new();\n   |   \
    \               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n  --> /tmp/tmp6y1xco88.rs:11:42\n\
    \   |\n11 |     let mut map: HashMap<isize, usize> = HashMap::new();\n   |   \
    \                                       ^^^^^^^ not found in this scope\n   |\n\
    help: consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut i = 0;\n    let mut even_cnt = 0;\n    while i < x.len() {\n    \
    \    if x[i] % 2 == 0 {\n            even_cnt += 1;\n        }\n        if even_cnt\
    \ == 0 {\n            result.push(x[i]);\n            i += 1;\n            even_cnt\
    \ = 0;\n        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut digits = HashSet::new();\n    for i in x.iter() {\n        if digits.contains(i)\
    \ && digits.count() >= 2 {\n            continue;\n        }\n        result.push(i);\n\
    \        digits.insert(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpm4dssvn_.rs:11:22\n   |\n11 |     let mut digits = HashSet::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm4dssvn_.rs:19:5\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n19 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // Write your code here\n\
    \    // return x;\n    let mut result: Vec<isize> = Vec::new();\n    let mut digits\
    \ = x.len() as usize;\n    let mut count = 0;\n    for i in x {\n        if i\
    \ < 10 { \n            result.push(i);\n        }else{\n            count += 1;\n\
    \            if count >= digits {\n                result.push(i);\n         \
    \       count = 0;\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[1, 15, 33]`', /tmp/tmp61mxwdj7.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut x: Vec<_> = x.iter().map(|&i|\
    \ i.clone()).collect();\n    let mut result: Vec<_> = x.clone();\n    result.sort();\n\
    \    let mut j = 0;\n    for i in result.iter_mut().rev() {\n        if i % 2\
    \ == 0 {\n            result[j] /= 2;\n            j -= 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmpwacsafee.rs:15:14\n\
    \   |\n15 |         if i % 2 == 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `i`\n   |\n15 |         if *i % 2 == 0 {\n   |         \
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut s = std::mem::MaybeUninit::<Vec<isize>>::uninit();\n\
    \    s.as_mut_ptr()\n        .map(|y| unsafe {\n            std::slice::from_raw_parts_mut(y.as_mut_ptr(),\
    \ y.len())\n        })\n        .cloned()\n        .unwrap()\n        .sort();\n\
    \n    for z in x.iter() {\n        let mut i = z;\n        let mut count = 0;\n\
    \        while i >= 10 {\n            i += 10\n        }\n        if *count !=\
    \ 0 {\n            if *i % 2 == 0 {\n                s.push(*i as isize);\n  \
    \              *count += 1;\n            } else {\n                *count += 1;\n\
    \            }\n        }\n    }\n\n    s.cloned().collect()\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `*mut Vec<isize>` is not an iterator\n  --> /tmp/tmp8y_03kwc.rs:12:10\n\
    \   |\n12 |         .map(|y| unsafe {\n   |          ^^^ `*mut Vec<isize>` is\
    \ not an iterator\n   |\n   = note: try using `<*const T>::as_ref()` to get a\
    \ reference to the type behind the pointer: https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref\n\
    \   = note: using `<*const T>::as_ref()` on a pointer which is unaligned or points\
    \ to invalid or uninitialized memory is undefined behavior\n   = note: the following\
    \ trait bounds were not satisfied:\n           `*mut Vec<isize>: Iterator`\n \
    \          which is required by `&mut *mut Vec<isize>: Iterator`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8y_03kwc.rs:22:20\n   |\n22 |         while\
    \ i >= 10 {\n   |                    ^^\n   |                    |\n   |     \
    \               expected `&isize`, found integer\n   |                    help:\
    \ consider borrowing here: `&10`\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `&isize`\n  --> /tmp/tmp8y_03kwc.rs:23:13\n \
    \  |\n23 |             i += 10\n   |             -^^^^^^\n   |             |\n\
    \   |             cannot use `+=` on type `&isize`\n   |\nhelp: `+=` can be used\
    \ on `isize`, you can dereference `i`\n   |\n23 |             *i += 10\n   | \
    \            +\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  -->\
    \ /tmp/tmp8y_03kwc.rs:25:12\n   |\n25 |         if *count != 0 {\n   |       \
    \     ^^^^^^\n\nerror[E0599]: no method named `push` found for union `MaybeUninit`\
    \ in the current scope\n  --> /tmp/tmp8y_03kwc.rs:27:19\n   |\n27 |          \
    \       s.push(*i as isize);\n   |                   ^^^^ method not found in\
    \ `MaybeUninit<Vec<isize>>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n\
    \  --> /tmp/tmp8y_03kwc.rs:28:17\n   |\n28 |                 *count += 1;\n  \
    \ |                 ^^^^^^\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n\
    \  --> /tmp/tmp8y_03kwc.rs:30:17\n   |\n30 |                 *count += 1;\n  \
    \ |                 ^^^^^^\n\nerror[E0599]: `MaybeUninit<Vec<isize>>` is not an\
    \ iterator\n   --> /tmp/tmp8y_03kwc.rs:35"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut count = x.iter().map(|&n| n*n as isize).count();\n    while count\
    \ > 0 {\n        if x.get(count/2) % 2 == 0 {\n            result.push(x[count/2]\
    \ - x[count/2-1]);\n            x.swap(count/2, count/2);\n        }\n       \
    \ count -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `Option<&isize>` by `{integer}`\n  --> /tmp/tmp7t2crq02.rs:13:27\n\
    \   |\n13 |         if x.get(count/2) % 2 == 0 {\n   |            --------------\
    \ ^ - {integer}\n   |            |\n   |            Option<&isize>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut a = x.clone();\n\
    \    let mut b = x.clone();\n    b.sort_unstable();\n    for i in b {\n      \
    \  if i % 2 != 0 {\n            a.push(i);\n        }\n    }\n    a\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1, 1, 15, 33]`,\n right: `[1, 15, 33]`', /tmp/tmpat1icqrb.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort();\n    let mut i\
    \ = x.len();\n    let mut result: Vec<isize> = Vec::new();\n    while i >= 1 {\n\
    \        if x[i] % 2 != 0 {\n            result.push(x[i]);\n        }\n     \
    \   i -= 1;\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmp4lmvkt79.rs:10:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                  - help: consider changing this to be mutable:\
    \ `mut x`\n10 |     x.sort();\n   |     ^^^^^^^^ cannot borrow as mutable\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = x.clone();\n\
    \    \n    // O(|x| * sqrt(|x|))\n    result.sort();\n\n    for i in 0..result.len()\
    \ {\n        if result[(i + 1) % result.len()] % 2 == 0 {\n            result.remove(i);\n\
    \        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmpgjr4j6ec.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut sorted_x = x.clone();\n\
    \    sorted_x.sort();\n    let mut counter: isize = 0;\n    for e in sorted_x\
    \ {\n        if e % 2 != 0 {\n            sorted_x[counter] = e;\n           \
    \ counter++;\n        }\n    }\n    sorted_x\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpu_0iyeix.rs:16:20\n\
    \   |\n16 |             counter++;\n   |                    ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n16 |             { let tmp =\
    \ counter; counter += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n\
    16 -             counter++;\n16 +             counter += 1;\n   | \n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu_0iyeix.rs:15:13\n\
    \   |\n15 |             sorted_x[counter] = e;\n   |             ^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = vec![];\n \
    \   let mut num = 0;\n    for d in x.iter() {\n        while num % 10 == 0 {\n\
    \            num *= 10;\n        }\n        if num != d {\n            res.push(d);\n\
    \            num += d;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpbo07upjz.rs:16:16\n\
    \   |\n16 |         if num != d {\n   |                ^^ no implementation for\
    \ `isize == &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbo07upjz.rs:21:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n21 |     res\n   |     ^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut set = Set::new();\n\
    \    x.iter().for_each(|n|\n        match n % 10 {\n            0 => set.insert(n),\n\
    \            _ => {}\n        });\n    let mut ret = Vec::new();\n    for n in\
    \ set.iter() {\n        if !ret.contains(&n) {\n            ret.push(n);\n   \
    \     }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Set`\n  --> /tmp/tmpw705p5ev.rs:10:19\n\
    \   |\n10 |     let mut set = Set::new();\n   |                   ^^^ use of undeclared\
    \ type `Set`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len() == 0 {\n     \
    \   return vec![];\n    }\n    let mut digits = vec![];\n    let mut last_digit\
    \ = x[0];\n    for digit in x.iter().cloned() {\n        if digit % 2 == 0 {\n\
    \            digits.push(digit);\n        }\n        last_digit = digit;\n   \
    \ }\n    digits.push(last_digit);\n    digits\n        .iter()\n        .cloned()\n\
    \        .cloned()\n        .sort_by_key(|x| x.to_digit(10))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmp594ah0nh.rs:25:10\n     |\n25   | \
    \        .cloned()\n     |          ^^^^^^ expected reference, found `isize`\n\
    \     |\n     = note: expected reference `&&_`\n                found reference\
    \ `&isize`\n     = note: required because of the requirements on the impl of `Iterator`\
    \ for `Cloned<std::slice::Iter<'_, isize>>`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: no method named `sort_by_key` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmp594ah0nh.rs:26:10\n   |\n26 |         .sort_by_key(|x|\
    \ x.to_digit(10))\n   |          ^^^^^^^^^^^ method not found in `Cloned<Cloned<std::slice::Iter<'_,\
    \ isize>>>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut it = x.iter().cloned().rev();\n    for i in it {\n        if !result.contains(&i\
    \ % 10) {\n            result.push(i % 10);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp883mql3w.rs:13:29\n   |\n\
    13 |         if !result.contains(&i % 10) {\n   |                            \
    \ ^^^^^^^\n   |                             |\n   |                          \
    \   expected reference, found `isize`\n   |                             help:\
    \ consider borrowing here: `&(&i % 10)`\n   |\n   = note: expected reference `&_`\n\
    \                   found type `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut v = x.clone();\n\
    \    v.sort();\n    for &x in v {\n        if x % 2 == 0 {\n            v.push(x);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmcedw6ph.rs:12:9\n   |\n\
    12 |     for &x in v {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // We need to use HashSet\
    \ here for better efficiency because we need\n    // to check each element with\
    \ all elements that have the same odd digit\n    // which should be quite fast.\
    \ We can also use HashSet to do that. HashSet\n    // has a good performance guarantee\
    \ on hash based data structure.\n    let mut s: HashSet<isize> = HashSet::new();\n\
    \    for i in x.iter() {\n        if s.contains(i / 10) {\n            continue;\n\
    \        }\n        s.insert(i / 10);\n    }\n    let mut rev_s: Vec<isize> =\
    \ s.iter().rev().collect();\n    rev_s.sort();\n    rev_s\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmp7wwjv987.rs:14:16\n\
    \   |\n14 |     let mut s: HashSet<isize> = HashSet::new();\n   |            \
    \    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp7wwjv987.rs:14:33\n   |\n14\
    \ |     let mut s: HashSet<isize> = HashSet::new();\n   |                    \
    \             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().map(|x| x / 10).filter(|&x|\
    \ x.is_power_of_two()).cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_power_of_two` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpf3z6486y.rs:10:44\n   |\n10 |     x.iter().map(|x|\
    \ x / 10).filter(|&x| x.is_power_of_two()).cloned().collect()\n   |          \
    \                                  ^^^^^^^^^^^^^^^ method not found in `isize`\n\
    \nerror[E0271]: type mismatch resolving `<[closure@/tmp/tmpf3z6486y.rs:10:18:\
    \ 10:28] as FnOnce<(&isize,)>>::Output == &_`\n  --> /tmp/tmpf3z6486y.rs:10:63\n\
    \   |\n10 |     x.iter().map(|x| x / 10).filter(|&x| x.is_power_of_two()).cloned().collect()\n\
    \   |                                                               ^^^^^^ expected\
    \ reference, found `isize`\n   |\n   = note: expected reference `&_`\n       \
    \            found type `isize`\n   = note: required because of the requirements\
    \ on the impl of `Iterator` for `Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmpf3z6486y.rs:10:18:\
    \ 10:28]>`\n   = note: 1 redundant requirement hidden\n   = note: required because\
    \ of the requirements on the impl of `Iterator` for `Filter<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpf3z6486y.rs:10:18: 10:28]>, [closure@/tmp/tmpf3z6486y.rs:10:37:\
    \ 10:61]>`\n\nerror[E0631]: type mismatch in closure arguments\n  --> /tmp/tmpf3z6486y.rs:10:63\n\
    \   |\n10 |     x.iter().map(|x| x / 10).filter(|&x| x.is_power_of_two()).cloned().collect()\n\
    \   |                                     ------------------------  ^^^^^^ expected\
    \ signature of `for<'r> fn(&'r &_) -> _`\n   |                               \
    \      |\n   |                                     found signature of `for<'r>\
    \ fn(&'r isize) -> _`\n   |\n   = note: required because of the requirements on\
    \ the impl of `Iterator` for `Filter<Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmpf3z6486y.rs:10:18:\
    \ 10:28]>, [closure@/tmp/tmpf3z6486y.rs:10:37: 10:61]>`\n\nerror[E0599]: the method\
    \ `collect` exists for struct `Cloned<Filter<Map<std::slice::Iter<'_, isize>,\
    \ [closure@/tmp/tmpf3z6486y.rs:10:18: 10:28]>, [closure@/tmp/tmpf3z6486y.rs:10:37:\
    \ 10:61]>>`, but its trait bounds were not satisfied\n  --> /tmp/tmpf3z6486y.rs:10"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    \n    for digit in x {\n        if seen.contains(&digit\
    \ * 10) {\n            continue;\n        }\n        seen.insert(digit * 10);\n\
    \    }\n    \n    seen.clone().into_iter().collect::<Vec<_>>()\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmp24vbgi60.rs:10:19\n\
    \   |\n10 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmp24vbgi60.rs:10:36\n\
    \   |\n10 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut i = 0;\n    x.sort();\n\
    \    loop {\n        let idx = i + 1;\n        let mut found = false;\n      \
    \  for &num in x {\n            if num % 10 == 0 {\n                found = true;\n\
    \                break;\n            }\n        }\n        if !found {\n     \
    \       return x.iter().cloned().collect();\n        }\n        i = idx;\n   \
    \ }\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppvr55_g8.rs:15:13\n   |\n\
    15 |         for &num in x {\n   |             ^^^^    - this expression has type\
    \ `Option<isize>`\n   |             |\n   |             expected `isize`, found\
    \ reference\n   |             help: you can probably remove the explicit borrow:\
    \ `num`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = vec![];\n \
    \   let mut hash_set = HashSet::new();\n    for &i in x {\n        hash_set.add(i).unwrap();\n\
    \    }\n    for &i in hash_set.iter() {\n        res.push(i);\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpok0w6ocy.rs:11:24\n   |\n11 |     let mut hash_set = HashSet::new();\n\
    \   |                        ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpok0w6ocy.rs:12:9\n   |\n12 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut x = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    let mut ans = vec![];\n    loop {\n        let mut x\
    \ = x.iter().cloned().collect::<Vec<_>>();\n        let mut j = i;\n        while\
    \ j < x.len() {\n            if x[j] % 2 == 0 {\n                break;\n    \
    \        }\n            x.swap(j, j + 1);\n            j = j + 1;\n        }\n\
    \        i = j;\n        for v in x.iter().cloned() {\n            if i % 10 ==\
    \ v % 10 {\n                break;\n            }\n            ans.push(v % 10);\n\
    \            i += 1;\n        }\n        if i == x.len() {\n            break;\n\
    \        }\n    }\n    ans.sort_unstable();\n    ans\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7qe9v3qu.rs:25:26\n   |\n\
    25 |             if i % 10 == v % 10 {\n   |                          ^^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n25 |             if i %\
    \ 10 == (v % 10).try_into().unwrap() {\n   |                          +      +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut set = HashSet::new();\n\
    \    for &d in x {\n        let mut tmp = d*10;\n        while !set.is_member(&tmp)\
    \ {\n            set.insert(&tmp);\n            tmp += d;\n        }\n    }\n\
    \    \n    set.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpdpmaocki.rs:10:19\n   |\n10 |     let mut set = HashSet::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdpmaocki.rs:11:9\n   |\n11 |     for &d in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `d`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|&x| x.is_power_of_two()).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_power_of_two` found for reference `&isize`\
    \ in the current scope\n  --> /tmp/tmpscrwxu04.rs:10:28\n   |\n10 |     x.iter().filter(|&x|\
    \ x.is_power_of_two()).cloned().collect()\n   |                            ^^^^^^^^^^^^^^^\
    \ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.dedup_by(|a, b| a % b ==\
    \ 0)\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&mut isize` by `&mut isize`\n  --> /tmp/tmppkye9_ip.rs:10:25\n\
    \   |\n10 |     x.dedup_by(|a, b| a % b == 0)\n   |                       - ^\
    \ - &mut isize\n   |                       |\n   |                       &mut\
    \ isize\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppkye9_ip.rs:10:5\n  \
    \ |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |              \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    10 |     x.dedup_by(|a, b| a % b == 0)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\nnote: method `dedup_by` modifies its receiver\
    \ in-place\n  --> /tmp/tmppkye9_ip.rs:10:7\n   |\n10 |     x.dedup_by(|a, b| a\
    \ % b == 0)\n   |     - ^^^^^^^^ this call modifies `x` in-place\n   |     |\n\
    \   |     you probably want to use this value after calling the method...\n  \
    \ = note: ...instead of the `()` output of method `dedup_by`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut unique_digit = Vec::new();\n\
    \n    for x in x {\n        unique_digit.push(x / 10);\n    }\n\n    unique_digit.sort_unstable();\n\
    \n    for y in unique_digit {\n        if y % 2 == 0 {\n            continue;\n\
    \        }\n        \n        for z in unique_digit {\n            if z % 10 !=\
    \ y {\n                break;\n            }\n        }\n\n        if z % 10 !=\
    \ y {\n            unique_digit.push(y);\n            break;\n        }\n    }\n\
    \n    unique_digit\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `z` in this scope\n  --> /tmp/tmpj9mrahjc.rs:29:12\n\
    \   |\n29 |         if z % 10 != y {\n   |            ^ help: a local variable\
    \ with a similar name exists: `x`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut ret = vec![];\n \
    \   let mut digits = x.iter().map(|&d| d % 10).collect();\n    while !digits.is_empty()\
    \ {\n        let last = digits.last_mut().unwrap();\n        if last % 2 == 0\
    \ {\n            ret.append(last);\n            digits.pop();\n        }\n   \
    \ }\n    ret\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpyyy_uwnw.rs:12:12\n\
    \   |\n11 |     let mut digits = x.iter().map(|&d| d % 10).collect();\n   |  \
    \       ---------- consider giving `digits` a type\n12 |     while !digits.is_empty()\
    \ {\n   |            ^^^^^^ cannot infer type\n   |\n   = note: type must be known\
    \ at this point\n\nerror[E0277]: cannot mod `&mut Vec<_>` by `{integer}`\n  -->\
    \ /tmp/tmpyyy_uwnw.rs:14:17\n   |\n14 |         if last % 2 == 0 {\n   |     \
    \            ^ no implementation for `&mut Vec<_> % {integer}`\n   |\n   = help:\
    \ the trait `Rem<{integer}>` is not implemented for `&mut Vec<_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0282.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort();\n    let mut result\
    \ = Vec::new();\n    for i in 0..x.len() {\n        if x[i] % 2 == 0 {\n     \
    \       result.push(x[i]);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpf8f7zxnn.rs:10:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                  - help: consider changing this to be mutable:\
    \ `mut x`\n10 |     x.sort();\n   |     ^^^^^^^^ cannot borrow as mutable\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut output: Vec<isize>\
    \ = x.iter().cloned().collect();\n    let mut counter: usize = 0;\n    for i in\
    \ &x {\n        if i.is_even() {\n            counter += 1;\n        }\n    }\n\
    \    output.sort_unstable();\n    for v in &mut output {\n        if v.is_even()\
    \ && counter > 1 {\n            output.remove(v);\n        } else {\n        \
    \    counter -= 1;\n        }\n    }\n    output\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_even` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmpshcpqae4.rs:13:14\n   |\n13 |         if i.is_even()\
    \ {\n   |              ^^^^^^^ method not found in `&isize`\n\nerror[E0599]: no\
    \ method named `is_even` found for mutable reference `&mut isize` in the current\
    \ scope\n  --> /tmp/tmpshcpqae4.rs:19:14\n   |\n19 |         if v.is_even() &&\
    \ counter > 1 {\n   |              ^^^^^^^ method not found in `&mut isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpshcpqae4.rs:20:27\n   |\n20 |  \
    \           output.remove(v);\n   |                           ^ expected `usize`,\
    \ found `&mut isize`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort();\n    let mut s\
    \ = vec![];\n    for i in x {\n        if s.contains(i / 10) {\n            continue;\n\
    \        }\n        s.push(i);\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5ia9l4ls.rs:13:23\n   |\n\
    13 |         if s.contains(i / 10) {\n   |                       ^^^^^^\n   |\
    \                       |\n   |                       expected reference, found\
    \ `isize`\n   |                       help: consider borrowing here: `&(i / 10)`\n\
    \   |\n   = note: expected reference `&_`\n                   found type `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // get all odd numbers\n\
    \    let mut odd_x_without_any_even: Vec<isize> = vec![];\n    for num in x {\n\
    \        if num % 2 != 0 {\n            odd_x_without_any_even.push(num);\n  \
    \      }\n    }\n    // sort\n    odd_x_without_any_even.sort_by_key(|x| x.partial_cmp(&0).unwrap());\n\
    \    // remove all even numbers in x and return result\n    let mut result = vec![];\n\
    \    for num in odd_x_without_any_even {\n        if x & 1 == 1 {\n          \
    \  result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: no implementation for `Vec<isize> & {integer}`\n  --> /tmp/tmp9z5h__td.rs:22:14\n\
    \   |\n22 |         if x & 1 == 1 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            Vec<isize>\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut new_x = vec![];\n\
    \    for e in x {\n        if e % 2 == 0 {\n            continue;\n        }\n\
    \        let index = x.iter().position(|&i| i == e);\n        if index == std::cmp::max(x)\
    \ || index == std::cmp::min(x) {\n            continue;\n        }\n        let\
    \ mut new_e = e;\n        while new_e % 2 == 0 {\n            new_e /= 2;\n  \
    \      }\n        new_x.push(new_e);\n    }\n    new_x\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpnzvdc9w8.rs:16:21\n     |\n16   |         if index == std::cmp::max(x)\
    \ || index == std::cmp::min(x) {\n     |                     ^^^^^^^^^^^^^ - supplied\
    \ 1 argument\n     |                     |\n     |                     expected\
    \ 2 arguments\n     |\nnote: function defined here\n\nerror[E0061]: this function\
    \ takes 2 arguments but 1 argument was supplied\n    --> /tmp/tmpnzvdc9w8.rs:16:50\n\
    \     |\n16   |         if index == std::cmp::max(x) || index == std::cmp::min(x)\
    \ {\n     |                                                  ^^^^^^^^^^^^^ - supplied\
    \ 1 argument\n     |                                                  |\n    \
    \ |                                                  expected 2 arguments\n  \
    \   |\nnote: function defined here\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ Vec::new();\n\n    for v in x.iter() {\n        if v.is_even() {\n         \
    \   for _ in 0..(v as usize - 1) {\n                res.push(v);\n           \
    \ }\n        } else {\n            res.push(v);\n        }\n    }\n\n    res\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_even` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmp0henevui.rs:13:14\n   |\n13 |         if v.is_even()\
    \ {\n   |              ^^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0henevui.rs:15:26\n   |\n15 |                 res.push(v);\n\
    \   |                          ^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n15 |                 res.push(*v);\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0henevui.rs:18:22\n\
    \   |\n18 |             res.push(v);\n   |                      ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |  \
    \           res.push(*v);\n   |                      +\n\nerror[E0606]: casting\
    \ `&isize` as `usize` is invalid\n  --> /tmp/tmp0henevui.rs:14:26\n   |\n14 |\
    \             for _ in 0..(v as usize - 1) {\n   |                          -^^^^^^^^^\n\
    \   |                          |\n   |                          cannot cast `&isize`\
    \ as `usize`\n   |                          help: dereference the expression:\
    \ `*v`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599, E0606.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n\
    \    x.iter().enumerate().filter(|(i, x)| {\n        // check every x has even\
    \ digit\n        (i % 2 != 0)\n    }).for_each(|(idx, _)| {\n        // if the\
    \ x's digit is not an even digit, \n        // add it to the v\n        if idx\
    \ < x.len() {\n            v.push(x[idx]);\n        }\n    });\n    // if the\
    \ v is empty, return\n    if v.is_empty() {\n        return v;\n    }\n    //\
    \ sort the v in-place and get the first index that is odd \n    // return v\n\
    \    let mut idx = 0;\n    v.iter().enumerate().filter(|(_, v)| {\n        (v\
    \ % 2 != 0)\n    }).for_each(|(idx, _)| {\n        if idx > idx {\n          \
    \  idx\n        }\n    });\n    v.sort_unstable();\n    v[idx]\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around block return value\n  --> /tmp/tmpnzt25fee.rs:13:9\n\
    \   |\n13 |         (i % 2 != 0)\n   |         ^          ^\n   |\n   = note:\
    \ `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n\
    13 -         (i % 2 != 0)\n13 +         i % 2 != 0\n   | \n\nwarning: unnecessary\
    \ parentheses around block return value\n  --> /tmp/tmpnzt25fee.rs:29:9\n   |\n\
    29 |         (v % 2 != 0)\n   |         ^          ^\n   |\nhelp: remove these\
    \ parentheses\n   |\n29 -         (v % 2 != 0)\n29 +         v % 2 != 0\n   |\
    \ \n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpnzt25fee.rs:29:12\n\
    \   |\n29 |         (v % 2 != 0)\n   |          - ^ - {integer}\n   |        \
    \  |\n   |          &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `v`\n   |\n29 |         (*v % 2 != 0)\n   |          +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnzt25fee.rs:32:13\n   |\n31 | /         if idx > idx {\n\
    32 | |             idx\n   | |             ^^^ expected `()`, found `usize`\n\
    33 | |         }\n   | |_________- expected this to be `()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnzt25fee.rs:36:5\n   |\n9  | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                    ---------- expected\
    \ `Vec<isize>` because of return type\n...\n36 |     v[idx]\n   |     ^^^^^^ expected\
    \ struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors;\
    \ 2 warnings emitted\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for i in x {\n        if i % 2 != 0 {\n            result.push(i);\n    \
    \    }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[323]`,\n right: `[]`', /tmp/tmpupn6jdr2.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort();\n    let mut res\
    \ = Vec::new();\n    for i in x {\n        if i % 2 == 0 {\n            res.push(i);\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmp9ybbvb6m.rs:10:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                  - help: consider changing this to be mutable:\
    \ `mut x`\n10 |     x.sort();\n   |     ^^^^^^^^ cannot borrow as mutable\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut y = vec![0; x.len()];\n\
    \    for (i, &v) in x.iter().enumerate() {\n        let mut u = v;\n        while\
    \ u > 0 && u % 2 == 0 {\n            u -= 1;\n        }\n        y[i] = u;\n \
    \   }\n    y.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1421, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpb8iv8dxm.rs:23:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut ret = vec![];\n \
    \   let mut nums = Vec::new();\n    x.iter().for_each(|&x| {\n        if nums.iter().all(|&i|\
    \ i & x) != 0 {\n            ret.push(x);\n            nums.push(x);\n       \
    \ }\n    });\n    ret\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppjxc14vr.rs:13:43\n   |\n\
    13 |         if nums.iter().all(|&i| i & x) != 0 {\n   |                     \
    \                      ^ expected `bool`, found integer\n\nerror[E0271]: type\
    \ mismatch resolving `<isize as BitAnd>::Output == bool`\n  --> /tmp/tmppjxc14vr.rs:13:35\n\
    \   |\n13 |         if nums.iter().all(|&i| i & x) != 0 {\n   |              \
    \                     ^ expected `isize`, found `bool`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0308.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut even: Vec<isize>\
    \ = vec![];\n    \n    for i in x {\n        if i % 2 == 0 {\n            even.push(i);\n\
    \        }\n    }\n    \n    even.sort();\n    even\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpogqfkim7.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // create map of seen digits\n\
    \    let mut seen: HashMap<isize, isize> = HashMap::new();\n    // create list\
    \ to store the unique elements\n    let mut ret = Vec::new();\n    // loop through\
    \ numbers, adding them to the map\n    for n in x {\n        seen.insert(n, 0);\n\
    \    }\n    // loop through map and add unique elements to the return list\n \
    \   for k in seen.keys() {\n        if seen[k] % 2 == 0 {\n            ret.push(k);\n\
    \        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n  --> /tmp/tmp2ikavn8e.rs:11:19\n\
    \   |\n11 |     let mut seen: HashMap<isize, isize> = HashMap::new();\n   |  \
    \                 ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n  --> /tmp/tmp2ikavn8e.rs:11:43\n\
    \   |\n11 |     let mut seen: HashMap<isize, isize> = HashMap::new();\n   |  \
    \                                         ^^^^^^^ not found in this scope\n  \
    \ |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut a = x.clone();\n\
    \    std::slice::sort_unstable(&mut a);\n    let mut b = a.clone();\n    std::iter::repeat_with(move\
    \ || {\n        b.sort();\n        b.pop();\n        b.last().unwrap()\n    }).take(x.len()\
    \ as usize)\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sort_unstable` in module `std::slice`\n\
    \  --> /tmp/tmpf9soqum1.rs:11:17\n   |\n11 |     std::slice::sort_unstable(&mut\
    \ a);\n   |                 ^^^^^^^^^^^^^ not found in `std::slice`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf9soqum1.rs:13:5\n   |\n9  |   fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                      ----------\
    \ expected `Vec<isize>` because of return type\n...\n13 | /     std::iter::repeat_with(move\
    \ || {\n14 | |         b.sort();\n15 | |         b.pop();\n16 | |         b.last().unwrap()\n\
    17 | |     }).take(x.len() as usize)\n   | |_____________________________^ expected\
    \ struct `Vec`, found struct `std::iter::Take`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `std::iter::Take<RepeatWith<[closure@/tmp/tmpf9soqum1.rs:13:28:\
    \ 17:6]>>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // Write your code here.\n\
    \    let mut unique_digits = Vec::new();\n    for d in x {\n        if d % 2 ==\
    \ 0 {\n            if !unique_digits.contains(d) {\n                unique_digits.push(d);\n\
    \            }\n        }\n    }\n    unique_digits.sort();\n    unique_digits\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpviv2a96r.rs:14:40\n   |\n\
    14 |             if !unique_digits.contains(d) {\n   |                       \
    \                 ^\n   |                                        |\n   |     \
    \                                   expected reference, found `isize`\n   |  \
    \                                      help: consider borrowing here: `&d`\n \
    \  |\n   = note: expected reference `&_`\n                   found type `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len() == 0 {\n     \
    \   return vec![];\n    }\n    if x.len() == 1 {\n        return x;\n    }\n \
    \   let mut ans = vec![Some(x[0])]; // first element always has even digits\n\
    \    for i in 1..x.len() {\n        if ans.contains(&x[i]) {\n            continue;\n\
    \        }\n        if ans.last().unwrap().is_none() {\n            ans.push(Some(x[i]));\n\
    \        } else {\n            // already found even digits in first position,\
    \ return it\n            ans = ans.clone(); // avoid modifying ans directly\n\
    \            break;\n        }\n    }\n    ans\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7qgu71xw.rs:18:25\n   |\n\
    18 |         if ans.contains(&x[i]) {\n   |                         ^^^^^ expected\
    \ enum `Option`, found `isize`\n   |\n   = note: expected reference `&Option<isize>`\n\
    \              found reference `&isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp7qgu71xw.rs:29:5\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n29 |     ans\n   |     ^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<Option<isize>>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter_map(|x| if\
    \ x % 2 == 0 {x} else None)\n        .cloned()\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `None`\n  --> /tmp/tmpusx11oqu.rs:10:52\n  \
    \ |\n10 |     x.iter().filter_map(|x| if x % 2 == 0 {x} else None)\n   |     \
    \                                               ^^^^ expected `{`\n   |\nhelp:\
    \ try placing this code inside a block\n   |\n10 |     x.iter().filter_map(|x|\
    \ if x % 2 == 0 {x} else { None })\n   |                                     \
    \               +      +\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut set = Vec::new();\n\
    \    for el in x.iter() {\n        if el % 2 == 0 {\n            set.append(el);\n\
    \        }\n    }\n    set\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptnuwj_kx.rs:13:24\n   |\n\
    13 |             set.append(el);\n   |                        ^^ types differ\
    \ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n \
    \                     found reference `&isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut set = HashSet::new();\n\
    \    \n    for &x in x {\n        set.insert(x.clone());\n    }\n    \n    let\
    \ mut result: Vec<isize> = Vec::new();\n    for &x in set {\n        if x % 2\
    \ == 0 {\n            result.push(x);\n        }\n    }\n    \n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpko1v9i7r.rs:10:19\n   |\n10 |     let mut set = HashSet::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko1v9i7r.rs:12:9\n   |\n12 |     for &x in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `x`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut counters = vec![0;\
    \ x.len()];\n    for (i, &x) in x.iter().enumerate() {\n        for &x in x {\n\
    \            counters[i]++;\n        }\n    }\n    let mut results: Vec<isize>\
    \ = vec![];\n    for (i, &x) in x.iter().enumerate() {\n        if counters[i]\
    \ == 0 {\n            results.push(x.clone());\n        }\n    }\n    results\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpabzl2irn.rs:13:24\n\
    \   |\n13 |             counters[i]++;\n   |                        ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n13 |             { let\
    \ tmp = counters[i]; counters[i] += 1; tmp };\n   |             +++++++++++  \
    \          ~~~~~~~~~~~~~~~~~~~~~~~~~\n13 -             counters[i]++;\n13 +  \
    \           counters[i] += 1;\n   | \n\nerror[E0277]: `isize` is not an iterator\n\
    \  --> /tmp/tmpabzl2irn.rs:12:19\n   |\n12 |         for &x in x {\n   |     \
    \              ^ `isize` is not an iterator\n   |\n   = help: the trait `Iterator`\
    \ is not implemented for `isize`\n   = note: if you want to iterate between `start`\
    \ until a value `end`, use the exclusive range syntax `start..end` or the inclusive\
    \ range syntax `start..=end`\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut counter = Vec::new();\n\
    \    for num in x {\n        if num % 2 == 0 {\n            counter.push(num);\n\
    \        } else {\n            let mut i = 1;\n            while i <= 10 {\n \
    \               if num % i == 0 {\n                    break;\n              \
    \  }\n                i += 1;\n            }\n            if i == 10 {\n     \
    \           counter.push(num);\n            } else {\n                counter.push(i);\n\
    \            }\n        }\n    }\n    counter.sort_unstable();\n    counter\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmpjtptfu9p.rs:35:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut ans = Vec::new();\n\
    \    let mut tmp: isize = 0;\n    let mut prev_digit = 0;\n\n    for i in x {\n\
    \        tmp = i;\n        while tmp < 10 {\n            ans.push(tmp);\n    \
    \        tmp *= 10;\n        }\n        ans.retain(|&x| x % 10 != 0);\n    }\n\
    \n    ans\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[1, 15, 33]`', /tmp/tmpi0ahcuwp.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut x = x.to_owned();\n\
    \    let mut counter = 1;\n    let mut result = vec![];\n\n    for i in x.iter()\
    \ {\n        if counter % i == 0 {\n            result.push(i);\n            counter\
    \ += 1;\n        }\n    }\n\n    result.sort();\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxmpukn61.rs:23:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    23 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut seen = HashSet::new();\n\
    \    x.iter().filter(|&x| {\n        if seen.contains(&x) {\n            false\n\
    \        } else {\n            seen.insert(x);\n            true\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmplqj6ua14.rs:10:20\n   |\n10 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmplqj6ua14.rs:18:8\n     |\n18   |     }).collect()\n\
    \     |        ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut set = vec![0; x.len()];\n\
    \    for &i in x {\n        let mut j = i;\n        while j != 0 {\n         \
    \   set.insert(j % 10);\n            j = (j / 10).unwrap();\n        }\n    }\n\
    \    set\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8mw2q4ef.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0061]: this function\
    \ takes 2 arguments but 1 argument was supplied\n    --> /tmp/tmp8mw2q4ef.rs:14:17\n\
    \     |\n14   |             set.insert(j % 10);\n     |                 ^^^^^^\
    \ ------ supplied 1 argument\n     |                 |\n     |               \
    \  expected 2 arguments\n     |\nnote: associated function defined here\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut unique_digits = Vec::new();\n\
    \n    for x in x {\n        if x.len() % 2 == 0 {\n            unique_digits.push(x.clone());\n\
    \        }\n    }\n\n    unique_digits.sort();\n\n    unique_digits\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpnwctxnsl.rs:13:14\n   |\n13 |         if x.len() % 2 ==\
    \ 0 {\n   |              ^^^ method not found in `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut y = vec![0; x.len()];\n\
    \    for i in 0..x.len() {\n        y[i] = x[i];\n    }\n    for i in 0..y.len()\
    \ {\n        if y[i] % 2 == 0 {\n            let mut flag = false;\n         \
    \   for j in (i..y.len()).rev() {\n                if y[j] > 0 {\n           \
    \         flag = true;\n                    break;\n                }\n      \
    \      }\n            if !flag {\n                y[i] = y[i] + 1;\n         \
    \   }\n        }\n    }\n    y\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp9adjk4oi.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \n    for n in x.iter() {\n        if n % 2 == 0 {\n            result.push(n);\n\
    \        }\n    }\n\n    result.sort_unstable_by_key(|n| n.to_digit());\n\n  \
    \  result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digit` found for reference `&&isize`\
    \ in the current scope\n  --> /tmp/tmpoawbntjs.rs:18:39\n   |\n18 |     result.sort_unstable_by_key(|n|\
    \ n.to_digit());\n   |                                       ^^^^^^^^ method not\
    \ found in `&&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoawbntjs.rs:20:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n20 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort_unstable();\n    let\
    \ mut res = Vec::new();\n    let mut d = 0;\n    for &i in x {\n        if i /\
    \ d % 2 == 0 {\n            res.push(i);\n        }\n        d += 1;\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptm6f3gi4.rs:13:9\n   |\n\
    13 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.sort();\n    let mut res\
    \ = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            res.push(x[i]);\n            i += 1;\n        }\n  \
    \      if i == x.len() - 1 {\n            break;\n        }\n        if x[i] %\
    \ 2 != 0 {\n            i += 1;\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpwv1dovap.rs:10:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                  - help: consider changing this to be mutable:\
    \ `mut x`\n10 |     x.sort();\n   |     ^^^^^^^^ cannot borrow as mutable\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut digit_count = 0;\n\
    \    for i in x {\n        if digit_count == 0 { digit_count = i }\n        if\
    \ digit_count % 2 == 0 { digit_count++ }\n    }\n    let mut x = x.clone(); //\
    \ Copy vector to not borrow its original data.\n    let mut y = Vec::new(); //\
    \ Create a new vector to store all the digits that not in the original one.\n\
    \    for i in x {\n        if i /= digit_count { // If the element is the element\
    \ of original vector and has a even digit.\n            y.push(i);\n        }\n\
    \    }\n    y.sort(); // Sort the elements based on the number of digit.\n   \
    \ return y\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpt9gd07wg.rs:13:46\n\
    \   |\n13 |         if digit_count % 2 == 0 { digit_count++ }\n   |          \
    \                                    ^^ not a valid postfix operator\n   |\nhelp:\
    \ use `+= 1` instead\n   |\n13 |         if digit_count % 2 == 0 { { let tmp =\
    \ digit_count; digit_count += 1; tmp } }\n   |                               \
    \    +++++++++++            ~~~~~~~~~~~~~~~~~~~~~~~~~\n13 -         if digit_count\
    \ % 2 == 0 { digit_count++ }\n13 +         if digit_count % 2 == 0 { digit_count\
    \ += 1 }\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt9gd07wg.rs:18:12\n\
    \   |\n18 |         if i /= digit_count { // If the element is the element of\
    \ original vector and has a even digit.\n   |            ^^^^^^^^^^^^^^^^ expected\
    \ `bool`, found `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut s = vec![];\n   \
    \ let mut i = 0;\n    let mut temp = 0;\n    let mut max_len = x.len();\n    while\
    \ i < max_len {\n        temp = x[i];\n        if temp % 2 != 0 && s.iter().any(|&e|\
    \ e == temp) {\n            s.push(i);\n        }\n        i += 1;\n    }\n  \
    \  x.sort_unstable();\n    for i in s.clone() {\n        x.remove(i);\n    }\n\
    \    x\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `usize` with `isize`\n  --> /tmp/tmpjy7i1_eb.rs:16:49\n\
    \   |\n16 |         if temp % 2 != 0 && s.iter().any(|&e| e == temp) {\n   | \
    \                                                ^^ no implementation for `usize\
    \ == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut it = x.iter().cloned().enumerate();\n\
    \    let mut even = true;\n    let mut ret: Vec<isize> = Vec::new();\n    for\
    \ (n, &v) in it {\n        if n % 2 == 0 {\n            if even {\n          \
    \      ret.push(v);\n            } else {\n                even = true;\n    \
    \        }\n        } else {\n            even = false;\n        }\n    }\n  \
    \  ret\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4bsskdzz.rs:13:13\n   |\n\
    13 |     for (n, &v) in it {\n   |             ^^     -- this expression has type\
    \ `Option<(usize, isize)>`\n   |             |\n   |             expected `isize`,\
    \ found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `v`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut unique_set = Set::new();\n\
    \    for &i in x {\n        if unique_set.contains(&i) {\n            continue;\n\
    \        }\n        unique_set.insert(i);\n    }\n    unique_set.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Set`\n  --> /tmp/tmpsjisxaqw.rs:10:26\n\
    \   |\n10 |     let mut unique_set = Set::new();\n   |                       \
    \   ^^^ use of undeclared type `Set`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpsjisxaqw.rs:11:9\n   |\n11 |     for &i in x {\n   |         ^^    -\
    \ this expression has type `Option<isize>`\n   |         |\n   |         expected\
    \ `isize`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `i`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut ret: Vec<isize> =\
    \ x.clone();\n    let mut even: Vec<isize> = vec![];\n    for i in &mut ret {\n\
    \        if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n    let\
    \ mut i: usize = 0;\n    while even.len() > i {\n        let mut j: usize = 0;\n\
    \        let mut x: isize = even[i as usize];\n        while even.len() > j {\n\
    \            if x % 2 == 0 {\n                break;\n            }\n        \
    \    x /= 2;\n            j += 1\n        }\n        ret.push(x);\n        i +=\
    \ 1;\n    }\n    ret\n}\n\nfn main() {\n    let candidate = unique_digits;\n \
    \   assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmpxliaiu0i.rs:13:14\n\
    \   |\n13 |         if i % 2 == 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `i`\n   |\n13 |         if *i % 2 == 0 {\n   |         \
    \   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxliaiu0i.rs:14:23\n   |\n\
    14 |             even.push(i);\n   |                       ^ expected `isize`,\
    \ found `&mut isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14\
    \ |             even.push(*i);\n   |                       +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut x = x.clone();\n    let mut digit = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    let mut max_i = 0;\n    while i < digit.len() {\n   \
    \     while digit[i] == 0 {\n            i += 1;\n        }\n        if digit[i]\
    \ == 0 && digit[i - 1] != 0 {\n            result.push(x.remove(i - 1));\n   \
    \     }\n        if digit[i] != 0 && digit[i - 1] != 0 && digit[i - 1] != digit[i]\
    \ {\n            result.push(x.remove(i - 1));\n            i += 1;\n        }\n\
    \        if i == digit.len() - 1 {\n            if digit[i] != 0 {\n         \
    \       result.push(x.remove(i - 1));\n            }\n        }\n        if i\
    \ == digit.len() - 2 && digit[i + 1] != 0 {\n            result.push(x.remove(i\
    \ - 2));\n        }\n        if digit[i] != 0 && digit[i + 1] != 0 && digit[i\
    \ - 1] == digit[i] {\n            result.push(x.remove(i - 1));\n            i\
    \ += 1;\n        }\n        if i == digit.len() - 2 && digit[i + 1] != 0 {\n \
    \           result.push(x.remove(i - 2));\n        }\n        if i == digit.len()\
    \ - 1 && digit[i + 1] != 0 {\n            result.push(x.remove(i - 1));\n    \
    \    }\n        if i == digit.len() - 1 && digit[i + 1] != 0 && digit[i - 1] !=\
    \ digit[i] {\n            result.push(x.remove(i - 1));\n            i += 1;\n\
    \        }\n        if i == digit.len() - 1 && digit[i + 1] != 0 && digit[i -\
    \ 1] == digit[i] {\n            result.push(x.remove(i - 1));\n            i +=\
    \ 1;\n        }\n        if i == digit.len() - 2 && digit[i + 1] != 0 {\n    \
    \        result.push(x.remove(i - 2));\n        }\n    }\n    if x.len() != 0\
    \ {\n        result.push(x.remove(0));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpaq2tydmi.rs:22:35\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut set = HashSet::new();\n\
    \    for &i in x {\n        if set.is_empty() {\n            set.insert(i);\n\
    \        }\n        else {\n            if i / set.len() % 2 == 0 {\n        \
    \        continue;\n            }\n            if set.remove(&i) == 1 {\n    \
    \            set.insert(i);\n            }\n        }\n    }\n    set.clone_sorted(|x,y|\
    \ {\n        if *x < *y {\n            -1\n        }\n        else if *x > *y\
    \ {\n            1\n        }\n        else {\n            *x\n        }\n   \
    \ })\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpk0p1rqiq.rs:10:19\n   |\n10 |     let mut set = HashSet::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk0p1rqiq.rs:11:9\n   |\n11 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let mut set = HashSet::new();\n    let mut even = true;\n    for num in x.iter()\
    \ {\n        if num % 2 == 0 {\n            even = false;\n        }\n       \
    \ if !set.contains(&num) {\n            result.push(num);\n            set.insert(num);\n\
    \        }\n    }\n    if even {\n        vec![]\n    } else {\n        result.sort();\n\
    \        result\n    }\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpbo_nuzyq.rs:11:19\n   |\n11 |     let mut set = HashSet::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbo_nuzyq.rs:26:9\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n26 |         result\n   |\
    \         ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut ret: Vec<isize> =\
    \ Vec::new();\n    let mut counter = HashMap::new();\n    \n    for i in x {\n\
    \        if let Some(key) = counter.entry(i) {\n            if key.value % 2 ==\
    \ 0 {\n                ret.push(i);\n            }\n        }\n        else {\n\
    \            counter.insert(i, 0);\n        }\n    }\n    \n    ret\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmp0dp1vbc5.rs:11:23\n   |\n11 |     let mut counter = HashMap::new();\n\
    \   |                       ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n\
    \    for num in x {\n        if num % 2 == 0 {\n            v.push(num);\n   \
    \     }\n    }\n    v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp_219_v5h.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    if x.len() < 2 {\n      \
    \  return x;\n    }\n\n    let mut result: Vec<isize> = vec![];\n    for i in\
    \ 0..x.len() {\n        if x[i] % 2 == 0 {\n            continue;\n        }\n\
    \        let mut j = i;\n        while j > 0 && x[j] % 2 == 0 {\n            j\
    \ -= 1;\n        }\n        result.push(x[j]);\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[323]`,\n right: `[]`', /tmp/tmp63c5wis7.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut set = HashSet::new();\n\
    \    for &i in x {\n        if !set.contains(i / 10) {\n            set.insert(i\
    \ / 10);\n        }\n    }\n    set.into_iter().cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpwzzg6otg.rs:10:19\n   |\n10 |     let mut set = HashSet::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwzzg6otg.rs:11:9\n   |\n11 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut i = x.len();\n    \n    while i != 0 {\n        i += 1;\n       \
    \ if x[i] % 2 == 0 {\n            result.push(x[i]);\n        }\n    }\n    \n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 4 but the index\
    \ is 5', /tmp/tmptx3n__5v.rs:15:12\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|&x| *x %\
    \ 10).map(|x| *x).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcr12u8la.rs:10:26\n   |\n\
    10 |     x.iter().filter(|&x| *x % 10).map(|x| *x).collect()\n   |           \
    \               ^^^^^^^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut ret = vec![];\n \
    \   x.sort_unstable();\n    for i in x {\n        if i % 2 == 0 {\n          \
    \  continue;\n        }\n        ret.push(i);\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpxmf2udf1.rs:11:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                  - help: consider changing this to be mutable:\
    \ `mut x`\n10 |     let mut ret = vec![];\n11 |     x.sort_unstable();\n   | \
    \    ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut unique_digits = Vec::new();\n\
    \    let mut x: Vec<_> = x.into_iter().collect();\n    x.sort();\n    for i in\
    \ 0..x.len() {\n        if x[i] % 2 == 0 {\n            unique_digits.push(x[i]);\n\
    \        }\n    }\n    unique_digits.into_iter().collect()\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpjk9owo8q.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut digits = x.clone();\n\
    \    digits.sort();\n    let mut res = Vec::new();\n    let mut cur: usize = digits[0].checked_add(1).unwrap();\n\
    \    loop {\n        if cur > 0 {\n            if digits[cur/2] % 2 == 0 {\n \
    \               res.push(cur);\n                cur = digits[cur/2].checked_add(1).unwrap();\n\
    \            } else {\n                cur = digits[cur/2].checked_add(1).unwrap();\n\
    \            }\n        } else {\n            break;\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbr8aa3ih.rs:13:26\n   |\n\
    13 |     let mut cur: usize = digits[0].checked_add(1).unwrap();\n   |       \
    \           -----   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found\
    \ `isize`\n   |                  |\n   |                  expected due to this\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |     let mut cur: usize = digits[0].checked_add(1).unwrap().try_into().unwrap();\n\
    \   |                                                           ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbr8aa3ih.rs:18:23\n   |\n13 |\
    \     let mut cur: usize = digits[0].checked_add(1).unwrap();\n   |          \
    \        ----- expected due to this type\n...\n18 |                 cur = digits[cur/2].checked_add(1).unwrap();\n\
    \   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbr8aa3ih.rs:20:23\n\
    \   |\n13 |     let mut cur: usize = digits[0].checked_add(1).unwrap();\n   |\
    \                  ----- expected due to this type\n...\n20 |                \
    \ cur = digits[cur/2].checked_add(1).unwrap();\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbr8aa3ih.rs:26:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n26 |     res\n   |     ^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for i in x {\n        if i % 2 == 0 {\n            continue;\n        }\n\
    \        match result.iter().position(|&x| x < i) {\n            Some(i) => result.insert((i\
    \ + i) / 2, i),\n            None => result.push(i),\n        };\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `usize` with `isize`\n  --> /tmp/tmp0pvk53p9.rs:15:45\n\
    \   |\n15 |         match result.iter().position(|&x| x < i) {\n   |         \
    \                                    ^ no implementation for `usize < isize` and\
    \ `usize > isize`\n   |\n   = help: the trait `PartialOrd<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `PartialOrd<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0pvk53p9.rs:17:33\n\
    \   |\n17 |             None => result.push(i),\n   |                        \
    \         ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n17 |      \
    \       None => result.push(i.try_into().unwrap()),\n   |                    \
    \              ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0pvk53p9.rs:21:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n21 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut new_vec = vec![];\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         new_vec.push(x[i]);\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    new_vec.sort();\n    new_vec\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut x: Vec<_> = x.iter().cloned().collect();\n\
    \    x.sort();\n    \n    for e in x {\n        if e%2 == 0 {\n            x.remove(e);\n\
    \            break;\n        }\n    }\n    x\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_ux_12re.rs:15:22\n   |\n\
    15 |             x.remove(e);\n   |                      ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n15 |             x.remove(e.try_into().unwrap());\n\
    \   |                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.iter().filter(|&x| x %\
    \ 2 == 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp6gcm82wc.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut x = x.iter();\n \
    \   let mut result = vec![];\n    let mut dig = false;\n    while let Some(k)\
    \ = x.next() {\n        if k.is_zero() {\n            if dig {\n             \
    \   continue;\n            }\n            result.push(*k);\n            dig =\
    \ true;\n        }\n        if dig && !k.is_even() {\n            continue;\n\
    \        }\n        if dig {\n            result.push(*k);\n        }\n      \
    \  dig = false;\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_zero` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmpvdqqkher.rs:14:14\n   |\n14 |         if k.is_zero()\
    \ {\n   |              ^^^^^^^ method not found in `&isize`\n\nerror[E0599]: no\
    \ method named `is_even` found for reference `&isize` in the current scope\n \
    \ --> /tmp/tmpvdqqkher.rs:21:22\n   |\n21 |         if dig && !k.is_even() {\n\
    \   |                      ^^^^^^^ method not found in `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut set = HashSet::new();\n\
    \    for d in x {\n        if !set.is_subset(&Vec::from(&d[..])) {\n         \
    \   set.insert(d);\n        }\n    }\n    set.into_iter().collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmphac9wzo1.rs:10:19\n   |\n10 |     let mut set = HashSet::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmphac9wzo1.rs:12:39\n\
    \   |\n12 |         if !set.is_subset(&Vec::from(&d[..])) {\n   |            \
    \                           ^^^^^\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0433, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
