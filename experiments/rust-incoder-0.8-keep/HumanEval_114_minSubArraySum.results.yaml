name: HumanEval_114_minSubArraySum
language: rust
results:
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // find the minimum element\n    let mut min = nums.iter().min();\n\
    \    // now subtract the minimum element\n    nums.iter_mut().for_each(|&x| {\
    \ if x < min { min = x; } );\n    // and return the result\n    min\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error: mismatched closing delimiter: `)`\n  --> /tmp/tmp6e4n2utz.rs:10:35\n\
    \   |\n10 |     nums.iter_mut().for_each(|&x| { if x < min { min = x; } );\n \
    \  |                             -     ^                         ^ mismatched\
    \ closing delimiter\n   |                             |     |\n   |          \
    \                   |     unclosed delimiter\n   |                           \
    \  closing delimiter possibly meant for this\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6e4n2utz.rs:10:31\n   |\n10 |     nums.iter_mut().for_each(|&x|\
    \ { if x < min { min = x; } );\n   |                               ^--\n   | \
    \                              ||\n   |                               |expected\
    \ due to this\n   |                               types differ in mutability\n\
    \   |                               help: did you mean `x`: `&&mut isize`\n  \
    \ |\n   = note: expected mutable reference `&mut isize`\n                    \
    \  found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6e4n2utz.rs:12:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    12 |     min\n   |     ^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<&isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::MAX;\n    for num in nums {\n     \
    \   if num >= 0 {\n            min_sum = min(min_sum, num + minSubArraySum(&nums[num..]));\n\
    \        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpnqzint4d.rs:10:23\n\
    \   |\n10 |             min_sum = min(min_sum, num + minSubArraySum(&nums[num..]));\n\
    \   |                       ^^^\n...\n16 | fn main() {\n   | --------- similarly\
    \ named function `main` defined here\n   |\nhelp: a function with a similar name\
    \ exists\n   |\n10 |             min_sum = main(min_sum, num + minSubArraySum(&nums[num..]));\n\
    \   |                       ~~~~\nhelp: consider importing this function\n   |\n\
    1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `RangeFrom<isize>`\n  --> /tmp/tmpnqzint4d.rs:10:58\n   |\n10 |         \
    \    min_sum = min(min_sum, num + minSubArraySum(&nums[num..]));\n   |       \
    \                                                   ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `RangeFrom<isize>`\n   = help: the following other types\
    \ implement trait `SliceIndex<T>`:\n             <RangeFrom<usize> as SliceIndex<[T]>>\n\
    \             <RangeFrom<usize> as SliceIndex<str>>\n   = note: required because\
    \ of the requirements on the impl of `Index<RangeFrom<isize>>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpnqzint4d.rs:10:57\n   |\n10 |\
    \             min_sum = min(min_sum, num + minSubArraySum(&nums[num..]));\n  \
    \ |                                                         ^^^^^^^^^^^^ expected\
    \ struct `Vec`, found reference\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found reference `&_`\nhelp: consider removing the borrow\n   |\n10\
    \ -             min_sum = min(min_sum, num + minSubArraySum(&nums[num..]));\n\
    10 +             min_sum = min(min_sum, num + minSubArraySum(nums[num..]));\n\
    \   | \n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut subSum = nums.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_sum = subSum.iter().cloned().sum::<isize>()\n        .expect(\"\
    min sub sum cannot be zero\");\n\n    for a in &nums[1..] {\n        let mut curr_sum\
    \ = subSum.iter().cloned().sum::<isize>()\n            .expect(\"curr_sum cannot\
    \ be zero\");\n        for b in &nums[1..] {\n            if *a + *b < min_sum\
    \ {\n                min_sum = (*a + *b).clone();\n                subSum.clear();\n\
    \                subSum.push((*a + *b).clone());\n            } else {\n     \
    \           subSum.push(*a + *b);\n            }\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `expect` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpxpao8bf1.rs:9:10\n  |\n9 |         .expect(\"min sub sum\
    \ cannot be zero\");\n  |          ^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `expect` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpxpao8bf1.rs:13:14\n   |\n13 |             .expect(\"curr_sum cannot\
    \ be zero\");\n   |              ^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum_so_far = nums.iter().sum();\n    sum_so_far.min(|a,\
    \ b| a + b).unwrap()\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpdjeqgycw.rs:8:5\n \
    \ |\n7 |     let mut sum_so_far = nums.iter().sum();\n  |         --------------\
    \ consider giving `sum_so_far` a type\n8 |     sum_so_far.min(|a, b| a + b).unwrap()\n\
    \  |     ^^^^^^^^^^ cannot infer type\n  |\n  = note: type must be known at this\
    \ point\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    shortest_sum_subarray(nums, 0).unwrap()\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `shortest_sum_subarray` in this scope\n\
    \ --> /tmp/tmpizydzksj.rs:7:5\n  |\n7 |     shortest_sum_subarray(nums, 0).unwrap()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // find the index where the sum of the current number is minimum\n\
    \    let mut sumOfMin = nums[0];\n    let mut index = Vec::new();\n    index.append(0);\n\
    \    for n in nums {\n        sumOfMin = if n < sumOfMin {\n            n\n  \
    \      } else {\n            sumOfMin\n        };\n        if sumOfMin < n {\n\
    \            sumOfMin = n;\n            index.append(0);\n        }\n        index[sumOfMin\
    \ as usize - 1] += 1;\n    }\n    let minSum = index[nums.len() - 1];\n    let\
    \ mut minSumIndex = Vec::new();\n    minSumIndex.append(0);\n    let mut curSum\
    \ = nums[0];\n    for (i, _) in index.iter().enumerate() {\n        if i != curSum\
    \ as usize {\n            curSum = i;\n        }\n        minSumIndex.append(curSum);\n\
    \    }\n    let mut minSumIndex = minSumIndex.into_iter().map(|&a| a - 1).collect();\n\
    \    minSumIndex.extend(1..nums.len());\n\n    // find the position of min sum\
    \ in the original array\n    let mut minIndex = Vec::new();\n    for i in minSumIndex\
    \ {\n        minIndex.append(i as usize);\n    }\n    let mut minIndex = minIndex.into_iter().map(|&a|\
    \ a - 1).collect();\n    minIndex.extend(1..nums.len());\n\n    // get the min\
    \ sum from the original array\n    sumOfMin - nums[minIndex[0]]\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxkapn5iz.rs:10:18\n   |\n\
    10 |     index.append(0);\n   |                  ^ expected `&mut Vec<_>`, found\
    \ integer\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n       \
    \                    found type `{integer}`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxkapn5iz.rs:19:26\n   |\n19 |             index.append(0);\n  \
    \ |                          ^ expected `&mut Vec<_>`, found integer\n   |\n \
    \  = note: expected mutable reference `&mut Vec<_>`\n                        \
    \   found type `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxkapn5iz.rs:25:24\n\
    \   |\n25 |     minSumIndex.append(0);\n   |                        ^ expected\
    \ `&mut Vec<_>`, found integer\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<_>`\n                           found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxkapn5iz.rs:29:22\n   |\n26 |     let mut curSum\
    \ = nums[0];\n   |                      ------- expected due to this value\n...\n\
    29 |             curSum = i;\n   |                      ^ expected `isize`, found\
    \ `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxkapn5iz.rs:31:28\n\
    \   |\n31 |         minSumIndex.append(curSum);\n   |                        \
    \    ^^^^^^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable\
    \ reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxkapn5iz.rs:39:25\n   |\n39 |         minIndex.append(i\
    \ as usize);\n   |                         ^^^^^^^^^^ expected `&mut Vec<_>`,\
    \ found `usize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n \
    \                          found type `usize`\n\nerror: aborting due to 6 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return isize::MIN;\n    }\n\n\
    \    let mut min: isize = 0;\n    let mut sum: isize = nums[0] as isize;\n   \
    \ for i in nums.iter() {\n        sum += i;\n        if sum < min {\n        \
    \    min = sum;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpetib5re2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum + i);\n \
    \   for &i in nums {\n        min_sum = min(min_sum, i + min_sum);\n    }\n  \
    \  min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpbmzsxkx2.rs:9:19\n\
    \   |\n9  |         min_sum = min(min_sum, i + min_sum);\n   |               \
    \    ^^^\n...\n14 | fn main() {\n   | --------- similarly named function `main`\
    \ defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |\
    \         min_sum = main(min_sum, i + min_sum);\n   |                   ~~~~\n\
    help: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpbmzsxkx2.rs:8:9\n  |\n8 |     for\
    \ &i in nums {\n  |         ^^    ---- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    use std::cmp::Ordering::Less;\n\n    let mut min_sum = isize::MAX;\n\
    \    let mut min_sub_array: Vec<isize> = Vec::new();\n\n    for n in nums {\n\
    \        if n >= 0 && n < min_sum {\n            min_sub_array.push(n);\n    \
    \    }\n    }\n\n    for &n in &min_sub_array {\n        min_sum = min_sum.saturating_add(n);\n\
    \    }\n\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9223372036854775807`,\n right: `1`', /tmp/tmptqws38k6.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = nums.iter().fold(0, |sum, i| sum + i);\n    let\
    \ mut min = nums.iter().fold(std::i32::MAX as isize, |min, i| {\n        let new_sum\
    \ = sum + i;\n        if new_sum < min {\n            min = new_sum;\n       \
    \ }\n        min\n    });\n    for num in nums {\n        let new_sum = sum +\
    \ num;\n        if new_sum < min {\n            min = new_sum;\n        }\n  \
    \  }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `min`\n  --> /tmp/tmpkjt47jv8.rs:11:13\n\
    \   |\n8  |     let mut min = nums.iter().fold(std::i32::MAX as isize, |min, i|\
    \ {\n   |                                                             --- help:\
    \ consider making this binding mutable: `mut min`\n...\n11 |             min =\
    \ new_sum;\n   |             ^^^^^^^^^^^^^ cannot assign to immutable argument\n\
    \nwarning: variable does not need to be mutable\n --> /tmp/tmpkjt47jv8.rs:7:9\n\
    \  |\n7 |     let mut sum = nums.iter().fold(0, |sum, i| sum + i);\n  |      \
    \   ----^^^\n  |         |\n  |         help: remove this `mut`\n  |\n  = note:\
    \ `#[warn(unused_mut)]` on by default\n\nerror: aborting due to previous error;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = 0;\n    let mut i = 1;\n    let mut min_sum =\
    \ 0;\n    while i <= nums.len() {\n        sum += i;\n        if nums[i] >= 0\
    \ && nums[i] < sum {\n            sum += nums[i];\n            i += 1;\n     \
    \   } else {\n            min_sum = std::cmp::min(min_sum, sum);\n           \
    \ sum = 0;\n            i += 1;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa7dfwzd0.rs:12:38\n   |\n\
    12 |         if nums[i] >= 0 && nums[i] < sum {\n   |                        \
    \              ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    12 |         if nums[i] >= 0 && nums[i] < sum.try_into().unwrap() {\n   |    \
    \                                     ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpa7dfwzd0.rs:13:20\n   |\n13 |             sum += nums[i];\n\
    \   |                    ^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `usize`\n  --> /tmp/tmpa7dfwzd0.rs:13:17\n   |\n\
    13 |             sum += nums[i];\n   |                 ^^ no implementation for\
    \ `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa7dfwzd0.rs:21:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    21 |     min_sum\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n21 |     min_sum.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // The idea is to start with a sorted array of elements. We\
    \ will remove the\n    // smallest element from the array until the new sum is\
    \ smaller than the current\n    // sum. We will start with the first element and\
    \ go through the rest of the array\n    // with one element removed.\n    let\
    \ mut array = nums.clone();\n    array.sort_unstable();\n    let mut min_sum =\
    \ nums[0];\n    let mut sum = 0;\n    while !array.iter().all(|&x| x <= 0) {\n\
    \        sum += x;\n        min_sum = min(min_sum, sum);\n        if min_sum ==\
    \ sum {\n            break;\n        }\n        array.remove(0);\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `x` in this scope\n  --> /tmp/tmp5qbxyb2x.rs:16:16\n\
    \   |\n16 |         sum += x;\n   |                ^ not found in this scope\n\
    \nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp5qbxyb2x.rs:17:19\n\
    \   |\n17 |         min_sum = min(min_sum, sum);\n   |                   ^^^\n\
    ...\n26 | fn main() {\n   | --------- similarly named function `main` defined\
    \ here\n   |\nhelp: a function with a similar name exists\n   |\n17 |        \
    \ min_sum = main(min_sum, sum);\n   |                   ~~~~\nhelp: consider importing\
    \ this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums.len() * nums.iter().map(|x| x * x).sum();\n\
    \    for &i in &nums[1..nums.len() - 1] {\n        min_sum = min_sum.min(|a, b|\
    \ a + b);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp5ir8p1_2.rs:9:19\n\
    \  |\n7 |     let mut min_sum = nums.len() * nums.iter().map(|x| x * x).sum();\n\
    \  |         ----------- consider giving `min_sum` a type\n8 |     for &i in &nums[1..nums.len()\
    \ - 1] {\n9 |         min_sum = min_sum.min(|a, b| a + b);\n  |              \
    \     ^^^^^^^ cannot infer type\n  |\n  = note: type must be known at this point\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = std::i32::MAX;\n    for &n in &nums {\n      \
    \  if n > 0 {\n            min += n;\n        }\n    }\n    min\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkxdt6opd.rs:10:20\n   |\n\
    10 |             min += n;\n   |                    ^ expected `i32`, found `isize`\n\
    \nerror[E0277]: cannot add-assign `isize` to `i32`\n  --> /tmp/tmpkxdt6opd.rs:10:17\n\
    \   |\n10 |             min += n;\n   |                 ^^ no implementation for\
    \ `i32 += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `i32`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkxdt6opd.rs:13:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    13 |     min\n   |     ^^^ expected `isize`, found `i32`\n   |\nhelp: you can\
    \ convert an `i32` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n13 |     min.try_into().unwrap()\n   |        ++++++++++++++++++++\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ sum = 0;\n    let mut curr = vec![0i32; nums.len()];\n\n    for i in 0..nums.len()\
    \ {\n        if curr[i] < nums[i] {\n            curr[i] = nums[i];\n        \
    \    sum += nums[i];\n        } else {\n            curr[i] -= nums[i];\n    \
    \        sum += nums[i];\n        }\n    }\n\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppouygjw8.rs:15:22\n   |\n\
    15 |         if curr[i] < nums[i] {\n   |                      ^^^^^^^ expected\
    \ `i32`, found `isize`\n   |\nhelp: you can convert an `isize` to an `i32` and\
    \ panic if the converted value doesn't fit\n   |\n15 |         if curr[i] < nums[i].try_into().unwrap()\
    \ {\n   |                             ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppouygjw8.rs:16:23\n   |\n16 |             curr[i] = nums[i];\n\
    \   |             -------   ^^^^^^^ expected `i32`, found `isize`\n   |      \
    \       |\n   |             expected due to the type of this binding\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppouygjw8.rs:19:24\n   |\n19 |             curr[i]\
    \ -= nums[i];\n   |                        ^^^^^^^ expected `i32`, found `isize`\n\
    \nerror[E0277]: cannot subtract-assign `isize` from `i32`\n  --> /tmp/tmppouygjw8.rs:19:21\n\
    \   |\n19 |             curr[i] -= nums[i];\n   |                     ^^ no implementation\
    \ for `i32 -= isize`\n   |\n   = help: the trait `SubAssign<isize>` is not implemented\
    \ for `i32`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n\
    \             <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n    \
    \         <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n        \
    \     <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n         \
    \    <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in nums {\n        sum += num;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpaxco91kb.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut minSum = nums.len();\n    let mut minSubArr = nums.clone();\n\
    \    let mut sub_nums = 0;\n\n    while sub_nums < minSum {\n        minSubArr.remove(0);\n\
    \        minSum = minSubArr.reduce(|a, b| a + b);\n        sub_nums += 1;\n  \
    \  }\n    minSum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpp0veayv8.rs:13:28\n\
    \    |\n13  |           minSum = minSubArr.reduce(|a, b| a + b);\n    |      \
    \                        ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    =\
    \ note: the following trait bounds were not satisfied:\n            `Vec<isize>:\
    \ Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n  \
    \          `[isize]: Iterator`\n            which is required by `&mut [isize]:\
    \ Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp0veayv8.rs:16:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    16 |     minSum\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     minSum.try_into().unwrap()\n   |           ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::i32::MAX;\n    for num in nums {\n  \
    \      min_sum = match min_sum {\n            std::i32::MAX => min_sum + num,\n\
    \            sum => sum + num,\n        };\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp36vcipn7.rs:10:40\n   |\n\
    10 |             std::i32::MAX => min_sum + num,\n   |                       \
    \                 ^^^ expected `i32`, found `isize`\n\nerror[E0277]: cannot add\
    \ `isize` to `i32`\n  --> /tmp/tmp36vcipn7.rs:10:38\n   |\n10 |             std::i32::MAX\
    \ => min_sum + num,\n   |                                      ^ no implementation\
    \ for `i32 + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `i32`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp36vcipn7.rs:11:26\n\
    \   |\n11 |             sum => sum + num,\n   |                          ^^^ expected\
    \ `i32`, found `isize`\n\nerror[E0277]: cannot add `isize` to `i32`\n  --> /tmp/tmp36vcipn7.rs:11:24\n\
    \   |\n11 |             sum => sum + num,\n   |                        ^ no implementation\
    \ for `i32 + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `i32`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp36vcipn7.rs:14:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    14 |     min_sum\n   |     ^^^^^^^ expected `isize`, found `i32`\n   |\nhelp:\
    \ you can convert an `i32` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n14 |     min_sum.try_into().unwra"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum: isize = nums[0] as isize;\n    for i in 1..nums.len()\
    \ {\n        min_sum = min(min_sum + nums[i], nums[i]);\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpvukq9kjt.rs:9:19\n\
    \   |\n9  |         min_sum = min(min_sum + nums[i], nums[i]);\n   |         \
    \          ^^^\n...\n14 | fn main() {\n   | --------- similarly named function\
    \ `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n\
    9  |         min_sum = main(min_sum + nums[i], nums[i]);\n   |               \
    \    ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0] + nums[0];\n    for i in 1..nums.len()\
    \ {\n        min_sum = min_sum + nums[i];\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `1`', /tmp/tmpi7j3uqqv.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums.iter().fold(isize::max_value(), |sum, num| sum + num)\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to add with overflow', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:133:1\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::i32::MAX;\n    for i in nums.iter() {\n\
    \        min_sum = min_sum.min(i as isize);\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwk2t_s2s.rs:9:31\n  |\n9 |\
    \         min_sum = min_sum.min(i as isize);\n  |                            \
    \   ^^^^^^^^^^ expected `i32`, found `isize`\n  |\nhelp: you can convert an `isize`\
    \ to an `i32` and panic if the converted value doesn't fit\n  |\n9 |         min_sum\
    \ = min_sum.min((i as isize).try_into().unwrap());\n  |                      \
    \         +          +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwk2t_s2s.rs:11:5\n   |\n6  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n11 |     min_sum\n   |     ^^^^^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n11 |     min_sum.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror[E0606]: casting `&isize` as `isize`\
    \ is invalid\n --> /tmp/tmpwk2t_s2s.rs:9:31\n  |\n9 |         min_sum = min_sum.min(i\
    \ as isize);\n  |                               -^^^^^^^^^\n  |              \
    \                 |\n  |                               cannot cast `&isize` as\
    \ `isize`\n  |                               help: dereference the expression:\
    \ `*i`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0606.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0] as isize;\n    for &n in nums.iter().cloned()\
    \ {\n        if min_sum > n {\n            min_sum = n;\n        }\n    }\n  \
    \  min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmezso450.rs:8:9\n  |\n8 |\
    \     for &n in nums.iter().cloned() {\n  |         ^^    --------------------\
    \ this expression has type `Option<isize>`\n  |         |\n  |         expected\
    \ `isize`, found reference\n  |         help: you can probably remove the explicit\
    \ borrow: `n`\n  |\n  = note:   expected type `isize`\n          found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // The algorithm is simple:\n    // 1. Find a subset with minimum\
    \ sum\n    // 2. Return the sum of the set\n    let mut min = nums.len();\n  \
    \  let mut curr_sum = 0;\n    for num in nums {\n        curr_sum += num;\n  \
    \      if min > curr_sum {\n            min = curr_sum;\n        }\n    }\n  \
    \  min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpurxs9_9m.rs:14:18\n   |\n\
    14 |         if min > curr_sum {\n   |                  ^^^^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |         if min > curr_sum.try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpurxs9_9m.rs:15:19\n   |\n10 |     let mut min = nums.len();\n\
    \   |                   ---------- expected due to this value\n...\n15 |     \
    \        min = curr_sum;\n   |                   ^^^^^^^^ expected `usize`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpurxs9_9m.rs:18:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    18 |     min\n   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n18 |     min.try_into().unwrap()\n   |        ++++++++++++++++++++\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = isize::MAX;\n    let mut max_idx = nums.len()\
    \ - 1;\n    for i in 0..nums.len() {\n        for j in i..nums.len() {\n     \
    \       let sub_sum = nums[i] + nums[j];\n            if sub_sum < min {\n   \
    \             min = sub_sum;\n            }\n            if sub_sum > max {\n\
    \                max_idx = j - i;\n            }\n        }\n    }\n    min +\
    \ nums[max_idx]\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `max` in this scope\n  --> /tmp/tmpc5knu4lk.rs:15:26\n\
    \   |\n15 |             if sub_sum > max {\n   |                          ^^^\
    \ not found in this scope\n   |\nhelp: consider importing this function\n   |\n\
    1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ min_sum = nums.iter().min().unwrap();\n\n    for &i in nums.iter() {\n     \
    \   min_sum = match i - min_sum {\n            Some(val) => val,\n           \
    \ None => i + min_sum,\n        };\n    }\n\n    min_sum\n}\n\nfn main() {\n \
    \   let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppvqk5u1e.rs:15:13\n   |\n\
    14 |         min_sum = match i - min_sum {\n   |                         -----------\
    \ this expression has type `isize`\n15 |             Some(val) => val,\n   | \
    \            ^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppvqk5u1e.rs:16:13\n   |\n14 |         min_sum\
    \ = match i - min_sum {\n   |                         ----------- this expression\
    \ has type `isize`\n15 |             Some(val) => val,\n16 |             None\
    \ => i + min_sum,\n   |             ^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<_>`\n\
    \nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmppvqk5u1e.rs:16:21\n\
    \   |\n14 |           min_sum = match i - min_sum {\n   |  ___________________-\n\
    15 | |             Some(val) => val,\n   | |                          --- this\
    \ is found to be of type `&isize`\n16 | |             None => i + min_sum,\n \
    \  | |                     ^^^^^^^^^^^\n   | |                     |\n   | | \
    \                    expected `&isize`, found `isize`\n   | |                \
    \     help: consider borrowing here: `&(i + min_sum)`\n17 | |         };\n   |\
    \ |_________- `match` arms have incompatible types\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppvqk5u1e.rs:20:5\n   |\n6  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n20 |     min_sum\n   |     ^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |  \
    \   *min_sum\n   |     +\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        0\n    } else {\n        let mut\
    \ min = nums[0];\n        let mut sum = 0;\n        for &n in &nums[1..] {\n \
    \           sum += n;\n            if sum < min {\n                min = sum;\n\
    \            }\n        }\n        min\n    }\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpij3f_ud6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    for num in &nums[1..] {\n  \
    \      min_sum = nums.iter().fold(nums.iter().min(), |a, b| a.checked_add(&b));\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7d7d35rr.rs:9:36\n  |\n9 |\
    \         min_sum = nums.iter().fold(nums.iter().min(), |a, b| a.checked_add(&b));\n\
    \  |                                    ^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ enum `Option`\n  |\n  = note: expected type `isize`\n             found enum\
    \ `Option<&isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7d7d35rr.rs:9:76\n\
    \  |\n9 |         min_sum = nums.iter().fold(nums.iter().min(), |a, b| a.checked_add(&b));\n\
    \  |                                                                         \
    \   ^^ expected `isize`, found `&&isize`\n  |\nhelp: consider removing the `&`\
    \ and dereferencing the borrow instead\n  |\n9 |         min_sum = nums.iter().fold(nums.iter().min(),\
    \ |a, b| a.checked_add(*b));\n  |                                            \
    \                                ~\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7d7d35rr.rs:9:62\n\
    \  |\n9 |         min_sum = nums.iter().fold(nums.iter().min(), |a, b| a.checked_add(&b));\n\
    \  |                                                              ^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n\
    \             found enum `Option<isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut minsofar = nums.iter().min().unwrap();\n    for num\
    \ in nums.iter() {\n        minsofar += num;\n    }\n    minsofar\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&isize`\n --> /tmp/tmph8or3trj.rs:9:9\n  |\n9 |         minsofar += num;\n\
    \  |         --------^^^^^^^\n  |         |\n  |         cannot use `+=` on type\
    \ `&isize`\n  |\nhelp: `+=` can be used on `isize`, you can dereference `minsofar`\n\
    \  |\n9 |         *minsofar += num;\n  |         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph8or3trj.rs:11:5\n   |\n6  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n11 |     minsofar\n   |     ^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n11 |  \
    \   *minsofar\n   |     +\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0368.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ min_sum = nums[0] as isize;\n    for i in 1..nums.len() {\n        min_sum =\
    \ std::cmp::min(min_sum, nums[i] + min_sum);\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp53vaehs_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums.iter().filter(|&x| x > 0).sum::<isize>();\n\
    \    for i in &nums {\n        min_sum = min_sum.min(|x, y| x + y);\n    }\n \
    \   min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpffuq0blp.rs:7:51\n  |\n7 |\
    \     let mut min_sum = nums.iter().filter(|&x| x > 0).sum::<isize>();\n  |  \
    \                                                 ^\n  |                     \
    \                              |\n  |                                        \
    \           expected `&isize`, found integer\n  |                            \
    \                       help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpffuq0blp.rs:9:31\n  |\n9 |         min_sum = min_sum.min(|x,\
    \ y| x + y);\n  |                               ^^^^^^^^^^^^ expected `isize`,\
    \ found closure\n  |\n  = note: expected type `isize`\n          found closure\
    \ `[closure@/tmp/tmpffuq0blp.rs:9:31: 9:43]`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = i32::MAX;\n    for i in nums.iter() {\n      \
    \  if i > 0 {\n            min += i;\n        }\n    }\n    min\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpda9tlwyg.rs:9:16\n  |\n9 |\
    \         if i > 0 {\n  |                ^\n  |                |\n  |        \
    \        expected `&isize`, found integer\n  |                help: consider borrowing\
    \ here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpda9tlwyg.rs:10:20\n\
    \   |\n10 |             min += i;\n   |                    ^ expected `i32`, found\
    \ `isize`\n\nerror[E0277]: cannot add-assign `&isize` to `i32`\n  --> /tmp/tmpda9tlwyg.rs:10:17\n\
    \   |\n10 |             min += i;\n   |                 ^^ no implementation for\
    \ `i32 += &isize`\n   |\n   = help: the trait `AddAssign<&isize>` is not implemented\
    \ for `i32`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpda9tlwyg.rs:13:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    13 |     min\n   |     ^^^ expected `isize`, found `i32`\n   |\nhelp: you can\
    \ convert an `i32` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n13 |     min.try_into().unwrap()\n   |        ++++++++++++++++++++\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = std::i32::MAX;\n    for &n in nums {\n       \
    \ let sum = sum_inclusive(n);\n        min = if sum < min { sum }\n        else\
    \ { min };\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sum_inclusive` in this scope\n -->\
    \ /tmp/tmp6c7nmy5u.rs:9:19\n  |\n9 |         let sum = sum_inclusive(n);\n  |\
    \                   ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp6c7nmy5u.rs:8:9\n  |\n8 |     for &n in nums {\n  |    \
    \     ^^    ---- this expression has type `Option<isize>`\n  |         |\n  |\
    \         expected `isize`, found reference\n  |         help: you can probably\
    \ remove the explicit borrow: `n`\n  |\n  = note:   expected type `isize`\n  \
    \        found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6c7nmy5u.rs:13:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    13 |     min\n   |     ^^^ expected `isize`, found `i32`\n   |\nhelp: you can\
    \ convert an `i32` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n13 |     min.try_into().unwrap()\n   |        ++++++++++++++++++++\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // TODO: This is too slow\n    let mut min_sum = -isize::MAX;\n\
    \n    for n in nums.iter() {\n        min_sum = min(n, min_sum);\n    }\n\n  \
    \  min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp4sv9ho41.rs:11:19\n\
    \   |\n11 |         min_sum = min(n, min_sum);\n   |                   ^^^\n...\n\
    17 | fn main() {\n   | --------- similarly named function `main` defined here\n\
    \   |\nhelp: a function with a similar name exists\n   |\n11 |         min_sum\
    \ = main(n, min_sum);\n   |                   ~~~~\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    use std::cmp::Ordering;\n\n    fn min_sum_subarray(\n      \
    \  mut nums: Vec<isize>,\n        mut start: usize,\n        mut end: usize,\n\
    \    ) -> usize {\n        if start >= end {\n            return 0;\n        }\n\
    \n        // skip empty subarray\n        if start == end {\n            return\
    \ nums[start];\n        }\n\n        // find minimum sum subarray in current subarray\n\
    \        let mut min_sum = nums[start];\n        for i in start..end {\n     \
    \       match nums[start] as Ordering {\n                // current sum + current\
    \ num is less than current minimum\n                Ordering::Less => min_sum\
    \ = nums[i] + min_sum,\n                Ordering::Greater => min_sum = min_sum\
    \ + nums[i],\n            }\n        }\n        min_sum\n    }\n\n    let mut\
    \ min_sum = nums[0];\n    for &n in nums.iter() {\n        min_sum = min_sum_subarray(nums,\
    \ 0, nums.len());\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyb03csmu.rs:37:19\n   |\n\
    35 |     let mut min_sum = nums[0];\n   |                       ------- expected\
    \ due to this value\n36 |     for &n in nums.iter() {\n37 |         min_sum =\
    \ min_sum_subarray(nums, 0, nums.len());\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyb03csmu.rs:20:20\n\
    \   |\n13 |     ) -> usize {\n   |          ----- expected `usize` because of\
    \ return type\n...\n20 |             return nums[start];\n   |               \
    \     ^^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyb03csmu.rs:32:9\n   |\n13 |     ) -> usize {\n   |   \
    \       ----- expected `usize` because of return type\n...\n32 |         min_sum\n\
    \   |         ^^^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    32 |         min_sum.try_into().unwrap()\n   |                ++++++++++++++++++++\n\
    \nerror[E0605]: non-primitive cast: `isize` as `std::cmp::Ordering`\n  --> /tmp/tmpyb03csmu.rs:26:19\n\
    \   |\n26 |             match nums[start] as Ordering {\n   |                \
    \   ^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between\
    \ primitive types or to coerce to a specific trait object\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0605.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ sum = nums[0];\n    for num in nums.iter().skip(1) {\n        sum += num;\n\
    \    }\n    let mut min = nums[0];\n    for i in 1..nums.len() {\n        if sum\
    \ > i {\n            sum += nums[i];\n            min = i;\n        }\n    }\n\
    \    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7_xd_h1d.rs:16:18\n   |\n\
    16 |         if sum > i {\n   |                  ^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |         if sum > i.try_into().unwrap() {\n   |\
    \                   ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp7_xd_h1d.rs:18:19\n   |\n14 |     let mut min = nums[0];\n   | \
    \                  ------- expected due to this value\n...\n18 |             min\
    \ = i;\n   |                   ^ expected `isize`, found `usize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = 0;\n\n    for num in nums {\n        sum += num;\n\
    \    }\n\n    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n   \
    \ assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpus5bwgn5.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_so_far = nums.iter().fold(\n        0,\n       \
    \ |mut accum, num| {\n            accum + num\n        },\n    );\n    for num\
    \ in nums {\n        if min_so_far > num {\n            min_so_far = num;\n  \
    \      }\n    }\n    min_so_far\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-5`,\n right: `-6`', /tmp/tmpvup9qvcx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums.iter().sum::<isize>();\n    \n    for\
    \ i in nums.iter().skip_while(|&n| n < 0) {\n        let min_sum = min_sum.saturating_add(n);\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `n` in this scope\n  --> /tmp/tmp909tgsdu.rs:10:46\n\
    \   |\n10 |         let min_sum = min_sum.saturating_add(n);\n   |           \
    \                                   ^ help: a local variable with a similar name\
    \ exists: `i`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp909tgsdu.rs:9:46\n\
    \  |\n9 |     for i in nums.iter().skip_while(|&n| n < 0) {\n  |             \
    \                                 ^\n  |                                     \
    \         |\n  |                                              expected `&isize`,\
    \ found integer\n  |                                              help: consider\
    \ borrowing here: `&0`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = vec![nums[0]; nums.len()];\n    let mut min_sum\
    \ = nums[0];\n\n    for &num in nums.iter().rev() {\n        let mut min_pos =\
    \ sum.iter().find(|&x| *x < num).unwrap();\n        if min_pos != &nums[nums.len()\
    \ - 1] {\n            for i in 0..nums.len() {\n                sum[i] = min(sum[i],\
    \ sum[min_pos] + nums[i]);\n            }\n            min_sum = sum[min_pos];\n\
    \        }\n    }\n\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpi5qxtg0r.rs:14:26\n\
    \   |\n14 |                 sum[i] = min(sum[i], sum[min_pos] + nums[i]);\n  \
    \ |                          ^^^\n...\n23 | fn main() {\n   | --------- similarly\
    \ named function `main` defined here\n   |\nhelp: a function with a similar name\
    \ exists\n   |\n14 |                 sum[i] = main(sum[i], sum[min_pos] + nums[i]);\n\
    \   |                          ~~~~\nhelp: consider importing this function\n\
    \   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `&isize`\n  --> /tmp/tmpi5qxtg0r.rs:14:38\n   |\n14 |        \
    \         sum[i] = min(sum[i], sum[min_pos] + nums[i]);\n   |                \
    \                      ^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n\
    \  --> /tmp/tmpi5qxtg0r.rs:16:23\n   |\n16 |             min_sum = sum[min_pos];\n\
    \   |                       ^^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sums = Vec::with_capacity(nums.len());\n    for num\
    \ in nums.into_iter() {\n        let mut sum = num;\n        for other in &mut\
    \ sums {\n            sum += *other;\n        }\n        *other = sum;\n    }\n\
    \n    let mut min = nums[0];\n    for sum in &sums {\n        if sum < min {\n\
    \            min = sum;\n        }\n    }\n\n    min\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `other` in this scope\n  --> /tmp/tmpne_1hyu5.rs:13:10\n\
    \   |\n13 |         *other = sum;\n   |          ^^^^^ not found in this scope\n\
    \nerror[E0277]: can't compare `&_` with `isize`\n  --> /tmp/tmpne_1hyu5.rs:18:16\n\
    \   |\n18 |         if sum < min {\n   |                ^ no implementation for\
    \ `&_ < isize` and `&_ > isize`\n   |\n   = help: the trait `PartialOrd<isize>`\
    \ is not implemented for `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpne_1hyu5.rs:19:19\n\
    \   |\n16 |     let mut min = nums[0];\n   |                   ------- expected\
    \ due to this value\n...\n19 |             min = sum;\n   |                  \
    \ ^^^ expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\nhelp: consider dereferencing the borrow\n  \
    \ |\n19 |             min = *sum;\n   |                   +\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.len() == 0 {\n        return 0;\n    }\n\n    let mut\
    \ min_sum = nums[0] as isize;\n    let mut cur_sum = nums[0] as isize;\n    let\
    \ mut cur_index = nums.len() - 1;\n\n    while cur_sum < nums[0] as isize {\n\
    \        if cur_sum > min_sum {\n            min_sum = cur_sum;\n        }\n\n\
    \        let mut sum = cur_sum;\n\n        while cur_index >= 0 && nums[cur_index]\
    \ > 0 {\n            sum += nums[cur_index];\n            cur_index -= 1;\n  \
    \      }\n\n        cur_sum = sum;\n    }\n\n    min_sum\n}\n\nfn main() {\n \
    \   let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpv5my0ml5.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    debug_assert!(nums.len() > 0);\n\n    let mut best_sum = isize::MAX;\n\
    \    let mut min_sum = isize::MIN;\n\n    for i in 0..nums.len() {\n        if\
    \ nums[i] == 0 {\n            continue;\n        }\n\n        debug_assert!(nums[i]\
    \ >= min_sum);\n        debug_assert!(nums[i] <= best_sum);\n\n        if best_sum\
    \ - nums[i] < min_sum {\n            min_sum = best_sum - nums[i];\n        }\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-9223372036854775808`,\n right: `1`', /tmp/tmpi5hzyhhr.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = nums.iter().fold(0, |mut sum, i| sum + i);\n \
    \   for num in nums.iter_mut() {\n        if *num >= 0 {\n            *sum +=\
    \ *num;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp9n9jko3u.rs:10:13\n\
    \   |\n10 |             *sum += *num;\n   |             ^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum: isize = 0;\n    for num in nums.iter() {\n\
    \        if min_sum < num {\n            min_sum = num;\n        }\n    }\n  \
    \  min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp64aelx0_.rs:9:22\n  |\n9 |\
    \         if min_sum < num {\n  |                      ^^^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |         if\
    \ min_sum < *num {\n  |                      +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp64aelx0_.rs:10:23\n   |\n7  |     let mut min_sum: isize = 0;\n\
    \   |                      ----- expected due to this type\n...\n10 |        \
    \     min_sum = num;\n   |                       ^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             min_sum\
    \ = *num;\n   |                       +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums.iter().reduce(0);\n    for n in nums\
    \ {\n        min_sum = min_sum + n;\n    }\n    min_sum\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(&isize, &isize)>` closure, found `{integer}`\n\
    \    --> /tmp/tmpb5hlhqcm.rs:7:42\n     |\n7    |     let mut min_sum = nums.iter().reduce(0);\n\
    \     |                                   ------ ^ expected an `FnMut<(&isize,\
    \ &isize)>` closure, found `{integer}`\n     |                               \
    \    |\n     |                                   required by a bound introduced\
    \ by this call\n     |\n     = help: the trait `FnMut<(&isize, &isize)>` is not\
    \ implemented for `{integer}`\nnote: required by a bound in `reduce`\n\nerror[E0369]:\
    \ cannot add `isize` to `Option<&isize>`\n --> /tmp/tmpb5hlhqcm.rs:9:27\n  |\n\
    9 |         min_sum = min_sum + n;\n  |                   ------- ^ - isize\n\
    \  |                   |\n  |                   Option<&isize>\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb5hlhqcm.rs:11:5\n   |\n6  | fn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n   |                                        ----- expected\
    \ `isize` because of return type\n...\n11 |     min_sum\n   |     ^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<&isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut minsum = 0;\n    for n in nums.iter() {\n        minsum\
    \ = n.min(minsum);\n    }\n    minsum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfahmgy4s.rs:9:24\n  |\n9 |\
    \         minsum = n.min(minsum);\n  |                        ^^^^^^\n  |    \
    \                    |\n  |                        expected `&isize`, found integer\n\
    \  |                        help: consider borrowing here: `&minsum`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpfahmgy4s.rs:9:18\n  |\n7 |     let mut minsum\
    \ = 0;\n  |                      - expected due to this value\n8 |     for n in\
    \ nums.iter() {\n9 |         minsum = n.min(minsum);\n  |                  ^^^^^^^^^^^^^\
    \ expected integer, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n\
    \  |\n9 |         minsum = *n.min(minsum);\n  |                  +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut s = nums.clone().into_iter().sum();\n    for num in\
    \ nums.iter().skip(1) {\n        s -= num;\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpzjfpa9p5.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0\n    }\n    let mut n\
    \ = nums.len();\n    let mut min_sum = nums[0];\n    let mut cur_sum = 0;\n  \
    \  let mut idx = 1;\n\n    while idx < n {\n        if cur_sum == 0 && idx < n\
    \ {\n            cur_sum = nums[idx];\n            idx++;\n        }\n       \
    \ if cur_sum + nums[idx] < min_sum {\n            min_sum = cur_sum + nums[idx];\n\
    \        }\n        idx += 1;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpp5qa30h4.rs:18:16\n\
    \   |\n18 |             idx++;\n   |                ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n18 |             { let tmp = idx; idx +=\
    \ 1; tmp };\n   |             +++++++++++    ~~~~~~~~~~~~~~~~~\n18 -         \
    \    idx++;\n18 +             idx += 1;\n   | \n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = nums.iter().cloned().sum::<isize>() // sum of\
    \ all elements of nums\n    let mut min_sum = nums.iter().cloned().min_by(|a,\
    \ b| {\n        sum -= a;\n        sum -= b;\n        sum\n    }).unwrap();\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n --> /tmp/tmpsevrl11q.rs:7:54\n\
    \  |\n7 |     let mut sum = nums.iter().cloned().sum::<isize>() // sum of all\
    \ elements of nums\n  |                                                      ^\
    \ help: add `;` here\n8 |     let mut min_sum = nums.iter().cloned().min_by(|a,\
    \ b| {\n  |     --- unexpected token\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpsevrl11q.rs:11:9\n   |\n11 |         sum\n   |         ^^^ expected\
    \ enum `std::cmp::Ordering`, found `isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut max_so_far = nums.iter().max();\n    let mut min_so_far\
    \ = nums.iter().min();\n    let mut sum_so_far = 0;\n    for num in nums.iter()\
    \ {\n        sum_so_far += num;\n        if sum_so_far > max_so_far {\n      \
    \      max_so_far = sum_so_far;\n        } else if sum_so_far < min_so_far {\n\
    \            min_so_far = sum_so_far;\n        }\n    }\n    min_so_far\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi269fj_u.rs:12:25\n   |\n\
    12 |         if sum_so_far > max_so_far {\n   |                         ^^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpi269fj_u.rs:13:26\n   |\n7  |     let mut max_so_far = nums.iter().max();\n\
    \   |                          ----------------- expected due to this value\n\
    ...\n13 |             max_so_far = sum_so_far;\n   |                         \
    \ ^^^^^^^^^^ expected enum `Option`, found `isize`\n   |\n   = note: expected\
    \ enum `Option<&isize>`\n              found type `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpi269fj_u.rs:14:32\n   |\n14 |         } else if sum_so_far\
    \ < min_so_far {\n   |                                ^^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi269fj_u.rs:15:26\n\
    \   |\n8  |     let mut min_so_far = nums.iter().min();\n   |                \
    \          ----------------- expected due to this value\n...\n15 |           \
    \  min_so_far = sum_so_far;\n   |                          ^^^^^^^^^^ expected\
    \ enum `Option`, found `isize`\n   |\n   = note: expected enum `Option<&isize>`\n\
    \              found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi269fj_u.rs:18:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    18 |     min_so_far\n   |     ^^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<&isize>`\n\
    \nerror: aborting due to 5 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    for v in &nums[1..] {\n    \
    \    min_sum = min_sum + v;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmp3912kpew.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.len() == 0 {\n        return 0;\n    }\n    let mut\
    \ min = std::i32::MAX;\n    for i in 0..nums.len() {\n        min = nums.iter().map(|&x|\
    \ x + i).min(|&x, &y| x.partial_cmp(&y)).unwrap();\n    }\n    min\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp49ta0a8i.rs:12:40\n   |\n\
    12 |         min = nums.iter().map(|&x| x + i).min(|&x, &y| x.partial_cmp(&y)).unwrap();\n\
    \   |                                        ^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot add `usize` to `isize`\n  --> /tmp/tmp49ta0a8i.rs:12:38\n\
    \   |\n12 |         min = nums.iter().map(|&x| x + i).min(|&x, &y| x.partial_cmp(&y)).unwrap();\n\
    \   |                                      ^ no implementation for `isize + usize`\n\
    \   |\n   = help: the trait `Add<usize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Add<Rhs>`:\n             <&'a\
    \ f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128\
    \ as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as\
    \ Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0061]:\
    \ this function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmp49ta0a8i.rs:12:43\n\
    \     |\n12   |         min = nums.iter().map(|&x| x + i).min(|&x, &y| x.partial_cmp(&y)).unwrap();\n\
    \     |                                           ^^^ --------------------------\
    \ supplied 1 argument\n     |                                           |\n  \
    \   |                                           expected 0 arguments\n     |\n\
    note: associated function defined here\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp49ta0a8i.rs:12:15\n   |\n10 |     let mut min = std::i32::MAX;\n   |\
    \                   ------------- expected due to this value\n11 |     for i in\
    \ 0..nums.len() {\n12 |         min = nums.iter().map(|&x| x + i).min(|&x, &y|\
    \ x.partial_cmp(&y)).unwrap();\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `i32`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp49ta0a8i.rs:14:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    14 |     min\n   "
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.len() == 0 {\n        return 0;\n    }\n    let mut\
    \ min: isize = nums[0] as isize;\n    let mut sum_prev: isize = 0;\n    for &x\
    \ in nums.iter() {\n        let mut sum = x + sum_prev;\n        min = min::min(min,\
    \ sum);\n        sum_prev = sum;\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `min`\n\
    \  --> /tmp/tmp1unkpqez.rs:14:15\n   |\n14 |         min = min::min(min, sum);\n\
    \   |               ^^^ use of undeclared crate or module `min`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    loop {\n        let mut sub_sum: Vec<isize> = nums.iter().take(3).collect();\n\
    \        let len = sub_sum.len();\n        if sub_sum.iter().any(|&i| i == 0)\
    \ {\n            break;\n        }\n        sub_sum.iter().for_each(|&i| {\n \
    \           if i == 0 {\n                *sub_sum -= i;\n            }\n     \
    \   });\n        let min_sum = sub_sum.iter().sum();\n        if min_sum < 0 {\n\
    \            break;\n        }\n    }\n    sub_sum.iter().sum().unwrap()\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `sub_sum` in this scope\n  --> /tmp/tmp94vtfvp2.rs:23:5\n\
    \   |\n23 |     sub_sum.iter().sum().unwrap()\n   |     ^^^^^^^ not found in this\
    \ scope\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from an\
    \ iterator over elements of type `&isize`\n    --> /tmp/tmp94vtfvp2.rs:8:59\n\
    \     |\n8    |         let mut sub_sum: Vec<isize> = nums.iter().take(3).collect();\n\
    \     |                                                           ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror[E0368]: binary assignment operation\
    \ `-=` cannot be applied to type `[isize]`\n  --> /tmp/tmp94vtfvp2.rs:15:17\n\
    \   |\n15 |                 *sub_sum -= i;\n   |                 --------^^^^^\n\
    \   |                 |\n   |                 cannot use `-=` on type `[isize]`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0368, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = i32::MAX;\n    for x in nums {\n        min_sum\
    \ = min_sum_helper(x, min_sum);\n    }\n    min_sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min_sum_helper` in this scope\n -->\
    \ /tmp/tmppiehhoup.rs:9:19\n  |\n9 |         min_sum = min_sum_helper(x, min_sum);\n\
    \  |                   ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppiehhoup.rs:11:5\n   |\n6  | fn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n   |                                        ----- expected\
    \ `isize` because of return type\n...\n11 |     min_sum\n   |     ^^^^^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n11 |     min_sum.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = nums.iter().reduce(|a, b| if a < b { a } else\
    \ { b });\n    for &n in nums.iter().rev() {\n        min = min + n;\n    }\n\
    \    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `isize` to `Option<&isize>`\n --> /tmp/tmpz_tpj6d1.rs:9:19\n\
    \  |\n9 |         min = min + n;\n  |               --- ^ - isize\n  |       \
    \        |\n  |               Option<&isize>\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpz_tpj6d1.rs:11:5\n   |\n6  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n11 |     min\n   |     ^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<&isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = 0;\n    let mut subsum = 0;\n\n    for &num in\
    \ nums {\n        if num > 0 {\n            sum += num;\n            subsum +=\
    \ num;\n        }\n    }\n\n    if subsum == 0 {\n        return sum;\n    }\n\
    \n    for &num in nums.iter().rev() {\n        if num > 0 {\n            sum +=\
    \ num;\n            subsum -= num;\n        }\n    }\n\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbif6g2wr.rs:10:9\n   |\n\
    10 |     for &num in nums {\n   |         ^^^^    ---- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `num`\n   |\n\
    \   = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = 0;\n    let mut min_sum = nums.iter().fold(0,\
    \ |sum, i| {\n        match i {\n            0 => sum + i,\n            n => sum\
    \ + i,\n        }\n    });\n    for num in nums.iter().take_while(|&x| x < 0)\
    \ {\n        let mut sum = nums.iter().fold(0, |sum, i| {\n            match i\
    \ {\n                0 => sum + i,\n                n => sum + i,\n          \
    \  }\n        });\n        if sum < min_sum {\n            min_sum = sum;\n  \
    \      }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpma31hwc_.rs:14:48\n   |\n\
    14 |     for num in nums.iter().take_while(|&x| x < 0) {\n   |               \
    \                                 ^\n   |                                    \
    \            |\n   |                                                expected `&isize`,\
    \ found integer\n   |                                                help: consider\
    \ borrowing here: `&0`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return nums.len();\n    }\n  \
    \  let mut min = nums[0];\n    for &n in &nums[1..] {\n        if n < min {\n\
    \            min = n;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5cekgt27.rs:8:16\n  |\n6 |\
    \ fn minSubArraySum(nums: Vec<isize>) -> isize {\n  |                        \
    \                ----- expected `isize` because of return type\n7 |     if nums.is_empty()\
    \ {\n8 |         return nums.len();\n  |                ^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n  |\n8 |         return nums.len().try_into().unwrap();\n\
    \  |                          ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::max_value();\n    for num in nums.iter()\
    \ {\n        min_sum = min_sum.checked_add(num);\n    }\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd8t3zii1.rs:9:39\n  |\n9 |\
    \         min_sum = min_sum.checked_add(num);\n  |                           \
    \            ^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n9 |         min_sum = min_sum.checked_add(*num);\n  |     \
    \                                  +\n\nerror[E0308]: mismatched types\n --> /tmp/tmpd8t3zii1.rs:9:19\n\
    \  |\n7 |     let mut min_sum = isize::max_value();\n  |                     \
    \  ------------------ expected due to this value\n8 |     for num in nums.iter()\
    \ {\n9 |         min_sum = min_sum.checked_add(num);\n  |                   ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n\
    \             found enum `Option<isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums.iter().reduce::<isize>(0, |a, b| a.checked_add(a)\
    \ as isize);\n    min_sum.checked_add(1).unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(&isize, &isize)>` closure, found `isize`\n\
    \    --> /tmp/tmp34_64v69.rs:7:35\n     |\n7    |     let mut min_sum = nums.iter().reduce::<isize>(0,\
    \ |a, b| a.checked_add(a) as isize);\n     |                                 \
    \  ^^^^^^ expected an `FnMut<(&isize, &isize)>` closure, found `isize`\n     |\n\
    \     = help: the trait `FnMut<(&isize, &isize)>` is not implemented for `isize`\n\
    note: required by a bound in `reduce`\n\nerror[E0061]: this function takes 1 argument\
    \ but 2 arguments were supplied\n    --> /tmp/tmp34_64v69.rs:7:35\n     |\n7 \
    \   |     let mut min_sum = nums.iter().reduce::<isize>(0, |a, b| a.checked_add(a)\
    \ as isize);\n     |                                   ^^^^^^          -  --------------------------------\
    \ supplied 2 arguments\n     |                                   |\n     |   \
    \                                expected 1 argument\n     |\nnote: associated\
    \ function defined here\n\nerror[E0599]: no method named `checked_add` found for\
    \ enum `Option` in the current scope\n --> /tmp/tmp34_64v69.rs:8:13\n  |\n8 |\
    \     min_sum.checked_add(1).unwrap()\n  |             ^^^^^^^^^^^ method not\
    \ found in `Option<&isize>`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0061, E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut total_so_far = std::i32::MIN;\n    for &n in nums.iter()\
    \ {\n        total_so_far += n;\n    }\n    debug!(\"total_so_far: {:?}\", total_so_far);\n\
    \n    let mut min_so_far = std::i32::MAX;\n    for &n in nums.iter() {\n     \
    \   if total_so_far > 0 && n >= 0 {\n            total_so_far -= n;\n        }\
    \ else if total_so_far > 0 {\n            total_so_far = 0;\n        }\n\n   \
    \     if total_so_far < min_so_far {\n            min_so_far = total_so_far;\n\
    \        }\n    }\n    debug!(\"min_so_far: {:?}\", min_so_far);\n    min_so_far\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `debug` in this scope\n  --> /tmp/tmpjw9si0wh.rs:11:5\n\
    \   |\n11 |     debug!(\"total_so_far: {:?}\", total_so_far);\n   |     ^^^^^\n\
    \nerror: cannot find macro `debug` in this scope\n  --> /tmp/tmpjw9si0wh.rs:25:5\n\
    \   |\n25 |     debug!(\"min_so_far: {:?}\", min_so_far);\n   |     ^^^^^\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpjw9si0wh.rs:9:25\n  |\n9 |      \
    \   total_so_far += n;\n  |                         ^ expected `i32`, found `isize`\n\
    \nerror[E0277]: cannot add-assign `isize` to `i32`\n --> /tmp/tmpjw9si0wh.rs:9:22\n\
    \  |\n9 |         total_so_far += n;\n  |                      ^^ no implementation\
    \ for `i32 += isize`\n  |\n  = help: the trait `AddAssign<isize>` is not implemented\
    \ for `i32`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjw9si0wh.rs:16:29\n   |\n16 |             total_so_far\
    \ -= n;\n   |                             ^ expected `i32`, found `isize`\n\n\
    error[E0277]: cannot subtract-assign `isize` from `i32`\n  --> /tmp/tmpjw9si0wh.rs:16:26\n\
    \   |\n16 |             total_so_far -= n;\n   |                          ^^ no\
    \ implementation for `i32 -= isize`\n   |\n   = help: the trait `SubAssign<isize>`\
    \ is not implemented for `i32`\n   = help: the following other types implement\
    \ trait `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n           \
    \  <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n             <f64\
    \ as SubAssign>\n             <i128 as SubAssign<&i128>>\n             <i128 as\
    \ SubAssign>\n             <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n\
    \           and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjw9si0wh.rs:26:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \           "
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    guard nums.len() > 0 else {\n        return isize::max_value();\n\
    \    }\n\n    let mut min = isize::max_value();\n\n    let mut i = 1;\n    for\
    \ &num in nums {\n        if num < min {\n            min = num;\n        }\n\
    \    }\n\n    while i <= nums.len() {\n        min = nums[i] + min;\n        i\
    \ += 1;\n    }\n\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found `nums`\n --> /tmp/tmp_bc1zown.rs:7:11\n  |\n7 |     guard nums.len() >\
    \ 0 else {\n  |           ^^^^ expected one of 8 possible tokens\n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = nums.iter().min().unwrap();\n    let mut rest\
    \ = vec![];\n    let mut idx = nums.iter().enumerate().filter(|(_, i)| *i < min).count();\n\
    \    while idx > 0 {\n        rest.push(nums[idx]);\n        idx -= 1;\n    }\n\
    \    rest.into_iter().sum()\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp30vwfycc.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.len() < 1 {\n        return 0;\n    }\n    let mut min\
    \ = nums[0] as isize;\n    for x in nums {\n        if x < min {\n           \
    \ min = x;\n        }\n    }\n    let mut sum = 0;\n    for x in nums {\n    \
    \    if x >= min {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `nums`\n   --> /tmp/tmpj9vq4aar.rs:17:14\n\
    \    |\n6   | fn minSubArraySum(nums: Vec<isize>) -> isize {\n    |          \
    \         ---- move occurs because `nums` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n...\n11  |     for x in nums {\n    |          \
    \    ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n17  |\
    \     for x in nums {\n    |              ^^^^ value used here after move\n  \
    \  |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\
    \ to avoid moving into the `for` loop\n    |\n11  |     for x in &nums {\n   \
    \ |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums\n        .iter()\n        .cloned()\n        .fold(0, |sum,\
    \ num| sum + num)\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n   \
    \ assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpc_16d9_b.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ min_sub_array_sum = nums[0];\n    let mut min_sub_array = [nums[0]];\n    for\
    \ i in 1..nums.len() {\n        if nums[i] < min_sub_array_sum {\n           \
    \ min_sub_array_sum = nums[i];\n            min_sub_array = nums[i];\n       \
    \ } else {\n            min_sub_array_sum = min_sub_array_sum - nums[i] - nums[i\
    \ - 1];\n            min_sub_array.append(nums[i]);\n        }\n    }\n    min_sub_array\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqmtsdicf.rs:16:29\n   |\n\
    12 |     let mut min_sub_array = [nums[0]];\n   |                            \
    \ --------- expected due to this value\n...\n16 |             min_sub_array =\
    \ nums[i];\n   |                             ^^^^^^^ expected array `[isize; 1]`,\
    \ found `isize`\n\nerror[E0599]: no method named `append` found for array `[isize;\
    \ 1]` in the current scope\n  --> /tmp/tmpqmtsdicf.rs:19:27\n   |\n19 |      \
    \       min_sub_array.append(nums[i]);\n   |                           ^^^^^^\
    \ method not found in `[isize; 1]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqmtsdicf.rs:22:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    22 |     min_sub_array\n   |     ^^^^^^^^^^^^^ expected `isize`, found array `[isize;\
    \ 1]`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut ans = isize::MAX;\n    for n in nums.iter().cloned()\
    \ {\n        ans = min(ans, n - min(n, ans));\n    }\n    ans\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpga7bj4j8.rs:9:15\n\
    \   |\n9  |         ans = min(ans, n - min(n, ans));\n   |               ^^^\n\
    ...\n14 | fn main() {\n   | --------- similarly named function `main` defined\
    \ here\n   |\nhelp: a function with a similar name exists\n   |\n9  |        \
    \ ans = main(ans, n - min(n, ans));\n   |               ~~~~\nhelp: consider importing\
    \ this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find\
    \ function `min` in this scope\n  --> /tmp/tmpga7bj4j8.rs:9:28\n   |\n9  |   \
    \      ans = min(ans, n - min(n, ans));\n   |                            ^^^\n\
    ...\n14 | fn main() {\n   | --------- similarly named function `main` defined\
    \ here\n   |\nhelp: a function with a similar name exists\n   |\n9  |        \
    \ ans = min(ans, n - main(n, ans));\n   |                            ~~~~\nhelp:\
    \ consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min: isize = 0;\n    for n in nums {\n        if n <\
    \ 0 {\n            return min;\n        }\n        min = match min.checked_add(n)\
    \ {\n            None => n,\n            Some(old_min) => if old_min < n { old_min\
    \ } else { n },\n        };\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpoickl8fm.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    use std::cmp::min;\n\n    fn min_sub_array_sum(a: Vec<isize>)\
    \ -> isize {\n        let mut min_sum = a.len();\n        let mut min_a = a.clone();\n\
    \        for i in 0..a.len() {\n            min_sum += min_a[i];\n           \
    \ min_a = min_a.iter().skip(i + 1).collect();\n        }\n        min_sum\n  \
    \  }\n\n    nums\n        .iter()\n        .filter(|&n| n >= 0)\n        .filter(|&n|\
    \ n <= nums.len())\n        .fold(min_sub_array_sum(nums), |acc, &n| min(acc,\
    \ n + nums.min()))\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpidklj3_y.rs:21:27\n   |\n\
    21 |         .filter(|&n| n >= 0)\n   |                           ^\n   |    \
    \                       |\n   |                           expected `&isize`, found\
    \ integer\n   |                           help: consider borrowing here: `&0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpidklj3_y.rs:22:27\n   |\n22 |\
    \         .filter(|&n| n <= nums.len())\n   |                           ^^^^^^^^^^\
    \ expected `&isize`, found `usize`\n\nerror[E0061]: this function takes 1 argument\
    \ but 0 arguments were supplied\n   --> /tmp/tmpidklj3_y.rs:23:68\n    |\n23 \
    \ |         .fold(min_sub_array_sum(nums), |acc, &n| min(acc, n + nums.min()))\n\
    \    |                                                                    ^^^-\
    \ supplied 0 arguments\n    |                                                \
    \                    |\n    |                                                \
    \                    expected 1 argument\n    |\nnote: associated function defined\
    \ here\n\nerror[E0277]: cannot add `Vec<isize>` to `isize`\n  --> /tmp/tmpidklj3_y.rs:23:61\n\
    \   |\n23 |         .fold(min_sub_array_sum(nums), |acc, &n| min(acc, n + nums.min()))\n\
    \   |                                                             ^ no implementation\
    \ for `isize + Vec<isize>`\n   |\n   = help: the trait `Add<Vec<isize>>` is not\
    \ implemented for `isize`\n   = help: the following other types implement trait\
    \ `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n\
    \             <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n  \
    \           <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n      \
    \       <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n        \
    \   and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpidklj3_y.rs:13:24\n\
    \   |\n13 |             min_sum += min_a[i];\n   |                        ^^^^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot add-assign `isize` to\
    \ `usize`\n  --> /tmp/tmpidklj3_y.rs:13:21\n   |\n13 |             min_sum +=\
    \ min_a[i];\n   |                     "
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut max_sum = nums.iter().fold(0, |a, b| a.checked_add(b).unwrap());\n\
    \n    for i in 1..=nums.len() {\n        let mut new_sum = max_sum;\n        for\
    \ j in 0..i {\n            new_sum -= nums[j];\n            if new_sum < 0 {\n\
    \                break;\n            }\n        }\n        if new_sum < 0 {\n\
    \            break;\n        }\n        max_sum = new_sum;\n    }\n    max_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `checked_add` on ambiguous numeric type\
    \ `{integer}`\n --> /tmp/tmpxmx_1f5c.rs:7:52\n  |\n7 |     let mut max_sum = nums.iter().fold(0,\
    \ |a, b| a.checked_add(b).unwrap());\n  |                                    \
    \        -       ^^^^^^^^^^^\n  |                                            |\n\
    \  |                                            you must specify a type for this\
    \ binding, like `i32`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // Sort the array\n    nums.sort_unstable();\n    // Start from\
    \ first element\n    let mut min_so_far = nums[0];\n    for i in 1..nums.len()\
    \ {\n        min_so_far += nums[i];\n    }\n    min_so_far\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `nums` as mutable, as it is not declared as\
    \ mutable\n --> /tmp/tmpyq87_kzr.rs:8:5\n  |\n6 | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n  |                   ---- help: consider changing this to be mutable:\
    \ `mut nums`\n7 |     // Sort the array\n8 |     nums.sort_unstable();\n  |  \
    \   ^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    use std::cmp::Ordering;\n\n    let mut n = nums.len();\n   \
    \ let mut min_so_far = nums[0];\n    let mut min_so_far_inner = nums[0];\n   \
    \ let mut min_so_far_bound = 0;\n\n    for n in 1..n {\n        let mut min_so_far_bound\
    \ = nums[n];\n        let mut min_so_far_inner = nums[n];\n        let mut min_so_far\
    \ = 0;\n        for m in 0..n {\n            if n == m {\n                continue;\n\
    \            }\n            let max_bound = m == n ? nums[n - 1] : nums[m];\n\
    \            min_so_far_inner += nums[m] * max_bound;\n            min_so_far_inner\
    \ = cmp::min(min_so_far_inner, min_so_far_inner);\n            min_so_far = cmp::min(min_so_far,\
    \ max_bound);\n            min_so_far = cmp::min(min_so_far, min_so_far_inner);\n\
    \        }\n        min_so_far = cmp::min(min_so_far, min_so_far_bound);\n   \
    \     min_so_far = cmp::min(min_so_far, min_so_far_inner);\n        min_so_far\
    \ = cmp::min(min_so_far, min_so_far);\n        min_so_far_bound = min_so_far;\n\
    \    }\n\n    min_so_far\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `nums`\n\
    \  --> /tmp/tmpz3eq7_il.rs:22:38\n   |\n22 |             let max_bound = m ==\
    \ n ? nums[n - 1] : nums[m];\n   |                                      ^^^^ expected\
    \ one of `.`, `;`, `?`, `else`, or an operator\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared crate or module `cmp`\n  --> /tmp/tmpz3eq7_il.rs:28:22\n \
    \  |\n28 |         min_so_far = cmp::min(min_so_far, min_so_far_bound);\n   |\
    \                      ^^^ use of undeclared crate or module `cmp`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `cmp`\n  --> /tmp/tmpz3eq7_il.rs:29:22\n\
    \   |\n29 |         min_so_far = cmp::min(min_so_far, min_so_far_inner);\n   |\
    \                      ^^^ use of undeclared crate or module `cmp`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `cmp`\n  --> /tmp/tmpz3eq7_il.rs:30:22\n\
    \   |\n30 |         min_so_far = cmp::min(min_so_far, min_so_far);\n   |     \
    \                 ^^^ use of undeclared crate or module `cmp`\n\nwarning: unused\
    \ import: `std::cmp::Ordering`\n --> /tmp/tmpz3eq7_il.rs:7:9\n  |\n7 |     use\
    \ std::cmp::Ordering;\n  |         ^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]`\
    \ on by default\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in nums {\n        if num == 0\
    \ {\n            return sum;\n        }\n        sum += num;\n    }\n    // We\
    \ know all elements are non-zero and non-negative because of the for loop.\n \
    \   if nums.is_empty() {\n        return 0;\n    }\n    let mut min_sum = nums[0]\
    \ as isize;\n    for num in nums.iter().rev() {\n        if num == 0 {\n     \
    \       return min_sum;\n        }\n        // Reverse the subtraction because\
    \ the for loop uses decreasing order.\n        // We subtract the current number\
    \ from the minimum sum we have seen so far.\n        min_sum = match min_sum.cmp(&num)\
    \ {\n            Ordering::Less => num - min_sum,\n            Ordering::Greater\
    \ => min_sum - num,\n            Ordering::Equal => min_sum,\n        }\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpe8sy0p5x.rs:26:13\n   |\n26 |             Ordering::Less => num - min_sum,\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpe8sy0p5x.rs:27:13\n\
    \   |\n27 |             Ordering::Greater => min_sum - num,\n   |            \
    \ ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmpe8sy0p5x.rs:28:13\n   |\n28\
    \ |             Ordering::Equal => min_sum,\n   |             ^^^^^^^^ use of\
    \ undeclared type `Ordering`\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n\
    \  --> /tmp/tmpe8sy0p5x.rs:20:16\n   |\n20 |         if num == 0 {\n   |     \
    \           ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the\
    \ trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0433.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    for num in nums.iter().skip(1)\
    \ {\n        min_sum = std::cmp::min(min_sum, num);\n    }\n    min_sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5qxxc6k2.rs:9:42\n  |\n9 |\
    \         min_sum = std::cmp::min(min_sum, num);\n  |                        \
    \                  ^^^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n9 |         min_sum = std::cmp::min(min_sum, *num);\n  |  \
    \                                        +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_so_far = std::i32::MAX;\n    for num in nums.iter()\
    \ {\n        for _ in 0..num {\n            min_so_far = min_so_far.min(num);\n\
    \        }\n    }\n    min_so_far.clone() + std::i32::MAX\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6o7l_hqq.rs:9:21\n  |\n9 |\
    \         for _ in 0..num {\n  |                     ^^^ expected integer, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |         for\
    \ _ in 0..*num {\n  |                     +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6o7l_hqq.rs:10:41\n   |\n10 |             min_so_far = min_so_far.min(num);\n\
    \   |                                         ^^^ expected `i32`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6o7l_hqq.rs:13:5\n   |\n6  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n13 |     min_so_far.clone()\
    \ + std::i32::MAX\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n13 |     (min_so_far.clone() + std::i32::MAX).try_into().unwrap()\n\
    \   |     +                                  +++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    use std::cmp::Ordering;\n\n    let mut min = isize::MAX;\n\n\
    \    for i in nums.iter().rev() {\n        if i != 0 {\n            min = std::cmp::min(min,\
    \ nums.iter().sum().unwrap() - i);\n        }\n    }\n\n    min\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering`\n --> /tmp/tmpyfbat9eh.rs:7:9\n\
    \  |\n7 |     use std::cmp::Ordering;\n  |         ^^^^^^^^^^^^^^^^^^\n  |\n \
    \ = note: `#[warn(unused_imports)]` on by default\n\nerror[E0277]: can't compare\
    \ `&isize` with `{integer}`\n  --> /tmp/tmpyfbat9eh.rs:12:14\n   |\n12 |     \
    \    if i != 0 {\n   |              ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to previous error; 1 warning emitted\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = isize::MAX;\n    for n in nums {\n       \
    \ min_sum = std::cmp::max(min_sum, (n + 1) * n);\n    }\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9223372036854775807`,\n right: `1`', /tmp/tmplnkfgl3f.rs:16:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ sum = 0;\n    let mut last_sub_array_sum = -1;\n    for v in nums {\n      \
    \  sum += v;\n        last_sub_array_sum = sum;\n    }\n    for v in nums {\n\
    \        sum += v;\n        last_sub_array_sum = sum;\n    }\n    if sum == last_sub_array_sum\
    \ {\n        return sum;\n    }\n    let mut i = 1;\n    while i < nums.len()\
    \ {\n        for v in nums.iter().skip(i) {\n            sum += v;\n         \
    \   last_sub_array_sum = sum;\n            if sum == last_sub_array_sum {\n  \
    \              return sum;\n            }\n        }\n        i += 1;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `nums`\n   --> /tmp/tmp27c3xpr0.rs:16:14\n\
    \    |\n6   | fn minSubArraySum(nums: Vec<isize>) -> isize {\n    |          \
    \         ---- move occurs because `nums` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n...\n12  |     for v in nums {\n    |          \
    \    ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n16  |\
    \     for v in nums {\n    |              ^^^^ value used here after move\n  \
    \  |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\
    \ to avoid moving into the `for` loop\n    |\n12  |     for v in &nums {\n   \
    \ |              +\n\nerror[E0382]: borrow of moved value: `nums`\n  --> /tmp/tmp27c3xpr0.rs:24:15\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \      ---- move occurs because `nums` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n16 |     for v in nums {\n   |              ---- `nums`\
    \ moved due to this implicit call to `.into_iter()`\n...\n24 |     while i < nums.len()\
    \ {\n   |               ^^^^^^^^^^ value borrowed here after move\n   |\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n   |\n16 |     for v in &nums {\n   |              +\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums\n        .iter()\n        .fold(0isize, |sum, n| sum +\
    \ n)\n        .min(|a, b| a.cmp(b))\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpn35_qsja.rs:10:15\n\
    \   |\n10 |         .min(|a, b| a.cmp(b))\n   |               ^ consider giving\
    \ this closure parameter a type\n   |\n   = note: type must be known at this point\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut curr_min = std::isize::MAX;\n    for i in nums.iter()\
    \ {\n        curr_min = min::min(curr_min, i);\n    }\n    return curr_min;\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `min`\n\
    \ --> /tmp/tmp52igap8v.rs:9:20\n  |\n9 |         curr_min = min::min(curr_min,\
    \ i);\n  |                    ^^^ use of undeclared crate or module `min`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // TODO: add range check\n    let mut min_sum = std::isize::MAX;\n\
    \    let mut curr_sum = 0;\n    for num in nums {\n        curr_sum += num;\n\
    \        if curr_sum < min_sum {\n            min_sum = curr_sum;\n        }\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpt0sg4aul.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_subarray_sum = nums[0] as isize;\n    for i in 1\
    \ ..= nums.len() {\n        let cur = nums[i] - nums[i - 1];\n        if min_subarray_sum\
    \ > cur {\n            min_subarray_sum = cur;\n        }\n    }\n    min_subarray_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 6 but the index\
    \ is 6', /tmp/tmpyxbnixd6.rs:9:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums.iter().sum();\n    for i in 1..nums.len()\
    \ {\n        min_sum = min_sum - nums[i - 1] + nums[i];\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `1`', /tmp/tmpe157_bxm.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.len() == 0 {\n        return 0;\n    }\n    let mut\
    \ min_sum = nums[0];\n    for &n in nums.iter().rev() {\n        min_sum = max(min_sum,\
    \ n + min_sum);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp6xku7f8f.rs:12:19\n\
    \   |\n12 |         min_sum = max(min_sum, n + min_sum);\n   |               \
    \    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n\
    \   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // write your code in here\n    let mut min_sum = nums[0];\n\
    \    for n in nums.iter().skip(1) {\n        min_sum = if n < min_sum {\n    \
    \        n\n        } else {\n            min_sum\n        };\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxjnaclt3.rs:10:26\n   |\n\
    10 |         min_sum = if n < min_sum {\n   |                          ^^^^^^^\n\
    \   |                          |\n   |                          expected `&isize`,\
    \ found `isize`\n   |                          help: consider borrowing here:\
    \ `&min_sum`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxjnaclt3.rs:11:13\n\
    \   |\n11 |             n\n   |             ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             *n\n  \
    \ |             +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut minimum: isize = 0;\n    let mut current_max: Vec<isize>\
    \ = vec![];\n\n    for &i in nums {\n        current_max.push(maximum(&mut minimum,\
    \ current_max, i));\n    }\n\n    minimum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `maximum` in this scope\n  --> /tmp/tmp845ynwy_.rs:11:26\n\
    \   |\n11 |         current_max.push(maximum(&mut minimum, current_max, i));\n\
    \   |                          ^^^^^^^ help: a local variable with a similar name\
    \ exists: `minimum`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp845ynwy_.rs:10:9\n\
    \   |\n10 |     for &i in nums {\n   |         ^^    ---- this expression has\
    \ type `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `i`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // Write your code here\n    let mut sum: usize = 0;\n    let\
    \ mut min_value: isize = 0;\n    for i in 0..nums.len() {\n        sum = sum +\
    \ nums[i];\n        if min_value > sum {\n            min_value = sum;\n     \
    \   }\n    }\n    min_value\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppebsckvc.rs:11:21\n   |\n\
    11 |         sum = sum + nums[i];\n   |                     ^^^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmppebsckvc.rs:11:19\n\
    \   |\n11 |         sum = sum + nums[i];\n   |                   ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppebsckvc.rs:12:24\n\
    \   |\n12 |         if min_value > sum {\n   |                        ^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |         if min_value\
    \ > sum.try_into().unwrap() {\n   |                           ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmppebsckvc.rs:13:25\n   |\n9  |\
    \     let mut min_value: isize = 0;\n   |                        ----- expected\
    \ due to this type\n...\n13 |             min_value = sum;\n   |             \
    \            ^^^ expected `isize`, found `usize`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ current = nums[0];\n    for i in 1..nums.len() {\n        current = current.min(nums[i]);\n\
    \    }\n    current\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `-6`', /tmp/tmpq8yat3xa.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut max_sum = nums.iter().fold((0, 0), |(max_sum, next),\
    \ &x| {\n        let new_sum = max_sum.1 as isize + x;\n        (new_sum, max_sum.2)\n\
    \    });\n    for val in &nums {\n        max_sum = max_sum.min(val + max_sum.1);\n\
    \    }\n    max_sum.1\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0610]: `{integer}` is a primitive type and therefore doesn't have\
    \ fields\n --> /tmp/tmpen19vshp.rs:8:31\n  |\n8 |         let new_sum = max_sum.1\
    \ as isize + x;\n  |                               ^\n\nerror[E0610]: `{integer}`\
    \ is a primitive type and therefore doesn't have fields\n --> /tmp/tmpen19vshp.rs:9:27\n\
    \  |\n9 |         (new_sum, max_sum.2)\n  |                           ^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpen19vshp.rs:12:31\n   |\n12 |         max_sum\
    \ = max_sum.min(val + max_sum.1);\n   |                               ^^^^^^^^^^^^^^^\
    \ expected tuple, found `isize`\n   |\n   = note: expected tuple `({integer},\
    \ isize)`\n               found type `isize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0610.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ min_sum = nums.iter().fold(0, |sum, i| sum + i);\n    let mut sub_nums = vec![];\n\
    \n    let mut min_sub_array_sum = 0;\n    for (i, &num) in nums.iter().enumerate()\
    \ {\n        // if we find a subarray starting at i, the subarray must not have\
    \ negative elements\n        if sub_nums.iter().any(|&x| x == num) {\n       \
    \     continue;\n        }\n        let new_sub_sum = sub_nums.iter().cloned().fold(0,\
    \ |sum, x| sum + x);\n        if new_sub_sum < min_sum {\n            min_sum\
    \ = new_sub_sum;\n            min_sub_array_sum = i;\n        }\n        sub_nums.push(num);\n\
    \    }\n\n    min_sub_array_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcajnihk7.rs:28:5\n   |\n\
    6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                    \
    \                    ----- expected `isize` because of return type\n...\n28 |\
    \     min_sub_array_sum\n   |     ^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n28 |     min_sub_array_sum.try_into().unwrap()\n  \
    \ |                      ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ sum = 0;\n    for num in nums {\n        sum += num;\n    }\n    if sum < 0\
    \ {\n        return -sum;\n    }\n    let mut min = 0;\n    for num in nums {\n\
    \        min = if sum - num < min { sum - num } else { min };\n    }\n    return\
    \ min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `nums`\n   --> /tmp/tmp4gvb8ugo.rs:18:16\n\
    \    |\n6   | fn minSubArraySum(nums: Vec<isize>) -> isize {\n    |          \
    \         ---- move occurs because `nums` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n...\n11  |     for num in nums {\n    |        \
    \        ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n\
    18  |     for num in nums {\n    |                ^^^^ value used here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\
    \ to avoid moving into the `for` loop\n    |\n11  |     for num in &nums {\n \
    \   |                +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ min_sum = nums.iter().sum();\n\n    for num in nums.iter().rev() {\n       \
    \ if let Some(left_sum) = min_sum + num {\n            min_sum = left_sum;\n \
    \       } else {\n            return min_sum;\n        }\n    }\n    return min_sum;\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<isize as Add<&isize>>::Output ==\
    \ Option<isize>`\n  --> /tmp/tmpppvaho8a.rs:14:41\n   |\n14 |         if let Some(left_sum)\
    \ = min_sum + num {\n   |                                         ^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // find first negative index\n    let mut neg_idx = nums.iter().rposition(|x|\
    \ x < 0);\n    if neg_idx.is_none() {\n        return std::isize::MAX;\n    }\n\
    \n    // get first and last index of sub-array from neg_idx\n    let mut first_idx\
    \ = neg_idx.unwrap() - 1;\n    let mut last_idx = neg_idx.unwrap();\n\n    //\
    \ remove from neg_idx until it's empty\n    loop {\n        let mut sum = 0;\n\
    \        // if last index is not -1, continue to sum\n        if last_idx != neg_idx.unwrap()\
    \ - 1 {\n            // sum until first negative index\n            for i in first_idx..(neg_idx.unwrap()\
    \ - 1) {\n                sum += nums[i];\n            }\n        }\n        //\
    \ if first index is not -1, continue to sum\n        if first_idx != neg_idx.unwrap()\
    \ {\n            // sum until last negative index\n            for i in neg_idx.unwrap()..last_idx.unwrap()\
    \ {\n                sum += nums[i];\n            }\n        }\n        // if\
    \ sum >= 0, break\n        if sum >= 0 {\n            break;\n        }\n    \
    \    // remove from neg_idx\n        last_idx = neg_idx.unwrap();\n        neg_idx\
    \ = nums.iter().rposition(|x| x < 0);\n        if neg_idx.is_some() {\n      \
    \      first_idx = neg_idx.unwrap() - 1;\n        }\n    }\n    // check if any\
    \ negative number exists\n    if last_idx != nums.len() {\n        return std::isize::MAX;\n\
    \    }\n    // subtract sum of all negative numbers from first negative number\n\
    \    return nums[first_idx - 1] - sum;\n}\n\nfn main() {\n    let candidate =\
    \ minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `sum` in this scope\n  --> /tmp/tmp_v2fzydt.rs:50:34\n\
    \   |\n50 |     return nums[first_idx - 1] - sum;\n   |                      \
    \            ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp_v2fzydt.rs:8:53\n  |\n8 |     let mut neg_idx = nums.iter().rposition(|x|\
    \ x < 0);\n  |                                                     ^\n  |    \
    \                                                 |\n  |                     \
    \                                expected `&isize`, found integer\n  |       \
    \                                              help: consider borrowing here:\
    \ `&0`\n\nerror[E0599]: no method named `unwrap` found for type `usize` in the\
    \ current scope\n  --> /tmp/tmp_v2fzydt.rs:30:49\n   |\n30 |             for i\
    \ in neg_idx.unwrap()..last_idx.unwrap() {\n   |                             \
    \                    ^^^^^^ method not found in `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_v2fzydt.rs:40:49\n   |\n40 |         neg_idx = nums.iter().rposition(|x|\
    \ x < 0);\n   |                                                 ^\n   |      \
    \                                           |\n   |                          \
    \                       expected `&isize`, found integer\n   |               \
    \                                  help: consider borrowing here: `&0`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::i32::MAX;\n    for n in nums {\n    \
    \    if n == 0 { continue; }\n        min_sum = std::cmp::min(min_sum, n - nums.iter().cloned().min_by_key(|x|\
    \ x as isize).unwrap());\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwhzsgxjd.rs:10:42\n   |\n\
    10 |         min_sum = std::cmp::min(min_sum, n - nums.iter().cloned().min_by_key(|x|\
    \ x as isize).unwrap());\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `i32`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `i32` and panic if the converted value doesn't fit\n   |\n10 |         min_sum\
    \ = std::cmp::min(min_sum, (n - nums.iter().cloned().min_by_key(|x| x as isize).unwrap()).try_into().unwrap());\n\
    \   |                                          +                             \
    \                               +++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwhzsgxjd.rs:12:5\n   |\n6  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n12 |     min_sum\n   |     ^^^^^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n12 |     min_sum.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror[E0606]: casting `&isize` as `isize`\
    \ is invalid\n  --> /tmp/tmpwhzsgxjd.rs:10:82\n   |\n10 |         min_sum = std::cmp::min(min_sum,\
    \ n - nums.iter().cloned().min_by_key(|x| x as isize).unwrap());\n   |       \
    \                                                                           -^^^^^^^^^\n\
    \   |                                                                        \
    \          |\n   |                                                           \
    \                       cannot cast `&isize` as `isize`\n   |                \
    \                                                                  help: dereference\
    \ the expression: `*x`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0606.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = 0;\n    let mut max_pos = nums.len();\n\n    while\
    \ max_pos > 0 {\n        let mut count = 0;\n        for n in 0..max_pos {\n \
    \           match nums[n] {\n                0 => count += 1,\n              \
    \  x => {\n                    count += 1;\n                    if n != max_pos\
    \ {\n                        count -= 1;\n                    }\n            \
    \    }\n            }\n        }\n\n        if count < min {\n            min\
    \ = count;\n        }\n\n        let mut max_pos -= 1;\n    }\n\n    min\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error: can't reassign to an uninitialized variable\n  --> /tmp/tmp5r7rmbju.rs:28:25\n\
    \   |\n28 |         let mut max_pos -= 1;\n   |                         ^^ help:\
    \ initialize the variable\n   |\n   = help: if you meant to overwrite, remove\
    \ the `let` binding\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ cur_min = nums[0];\n\n    for i in 1..nums.len() {\n        if nums[i] > cur_min\
    \ {\n            cur_min = nums[i];\n        }\n    }\n\n    cur_min\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpuf_xwnat.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in nums {\n        sum += num;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpwrwoij9s.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // let mut sum = 0;\n    // for i in nums.iter() {\n    // \
    \    sum += i;\n    // }\n    // let mut min = sum;\n    // for i in nums.iter()\
    \ {\n    //     if i < min {\n    //         min = i;\n    //     }\n    // }\n\
    \    // return min;\n    trace!(\"minSubArraySum\", nums);\n    let mut min =\
    \ nums.clone();\n    loop {\n        let sum = nums.iter().sum();\n        if\
    \ sum < min {\n            min = sum;\n        }\n        let max_index = nums.iter().position(|&i|\
    \ i < min);\n        if max_index == nums.len() - 1 {\n            break;\n  \
    \      }\n        for j in 0..max_index {\n            nums[j] = nums[j] + nums[max_index];\n\
    \        }\n    }\n    return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `trace` in this scope\n  --> /tmp/tmpm3dg5d7i.rs:18:5\n\
    \   |\n18 |     trace!(\"minSubArraySum\", nums);\n   |     ^^^^^\n\nerror[E0277]:\
    \ the trait bound `Vec<isize>: Sum<&isize>` is not satisfied\n    --> /tmp/tmpm3dg5d7i.rs:21:31\n\
    \     |\n21   |         let sum = nums.iter().sum();\n     |                 \
    \              ^^^ the trait `Sum<&isize>` is not implemented for `Vec<isize>`\n\
    \     |\n     = help: the following other types implement trait `Sum<A>`:\n  \
    \             <Duration as Sum<&'a Duration>>\n               <Duration as Sum>\n\
    \               <Option<T> as Sum<Option<U>>>\n               <Result<T, E> as\
    \ Sum<Result<U, E>>>\n               <Simd<f32, LANES> as Sum<&'a Simd<f32, LANES>>>\n\
    \               <Simd<f32, LANES> as Sum>\n               <Simd<f64, LANES> as\
    \ Sum<&'a Simd<f64, LANES>>>\n               <Simd<f64, LANES> as Sum>\n     \
    \        and 72 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpm3dg5d7i.rs:25:55\n   |\n25 |\
    \         let max_index = nums.iter().position(|&i| i < min);\n   |          \
    \                                             ^^^ expected `isize`, found struct\
    \ `Vec`\n   |\n   = note: expected type `isize`\n            found struct `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpm3dg5d7i.rs:26:25\n   |\n26 |\
    \         if max_index == nums.len() - 1 {\n   |                         ^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `usize`\n   |\n   = note: expected enum `Option<usize>`\n\
    \              found type `usize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n26 |         if max_index == Some(nums.len() - 1) {\n   |             \
    \            +++++              +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm3dg5d7i.rs:29:21\n\
    \   |\n29 |         for j in 0..max_index {\n   |                     ^^^^^^^^^\
    \ expected integer, found enum `Option`\n   |\n   = note: expected type `{integer}`\n\
    \              found enum `Option<usize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `Option<usize>`\n  --> /tmp/tmpm3dg5d7i.rs:30:33\n   |\n\
    30 "
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut min_sub_sum = nums.iter().cloned().collect::<Vec<_>>();\n    min_sum.reduce(0,\
    \ |sum, x| sum + x);\n    loop {\n        min_sub_sum.reduce(0, |sum, x| sum +\
    \ x);\n        if min_sub_sum == min_sum {\n            break;\n        }\n  \
    \      min_sum += min_sub_sum;\n        min_sub_sum.clear();\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp18hwcdnl.rs:9:13\n\
    \    |\n9   |       min_sum.reduce(0, |sum, x| sum + x);\n    |              \
    \ ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `Vec<isize>: Iterator`\n           \
    \ which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n\
    \            which is required by `&mut [isize]: Iterator`\n\nerror[E0599]: `Vec<isize>`\
    \ is not an iterator\n   --> /tmp/tmp18hwcdnl.rs:11:21\n    |\n11  |         \
    \  min_sub_sum.reduce(0, |sum, x| sum + x);\n    |                       ^^^^^^\
    \ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Vec<isize>: Iterator`\n            which is\
    \ required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n \
    \           which is required by `&mut [isize]: Iterator`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Vec<isize>`\n  --> /tmp/tmp18hwcdnl.rs:15:9\n\
    \   |\n15 |         min_sum += min_sub_sum;\n   |         -------^^^^^^^^^^^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp18hwcdnl.rs:18:5\n   |\n6  | fn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n   |                                        ----- expected\
    \ `isize` because of return type\n...\n18 |     min_sum\n   |     ^^^^^^^ expected\
    \ `isize`, found struct `Vec`\n   |\n   = note: expected type `isize`\n      \
    \      found struct `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0368, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ sum: isize = 0;\n    let mut min_sum = nums[0] as isize;\n    let mut min_start\
    \ = min_sum;\n    for i in 1..nums.len() {\n        sum += nums[i];\n        min_sum\
    \ = if sum < min_sum { sum } else { min_sum }; // if min_sum is the same as sum,\
    \ don't update min_sum\n        min_start = if sum < min_start { sum } else {\
    \ min_start }; // if min_start is same as sum, don't update min_start\n    }\n\
    \    min_start\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp0pucdxbd.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums.iter().sum();\n\n    for &n in nums.iter()\
    \ {\n        min_sum = min_sum + n;\n    }\n\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `32`,\n right: `1`', /tmp/tmps58f_ubj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0] as isize;\n    for num in nums.iter().rev()\
    \ {\n        min_sum = min_sum + num;\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `1`', /tmp/tmpz7vzi90s.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum: isize = 0;\n    for value in nums.iter() {\n  \
    \      sum += value;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpd6g4_r9y.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n    let mut\
    \ cur: usize = 0;\n    let mut min: isize = nums[0] as isize;\n    for &n in nums.iter().skip(1)\
    \ {\n        let mut n = n as isize;\n        while cur < n..(cur + min) {\n \
    \           cur += min;\n            min -= n;\n        }\n    }\n    min\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsva3uwow.rs:14:21\n   |\n\
    14 |         while cur < n..(cur + min) {\n   |                     ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n14 |         while cur <\
    \ n.try_into().unwrap()..(cur + min) {\n   |                      ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsva3uwow.rs:14:31\n   |\n14 |\
    \         while cur < n..(cur + min) {\n   |                               ^^^\
    \ expected `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsva3uwow.rs:14:24\n\
    \   |\n14 |         while cur < n..(cur + min) {\n   |                       \
    \ ^^^^^^^^^^^ expected `bool`, found `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsva3uwow.rs:14:15\n   |\n14 |         while cur < n..(cur + min)\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n\
    \   |\n   = note: expected type `bool`\n            found struct `std::ops::Range<bool>`\n\
    \nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpsva3uwow.rs:14:29\n\
    \   |\n14 |         while cur < n..(cur + min) {\n   |                       \
    \      ^ no implementation for `usize + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsva3uwow.rs:15:20\n\
    \   |\n15 |             cur += min;\n   |                    ^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmpsva3uwow.rs:15:17\n\
    \   |\n15 |             cur += min;\n   |                 ^^ no implementation\
    \ for `usize += isize`\n   |\n   = help: the trait `AddAssign<isi"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    use std::mem;\n    let mut min = isize::MAX;\n    for (i, num)\
    \ in nums.iter().enumerate() {\n        let mut sum = 0;\n        let mut max_sum\
    \ = isize::MAX;\n        for (j, num) in nums.iter().enumerate() {\n         \
    \   sum += num;\n            max_sum = std::cmp::max(sum, max_sum);\n        }\n\
    \        sum = sum.min(max_sum);\n        min = std::cmp::min(sum, min);\n   \
    \ }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpgn1rqut_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        0\n    } else {\n        // O(n)\
    \ time and O(1) space\n        let mut ans = nums[0];\n        for &n in &nums\
    \ {\n            ans = min(ans, n + ans);\n        }\n        ans\n    }\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpawfhyxwm.rs:13:19\n\
    \   |\n13 |             ans = min(ans, n + ans);\n   |                   ^^^\n\
    ...\n19 | fn main() {\n   | --------- similarly named function `main` defined\
    \ here\n   |\nhelp: a function with a similar name exists\n   |\n13 |        \
    \     ans = main(ans, n + ans);\n   |                   ~~~~\nhelp: consider importing\
    \ this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    debug_assert!(nums.len() >= 1);\n    let mut min_sum: isize\
    \ = nums[0];\n    let mut cur_sum: isize = 0;\n    for num in nums.iter().rev()\
    \ {\n        cur_sum += num;\n        if cur_sum < min_sum {\n            min_sum\
    \ = cur_sum;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpg8zg66uo.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = i32::MAX;\n    for i in 0..nums.len() {\n    \
    \    for j in (i..nums.len()).rev() {\n            let sum = nums[i] + nums[j];\n\
    \            if sum < min {\n                min = sum;\n            }\n     \
    \   }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmporikqqvd.rs:11:22\n   |\n\
    11 |             if sum < min {\n   |                      ^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n11 |             if sum < min.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmporikqqvd.rs:12:23\n   |\n7  |     let mut min = i32::MAX;\n\
    \   |                   -------- expected due to this value\n...\n12 |       \
    \          min = sum;\n   |                       ^^^ expected `i32`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmporikqqvd.rs:16:5\n   |\n6  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n16 |     min\n\
    \   |     ^^^ expected `isize`, found `i32`\n   |\nhelp: you can convert an `i32`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n16 |     min.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums.iter().cloned().min().unwrap();\n   \
    \ for &i in nums.iter().skip(1) {\n        min_sum = min(min_sum + i, min_sum);\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpuun4mloj.rs:9:19\n\
    \   |\n9  |         min_sum = min(min_sum + i, min_sum);\n   |               \
    \    ^^^\n...\n14 | fn main() {\n   | --------- similarly named function `main`\
    \ defined here\n   |\nhelp: a function with a similar name exists\n   |\n9  |\
    \         min_sum = main(min_sum + i, min_sum);\n   |                   ~~~~\n\
    help: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    use std::cmp::Ordering;\n    use std::mem::size_of;\n    use\
    \ std::slice::Iter;\n\n    let mut min_sum = isize::max_value();\n    let mut\
    \ min_elements = Vec::new();\n    let mut itr = Iter::from(nums);\n\n    // Find\
    \ the minimum sum for all numbers in nums\n    while let Some(mut elem) = itr.next()\
    \ {\n        min_sum = min_sum.checked_add(elem).unwrap();\n        min_elements.push(elem);\n\
    \    }\n\n    // Find the minimum sum for the rest elements\n    while itr.peek().is_some()\
    \ {\n        let elem = itr.next().unwrap();\n        min_sum = min_sum.checked_add(elem).unwrap();\n\
    \        min_elements.push(elem);\n    }\n\n    // Return the minimum sum\n  \
    \  min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering`\n --> /tmp/tmpchmlrhi_.rs:7:9\n\
    \  |\n7 |     use std::cmp::Ordering;\n  |         ^^^^^^^^^^^^^^^^^^\n  |\n \
    \ = note: `#[warn(unused_imports)]` on by default\n\nwarning: unused import: `std::mem::size_of`\n\
    \ --> /tmp/tmpchmlrhi_.rs:8:9\n  |\n8 |     use std::mem::size_of;\n  |      \
    \   ^^^^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpchmlrhi_.rs:13:30\n\
    \   |\n13 |     let mut itr = Iter::from(nums);\n   |                        \
    \      ^^^^ expected struct `std::slice::Iter`, found struct `Vec`\n   |\n   =\
    \ note: expected struct `std::slice::Iter<'_, _>`\n              found struct\
    \ `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpchmlrhi_.rs:17:39\n\
    \   |\n17 |         min_sum = min_sum.checked_add(elem).unwrap();\n   |      \
    \                                 ^^^^ expected `isize`, found reference\n   |\n\
    \   = note:   expected type `isize`\n           found reference `&_`\nhelp: consider\
    \ dereferencing the borrow\n   |\n17 |         min_sum = min_sum.checked_add(*elem).unwrap();\n\
    \   |                                       +\n\nerror[E0599]: no method named\
    \ `peek` found for struct `std::slice::Iter` in the current scope\n  --> /tmp/tmpchmlrhi_.rs:22:15\n\
    \   |\n22 |     while itr.peek().is_some() {\n   |               ^^^^ method not\
    \ found in `std::slice::Iter<'_, _>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpchmlrhi_.rs:24:39\n   |\n24 |         min_sum = min_sum.checked_add(elem).unwrap();\n\
    \   |                                       ^^^^ expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\nhelp:\
    \ consider dereferencing the borrow\n   |\n24 |         min_sum = min_sum.checked_add(*elem).unwrap();\n\
    \   |                                       +\n\nerror: aborting due to 4 previous\
    \ errors; 2 warnings emitted\n\nSome errors have detailed explanations: E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.len() == 0 {\n        return 0;\n    }\n\n    let mut\
    \ min_sum = nums[0];\n    let mut min_idx = 1;\n\n    for idx in 1..nums.len()\
    \ {\n        if nums[idx] > min_sum {\n            min_sum = nums[idx];\n    \
    \        min_idx = idx;\n        }\n    }\n\n    min_sum\n}\n\nfn main() {\n \
    \   let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp5fpxx3cw.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums.iter().filter_map(|x| x > 0).min_by_key(|x| x).unwrap()\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjowvtn74.rs:7:36\n  |\n7 |\
    \     nums.iter().filter_map(|x| x > 0).min_by_key(|x| x).unwrap()\n  |      \
    \                              ^\n  |                                    |\n \
    \ |                                    expected `&isize`, found integer\n  | \
    \                                   help: consider borrowing here: `&0`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpjowvtn74.rs:7:32\n  |\n7 |     nums.iter().filter_map(|x|\
    \ x > 0).min_by_key(|x| x).unwrap()\n  |                                ^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n7 |     nums.iter().filter_map(|x| Some(x > 0)).min_by_key(|x| x).unwrap()\n\
    \  |                                +++++     +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // let mut res = nums.iter().cloned().fold(nums[0], |mut acc,\
    \ x| {\n    //     acc + x;\n    // });\n    // return res;\n    let mut res =\
    \ nums.iter().cloned().fold(\n        nums.iter().cloned().min(),\n        |mut\
    \ acc, x| {\n            acc.partial_min(|a, b| {\n                a + x;\n  \
    \          });\n            acc\n        },\n    );\n    // return res;\n    return\
    \ res;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `partial_min` found for enum `Option` in\
    \ the current scope\n  --> /tmp/tmpd5ymau74.rs:14:17\n   |\n14 |             acc.partial_min(|a,\
    \ b| {\n   |                 ^^^^^^^^^^^ method not found in `Option<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpd5ymau74.rs:21:12\n   |\n6  |\
    \ fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                       \
    \                 ----- expected `isize` because of return type\n...\n21 |   \
    \  return res;\n   |            ^^^ expected `isize`, found enum `Option`\n  \
    \ |\n   = note: expected type `isize`\n              found enum `Option<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums\n        .iter()\n        .filter(|&num| num != 0)\n  \
    \      .sum()\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n --> /tmp/tmpzuw7_axu.rs:9:28\n\
    \  |\n9 |         .filter(|&num| num != 0)\n  |                            ^^\
    \ no implementation for `&isize == {integer}`\n  |\n  = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n  = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n            f32\n            f64\n            i128\n\
    \            i16\n            i32\n            i64\n            i8\n         \
    \   isize\n          and 6 others\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // Base case\n    if nums.is_empty() {\n        return 0\n \
    \   }\n    // Add first number\n    let mut result = nums.first();\n    // Add\
    \ remaining numbers\n    for num in nums[1..] {\n        result = min(result,\
    \ num + result);\n    }\n    result\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpffyddf3i.rs:15:18\n\
    \   |\n15 |         result = min(result, num + result);\n   |                \
    \  ^^^\n...\n20 | fn main() {\n   | --------- similarly named function `main`\
    \ defined here\n   |\nhelp: a function with a similar name exists\n   |\n15 |\
    \         result = main(result, num + result);\n   |                  ~~~~\nhelp:\
    \ consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]:\
    \ the size for values of type `[isize]` cannot be known at compilation time\n\
    \  --> /tmp/tmpffyddf3i.rs:14:16\n   |\n14 |     for num in nums[1..] {\n   |\
    \                ^^^^^^^^^ expected an implementor of trait `IntoIterator`\n \
    \  |\n   = note: the trait bound `[isize]: IntoIterator` is not satisfied\n  \
    \ = note: required because of the requirements on the impl of `IntoIterator` for\
    \ `[isize]`\nhelp: consider borrowing here\n   |\n14 |     for num in &nums[1..]\
    \ {\n   |                +\n14 |     for num in &mut nums[1..] {\n   |       \
    \         ++++\n\nerror[E0277]: `[isize]` is not an iterator\n  --> /tmp/tmpffyddf3i.rs:14:16\n\
    \   |\n14 |     for num in nums[1..] {\n   |                ^^^^^^^^^ expected\
    \ an implementor of trait `IntoIterator`\n   |\n   = note: the trait bound `[isize]:\
    \ IntoIterator` is not satisfied\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n\
    \   |\n14 |     for num in &nums[1..] {\n   |                +\n14 |     for num\
    \ in &mut nums[1..] {\n   |                ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpffyddf3i.rs:17:5\n   |\n6  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n17 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<&isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut minsofar = nums.iter().sum();\n    for x in nums.iter_mut()\
    \ {\n        *x += 1;\n        if *x >= minsofar {\n            minsofar = *x;\n\
    \        }\n    }\n    minsofar\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `nums` as mutable, as it is not declared as\
    \ mutable\n --> /tmp/tmpsnz8mw8v.rs:8:14\n  |\n6 | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n  |                   ---- help: consider changing this to be mutable:\
    \ `mut nums`\n7 |     let mut minsofar = nums.iter().sum();\n8 |     for x in\
    \ nums.iter_mut() {\n  |              ^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut res = nums[0];\n\n    for &i in &nums[1..] {\n     \
    \   let j = i - 1;\n        res = if i > nums.len() || j >= 0 { res + i } else\
    \ { res };\n    }\n\n    if res < 0 {\n        -res\n    } else {\n        res\n\
    \    }\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb_yzdvpt.rs:11:22\n   |\n\
    11 |         res = if i > nums.len() || j >= 0 { res + i } else { res };\n   |\
    \                      ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |         res = if i > nums.len().try_into().unwrap() || j >=\
    \ 0 { res + i } else { res };\n   |                                ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num| sum + num);\n\
    \    for num in nums.iter() {\n        min_sum = min_sum - num;\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpe8jhuzcj.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums.iter().take(2).fold((0, 0), |(sum, el), num| {\n      \
    \  let sub_sum = sum + num;\n        (sub_sum, sub_sum) if sub_sum < sum\n   \
    \ }).1\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword\
    \ `if`\n --> /tmp/tmp1bqrj092.rs:9:28\n  |\n9 |         (sub_sum, sub_sum) if\
    \ sub_sum < sum\n  |                            ^^ expected one of `.`, `;`, `?`,\
    \ `}`, or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    for i in 1..nums.len() {\n \
    \       let current_sum = nums[i] + min_sum;\n        min_sum = min(current_sum,\
    \ min_sum);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp0pefsc26.rs:10:19\n\
    \   |\n10 |         min_sum = min(current_sum, min_sum);\n   |               \
    \    ^^^\n...\n15 | fn main() {\n   | --------- similarly named function `main`\
    \ defined here\n   |\nhelp: a function with a similar name exists\n   |\n10 |\
    \         min_sum = main(current_sum, min_sum);\n   |                   ~~~~\n\
    help: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums.iter().fold(0, |sum, x| sum + x)\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpd267udfw.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut ans = nums[0];\n    for &x in nums.iter().skip(1) {\n\
    \        ans = min(x, ans)\n    }\n    ans\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpuek_92bk.rs:9:15\n\
    \   |\n9  |         ans = min(x, ans)\n   |               ^^^\n...\n14 | fn main()\
    \ {\n   | --------- similarly named function `main` defined here\n   |\nhelp:\
    \ a function with a similar name exists\n   |\n9  |         ans = main(x, ans)\n\
    \   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use\
    \ std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0] as isize;\n    for &n in &nums[1..]\
    \ {\n        min_sum = min_sum.min(n as isize);\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `-6`', /tmp/tmp_j2t1qe6.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    loop {\n        let mut cur = nums.iter().enumerate().map(|(i,\
    \ &x)| x).sum();\n        if cur < 0 {\n            return cur;\n        }\n \
    \       for (i, &x) in nums.iter().enumerate().filter(|(_, &_)| x == cur) {\n\
    \            let mut prev = &nums[i - 1];\n            if prev < cur {\n     \
    \           cur -= prev;\n            }\n            nums[i] = x;\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `x` in this scope\n  --> /tmp/tmpyn0p7vlg.rs:12:65\n\
    \   |\n12 |         for (i, &x) in nums.iter().enumerate().filter(|(_, &_)| x\
    \ == cur) {\n   |                                                            \
    \     ^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyn0p7vlg.rs:14:23\n\
    \   |\n14 |             if prev < cur {\n   |                       ^^^\n   |\
    \                       |\n   |                       expected `&isize`, found\
    \ `isize`\n   |                       help: consider borrowing here: `&cur`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    use core::cmp::Ordering::{Equal, Less};\n    \n    let mut min_sum\
    \ = nums[0];\n    for n in nums.iter().skip(1) {\n        let mut min_sub_sum\
    \ = 0;\n        for m in 0..n {\n            let mut sub_sum = min_sum + n;\n\
    \            match sub_sum.partial_cmp(&mut min_sub_sum) {\n                Equal\
    \ => {}\n                Less => min_sub_sum = sub_sum,\n            }\n     \
    \   }\n        min_sum = min_sub_sum;\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: maybe a missing crate `core`?\n --> /tmp/tmpb6av8bjv.rs:7:9\n\
    \  |\n7 |     use core::cmp::Ordering::{Equal, Less};\n  |         ^^^^ maybe\
    \ a missing crate `core`?\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb6av8bjv.rs:12:21\n\
    \   |\n12 |         for m in 0..n {\n   |                     ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \       for m in 0..*n {\n   |                     +\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ curr_sum: isize = nums[0] as isize;\n    let mut max_sum_so_far: isize = nums[0]\
    \ as isize;\n\n    for num in nums[1..] {\n        let next_sum = curr_sum + num;\n\
    \        if max_sum_so_far < next_sum {\n            max_sum_so_far = next_sum;\n\
    \        }\n        curr_sum = next_sum;\n    }\n    max_sum_so_far\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmpyuk2daie.rs:14:16\n   |\n14 |     for num in\
    \ nums[1..] {\n   |                ^^^^^^^^^ expected an implementor of trait\
    \ `IntoIterator`\n   |\n   = note: the trait bound `[isize]: IntoIterator` is\
    \ not satisfied\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n   |\n14 |    \
    \ for num in &nums[1..] {\n   |                +\n14 |     for num in &mut nums[1..]\
    \ {\n   |                ++++\n\nerror[E0277]: `[isize]` is not an iterator\n\
    \  --> /tmp/tmpyuk2daie.rs:14:16\n   |\n14 |     for num in nums[1..] {\n   |\
    \                ^^^^^^^^^ expected an implementor of trait `IntoIterator`\n \
    \  |\n   = note: the trait bound `[isize]: IntoIterator` is not satisfied\n  \
    \ = note: required because of the requirements on the impl of `IntoIterator` for\
    \ `[isize]`\nhelp: consider borrowing here\n   |\n14 |     for num in &nums[1..]\
    \ {\n   |                +\n14 |     for num in &mut nums[1..] {\n   |       \
    \         ++++\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = isize::MAX;\n    for n in nums.iter() {\n    \
    \    let sum = n.saturating_add(isize::MAX);\n        if sum < min {\n       \
    \     min = sum;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9223372036854775807`,\n right: `1`', /tmp/tmp547l1rht.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = 0;\n    for &n in nums.iter() {\n        if\
    \ n <= 0 {\n            continue;\n        }\n        min_sum += *n;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpjp8hsnq_.rs:12:20\n\
    \   |\n12 |         min_sum += *n;\n   |                    ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = i32::MAX;\n    for i in 0..nums.len() {\n    \
    \    for j in 0..nums.len() {\n            if i > j {\n                continue;\n\
    \            }\n            let a = nums[..i].iter().sum();\n            let b\
    \ = nums[i..].iter().sum();\n            let c = nums[j..].iter().sum();\n   \
    \         if a + b > c {\n                min = std::cmp::min(min, a + b - c);\n\
    \            }\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj67_1e_4.rs:21:5\n   |\n\
    6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                    \
    \                    ----- expected `isize` because of return type\n...\n21 |\
    \     min\n   |     ^^^ expected `isize`, found `i32`\n   |\nhelp: you can convert\
    \ an `i32` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    21 |     min.try_into().unwrap()\n   |        ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    debug_assert_eq!(nums.len(), 1);\n    let mut sum = nums[0];\n\
    \    for num in nums.iter().rev() {\n        sum += num;\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `1`', /tmp/tmpz82u_zor.rs:7:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // Sort the array so the min number is the head of the array\n\
    \    // This reduces O(n log n) to O(n log n + n)\n    nums.sort_unstable();\n\
    \n    let mut sum = nums[0];\n    for v in &nums[1..] {\n        sum += v;\n \
    \   }\n\n    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `nums` as mutable, as it is not declared as\
    \ mutable\n --> /tmp/tmpavbfl_lb.rs:9:5\n  |\n6 | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n  |                   ---- help: consider changing this to be mutable:\
    \ `mut nums`\n...\n9 |     nums.sort_unstable();\n  |     ^^^^^^^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums.len();\n\n    let mut i = nums.len()\
    \ - 1;\n    let mut j = nums.len() - 1;\n\n    while i >= 0 && j >= 0 {\n    \
    \    if nums[i] < nums[j] {\n            i -= 1;\n        } else if nums[i] >\
    \ nums[j] {\n            j -= 1;\n        } else {\n            let sum = nums[i]\
    \ + nums[j];\n            if sum < min_sum {\n                min_sum = sum;\n\
    \            }\n            i -= 1;\n            j -= 1;\n        }\n    }\n\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgyn3z_q3.rs:19:22\n   |\n\
    19 |             if sum < min_sum {\n   |                      ^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n19 |             if sum\
    \ < min_sum.try_into().unwrap() {\n   |                             ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgyn3z_q3.rs:20:27\n   |\n7  |\
    \     let mut min_sum = nums.len();\n   |                       ---------- expected\
    \ due to this value\n...\n20 |                 min_sum = sum;\n   |          \
    \                 ^^^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgyn3z_q3.rs:27:5\n   |\n6  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n27 |     min_sum\n   |     ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n27 |     min_sum.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0]\n    for i in 1..nums.len() {\n  \
    \      let x = nums[i] - nums[i - 1]\n        min_sum = if x < min_sum { x } else\
    \ { min_sum }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `for`\n --> /tmp/tmpu0dddmbn.rs:7:30\n\
    \  |\n7 |     let mut min_sum = nums[0]\n  |                              ^ help:\
    \ add `;` here\n8 |     for i in 1..nums.len() {\n  |     --- unexpected token\n\
    \nerror: expected `;`, found `min_sum`\n  --> /tmp/tmpu0dddmbn.rs:9:38\n   |\n\
    9  |         let x = nums[i] - nums[i - 1]\n   |                             \
    \         ^ help: add `;` here\n10 |         min_sum = if x < min_sum { x } else\
    \ { min_sum }\n   |         ------- unexpected token\n\nerror: aborting due to\
    \ 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums.iter()\n        .enumerate()\n        .filter(|(i, _)|\
    \ i < nums.len())\n        .map(|(i, _)| nums[i])\n        .fold(0, |mut sum,\
    \ num| sum + num)\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n   \
    \ assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpekh0pm5z.rs:9:30\n  |\n9 |\
    \         .filter(|(i, _)| i < nums.len())\n  |                              ^^^^^^^^^^\n\
    \  |                              |\n  |                              expected\
    \ `&usize`, found `usize`\n  |                              help: consider borrowing\
    \ here: `&nums.len()`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = i32::MAX;\n    for &num in nums.iter().rev()\
    \ {\n        min_sum = if min_sum > num { *min_sum - num }\n        else { *min_sum\
    \ + num }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6r850g7g.rs:9:32\n  |\n9 |\
    \         min_sum = if min_sum > num { *min_sum - num }\n  |                 \
    \               ^^^ expected `i32`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to an `i32` and panic if the converted value doesn't fit\n  |\n9\
    \ |         min_sum = if min_sum > num.try_into().unwrap() { *min_sum - num }\n\
    \  |                                   ++++++++++++++++++++\n\nerror[E0614]: type\
    \ `i32` cannot be dereferenced\n --> /tmp/tmp6r850g7g.rs:9:38\n  |\n9 |      \
    \   min_sum = if min_sum > num { *min_sum - num }\n  |                       \
    \               ^^^^^^^^\n\nerror[E0614]: type `i32` cannot be dereferenced\n\
    \  --> /tmp/tmp6r850g7g.rs:10:16\n   |\n10 |         else { *min_sum + num }\n\
    \   |                ^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6r850g7g.rs:12:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    12 |     min_sum\n   |     ^^^^^^^ expected `isize`, found `i32`\n   |\nhelp:\
    \ you can convert an `i32` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |     min_sum.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums\n        .iter()\n        .fold(0, |accum, i| accum.min(&i\
    \ + &i))\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `&&isize` to `&&isize`\n --> /tmp/tmpb1zkvwaf.rs:9:42\n\
    \  |\n9 |         .fold(0, |accum, i| accum.min(&i + &i))\n  |               \
    \                        -- ^ -- &&isize\n  |                                \
    \       |\n  |                                       &&isize\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums.reduce::<isize>(|acc, n| acc + n);\n\
    \    for &n in nums.iter().rev() {\n        min_sum = std::cmp::min(min_sum, n);\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmppci_j0au.rs:7:28\n\
    \    |\n7   |       let mut min_sum = nums.reduce::<isize>(|acc, n| acc + n);\n\
    \    |                              ^^^^^^ `Vec<isize>` is not an iterator\n \
    \   |\n    = note: the following trait bounds were not satisfied:\n          \
    \  `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sofar = nums[0] as isize;\n    for i in 1..nums.len()\
    \ {\n        if nums[i] > nums[i - 1].min(nums[i - 1] + sofar) {\n           \
    \ sofar = nums[i];\n        } else {\n            sofar += nums[i - 1];\n    \
    \    }\n    }\n    sofar\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpjjvtyb0x.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = 0;\n\n    for i in 0..nums.len() {\n        sum\
    \ += nums[i];\n    }\n\n    if sum == 0 { return 0; }\n\n    let mut min_sum =\
    \ nums[0];\n\n    for i in 1..nums.len() {\n        min_sum = min(min_sum + nums[i],\
    \ sum);\n    }\n\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpwy19u0uq.rs:18:19\n\
    \   |\n18 |         min_sum = min(min_sum + nums[i], sum);\n   |             \
    \      ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main`\
    \ defined here\n   |\nhelp: a function with a similar name exists\n   |\n18 |\
    \         min_sum = main(min_sum + nums[i], sum);\n   |                   ~~~~\n\
    help: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // We are guaranteed that there are at least one element in\
    \ nums since we will\n    // only enter the first loop\n    let mut min_sum =\
    \ nums[0];\n    for num in nums.iter() {\n        // If the current number is\
    \ the min for that sub array\n        min_sum = min(min_sum + num, num);\n   \
    \ }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp31gglwg8.rs:12:19\n\
    \   |\n12 |         min_sum = min(min_sum + num, num);\n   |                 \
    \  ^^^\n...\n17 | fn main() {\n   | --------- similarly named function `main`\
    \ defined here\n   |\nhelp: a function with a similar name exists\n   |\n12 |\
    \         min_sum = main(min_sum + num, num);\n   |                   ~~~~\nhelp:\
    \ consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = i32::MAX;\n\n    for num in nums {\n        sum\
    \ += num;\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj1y3orex.rs:10:16\n   |\n\
    10 |         sum += num;\n   |                ^^^ expected `i32`, found `isize`\n\
    \nerror[E0277]: cannot add-assign `isize` to `i32`\n  --> /tmp/tmpj1y3orex.rs:10:13\n\
    \   |\n10 |         sum += num;\n   |             ^^ no implementation for `i32\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `i32`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj1y3orex.rs:13:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    13 |     sum\n   |     ^^^ expected `isize`, found `i32`\n   |\nhelp: you can\
    \ convert an `i32` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n13 |     sum.try_into().unwrap()\n   |        ++++++++++++++++++++\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = i32::MAX;\n\n    for i in (0..nums.len()).rev()\
    \ {\n        min_sum = min_sum + nums[i];\n    }\n\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx7vtqpxi.rs:10:29\n   |\n\
    10 |         min_sum = min_sum + nums[i];\n   |                             ^^^^^^^\
    \ expected `i32`, found `isize`\n\nerror[E0277]: cannot add `isize` to `i32`\n\
    \  --> /tmp/tmpx7vtqpxi.rs:10:27\n   |\n10 |         min_sum = min_sum + nums[i];\n\
    \   |                           ^ no implementation for `i32 + isize`\n   |\n\
    \   = help: the trait `Add<isize>` is not implemented for `i32`\n   = help: the\
    \ following other types implement trait `Add<Rhs>`:\n             <&'a f32 as\
    \ Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n\
    \             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n    \
    \         <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n          \
    \   <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpx7vtqpxi.rs:13:5\n   |\n6  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n13 |     min_sum\n   |     ^^^^^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n13 |     min_sum.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0];\n    let mut min_value = nums[0];\n\
    \n    for n in nums.iter() {\n        if n == min_value {\n            continue;\n\
    \        }\n        let sum = min_sum + n;\n        if sum < min_value {\n   \
    \         min_value = sum;\n            min_sum = n;\n        } else {\n     \
    \       min_sum = sum;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp6s2z58er.rs:11:14\n\
    \   |\n11 |         if n == min_value {\n   |              ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp6s2z58er.rs:17:23\n   |\n7  |     let mut min_sum = nums[0];\n   | \
    \                      ------- expected due to this value\n...\n17 |         \
    \    min_sum = n;\n   |                       ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n17 |             min_sum\
    \ = *n;\n   |                       +\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0] as isize;\n    let mut min_sub_array\
    \ = Vec::new();\n    for n in nums.iter() {\n        let (sub_sum, sub_array)\
    \ = min_sub_array.pop().unwrap();\n        if sub_sum + n < min_sum {\n      \
    \      min_sum = sub_sum + n;\n            min_sub_array = sub_array.push((n,\
    \ Vec::new()));\n        } else if sub_sum + n == min_sum {\n            sub_array.push((n,\
    \ Vec::new()));\n        }\n    }\n    min_sub_array\n        .iter()\n      \
    \  .fold(min_sum, (min, vec) => {\n            let (sub_sum, sub_array) = vec.0;\n\
    \            let cur_sum = sub_sum + min;\n            if cur_sum < min {\n  \
    \              (cur_sum, sub_array)\n            } else {\n                let\
    \ new_vec =\n                    sub_array\n                        .iter()\n\
    \                        .filter(|(n, vec2)| n >= min && n < sub_sum)\n      \
    \                  .map(|(n, vec2)| (n + min, n + min))\n                    \
    \    .collect();\n                (cur_sum, new_vec)\n            }\n        })\n\
    \        .1\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n\
    \  --> /tmp/tmpbyfzm9y0.rs:20:35\n   |\n20 |         .fold(min_sum, (min, vec)\
    \ => {\n   |                                   ^^ expected one of `)`, `,`, `.`,\
    \ `?`, or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    use std::cmp::Ordering;\n    use std::cmp::Ordering::{Equal,\
    \ Greater};\n    use std::collections::HashSet;\n    let mut num_set: HashSet<isize>\
    \ = nums.clone().into_iter().collect();\n    let mut min_sum = std::i32::MAX;\n\
    \    let mut min_sum_pos = 0;\n    for num in &nums {\n        if let Some(pos)\
    \ = num_set.iter().position(|x| x == num) {\n            num_set.insert(num);\n\
    \            if pos == min_sum_pos {\n                min_sum += num;\n      \
    \      } else {\n                min_sum = std::i32::MAX;\n                min_sum_pos\
    \ = 0;\n            }\n        } else {\n            num_set.insert(num);\n  \
    \      }\n    }\n    if min_sum_pos < num_set.len() {\n        min_sum_pos = 0;\n\
    \        for num in &nums {\n            if let Some(pos) = num_set.iter().position(|x|\
    \ x == num) {\n                if pos == min_sum_pos {\n                    min_sum\
    \ += num;\n                } else {\n                    min_sum -= num;\n   \
    \             }\n            }\n        }\n    }\n    if min_sum == std::i32::MAX\
    \ {\n        return std::i32::MAX;\n    }\n    min_sum\n}\n\nfn main() {\n   \
    \ let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2,\
    \ 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering`\n --> /tmp/tmpv3crzayz.rs:7:9\n\
    \  |\n7 |     use std::cmp::Ordering;\n  |         ^^^^^^^^^^^^^^^^^^\n  |\n \
    \ = note: `#[warn(unused_imports)]` on by default\n\nwarning: unused imports:\
    \ `Equal`, `Greater`\n --> /tmp/tmpv3crzayz.rs:8:30\n  |\n8 |     use std::cmp::Ordering::{Equal,\
    \ Greater};\n  |                              ^^^^^  ^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpv3crzayz.rs:15:28\n   |\n15 |             num_set.insert(num);\n\
    \   |                            ^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n15 |             num_set.insert(*num);\n\
    \   |                            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv3crzayz.rs:17:28\n\
    \   |\n17 |                 min_sum += num;\n   |                            ^^^\
    \ expected `i32`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv3crzayz.rs:23:28\n\
    \   |\n23 |             num_set.insert(num);\n   |                           \
    \ ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n23 |             num_set.insert(*num);\n   |                 \
    \           +\n\nerror[E0277]: cannot add-assign `&isize` to `i32`\n  --> /tmp/tmpv3crzayz.rs:17:25\n\
    \   |\n17 |                 min_sum += num;\n   |                         ^^ no\
    \ implementation for `i32 += &isize`\n   |\n   = help: the trait `AddAssign<&isize>`\
    \ is not implemented for `i32`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv3crzayz.rs:31:32\n\
    \   |\n31 |                     min_sum += num;\n   |                        \
    \        ^^^ expected `i32`, found `isize`\n\nerror[E0277]: cannot add-assign\
    \ `&isize` to `i32`\n  --> /tmp/tmpv3crzayz.rs:"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum: isize = 0;\n    for num in nums {\n        if num\
    \ < 0 {\n            sum += num;\n        } else {\n            sum += num + sum;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `156`,\n right: `1`', /tmp/tmptj8ihua3.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    use std::cmp::min;\n    let mut min_sum: isize = nums[0];\n\n\
    \    for i in nums.iter().skip(1) {\n        let sum = i + min_sum;\n        min_sum\
    \ = min(min_sum, sum);\n    }\n\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmphn8c45tn.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut min_so_far =\
    \ std::isize::MAX;\n\n    for (i, &num) in nums.iter().enumerate() {\n       \
    \ if min_so_far == std::isize::MAX {\n            min_so_far = num;\n        \
    \    continue;\n        }\n\n        if num > min_so_far {\n            continue;\n\
    \        }\n\n        let sub_sum = min_so_far + num;\n        if sub_sum < min_sum\
    \ {\n            min_sum = sub_sum;\n        }\n    }\n\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmparggbg96.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // TODO\n    return 0;\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpwbxy44gc.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums\n        .iter()\n        .clone()\n        .windows(2)\n\
    \        .fold(\n            vec![],\n            |mut sub, num| {\n         \
    \       sub.push(*num);\n                *num\n            },\n        )\n   \
    \     .iter()\n        .sum()\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `windows` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp_2t6ao2b.rs:10:10\n   |\n10 |         .windows(2)\n\
    \   |          ^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum_of_arrays = nums.iter().cloned().sum();\n    let\
    \ mut min_sum_of_arrays = nums.iter().cloned().sum();\n    for num in nums {\n\
    \        min_sum_of_arrays = num - min_sum_of_arrays;\n        sum_of_arrays +=\
    \ num;\n    }\n    min_sum_of_arrays += sum_of_arrays;\n    min_sum_of_arrays\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpxvz_8qln.rs:7:9\n \
    \ |\n7 |     let mut sum_of_arrays = nums.iter().cloned().sum();\n  |        \
    \ ^^^^^^^^^^^^^^^^^ consider giving `sum_of_arrays` a type\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = std::i32::MAX;\n    let mut min_sum = 0;\n   \
    \ let mut nums_copy = nums;\n    while nums_copy.len() > 0 {\n        let mut\
    \ curr_sum = nums_copy.iter().sum();\n        while curr_sum > min {\n       \
    \     let mut min_pos = nums_copy.len();\n            while min_pos > 0 && curr_sum\
    \ >= nums_copy[min_pos - 1] {\n                min_pos -= 1;\n            }\n\
    \            if min_pos == nums_copy.len() {\n                curr_sum -= nums_copy[min_pos];\n\
    \            } else {\n                curr_sum += nums_copy[min_pos];\n     \
    \           min_pos -= 1;\n            }\n            min = std::i32::MAX;\n \
    \           for curr_i in 0..=min_pos {\n                let mut next_min_pos\
    \ = curr_pos + 1;\n                while next_min_pos < nums_copy.len() && nums_copy[next_min_pos]\
    \ == curr_i {\n                    next_min_pos += 1;\n                }\n   \
    \             if next_min_pos == nums_copy.len() {\n                    curr_sum\
    \ -= nums_copy[next_min_pos];\n                } else {\n                    curr_sum\
    \ += nums_copy[next_min_pos];\n                    min = std::i32::MAX if curr_sum\
    \ < min {\n                        min = curr_sum;\n                    } else\
    \ {\n                        break;\n                    }\n                }\n\
    \            }\n        }\n        min_sum = std::i32::MAX if min_sum > min {\n\
    \            min_sum = min\n        } else {\n            min_sum = min;\n   \
    \     }\n        nums_copy = nums_copy.remove(0);\n    }\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found keyword `if`\n  --> /tmp/tmp9vk38yfi.rs:33:41\n   |\n33 |            \
    \         min = std::i32::MAX if curr_sum < min {\n   |                      \
    \                   ^^ expected one of 8 possible tokens\n\nerror: expected one\
    \ of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `if`\n\
    \  --> /tmp/tmp9vk38yfi.rs:41:33\n   |\n41 |         min_sum = std::i32::MAX if\
    \ min_sum > min {\n   |                                 ^^ expected one of 8 possible\
    \ tokens\n\nerror[E0425]: cannot find value `curr_pos` in this scope\n  --> /tmp/tmp9vk38yfi.rs:25:40\n\
    \   |\n25 |                 let mut next_min_pos = curr_pos + 1;\n   |       \
    \                                 ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums\n        .iter()\n        .enumerate()\n        .fold(0,\
    \ |acc, (idx, element)| {\n            let element = element.to_owned();\n   \
    \         acc += if idx == 0 || element > nums[idx-1] {\n                element\n\
    \            } else {\n                nums[idx-1]\n            };\n         \
    \   acc\n        })\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `acc`\n  --> /tmp/tmpnmfi7ja3.rs:12:13\n\
    \   |\n10 |           .fold(0, |acc, (idx, element)| {\n   |                 \
    \    --- help: consider making this binding mutable: `mut acc`\n11 |         \
    \      let element = element.to_owned();\n12 | /             acc += if idx ==\
    \ 0 || element > nums[idx-1] {\n13 | |                 element\n14 | |       \
    \      } else {\n15 | |                 nums[idx-1]\n16 | |             };\n \
    \  | |_____________^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::i32::MAX;\n    let mut sub = Vec::with_capacity(nums.len());\n\
    \    let mut last_seen = std::i32::MAX;\n    for n in nums {\n        sub.push(-n);\n\
    \        last_seen -= n;\n        min_sum = std::min(min_sum, sub[sub.len()-1]\
    \ + last_seen);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in crate `std`\n  --> /tmp/tmpag7y6er9.rs:13:24\n\
    \   |\n13 |         min_sum = std::min(min_sum, sub[sub.len()-1] + last_seen);\n\
    \   |                        ^^^ not found in `std`\n   |\nhelp: consider importing\
    \ this function\n   |\n1  | use std::cmp::min;\n   |\nhelp: if you import `min`,\
    \ refer to it directly\n   |\n13 -         min_sum = std::min(min_sum, sub[sub.len()-1]\
    \ + last_seen);\n13 +         min_sum = min(min_sum, sub[sub.len()-1] + last_seen);\n\
    \   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpag7y6er9.rs:12:22\n  \
    \ |\n12 |         last_seen -= n;\n   |                      ^ expected `i32`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract-assign `isize` from `i32`\n \
    \ --> /tmp/tmpag7y6er9.rs:12:19\n   |\n12 |         last_seen -= n;\n   |    \
    \               ^^ no implementation for `i32 -= isize`\n   |\n   = help: the\
    \ trait `SubAssign<isize>` is not implemented for `i32`\n   = help: the following\
    \ other types implement trait `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n\
    \             <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n    \
    \         <f64 as SubAssign>\n             <i128 as SubAssign<&i128>>\n      \
    \       <i128 as SubAssign>\n             <i16 as SubAssign<&i16>>\n         \
    \    <i16 as SubAssign>\n           and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpag7y6er9.rs:13:56\n   |\n13 |         min_sum = std::min(min_sum,\
    \ sub[sub.len()-1] + last_seen);\n   |                                       \
    \                 ^^^^^^^^^ expected `isize`, found `i32`\n\nerror[E0277]: cannot\
    \ add `i32` to `isize`\n  --> /tmp/tmpag7y6er9.rs:13:37\n   |\n13 |         min_sum\
    \ = std::min(min_sum, sub[sub.len()-1] + last_seen);\n   |                   --------\
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `isize + i32`\n\
    \   |                   |\n   |                   required by a bound introduced\
    \ by this call\n   |\n   = help: the trait `Add<i32>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums.iter().fold(isize::MAX as isize, |sum,\
    \ v| {\n        v > 0 ? sum + v : sum\n    });\n    let mut min_sub = nums.iter().skip(1).min_by_key(|v|\
    \ v - min_sum);\n    if min_sub.key() > min_sum {\n        min_sub = Some(min_sub.unwrap());\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `sum`\n\
    \ --> /tmp/tmpwll4qz3c.rs:8:17\n  |\n8 |         v > 0 ? sum + v : sum\n  |  \
    \               ^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0369]:\
    \ cannot subtract `isize` from `&&isize`\n  --> /tmp/tmpwll4qz3c.rs:10:60\n  \
    \ |\n10 |     let mut min_sub = nums.iter().skip(1).min_by_key(|v| v - min_sum);\n\
    \   |                                                          - ^ ------- isize\n\
    \   |                                                          |\n   |       \
    \                                                   &&isize\n   |\nhelp: `-` can\
    \ be used on `isize`, you can dereference `v`\n   |\n10 |     let mut min_sub\
    \ = nums.iter().skip(1).min_by_key(|v| *v - min_sum);\n   |                  \
    \                                        +\n\nerror[E0599]: no method named `key`\
    \ found for enum `Option` in the current scope\n  --> /tmp/tmpwll4qz3c.rs:11:16\n\
    \   |\n11 |     if min_sub.key() > min_sum {\n   |                ^^^ method not\
    \ found in `Option<&isize>`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0369, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    use std::cmp::Ordering;\n    let mut sum = 0;\n    for num in\
    \ nums.iter() {\n        if num > 0 {\n            sum += num;\n        }\n  \
    \  }\n    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering`\n --> /tmp/tmpqqbzexx2.rs:7:9\n\
    \  |\n7 |     use std::cmp::Ordering;\n  |         ^^^^^^^^^^^^^^^^^^\n  |\n \
    \ = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqqbzexx2.rs:10:18\n   |\n10 |         if num > 0 {\n  \
    \ |                  ^\n   |                  |\n   |                  expected\
    \ `&isize`, found integer\n   |                  help: consider borrowing here:\
    \ `&0`\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0]\n    for num in nums.iter() {\n  \
    \      if num < min_sum {\n            min_sum = num\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `for`\n --> /tmp/tmposjoot3n.rs:7:30\n\
    \  |\n7 |     let mut min_sum = nums[0]\n  |                              ^ help:\
    \ add `;` here\n8 |     for num in nums.iter() {\n  |     --- unexpected token\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmposjoot3n.rs:9:18\n  |\n9 |    \
    \     if num < min_sum {\n  |                  ^^^^^^^\n  |                  |\n\
    \  |                  expected `&isize`, found `isize`\n  |                  help:\
    \ consider borrowing here: `&min_sum`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmposjoot3n.rs:10:23\n   |\n7  |     let mut min_sum = nums[0]\n   |  \
    \                     ------- expected due to this value\n...\n10 |          \
    \   min_sum = num\n   |                       ^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             min_sum\
    \ = *num\n   |                       +\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // Find the length of every sub array\n    let mut lens: Vec<isize>\
    \ = Vec::new();\n    for i in 0..nums.len() {\n        if i > 0 {\n          \
    \  lens.push((nums[i] - nums[i - 1]).abs());\n        }\n    }\n    // Sort the\
    \ array based on the length\n    lens.sort_unstable();\n\n    // Find the min\
    \ sum of the sub array\n    let mut min_sum = nums[0] as isize;\n    for i in\
    \ lens.iter() {\n        if min_sum < i {\n            min_sum = i;\n        }\n\
    \    }\n\n    // Return the min sum\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpneajo8e4.rs:20:22\n   |\n\
    20 |         if min_sum < i {\n   |                      ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |        \
    \ if min_sum < *i {\n   |                      +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpneajo8e4.rs:21:23\n   |\n18 |     let mut min_sum = nums[0] as\
    \ isize;\n   |                       ---------------- expected due to this value\n\
    ...\n21 |             min_sum = i;\n   |                       ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |  \
    \           min_sum = *i;\n   |                       +\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n    for i in\
    \ nums.iter() {\n        min_sum = min_sum - i;\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdy3cy6ui.rs:9:19\n  |\n7 |\
    \     let mut min_sum = nums.iter().min().unwrap();\n  |                     \
    \  -------------------------- expected due to this value\n8 |     for i in nums.iter()\
    \ {\n9 |         min_sum = min_sum - i;\n  |                   ^^^^^^^^^^^\n \
    \ |                   |\n  |                   expected `&isize`, found `isize`\n\
    \  |                   help: consider borrowing here: `&(min_sum - i)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdy3cy6ui.rs:11:5\n   |\n6  | fn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n   |                                        ----- expected\
    \ `isize` because of return type\n...\n11 |     min_sum\n   |     ^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    11 |     *min_sum\n   |     +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    debugln!(\"min sub array sum, {:?}\", nums);\n\n    // Sort\
    \ the input array\n    let mut nums_sorted = nums.iter().cloned().sorted();\n\
    \    let mut min_sum: isize = std::i32::MAX;\n    for i in 0..nums_sorted.len()\
    \ - 1 {\n        if i > 0 && nums_sorted[i] == nums_sorted[i - 1] {\n        \
    \    continue;\n        }\n\n        // Find the min sum between the current sum\
    \ and the previous sum\n        let current_sum = nums_sorted.iter().sum();\n\
    \        if current_sum > min_sum {\n            min_sum = current_sum;\n    \
    \    }\n    }\n\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `debugln` in this scope\n --> /tmp/tmpdd6352g2.rs:7:5\n\
    \  |\n7 |     debugln!(\"min sub array sum, {:?}\", nums);\n  |     ^^^^^^^\n\n\
    error[E0599]: no method named `sorted` found for struct `Cloned` in the current\
    \ scope\n  --> /tmp/tmpdd6352g2.rs:10:48\n   |\n10 |     let mut nums_sorted =\
    \ nums.iter().cloned().sorted();\n   |                                       \
    \         ^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpdd6352g2.rs:11:30\n   |\n11 |  \
    \   let mut min_sum: isize = std::i32::MAX;\n   |                      ----- \
    \  ^^^^^^^^^^^^^ expected `isize`, found `i32`\n   |                      |\n\
    \   |                      expected due to this\n   |\nhelp: you can convert an\
    \ `i32` to an `isize` and panic if the converted value doesn't fit\n   |\n11 |\
    \     let mut min_sum: isize = std::i32::MAX.try_into().unwrap();\n   |      \
    \                                     ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    use std::cmp::Ordering;\n    let mut min_sum = nums[0] as isize;\n\
    \    for i in 1..nums.len() {\n        if nums[i] < min_sum {\n            min_sum\
    \ = nums[i];\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `-6`', /tmp/tmptq67wxt9.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min: isize = nums[0] as isize;\n    let mut min_idx:\
    \ usize = 0;\n    let mut idx = 1;\n    while idx < nums.len() {\n        let\
    \ mut min_value: isize = nums[idx];\n        let mut min_idx = idx;\n        while\
    \ min_idx < nums.len() && nums[min_idx] >= min_value {\n            min_value\
    \ += nums[min_idx];\n            min_idx += 1;\n        }\n        if min_value\
    \ >= min {\n            min = min_value;\n            min_idx = idx;\n       \
    \ }\n        idx += 1;\n    }\n    min\n}\n\nfn main() {\n    let candidate =\
    \ minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `1`', /tmp/tmpuwwt9lmv.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut cursum = 0;\n    let mut minsum = (nums.len() * nums.len())\
    \ as isize;\n    for i in 0..(nums.len() - 1) {\n        for j in (i + 1)..(nums.len())\
    \ {\n            cursum += nums[i];\n            if cursum < minsum {\n      \
    \          minsum = cursum;\n            }\n        }\n    }\n    minsum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp9cbwljpz.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut result = nums[0] as isize;\n    for &num in nums {\n\
    \        result += num;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprxicmmbi.rs:8:9\n  |\n8 |\
    \     for &num in nums {\n  |         ^^^^    ---- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `num`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ min_so_far = nums[0];\n    let mut min_sub = nums[0];\n\n    for i in 1..nums.len()\
    \ {\n        if min_sub > nums[i] {\n            min_sub = nums[i];\n        }\n\
    \n        if min_sub < nums[i] && (min_sub > min_so_far || nums[i] < min_sub)\
    \ {\n            min_sub = min_so_far;\n            min_so_far = nums[i];\n  \
    \      }\n    }\n\n    min_sub\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `-6`', /tmp/tmptbdxczh2.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        0\n    }\n    else {\n       \
    \ helper(nums, 0, nums.len() - 1)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `helper` in this scope\n  --> /tmp/tmpycr62k8k.rs:11:9\n\
    \   |\n11 |         helper(nums, 0, nums.len() - 1)\n   |         ^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = nums.clone();\n    let mut sum = 0;\n    for n\
    \ in nums {\n        if n != 0 {\n            let m = sum + n;\n            min\
    \ = if m < min { m } else { min };\n            sum += n;\n        }\n    }\n\
    \    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9rbuiss_.rs:12:26\n   |\n\
    12 |             min = if m < min { m } else { min };\n   |                  \
    \        ^^^ expected `isize`, found struct `Vec`\n   |\n   = note: expected type\
    \ `isize`\n            found struct `Vec<isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9rbuiss_.rs:12:32\n   |\n12 |             min = if m < min { m\
    \ } else { min };\n   |                                ^ expected struct `Vec`,\
    \ found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \   found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9rbuiss_.rs:16:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    16 |     min\n   |     ^^^ expected `isize`, found struct `Vec`\n   |\n   = note:\
    \ expected type `isize`\n            found struct `Vec<isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums.iter().reduce(0);\n    min_sum = if min_sum\
    \ > 0 {\n        min_sum + nums.iter().filter(|&x| x > 0).sum()\n    } else {\n\
    \        0\n    };\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(&isize, &isize)>` closure, found `{integer}`\n\
    \    --> /tmp/tmp2d30m0_i.rs:7:42\n     |\n7    |     let mut min_sum = nums.iter().reduce(0);\n\
    \     |                                   ------ ^ expected an `FnMut<(&isize,\
    \ &isize)>` closure, found `{integer}`\n     |                               \
    \    |\n     |                                   required by a bound introduced\
    \ by this call\n     |\n     = help: the trait `FnMut<(&isize, &isize)>` is not\
    \ implemented for `{integer}`\nnote: required by a bound in `reduce`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp2d30m0_i.rs:8:28\n  |\n8 |     min_sum = if min_sum\
    \ > 0 {\n  |                            ^ expected enum `Option`, found integer\n\
    \  |\n  = note: expected enum `Option<&isize>`\n             found type `{integer}`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp2d30m0_i.rs:9:47\n  |\n9 |    \
    \     min_sum + nums.iter().filter(|&x| x > 0).sum()\n  |                    \
    \                           ^\n  |                                           \
    \    |\n  |                                               expected `&isize`, found\
    \ integer\n  |                                               help: consider borrowing\
    \ here: `&0`\n\nerror[E0369]: cannot add `_` to `Option<&isize>`\n --> /tmp/tmp2d30m0_i.rs:9:17\n\
    \  |\n9 |         min_sum + nums.iter().filter(|&x| x > 0).sum()\n  |        \
    \ ------- ^ ------------------------------------ _\n  |         |\n  |       \
    \  Option<&isize>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2d30m0_i.rs:11:9\n\
    \   |\n11 |         0\n   |         ^ expected enum `Option`, found integer\n\
    \   |\n   = note: expected enum `Option<&isize>`\n              found type `{integer}`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2d30m0_i.rs:13:5\n   |\n6  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n13 |     min_sum\n\
    \   |     ^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected\
    \ type `isize`\n              found enum `Option<&isize>`\n\nerror: aborting due\
    \ to "
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // TODO: implement the solution\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7g_87sv_.rs:6:40\n  |\n6 |\
    \ fn minSubArraySum(nums: Vec<isize>) -> isize {\n  |    --------------      \
    \                ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = 0;\n    for x in nums.iter() {\n        sum +=\
    \ x;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpal5lqjnk.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums.iter().min_by_key(|num| {\n        nums.iter().enumerate().filter(|(_,\
    \ index)| nums[index] == num).map(|(_, num)| num).sum()\n    })\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&&isize`\n --> /tmp/tmp5oryvlxr.rs:8:53\n\
    \  |\n8 |         nums.iter().enumerate().filter(|(_, index)| nums[index] == num).map(|(_,\
    \ num)| num).sum()\n  |                                                     ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `&&isize`\n  = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of\
    \ the requirements on the impl of `Index<&&isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp5oryvlxr.rs:7:5\n  |\n6 |   fn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n  |                                          ----- expected\
    \ `isize` because of return type\n7 | /     nums.iter().min_by_key(|num| {\n8\
    \ | |         nums.iter().enumerate().filter(|(_, index)| nums[index] == num).map(|(_,\
    \ num)| num).sum()\n9 | |     })\n  | |______^ expected `isize`, found enum `Option`\n\
    \  |\n  = note: expected type `isize`\n             found enum `Option<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in 0..nums.len() {\n        sum\
    \ += nums[i];\n    }\n    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmp3bhc31nk.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut res = nums.iter().min().unwrap();\n    let mut nums_iter\
    \ = nums.iter();\n\n    if let Some(num) = nums_iter.next() {\n        res = res.checked_add(num).unwrap();\n\
    \    }\n\n    while nums_iter.next() != Some(nums.last()) {\n        res = res.checked_add(nums_iter.next_back().unwrap()).unwrap();\n\
    \    }\n\n    res\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n   \
    \ assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuji2my58.rs:11:31\n   |\n\
    11 |         res = res.checked_add(num).unwrap();\n   |                      \
    \         ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n11 |         res = res.checked_add(*num).unwrap();\n   | \
    \                              +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuji2my58.rs:11:15\n\
    \   |\n7  |     let mut res = nums.iter().min().unwrap();\n   |              \
    \     -------------------------- expected due to this value\n...\n11 |       \
    \  res = res.checked_add(num).unwrap();\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |               |\n   |               expected `&isize`, found `isize`\n \
    \  |               help: consider borrowing here: `&res.checked_add(num).unwrap()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpuji2my58.rs:14:36\n   |\n14 |\
    \     while nums_iter.next() != Some(nums.last()) {\n   |                    \
    \                ^^^^^^^^^^^ expected `&isize`, found enum `Option`\n   |\n  \
    \ = note: expected reference `&isize`\n                   found enum `Option<&isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpuji2my58.rs:15:31\n   |\n15 |\
    \         res = res.checked_add(nums_iter.next_back().unwrap()).unwrap();\n  \
    \ |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |  \
    \       res = res.checked_add(*nums_iter.next_back().unwrap()).unwrap();\n   |\
    \                               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuji2my58.rs:15:15\n\
    \   |\n7  |     let mut res = nums.iter().min().unwrap();\n   |              \
    \     -------------------------- expected due to this value\n...\n15 |       \
    \  res = res.checked_add(nums_iter.next_back().unwrap()).unwrap();\n   |     \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |    \
    \           |\n   |               expected `&isize`, found `isize`\n   |     \
    \          help: consider borrowing here: `&res.checked_add(nums_iter.next_back().unwrap()).unwrap()`\n\
    \nerror[E030"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::i32::MAX;\n    for n in nums {\n    \
    \    min_sum = min_sum.min(&n).unwrap();\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpueh87ijw.rs:9:31\n  |\n9 |\
    \         min_sum = min_sum.min(&n).unwrap();\n  |                           \
    \    ^^ expected `i32`, found `&isize`\n\nerror[E0599]: no method named `unwrap`\
    \ found for type `i32` in the current scope\n --> /tmp/tmpueh87ijw.rs:9:35\n \
    \ |\n9 |         min_sum = min_sum.min(&n).unwrap();\n  |                    \
    \               ^^^^^^ method not found in `i32`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpueh87ijw.rs:11:5\n   |\n6  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n11 |     min_sum\n   |     ^^^^^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n11 |     min_sum.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut minimum = nums.iter().fold(0, |s, n| s + n);\n    let\
    \ mut sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n      \
    \  minimum = min(minimum, sum);\n    }\n    minimum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp9i03qoga.rs:11:19\n\
    \   |\n11 |         minimum = min(minimum, sum);\n   |                   ^^^\n\
    ...\n16 | fn main() {\n   | --------- similarly named function `main` defined\
    \ here\n   |\nhelp: a function with a similar name exists\n   |\n11 |        \
    \ minimum = main(minimum, sum);\n   |                   ~~~~\nhelp: consider importing\
    \ this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = isize::MAX;\n    for i in nums.iter() {\n    \
    \    min = min(min, i + 1);\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0618]: expected function, found `isize`\n --> /tmp/tmp1y6fwm40.rs:9:15\n\
    \  |\n7 |     let mut min = isize::MAX;\n  |         ------- `min` has type `isize`\n\
    8 |     for i in nums.iter() {\n9 |         min = min(min, i + 1);\n  |      \
    \         ^^^------------\n  |               |\n  |               call expression\
    \ requires function\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0618`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    loop {\n        let mut min_sum = nums.iter().fold(0, |a, b|\
    \ {\n            a > b ? a : b\n        });\n        for num in nums.iter_mut()\
    \ {\n            loop {\n                if num < min_sum {\n                \
    \    min_sum = num;\n                }\n                if num == min_sum {\n\
    \                    break;\n                }\n                num -= min_sum;\n\
    \            }\n        }\n        if min_sum == 0 {\n            return 0;\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n   \
    \ assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `a`\n\
    \ --> /tmp/tmpnpbex0jh.rs:9:21\n  |\n9 |             a > b ? a : b\n  |      \
    \               ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnpbex0jh.rs:13:26\n   |\n13 |              \
    \   if num < min_sum {\n   |                          ^^^^^^^\n   |          \
    \                |\n   |                          expected `&mut isize`, found\
    \ integer\n   |                          help: consider mutably borrowing here:\
    \ `&mut min_sum`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnpbex0jh.rs:14:31\n\
    \   |\n8  |           let mut min_sum = nums.iter().fold(0, |a, b| {\n   |  ___________________________-\n\
    9  | |             a > b ? a : b\n10 | |         });\n   | |__________- expected\
    \ due to this value\n...\n14 |                       min_sum = num;\n   |    \
    \                             ^^^ expected integer, found `&mut isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |                     min_sum\
    \ = *num;\n   |                               +\n\nerror[E0277]: can't compare\
    \ `&mut isize` with `{integer}`\n  --> /tmp/tmpnpbex0jh.rs:16:24\n   |\n16 | \
    \                if num == min_sum {\n   |                        ^^ no implementation\
    \ for `&mut isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&mut isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0368]: binary assignment operation\
    \ `-=` cannot be applied to type `&mut isize`\n  --> /tmp/tmpnpbex0jh.rs:19:17\n\
    \   |\n19 |                 num -= min_sum;\n   |                 ---^^^^^^^^^^^\n\
    \   |                 |\n   |                 cannot use `-=` on type `&mut isize`\n\
    \   |\nhelp: `-=` can be used on `isize`, you can dereference `num`\n   |\n19\
    \ |                 *num -= min_sum;\n   |                 +\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome e"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\n    let mut\
    \ min = nums.clone();\n    let mut min_sum = nums.clone();\n\n    for i in 1..nums.len()\
    \ {\n        let min_sum = min_sum.iter().filter(|&v| v != nums[i]).sum();\n \
    \       if min_sum > min.last() {\n            min = [nums.last().unwrap() + min_sum,\
    \ min_sum.clone()];\n        } else if min_sum < min.last() {\n            min\
    \ = [min.last().unwrap() - min_sum, min_sum.clone()];\n        }\n    }\n\n  \
    \  min[0]\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpyaa0igmu.rs:15:52\n\
    \   |\n15 |         let min_sum = min_sum.iter().filter(|&v| v != nums[i]).sum();\n\
    \   |                                                    ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut max_sum: isize = 0;\n    for num in nums {\n       \
    \ if num > max_sum {\n            max_sum = num;\n        }\n    }\n    for num\
    \ in nums.iter().rev() {\n        let curr_sum = num + max_sum;\n        if curr_sum\
    \ > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    max_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `nums`\n   --> /tmp/tmpqyzs0d8h.rs:13:16\n\
    \    |\n6   | fn minSubArraySum(nums: Vec<isize>) -> isize {\n    |          \
    \         ---- move occurs because `nums` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n7   |     let mut max_sum: isize = 0;\n8   |   \
    \  for num in nums {\n    |                ---- `nums` moved due to this implicit\
    \ call to `.into_iter()`\n...\n13  |     for num in nums.iter().rev() {\n    |\
    \                ^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `nums`\n    = note:\
    \ borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for num in &nums {\n    |                +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = 0;\n    for a in nums {\n        for b in nums.iter().rev()\
    \ {\n            if a == b {\n                continue;\n            }\n     \
    \       sum += (a - b) as isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyrghfizg.rs:10:21\n   |\n\
    10 |             if a == b {\n   |                     ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |        \
    \     if a == *b {\n   |                     +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = nums[0] as isize;\n    for &n in nums {\n\
    \        min_sum = min_sum.min(&n);\n    }\n    min_sum\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5xqhqbu3.rs:8:9\n  |\n8 |\
    \     for &n in nums {\n  |         ^^    ---- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `n`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp5xqhqbu3.rs:9:31\n  |\n9 |         min_sum = min_sum.min(&n);\n\
    \  |                               ^^ expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\nhelp: consider\
    \ removing the borrow\n  |\n9 -         min_sum = min_sum.min(&n);\n9 +      \
    \   min_sum = min_sum.min(n);\n  | \n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = 0;\n    for num in nums {\n        sum += num;\n\
    \    }\n\n    let mut min_sum = std::i32::MAX;\n\n    for num in nums {\n    \
    \    if sum < min_sum {\n            min_sum = sum;\n        }\n        sum -=\
    \ num;\n    }\n\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp8lo_35s.rs:15:18\n   |\n\
    15 |         if sum < min_sum {\n   |                  ^^^^^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n15 |         if sum < min_sum.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpp8lo_35s.rs:16:23\n   |\n12 |     let mut min_sum = std::i32::MAX;\n\
    \   |                       ------------- expected due to this value\n...\n16\
    \ |             min_sum = sum;\n   |                       ^^^ expected `i32`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp8lo_35s.rs:21:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    21 |     min_sum\n   |     ^^^^^^^ expected `isize`, found `i32`\n   |\nhelp:\
    \ you can convert an `i32` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n21 |     min_sum.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums.iter().min_by_key(|i| {\n        nums.iter().filter(|j|\
    \ j == i).count()\n    })\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1kdi3y3n.rs:7:5\n  |\n6 |\
    \   fn minSubArraySum(nums: Vec<isize>) -> isize {\n  |                      \
    \                    ----- expected `isize` because of return type\n7 | /    \
    \ nums.iter().min_by_key(|i| {\n8 | |         nums.iter().filter(|j| j == i).count()\n\
    9 | |     })\n  | |______^ expected `isize`, found enum `Option`\n  |\n  = note:\
    \ expected type `isize`\n             found enum `Option<&isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min_sum = std::cmp::min::<isize>(nums.len(), nums.iter().map(|num|\
    \ nums.iter().filter(|&num| num >= 0).count()).sum());\n    for i in 1..min_sum\
    \ {\n        min_sum = min_sum - nums[min_sum - i];\n    }\n    min_sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnum1sv4r.rs:7:46\n  |\n7 |\
    \     let mut min_sum = std::cmp::min::<isize>(nums.len(), nums.iter().map(|num|\
    \ nums.iter().filter(|&num| num >= 0).count()).sum());\n  |                  \
    \                            ^^^^^^^^^^ expected `isize`, found `usize`\n  |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n  |\n7 |     let mut min_sum = std::cmp::min::<isize>(nums.len().try_into().unwrap(),\
    \ nums.iter().map(|num| nums.iter().filter(|&num| num >= 0).count()).sum());\n\
    \  |                                                        ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpnum1sv4r.rs:7:113\n  |\n7 |   \
    \  let mut min_sum = std::cmp::min::<isize>(nums.len(), nums.iter().map(|num|\
    \ nums.iter().filter(|&num| num >= 0).count()).sum());\n  |                  \
    \                                                                            \
    \                   ^\n  |                                                   \
    \                                                              |\n  |        \
    \                                                                            \
    \                             expected `&isize`, found integer\n  |          \
    \                                                                            \
    \                           help: consider borrowing here: `&0`\n\nerror[E0277]:\
    \ the trait bound `isize: Sum<usize>` is not satisfied\n    --> /tmp/tmpnum1sv4r.rs:7:39\n\
    \     |\n7    |     let mut min_sum = std::cmp::min::<isize>(nums.len(), nums.iter().map(|num|\
    \ nums.iter().filter(|&num| num >= 0).count()).sum());\n     |               \
    \                        ^^^^^ the trait `Sum<usize>` is not implemented for `isize`\n\
    \     |\n     = help: the following other types implement trait `Sum<A>`:\n  \
    \             <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n           \
    \    <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 a"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.len() < 2 {\n        return 0\n    }\n\n    let mut\
    \ current_min = nums.iter().min().unwrap();\n    for &x in nums.iter() {\n   \
    \     current_min = min(current_min, x + current_min);\n    }\n    current_min\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpbhvndm73.rs:13:23\n\
    \   |\n13 |         current_min = min(current_min, x + current_min);\n   |   \
    \                    ^^^\n...\n18 | fn main() {\n   | --------- similarly named\
    \ function `main` defined here\n   |\nhelp: a function with a similar name exists\n\
    \   |\n13 |         current_min = main(current_min, x + current_min);\n   |  \
    \                     ~~~~\nhelp: consider importing this function\n   |\n1  |\
    \ use std::cmp::min;\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbhvndm73.rs:15:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    15 |     current_min\n   |     ^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n15 |     *current_min\n\
    \   |     +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    if nums.is_empty() {\n        0\n    } else {\n        let mut\
    \ min_so_far = nums[0];\n        for i in 1..nums.len() {\n            min_so_far\
    \ = min(min_so_far, nums[i]);\n        }\n        min_so_far\n    }\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpaseh3t10.rs:12:26\n\
    \   |\n12 |             min_so_far = min(min_so_far, nums[i]);\n   |         \
    \                 ^^^\n...\n18 | fn main() {\n   | --------- similarly named function\
    \ `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n\
    12 |             min_so_far = main(min_so_far, nums[i]);\n   |               \
    \           ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums.iter()\n        .windows(2)\n        .map(|&(a, b): (usize,\
    \ usize)| a + b)\n        .sum::<isize>()\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `windows` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpk3rhhwo7.rs:8:10\n  |\n8 |         .windows(2)\n\
    \  |          ^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpk3rhhwo7.rs:9:15\n  |\n9 |         .map(|&(a,\
    \ b): (usize, usize)| a + b)\n  |               ^^^^^^^  -------------- expected\
    \ due to this\n  |               |\n  |               expected tuple, found reference\n\
    \  |\n  = note:  expected tuple `(usize, usize)`\n          found reference `&_`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut s = nums.iter().cloned().collect::<Vec<_>>();\n    s.sort_unstable();\n\
    \    let min_sum = s.iter().cloned().take(s.len()).sum::<isize>();\n    let mut\
    \ min_len = s;\n    min_len.sort_unstable();\n    min_len.rev();\n\n    while\
    \ min_len.len() > 0 {\n        let mut sum = 0;\n        let mut num = 0;\n  \
    \      for n in min_len.iter() {\n            sum += *n;\n            num +=1;\n\
    \        }\n        if sum < min_sum {\n            min_sum = sum;\n         \
    \   min_len = min_len.iter().cloned();\n            min_len.sort_unstable();\n\
    \            min_len.rev();\n        }\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpw2q_knuk.rs:12:13\n\
    \    |\n12  |       min_len.rev();\n    |               ^^^ `Vec<isize>` is not\
    \ an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw2q_knuk.rs:23:23\n\
    \   |\n10 |     let mut min_len = s;\n   |                       - expected due\
    \ to this value\n...\n23 |             min_len = min_len.iter().cloned();\n  \
    \ |                       ^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found\
    \ struct `Cloned`\n   |\n   = note: expected struct `Vec<isize>`\n           \
    \   found struct `Cloned<std::slice::Iter<'_, isize>>`\n\nerror[E0599]: `Vec<isize>`\
    \ is not an iterator\n   --> /tmp/tmpw2q_knuk.rs:25:21\n    |\n25  |         \
    \      min_len.rev();\n    |                       ^^^ `Vec<isize>` is not an\
    \ iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut cur: isize = 0;\n    let mut min_sum = std::i32::MAX;\n\
    \    for &n in nums {\n        cur = std::cmp::min(cur, n);\n        min_sum =\
    \ std::cmp::min(min_sum, cur);\n    }\n    min_sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkov4klvy.rs:9:9\n  |\n9 |\
    \     for &n in nums {\n  |         ^^    ---- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `n`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpkov4klvy.rs:11:42\n   |\n11 |         min_sum = std::cmp::min(min_sum,\
    \ cur);\n   |                                          ^^^ expected `i32`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `i32` and panic if the\
    \ converted value doesn't fit\n   |\n11 |         min_sum = std::cmp::min(min_sum,\
    \ cur.try_into().unwrap());\n   |                                            \
    \ ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkov4klvy.rs:13:5\n\
    \   |\n6  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    13 |     min_sum\n   |     ^^^^^^^ expected `isize`, found `i32`\n   |\nhelp:\
    \ you can convert an `i32` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n13 |     min_sum.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = std::i32::MAX;\n    for num in nums {\n      \
    \  if num < min {\n            min = num;\n        }\n    }\n    min\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx16w4iub.rs:9:18\n  |\n9 |\
    \         if num < min {\n  |                  ^^^ expected `isize`, found `i32`\n\
    \  |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n9 |         if num < min.try_into().unwrap() {\n  |\
    \                     ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpx16w4iub.rs:10:19\n   |\n7  |     let mut min = std::i32::MAX;\n\
    \   |                   ------------- expected due to this value\n...\n10 |  \
    \           min = num;\n   |                   ^^^ expected `i32`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpx16w4iub.rs:13:5\n   |\n6  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n13 |     min\n\
    \   |     ^^^ expected `isize`, found `i32`\n   |\nhelp: you can convert an `i32`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n13 |     min.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // Base case\n    if nums.is_empty() {\n        return 0;\n\
    \    }\n\n    // Compute the sum starting from the first element\n    let mut\
    \ min_sum = nums[0] as isize;\n\n    // Find the minimum element in the rest of\
    \ the array\n    for i in 1..nums.len() {\n        min_sum = min(min_sum, i +\
    \ nums.iter().min().unwrap() as isize);\n    }\n\n    // Return the minimum sum\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpakyjgkpv.rs:17:19\n\
    \   |\n17 |         min_sum = min(min_sum, i + nums.iter().min().unwrap() as isize);\n\
    \   |                   ^^^\n...\n24 | fn main() {\n   | --------- similarly named\
    \ function `main` defined here\n   |\nhelp: a function with a similar name exists\n\
    \   |\n17 |         min_sum = main(min_sum, i + nums.iter().min().unwrap() as\
    \ isize);\n   |                   ~~~~\nhelp: consider importing this function\n\
    \   |\n1  | use std::cmp::min;\n   |\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpakyjgkpv.rs:17:36\n   |\n17 |         min_sum = min(min_sum, i + nums.iter().min().unwrap()\
    \ as isize);\n   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n\
    \  --> /tmp/tmpakyjgkpv.rs:17:32\n   |\n17 |         min_sum = min(min_sum, i\
    \ + nums.iter().min().unwrap() as isize);\n   |                   ---        \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `usize + isize`\n\
    \   |                   |\n   |                   required by a bound introduced\
    \ by this call\n   |\n   = help: the trait `Add<isize>` is not implemented for\
    \ `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmpakyjgkpv.rs:17:36\n\
    \   |\n17 |         min_sum = min(min_sum, i + nums.iter().min().unwrap() as isize);\n\
    \   |                                    --------------------------^^^^^^^^^\n\
    \   |                                    |\n   |                             \
    \       cannot cast `&isize` as `isize`\n   |                                \
    \    help: dereference the expression: `*nums.iter().min().unwrap()`\n\nerror: "
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    mem::swap(&mut nums.iter_mut(), &mut nums.iter());\n    loop\
    \ {\n        if nums.len() <= 1 {\n            return nums[0];\n        }\n  \
    \      let mut min_sum = 0;\n        let mut max_sum = nums[0];\n        let mut\
    \ min_sub_nums = nums[..nums.len() - 1];\n        let mut max_sub_nums = nums[1..nums.len()\
    \ - 1];\n\n        for sub_nums in &mut min_sub_nums, &mut max_sub_nums {\n  \
    \          min_sum += sub_nums[0];\n            max_sum = max(max_sum, sub_nums[0]);\n\
    \            min_sum = min(min_sum, sub_nums[0]);\n            min_sum += sub_nums[1..sub_nums.len()\
    \ - 1];\n            max_sum = max(max_sum, sub_nums[1..sub_nums.len() - 1]);\n\
    \        }\n\n        if min_sum < 0 {\n            min_sum -= 1;\n        }\n\
    \n        if min_sum == max_sum {\n            return min_sum;\n        }\n\n\
    \        let new_min = min(max_sub_nums.iter().cloned().collect::<Vec<_>>());\n\
    \        let new_max = max(min_sub_nums.iter().cloned().collect::<Vec<_>>());\n\
    \        nums = new_min.iter().chain(new_max).collect();\n    }\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `,`\n  --> /tmp/tmpmd1jfzz8.rs:17:42\n   |\n\
    17 |         for sub_nums in &mut min_sub_nums, &mut max_sub_nums {\n   |    \
    \                                      ^ expected `{`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared crate or module `mem`\n --> /tmp/tmpmd1jfzz8.rs:7:5\n\
    \  |\n7 |     mem::swap(&mut nums.iter_mut(), &mut nums.iter());\n  |     ^^^\
    \ use of undeclared crate or module `mem`\n\nerror[E0277]: the size for values\
    \ of type `[isize]` cannot be known at compilation time\n  --> /tmp/tmpmd1jfzz8.rs:14:13\n\
    \   |\n14 |         let mut min_sub_nums = nums[..nums.len() - 1];\n   |     \
    \        ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n   |\n  \
    \ = help: the trait `Sized` is not implemented for `[isize]`\n   = note: all local\
    \ variables must have a statically known size\n   = help: unsized locals are gated\
    \ as an unstable feature\nhelp: consider borrowing here\n   |\n14 |         let\
    \ mut min_sub_nums = &nums[..nums.len() - 1];\n   |                          \
    \      +\n\nerror[E0277]: the size for values of type `[isize]` cannot be known\
    \ at compilation time\n  --> /tmp/tmpmd1jfzz8.rs:15:13\n   |\n15 |         let\
    \ mut max_sub_nums = nums[1..nums.len() - 1];\n   |             ^^^^^^^^^^^^^^^^\
    \ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized`\
    \ is not implemented for `[isize]`\n   = note: all local variables must have a\
    \ statically known size\n   = help: unsized locals are gated as an unstable feature\n\
    help: consider borrowing here\n   |\n15 |         let mut max_sub_nums = &nums[1..nums.len()\
    \ - 1];\n   |                                +\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    // Initialize sum with maximum number\n    let mut sum: isize\
    \ = nums.iter().max(|a, b| a.cmp(&b)).unwrap();\n    let mut min_sum: isize =\
    \ 0;\n\n    for n in nums.iter().filter(|n| n >= 0) {\n        sum += n;\n   \
    \     // Add n only if it is smaller than the minimum sum\n        if sum < min_sum\
    \ {\n            min_sum = sum;\n        }\n    }\n\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp13gnqloo.rs:8:43\n\
    \  |\n8 |     let mut sum: isize = nums.iter().max(|a, b| a.cmp(&b)).unwrap();\n\
    \  |                                           ^ consider giving this closure\
    \ parameter a type\n  |\n  = note: type must be known at this point\n\nerror[E0061]:\
    \ this function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmp13gnqloo.rs:8:38\n\
    \     |\n8    |     let mut sum: isize = nums.iter().max(|a, b| a.cmp(&b)).unwrap();\n\
    \     |                                      ^^^ ---------------- supplied 1 argument\n\
    \     |                                      |\n     |                       \
    \               expected 0 arguments\n     |\nnote: associated function defined\
    \ here\n\nerror[E0308]: mismatched types\n --> /tmp/tmp13gnqloo.rs:8:26\n  |\n\
    8 |     let mut sum: isize = nums.iter().max(|a, b| a.cmp(&b)).unwrap();\n  |\
    \                  -----   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |                  |\n  |                  expected\
    \ due to this\n  |\nhelp: consider dereferencing the borrow\n  |\n8 |     let\
    \ mut sum: isize = *nums.iter().max(|a, b| a.cmp(&b)).unwrap();\n  |         \
    \                 +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp13gnqloo.rs:11:42\n\
    \   |\n11 |     for n in nums.iter().filter(|n| n >= 0) {\n   |              \
    \                            ^ expected `&&isize`, found integer\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0282,\
    \ E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums.iter().fold(0, |sum, elt| sum + elt)\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmphmceo1g_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums\n        .iter()\n        .zip(nums.iter().rev())\n   \
    \     .enumerate()\n        .filter_map(|(i, num)| if i == 0 {\n            Some(num)\n\
    \        } else {\n            Some(\n                num\n                  \
    \  .checked_add(i * nums[i - 1])?\n                    .ok_or(\n             \
    \           \"Negative values in vector with size {}\",\n                    )?,\n\
    \            )\n        })\n        .fold(0, |mut sum, num| {\n            sum\
    \ += num;\n            sum\n        })\n}\n\nfn main() {\n    let candidate =\
    \ minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `checked_add` found for tuple `(&isize, &isize)`\
    \ in the current scope\n  --> /tmp/tmpv3d1ubuz.rs:16:22\n   |\n16 |          \
    \           .checked_add(i * nums[i - 1])?\n   |                      ^^^^^^^^^^^\
    \ method not found in `(&isize, &isize)`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpv3d1ubuz.rs:16:38\n   |\n16 |                     .checked_add(i\
    \ * nums[i - 1])?\n   |                                      ^^^^^^^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot multiply `usize` by `isize`\n\
    \  --> /tmp/tmpv3d1ubuz.rs:16:36\n   |\n16 |                     .checked_add(i\
    \ * nums[i - 1])?\n   |                                    ^ no implementation\
    \ for `usize * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot add-assign `(&isize, &isize)` to `isize`\n\
    \  --> /tmp/tmpv3d1ubuz.rs:23:17\n   |\n23 |             sum += num;\n   |   \
    \              ^^ no implementation for `isize += (&isize, &isize)`\n   |\n  \
    \ = help: the trait `AddAssign<(&isize, &isize)>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut min = std::i32::MAX;\n    let mut sum = 0;\n    for\
    \ &num in &nums {\n        sum += num;\n        if sum < min {\n            min\
    \ = sum;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1pw7t3es.rs:11:18\n   |\n\
    11 |         if sum < min {\n   |                  ^^^ expected `isize`, found\
    \ `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |         if sum < min.try_into().unwrap() {\n \
    \  |                     ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp1pw7t3es.rs:12:19\n   |\n7  |     let mut min = std::i32::MAX;\n\
    \   |                   ------------- expected due to this value\n...\n12 |  \
    \           min = sum;\n   |                   ^^^ expected `i32`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1pw7t3es.rs:15:5\n   |\n6  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n15 |     min\n\
    \   |     ^^^ expected `isize`, found `i32`\n   |\nhelp: you can convert an `i32`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n15 |     min.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    nums.iter().fold(0, |sum, num| {\n        if sum > num {\n \
    \           sum\n        } else {\n            sum + num\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb5xb4otj.rs:8:18\n  |\n8 |\
    \         if sum > num {\n  |                  ^^^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n8 |         if sum > *num\
    \ {\n  |                  +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n    let mut sum = isize::MAX;\n    for i in nums.iter() {\n    \
    \    if sum < i {\n            sum = i;\n        }\n    }\n    return sum;\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8wx5l6oy.rs:9:18\n  |\n9 |\
    \         if sum < i {\n  |                  ^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |         if sum < *i {\n\
    \  |                  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8wx5l6oy.rs:10:19\n\
    \   |\n7  |     let mut sum = isize::MAX;\n   |                   ---------- expected\
    \ due to this value\n...\n10 |             sum = i;\n   |                   ^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n10 |             sum = *i;\n   |                   +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
