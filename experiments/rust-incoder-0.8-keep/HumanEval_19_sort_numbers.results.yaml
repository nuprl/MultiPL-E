name: HumanEval_19_sort_numbers
language: rust
results:
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers!()\n        .split(|c|\
    \ c.to_ascii_lowercase().parse().ok())\n        .sort_by(|a, b| b.cmp(a))\n  \
    \      .collect()\n        .to_owned()\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `numbers` in this scope\n --> /tmp/tmpeqrsji4o.rs:7:5\n\
    \  |\n7 |     numbers!()\n  |     ^^^^^^^\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.to_string();\n\
    \    numbers.chars().sort_by(|a, b| a.cmp(b)).collect::<Vec<_>>().join(\" \")\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpa8kefldn.rs:8:21\n  |\n8 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect::<Vec<_>>().join(\" \")\n  |                     ^^^^^^^\
    \ method not found in `Chars<'_>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.split();\n\
    \n    if numbers.len() == 1 {\n        numbers = vec![numbers[0]];\n    }\n\n\
    \    numbers.sort_by(|a, b| a.to_digit(10).cmp(&b.to_digit(10)));\n\n    numbers.join(\"\
    , \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpzsgnu6q0.rs:7:31\n     |\n7    |     let mut numbers = numbers.split();\n\
    \     |                               ^^^^^- supplied 0 arguments\n     |    \
    \                           |\n     |                               expected 1\
    \ argument\n     |\nnote: associated function defined here\n\nerror[E0599]: no\
    \ method named `len` found for struct `std::str::Split` in the current scope\n\
    \ --> /tmp/tmpzsgnu6q0.rs:9:16\n  |\n9 |     if numbers.len() == 1 {\n  |    \
    \            ^^^ method not found in `std::str::Split<'_, _>`\n\nerror[E0608]:\
    \ cannot index into a value of type `std::str::Split<'_, _>`\n  --> /tmp/tmpzsgnu6q0.rs:10:24\n\
    \   |\n10 |         numbers = vec![numbers[0]];\n   |                        ^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzsgnu6q0.rs:10:19\n   |\n7  |\
    \     let mut numbers = numbers.split();\n   |                       ---------------\
    \ expected due to this value\n...\n10 |         numbers = vec![numbers[0]];\n\
    \   |                   ^^^^^^^^^^^^^^^^ expected struct `std::str::Split`, found\
    \ struct `Vec`\n   |\n   = note: expected struct `std::str::Split<'_, _>`\n  \
    \            found struct `Vec<_, _>`\n   = note: this error originates in the\
    \ macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror[E0599]: no method named `sort_by` found for struct `std::str::Split` in\
    \ the current scope\n  --> /tmp/tmpzsgnu6q0.rs:13:13\n   |\n13 |     numbers.sort_by(|a,\
    \ b| a.to_digit(10).cmp(&b.to_digit(10)));\n   |             ^^^^^^^ method not\
    \ found in `std::str::Split<'_, _>`\n\nerror[E0599]: no method named `join` found\
    \ for struct `std::str::Split` in the current scope\n  --> /tmp/tmpzsgnu6q0.rs:15:13\n\
    \   |\n15 |     numbers.join(\", \")\n   |             ^^^^ method not found in\
    \ `std::str::Split<'_, _>`\n\nerror: aborting due to 6 previous errors\n\nSome\
    \ errors have detailed explanations: E0061, E0308, E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.splitn(2,\
    \ ' ').collect::<Vec<&str>>();\n    numbers.sort_unstable();\n    numbers.joinn(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `joinn` found for struct `Vec<&str>` in the\
    \ current scope\n --> /tmp/tmpipnzwxo7.rs:9:13\n  |\n9 |     numbers.joinn(\"\
    \ \")\n  |             ^^^^^ help: there is an associated function with a similar\
    \ name: `join`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(' ').sort_by(|a,\
    \ b| {\n        match b {\n            'nine' => 9,\n            'eight' => 8,\n\
    \            'seven' => 7,\n            'six' => 6,\n            'five' => 5,\n\
    \            'four' => 4,\n            'three' => 3,\n            'two' => 2,\n\
    \            'one' => 1,\n            'zero' => 0,\n            _ => a.to_digit(10).cmp(b.to_digit(10)),\n\
    \        }\n    }).join(' ')\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n --> /tmp/tmp9tw9t0zn.rs:9:13\n\
    \  |\n9 |             'nine' => 9,\n  |             ^^^^^^\n  |\nhelp: if you\
    \ meant to write a `str` literal, use double quotes\n  |\n9 |             \"nine\"\
    \ => 9,\n  |             ~~~~~~\n\nerror: character literal may only contain one\
    \ codepoint\n  --> /tmp/tmp9tw9t0zn.rs:10:13\n   |\n10 |             'eight' =>\
    \ 8,\n   |             ^^^^^^^\n   |\nhelp: if you meant to write a `str` literal,\
    \ use double quotes\n   |\n10 |             \"eight\" => 8,\n   |            \
    \ ~~~~~~~\n\nerror: character literal may only contain one codepoint\n  --> /tmp/tmp9tw9t0zn.rs:11:13\n\
    \   |\n11 |             'seven' => 7,\n   |             ^^^^^^^\n   |\nhelp: if\
    \ you meant to write a `str` literal, use double quotes\n   |\n11 |          \
    \   \"seven\" => 7,\n   |             ~~~~~~~\n\nerror: character literal may\
    \ only contain one codepoint\n  --> /tmp/tmp9tw9t0zn.rs:12:13\n   |\n12 |    \
    \         'six' => 6,\n   |             ^^^^^\n   |\nhelp: if you meant to write\
    \ a `str` literal, use double quotes\n   |\n12 |             \"six\" => 6,\n \
    \  |             ~~~~~\n\nerror: character literal may only contain one codepoint\n\
    \  --> /tmp/tmp9tw9t0zn.rs:13:13\n   |\n13 |             'five' => 5,\n   |  \
    \           ^^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n13 |             \"five\" => 5,\n   |             ~~~~~~\n\nerror:\
    \ character literal may only contain one codepoint\n  --> /tmp/tmp9tw9t0zn.rs:14:13\n\
    \   |\n14 |             'four' => 4,\n   |             ^^^^^^\n   |\nhelp: if\
    \ you meant to write a `str` literal, use double quotes\n   |\n14 |          \
    \   \"four\" => 4,\n   |             ~~~~~~\n\nerror: character literal may only\
    \ contain one codepoint\n  --> /tmp/tmp9tw9t0zn.rs:15:13\n   |\n15 |         \
    \    'three' => 3,\n   |             ^^^^^^^\n   |\nhelp: if you meant to write\
    \ a `str` literal, use double quotes\n   |\n15 |             \"three\" => 3,\n\
    \   |             ~~~~~~~\n\nerror: character literal may only contain one codepoint\n\
    \  --> /tmp/tmp9tw9t0zn.rs:16:13\n   |\n16 |             'two' => 2,\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.to_string().split_whitespace();\n\
    \    if numbers.len() != 10 {\n        return \"\";\n    }\n    for i in 0..10\
    \ {\n        if numbers[i] != \"zero\" && numbers[i] != \"one\" && numbers[i]\
    \ != \"two\" &&\n            numbers[i] != \"three\" && numbers[i] != \"four\"\
    \ &&\n            numbers[i] != \"five\" && numbers[i] != \"six\" &&\n       \
    \     numbers[i] != \"seven\" && numbers[i] != \"eight\" && numbers[i] != \"nine\"\
    \ {\n            return \"\";\n        }\n    }\n    for i in 0..10 {\n      \
    \  numbers[i] = String::from(&numbers[i].to_string().to_lowercase());\n    }\n\
    \    let mut numbers = numbers.sort_by_key(|&i| i.parse().unwrap()).collect();\n\
    \    numbers.insert(0, String::from(\"zero\"));\n    numbers.append(String::from(\"\
    nine\"));\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpn8u09en3.rs:8:16\n  |\n8 |     if numbers.len()\
    \ != 10 {\n  |                ^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpn8u09en3.rs:9:16\n  |\n6 | fn sort_numbers(numbers:\
    \ String) -> String {\n  |                                     ------ expected\
    \ `String` because of return type\n...\n9 |         return \"\";\n  |        \
    \        ^^- help: try using a conversion method: `.to_string()`\n  |        \
    \        |\n  |                expected struct `String`, found `&str`\n\nerror[E0608]:\
    \ cannot index into a value of type `SplitWhitespace<'_>`\n  --> /tmp/tmpn8u09en3.rs:12:12\n\
    \   |\n12 |         if numbers[i] != \"zero\" && numbers[i] != \"one\" && numbers[i]\
    \ != \"two\" &&\n   |            ^^^^^^^^^^\n\nerror[E0608]: cannot index into\
    \ a value of type `SplitWhitespace<'_>`\n  --> /tmp/tmpn8u09en3.rs:12:36\n   |\n\
    12 |         if numbers[i] != \"zero\" && numbers[i] != \"one\" && numbers[i]\
    \ != \"two\" &&\n   |                                    ^^^^^^^^^^\n\nerror[E0608]:\
    \ cannot index into a value of type `SplitWhitespace<'_>`\n  --> /tmp/tmpn8u09en3.rs:12:59\n\
    \   |\n12 |         if numbers[i] != \"zero\" && numbers[i] != \"one\" && numbers[i]\
    \ != \"two\" &&\n   |                                                        \
    \   ^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `SplitWhitespace<'_>`\n\
    \  --> /tmp/tmpn8u09en3.rs:13:13\n   |\n13 |             numbers[i] != \"three\"\
    \ && numbers[i] != \"four\" &&\n   |             ^^^^^^^^^^\n\nerror[E0608]: cannot\
    \ index into a value of type `SplitWhitespace<'_>`\n  --> /tmp/tmpn8u09en3.rs:13:38\n\
    \   |\n13 |             numbers[i] != \"three\" && numbers[i] != \"four\" &&\n\
    \   |                                      ^^^^^^^^^^\n\nerror[E0608]: cannot\
    \ index into a value of type `SplitWhitespace<'_>`\n  --> /tmp/tmpn8u09en3.rs:14:13\n\
    \   |\n14 |             numbers[i] != \"five\" && numbers[i] != \"six\" &&\n \
    \  |             ^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type\
    \ `SplitWhitespace<'_>`\n  --> "
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.lines()\n        .map(|s|\
    \ s.parse::<u32>().unwrap())\n        .sort_by_key(|x| x.checked_cmp(&x))\n  \
    \      .collect::<Vec<_>>()\n        .iter()\n        .fold(String::new(), |mut\
    \ acc, s| {\n            acc + &*s.to_string();\n            acc.push(' ');\n\
    \            acc\n        });\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmpl_izy7zk.rs:9:10\n  |\n9 |         .sort_by_key(|x|\
    \ x.checked_cmp(&x))\n  |          ^^^^^^^^^^^ method not found in `Map<std::str::Lines<'_>,\
    \ [closure@/tmp/tmpl_izy7zk.rs:8:14: 8:43]>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpl_izy7zk.rs:6:37\n  |\n6 | fn sort_numbers(numbers: String) -> String\
    \ {\n  |    ------------                     ^^^^^^ expected struct `String`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace()\n\
    \        .sorted()\n        .collect::<Vec<_>>()\n        .join(\",\")\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpnlltysqm.rs:8:10\n  |\n8 |         .sorted()\n\
    \  |          ^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|&a|\
    \ a.to_digit(10))\n        .collect::<Vec<_>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpp48rw5m_.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|&a|\
    \ a.to_digit(10))\n  |                                ^^^^^^^ method not found\
    \ in `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.split_whitespace();\n\
    \    numbers.sort();\n    strings.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `strings` in this scope\n --> /tmp/tmpctl0ie7_.rs:9:5\n\
    \  |\n9 |     strings.join(\" \")\n  |     ^^^^^^^ not found in this scope\n\n\
    error[E0599]: no method named `sort` found for struct `SplitWhitespace` in the\
    \ current scope\n --> /tmp/tmpctl0ie7_.rs:8:13\n  |\n8 |     numbers.sort();\n\
    \  |             ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.to_ascii_lowercase().split('\
    \ ')\n        .sort_by(|a, b| {\n            if a == 'zero' {\n              \
    \  -1\n            } else if b == 'zero' {\n                1\n            } else\
    \ {\n                a.cmp(b)\n            }\n        })\n        .iter()\n  \
    \      .fold(String::new(), |mut s, x| {\n            s.push_str(x);\n       \
    \     s\n        });\n}\n\nfn main() {\n    let candidate = sort_numbers;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n --> /tmp/tmp83sca8w7.rs:9:21\n\
    \  |\n9 |             if a == 'zero' {\n  |                     ^^^^^^\n  |\n\
    help: if you meant to write a `str` literal, use double quotes\n  |\n9 |     \
    \        if a == \"zero\" {\n  |                     ~~~~~~\n\nerror: character\
    \ literal may only contain one codepoint\n  --> /tmp/tmp83sca8w7.rs:11:28\n  \
    \ |\n11 |             } else if b == 'zero' {\n   |                          \
    \  ^^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double quotes\n\
    \   |\n11 |             } else if b == \"zero\" {\n   |                      \
    \      ~~~~~~\n\nerror[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmp83sca8w7.rs:8:10\n  |\n8 |         .sort_by(|a,\
    \ b| {\n  |          ^^^^^^^ method not found in `std::str::Split<'_, char>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp83sca8w7.rs:6:37\n  |\n6 | fn sort_numbers(numbers:\
    \ String) -> String {\n  |    ------------                     ^^^^^^ expected\
    \ struct `String`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.trim().split_whitespace().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpdgx48he3.rs:7:39\n  |\n7 |     numbers.trim().split_whitespace().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                                       ^^^^^^^ method\
    \ not found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut output = String::new();\n\
    \    for number in numbers.split(\" \") {\n        if number == \"zero\" {\n \
    \           output.push(\"zero\");\n        } else if number == \"one\" {\n  \
    \          output.push(\"one\");\n        } else if number == \"two\" {\n    \
    \        output.push(\"two\");\n        } else if number == \"three\" {\n    \
    \        output.push(\"three\");\n        } else if number == \"four\" {\n   \
    \         output.push(\"four\");\n        } else if number == \"five\" {\n   \
    \         output.push(\"five\");\n        } else if number == \"six\" {\n    \
    \        output.push(\"six\");\n        } else if number == \"seven\" {\n    \
    \        output.push(\"seven\");\n        } else if number == \"eight\" {\n  \
    \          output.push(\"eight\");\n        } else if number == \"nine\" {\n \
    \           output.push(\"nine\");\n        }\n    }\n    output\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpugk0veiz.rs:10:25\n   |\n\
    10 |             output.push(\"zero\");\n   |                         ^^^^^^ expected\
    \ `char`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpugk0veiz.rs:12:25\n\
    \   |\n12 |             output.push(\"one\");\n   |                         ^^^^^\
    \ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpugk0veiz.rs:14:25\n\
    \   |\n14 |             output.push(\"two\");\n   |                         ^^^^^\
    \ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpugk0veiz.rs:16:25\n\
    \   |\n16 |             output.push(\"three\");\n   |                        \
    \ ^^^^^^^ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpugk0veiz.rs:18:25\n   |\n18 |             output.push(\"four\");\n \
    \  |                         ^^^^^^ expected `char`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpugk0veiz.rs:20:25\n   |\n20 |             output.push(\"\
    five\");\n   |                         ^^^^^^ expected `char`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpugk0veiz.rs:22:25\n   |\n22 |  \
    \           output.push(\"six\");\n   |                         ^^^^^ expected\
    \ `char`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpugk0veiz.rs:24:25\n\
    \   |\n24 |             output.push(\"seven\");\n   |                        \
    \ ^^^^^^^ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpugk0veiz.rs:26:25\n   |\n26 |             output.push(\"eight\");\n\
    \   |                         ^^^^^^^ expected `char`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpugk0veiz.rs:28:25\n   |\n28 |             output.push(\"\
    nine\");\n   |                         ^^^^^^ expected `char`, found `&str`\n\n\
    error: aborting due to 10 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .split_whitespace()\n\
    \        .sort_by(|a, b| a.cmp(b))\n        .collect()\n        .to_owned()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpe8rds64r.rs:9:10\n  |\n9 |         .sort_by(|a,\
    \ b| a.cmp(b))\n  |          ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.to_lowercase();\n\
    \    let mut split = numbers.split_whitespace();\n    let mut numbers_sorted =\
    \ String::new();\n    split.sort_by_key(|&number| {\n        match number.chars().next().unwrap()\
    \ {\n            '0' => 0,\n            '1' => 1,\n            '2' => 2,\n   \
    \         '3' => 3,\n            '4' => 4,\n            '5' => 5,\n          \
    \  '6' => 6,\n            '7' => 7,\n            '8' => 8,\n            '9' =>\
    \ 9,\n            _ => -1,\n        }\n    });\n\n    for number in split.iter().cloned()\
    \ {\n        numbers_sorted.push_str(number);\n    }\n\n    numbers_sorted\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp6g14v6mr.rs:10:11\n   |\n10 |     split.sort_by_key(|&number|\
    \ {\n   |           ^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0599]: no method named `iter` found for struct `SplitWhitespace` in the\
    \ current scope\n  --> /tmp/tmp6g14v6mr.rs:26:25\n   |\n26 |     for number in\
    \ split.iter().cloned() {\n   |                         ^^^^ method not found\
    \ in `SplitWhitespace<'_>`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(\" \").sort().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmp612l0ch5.rs:7:24\n  |\n7 |     numbers.split(\"\
    \ \").sort().join(\" \")\n  |                        ^^^^ method not found in\
    \ `std::str::Split<'_, &str>`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers_vec: Vec<String>\
    \ = numbers.chars().collect();\n    let mut numbers = vec!['zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n    for n in numbers_vec\
    \ {\n        numbers.insert(n - '0', '');\n    }\n    numbers = numbers.into_iter().collect::<Vec<String>>().sort();\n\
    \    return numbers.iter().map(|&x| &x.to_string()).collect::<Vec<String>>().join(\"\
    \ \");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n --> /tmp/tmp92yhi0q4.rs:8:28\n\
    \  |\n8 |     let mut numbers = vec!['zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine'];\n  |                            ^^^^^^\n \
    \ |\nhelp: if you meant to write a `str` literal, use double quotes\n  |\n8 |\
    \     let mut numbers = vec![\"zero\", 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine'];\n  |                            ~~~~~~\n\n\
    error: character literal may only contain one codepoint\n --> /tmp/tmp92yhi0q4.rs:8:36\n\
    \  |\n8 |     let mut numbers = vec!['zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine'];\n  |                                    ^^^^^\n\
    \  |\nhelp: if you meant to write a `str` literal, use double quotes\n  |\n8 |\
    \     let mut numbers = vec!['zero', \"one\", 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine'];\n  |                                    ~~~~~\n\
    \nerror: character literal may only contain one codepoint\n --> /tmp/tmp92yhi0q4.rs:8:43\n\
    \  |\n8 |     let mut numbers = vec!['zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine'];\n  |                                     \
    \      ^^^^^\n  |\nhelp: if you meant to write a `str` literal, use double quotes\n\
    \  |\n8 |     let mut numbers = vec!['zero', 'one', \"two\", 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine'];\n  |                             \
    \              ~~~~~\n\nerror: character literal may only contain one codepoint\n\
    \ --> /tmp/tmp92yhi0q4.rs:8:50\n  |\n8 |     let mut numbers = vec!['zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n  |     \
    \                                             ^^^^^^^\n  |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n  |\n8 |     let mut numbers =\
    \ vec!['zero', 'one', 'two', \"three\", 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine'];\n  |                                                  ~~~~~~~\n\nerror:\
    \ character literal may only contain one codepoint\n --> /tmp/tmp92yhi0q4.rs:8:59\n\
    \  |\n8 |     let mut number"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .split_whitespace()\n\
    \        .sort_by(|a, b| {\n            let mut num: i32 = a.parse().unwrap();\n\
    \            let other_num = b.parse().unwrap();\n            if other_num < num\
    \ {\n                num\n            } else {\n                other_num\n  \
    \          }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpbvhiiz_q.rs:9:10\n  |\n9 |         .sort_by(|a,\
    \ b| {\n  |          ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut s = String::new();\n\
    \    for (i, n) in numbers.split_whitespace().rposition(|&c| c.is_ascii_digit())\
    \ {\n        if n > s.len() {\n            s = n.to_string();\n        } else\
    \ {\n            if i <= s.len() {\n                s = s + '-' + n.to_string();\n\
    \            } else {\n                s = n.to_string();\n            }\n   \
    \     }\n    }\n    s\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `SplitWhitespace<'_>: ExactSizeIterator`\
    \ is not satisfied\n    --> /tmp/tmpz6czxvoj.rs:8:46\n     |\n8    |     for (i,\
    \ n) in numbers.split_whitespace().rposition(|&c| c.is_ascii_digit()) {\n    \
    \ |                                              ^^^^^^^^^ the trait `ExactSizeIterator`\
    \ is not implemented for `SplitWhitespace<'_>`\n     |\n     = help: the following\
    \ other types implement trait `ExactSizeIterator`:\n               &mut I\n  \
    \             Args\n               ArgsOs\n               ArrayChunks<'_, T, N>\n\
    \               ArrayChunksMut<'_, T, N>\n               ArrayWindows<'_, T, N>\n\
    \               Box<I, A>\n               Chunks<'_, T>\n             and 109\
    \ others\nnote: required by a bound in `rposition`\n\nerror[E0599]: no method\
    \ named `is_ascii_digit` found for type `str` in the current scope\n --> /tmp/tmpz6czxvoj.rs:8:63\n\
    \  |\n8 |     for (i, n) in numbers.split_whitespace().rposition(|&c| c.is_ascii_digit())\
    \ {\n  |                                                               ^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n -->\
    \ /tmp/tmpz6czxvoj.rs:8:58\n  |\n8 |     for (i, n) in numbers.split_whitespace().rposition(|&c|\
    \ c.is_ascii_digit()) {\n  |                                                 \
    \         ^ doesn't have a size known at compile-time\n  |\n  = help: the trait\
    \ `Sized` is not implemented for `str`\n  = note: all local variables must have\
    \ a statically known size\n  = help: unsized locals are gated as an unstable feature\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpz6czxvoj.rs:8:9\n  |\n8 |     for\
    \ (i, n) in numbers.split_whitespace().rposition(|&c| c.is_ascii_digit()) {\n\
    \  |         ^^^^^^    -------------------------------------------------------------\
    \ this expression has type `Option<usize>`\n  |         |\n  |         expected\
    \ `usize`, found tuple\n  |\n  = note: expected type `usize`\n            found\
    \ tuple `(_, _)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz6czxvoj"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(' ')\n        .sort().join('\
    \ ')\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmp0j6f1m2n.rs:8:10\n  |\n8 |         .sort().join('\
    \ ')\n  |          ^^^^ method not found in `std::str::Split<'_, char>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut list = numbers.split_whitespace().collect::<Vec<_>>();\n\
    \    list.sort_by_key(|x| match x.parse::<isize>() {\n        Ok(i) => i,\n  \
    \      Err(_) => 0,\n    });\n    strings.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `strings` in this scope\n  --> /tmp/tmpzqxc_k_3.rs:12:5\n\
    \   |\n12 |     strings.join(\" \")\n   |     ^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers_str = numbers.to_owned();\n\
    \    let mut numbers_vec_str = numbers_str.split_whitespace().collect::<Vec<_>>();\n\
    \    let mut numbers_vec_int = numbers_vec_str.into_iter().collect::<Vec<_>>();\n\
    \n    numbers_vec_int.sort_by_key(|&x| x.parse().unwrap());\n    numbers_vec_str.iter().map(|x|\
    \ x.to_string()).collect::<String>()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp_fjgjqmy.rs:11:21\n\
    \   |\n11 |     numbers_vec_int.sort_by_key(|&x| x.parse().unwrap());\n   |  \
    \                   ^^^^^^^^^^^ cannot infer type for type parameter `K` declared\
    \ on the associated function `sort_by_key`\n   |\nhelp: consider specifying the\
    \ type argument in the method call\n   |\n11 |     numbers_vec_int.sort_by_key(|&x|\
    \ x.parse::<F>().unwrap());\n   |                                            \
    \ +++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    strings.sort_by_key(|x| x.parse::<usize>())\n\
    \        .into_iter()\n        .collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `strings` in this scope\n --> /tmp/tmp3iij74t_.rs:7:5\n\
    \  |\n7 |     strings.sort_by_key(|x| x.parse::<usize>())\n  |     ^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<_> = numbers.split_whitespace().collect();\n\
    \    let mut numbers_sorted = vec![];\n    let mut i = 0;\n    while i < numbers.size()\
    \ {\n        if numbers[i] != 'zero' && numbers[i] != 'one' &&\n            numbers[i]\
    \ != 'two' && numbers[i] != 'three' &&\n            numbers[i] != 'four' && numbers[i]\
    \ != 'five' &&\n            numbers[i] != 'six' && numbers[i] != 'seven' &&\n\
    \            numbers[i] != 'eight' && numbers[i] != 'nine' {\n            numbers_sorted.push(numbers[i]);\n\
    \        } else {\n            i += 1;\n        }\n    }\n    numbers_sorted.sort();\n\
    \    let mut result = String::with_capacity(numbers_sorted.len());\n    for i\
    \ in 0..numbers_sorted.len() {\n        result.push_str(&numbers_sorted[i]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpftlb8di3.rs:11:26\n\
    \   |\n11 |         if numbers[i] != 'zero' && numbers[i] != 'one' &&\n   |  \
    \                        ^^^^^^\n   |\nhelp: if you meant to write a `str` literal,\
    \ use double quotes\n   |\n11 |         if numbers[i] != \"zero\" && numbers[i]\
    \ != 'one' &&\n   |                          ~~~~~~\n\nerror: character literal\
    \ may only contain one codepoint\n  --> /tmp/tmpftlb8di3.rs:11:50\n   |\n11 |\
    \         if numbers[i] != 'zero' && numbers[i] != 'one' &&\n   |            \
    \                                      ^^^^^\n   |\nhelp: if you meant to write\
    \ a `str` literal, use double quotes\n   |\n11 |         if numbers[i] != 'zero'\
    \ && numbers[i] != \"one\" &&\n   |                                          \
    \        ~~~~~\n\nerror: character literal may only contain one codepoint\n  -->\
    \ /tmp/tmpftlb8di3.rs:12:27\n   |\n12 |             numbers[i] != 'two' && numbers[i]\
    \ != 'three' &&\n   |                           ^^^^^\n   |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n   |\n12 |             numbers[i]\
    \ != \"two\" && numbers[i] != 'three' &&\n   |                           ~~~~~\n\
    \nerror: character literal may only contain one codepoint\n  --> /tmp/tmpftlb8di3.rs:12:50\n\
    \   |\n12 |             numbers[i] != 'two' && numbers[i] != 'three' &&\n   |\
    \                                                  ^^^^^^^\n   |\nhelp: if you\
    \ meant to write a `str` literal, use double quotes\n   |\n12 |             numbers[i]\
    \ != 'two' && numbers[i] != \"three\" &&\n   |                               \
    \                   ~~~~~~~\n\nerror: character literal may only contain one codepoint\n\
    \  --> /tmp/tmpftlb8di3.rs:13:27\n   |\n13 |             numbers[i] != 'four'\
    \ && numbers[i] != 'five' &&\n   |                           ^^^^^^\n   |\nhelp:\
    \ if you meant to write a `str` literal, use double quotes\n   |\n13 |       \
    \      numbers[i] != \"four\" && numbers[i] != 'five' &&\n   |               \
    \            ~~~~~~\n\nerror: character literal may only contain one codepoint\n\
    \  --> /tmp/tmpftlb8di3.rs:13:51\n   |\n13 |      "
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.replace(\" \", \"\").chars()\n\
    \        .collect::<Vec<Char>>()\n        .sort_by(|a, b| cmp::Ordering::Less.cmp(&b,\
    \ &a))\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \ --> /tmp/tmpwkuo7w1d.rs:9:25\n  |\n9 |         .sort_by(|a, b| cmp::Ordering::Less.cmp(&b,\
    \ &a))\n  |                         ^^^ use of undeclared crate or module `cmp`\n\
    \nerror[E0412]: cannot find type `Char` in this scope\n --> /tmp/tmpwkuo7w1d.rs:8:24\n\
    \  |\n8 |         .collect::<Vec<Char>>()\n  |                        ^^^^\n \
    \ |\nhelp: a builtin type with a similar name exists\n  |\n8 |         .collect::<Vec<char>>()\n\
    \  |                        ~~~~\nhelp: you might be missing a type parameter\n\
    \  |\n6 | fn sort_numbers<Char>(numbers: String) -> String {\n  |            \
    \    ++++++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a, b|\
    \ a.to_digit(10).cmp(b.to_digit(10)))\n        .collect::<Vec<_>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpmdvmz9ce.rs:7:21\n  |\n7 |     numbers.chars().sort_by(|a,\
    \ b| a.to_digit(10).cmp(b.to_digit(10)))\n  |                     ^^^^^^^ method\
    \ not found in `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers: Vec<String> = numbers.split_whitespace().collect();\n\
    \    let mut numbers_map: Vec<String> = vec![];\n    for i in 0..numbers.len()\
    \ {\n        if numbers[i] != \"zero\" {\n            numbers_map.push(numbers[i]);\n\
    \        }\n    }\n    numbers_map.sort_unstable();\n    numbers_map.join().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpgg2bht7v.rs:7:59\n     |\n7  \
    \  |     let numbers: Vec<String> = numbers.split_whitespace().collect();\n  \
    \   |                                                           ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0061]: this function takes 1 argument but\
    \ 0 arguments were supplied\n   --> /tmp/tmpgg2bht7v.rs:15:17\n    |\n15  |  \
    \   numbers_map.join().to_string()\n    |                 ^^^^- supplied 0 arguments\n\
    \    |                 |\n    |                 expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0277.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .split_whitespace()\n\
    \        .map(|n| match n.parse::<usize>() {\n            Ok(n) => n,\n      \
    \      Err(_) => panic!(\"{} is not a valid number; expected numbers between zero\
    \ and nine\", n),\n        })\n        .sorted()\n        .collect()\n       \
    \ .join(' ')\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmpem66pxoi.rs:13:10\n   |\n13 |         .sorted()\n   | \
    \         ^^^^^^ method not found in `Map<SplitWhitespace<'_>, [closure@/tmp/tmpem66pxoi.rs:9:14:\
    \ 12:10]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.to_ascii_lowercase().into_iter().collect()\n\
    \        .sort_by(|x, y| x.chars().zip(y.chars()).map(|(a, b)| a.cmp(b)).sum()).collect()\n\
    \        .join(' ')\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `into_iter` exists for struct `String`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmpgbzy1m5m.rs:7:34\n    |\n7 \
    \  |       numbers.to_ascii_lowercase().into_iter().collect()\n    |         \
    \                           ^^^^^^^^^\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `String: IntoIterator`\n            `&String: Iterator`\n   \
    \         which is required by `&String: IntoIterator`\n            `&mut String:\
    \ Iterator`\n            which is required by `&mut String: IntoIterator`\n  \
    \          `str: Sized`\n            which is required by `str: IntoIterator`\n\
    \            `str: Iterator`\n            which is required by `str: IntoIterator`\n\
    \            `&str: Iterator`\n            which is required by `&str: IntoIterator`\n\
    \            `&mut str: Iterator`\n            which is required by `&mut str:\
    \ IntoIterator`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_vec: Vec<&str>\
    \ = numbers\n        .split_whitespace()\n        .collect();\n\n    let mut numbers_str:\
    \ String = String::new();\n\n    for mut num in numbers_vec.into_iter() {\n  \
    \      if num == \"zero\" || num == \"one\" || num == \"two\" || num == \"three\"\
    \ {\n            numbers_str.push(num);\n        }\n        if num == \"four\"\
    \ || num == \"five\" || num == \"six\" || num == \"seven\" {\n            numbers_str.push(num);\n\
    \        }\n        if num == \"eight\" || num == \"nine\" {\n            numbers_str.push(num);\n\
    \        }\n        if num == \"ten\" || num == \"eleven\" || num == \"twelve\"\
    \ || num == \"thirteen\" || num == \"fourteen\" || num == \"fifteen\" || num ==\
    \ \"sixteen\" || num == \"seventeen\" || num == \"eighteen\" || num == \"nineteen\"\
    \ {\n            numbers_str.push(\"ten\");\n        }\n    }\n\n    if numbers_str.len()\
    \ > 0 {\n        numbers_str.push(\"one\");\n    }\n\n    numbers_str\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpul4dsdf2.rs:15:30\n   |\n\
    15 |             numbers_str.push(num);\n   |                              ^^^\
    \ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpul4dsdf2.rs:18:30\n\
    \   |\n18 |             numbers_str.push(num);\n   |                         \
    \     ^^^ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpul4dsdf2.rs:21:30\n   |\n21 |             numbers_str.push(num);\n \
    \  |                              ^^^ expected `char`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpul4dsdf2.rs:24:30\n   |\n24 |             numbers_str.push(\"\
    ten\");\n   |                              ^^^^^ expected `char`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpul4dsdf2.rs:29:26\n   |\n29 |\
    \         numbers_str.push(\"one\");\n   |                          ^^^^^ expected\
    \ `char`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut s = String::with_capacity(numbers.len());\n\
    \    let mut num_arr: Vec<usize> = vec![];\n    let mut last_digit = String::new();\n\
    \    let mut current_digit: usize = 0;\n    for c in numbers.chars() {\n     \
    \   if c.is_numeric() {\n            last_digit = c.to_string();\n        } else\
    \ {\n            match last_digit {\n                \"\" => panic!(\"Invalid\
    \ number format: {:?}\", last_digit),\n                c => {\n              \
    \      num_arr.push(current_digit);\n                    current_digit = 0;\n\
    \                    last_digit = c;\n                }\n            }\n     \
    \   }\n    }\n    num_arr.push(current_digit);\n    num_arr.sort_by(|a, b| a.cmp(b));\n\
    \    for i in 0..num_arr.len() {\n        let mut tmp: String = String::with_capacity(10);\n\
    \        if num_arr[i] == 0 {\n            tmp.push('.');\n        } else {\n\
    \            tmp.push_str(&num_arr[i].to_string());\n        }\n        tmp.push_str(&last_digit);\n\
    \        s.push(tmp);\n    }\n    s\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1u3189fw.rs:16:17\n   |\n\
    15 |             match last_digit {\n   |                   ---------- this expression\
    \ has type `String`\n16 |                 \"\" => panic!(\"Invalid number format:\
    \ {:?}\", last_digit),\n   |                 ^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1u3189fw.rs:35:16\n\
    \   |\n35 |         s.push(tmp);\n   |                ^^^ expected `char`, found\
    \ struct `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .split(\" \"\
    )\n        .sort_by(|a, b| a.cmp(b))\n        .join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmp7kkl8k7y.rs:9:10\n  |\n9 |         .sort_by(|a,\
    \ b| a.cmp(b))\n  |          ^^^^^^^ method not found in `std::str::Split<'_,\
    \ &str>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|&a|\
    \ a.parse::<usize>().unwrap()).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpz1tbqglp.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|&a|\
    \ a.parse::<usize>().unwrap()).collect()\n  |                                ^^^^^^^\
    \ method not found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut result = \"\";\n    let\
    \ mut splitted = numbers.split(\" \");\n    let mut numbers = vec![];\n    for\
    \ i in splitted.into_iter().skip(1).take(splitted.len() - 1).filter(|x| x.parse().is_ok())\
    \ {\n        numbers.push(i.parse().unwrap());\n    }\n    numbers.sort_by(|a,\
    \ b| a.cmp(b));\n    for i in numbers {\n        result = format!(\"{} {}\", result,\
    \ i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for struct `std::str::Split`\
    \ in the current scope\n  --> /tmp/tmpy9w4chjj.rs:10:57\n   |\n10 |     for i\
    \ in splitted.into_iter().skip(1).take(splitted.len() - 1).filter(|x| x.parse().is_ok())\
    \ {\n   |                                                         ^^^ method not\
    \ found in `std::str::Split<'_, &str>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpy9w4chjj.rs:15:18\n   |\n15 |         result = format!(\"{} {}\", result,\
    \ i);\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found\
    \ struct `String`\n   |\n   = note: this error originates in the macro `format`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy9w4chjj.rs:17:5\n   |\n6  | fn sort_numbers(numbers:\
    \ String) -> String {\n   |                                     ------ expected\
    \ `String` because of return type\n...\n17 |     result\n   |     ^^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |     |\n   |     expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort().join();\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpuiebfeop.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort().join();\n\
    \  |                                ^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpuiebfeop.rs:6:37\n  |\n6 | fn sort_numbers(numbers:\
    \ String) -> String {\n  |    ------------                     ^^^^^^ expected\
    \ struct `String`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(\" \").sort_by(|a,\
    \ b| a.cmp(b)).join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpc93x3fio.rs:7:24\n  |\n7 |     numbers.split(\"\
    \ \").sort_by(|a, b| a.cmp(b)).join(\" \")\n  |                        ^^^^^^^\
    \ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .split_whitespace()\n\
    \        .sorted()\n        .collect()\n        .join(' ')\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpwnn3nisp.rs:9:10\n  |\n9 |         .sorted()\n\
    \  |          ^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_vec = numbers.splitn(2,\
    \ ' ').collect::<Vec<String>>();\n    numbers_vec.sort();\n    numbers_vec.dedup();\n\
    \    String::from_utf8(numbers_vec).unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp8y2m77_f.rs:7:50\n     |\n7  \
    \  |     let mut numbers_vec = numbers.splitn(2, ' ').collect::<Vec<String>>();\n\
    \     |                                                  ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n\
    \     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8y2m77_f.rs:10:23\n\
    \   |\n10 |     String::from_utf8(numbers_vec).unwrap()\n   |                \
    \       ^^^^^^^^^^^ expected `u8`, found struct `String`\n   |\n   = note: expected\
    \ struct `Vec<u8>`\n              found struct `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.to_string();\n\
    \n    if numbers.is_empty() {\n        numbers = \"zero\";\n    }\n\n    let mut\
    \ numbers = numbers.split_whitespace().collect::<Vec<&str>>();\n    let mut numbers\
    \ = numbers.sort();\n\n    numbers.iter().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_y_p9ujs.rs:10:19\n   |\n\
    7  |     let mut numbers = numbers.to_string();\n   |                       -------------------\
    \ expected due to this value\n...\n10 |         numbers = \"zero\";\n   |    \
    \               ^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                   |\n   |                   expected struct `String`, found\
    \ `&str`\n\nerror[E0599]: no method named `iter` found for unit type `()` in the\
    \ current scope\n  --> /tmp/tmp_y_p9ujs.rs:16:13\n   |\n16 |     numbers.iter().collect::<String>()\n\
    \   |             ^^^^ method not found in `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    strings.sort_by(|a, b| {\n  \
    \      let mut i = 0;\n        let mut j = 0;\n        let mut a = a.to_owned();\n\
    \        let mut b = b.to_owned();\n        while i < a.len() && j < b.len() {\n\
    \            if a[i] < b[j] {\n                break;\n            }\n       \
    \     i += 1;\n            j += 1\n        }\n        if i == a.len() {\n    \
    \        return 1;\n        }\n        if j == b.len() {\n            return -1;\n\
    \        }\n        a[i] < b[j] ? -1 : 1;\n    })\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error: expected type, found `1`\n  --> /tmp/tmp6is2be5f.rs:25:28\n   |\n\
    25 |         a[i] < b[j] ? -1 : 1;\n   |                          - ^ expected\
    \ type\n   |                          |\n   |                          tried to\
    \ parse a type due to this\n\nerror[E0425]: cannot find value `strings` in this\
    \ scope\n --> /tmp/tmp6is2be5f.rs:7:5\n  |\n7 |     strings.sort_by(|a, b| {\n\
    \  |     ^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(' ')\n        .map(|n|\
    \ n.parse::<u8>().expect(\"failed to parse input\"))\n        .sort_unstable()\n\
    \        .map(|x| x.to_string())\n        .join(' ')\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_unstable` found for struct `Map` in\
    \ the current scope\n --> /tmp/tmpj9q226wa.rs:9:10\n  |\n9 |         .sort_unstable()\n\
    \  |          ^^^^^^^^^^^^^ method not found in `Map<std::str::Split<'_, char>,\
    \ [closure@/tmp/tmpj9q226wa.rs:8:14: 8:65]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp5k74ik62.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n  |                                ^^^^^^^ method not found in\
    \ `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.chars().flat_map(|c|\
    \ match c {\n        '0' .. '9' => [c as u8],\n        _ => return String::new(),\n\
    \    }).collect::<Vec<u8>>().sort_by(|a, b| b.cmp(&a)).collect::<Vec<_>>()\n \
    \       .iter().map(|c| match c {\n            0 => '0',\n            1 => '1',\n\
    \            2 => '2',\n            3 => '3',\n            4 => '4',\n       \
    \     5 => '5',\n            6 => '6',\n            7 => '7',\n            8 =>\
    \ '8',\n            9 => '9',\n            _ => panic!(\"Bad digit {:?}\", c),\n\
    \        }).collect::<String>().to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmp54t0pytp.rs:8:9\n\
    \  |\n8 |         '0' .. '9' => [c as u8],\n  |         ^^^^^^^^^^\n  |\n  = note:\
    \ see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp54t0pytp.rs:7:34\n   |\n6  | \
    \  fn sort_numbers(numbers: String) -> String {\n   |                        \
    \               ------ expected `_` because of return type\n7  |       numbers.chars().flat_map(|c|\
    \ match c {\n   |  __________________________________^\n8  | |         '0' ..\
    \ '9' => [c as u8],\n9  | |         _ => return String::new(),\n10 | |     }).collect::<Vec<u8>>().sort_by(|a,\
    \ b| b.cmp(&a)).collect::<Vec<_>>()\n   | |_____^ expected struct `String`, found\
    \ array `[u8; 1]`\n   |\nnote: return type inferred to be `String` here\n  -->\
    \ /tmp/tmp54t0pytp.rs:9:21\n   |\n9  |         _ => return String::new(),\n  \
    \ |                     ^^^^^^^^^^^^^\n\nerror[E0277]: `String` is not an iterator\n\
    \    --> /tmp/tmp54t0pytp.rs:7:30\n     |\n7    |       numbers.chars().flat_map(|c|\
    \ match c {\n     |  _____________________--------_^\n     | |               \
    \      |\n     | |                     required by a bound introduced by this\
    \ call\n8    | |         '0' .. '9' => [c as u8],\n9    | |         _ => return\
    \ String::new(),\n10   | |     }).collect::<Vec<u8>>().sort_by(|a, b| b.cmp(&a)).collect::<Vec<_>>()\n\
    \     | |_____^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n\
    \     |\n     = help: the trait `Iterator` is not implemented for `String`\n \
    \    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `String`\nnote: required by a bound in `flat_map`\n\nerror[E0599]: the method\
    \ `collect` exists for struct `FlatMap<Chars<'_>, String, [closure@/tmp/tmp54t0pytp.rs:7:30:\
    \ 10:6]>`, but its trait bounds were not satisfied\n   --> /tmp/tmp54t0pytp.rs:10:8\n\
    \    |\n10  |       }).collect::<Vec<u8>>().sort_by(|a, b| b.cmp(&a)).collect::<Vec<_>>()\n\
    \    |          ^^^^^^^ method cannot be called on `FlatMap<Chars<'_>, String,\
    \ [clos"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.to_string();\n\
    \    numbers.split(' ').sort_unstable_by(|a, b| a.cmp(b)).collect::<Vec<_>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_unstable_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpzxjd23zw.rs:8:24\n  |\n8 |     numbers.split('\
    \ ').sort_unstable_by(|a, b| a.cmp(b)).collect::<Vec<_>>()\n  |              \
    \          ^^^^^^^^^^^^^^^^ method not found in `std::str::Split<'_, char>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.split_whitespace();\n\
    \    numbers.sort_by(|&a| a.to_digit(10).unwrap());\n    numbers.join(\" \")\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpf0f72_q6.rs:8:13\n  |\n8 |     numbers.sort_by(|&a|\
    \ a.to_digit(10).unwrap());\n  |             ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `join` found for struct `SplitWhitespace` in the\
    \ current scope\n --> /tmp/tmpf0f72_q6.rs:9:13\n  |\n9 |     numbers.join(\" \"\
    )\n  |             ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| a.to_i32().cmp(&b.to_i32())).collect::<String>().to_string()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmproqso2ox.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| a.to_i32().cmp(&b.to_i32())).collect::<String>().to_string()\n  |       \
    \                         ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_array = numbers.split(\"\
    \ \").collect::<Vec<String>>();\n    numbers_array\n        .sort_by_key(|x| x.parse().unwrap())\n\
    \        .iter()\n        .cloned()\n        .collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpsehc36ws.rs:7:48\n     |\n7  \
    \  |     let mut numbers_array = numbers.split(\" \").collect::<Vec<String>>();\n\
    \     |                                                ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0599]: no method named `iter` found for unit\
    \ type `()` in the current scope\n  --> /tmp/tmpsehc36ws.rs:10:10\n   |\n10 |\
    \         .iter()\n   |          ^^^^ method not found in `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.to_owned();\n\
    \    let mut numbers_vec = Vec::new();\n    let mut index = 0;\n    let mut number_digits\
    \ = numbers.len();\n    while number_digits > 0 {\n        let digit = numbers.chars().next().unwrap();\n\
    \        if digit != '0' && digit != '1' {\n            break;\n        }\n  \
    \      numbers_vec.push(digit);\n        numbers = &numbers[1..];\n        number_digits\
    \ -= 1;\n        index +=1;\n    }\n    numbers.push_str(\"one\");\n    numbers.push_str(\"\
    zero\");\n    numbers.push_str(\"two\");\n    numbers.push_str(\"three\");\n \
    \   numbers.push_str(\"four\");\n    numbers.push_str(\"five\");\n    numbers.push_str(\"\
    six\");\n    numbers.push_str(\"seven\");\n    numbers.push_str(\"eight\");\n\
    \    numbers.push_str(\"nine\");\n    let mut result = String::new();\n    let\
    \ mut number_index = 0;\n    let mut number_string_index = 0;\n    let mut sort_index\
    \ = 0;\n    let mut sorted_numbers = Vec::new();\n    while number_index < numbers.len()\
    \ {\n        let mut string_digit = numbers.chars().nth(number_index).unwrap().to_string();\n\
    \        if string_digit != \"0\" && string_digit != \"1\" {\n            sorted_numbers.push_back(string_digit);\n\
    \            number_index += 1;\n            continue;\n        }\n        let\
    \ mut string_digit = numbers.chars().nth(number_index).unwrap().to_string();\n\
    \        if string_digit != \"one\" && string_digit != \"two\" && string_digit\
    \ != \"three\" && string_digit != \"four\" && string_digit != \"five\" && string_digit\
    \ != \"six\" && string_digit != \"seven\" && string_digit != \"eight\" && string_digit\
    \ != \"nine\" {\n            number_index += 1;\n            continue;\n     \
    \   }\n        if string_digit != \"zero\" && string_digit != \"one\" && string_digit\
    \ != \"two\" && string_digit != \"three\" && string_digit != \"four\" && string_digit\
    \ != \"five\" && string_digit != \"six\" && string_digit != \"seven\" && string_digit\
    \ != \"eight\" && string_digit != \"nine\" {\n            number_index += 1;\n\
    \            continue;\n        }\n        let mut mut_index = 0;\n        while\
    \ mut_index < sorted_numbers.len() {\n            let mut string_digit = sorted_numbers[mut_index].to_string();\n\
    \            if string_digit != \"0\" && string_digit != \"1\" {\n           \
    \     break;\n            }\n            mut_index += 1;\n        }\n        if\
    \ sorted_numbers.len() == 0 {\n            sorted_numbers.push_back(\"one\");\n\
    \            sorted_numbers.push_back(\"zero\");\n            number_index +=\
    \ 1;\n            continue;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmprqtry56u.rs:74:3\n\
    \   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                             - unclosed delimiter\n...\n36 |     while number_index\
    \ < numbers.len() {\n   |                                        - unclosed delimiter\n\
    ...\n60 |         if sorted_numbers.len() == 0 {\n   |                       \
    \               - this delimiter might not be properly closed...\n...\n65 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n74 | }\n\
    \   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprqtry56u.rs:17:19\n\
    \   |\n7  |     let mut numbers = numbers.to_owned();\n   |                  \
    \     ------------------ expected due to this value\n...\n17 |         numbers\
    \ = &numbers[1..];\n   |                   ^^^^^^^^^^^^^ expected struct `String`,\
    \ found `&str`\n   |\nhelp: try using a conversion method\n   |\n17 |        \
    \ numbers = (&numbers[1..]).to_string();\n   |                   +           \
    \  +++++++++++++\n\nerror[E0599]: no method named `push_back` found for struct\
    \ `Vec<_>` in the current scope\n  --> /tmp/tmprqtry56u.rs:39:28\n   |\n39 | \
    \            sorted_numbers.push_back(string_digit);\n   |                   \
    \         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprqtry56u.rs:36:5\n   |\n6  |   fn sort_numbers(numbers: String)\
    \ -> String {\n   |                                       ------ expected `String`\
    \ because of return type\n...\n36 | /     while number_index < numbers.len() {\n\
    37 | |         let mut string_digit = numbers.chars().nth(number_index).unwrap().to_string();\n\
    38 | |         if string_digit != \"0\" && string_digit != \"1\" {\n39 | |   \
    \          sorted_numbers.push_back(string_digit);\n...  |\n73 | |     assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n74 | | }\n   | |__^ expected struct `String`, found `()`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more infor"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    // TODO: validate input\n   \
    \ let mut numbers = numbers.split_whitespace();\n    let mut result = String::from(\"\
    0\");\n    numbers.sort();\n    for n in numbers {\n        result = &result.push_str(&n);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpceq4r_hb.rs:10:13\n   |\n10 |     numbers.sort();\n\
    \   |             ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpceq4r_hb.rs:12:18\n   |\n9  |     let mut result\
    \ = String::from(\"0\");\n   |                      ----------------- expected\
    \ due to this value\n...\n12 |         result = &result.push_str(&n);\n   |  \
    \                ^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `&()`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut output = \"\";\n    let\
    \ mut numbers_vec: Vec<String> = numbers.split(\" \").collect();\n\n    for x\
    \ in numbers_vec.iter() {\n        match x.to_ascii_lowercase() {\n          \
    \  \"zero\" => output += \"0\",\n            \"one\" => output += \"1\",\n   \
    \         \"two\" => output += \"2\",\n            \"three\" => output += \"3\"\
    ,\n            \"four\" => output += \"4\",\n            \"five\" => output +=\
    \ \"5\",\n            \"six\" => output += \"6\",\n            \"seven\" => output\
    \ += \"7\",\n            \"eight\" => output += \"8\",\n            \"nine\" =>\
    \ output += \"9\",\n            _ => continue,\n        }\n    }\n\n    output\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpbhvnpb6y.rs:8:59\n     |\n8  \
    \  |     let mut numbers_vec: Vec<String> = numbers.split(\" \").collect();\n\
    \     |                                                           ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbhvnpb6y.rs:12:13\n\
    \   |\n11 |         match x.to_ascii_lowercase() {\n   |               ----------------------\
    \ this expression has type `String`\n12 |             \"zero\" => output += \"\
    0\",\n   |             ^^^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbhvnpb6y.rs:13:13\n   |\n11 |         match\
    \ x.to_ascii_lowercase() {\n   |               ---------------------- this expression\
    \ has type `String`\n12 |             \"zero\" => output += \"0\",\n13 |     \
    \        \"one\" => output += \"1\",\n   |             ^^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbhvnpb6y.rs:14:13\n\
    \   |\n11 |         match x.to_ascii_lowercase() {\n   |               ----------------------\
    \ this expression has type `String`\n...\n14 |             \"two\" => output +=\
    \ \"2\",\n   |             ^^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbhvnpb6y.rs:15:13\n   |\n11 |         match\
    \ x.to_ascii_lowercase() {\n   |               ---------------------- this expression\
    \ has type `String`\n...\n15 |             \"three\" => output += \"3\",\n   |\
    \             ^^^^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbhvnpb6y.rs:16:13\n   |\n11 |         match\
    \ x.to_ascii_lowercase() {\n   |               ---------------------- this expression\
    \ has type `String`\n...\n16 |             \"four\" => output += \"4\",\n   |\
    \            "
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers = numbers.to_string().split_whitespace().collect::<Vec<_>>();\n\
    \n    sorted_numbers.sort_by(|a, b| a.cmp(b));\n\n    String::from_iter(&sorted_numbers).unwrap()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `from_iter` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmper8m3ik3.rs:11:13\n   |\n\
    11 |     String::from_iter(&sorted_numbers).unwrap()\n   |             ^^^^^^^^^\
    \ function or associated item not found in `String`\n   |\n   = help: items from\
    \ traits can only be used if the trait is in scope\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use\
    \ std::iter::FromIterator;\n   |\nhelp: there is an associated function with a\
    \ similar name\n   |\n11 |     String::from_utf8(&sorted_numbers).unwrap()\n \
    \  |             ~~~~~~~~~\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers\n \
    \       .split_whitespace()\n        .map(|n| n.parse().ok())\n        .collect::<Result<Vec<_>,\
    \ _>>()\n        .unwrap();\n    numbers.sort_by_key(|n| n.0);\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Result<Vec<_>, _>` cannot be built from\
    \ an iterator over elements of type `Option<_>`\n    --> /tmp/tmpysgksrbv.rs:10:10\n\
    \     |\n10   |         .collect::<Result<Vec<_>, _>>()\n     |          ^^^^^^^\
    \ value of type `Result<Vec<_>, _>` cannot be built from `std::iter::Iterator<Item=Option<_>>`\n\
    \     |\n     = help: the trait `FromIterator<Option<_>>` is not implemented for\
    \ `Result<Vec<_>, _>`\n     = help: the trait `FromIterator<Result<A, E>>` is\
    \ implemented for `Result<V, E>`\nnote: required by a bound in `collect`\n\nerror[E0609]:\
    \ no field `0` on type `&_`\n  --> /tmp/tmpysgksrbv.rs:12:31\n   |\n12 |     numbers.sort_by_key(|n|\
    \ n.0);\n   |                               ^\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums = String::new();\n\
    \    let mut numbers: Vec<i32> = numbers.split_whitespace().collect();\n    let\
    \ n = numbers.len();\n    for mut i in 0..n-1 {\n        if nums.len() < i {\n\
    \            nums.push_str(numbers[i % n].to_string());\n        } else {\n  \
    \          nums.push_str(numbers[i % n].to_string() + ' ');\n        }\n    }\n\
    \    nums\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<i32>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpl089g55c.rs:8:60\n     |\n8  \
    \  |     let mut numbers: Vec<i32> = numbers.split_whitespace().collect();\n \
    \    |                                                            ^^^^^^^ value\
    \ of type `Vec<i32>` cannot be built from `std::iter::Iterator<Item=&str>`\n \
    \    |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<i32>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl089g55c.rs:12:27\n\
    \   |\n12 |             nums.push_str(numbers[i % n].to_string());\n   |     \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                      \
    \     |\n   |                           expected `&str`, found struct `String`\n\
    \   |                           help: consider borrowing here: `&numbers[i % n].to_string()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl089g55c.rs:14:56\n   |\n14 |\
    \             nums.push_str(numbers[i % n].to_string() + ' ');\n   |         \
    \                                               ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    14 |             nums.push_str(numbers[i % n].to_string() + \" \");\n   |    \
    \                                                    ~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl089g55c.rs:14:27\n   |\n14 |             nums.push_str(numbers[i\
    \ % n].to_string() + ' ');\n   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                           |\n   |                           expected `&str`,\
    \ found struct `String`\n   |                           help: consider borrowing\
    \ here: `&(numbers[i % n].to_string() + ' ')`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut output = \"\";\n    let\
    \ mut numbers = numbers.to_string();\n    numbers.split(' ').sort_unstable_by_key(|n|\
    \ n.parse().unwrap()).for_each(|n| {\n        output += n.to_string() + \" \"\
    ;\n    });\n    output\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_unstable_by_key` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpm31ii6jq.rs:9:24\n  |\n9 |     numbers.split('\
    \ ').sort_unstable_by_key(|n| n.parse().unwrap()).for_each(|n| {\n  |        \
    \                ^^^^^^^^^^^^^^^^^^^^ method not found in `std::str::Split<'_,\
    \ char>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm31ii6jq.rs:12:5\n \
    \  |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                \
    \                     ------ expected `String` because of return type\n...\n12\
    \ |     output\n   |     ^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |     |\n   |     expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted = String::new();\n\
    \    numbers.split(\" \").sort_by(|a, b| a.cmp(b)).for_each(|num| {\n        sorted.push_str(num);\n\
    \    });\n    sorted\n}\n\nfn main() {\n    let candidate = sort_numbers;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpv36jws95.rs:8:24\n  |\n8 |     numbers.split(\"\
    \ \").sort_by(|a, b| a.cmp(b)).for_each(|num| {\n  |                        ^^^^^^^\
    \ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut list = numbers.split(\"\
    \ \").collect::<Vec<String>>();\n    list.sort_unstable();\n    list.insert(0,\
    \ String::from(\"zero\"));\n    list.insert(0, String::from(\"one\"));\n    list.insert(0,\
    \ String::from(\"two\"));\n    list.insert(0, String::from(\"three\"));\n    list.insert(0,\
    \ String::from(\"four\"));\n    list.insert(0, String::from(\"five\"));\n    list.insert(0,\
    \ String::from(\"six\"));\n    list.insert(0, String::from(\"seven\"));\n    list.insert(0,\
    \ String::from(\"eight\"));\n    list.insert(0, String::from(\"nine\"));\n   \
    \ list.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp2lngqmqe.rs:7:39\n     |\n7  \
    \  |     let mut list = numbers.split(\" \").collect::<Vec<String>>();\n     |\
    \                                       ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.split_whitespace();\n\
    \    numbers.sort_by(|a, b| a.cmp(b));\n    numbers.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp2zzx4vw4.rs:8:13\n  |\n8 |     numbers.sort_by(|a,\
    \ b| a.cmp(b));\n  |             ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `join` found for struct `SplitWhitespace` in the\
    \ current scope\n --> /tmp/tmp2zzx4vw4.rs:9:13\n  |\n9 |     numbers.join(\" \"\
    )\n  |             ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut string: String = numbers.to_string();\n\
    \    string.sort_by(|x, y| x.cmp(y));\n    string\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp0x0eo3vl.rs:8:12\n  |\n8 |     string.sort_by(|x,\
    \ y| x.cmp(y));\n  |            ^^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| {\n        match a {\n            \"zero\" => 1,\n            \"one\" =>\
    \ 2,\n            \"two\" => 3,\n            \"three\" => 4,\n            \"four\"\
    \ => 5,\n            \"five\" => 6,\n            \"six\" => 7,\n            \"\
    seven\" => 8,\n            \"eight\" => 9,\n            \"nine\" => 0,\n     \
    \       _ => panic!(\"invalid sort numbers: {:?}\", a),\n        }\n        .cmp(b)\n\
    \    })\n    .collect()\n    .join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpd80oa_jv.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| {\n  |                                ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(\" \")\n      \
    \  .map(|x| x.parse::<usize>().unwrap())\n        .sort_unstable()\n        .collect()\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_unstable` found for struct `Map` in\
    \ the current scope\n --> /tmp/tmpa33enx2i.rs:9:10\n  |\n9 |         .sort_unstable()\n\
    \  |          ^^^^^^^^^^^^^ method not found in `Map<std::str::Split<'_, &str>,\
    \ [closure@/tmp/tmpa33enx2i.rs:8:14: 8:45]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut s = String::new();\n\
    \    for n in numbers.split_whitespace() {\n        if n.len() < 2 || n.len()\
    \ > 9 {\n            panic!(\"Invalid input\");\n        }\n        let mut nn\
    \ = String::new();\n        let mut i = 0;\n        for c in n.chars() {\n   \
    \         if i >= 9 {\n                break;\n            }\n            match\
    \ c {\n                '0' => nn += '0',\n                '1' => nn += '1',\n\
    \                '2' => nn += '2',\n                '3' => nn += '3',\n      \
    \          '4' => nn += '4',\n                '5' => nn += '5',\n            \
    \    '6' => nn += '6',\n                '7' => nn += '7',\n                '8'\
    \ => nn += '8',\n                '9' => nn += '9',\n                _ => (),\n\
    \            }\n            i += 1;\n        }\n        s = s.push_str(&nn);\n\
    \    }\n    Ok(s)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7v7vaor1.rs:19:30\n   |\n\
    19 |                 '0' => nn += '0',\n   |                              ^^^\
    \ expected `&str`, found `char`\n   |\nhelp: if you meant to write a `str` literal,\
    \ use double quotes\n   |\n19 |                 '0' => nn += \"0\",\n   |    \
    \                          ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7v7vaor1.rs:20:30\n\
    \   |\n20 |                 '1' => nn += '1',\n   |                          \
    \    ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant to write a `str`\
    \ literal, use double quotes\n   |\n20 |                 '1' => nn += \"1\",\n\
    \   |                              ~~~\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp7v7vaor1.rs:21:30\n   |\n21 |                 '2' => nn += '2',\n  \
    \ |                              ^^^ expected `&str`, found `char`\n   |\nhelp:\
    \ if you meant to write a `str` literal, use double quotes\n   |\n21 |       \
    \          '2' => nn += \"2\",\n   |                              ~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7v7vaor1.rs:22:30\n   |\n22 |              \
    \   '3' => nn += '3',\n   |                              ^^^ expected `&str`,\
    \ found `char`\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n22 |                 '3' => nn += \"3\",\n   |               \
    \               ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7v7vaor1.rs:23:30\n\
    \   |\n23 |                 '4' => nn += '4',\n   |                          \
    \    ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant to write a `str`\
    \ literal, use double quotes\n   |\n23 |                 '4' => nn += \"4\",\n\
    \   |                              ~~~\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp7v7vaor1.rs:24:30\n   |\n24 |                 '5' => nn += '5',\n  \
    \ |                              ^^^ expected `&str`, found `char`\n   |\nhelp:\
    \ if you meant to write a `str` literal, use double quotes\n   |\n24 |       \
    \          '5' => nn += \"5\",\n   |                              ~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7v7vaor1.rs:25:30\n   |\n25 |              \
    \   '6'"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut list = Vec::new();\n\
    \    numbers.split_whitespace().for_each(|n| {\n        match n {\n          \
    \  \"zero\" => list.push(n),\n            \"one\" => list.push(n),\n         \
    \   \"two\" => list.push(n),\n            \"three\" => list.push(n),\n       \
    \     \"four\" => list.push(n),\n            \"five\" => list.push(n),\n     \
    \       \"six\" => list.push(n),\n            \"seven\" => list.push(n),\n   \
    \         \"eight\" => list.push(n),\n            \"nine\" => list.push(n),\n\
    \            _ => {}\n        }\n    });\n    list.sort_by_key(|x| x.to_string());\n\
    \    list.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmp7qhq92_s.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,b|\
    \ a.cmp(b)).collect::<String>().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpelkgnzwp.rs:7:21\n  |\n7 |     numbers.chars().sort_by(|a,b|\
    \ a.cmp(b)).collect::<String>().to_string()\n  |                     ^^^^^^^ method\
    \ not found in `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut output = String::new();\n\
    \    let mut numbers_iter = numbers.splitn(9).map(|x| x.parse().unwrap()).collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    while i < numbers_iter.len() {\n        if i < numbers_iter.len()\
    \ - 1 && numbers_iter[i] == numbers_iter[i + 1] {\n            i += 1;\n     \
    \   } else {\n            output.push_str(&numbers_iter[i].to_string());\n   \
    \         i += 1;\n        }\n    }\n    output\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpxidql8gf.rs:8:36\n     |\n8    |     let mut numbers_iter = numbers.splitn(9).map(|x|\
    \ x.parse().unwrap()).collect::<Vec<_>>();\n     |                           \
    \         ^^^^^^ - supplied 1 argument\n     |                               \
    \     |\n     |                                    expected 2 arguments\n    \
    \ |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.split_whitespace();\n\
    \    let mut result: Vec<String> = Vec::new();\n    for num in numbers.into_iter().rev()\
    \ {\n        result.push((*num).to_string());\n    }\n    let mut result = result.into_iter().collect();\n\
    \    std::sort::sort_unstable(&mut result).collect();\n    let mut result = String::new();\n\
    \    for num in result {\n        result.push_str(num);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: could not find `sort` in `std`\n  -->\
    \ /tmp/tmpkwytp8u4.rs:13:10\n   |\n13 |     std::sort::sort_unstable(&mut result).collect();\n\
    \   |          ^^^^ could not find `sort` in `std`\n\nerror[E0277]: `String` is\
    \ not an iterator\n  --> /tmp/tmpkwytp8u4.rs:15:16\n   |\n15 |     for num in\
    \ result {\n   |                ^^^^^^ `String` is not an iterator; try calling\
    \ `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `String`\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    if numbers.is_empty() {\n   \
    \     return \"zero\";\n    }\n    let mut numbers = numbers.split_whitespace();\n\
    \    numbers.sort();\n    numbers.dedup();\n    numbers.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0rursuea.rs:8:16\n  |\n6 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |                          \
    \           ------ expected `String` because of return type\n7 |     if numbers.is_empty()\
    \ {\n8 |         return \"zero\";\n  |                ^^^^^^- help: try using\
    \ a conversion method: `.to_string()`\n  |                |\n  |             \
    \   expected struct `String`, found `&str`\n\nerror[E0599]: no method named `sort`\
    \ found for struct `SplitWhitespace` in the current scope\n  --> /tmp/tmp0rursuea.rs:11:13\n\
    \   |\n11 |     numbers.sort();\n   |             ^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `dedup` found for struct `SplitWhitespace` in\
    \ the current scope\n  --> /tmp/tmp0rursuea.rs:12:13\n   |\n12 |     numbers.dedup();\n\
    \   |             ^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0599]:\
    \ no method named `join` found for struct `SplitWhitespace` in the current scope\n\
    \  --> /tmp/tmp0rursuea.rs:13:13\n   |\n13 |     numbers.join(\" \")\n   |   \
    \          ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.split(\"\
    \ \").collect::<Vec<_>>();\n    numbers.sort();\n    format!(\"{} \", numbers.join(\"\
    \ \"))\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\" \"`,\n right: `\"\"`', /tmp/tmp_0sjh3nz.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.to_owned().split_whitespace().sort_by(|a,\
    \ b| a.to_digit() < b.to_digit()).collect::<Vec<String>>()\n        .join(' ')\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpoom29u2i.rs:7:43\n  |\n7 |     numbers.to_owned().split_whitespace().sort_by(|a,\
    \ b| a.to_digit() < b.to_digit()).collect::<Vec<String>>()\n  |              \
    \                             ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers = numbers.trim();\n\n\
    \    if numbers.is_empty() {\n        return String::new();\n    }\n\n    let\
    \ mut result = String::new();\n\n    let mut numbers = numbers\n        .split_whitespace()\n\
    \        .filter(|n| !n.is_empty())\n        .collect::<Vec<_>>();\n    numbers.sort_by_key(|n|\
    \ n.parse().unwrap());\n    let mut numbers = numbers[..numbers.len()];\n    numbers.sort_by_key(|n|\
    \ n.parse().unwrap());\n    numbers.reverse();\n\n    for number in numbers {\n\
    \        result = format!(\"{} {}\", result, number);\n    }\n\n    result\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp41sk14sm.rs:7:15\n  |\n6 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |                          ------\
    \ expected due to this parameter type\n7 |     numbers = numbers.trim();\n  |\
    \               ^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |               |\n  |               expected struct `String`, found `&str`\n\
    \nerror[E0277]: the size for values of type `[&str]` cannot be known at compilation\
    \ time\n  --> /tmp/tmp41sk14sm.rs:20:9\n   |\n20 |     let mut numbers = numbers[..numbers.len()];\n\
    \   |         ^^^^^^^^^^^ doesn't have a size known at compile-time\n   |\n  \
    \ = help: the trait `Sized` is not implemented for `[&str]`\n   = note: all local\
    \ variables must have a statically known size\n   = help: unsized locals are gated\
    \ as an unstable feature\nhelp: consider borrowing here\n   |\n20 |     let mut\
    \ numbers = &numbers[..numbers.len()];\n   |                       +\n\nerror[E0277]:\
    \ the size for values of type `[&str]` cannot be known at compilation time\n \
    \ --> /tmp/tmp41sk14sm.rs:24:19\n   |\n24 |     for number in numbers {\n   |\
    \                   ^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \   |\n   = note: the trait bound `[&str]: IntoIterator` is not satisfied\n  \
    \ = note: required because of the requirements on the impl of `IntoIterator` for\
    \ `[&str]`\nhelp: consider borrowing here\n   |\n24 |     for number in &numbers\
    \ {\n   |                   +\n24 |     for number in &mut numbers {\n   |   \
    \                ++++\n\nerror[E0277]: `[&str]` is not an iterator\n  --> /tmp/tmp41sk14sm.rs:24:19\n\
    \   |\n24 |     for number in numbers {\n   |                   ^^^^^^^ expected\
    \ an implementor of trait `IntoIterator`\n   |\n   = note: the trait bound `[&str]:\
    \ IntoIterator` is not satisfied\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `[&str]`\nhelp: consider borrowing here\n\
    \   |\n24 |     for number in &numbers {\n   |                   +\n24 |     for\
    \ number in &mut numbers {\n   |                   ++++\n\nerror: aborting due\
    \ to 4 previous err"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers_split = numbers.split_whitespace().collect::<Vec<_>>();\n\
    \    numbers_split.sort_by(|a, b| a.cmp(b));\n    numbers_split.join(\" \")\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `numbers_split` as mutable, as it is not declared\
    \ as mutable\n --> /tmp/tmpzhkcloe_.rs:8:5\n  |\n7 |     let numbers_split = numbers.split_whitespace().collect::<Vec<_>>();\n\
    \  |         ------------- help: consider changing this to be mutable: `mut numbers_split`\n\
    8 |     numbers_split.sort_by(|a, b| a.cmp(b));\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.to_string();\n\
    \    numbers.replace(\"nine\", \"9\");\n    numbers.replace(\"eight\", \"8\");\n\
    \    numbers.replace(\"seven\", \"7\");\n    numbers.replace(\"six\", \"6\");\n\
    \    numbers.replace(\"five\", \"5\");\n    numbers.replace(\"four\", \"4\");\n\
    \    numbers.replace(\"three\", \"3\");\n    numbers.replace(\"two\", \"2\");\n\
    \    numbers.replace(\"one\", \"1\");\n    numbers.replace(\"zero\", \"0\");\n\
    \n    numbers\n        .split_whitespace()\n        .sort_by(|a, b| a.cmp(b))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmps4k9gh17.rs:21:10\n   |\n21 |         .sort_by(|a,\
    \ b| a.cmp(b))\n   |          ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut list = numbers_to_list(numbers);\n\
    \    list.sort();\n    list_to_numbers(list)\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numbers_to_list` in this scope\n -->\
    \ /tmp/tmpxyskboxx.rs:7:20\n  |\n7 |     let mut list = numbers_to_list(numbers);\n\
    \  |                    ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `list_to_numbers` in this scope\n --> /tmp/tmpxyskboxx.rs:9:5\n\
    \  |\n9 |     list_to_numbers(list)\n  |     ^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmphomcubnj.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n  |                                ^^^^^^^ method not found in\
    \ `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(' ')\n        .map(|num|\
    \ match num.parse::<u8>() {\n            Ok(n) => n as u32,\n            Err(_)\
    \ => 0,\n        })\n        .sort_unstable()\n        .map(|n| String::from(u64::from(n).to_ascii_lowercase()))\n\
    \        .join(' ')\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_unstable` found for struct `Map` in\
    \ the current scope\n  --> /tmp/tmpct3npm7r.rs:12:10\n   |\n12 |         .sort_unstable()\n\
    \   |          ^^^^^^^^^^^^^ method not found in `Map<std::str::Split<'_, char>,\
    \ [closure@/tmp/tmpct3npm7r.rs:8:14: 11:10]>`\n\nerror[E0599]: no method named\
    \ `to_ascii_lowercase` found for type `u64` in the current scope\n  --> /tmp/tmpct3npm7r.rs:13:44\n\
    \   |\n13 |         .map(|n| String::from(u64::from(n).to_ascii_lowercase()))\n\
    \   |                                            ^^^^^^^^^^^^^^^^^^ method not\
    \ found in `u64`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.to_string();\n\
    \    numbers.remove(\" \");\n    numbers.sort_by_key(|x| match x.to_string().parse()\
    \ {\n        Ok(y) => y.to_string(),\n        Err(_) => x.to_string(),\n    })\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppmkutofg.rs:8:20\n  |\n8 |\
    \     numbers.remove(\" \");\n  |                    ^^^ expected `usize`, found\
    \ `&str`\n\nerror[E0599]: no method named `sort_by_key` found for struct `String`\
    \ in the current scope\n --> /tmp/tmppmkutofg.rs:9:13\n  |\n9 |     numbers.sort_by_key(|x|\
    \ match x.to_string().parse() {\n  |             ^^^^^^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(\" \")\n      \
    \  .map(|x| x.parse::<u32>().unwrap())\n        .sort_unstable()\n        .collect::<Vec<u32>>()\n\
    \        .to_owned()\n        .join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_unstable` found for struct `Map` in\
    \ the current scope\n --> /tmp/tmp9b5sljki.rs:9:10\n  |\n9 |         .sort_unstable()\n\
    \  |          ^^^^^^^^^^^^^ method not found in `Map<std::str::Split<'_, &str>,\
    \ [closure@/tmp/tmp9b5sljki.rs:8:14: 8:43]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut output = String::new();\n\
    \    for num in numbers.split(' ').collect::<Vec<_>>() {\n        match num.parse()\
    \ {\n            Ok(val) => output.push_str(&format!(\"{} \", val)),\n       \
    \     Err(_) => output.push_str(\"invalid input\"),\n        }\n    }\n    output\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp4idegm2f.rs:10:16\n\
    \   |\n10 |             Ok(val) => output.push_str(&format!(\"{} \", val)),\n\
    \   |                ^^^ cannot infer type\n   |\nhelp: consider specifying the\
    \ type argument in the method call\n   |\n9  |         match num.parse::<F>()\
    \ {\n   |                        +++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.split_whitespace();\n\
    \    let mut buffer = String::new();\n\n    for number in numbers {\n        if\
    \ number == \"zero\" {\n            buffer.push(\"zero\");\n        } else if\
    \ number == \"one\" {\n            buffer.push(\"one\");\n        } else if number\
    \ == \"two\" {\n            buffer.push(\"two\");\n        } else if number ==\
    \ \"three\" {\n            buffer.push(\"three\");\n        } else if number ==\
    \ \"four\" {\n            buffer.push(\"four\");\n        } else if number ==\
    \ \"five\" {\n            buffer.push(\"five\");\n        } else if number ==\
    \ \"six\" {\n            buffer.push(\"six\");\n        } else if number == \"\
    seven\" {\n            buffer.push(\"seven\");\n        } else if number == \"\
    eight\" {\n            buffer.push(\"eight\");\n        } else if number == \"\
    nine\" {\n            buffer.push(\"nine\");\n        } else {\n            return\
    \ format!(\"{}\", number);\n        }\n    }\n\n    return buffer;\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxpanc7tc.rs:12:25\n   |\n\
    12 |             buffer.push(\"zero\");\n   |                         ^^^^^^ expected\
    \ `char`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxpanc7tc.rs:14:25\n\
    \   |\n14 |             buffer.push(\"one\");\n   |                         ^^^^^\
    \ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxpanc7tc.rs:16:25\n\
    \   |\n16 |             buffer.push(\"two\");\n   |                         ^^^^^\
    \ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxpanc7tc.rs:18:25\n\
    \   |\n18 |             buffer.push(\"three\");\n   |                        \
    \ ^^^^^^^ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxpanc7tc.rs:20:25\n   |\n20 |             buffer.push(\"four\");\n \
    \  |                         ^^^^^^ expected `char`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxpanc7tc.rs:22:25\n   |\n22 |             buffer.push(\"\
    five\");\n   |                         ^^^^^^ expected `char`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpxpanc7tc.rs:24:25\n   |\n24 |  \
    \           buffer.push(\"six\");\n   |                         ^^^^^ expected\
    \ `char`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxpanc7tc.rs:26:25\n\
    \   |\n26 |             buffer.push(\"seven\");\n   |                        \
    \ ^^^^^^^ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxpanc7tc.rs:28:25\n   |\n28 |             buffer.push(\"eight\");\n\
    \   |                         ^^^^^^^ expected `char`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxpanc7tc.rs:30:25\n   |\n30 |             buffer.push(\"\
    nine\");\n   |                         ^^^^^^ expected `char`, found `&str`\n\n\
    error: aborting due to 10 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers = numbers\n     \
    \   .split_whitespace()\n        .map(|n| n.parse::<usize>())\n        .collect::<Vec<_>>()\n\
    \        .rev()\n        .join(\" \");\n\n    if numbers.is_empty() {\n      \
    \  String::from(\"zero\");\n    } else {\n        String::from(numbers.to_string());\n\
    \    }\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<Result<usize, ParseIntError>>` is not an iterator\n\
    \   --> /tmp/tmprg3g_tvh.rs:11:10\n    |\n11  |           .rev()\n    |      \
    \      ^^^ `Vec<Result<usize, ParseIntError>>` is not an iterator\n    |\n   \
    \ = note: the following trait bounds were not satisfied:\n            `Vec<Result<usize,\
    \ ParseIntError>>: Iterator`\n            which is required by `&mut Vec<Result<usize,\
    \ ParseIntError>>: Iterator`\n            `[Result<usize, ParseIntError>]: Iterator`\n\
    \            which is required by `&mut [Result<usize, ParseIntError>]: Iterator`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprg3g_tvh.rs:14:27\n   |\n14 |\
    \       if numbers.is_empty() {\n   |  ___________________________^\n15 | |  \
    \       String::from(\"zero\");\n   | |                             - help: remove\
    \ this semicolon\n16 | |     } else {\n   | |_____^ expected struct `String`,\
    \ found `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprg3g_tvh.rs:16:12\n\
    \   |\n16 |       } else {\n   |  ____________^\n17 | |         String::from(numbers.to_string());\n\
    \   | |                                          - help: remove this semicolon\n\
    18 | |     }\n   | |_____^ expected struct `String`, found `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums = vec![];\n    for\
    \ &c in numbers.chars() {\n        if c == '0' {\n            nums.push(0);\n\
    \        } else {\n            if c >= '0' && c <= '9' {\n                nums.push(c)\
    \ - '0'.to_owned();\n            } else {\n                nums.push('z' - 'a'.to_owned())\
    \ - 'a'.to_owned();\n            }\n        }\n    }\n    sort_numbers_impl(nums.clone(),\
    \ nums.len());\n    nums.iter().map(|&c| c.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sort_numbers_impl` in this scope\n\
    \  --> /tmp/tmpt4mudt9g.rs:19:5\n   |\n19 |     sort_numbers_impl(nums.clone(),\
    \ nums.len());\n   |     ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpt4mudt9g.rs:8:9\n  |\n8 |     for &c in numbers.chars()\
    \ {\n  |         ^^    --------------- this expression has type `Option<char>`\n\
    \  |         |\n  |         expected `char`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `c`\n  |\n  = note:   expected\
    \ type `char`\n          found reference `&_`\n\nerror[E0277]: can't compare `{integer}`\
    \ with `char`\n --> /tmp/tmpt4mudt9g.rs:9:14\n  |\n9 |         if c == '0' {\n\
    \  |              ^^ no implementation for `{integer} == char`\n  |\n  = help:\
    \ the trait `PartialEq<char>` is not implemented for `{integer}`\n  = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n            f32\n \
    \           f64\n            i128\n            i16\n            i32\n        \
    \    i64\n            i8\n            isize\n          and 6 others\n\nerror[E0277]:\
    \ can't compare `{integer}` with `char`\n  --> /tmp/tmpt4mudt9g.rs:12:18\n   |\n\
    12 |             if c >= '0' && c <= '9' {\n   |                  ^^ no implementation\
    \ for `{integer} < char` and `{integer} > char`\n   |\n   = help: the trait `PartialOrd<char>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: can't compare `{integer}`\
    \ with `char`\n  --> /tmp/tmpt4mudt9g.rs:12:30\n   |\n12 |             if c >=\
    \ '0' && c <= '9' {\n   |                              ^^ no implementation for\
    \ `{integer} < char` and `{integer} > char`\n   |\n   = help: the trait `PartialOrd<char>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n   "
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    // Convert the string to a vector\
    \ of numbers\n    let mut numbers = numbers.trim().splitn(\" \", 3).collect::<Vec<_>>();\n\
    \n    // If the vector is empty, return nothing\n    if numbers.is_empty() {\n\
    \        return \"\";\n    }\n\n    // Get the minimum value\n    let min = numbers[0];\n\
    \n    // Get the maximum value\n    let max = numbers[2];\n\n    // Create a vector\
    \ of numbers between the minimum value and the maximum value\n    let mut vec\
    \ = vec![min..=max];\n\n    // Get the sum of all numbers\n    let sum = vec.iter().cloned().sum();\n\
    \n    // If the sum is equal to zero, return nothing\n    if sum == 0 {\n    \
    \    return \"\";\n    }\n\n    // Sort the numbers vector and join it with the\
    \ separator\n    numbers = vec.sort().collect::<Vec<_>>().join(\" \");\n\n   \
    \ // Return the sorted numbers\n    numbers\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphgchr8v9.rs:8:45\n  |\n8 |\
    \     let mut numbers = numbers.trim().splitn(\" \", 3).collect::<Vec<_>>();\n\
    \  |                                             ^^^ expected `usize`, found `&str`\n\
    \nerror[E0277]: expected a `FnMut<(char,)>` closure, found `{integer}`\n    -->\
    \ /tmp/tmphgchr8v9.rs:8:50\n     |\n8    |     let mut numbers = numbers.trim().splitn(\"\
    \ \", 3).collect::<Vec<_>>();\n     |                                      ------\
    \      ^ expected an `FnMut<(char,)>` closure, found `{integer}`\n     |     \
    \                                 |\n     |                                  \
    \    required by a bound introduced by this call\n     |\n     = help: the trait\
    \ `FnMut<(char,)>` is not implemented for `{integer}`\n     = help: the following\
    \ other types implement trait `Pattern<'a>`:\n               &'b String\n    \
    \           &'b [char; N]\n               &'b [char]\n               &'b str\n\
    \               &'c &'b str\n               [char; N]\n               char\n \
    \              pattern::MultiCharEqPattern<C>\n     = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `{integer}`\nnote: required\
    \ by a bound in `core::str::<impl str>::splitn`\n\nerror[E0599]: the method `collect`\
    \ exists for struct `std::str::SplitN<'_, {integer}>`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmphgchr8v9.rs:8:53\n    |\n8   |       let mut numbers\
    \ = numbers.trim().splitn(\" \", 3).collect::<Vec<_>>();\n    |              \
    \                                         ^^^^^^^ method cannot be called on `std::str::SplitN<'_,\
    \ {integer}>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `{integer}: Pattern<'_>`\n   \
    \         which is required by `std::str::SplitN<'_, {integer}>: Iterator`\n \
    \           `std::str::SplitN<'_, {integer}>: Iterator`\n            which is\
    \ required by `&mut std::str::SplitN<'_, {integer}>: Iterator`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphgchr8v9.rs:12:16\n   |\n6  | fn sort_numbers(numbers:\
    \ String) -> String {\n   |      "
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    strings.sort_by_key(|x| x.parse::<u32>().unwrap())\n\
    \        .into_iter()\n        .collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `strings` in this scope\n --> /tmp/tmprbkib7bn.rs:7:5\n\
    \  |\n7 |     strings.sort_by_key(|x| x.parse::<u32>().unwrap())\n  |     ^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp3e6fkmcm.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n  |                                ^^^^^^^ method not found in\
    \ `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    // Find the first and last indices\
    \ of numbers to sort\n    let first_index_of_first = numbers.split_whitespace()[0];\n\
    \    let last_index_of_last = numbers.split_whitespace().len();\n\n    // If the\
    \ first index has already been sorted, reverse the list by swapping the first\
    \ and last indices.\n    let first_index_is_sorted = first_index_of_first == 0\n\
    \        || first_index_of_first == numbers.split_whitespace().iter().last().unwrap().unwrap();\n\
    \n    let string_to_return = if first_index_is_sorted {\n        numbers\n   \
    \ } else {\n        numbers.split_whitespace().reverse().join(\" \")\n    };\n\
    \n    // If the last index has already been sorted, reverse the list by swapping\
    \ the first and last indices.\n    let last_index_is_sorted = last_index_of_last\
    \ == 0\n        || last_index_of_last == strings.split_whitespace().iter().last().unwrap().unwrap();\n\
    \n    let string_to_return = if last_index_is_sorted {\n        string_to_return\n\
    \    } else {\n        string_to_return.split_whitespace().reverse().join(\" \"\
    )\n    }\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptcr2t7l8.rs:29:6\n   |\n\
    29 |     }\n   |      ^ help: add `;` here\n30 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `strings` in this scope\n  --> /tmp/tmptcr2t7l8.rs:23:34\n\
    \   |\n23 |         || last_index_of_last == strings.split_whitespace().iter().last().unwrap().unwrap();\n\
    \   |                                  ^^^^^^^ not found in this scope\n\nerror[E0608]:\
    \ cannot index into a value of type `SplitWhitespace<'_>`\n --> /tmp/tmptcr2t7l8.rs:8:32\n\
    \  |\n8 |     let first_index_of_first = numbers.split_whitespace()[0];\n  | \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0599]:\
    \ no method named `len` found for struct `SplitWhitespace` in the current scope\n\
    \ --> /tmp/tmptcr2t7l8.rs:9:57\n  |\n9 |     let last_index_of_last = numbers.split_whitespace().len();\n\
    \  |                                                         ^^^ method not found\
    \ in `SplitWhitespace<'_>`\n\nerror[E0599]: no method named `iter` found for struct\
    \ `SplitWhitespace` in the current scope\n  --> /tmp/tmptcr2t7l8.rs:13:63\n  \
    \ |\n13 |         || first_index_of_first == numbers.split_whitespace().iter().last().unwrap().unwrap();\n\
    \   |                                                               ^^^^ method\
    \ not found in `SplitWhitespace<'_>`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `SplitWhitespace` in the current scope\n  --> /tmp/tmptcr2t7l8.rs:18:36\n\
    \   |\n18 |         numbers.split_whitespace().reverse().join(\" \")\n   |   \
    \                                 ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmptcr2t7l8.rs:6:37\n  |\n6 | fn sort_numbers(numbers:\
    \ String) -> String {\n  |    ------------                     ^^^^^^ expected\
    \ struct `String`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 7 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425, E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(' ').sort_by(|a,\
    \ b| {\n        match a {\n            '0' => Ordering::Less,\n            '1'\
    \ => Ordering::Equal,\n            '2' => Ordering::Greater,\n            _ =>\
    \ Ordering::Unspecified\n        }\n        match b {\n            '0' => Ordering::Less,\n\
    \            '1' => Ordering::Equal,\n            '2' => Ordering::Greater,\n\
    \            _ => Ordering::Unspecified\n        }\n    })\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n -->\
    \ /tmp/tmpozcnyopw.rs:9:20\n  |\n9 |             '0' => Ordering::Less,\n  | \
    \                   ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpozcnyopw.rs:10:20\n\
    \   |\n10 |             '1' => Ordering::Equal,\n   |                    ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpozcnyopw.rs:11:20\n   |\n11 |    \
    \         '2' => Ordering::Greater,\n   |                    ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmpozcnyopw.rs:12:18\n   |\n12 |             _ => Ordering::Unspecified\n\
    \   |                  ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpozcnyopw.rs:15:20\n\
    \   |\n15 |             '0' => Ordering::Less,\n   |                    ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpozcnyopw.rs:16:20\n   |\n16 |    \
    \         '1' => Ordering::Equal,\n   |                    ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmpozcnyopw.rs:17:20\n   |\n17 |             '2' => Ordering::Greater,\n\
    \   |                    ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpozcnyopw.rs:18:18\n\
    \   |\n18 |             _ => Ordering::Unspecified\n   |                  ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0599]: no method named `sort_by`\
    \ found for struct `std::str::Split` in the current scope\n --> /tmp/tmpozcnyopw.rs:7:24\n\
    \  |\n7 |     numbers.split(' ').sort_by(|a, b| {\n  |                       \
    \ ^^^^^^^ method not found in `std::str::Split<'_, char>`\n\nerror: aborting due\
    \ to 9 previous errors\n\nSome errors have detailed explanations: E0433"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.to_lowercase();\n\
    \    let mut i = 0;\n    let mut buffer = String::new();\n    while i < numbers.len()\
    \ {\n        if numbers.chars().next().unwrap() == 'n' {\n            if buffer.is_empty()\
    \ {\n                buffer.push_str(numbers.as_slice());\n            }\n   \
    \         else {\n                buffer.push_str(\" \".to_owned());\n       \
    \         buffer.push_str(numbers.as_slice());\n            }\n            i +=\
    \ 1;\n        } else {\n            buffer.push_str(numbers.as_slice());\n   \
    \         i += 1;\n        }\n    }\n    buffer\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `as_slice` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmptcssogrg.rs:13:41\n   |\n13 |                 buffer.push_str(numbers.as_slice());\n\
    \   |                                         ^^^^^^^^ method not found in `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptcssogrg.rs:16:33\n   |\n16 |\
    \                 buffer.push_str(\" \".to_owned());\n   |                   \
    \              ^^^^^^^^^^^^^^\n   |                                 |\n   |  \
    \                               expected `&str`, found struct `String`\n   | \
    \                                help: consider borrowing here: `&\" \".to_owned()`\n\
    \nerror[E0599]: no method named `as_slice` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmptcssogrg.rs:17:41\n   |\n17 |                 buffer.push_str(numbers.as_slice());\n\
    \   |                                         ^^^^^^^^ method not found in `String`\n\
    \nerror[E0599]: no method named `as_slice` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmptcssogrg.rs:21:37\n   |\n21 |             buffer.push_str(numbers.as_slice());\n\
    \   |                                     ^^^^^^^^ method not found in `String`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.to_owned();\n\
    \    numbers.sort_by(|a, b| {\n        match *a.to_str() {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"invalid number: {}\", a),\n\
    \        }\n        match *b.to_str() {\n            \"zero\" => 0,\n        \
    \    \"one\" => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n \
    \           \"four\" => 4,\n            \"five\" => 5,\n            \"six\" =>\
    \ 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n            \"\
    nine\" => 9,\n            _ => panic!(\"invalid number: {}\", b),\n        }\n\
    \    });\n    numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpr6tiot_j.rs:8:13\n  |\n8 |     numbers.sort_by(|a,\
    \ b| {\n  |             ^^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_arr = numbers.split_whitespace().collect::<Vec<_>>();\n\
    \    let mut sorted_numbers = vec![];\n    for i in 0..numbers_arr.len() {\n \
    \       sorted_numbers.push((numbers_arr[i] + \"\").to_digit(10).unwrap());\n\
    \    }\n    let mut sorted_numbers_string = String::new();\n    for i in sorted_numbers.iter()\
    \ {\n        sorted_numbers_string.push_str(*i);\n    }\n    sorted_numbers_string\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `&str` to `&str`\n  --> /tmp/tmpry9i_2rq.rs:10:45\n\
    \   |\n10 |         sorted_numbers.push((numbers_arr[i] + \"\").to_digit(10).unwrap());\n\
    \   |                              -------------- ^ -- &str\n   |            \
    \                  |              |\n   |                              |     \
    \         `+` cannot be used to concatenate two `&str` strings\n   |         \
    \                     &str\n   |\n   = note: string concatenation requires an\
    \ owned `String` on the left\nhelp: create an owned `String` from a string reference\n\
    \   |\n10 |         sorted_numbers.push((numbers_arr[i].to_owned() + \"\").to_digit(10).unwrap());\n\
    \   |                                            +++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(' ')\n        .map(|n|\
    \ n.parse().unwrap())\n        .sort_by_key(|n| n)\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmplp8knlvx.rs:9:10\n  |\n9 |         .sort_by_key(|n|\
    \ n)\n  |          ^^^^^^^^^^^ method not found in `Map<std::str::Split<'_, char>,\
    \ [closure@/tmp/tmplp8knlvx.rs:8:14: 8:36]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.chars().sorted().collect::<String>().trim()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpb119au6l.rs:7:21\n  |\n7 |     numbers.chars().sorted().collect::<String>().trim()\n\
    \  |                     ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers_array = numbers.split(\"\
    \ \");\n\n    numbers_array.sort_by(|&x| x.parse::<i32>().unwrap());\n    numbers_array.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmp5xojhjaa.rs:9:19\n  |\n9 |     numbers_array.sort_by(|&x|\
    \ x.parse::<i32>().unwrap());\n  |                   ^^^^^^^ method not found\
    \ in `std::str::Split<'_, &str>`\n\nerror[E0599]: no method named `join` found\
    \ for struct `std::str::Split` in the current scope\n  --> /tmp/tmp5xojhjaa.rs:10:19\n\
    \   |\n10 |     numbers_array.join(\" \")\n   |                   ^^^^ method\
    \ not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_map = HashMap::new();\n\
    \    let mut numbers_string = String::new();\n\n    for number in numbers.chars().take(numbers.len()\
    \ - 1).collect::<Vec<&str>>() {\n        let number = number.to_string();\n  \
    \      let number_int = number.parse().unwrap();\n        let number_str = number_int.to_string();\n\
    \n        if numbers_map.contains_key(&number_str) {\n            let number_int\
    \ = numbers_map.get(&number_str).unwrap().clone();\n            numbers_map.insert(number_str,\
    \ number_int + 1);\n        } else {\n            numbers_map.insert(number_str,\
    \ 1);\n        }\n    }\n\n    for numbers_value in numbers_map.values() {\n \
    \       let number_int = *numbers_value;\n        numbers_string.push_str(number_int.to_string());\n\
    \    }\n\n    numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpdqt5itkx.rs:7:27\n  |\n7 |     let mut numbers_map = HashMap::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0277]:\
    \ a value of type `Vec<&str>` cannot be built from an iterator over elements of\
    \ type `char`\n    --> /tmp/tmpdqt5itkx.rs:10:59\n     |\n10   |     for number\
    \ in numbers.chars().take(numbers.len() - 1).collect::<Vec<&str>>() {\n     |\
    \                                                           ^^^^^^^ value of type\
    \ `Vec<&str>` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n\
    \     = help: the trait `FromIterator<char>` is not implemented for `Vec<&str>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.to_string();\n\
    \    numbers.replace(b'0', b'9');\n    let mut number = String::new();\n    let\
    \ mut i = 0;\n    loop {\n        if numbers[i] != ' ' {\n            number.push_str(&numbers[i].to_string());\n\
    \        }\n        if numbers[i] == ' ' && numbers.len() > i + 1 && numbers[i\
    \ + 1] == ' ' {\n            number.push_str(\"0\");\n        }\n        i +=\
    \ 1;\n        if i == numbers.len() {\n            return number;\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8ssb8nwy.rs:8:27\n  |\n8 |\
    \     numbers.replace(b'0', b'9');\n  |                           ^^^^ expected\
    \ `&str`, found `u8`\n\nerror[E0277]: expected a `FnMut<(char,)>` closure, found\
    \ `u8`\n   --> /tmp/tmp8ssb8nwy.rs:8:13\n    |\n8   |     numbers.replace(b'0',\
    \ b'9');\n    |             ^^^^^^^ expected an `FnMut<(char,)>` closure, found\
    \ `u8`\n    |\n    = help: the trait `FnMut<(char,)>` is not implemented for `u8`\n\
    \    = help: the following other types implement trait `Pattern<'a>`:\n      \
    \        &'b String\n              &'b [char; N]\n              &'b [char]\n \
    \             &'b str\n              &'c &'b str\n              [char; N]\n  \
    \            char\n              pattern::MultiCharEqPattern<C>\n    = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `u8`\nnote: required\
    \ by a bound in `str::<impl str>::replace`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `{integer}`\n  --> /tmp/tmp8ssb8nwy.rs:12:12\n   |\n12\
    \ |         if numbers[i] != ' ' {\n   |            ^^^^^^^^^^ `String` cannot\
    \ be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is\
    \ not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n\
    \  --> /tmp/tmp8ssb8nwy.rs:13:30\n   |\n13 |             number.push_str(&numbers[i].to_string());\n\
    \   |                              ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n\
    \   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.split_whitespace();\n\
    \    numbers.sort();\n    numbers.dedup();\n    numbers.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpl3i8ibth.rs:8:13\n  |\n8 |     numbers.sort();\n\
    \  |             ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0599]:\
    \ no method named `dedup` found for struct `SplitWhitespace` in the current scope\n\
    \ --> /tmp/tmpl3i8ibth.rs:9:13\n  |\n9 |     numbers.dedup();\n  |           \
    \  ^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0599]: no method\
    \ named `join` found for struct `SplitWhitespace` in the current scope\n  -->\
    \ /tmp/tmpl3i8ibth.rs:10:13\n   |\n10 |     numbers.join(\" \")\n   |        \
    \     ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut s = String::with_capacity(numbers.len());\n\
    \n    let mut numbers_array = numbers.split_whitespace().collect::<Vec<_>>();\n\
    \    let mut min = std::i32::MAX;\n    let mut max = std::i32::MIN;\n    for i\
    \ in numbers_array.iter() {\n        match i {\n            &String::from(&i)\
    \ => {\n                let v: i32 = i.parse().unwrap();\n                if v\
    \ < min {\n                    min = v;\n                }\n                if\
    \ v > max {\n                    max = v;\n                }\n            }\n\
    \            _ => panic!(\"Invalid number: {}\", i),\n        }\n    }\n\n   \
    \ for i in numbers_array.iter() {\n        match i {\n            &String::from(&i)\
    \ => {\n                let v: i32 = i.parse().unwrap();\n                let\
    \ mut j: i32;\n                let mut s = String::with_capacity(10);\n      \
    \          for j in 0..10 {\n                    if v >= min && v <= max {\n \
    \                       s.push_str(j);\n                    } else if v > max\
    \ {\n                        s.push_str(9 - j);\n                    } else if\
    \ v < min {\n                        s.push_str(\"0\");\n                    }\n\
    \                }\n                s.push_str(i);\n            }\n          \
    \  _ => panic!(\"Invalid number: {}\", i),\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0164]: expected tuple struct or tuple variant, found associated\
    \ function `String::from`\n  --> /tmp/tmpwwadu9qe.rs:14:14\n   |\n14 |       \
    \      &String::from(&i) => {\n   |              ^^^^^^^^^^^^^^^^ `fn` calls are\
    \ not allowed in patterns\n   |\n   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \nerror[E0164]: expected tuple struct or tuple variant, found associated function\
    \ `String::from`\n  --> /tmp/tmpwwadu9qe.rs:29:14\n   |\n29 |             &String::from(&i)\
    \ => {\n   |              ^^^^^^^^^^^^^^^^ `fn` calls are not allowed in patterns\n\
    \   |\n   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwwadu9qe.rs:35:36\n   |\n35 |\
    \                         s.push_str(j);\n   |                               \
    \     ^ expected `&str`, found integer\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpwwadu9qe.rs:37:36\n   |\n37 |                         s.push_str(9 -\
    \ j);\n   |                                    ^^^^^ expected `&str`, found integer\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0164, E0308.\nFor more information about an error, try `rustc --explain E0164`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(' ')\n        .map(|n|\
    \ n.to_digit(10).to_string())\n        .collect::<Vec<String>>()\n        .sort_by(|a,\
    \ b| a.cmp(b))\n        .collect()\n        .join(' ')\n}\n\nfn main() {\n   \
    \ let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digit` found for reference `&str` in\
    \ the current scope\n --> /tmp/tmpupvxhjgj.rs:8:20\n  |\n8 |         .map(|n|\
    \ n.to_digit(10).to_string())\n  |                    ^^^^^^^^ method not found\
    \ in `&str`\n\nerror[E0599]: `()` is not an iterator\n  --> /tmp/tmpupvxhjgj.rs:11:10\n\
    \   |\n11 |         .collect()\n   |          ^^^^^^^ `()` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `():\
    \ Iterator`\n           which is required by `&mut (): Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.to_owned()\n        .chars()\n\
    \        .enumerate()\n        .map(|(i, x)| {\n            if x <= ' ' {\n  \
    \              x.to_string() + i.to_string()\n            } else {\n         \
    \       i.to_string().to_string() + x.to_string()\n            }\n        })\n\
    \        .sort_by_key(|s| s.to_owned())\n        .collect::<Vec<_>>()\n      \
    \  .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjfhtu_gl.rs:12:33\n   |\n\
    12 |                 x.to_string() + i.to_string()\n   |                     \
    \            ^^^^^^^^^^^^^\n   |                                 |\n   |     \
    \                            expected `&str`, found struct `String`\n   |    \
    \                             help: consider borrowing here: `&i.to_string()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjfhtu_gl.rs:14:45\n   |\n14 |\
    \                 i.to_string().to_string() + x.to_string()\n   |            \
    \                                 ^^^^^^^^^^^^^\n   |                        \
    \                     |\n   |                                             expected\
    \ `&str`, found struct `String`\n   |                                        \
    \     help: consider borrowing here: `&x.to_string()`\n\nerror[E0599]: no method\
    \ named `sort_by_key` found for struct `Map` in the current scope\n  --> /tmp/tmpjfhtu_gl.rs:17:10\n\
    \   |\n17 |         .sort_by_key(|s| s.to_owned())\n   |          ^^^^^^^^^^^\
    \ method not found in `Map<Enumerate<Chars<'_>>, [closure@/tmp/tmpjfhtu_gl.rs:10:14:\
    \ 16:10]>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted = String::new();\n\
    \    for digit in numbers.chars() {\n        sorted.push_str(digit as char);\n\
    \    }\n    sorted.sort_by_key(|i| i.to_string());\n    return sorted;\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx_z3f_ww.rs:9:25\n  |\n9 |\
    \         sorted.push_str(digit as char);\n  |                         ^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0599]: no method named `sort_by_key`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpx_z3f_ww.rs:11:12\n\
    \   |\n11 |     sorted.sort_by_key(|i| i.to_string());\n   |            ^^^^^^^^^^^\
    \ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.split_whitespace();\n\
    \    numbers.sort();\n    strings.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `strings` in this scope\n --> /tmp/tmpp_sfurti.rs:9:5\n\
    \  |\n9 |     strings.join(\" \")\n  |     ^^^^^^^ not found in this scope\n\n\
    error[E0599]: no method named `sort` found for struct `SplitWhitespace` in the\
    \ current scope\n --> /tmp/tmpp_sfurti.rs:8:13\n  |\n8 |     numbers.sort();\n\
    \  |             ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sorted().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmanguxoq.rs:7:32\n  |\n7 |     numbers.split_whitespace().sorted().join(\"\
    \ \")\n  |                                ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(' ')\n        .map(|x|\
    \ x.parse::<usize>().unwrap())\n        .sort();\n    numbers.to_string()\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `Map` in the current\
    \ scope\n --> /tmp/tmp4z6i5s34.rs:9:10\n  |\n9 |         .sort();\n  |       \
    \   ^^^^ method not found in `Map<std::str::Split<'_, char>, [closure@/tmp/tmp4z6i5s34.rs:8:14:\
    \ 8:45]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted = String::from(\"\
    \");\n    let mut numbers = numbers.to_lowercase().split();\n    for num in numbers\
    \ {\n        let mut number = String::from(\"\");\n        for digit in &num {\n\
    \            number = format!(\"{}{}\", number, digit);\n        }\n        numbers_sorted\
    \ = format!(\"{} {}\", numbers_sorted, number);\n    }\n    return numbers_sorted;\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmphlz1lu90.rs:8:46\n     |\n8    |     let mut numbers = numbers.to_lowercase().split();\n\
    \     |                                              ^^^^^- supplied 0 arguments\n\
    \     |                                              |\n     |               \
    \                               expected 1 argument\n     |\nnote: associated\
    \ function defined here\n\nerror[E0277]: `&&str` is not an iterator\n  --> /tmp/tmphlz1lu90.rs:11:22\n\
    \   |\n11 |         for digit in &num {\n   |                      ^^^^ `&&str`\
    \ is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `&&str`\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `&&str`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0061, E0277.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.to_string();\n\
    \    numbers.split(' ').sort_by(|a, b| a.cmp(b).reverse()).collect()\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpaa80x6rb.rs:8:24\n  |\n8 |     numbers.split('\
    \ ').sort_by(|a, b| a.cmp(b).reverse()).collect()\n  |                       \
    \ ^^^^^^^ method not found in `std::str::Split<'_, char>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.to_string().split(\"\
    \ \").sort_by(|a, b| b.parse().unwrap()).collect()\n        .iter()\n        .map(|x|\
    \ x.to_string())\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmp9gmvfbio.rs:7:36\n  |\n7 |     numbers.to_string().split(\"\
    \ \").sort_by(|a, b| b.parse().unwrap()).collect()\n  |                      \
    \              ^^^^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.chars().sorted().collect::<String>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp0_659gg9.rs:7:21\n  |\n7 |     numbers.chars().sorted().collect::<String>().join(\"\
    \ \")\n  |                     ^^^^^^ method not found in `Chars<'_>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.trim_end().split_whitespace().sort_by(|a,\
    \ b| b.cmp(a)).join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpjmbpq7wm.rs:7:43\n  |\n7 |     numbers.trim_end().split_whitespace().sort_by(|a,\
    \ b| b.cmp(a)).join(\" \")\n  |                                           ^^^^^^^\
    \ method not found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpvo10q5vq.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort().join(\"\
    \ \")\n  |                                ^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|x,\
    \ y| x.cmp(y)).join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp11v1p2pj.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|x,\
    \ y| x.cmp(y)).join(\" \")\n  |                                ^^^^^^^ method\
    \ not found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_iter = numbers.chars().map(|c|\
    \ match c {\n        '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'\
    \ => {\n            Some(c.to_ascii_lowercase())\n        }\n        _ => None,\n\
    \    });\n    let mut numbers = Vec::new();\n    let mut smallest_number = \"\"\
    ;\n    while let Some(number) = numbers_iter.next() {\n        if smallest_number.is_empty()\
    \ {\n            smallest_number = number;\n        } else if number < smallest_number\
    \ {\n            smallest_number = number;\n        }\n    }\n    smallest_number.to_ascii_lowercase().split('\
    \ ').sort_unstable().join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppbtsgnv2.rs:17:31\n   |\n\
    14 |     let mut smallest_number = \"\";\n   |                               --\
    \ expected due to this value\n...\n17 |             smallest_number = number;\n\
    \   |                               ^^^^^^ expected `&str`, found enum `Option`\n\
    \   |\n   = note: expected reference `&str`\n                   found enum `Option<char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmppbtsgnv2.rs:18:28\n   |\n18 |\
    \         } else if number < smallest_number {\n   |                         \
    \   ^^^^^^^^^^^^^^^ expected enum `Option`, found `&str`\n   |\n   = note:   expected\
    \ enum `Option<char>`\n           found reference `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppbtsgnv2.rs:19:31\n   |\n14 |     let mut smallest_number\
    \ = \"\";\n   |                               -- expected due to this value\n\
    ...\n19 |             smallest_number = number;\n   |                        \
    \       ^^^^^^ expected `&str`, found enum `Option`\n   |\n   = note: expected\
    \ reference `&str`\n                   found enum `Option<char>`\n\nerror[E0599]:\
    \ no method named `sort_unstable` found for struct `std::str::Split` in the current\
    \ scope\n  --> /tmp/tmppbtsgnv2.rs:22:53\n   |\n22 |     smallest_number.to_ascii_lowercase().split('\
    \ ').sort_unstable().join(\" \")\n   |                                       \
    \              ^^^^^^^^^^^^^ method not found in `std::str::Split<'_, char>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    if numbers.is_empty() {\n   \
    \     \"\".to_string()\n    } else {\n        let mut numbers_iter = numbers.chars().enumerate();\n\
    \        let mut numbers_vec: Vec<i32> = vec![];\n        for (n, x) in numbers_iter\
    \ {\n            if x.to_string() == \"zero\" {\n                numbers_vec.push(0);\n\
    \            } else if x.to_string() == \"one\" {\n                numbers_vec.push(1);\n\
    \            } else if x.to_string() == \"two\" {\n                numbers_vec.push(2);\n\
    \            } else if x.to_string() == \"three\" {\n                numbers_vec.push(3);\n\
    \            } else if x.to_string() == \"four\" {\n                numbers_vec.push(4);\n\
    \            } else if x.to_string() == \"five\" {\n                numbers_vec.push(5);\n\
    \            } else if x.to_string() == \"six\" {\n                numbers_vec.push(6);\n\
    \            } else if x.to_string() == \"seven\" {\n                numbers_vec.push(7);\n\
    \            } else if x.to_string() == \"eight\" {\n                numbers_vec.push(8);\n\
    \            } else if x.to_string() == \"nine\" {\n                numbers_vec.push(9);\n\
    \            } else {\n                return numbers;\n            }\n      \
    \  }\n        numbers_vec.sort();\n        let mut numbers_string = numbers.clone();\n\
    \        let mut i = 0;\n        for n in numbers_vec {\n            if i != n\
    \ {\n                numbers_string.insert(i, ' ').to_string();\n            \
    \    i += 1;\n            }\n        }\n        numbers_string\n    }\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd_3lggmx.rs:42:39\n   |\n\
    42 |                 numbers_string.insert(i, ' ').to_string();\n   |        \
    \                               ^ expected `usize`, found `i32`\n   |\nhelp: you\
    \ can convert an `i32` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n42 |                 numbers_string.insert(i.try_into().unwrap(), ' ').to_string();\n\
    \   |                                        ++++++++++++++++++++\n\nerror[E0599]:\
    \ `()` doesn't implement `std::fmt::Display`\n  --> /tmp/tmpd_3lggmx.rs:42:47\n\
    \   |\n42 |                 numbers_string.insert(i, ' ').to_string();\n   | \
    \                                              ^^^^^^^^^ `()` cannot be formatted\
    \ with the default formatter\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `(): std::fmt::Display`\n           which is required\
    \ by `(): ToString`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    if numbers.is_empty() {\n   \
    \     return numbers;\n    }\n    \n    let mut split = numbers.split_whitespace();\n\
    \    let mut digits = split.collect::<Vec<_>>();\n    \n    digits.push(0);\n\
    \    \n    let mut nums = String::new();\n    let mut current_num = 0;\n    let\
    \ mut current_digit = 0;\n    \n    for digit in digits {\n        // If the number\
    \ is greater than 9's...\n        if current_digit > 9 {\n            // Add a\
    \ single zero digit to the string\n            nums.push_str(&format!(\"{}\",\
    \ 0));\n            \n            // Reset the current number\n            current_num\
    \ = 0;\n        }\n        \n        // Add the digit to the current number\n\
    \        current_num *= 10;\n        current_num += digit;\n        \n       \
    \ // Keep track of which digit we're on\n        current_digit = digit as usize;\n\
    \        \n        // Add a single digit to the string\n        nums.push_str(&format!(\"\
    {}\", current_num));\n    }\n    \n    // Add the remainder of the string\n  \
    \  nums.push_str(split.last_mut().unwrap());\n    \n    nums\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo1iu79lb.rs:14:17\n   |\n\
    14 |     digits.push(0);\n   |                 ^ expected `&str`, found integer\n\
    \nerror[E0277]: cannot add-assign `&str` to `{integer}`\n  --> /tmp/tmpo1iu79lb.rs:32:21\n\
    \   |\n32 |         current_num += digit;\n   |                     ^^ no implementation\
    \ for `{integer} += &str`\n   |\n   = help: the trait `AddAssign<&str>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0599]: no method named `last_mut` found for\
    \ struct `SplitWhitespace` in the current scope\n  --> /tmp/tmpo1iu79lb.rs:42:25\n\
    \   |\n42 |     nums.push_str(split.last_mut().unwrap());\n   |              \
    \           ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0606]:\
    \ casting `&str` as `usize` is invalid\n  --> /tmp/tmpo1iu79lb.rs:35:25\n   |\n\
    35 |         current_digit = digit as usize;\n   |                         ^^^^^^^^^^^^^^\n\
    \   |\n   = help: cast through a raw pointer first\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599,\
    \ E0606.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| b.to_ascii_lowercase().cmp(a.to_ascii_lowercase())).collect()\n        .to_owned()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp3hy63v4d.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| b.to_ascii_lowercase().cmp(a.to_ascii_lowercase())).collect()\n  |      \
    \                          ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut split = numbers.split_whitespace();\n\
    \    let mut result = split.iter().cloned().collect::<Vec<_>>();\n    if result.len()\
    \ > 0 {\n        sort_numbers_helper(&mut result);\n    }\n    result.into_iter().map(|c|\
    \ c.to_string()).collect::<String>().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sort_numbers_helper` in this scope\n\
    \  --> /tmp/tmp5h1uhc7a.rs:10:9\n   |\n10 |         sort_numbers_helper(&mut result);\n\
    \   |         ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no\
    \ method named `iter` found for struct `SplitWhitespace` in the current scope\n\
    \ --> /tmp/tmp5h1uhc7a.rs:8:28\n  |\n8 |     let mut result = split.iter().cloned().collect::<Vec<_>>();\n\
    \  |                            ^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.split_whitespace().collect::<Vec<_>>();\n\
    \    numbers.sort_by(|a, b| a.cmp(b));\n    numbers.iter().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `&&str`\n    --> /tmp/tmpdmp1wgom.rs:9:20\n     |\n9 \
    \   |     numbers.iter().collect::<String>()\n     |                    ^^^^^^^\
    \ value of type `String` cannot be built from `std::iter::Iterator<Item=&&str>`\n\
    \     |\n     = help: the trait `FromIterator<&&str>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(' ')\n        .sorted()\n\
    \        .into_iter()\n        .map(|n| n.parse::<usize>())\n        .fold(String::new(),\
    \ |mut acc, &i| {\n            acc.push_str(&format!(\"{} \", i));\n         \
    \   acc\n        })\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmp9bn92ijb.rs:8:10\n  |\n8 |         .sorted()\n\
    \  |          ^^^^^^ method not found in `std::str::Split<'_, char>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().map(|n|\
    \ n.parse().unwrap()).sort_by(|a, b| a.cmp(b)).collect()\n        .iter().cloned().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `Map` in the current\
    \ scope\n --> /tmp/tmpmptkyzme.rs:7:60\n  |\n7 |     numbers.split_whitespace().map(|n|\
    \ n.parse().unwrap()).sort_by(|a, b| a.cmp(b)).collect()\n  |                \
    \                                            ^^^^^^^ method not found in `Map<SplitWhitespace<'_>,\
    \ [closure@/tmp/tmpmptkyzme.rs:7:36: 7:58]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums = Vec::new();\n\
    \    for num in numbers.split(\" \") {\n        if num.len() > 2 {\n         \
    \   match num[0] {\n                \"0\" => \"nine\",\n                \"1\"\
    \ => \"eight\",\n                \"2\" => \"seven\",\n                \"3\" =>\
    \ \"six\",\n                \"4\" => \"five\",\n                \"5\" => \"four\"\
    ,\n                \"6\" => \"three\",\n                \"7\" => \"two\",\n  \
    \              \"8\" => \"one\",\n                \"9\" => \"zero\",\n       \
    \         _ => return numbers,\n            }\n        }\n        nums.push(num.parse().unwrap());\n\
    \    }\n    nums.sort();\n    let mut res = String::new();\n    for num in nums\
    \ {\n        res.push_str(&num.to_string());\n    }\n    return res;\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplnfhd99_.rs:10:13\n   |\n\
    9  |  /         if num.len() > 2 {\n10 |  |             match num[0] {\n   | \
    \ |_____________^\n11 | ||                 \"0\" => \"nine\",\n12 | ||       \
    \          \"1\" => \"eight\",\n13 | ||                 \"2\" => \"seven\",\n\
    ...  ||\n21 | ||                 _ => return numbers,\n22 | ||             }\n\
    \   | ||_____________^ expected `()`, found `&str`\n23 |  |         }\n   |  |_________-\
    \ expected this to be `()`\n   |\nhelp: consider using a semicolon here\n   |\n\
    22 |             };\n   |              +\nhelp: consider using a semicolon here\n\
    \   |\n23 |         };\n   |          +\n\nerror[E0277]: the type `str` cannot\
    \ be indexed by `{integer}`\n  --> /tmp/tmplnfhd99_.rs:10:19\n   |\n10 |     \
    \        match num[0] {\n   |                   ^^^^^^ string indices are ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<str>` is not implemented\
    \ for `{integer}`\n   = note: you can use `.chars().nth()` or `.bytes().nth()`\n\
    \           for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<{integer}>` for `str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .lines()\n \
    \       .map(|a| a.parse().unwrap())\n        .map(|a| a.to_string())\n      \
    \  .sort_by_key(|a| a)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpj5jniz2_.rs:10:15\n\
    \   |\n10 |         .map(|a| a.to_string())\n   |               ^ consider giving\
    \ this closure parameter a type\n   |\n   = note: type must be known at this point\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpq0g7i5oo.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort().join(\"\
    \ \")\n  |                                ^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    // Convert the input into a vector\
    \ of numbers and sort them\n    let mut numbers_vec: Vec<i32> = numbers.split_whitespace().collect();\n\
    \    numbers_vec.sort_unstable();\n\n    // Convert the numbers from string to\
    \ number\n    let mut result = String::new();\n    for i in numbers_vec.iter()\
    \ {\n        result.push_str(i.toString());\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<i32>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmptqsqwrwr.rs:8:64\n     |\n8  \
    \  |     let mut numbers_vec: Vec<i32> = numbers.split_whitespace().collect();\n\
    \     |                                                                ^^^^^^^\
    \ value of type `Vec<i32>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<i32>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0599]: no method named `toString` found for\
    \ reference `&i32` in the current scope\n  --> /tmp/tmptqsqwrwr.rs:14:27\n   |\n\
    14 |         result.push_str(i.toString());\n   |                           ^^^^^^^^\
    \ method not found in `&i32`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b)).collect::<String>()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpi7ao6nk9.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b)).collect::<String>()\n  |                                ^^^^^^^\
    \ method not found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.to_string().lines()\n\
    \        .map(|n| n.to_ascii_lowercase().parse().unwrap())\n        .sort_by(|a,\
    \ b| b.cmp(&a))\n        .collect()\n        .collect::<Vec<String>>()\n     \
    \   .into_iter()\n        .map(String::from)\n        .collect::<String>()\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `Map` in the current\
    \ scope\n --> /tmp/tmpg3jehktf.rs:9:10\n  |\n9 |         .sort_by(|a, b| b.cmp(&a))\n\
    \  |          ^^^^^^^ method not found in `Map<std::str::Lines<'_>, [closure@/tmp/tmpg3jehktf.rs:8:14:\
    \ 8:57]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers = numbers\n     \
    \   .split_whitespace()\n        .map(|num| match num.parse::<usize>() {\n   \
    \         Ok(num) => num,\n            Err(_) => return num,\n        })\n   \
    \     .collect::<Vec<_>>();\n    let min_num = numbers[0];\n    let max_num =\
    \ numbers[numbers.len() - 1];\n    let range = max_num - min_num;\n    let mut\
    \ iter = numbers.iter();\n    iter.sort_by_key(|x| {\n        let mut num = x\
    \ - min_num;\n        while num >= range {\n            num = num - range;\n \
    \       }\n        num\n    });\n    iter.collect::<Vec<_>>().join(\" \")\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4g0i7z8x.rs:9:20\n   |\n\
    9  |           .map(|num| match num.parse::<usize>() {\n   |  ____________________^\n\
    10 | |             Ok(num) => num,\n11 | |             Err(_) => return num,\n\
    12 | |         })\n   | |_________^ expected `&str`, found `usize`\n   |\nnote:\
    \ return type inferred to be `&str` here\n  --> /tmp/tmp4g0i7z8x.rs:11:30\n  \
    \ |\n11 |             Err(_) => return num,\n   |                            \
    \  ^^^\n\nerror[E0369]: cannot subtract `&str` from `&str`\n  --> /tmp/tmp4g0i7z8x.rs:16:25\n\
    \   |\n16 |     let range = max_num - min_num;\n   |                 ------- ^\
    \ ------- &str\n   |                 |\n   |                 &str\n\nerror[E0599]:\
    \ no method named `sort_by_key` found for struct `std::slice::Iter` in the current\
    \ scope\n  --> /tmp/tmp4g0i7z8x.rs:18:10\n   |\n18 |     iter.sort_by_key(|x|\
    \ {\n   |          ^^^^^^^^^^^ method not found in `std::slice::Iter<'_, &str>`\n\
    \nerror[E0599]: the method `join` exists for struct `Vec<&&str>`, but its trait\
    \ bounds were not satisfied\n  --> /tmp/tmp4g0i7z8x.rs:25:30\n   |\n25 |     iter.collect::<Vec<_>>().join(\"\
    \ \")\n   |                              ^^^^ method cannot be called on `Vec<&&str>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `[&&str]: Join<_>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0369, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums = vec![String::from(\"\
    \")];\n    let mut chars = vec![String::from(\"\")];\n\n    for n in numbers.split(\"\
    \ \") {\n        if let Ok(n) = n.parse::<usize>() {\n            let mut m =\
    \ usize::MAX;\n            for i in 0..n-1 {\n                if m <= nums[i].parse::<usize>()\
    \ {\n                    m = nums[i].parse::<usize>();\n                }\n  \
    \          }\n\n            for i in 0..n-1 {\n                let len = match\
    \ nums[i].len() {\n                    1 => 1,\n                    n if m ==\
    \ i => n - 1,\n                    _ => 0,\n                };\n             \
    \   let mut a = &nums[i];\n                if i == n {\n                    a.push(\"\
    nine\");\n                }\n                a.push((m + i).to_string());\n  \
    \              nums[i] = a.clone();\n                chars[i].push_str(&chars[i].to_string()\
    \ + &a[..len]);\n            }\n        }\n    }\n\n    let mut a = String::from(\"\
    \");\n    for c in chars.iter() {\n        let len = (c + a.as_bytes()).len();\n\
    \        a.push_str(&a[..len]);\n    }\n    a\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmyd2jzc5.rs:14:25\n   |\n\
    14 |                 if m <= nums[i].parse::<usize>() {\n   |                \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found enum `Result`\n   |\n\
    \   = note: expected type `usize`\n              found enum `Result<usize, ParseIntError>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmyd2jzc5.rs:15:25\n   |\n12 |\
    \             let mut m = usize::MAX;\n   |                         ----------\
    \ expected due to this value\n...\n15 |                     m = nums[i].parse::<usize>();\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found\
    \ enum `Result`\n   |\n   = note: expected type `usize`\n              found enum\
    \ `Result<usize, ParseIntError>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmyd2jzc5.rs:27:28\n\
    \   |\n27 |                     a.push(\"nine\");\n   |                      \
    \      ^^^^^^ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpmyd2jzc5.rs:29:24\n   |\n29 |                 a.push((m + i).to_string());\n\
    \   |                        ^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0369]: cannot add `&str` to `&String`\n  --> /tmp/tmpmyd2jzc5.rs:31:57\n\
    \   |\n31 |                 chars[i].push_str(&chars[i].to_string() + &a[..len]);\n\
    \   |                                   --------------------- ^ --------- &str\n\
    \   |                                   |                     |\n   |        \
    \                           |                     `+` cannot be used to concatenate\
    \ two `&str` strings\n   |                                   &String\n   |\n \
    \  = note: string concatenation requires an owned `String` on the left\nhelp:\
    \ remove the borrow to obtain an owned `String`\n   |\n31 -                 chars[i].push_str(&chars[i].to_string()\
    \ + &a[..len]);\n31 +                 chars[i].push_str(chars[i].to_string() +\
    \ &a[..len]);\n   | \n\nerror[E0369]: cannot add `&[u8]` to `&String`\n  --> /tmp/tmpmyd2jzc5.rs:38:22\n\
    \   |\n38 |         let len = (c + a.as_bytes()).len();\n   |                \
    \    - ^ ------------ &[u8]\n   "
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_vec = numbers.split(\"\
    \ \").collect::<Vec<_>>();\n    numbers_vec.sort_unstable();\n    numbers_vec\n\
    \        .iter()\n        .map(|x| x.parse().expect(\"failed to convert string\
    \ to number\"))\n        .collect()\n        .to_owned()\n        .to_string()\
    \ + \" \"\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp4v2kn6fc.rs:12:10\n\
    \   |\n12 |         .collect()\n   |          ^^^^^^^ cannot infer type for type\
    \ parameter `B` declared on the associated function `collect`\n   |\n   = note:\
    \ type must be known at this point\nhelp: consider specifying the type argument\
    \ in the method call\n   |\n12 |         .collect::<B>()\n   |               \
    \  +++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_chars = numbers.to_lowercase().chars().collect::<Vec<&str>>();\n\
    \    let mut number_array = numbers_chars.clone();\n\n    number_array.sort_by_key(|&c|\
    \ match c {\n        'n' => (0..=9).collect::<Vec<_>>(),\n        'o' => (0..=9).collect::<Vec<_>>(),\n\
    \        't' => (0..=9).collect::<Vec<_>>(),\n        'e' => (0..=9).collect::<Vec<_>>(),\n\
    \        's' => (0..=9).collect::<Vec<_>>(),\n        'i' => (0..=9).collect::<Vec<_>>(),\n\
    \        'o' => (0..=9).collect::<Vec<_>>(),\n        'n' => (0..=9).collect::<Vec<_>>(),\n\
    \        's' => (0..=9).collect::<Vec<_>>(),\n        'e' => (0..=9).collect::<Vec<_>>(),\n\
    \        _ => (0..=9).collect::<Vec<_>>(),\n    });\n\n    number_array.iter().collect::<String>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<&str>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpxayb57nu.rs:7:60\n     |\n7  \
    \  |     let mut numbers_chars = numbers.to_lowercase().chars().collect::<Vec<&str>>();\n\
    \     |                                                            ^^^^^^^ value\
    \ of type `Vec<&str>` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \     |\n     = help: the trait `FromIterator<char>` is not implemented for `Vec<&str>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxayb57nu.rs:11:9\n\
    \   |\n10 |     number_array.sort_by_key(|&c| match c {\n   |                \
    \                         - this expression has type `&str`\n11 |         'n'\
    \ => (0..=9).collect::<Vec<_>>(),\n   |         ^^^ expected `str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxayb57nu.rs:12:9\n   |\n10 | \
    \    number_array.sort_by_key(|&c| match c {\n   |                           \
    \              - this expression has type `&str`\n11 |         'n' => (0..=9).collect::<Vec<_>>(),\n\
    12 |         'o' => (0..=9).collect::<Vec<_>>(),\n   |         ^^^ expected `str`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxayb57nu.rs:13:9\n\
    \   |\n10 |     number_array.sort_by_key(|&c| match c {\n   |                \
    \                         - this expression has type `&str`\n...\n13 |       \
    \  't' => (0..=9).collect::<Vec<_>>(),\n   |         ^^^ expected `str`, found\
    \ `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxayb57nu.rs:14:9\n \
    \  |\n10 |     number_array.sort_by_key(|&c| match c {\n   |                 \
    \                        - this expression has type `&str`\n...\n14 |        \
    \ 'e' => (0..=9).collect::<Vec<_>>(),\n   |         ^^^ expected `str`, found\
    \ `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxayb57nu.rs:15:9\n \
    \  |\n10 |     number_array.sort_by_key(|&c| match c {\n   |                 \
    \                        - this expression has type `&str`\n...\n15 |        \
    \ 's' => (0..=9).collect::<Vec<_>>"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    if numbers.is_empty() {\n   \
    \     return numbers;\n    }\n\n    let mut numbers_vec: Vec<&str> = numbers.split(\"\
    \ \").collect();\n\n    numbers_vec.sort();\n\n    let mut numbers_string: String\
    \ = String::new();\n    for number in numbers_vec.iter() {\n        numbers_string.push_str(number);\n\
    \    }\n    numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"fiveninethree\"`,\n right: `\"three five nine\"`', /tmp/tmpwak_87ul.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.splitn(2,\
    \ \" \").collect::<Vec<_>>();\n    numbers.sort_by(|a, b| {\n        if let Ok(a)\
    \ = a.parse::<u32>() {\n            if let Ok(b) = b.parse::<u32>() {\n      \
    \          std::cmp::Reverse\n            } else {\n                std::cmp::Ordering::Less\n\
    \            }\n        } else {\n            std::cmp::Ordering::Less\n     \
    \   }\n    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppyxpyrcp.rs:11:17\n   |\n\
    11 |                 std::cmp::Reverse\n   |                 ^^^^^^^^^^^^^^^^^\
    \ expected enum `std::cmp::Ordering`, found fn item\n   |\n   = note: expected\
    \ enum `std::cmp::Ordering`\n           found fn item `fn(_) -> Reverse<_> {Reverse::<_>}`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    if numbers.is_empty() {\n   \
    \     return numbers;\n    }\n\n    let mut s = String::new();\n\n    for n in\
    \ numbers.split_whitespace() {\n        if n % 10 == 0 {\n            s.push(*n);\n\
    \        } else {\n            let mut i = String::new();\n            i.push(*n);\n\
    \n            while i <= *n {\n                i.push(0);\n            }\n\n \
    \           s.push(i);\n        }\n    }\n\n    sort_with_digits(s);\n    String::from(s)\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sort_with_digits` in this scope\n \
    \ --> /tmp/tmp1fbqylr0.rs:28:5\n   |\n28 |     sort_with_digits(s);\n   |    \
    \ ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0369]: cannot mod `&str`\
    \ by `{integer}`\n  --> /tmp/tmp1fbqylr0.rs:14:14\n   |\n14 |         if n % 10\
    \ == 0 {\n   |            - ^ -- {integer}\n   |            |\n   |          \
    \  &str\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1fbqylr0.rs:15:20\n \
    \  |\n15 |             s.push(*n);\n   |                    ^^ expected `char`,\
    \ found `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1fbqylr0.rs:18:20\n\
    \   |\n18 |             i.push(*n);\n   |                    ^^ expected `char`,\
    \ found `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1fbqylr0.rs:20:24\n\
    \   |\n20 |             while i <= *n {\n   |                        ^^ expected\
    \ struct `String`, found `str`\n   |\nhelp: try using a conversion method\n  \
    \ |\n20 |             while i <= (*n).to_string() {\n   |                    \
    \    +  +++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1fbqylr0.rs:21:24\n\
    \   |\n21 |                 i.push(0);\n   |                        ^ expected\
    \ `char`, found `u8`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1fbqylr0.rs:24:20\n\
    \   |\n24 |             s.push(i);\n   |                    ^ expected `char`,\
    \ found struct `String`\n\nerror: aborting due to 7 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers: Vec<_> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number: {}\", num),\n\
    \        })\n        .collect();\n    numbers.sort_by(|a, b| b.cmp(&a));\n   \
    \ let string = format!(\"{}\", numbers);\n    strings.sort_by(|a, b| b.cmp(&a));\n\
    \    return string;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `strings` in this scope\n  --> /tmp/tmprmha_4t1.rs:25:5\n\
    \   |\n25 |     strings.sort_by(|a, b| b.cmp(&a));\n   |     ^^^^^^^ help: a local\
    \ variable with a similar name exists: `string`\n\nerror[E0277]: `Vec<{integer}>`\
    \ doesn't implement `std::fmt::Display`\n  --> /tmp/tmprmha_4t1.rs:24:32\n   |\n\
    24 |     let string = format!(\"{}\", numbers);\n   |                        \
    \        ^^^^^^^ `Vec<{integer}>` cannot be formatted with the default formatter\n\
    \   |\n   = help: the trait `std::fmt::Display` is not implemented for `Vec<{integer}>`\n\
    \   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print)\
    \ instead\n   = note: this error originates in the macro `$crate::__export::format_args`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(' ')\n        .iter()\n\
    \        .map(|x| x.parse::<i64>().unwrap())\n        .collect::<Vec<_>>()\n \
    \       .sort_by(|a, b| a.cmp(&b))\n        .collect::<Vec<_>>()\n        .join('\
    \ ')\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpqybkoojs.rs:8:10\n  |\n8 |         .iter()\n\
    \  |          ^^^^ method not found in `std::str::Split<'_, char>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.split_whitespace();\n\
    \    numbers.sort_cmp(|a, b| a.cmp(b));\n    String::from_utf8(numbers).expect(\"\
    Invalid UTF-8 input\");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_cmp` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpkmmyihzw.rs:8:13\n  |\n8 |     numbers.sort_cmp(|a,\
    \ b| a.cmp(b));\n  |             ^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpkmmyihzw.rs:9:23\n  |\n9 |    \
    \ String::from_utf8(numbers).expect(\"Invalid UTF-8 input\");\n  |           \
    \            ^^^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n \
    \ |\n  = note: expected struct `Vec<u8>`\n             found struct `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpkmmyihzw.rs:6:37\n  |\n6 | fn sort_numbers(numbers:\
    \ String) -> String {\n  |    ------------                     ^^^^^^ expected\
    \ struct `String`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n...\n9 |     String::from_utf8(numbers).expect(\"\
    Invalid UTF-8 input\");\n  |                                                 \
    \            - help: remove this semicolon\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.chars().filter(|&c| c\
    \ >= '0' && c <= '9').collect()\n        .cloned()\n        .sort_by(|a, b| a.cmp(&b));\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpw7lu5ure.rs:7:55\n\
    \  |\n7 |     numbers.chars().filter(|&c| c >= '0' && c <= '9').collect()\n  |\
    \                                                       ^^^^^^^ cannot infer type\
    \ for type parameter `B` declared on the associated function `collect`\n  |\n\
    \  = note: type must be known at this point\nhelp: consider specifying the type\
    \ argument in the method call\n  |\n7 |     numbers.chars().filter(|&c| c >= '0'\
    \ && c <= '9').collect::<B>()\n  |                                           \
    \                   +++++\n\nerror[E0308]: mismatched types\n --> /tmp/tmpw7lu5ure.rs:6:37\n\
    \  |\n6 | fn sort_numbers(numbers: String) -> String {\n  |    ------------  \
    \                   ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0282, E0308.\nFor more information about an error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split(\"\
    \ \").collect::<Vec<&str>>();\n    numbers.sort_by_key(|&n| match &n {\n     \
    \   &\"nine\" => 0,\n        &\"eight\" => 1,\n        &\"seven\" => 2,\n    \
    \    &\"six\" => 3,\n        &\"five\" => 4,\n        &\"four\" => 5,\n      \
    \  &\"three\" => 6,\n        &\"two\" => 7,\n        &\"one\" => 8,\n        &\"\
    zero\" => 9,\n        _ => panic!(\"sort_numbers: invalid value\"),\n    });\n\
    \n    let mut result = String::new();\n    for n in numbers {\n        result\
    \ += n.to_string();\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu38ll5hu.rs:24:19\n   |\n\
    24 |         result += n.to_string();\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&str`, found struct\
    \ `String`\n   |                   help: consider borrowing here: `&n.to_string()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.to_owned();\n\
    \    let mut string = \"\";\n    let mut length = 0;\n    let mut index = 0;\n\
    \n    // First number may be a leading zero\n    if numbers.len() >= 2 && numbers.chars().next().unwrap()\
    \ == '0' {\n        let numbers_to_remove = numbers.split_whitespace().collect::<Vec<_>>();\n\
    \        numbers = numbers_to_remove.remove(0) + numbers_to_remove.remove(0);\n\
    \    }\n\n    // Separate the numbers out and sort them in descending order\n\
    \    while numbers.len() != 0 {\n        let mut number = numbers.remove('0').unwrap();\n\
    \        number = number.to_owned();\n        let number = number.parse().unwrap();\n\
    \n        // Move index forward and update length by 1\n        index += 1;\n\
    \        length = length;\n\n        // If the number is not 0, append the number,\
    \ otherwise remove it from numbers and append it to string\n        if number\
    \ != 0 {\n            string += &numbers[index..];\n        }\n    }\n\n    //\
    \ Append the remaining numbers in reverse order\n    while length > 0 {\n    \
    \    string += &numbers[index..];\n        index -= 1;\n        length -= 1;\n\
    \    }\n\n    string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `&str` to `&str`\n  --> /tmp/tmpvox041cg.rs:15:47\n\
    \   |\n15 |         numbers = numbers_to_remove.remove(0) + numbers_to_remove.remove(0);\n\
    \   |                   --------------------------- ^ ---------------------------\
    \ &str\n   |                   |                           |\n   |           \
    \        |                           `+` cannot be used to concatenate two `&str`\
    \ strings\n   |                   &str\n   |\n   = note: string concatenation\
    \ requires an owned `String` on the left\nhelp: create an owned `String` from\
    \ a string reference\n   |\n15 |         numbers = numbers_to_remove.remove(0).to_owned()\
    \ + numbers_to_remove.remove(0);\n   |                                       \
    \       +++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvox041cg.rs:20:41\n\
    \   |\n20 |         let mut number = numbers.remove('0').unwrap();\n   |     \
    \                                    ^^^ expected `usize`, found `char`\n\nerror[E0599]:\
    \ no method named `unwrap` found for type `char` in the current scope\n  --> /tmp/tmpvox041cg.rs:20:46\n\
    \   |\n20 |         let mut number = numbers.remove('0').unwrap();\n   |     \
    \                                         ^^^^^^ method not found in `char`\n\n\
    error[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n\
    \  --> /tmp/tmpvox041cg.rs:30:13\n   |\n30 |             string += &numbers[index..];\n\
    \   |             ------^^^^^^^^^^^^^^^^^^^^^\n   |             |\n   |      \
    \       cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `&str`\n  --> /tmp/tmpvox041cg.rs:36:9\n   |\n\
    36 |         string += &numbers[index..];\n   |         ------^^^^^^^^^^^^^^^^^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvox041cg.rs:41:5\n   |\n6  | fn sort_numbers(numbers:\
    \ String) -> String {\n   |                                     ------ expected\
    \ `String` because of return type\n...\n41 |     string\n   |     ^^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |     |\n   |     e"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.to_string();\n\
    \    let mut numbers_as_str: Vec<&str> = numbers.split_whitespace().collect();\n\
    \n    let mut num_str: &str = numbers_as_str[0];\n    let mut num_str_as_int:\
    \ u32;\n\n    for &number in numbers_as_str {\n        if let Ok(number) = number.parse::<u32>()\
    \ {\n            num_str_as_int = number;\n        } else {\n            break\n\
    \        }\n    }\n\n    let num_str_as_string = num_str.to_string();\n\n    let\
    \ mut sorted_num_str: Vec<String> = vec![String::new(); 10];\n\n    for &number\
    \ in numbers_as_str {\n        if let Ok(number) = number.parse::<u32>() {\n \
    \           sorted_num_str[number].push(num_str);\n            num_str = number;\n\
    \        }\n    }\n\n    let mut sorted_num_str = sorted_num_str.iter().map(|x|\
    \ x.join(\" \")).collect();\n\n    for &number in sorted_num_str.iter() {\n  \
    \      numbers = numbers.replace(number.to_string(), &number);\n    }\n\n    numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n  --> /tmp/tmpn4w0io62.rs:13:10\n   |\n13 |     for &number in numbers_as_str\
    \ {\n   |          ^^^^^^ doesn't have a size known at compile-time\n   |\n  \
    \ = help: the trait `Sized` is not implemented for `str`\n   = note: all local\
    \ variables must have a statically known size\n   = help: unsized locals are gated\
    \ as an unstable feature\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n  --> /tmp/tmpn4w0io62.rs:25:10\n   |\n25 |  \
    \   for &number in numbers_as_str {\n   |          ^^^^^^ doesn't have a size\
    \ known at compile-time\n   |\n   = help: the trait `Sized` is not implemented\
    \ for `str`\n   = note: all local variables must have a statically known size\n\
    \   = help: unsized locals are gated as an unstable feature\n\nerror[E0277]: the\
    \ type `[String]` cannot be indexed by `u32`\n  --> /tmp/tmpn4w0io62.rs:27:13\n\
    \   |\n27 |             sorted_num_str[number].push(num_str);\n   |          \
    \   ^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `u32`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<u32>` for `Vec<String>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpn4w0io62.rs:28:23\n   |\n10 |\
    \     let mut num_str: &str = numbers_as_str[0];\n   |                      ----\
    \ expected due to this type\n...\n28 |             num_str = number;\n   |   \
    \                    ^^^^^^ expected `&str`, found `u32`\n\nerror[E0599]: no method\
    \ named `join` found for reference `&String` in the current scope\n  --> /tmp/tmpn4w0io62.rs:32:62\n\
    \   |\n32 |     let mut sorted_num_str = sorted_num_str.iter().map(|x| x.join(\"\
    \ \")).collect();\n   |                                                      \
    \        ^^^^ method not found in `&String`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\nFor\
    \ more information about an error, "
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort();\n    let mut result\
    \ = String::new();\n    for &n in numbers {\n        result += &n.to_string();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n  --> /tmp/tmp06qc6zf7.rs:10:10\n   |\n10 |     for &n in numbers {\n\
    \   |          ^ doesn't have a size known at compile-time\n   |\n   = help: the\
    \ trait `Sized` is not implemented for `str`\n   = note: all local variables must\
    \ have a statically known size\n   = help: unsized locals are gated as an unstable\
    \ feature\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n        .to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp1hg1y667.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                                ^^^^^^^ method not\
    \ found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut output = String::new();\n\
    \    let mut current = String::new();\n    let mut previous = String::new();\n\
    \    for digit in numbers.split_whitespace() {\n        let number = match digit\
    \ {\n            None => \"0\",\n            Some(digit) => digit,\n        };\n\
    \        current = match current {\n            Some(current) => current + \"\
    \ \" + number,\n            None => number,\n        };\n        previous = match\
    \ previous {\n            Some(previous) => previous + \" \" + number,\n     \
    \       None => number,\n        };\n        output.push_str(current);\n    }\n\
    \    output\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvfxv29g9.rs:12:13\n   |\n\
    11 |         let number = match digit {\n   |                            -----\
    \ this expression has type `&str`\n12 |             None => \"0\",\n   |     \
    \        ^^^^ expected `str`, found enum `Option`\n   |\n   = note: expected type\
    \ `str`\n              found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpvfxv29g9.rs:13:13\n   |\n11 |         let number = match digit\
    \ {\n   |                            ----- this expression has type `&str`\n12\
    \ |             None => \"0\",\n13 |             Some(digit) => digit,\n   | \
    \            ^^^^^^^^^^^ expected `str`, found enum `Option`\n   |\n   = note:\
    \ expected type `str`\n              found enum `Option<_>`\n\nerror[E0277]: the\
    \ size for values of type `str` cannot be known at compilation time\n   --> /tmp/tmpvfxv29g9.rs:13:13\n\
    \    |\n13  |             Some(digit) => digit,\n    |             ^^^^^^^^^^^\
    \ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized`\
    \ is not implemented for `str`\nnote: required by a bound in `Some`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvfxv29g9.rs:16:13\n   |\n15 |         current\
    \ = match current {\n   |                         ------- this expression has\
    \ type `String`\n16 |             Some(current) => current + \" \" + number,\n\
    \   |             ^^^^^^^^^^^^^ expected struct `String`, found enum `Option`\n\
    \   |\n   = note: expected struct `String`\n                found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpvfxv29g9.rs:17:13\n   |\n15 |\
    \         current = match current {\n   |                         ------- this\
    \ expression has type `String`\n16 |             Some(current) => current + \"\
    \ \" + number,\n17 |             None => number,\n   |             ^^^^ expected\
    \ struct `String`, found enum `Option`\n   |\n   = note: expected struct `String`\n\
    \                found enum `Option<_>`\n\nerror[E0308]: `match` arms have incompatible\
    \ types\n  --> /tmp/tmpvfxv29g9.rs:17:21\n   |\n15 |           current = match\
    \ current {\n   |  ___________________-\n16 | |           "
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.trim().split_whitespace().sort_by(|x,\
    \ y| x.cmp(y)).collect::<Vec<_>>()\n        .join(\" \")\n}\n\nfn main() {\n \
    \   let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp5akvgt_9.rs:7:39\n  |\n7 |     numbers.trim().split_whitespace().sort_by(|x,\
    \ y| x.cmp(y)).collect::<Vec<_>>()\n  |                                      \
    \ ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.trim_end().to_lowercase().split(\"\
    \\s\")\n        .collect::<Vec<_>>()\n        .sort_by(|a, b| a.cmp(b))\n    \
    \    .collect::<Vec<_>>()\n        .into_iter()\n        .map(|x| x.to_string())\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error: unknown character escape: `s`\n --> /tmp/tmpw7saxeen.rs:7:47\n \
    \ |\n7 |     numbers.trim_end().to_lowercase().split(\"\\s\")\n  |           \
    \                                    ^ unknown character escape\n  |\n  = help:\
    \ for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n\
    help: if you meant to write a literal backslash (perhaps escaping in a regular\
    \ expression), consider a raw string literal\n  |\n7 |     numbers.trim_end().to_lowercase().split(r\"\
    \\s\")\n  |                                             ~~~~~\n\nerror[E0599]:\
    \ `()` is not an iterator\n  --> /tmp/tmpw7saxeen.rs:10:10\n   |\n10 |       \
    \  .collect::<Vec<_>>()\n   |          ^^^^^^^ `()` is not an iterator\n   |\n\
    \   = note: the following trait bounds were not satisfied:\n           `(): Iterator`\n\
    \           which is required by `&mut (): Iterator`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut digits: Vec<u32> = numbers.split_whitespace().map(|n|\
    \ n.parse().unwrap()).collect();\n    digits.sort_by_key(|n| n as u32);\n    numbers.to_owned()\
    \ + digits.clone().into_iter().map(|n| n as char).collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9j_401u7.rs:9:26\n  |\n9 |\
    \     numbers.to_owned() + digits.clone().into_iter().map(|n| n as char).collect::<String>()\n\
    \  |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                          |\n  |                          expected `&str`,\
    \ found struct `String`\n  |                          help: consider borrowing\
    \ here: `&digits.clone().into_iter().map(|n| n as char).collect::<String>()`\n\
    \nerror[E0606]: casting `&u32` as `u32` is invalid\n --> /tmp/tmp9j_401u7.rs:8:28\n\
    \  |\n8 |     digits.sort_by_key(|n| n as u32);\n  |                         \
    \   -^^^^^^^\n  |                            |\n  |                          \
    \  cannot cast `&u32` as `u32`\n  |                            help: dereference\
    \ the expression: `*n`\n\nerror[E0604]: only `u8` can be cast as `char`, not `u32`\n\
    \ --> /tmp/tmp9j_401u7.rs:9:61\n  |\n9 |     numbers.to_owned() + digits.clone().into_iter().map(|n|\
    \ n as char).collect::<String>()\n  |                                        \
    \                     ^^^^^^^^^ invalid cast\n  |\nhelp: try `char::from_u32`\
    \ instead\n --> /tmp/tmp9j_401u7.rs:9:61\n  |\n9 |     numbers.to_owned() + digits.clone().into_iter().map(|n|\
    \ n as char).collect::<String>()\n  |                                        \
    \                     ^^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0604, E0606.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n        .collect::<Vec<_>>()\n        .to_string() + '\\n'\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpz3iqu6nw.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n  |                                ^^^^^^^ method not found in\
    \ `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    strings.sort_by_key(numbers,\
    \ |s| sort_numbers_key(s));\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `strings` in this scope\n --> /tmp/tmpqskedpp7.rs:7:5\n\
    \  |\n7 |     strings.sort_by_key(numbers, |s| sort_numbers_key(s));\n  |    \
    \ ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_numbers_key`\
    \ in this scope\n --> /tmp/tmpqskedpp7.rs:7:38\n  |\n7 |     strings.sort_by_key(numbers,\
    \ |s| sort_numbers_key(s));\n  |                                      ^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpqskedpp7.rs:6:37\n\
    \  |\n6 | fn sort_numbers(numbers: String) -> String {\n  |    ------------  \
    \                   ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers_sorted.sort_by(|a, b|\
    \ a.cmp(b))\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `numbers_sorted` in this scope\n --> /tmp/tmpcxzirlev.rs:7:5\n\
    \  |\n7 |     numbers_sorted.sort_by(|a, b| a.cmp(b))\n  |     ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers_sorted = numbers.to_string().split_whitespace().sort_by(|a,\
    \ b| a.cmp(b)).collect();\n    String::from_iter(numbers_sorted)\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpsurn7o8j.rs:7:65\n  |\n7 |     let numbers_sorted\
    \ = numbers.to_string().split_whitespace().sort_by(|a, b| a.cmp(b)).collect();\n\
    \  |                                                                 ^^^^^^^ method\
    \ not found in `SplitWhitespace<'_>`\n\nerror[E0599]: no function or associated\
    \ item named `from_iter` found for struct `String` in the current scope\n -->\
    \ /tmp/tmpsurn7o8j.rs:8:13\n  |\n8 |     String::from_iter(numbers_sorted)\n \
    \ |             ^^^^^^^^^ function or associated item not found in `String`\n\
    \  |\n  = help: items from traits can only be used if the trait is in scope\n\
    help: the following trait is implemented but not in scope; perhaps add a `use`\
    \ for it:\n  |\n1 | use std::iter::FromIterator;\n  |\nhelp: there is an associated\
    \ function with a similar name\n  |\n8 |     String::from_utf8(numbers_sorted)\n\
    \  |             ~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut list = numbers.split_whitespace();\n\
    \    list.sort();\n    String::from_utf8_lossy(&list).to_string()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpu_11i_tm.rs:8:10\n  |\n8 |     list.sort();\n\
    \  |          ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpu_11i_tm.rs:9:29\n  |\n9 |     String::from_utf8_lossy(&list).to_string()\n\
    \  |                             ^^^^^ expected slice `[u8]`, found struct `SplitWhitespace`\n\
    \  |\n  = note: expected reference `&[u8]`\n             found reference `&SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(\" \").collect::<Vec<_>>().sort_by(|a,\
    \ b| a.parse::<usize>().cmp(&b.parse::<usize>()))\n        .collect::<Vec<_>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `cmp` exists for enum `Result<usize, ParseIntError>`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmp79g52azx.rs:7:78\n \
    \   |\n7   |       numbers.split(\" \").collect::<Vec<_>>().sort_by(|a, b| a.parse::<usize>().cmp(&b.parse::<usize>()))\n\
    \    |                                                                       \
    \         ^^^ method cannot be called on `Result<usize, ParseIntError>` due to\
    \ unsatisfied trait bounds\n    |\n    = note: the following trait bounds were\
    \ not satisfied:\n            `ParseIntError: Ord`\n            which is required\
    \ by `Result<usize, ParseIntError>: Ord`\n            `Result<usize, ParseIntError>:\
    \ Iterator`\n            which is required by `&mut Result<usize, ParseIntError>:\
    \ Iterator`\n\nerror[E0599]: `()` is not an iterator\n --> /tmp/tmp79g52azx.rs:8:10\n\
    \  |\n8 |         .collect::<Vec<_>>()\n  |          ^^^^^^^ `()` is not an iterator\n\
    \  |\n  = note: the following trait bounds were not satisfied:\n          `():\
    \ Iterator`\n          which is required by `&mut (): Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(' ').sort().join('\
    \ ')\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmp5m6_f7hb.rs:7:24\n  |\n7 |     numbers.split('\
    \ ').sort().join(' ')\n  |                        ^^^^ method not found in `std::str::Split<'_,\
    \ char>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.to_string()\n       \
    \ .chars()\n        .map(|c| match c.to_digit(10) {\n            Some(n) => n.to_string(),\n\
    \            _ => c.to_string(),\n        })\n        .collect()\n        .sorted()\n\
    \        .collect()\n        .iter()\n        .map(|n| n.to_string())\n      \
    \  .join(' ')\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpk4ylyz7p.rs:13:10\n\
    \   |\n13 |         .collect()\n   |          ^^^^^^^ cannot infer type for type\
    \ parameter `B` declared on the associated function `collect`\n   |\n   = note:\
    \ type must be known at this point\nhelp: consider specifying the type argument\
    \ in the method call\n   |\n13 |         .collect::<B>()\n   |               \
    \  +++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut list = vec![];\n    for\
    \ word in numbers.split_whitespace() {\n        if word != \"zero\" && word !=\
    \ \"one\" && word != \"two\" && word != \"three\" && word != \"four\" && word\
    \ != \"five\" &&\n            word != \"six\" && word != \"seven\" && word !=\
    \ \"eight\" && word != \"nine\" {\n            list = list.push(word);\n     \
    \   }\n    }\n    list.sort_by(|a, b| b.cmp(a));\n    list.to_owned()\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph8cbfopj.rs:11:20\n   |\n\
    7  |     let mut list = vec![];\n   |                    ------ expected due to\
    \ this value\n...\n11 |             list = list.push(word);\n   |            \
    \        ^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<&str>`\n           found unit type `()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph8cbfopj.rs:15:5\n   |\n6  | fn sort_numbers(numbers: String)\
    \ -> String {\n   |                                     ------ expected `String`\
    \ because of return type\n...\n15 |     list.to_owned()\n   |     ^^^^^^^^^^^^^^^\
    \ expected struct `String`, found struct `Vec`\n   |\n   = note: expected struct\
    \ `String`\n              found struct `Vec<&str>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut out = String::with_capacity(numbers.len());\n\
    \    let mut last_index = 0;\n    for &item in numbers.split_whitespace() {\n\
    \        let index = match item.to_digit(10) {\n            Ok(i) => i,\n    \
    \        Err(_) => return out.clone(),\n        };\n        last_index = index;\n\
    \        out.push_str(&item[..last_index]);\n        out.push_str(&\"-\");\n \
    \   }\n    out.push_str(&numbers[..last_index]);\n    out\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digit` found for type `str` in the current\
    \ scope\n  --> /tmp/tmpdjfj7qfl.rs:10:32\n   |\n10 |         let index = match\
    \ item.to_digit(10) {\n   |                                ^^^^^^^^ method not\
    \ found in `str`\n\nerror[E0277]: the size for values of type `str` cannot be\
    \ known at compilation time\n --> /tmp/tmpdjfj7qfl.rs:9:10\n  |\n9 |     for &item\
    \ in numbers.split_whitespace() {\n  |          ^^^^ doesn't have a size known\
    \ at compile-time\n  |\n  = help: the trait `Sized` is not implemented for `str`\n\
    \  = note: all local variables must have a statically known size\n  = help: unsized\
    \ locals are gated as an unstable feature\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(\" \").map(|s|\
    \ sort_number(s)).join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sort_number` in this scope\n --> /tmp/tmp_kg7bf_6.rs:7:32\n\
    \  |\n7 |     numbers.split(\" \").map(|s| sort_number(s)).join(\" \")\n  |  \
    \                              ^^^^^^^^^^^ not found in this scope\n\nerror[E0599]:\
    \ no method named `join` found for struct `Map` in the current scope\n --> /tmp/tmp_kg7bf_6.rs:7:48\n\
    \  |\n7 |     numbers.split(\" \").map(|s| sort_number(s)).join(\" \")\n  |  \
    \                                              ^^^^ method not found in `Map<std::str::Split<'_,\
    \ &str>, _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.chars().collect::<String>().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `String` in the\
    \ current scope\n --> /tmp/tmph9k8yreh.rs:7:41\n  |\n7 |     numbers.chars().collect::<String>().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                                         ^^^^^^^\
    \ method not found in `String`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.split_whitespace().collect::<Vec<_>>();\n\
    \    numbers.sort_by(|a,b| {\n        match (a,b) {\n            (Some('0'), Some('0'))\
    \ => a.cmp(b),\n            (Some('0'), Some('1')) => a.cmp(b),\n            (Some('0'),\
    \ Some('2')) => a.cmp(b),\n            (Some('0'), Some('3')) => a.cmp(b),\n \
    \           (Some('0'), Some('4')) => a.cmp(b),\n            (Some('0'), Some('5'))\
    \ => a.cmp(b),\n            (Some('0'), Some('6')) => a.cmp(b),\n            (Some('0'),\
    \ Some('7')) => a.cmp(b),\n            (Some('0'), Some('8')) => a.cmp(b),\n \
    \           (Some('0'), Some('9')) => a.cmp(b),\n            (Some('1'), Some('0'))\
    \ => a.cmp(b),\n            (Some('1'), Some('1')) => a.cmp(b),\n            (Some('1'),\
    \ Some('2')) => a.cmp(b),\n            (Some('1'), Some('3')) => a.cmp(b),\n \
    \           (Some('1'), Some('4')) => a.cmp(b),\n            (Some('1'), Some('5'))\
    \ => a.cmp(b),\n            (Some('1'), Some('6')) => a.cmp(b),\n            (Some('1'),\
    \ Some('7')) => a.cmp(b),\n            (Some('1'), Some('8')) => a.cmp(b),\n \
    \           (Some('1'), Some('9')) => a.cmp(b),\n            (Some('2'), Some('0'))\
    \ => a.cmp(b),\n            (Some('2'), Some('1')) => a.cmp(b),\n            (Some('2'),\
    \ Some('2')) => a.cmp(b),\n            (Some('2'), Some('3')) => a.cmp(b),\n \
    \           (Some('2'), Some('4')) => a.cmp(b),\n            (Some('2'), Some('5'))\
    \ => a.cmp(b),\n            (Some('2'), Some('6')) => a.cmp(b),\n            (Some('2'),\
    \ Some('7')) => a.cmp(b),\n            (Some('2'), Some('8')) => a.cmp(b),\n \
    \           (Some('2'), Some('9')) => a.cmp(b),\n            (Some('3'), Some('0'))\
    \ => a.cmp(b),\n            (Some('3'), Some('1')) => a.cmp(b),\n            (Some('3'),\
    \ Some('2')) => a.cmp(b),\n            (Some('\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpy9b0h1qv.rs:43:19\n\
    \   |\n43 |             (Some('\n   |                   ^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut input = numbers.to_string().split_whitespace();\n\
    \    let mut input = input.collect::<Vec<_>>();\n    for i in 0..input.input.length\
    \ - 1 {\n        for j in (i + 1)..input.len() {\n            if input[i].parse::<usize>()\
    \ < input[j].parse::<usize>() {\n                let temp = input[i];\n      \
    \          input[i] = input[j];\n                input[j] = temp;\n          \
    \  }\n        }\n    }\n    return input.iter().cloned().collect::<String>().to_string();\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `input` on type `Vec<&str>`\n --> /tmp/tmpxxx7893m.rs:9:23\n\
    \  |\n9 |     for i in 0..input.input.length - 1 {\n  |                      \
    \ ^^^^^ unknown field\n\nerror[E0369]: binary operation `<` cannot be applied\
    \ to type `Result<usize, ParseIntError>`\n  --> /tmp/tmpxxx7893m.rs:11:42\n  \
    \ |\n11 |             if input[i].parse::<usize>() < input[j].parse::<usize>()\
    \ {\n   |                ------------------------- ^ -------------------------\
    \ Result<usize, ParseIntError>\n   |                |\n   |                Result<usize,\
    \ ParseIntError>\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0369, E0609.\nFor more information about an error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut digits = numbers.splitn(2,\
    \ '')\n    .map(|x| x.parse().unwrap())\n    .collect::<Vec<i64>>();\n    let\
    \ mut sorted = Vec::new();\n    digits.sort_by_key(|x| x.cmp(sorted.last().unwrap()));\n\
    \    sorted.extend(digits.clone());\n    let mut result = String::new();\n   \
    \ for n in sorted {\n        result.push_str(&n.to_string());\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error: empty character literal\n --> /tmp/tmphv5x1bav.rs:7:41\n  |\n7 |\
    \     let mut digits = numbers.splitn(2, '')\n  |                            \
    \             ^ empty character literal\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut result = String::with_capacity(numbers.len());\n\
    \    let mut parts = vec![];\n    for part in numbers.split(' ') {\n        let\
    \ num = get_number(part);\n        if num == None {\n            return result.to_string();\n\
    \        }\n        parts.push(num);\n    }\n    // Sort the parts\n    parts.sort();\n\
    \    // Add the parts\n    for part in parts {\n        result = result.append(part.to_string()).append('\
    \ ');\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_number` in this scope\n  --> /tmp/tmp1gm_0w74.rs:10:19\n\
    \   |\n10 |         let num = get_number(part);\n   |                   ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `append` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmp1gm_0w74.rs:20:25\n   |\n\
    20 |         result = result.append(part.to_string()).append(' ');\n   |     \
    \                    ^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort().join('\
    \ ')\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmphod9wkwj.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort().join('\
    \ ')\n  |                                ^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.split_whitespace();\n\
    \    numbers = numbers.into_iter().sorted().collect();\n    let mut s = String::new();\n\
    \    for &n in numbers {\n        s.append(&format!(\"{} \", n));\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmppt2z4jhw.rs:8:35\n  |\n8 |     numbers =\
    \ numbers.into_iter().sorted().collect();\n  |                               \
    \    ^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0599]: no method\
    \ named `append` found for struct `String` in the current scope\n  --> /tmp/tmppt2z4jhw.rs:11:11\n\
    \   |\n11 |         s.append(&format!(\"{} \", n));\n   |           ^^^^^^ method\
    \ not found in `String`\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n  --> /tmp/tmppt2z4jhw.rs:10:10\n   |\n10 |  \
    \   for &n in numbers {\n   |          ^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n   = note: all\
    \ local variables must have a statically known size\n   = help: unsized locals\
    \ are gated as an unstable feature\n\nerror[E0277]: the size for values of type\
    \ `str` cannot be known at compilation time\n   --> /tmp/tmppt2z4jhw.rs:11:34\n\
    \    |\n11  |         s.append(&format!(\"{} \", n));\n    |                 \
    \                 ^ doesn't have a size known at compile-time\n    |\n    = help:\
    \ the trait `Sized` is not implemented for `str`\nnote: required by a bound in\
    \ `ArgumentV1::<'a>::new_display`\n    = note: this error originates in the macro\
    \ `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut s = String::with_capacity(numbers.len());\n\
    \    numbers.chars().sort_by_key(|c| match c {\n        c if c.is_whitespace()\
    \ => String::from(\"z\"),\n        c if c.is_digit() => String::from(c),\n   \
    \     _ => String::from(c),\n    }).for_each(|c| s.push(c));\n    s\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `Chars` in\
    \ the current scope\n --> /tmp/tmp5wflgl2r.rs:8:21\n  |\n8 |     numbers.chars().sort_by_key(|c|\
    \ match c {\n  |                     ^^^^^^^^^^^ method not found in `Chars<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    if numbers.len() < 9 {\n    \
    \    numbers = &numbers[..];\n    }\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.sort_by_key(|&x| x.parse().unwrap_or(x.parse()));\n    numbers_copy\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4wgmqmjq.rs:8:19\n  |\n6 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |                          ------\
    \ expected due to this parameter type\n7 |     if numbers.len() < 9 {\n8 |   \
    \      numbers = &numbers[..];\n  |                   ^^^^^^^^^^^^ expected struct\
    \ `String`, found `&str`\n  |\nhelp: try using a conversion method\n  |\n8 | \
    \        numbers = (&numbers[..]).to_string();\n  |                   +      \
    \      +++++++++++++\n\nerror[E0599]: no method named `sort_by_key` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmp4wgmqmjq.rs:11:18\n   |\n\
    11 |     numbers_copy.sort_by_key(|&x| x.parse().unwrap_or(x.parse()));\n   |\
    \                  ^^^^^^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    // Find the length of the input\
    \ string\n    let len = numbers.len();\n\n    // If there is only one number in\
    \ the string, no need to sort the numbers!\n    if len == 1 {\n        return\
    \ numbers;\n    }\n\n    // Create a copy of the input string so that we don't\
    \ mutate the original\n    let mut numbers_copy = numbers.clone();\n\n    // Create\
    \ a mutable reference to the string that will hold our sorted numbers\n    let\
    \ mut sorted_numbers: String = \"\";\n\n    // Keep looping until we're done sorting\
    \ the numbers\n    while let Some(number) = numbers_copy.split_ascii_whitespace().next()\
    \ {\n        sorted_numbers += number\n            .clone()\n            .sort_by_key(|&n|\
    \ n.to_digit(10))\n            .join();\n    }\n\n    // Return the sorted numbers\n\
    \    sorted_numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpso4si7c_.rs:19:38\n   |\n\
    19 |     let mut sorted_numbers: String = \"\";\n   |                        \
    \     ------   ^^- help: try using a conversion method: `.to_string()`\n   | \
    \                            |        |\n   |                             |  \
    \      expected struct `String`, found `&str`\n   |                          \
    \   expected due to this\n\nerror[E0599]: no method named `sort_by_key` found\
    \ for reference `&str` in the current scope\n  --> /tmp/tmpso4si7c_.rs:25:14\n\
    \   |\n25 |             .sort_by_key(|&n| n.to_digit(10))\n   |              ^^^^^^^^^^^\
    \ method not found in `&str`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    // Your code here\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq3f8s0ns.rs:6:37\n  |\n6 |\
    \ fn sort_numbers(numbers: String) -> String {\n  |    ------------          \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    if numbers.is_empty() {\n   \
    \     return numbers;\n    }\n    let mut numbers_vec = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    numbers_vec.sort();\n    let mut sorted_numbers = String::new();\n    for\
    \ n in numbers_vec {\n        sorted_numbers.push_str(&n);\n    }\n    sorted_numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"fiveninethree\"`,\n right: `\"three five nine\"`', /tmp/tmp177_9iar.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.to_string();\n\
    \    numbers = numbers.split_whitespace().collect::<Vec<&str>>();\n    numbers.sort();\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2zdjkmzx.rs:8:15\n  |\n7 |\
    \     let mut numbers = numbers.to_string();\n  |                       -------------------\
    \ expected due to this value\n8 |     numbers = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `String`, found struct `Vec`\n  |\n  = note: expected struct `String`\n\
    \             found struct `Vec<&str>`\n\nerror[E0599]: no method named `sort`\
    \ found for struct `String` in the current scope\n --> /tmp/tmp2zdjkmzx.rs:9:13\n\
    \  |\n9 |     numbers.sort();\n  |             ^^^^ method not found in `String`\n\
    \nerror[E0599]: no method named `join` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp2zdjkmzx.rs:10:13\n   |\n10 |     numbers.join(\" \")\n\
    \   |             ^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    if numbers.is_empty() {\n   \
    \     return numbers;\n    }\n\n    let mut numbers_iter = numbers.chars().enumerate();\n\
    \    let mut numbers_sorted = String::new();\n\n    numbers_iter.for_each(|(_,\
    \ num)| {\n        let (index, digit) = num;\n\n        if digit >= '0' && digit\
    \ <= '9' {\n            numbers_sorted.push_str(num);\n            numbers_sorted.push(digit\
    \ as char);\n        } else {\n            let value = if digit == 'nine' {\n\
    \                9\n            } else {\n                digit as char\n    \
    \        };\n\n            numbers_sorted.push_str(&*format!(\"{:02d}\", value));\n\
    \            numbers_sorted.push(digit as char);\n        }\n    });\n\n    numbers_sorted\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpc4zyfpe7.rs:21:37\n\
    \   |\n21 |             let value = if digit == 'nine' {\n   |               \
    \                      ^^^^^^\n   |\nhelp: if you meant to write a `str` literal,\
    \ use double quotes\n   |\n21 |             let value = if digit == \"nine\" {\n\
    \   |                                     ~~~~~~\n\nerror: unknown format trait\
    \ `d`\n  --> /tmp/tmpc4zyfpe7.rs:27:52\n   |\n27 |             numbers_sorted.push_str(&*format!(\"\
    {:02d}\", value));\n   |                                                    ^\n\
    \   |\n   = note: the only appropriate formatting traits are:\n           - ``,\
    \ which uses the `Display` trait\n           - `?`, which uses the `Debug` trait\n\
    \           - `e`, which uses the `LowerExp` trait\n           - `E`, which uses\
    \ the `UpperExp` trait\n           - `o`, which uses the `Octal` trait\n     \
    \      - `p`, which uses the `Pointer` trait\n           - `b`, which uses the\
    \ `Binary` trait\n           - `x`, which uses the `LowerHex` trait\n        \
    \   - `X`, which uses the `UpperHex` trait\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpc4zyfpe7.rs:15:13\n   |\n15 |         let (index, digit) = num;\n\
    \   |             ^^^^^^^^^^^^^^   --- this expression has type `char`\n   | \
    \            |\n   |             expected `char`, found tuple\n   |\n   = note:\
    \ expected type `char`\n             found tuple `(_, _)`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc4zyfpe7.rs:18:37\n   |\n18 |             numbers_sorted.push_str(num);\n\
    \   |                                     ^^^ expected `&str`, found `char`\n\n\
    error: aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.trim().split_whitespace();\n\
    \    numbers.sort_unstable();\n    let result = numbers[0] + numbers.join(\" \"\
    ).trim_end();\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_unstable` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpod75fry4.rs:8:13\n  |\n8 |     numbers.sort_unstable();\n\
    \  |             ^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0608]:\
    \ cannot index into a value of type `SplitWhitespace<'_>`\n --> /tmp/tmpod75fry4.rs:9:18\n\
    \  |\n9 |     let result = numbers[0] + numbers.join(\" \").trim_end();\n  | \
    \                 ^^^^^^^^^^\n\nerror[E0599]: no method named `join` found for\
    \ struct `SplitWhitespace` in the current scope\n --> /tmp/tmpod75fry4.rs:9:39\n\
    \  |\n9 |     let result = numbers[0] + numbers.join(\" \").trim_end();\n  | \
    \                                      ^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut result = String::new();\n\
    \    let mut numbers = numbers.splitn(3, ' ');\n    for number in numbers {\n\
    \        if let Some(index) = numbers.iter().position(|&x| x == number) {\n  \
    \          result = format!(\"{} {} {}\", result, number, numbers[index + 1])\n\
    \        } else {\n            result = format!(\"{} {}\", result, number)\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `std::str::SplitN`\
    \ in the current scope\n  --> /tmp/tmpbbvup0co.rs:10:38\n   |\n10 |         if\
    \ let Some(index) = numbers.iter().position(|&x| x == number) {\n   |        \
    \                              ^^^^ method not found in `std::str::SplitN<'_,\
    \ char>`\n\nerror[E0608]: cannot index into a value of type `std::str::SplitN<'_,\
    \ char>`\n  --> /tmp/tmpbbvup0co.rs:11:58\n   |\n11 |             result = format!(\"\
    {} {} {}\", result, number, numbers[index + 1])\n   |                        \
    \                                  ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_vec: Vec<String>\
    \ = vec![];\n    for n in numbers.split_whitespace() {\n        let n = n.to_owned();\n\
    \        if n.parse::<usize>().is_err() {\n            panic!(\"sort_numbers expects\
    \ a string of numbers between zero and nine, inclusive.\");\n        }\n     \
    \   numbers_vec.push(n);\n    }\n    numbers_vec.sort_by(|a, b| a.cmp(b));\n \
    \   numbers_vec.join(\", \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'sort_numbers expects a string of numbers between\
    \ zero and nine, inclusive.', /tmp/tmpr9ta0775.rs:11:13\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    if numbers.is_empty() {\n   \
    \     String::new()\n    } else {\n        let mut numbers_split: Vec<&str> =\
    \ numbers\n            .split_whitespace()\n            .collect();\n        numbers_split.sort_by_key(|s|\
    \ s.parse::<usize>().unwrap());\n        numbers_split.join(\" \")\n    }\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: InvalidDigit }', /tmp/tmpc9jtrwwj.rs:13:58\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp9zy7tx22.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n  |                                ^^^^^^^ method not found in\
    \ `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_vec = vec![numbers];\n\
    \    numbers_vec.sort_by_key(|&number| match number {\n        String::from(\"\
    zero\") => 0,\n        String::from(\"one\") => 1,\n        String::from(\"two\"\
    ) => 2,\n        String::from(\"three\") => 3,\n        String::from(\"four\"\
    ) => 4,\n        String::from(\"five\") => 5,\n        String::from(\"six\") =>\
    \ 6,\n        String::from(\"seven\") => 7,\n        String::from(\"eight\") =>\
    \ 8,\n        String::from(\"nine\") => 9,\n        _ => panic!(\"Not a valid\
    \ number: {}\", number),\n    });\n    numbers_vec.join()\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0164]: expected tuple struct or tuple variant, found associated\
    \ function `String::from`\n --> /tmp/tmpfnnxp8g8.rs:9:9\n  |\n9 |         String::from(\"\
    zero\") => 0,\n  |         ^^^^^^^^^^^^^^^^^^^^ `fn` calls are not allowed in\
    \ patterns\n  |\n  = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \nerror[E0164]: expected tuple struct or tuple variant, found associated function\
    \ `String::from`\n  --> /tmp/tmpfnnxp8g8.rs:10:9\n   |\n10 |         String::from(\"\
    one\") => 1,\n   |         ^^^^^^^^^^^^^^^^^^^ `fn` calls are not allowed in patterns\n\
    \   |\n   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \nerror[E0164]: expected tuple struct or tuple variant, found associated function\
    \ `String::from`\n  --> /tmp/tmpfnnxp8g8.rs:11:9\n   |\n11 |         String::from(\"\
    two\") => 2,\n   |         ^^^^^^^^^^^^^^^^^^^ `fn` calls are not allowed in patterns\n\
    \   |\n   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \nerror[E0164]: expected tuple struct or tuple variant, found associated function\
    \ `String::from`\n  --> /tmp/tmpfnnxp8g8.rs:12:9\n   |\n12 |         String::from(\"\
    three\") => 3,\n   |         ^^^^^^^^^^^^^^^^^^^^^ `fn` calls are not allowed\
    \ in patterns\n   |\n   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \nerror[E0164]: expected tuple struct or tuple variant, found associated function\
    \ `String::from`\n  --> /tmp/tmpfnnxp8g8.rs:13:9\n   |\n13 |         String::from(\"\
    four\") => 4,\n   |         ^^^^^^^^^^^^^^^^^^^^ `fn` calls are not allowed in\
    \ patterns\n   |\n   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \nerror[E0164]: expected tuple struct or tuple variant, found associated function\
    \ `String::from`\n  --> /tmp/tmpfnnxp8g8.rs:14:9\n   |\n14 |         String::from(\"\
    five\") => 5,\n   |         ^^^^^^^^^^^^^^^^^^^^ `fn` calls are not allowed in\
    \ patterns\n   |\n   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \nerror"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.trim().split_whitespace().collect::<Vec<_>>();\n\
    \    numbers.sort_unstable_by(|a, b| {\n        match &*a {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => {\n                let _a = &*a;\n\
    \                let _b = &*b;\n                cmp::Ordering::default().eq(&*_a,\
    \ &*_b)\n            }\n        }\n    });\n    strings.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmpscskq4my.rs:23:22\n   |\n23 |                 cmp::Ordering::default().eq(&*_a,\
    \ &*_b)\n   |                      ^^^^^^^^ not found in `cmp`\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::cmp::Ordering;\n   |\n1  |\
    \ use std::sync::atomic::Ordering;\n   |\nhelp: if you import `Ordering`, refer\
    \ to it directly\n   |\n23 -                 cmp::Ordering::default().eq(&*_a,\
    \ &*_b)\n23 +                 Ordering::default().eq(&*_a, &*_b)\n   | \n\nerror[E0425]:\
    \ cannot find value `strings` in this scope\n  --> /tmp/tmpscskq4my.rs:27:5\n\
    \   |\n27 |     strings.join(\" \")\n   |     ^^^^^^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpscskq4my.rs:10:13\n   |\n9  |\
    \         match &*a {\n   |               --- this expression has type `&&str`\n\
    10 |             \"zero\" => 0,\n   |             ^^^^^^ expected `&str`, found\
    \ `str`\n   |\n   = note: expected reference `&&str`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpscskq4my.rs:11:13\n\
    \   |\n9  |         match &*a {\n   |               --- this expression has type\
    \ `&&str`\n10 |             \"zero\" => 0,\n11 |             \"one\" => 1,\n \
    \  |             ^^^^^ expected `&str`, found `str`\n   |\n   = note: expected\
    \ reference `&&str`\n              found reference `&'static str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpscskq4my.rs:12:13\n   |\n9  |         match\
    \ &*a {\n   |               --- this expression has type `&&str`\n...\n12 |  \
    \           \"two\" => 2,\n   |             ^^^^^ expected `&str`, found `str`\n\
    \   |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpscskq4my.rs:13:13\n  \
    \ |\n9  |         match &*a {\n   |               --- this expression has type\
    \ `&&str`\n...\n13 |             \"three\" => 3,\n   |             ^^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched type"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sorted().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpia8bsdt9.rs:7:32\n  |\n7 |     numbers.split_whitespace().sorted().join(\"\
    \ \")\n  |                                ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| b.cmp(a))\n        .collect::<Vec<_>>()\n        .into_iter()\n        .map(|x|\
    \ format!(\"{}\", x).trim())\n        .collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpdgwjsk38.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| b.cmp(a))\n  |                                ^^^^^^^ method not found in\
    \ `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .split_whitespace()\n\
    \        .sorted()\n        .collect()\n        .join(' ')\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpxtydd11m.rs:9:10\n  |\n9 |         .sorted()\n\
    \  |          ^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut list = numbers\n    \
    \    .split_whitespace()\n        .collect::<Vec<&str>>()\n        .into_iter()\n\
    \        .cloned()\n        .collect();\n    list.sort_by(|a, b| b.cmp(a));\n\
    \    list\n        .iter()\n        .map(|s| s.to_string())\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `str: Clone` is not satisfied\n    --> /tmp/tmpqeo958w4.rs:11:10\n\
    \     |\n11   |         .cloned()\n     |          ^^^^^^ the trait `Clone` is\
    \ not implemented for `str`\n     |\n     = help: the trait `Clone` is implemented\
    \ for `String`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method\
    \ `collect` exists for struct `Cloned<std::vec::IntoIter<&str>>`, but its trait\
    \ bounds were not satisfied\n  --> /tmp/tmpqeo958w4.rs:12:10\n   |\n12 |     \
    \      .collect();\n   |            ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<&str>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `Cloned<std::vec::IntoIter<&str>>: Iterator`\n\
    \           which is required by `&mut Cloned<std::vec::IntoIter<&str>>: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| {\n        match a {\n            \"zero\" => 0,\n            \"one\" =>\
    \ 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => b.to_i32().unwrap() - a.to_i32().unwrap()\n        }\n    })\n  \
    \  .collect::<String>()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpdyg4vt94.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| {\n  |                                ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `to_i32` found for reference `&str` in the current\
    \ scope\n  --> /tmp/tmpdyg4vt94.rs:19:42\n   |\n19 |             _ => b.to_i32().unwrap()\
    \ - a.to_i32().unwrap()\n   |                                          ^^^^^^\
    \ method not found in `&str`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut split = numbers.splitn(2,\
    \ ' ');\n    sorted = split.iter().cloned().collect::<Vec<i32>>();\n    split.pop();\n\
    \    split.pop();\n    split.sort();\n    for number in split {\n        if number\
    \ > 9 {\n            number.to_string().to_string()\n        } else if number\
    \ == 0 {\n            number.to_string()\n        } else {\n            number.to_string().to_string()\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `sorted` in this scope\n --> /tmp/tmpnijfa9o0.rs:8:5\n\
    \  |\n8 |     sorted = split.iter().cloned().collect::<Vec<i32>>();\n  |     ^^^^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `iter` found for struct\
    \ `std::str::SplitN` in the current scope\n --> /tmp/tmpnijfa9o0.rs:8:20\n  |\n\
    8 |     sorted = split.iter().cloned().collect::<Vec<i32>>();\n  |           \
    \         ^^^^ method not found in `std::str::SplitN<'_, char>`\n\nerror[E0599]:\
    \ no method named `pop` found for struct `std::str::SplitN` in the current scope\n\
    \ --> /tmp/tmpnijfa9o0.rs:9:11\n  |\n9 |     split.pop();\n  |           ^^^ method\
    \ not found in `std::str::SplitN<'_, char>`\n\nerror[E0599]: no method named `pop`\
    \ found for struct `std::str::SplitN` in the current scope\n  --> /tmp/tmpnijfa9o0.rs:10:11\n\
    \   |\n10 |     split.pop();\n   |           ^^^ method not found in `std::str::SplitN<'_,\
    \ char>`\n\nerror[E0599]: no method named `sort` found for struct `std::str::SplitN`\
    \ in the current scope\n  --> /tmp/tmpnijfa9o0.rs:11:11\n   |\n11 |     split.sort();\n\
    \   |           ^^^^ method not found in `std::str::SplitN<'_, char>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnijfa9o0.rs:13:21\n   |\n13 |         if number\
    \ > 9 {\n   |                     ^ expected `&str`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnijfa9o0.rs:14:13\n   |\n13 | /         if number\
    \ > 9 {\n14 | |             number.to_string().to_string()\n   | |           \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `String`\n15 | |\
    \         } else if number == 0 {\n16 | |             number.to_string()\n17 |\
    \ |         } else {\n18 | |             number.to_string().to_string()\n19 |\
    \ |         }\n   | |_________- expected this to be `()`\n   |\nhelp: consider\
    \ using a semicolon here\n   |\n14 |             number.to_string().to_string();\n\
    \   |                                           +\nhelp: consider using a semicolon\
    \ here\n   |\n19 |         };\n   |          +\nhelp: you might have meant to\
    \ return this value\n   |\n14 |             return number.to_string().to_string("
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    if numbers.is_empty() {\n   \
    \     return numbers;\n    }\n    let mut chars = numbers.chars().collect::<Vec<&str>>();\n\
    \    chars.sort_by(|a, b| a.cmp(b));\n    numbers.chars().collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<&str>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpbgoha0r6.rs:10:37\n     |\n10\
    \   |     let mut chars = numbers.chars().collect::<Vec<&str>>();\n     |    \
    \                                 ^^^^^^^ value of type `Vec<&str>` cannot be\
    \ built from `std::iter::Iterator<Item=char>`\n     |\n     = help: the trait\
    \ `FromIterator<char>` is not implemented for `Vec<&str>`\n     = help: the trait\
    \ `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound in\
    \ `collect`\n\nerror[E0277]: a value of type `Vec<&str>` cannot be built from\
    \ an iterator over elements of type `char`\n    --> /tmp/tmpbgoha0r6.rs:12:21\n\
    \     |\n12   |     numbers.chars().collect::<Vec<&str>>().join(\" \")\n     |\
    \                     ^^^^^^^ value of type `Vec<&str>` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \     |\n     = help: the trait `FromIterator<char>` is not implemented for `Vec<&str>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut result = String::new();\n\
    \    for n in numbers.split_whitespace() {\n        if *n >= '0' && *n <= '9'\
    \ {\n            result += *n.to_string();\n        } else {\n            return\
    \ format!(\"Invalid input: {}\", numbers);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmbavtzrs.rs:9:18\n  |\n9 |\
    \         if *n >= '0' && *n <= '9' {\n  |                  ^^^ expected `str`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpmbavtzrs.rs:9:31\n\
    \  |\n9 |         if *n >= '0' && *n <= '9' {\n  |                           \
    \    ^^^ expected `str`, found `char`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpmbavtzrs.rs:10:23\n   |\n10 |             result += *n.to_string();\n\
    \   |                       ^^^^^^^^^^^^^^\n   |                       |\n   |\
    \                       expected `&str`, found `str`\n   |                   \
    \    help: consider borrowing here: `&*n.to_string()`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split(\" \")\n      \
    \  .map(|n| n.to_owned())\n        .sort_unstable()\n        .collect::<Vec<String>>()\n\
    \        .into_iter()\n        .map(|s| s.to_string())\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_unstable` found for struct `Map` in\
    \ the current scope\n --> /tmp/tmppptta4tq.rs:9:10\n  |\n9 |         .sort_unstable()\n\
    \  |          ^^^^^^^^^^^^^ method not found in `Map<std::str::Split<'_, &str>,\
    \ [closure@/tmp/tmppptta4tq.rs:8:14: 8:30]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    strings.sort_by_key(|s| {\n \
    \       match s.parse::<u32>() {\n            Ok(number) => number.to_string(),\n\
    \            Err(_) => panic!(\"String '{}' is not valid number.\", numbers),\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `strings` in this scope\n --> /tmp/tmppypenx7h.rs:7:5\n\
    \  |\n7 |     strings.sort_by_key(|s| {\n  |     ^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.split_whitespace();\n\
    \    numbers.sort_by(|a, b| a.cmp(b));\n    String::from_utf8_lossy(&numbers).to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp6ndaxjmj.rs:8:13\n  |\n8 |     numbers.sort_by(|a,\
    \ b| a.cmp(b));\n  |             ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp6ndaxjmj.rs:9:29\n  |\n9 |    \
    \ String::from_utf8_lossy(&numbers).to_string()\n  |                         \
    \    ^^^^^^^^ expected slice `[u8]`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected reference `&[u8]`\n             found reference `&SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut num_list = numbers.split_whitespace().collect::<Vec<_>>();\n\
    \    let mut num_list2 = num_list.clone();\n\n    loop {\n        let mut found\
    \ = false;\n        let mut pos = 0;\n        let mut temp = 0;\n        while\
    \ !found && pos < num_list2.len() {\n            if num_list[pos] < num_list[pos\
    \ + 1] {\n                temp = num_list[pos];\n                num_list[pos]\
    \ = num_list[pos + 1];\n                num_list[pos + 1] = temp;\n          \
    \      pos += 1;\n                found = true;\n            } else {\n      \
    \          pos += 1;\n            }\n        }\n        if pos == num_list2.len()\
    \ {\n            break;\n        }\n    }\n    String::from_utf8(std::iter::repeat('0').take(num_list.len()).collect()).unwrap().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpziiq7eyz.rs:16:24\n   |\n\
    13 |         let mut temp = 0;\n   |                        - expected due to\
    \ this value\n...\n16 |                 temp = num_list[pos];\n   |          \
    \              ^^^^^^^^^^^^^ expected integer, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpziiq7eyz.rs:18:37\n   |\n18 |                 num_list[pos\
    \ + 1] = temp;\n   |                 -----------------   ^^^^ expected `&str`,\
    \ found integer\n   |                 |\n   |                 expected due to\
    \ the type of this binding\n\nerror[E0277]: a value of type `Vec<u8>` cannot be\
    \ built from an iterator over elements of type `char`\n    --> /tmp/tmpziiq7eyz.rs:29:23\n\
    \     |\n29   |     String::from_utf8(std::iter::repeat('0').take(num_list.len()).collect()).unwrap().to_string()\n\
    \     |     ----------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<u8>` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \     |     |\n     |     required by a bound introduced by this call\n     |\n\
    \     = help: the trait `FromIterator<char>` is not implemented for `Vec<u8>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut split = numbers.split(\"\
    \ \").cloned().collect::<Vec<_>>();\n    split.sort_unstable();\n    numbers.to_string().unwrap().to_owned().to_string().unwrap().into_owned().to_owned()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `str: Clone` is not satisfied\n    --> /tmp/tmpyss60epu.rs:7:40\n\
    \     |\n7    |     let mut split = numbers.split(\" \").cloned().collect::<Vec<_>>();\n\
    \     |                                        ^^^^^^ the trait `Clone` is not\
    \ implemented for `str`\n     |\n     = help: the trait `Clone` is implemented\
    \ for `String`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method\
    \ `collect` exists for struct `Cloned<std::str::Split<'_, &str>>`, but its trait\
    \ bounds were not satisfied\n  --> /tmp/tmpyss60epu.rs:7:49\n   |\n7  |      \
    \ let mut split = numbers.split(\" \").cloned().collect::<Vec<_>>();\n   |   \
    \                                                ^^^^^^^ method cannot be called\
    \ on `Cloned<std::str::Split<'_, &str>>` due to unsatisfied trait bounds\n   |\n\
    \   = note: the following trait bounds were not satisfied:\n           `Cloned<std::str::Split<'_,\
    \ &str>>: Iterator`\n           which is required by `&mut Cloned<std::str::Split<'_,\
    \ &str>>: Iterator`\n\nerror[E0599]: no method named `unwrap` found for struct\
    \ `String` in the current scope\n --> /tmp/tmpyss60epu.rs:9:25\n  |\n9 |     numbers.to_string().unwrap().to_owned().to_string().unwrap().into_owned().to_owned()\n\
    \  |                         ^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers = numbers.split(\"\
    \ \").collect::<Vec<_>>();\n\n    let mut res = String::from(\"zero\");\n    let\
    \ mut count = String::from(\"one\");\n\n    for i in 1..numbers.len() {\n    \
    \    if numbers[i - 1] < numbers[i] {\n            res.push_str(&mut count);\n\
    \            count.push_str(&mut numbers[i - 1]);\n        } else {\n        \
    \    res.push_str(&mut numbers[i - 1]);\n            count.push_str(&mut numbers[i]);\n\
    \        }\n    }\n\n    res.push_str(&mut numbers[0..numbers.len() - 1]);\n\n\
    \    return res\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnrq4uwq2.rs:22:18\n   |\n\
    22 |     res.push_str(&mut numbers[0..numbers.len() - 1]);\n   |             \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found slice `[&str]`\n\
    \   |\n   = note:      expected reference `&str`\n           found mutable reference\
    \ `&mut [&str]`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .split(\" \"\
    )\n        .sort_by(|a, b| a.cmp(b))\n        .to_owned()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpac_jnsuh.rs:9:10\n  |\n9 |         .sort_by(|a,\
    \ b| a.cmp(b))\n  |          ^^^^^^^ method not found in `std::str::Split<'_,\
    \ &str>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .chars()\n \
    \       .filter(|c| *c < 'n' || '*' < *c)\n        .sort_by_key(|c| 'zero'.to_string().cmp(c.to_string()))\n\
    \        .map(|c| *c).collect()\n        .join(' ')\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpt421e01x.rs:10:26\n\
    \   |\n10 |         .sort_by_key(|c| 'zero'.to_string().cmp(c.to_string()))\n\
    \   |                          ^^^^^^\n   |\nhelp: if you meant to write a `str`\
    \ literal, use double quotes\n   |\n10 |         .sort_by_key(|c| \"zero\".to_string().cmp(c.to_string()))\n\
    \   |                          ~~~~~~\n\nerror[E0599]: no method named `sort_by_key`\
    \ found for struct `Filter` in the current scope\n  --> /tmp/tmpt421e01x.rs:10:10\n\
    \   |\n10 |         .sort_by_key(|c| 'zero'.to_string().cmp(c.to_string()))\n\
    \   |          ^^^^^^^^^^^ method not found in `Filter<Chars<'_>, [closure@/tmp/tmpt421e01x.rs:9:17:\
    \ 9:41]>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers = numbers.split_whitespace();\n\
    \    numbers\n        .iter()\n        .map(|n| match n.to_digit(10) {\n     \
    \       Some(n) => String::from(n),\n            None => return String::from(n),\n\
    \        })\n        .collect::<String>(\" \")\n        .to_string()\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpduai49_7.rs:9:10\n  |\n9 |         .iter()\n\
    \  |          ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| b.cmp(a))\n        .iter()\n        .map(|e| e.to_string())\n        .collect()\n\
    \        .join(' ')\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpzj6qehq1.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| b.cmp(a))\n  |                                ^^^^^^^ method not found in\
    \ `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut list = numbers.split(\"\
    \ \").collect::<Vec<_>>();\n    list.sort_by(|a, b| a.to_u32_le().cmp(b.to_u32_le()));\n\
    \    let mut result = String::new();\n    for num in list.into_iter() {\n    \
    \    result.push_str(&num);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_u32_le` found for reference `&&str` in\
    \ the current scope\n --> /tmp/tmpatvq3367.rs:8:27\n  |\n8 |     list.sort_by(|a,\
    \ b| a.to_u32_le().cmp(b.to_u32_le()));\n  |                           ^^^^^^^^^\
    \ method not found in `&&str`\n\nerror[E0599]: no method named `to_u32_le` found\
    \ for reference `&&str` in the current scope\n --> /tmp/tmpatvq3367.rs:8:45\n\
    \  |\n8 |     list.sort_by(|a, b| a.to_u32_le().cmp(b.to_u32_le()));\n  |    \
    \                                         ^^^^^^^^^ method not found in `&&str`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers\n        .split_whitespace()\n\
    \        .map(|n| n.parse::<usize>().unwrap())\n        .collect()\n        .sort_unstable()\n\
    \        .collect::<Vec<_>>()\n        .join(' ')\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmphx5h4ra4.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ cannot infer type for type\
    \ parameter `B` declared on the associated function `collect`\n   |\n   = note:\
    \ type must be known at this point\nhelp: consider specifying the type argument\
    \ in the method call\n   |\n10 |         .collect::<B>()\n   |               \
    \  +++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_unstable_by(|n|\
    \ n.parse::<usize>()).collect()\n        .join(' ')\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_unstable_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmjjkug59.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_unstable_by(|n|\
    \ n.parse::<usize>()).collect()\n  |                                ^^^^^^^^^^^^^^^^\
    \ method not found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by_key(|x|\
    \ x.parse().unwrap())\n        .collect::<Vec<_>>()\n        .iter()\n       \
    \ .map(|s| s.to_string())\n        .collect::<Vec<_>>()\n        .join(\"\\n\"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpoyss5yt9.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by_key(|x|\
    \ x.parse().unwrap())\n  |                                ^^^^^^^^^^^ method not\
    \ found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.chars().chain()\n   \
    \     .filter_map(|x| *x).\n        cloned().\n        collect::<Vec<_>>().\n\
    \        sort_by_key(|x| x.to_string()).\n        collect::<String>() + \"\"\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmp5tnvtoo6.rs:7:21\n    |\n7   |     numbers.chars().chain()\n \
    \   |                     ^^^^^- supplied 0 arguments\n    |                 \
    \    |\n    |                     expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror[E0614]: type `char` cannot be dereferenced\n\
    \ --> /tmp/tmp5tnvtoo6.rs:8:25\n  |\n8 |         .filter_map(|x| *x).\n  |   \
    \                      ^^\n\nerror[E0599]: `()` is not an iterator\n  --> /tmp/tmp5tnvtoo6.rs:12:9\n\
    \   |\n12 |         collect::<String>() + \"\"\n   |         ^^^^^^^ `()` is not\
    \ an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `(): Iterator`\n           which is required by `&mut (): Iterator`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0599, E0614.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let numbers_string = numbers.split(\"\
    \ \").collect::<Vec<_>>();\n    let numbers_string_sorted = numbers_string.into_iter().sort_by_key(|x|\
    \ x.parse().unwrap());\n    numbers_string_sorted.collect::<String>(\"\")\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmp91b6ltt_.rs:8:60\n  |\n8 |     let numbers_string_sorted\
    \ = numbers_string.into_iter().sort_by_key(|x| x.parse().unwrap());\n  |     \
    \                                                       ^^^^^^^^^^^ method not\
    \ found in `std::vec::IntoIter<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    if numbers.is_empty() {\n   \
    \     return numbers\n    }\n\n    let mut numbers: Vec<u8> = numbers.split_whitespace().collect();\n\
    \    if numbers.len() < 2 {\n        return numbers\n    }\n\n    let mut numbers\
    \ = vec![];\n\n    for n in numbers {\n        match n % 10 {\n            1 =>\
    \ numbers.push('one'),\n            2 => numbers.push('two'),\n            3 =>\
    \ numbers.push('three'),\n            4 => numbers.push('four'),\n           \
    \ 5 => numbers.push('five'),\n            6 => numbers.push('six'),\n        \
    \    7 => numbers.push('seven'),\n            8 => numbers.push('eight'),\n  \
    \          9 => numbers.push('nine'),\n            _ => unreachable!(),\n    \
    \    }\n    }\n\n    let mut s = Vec::with_capacity(2 * numbers.len());\n    for\
    \ n in numbers {\n        s.push_str(&format!(\"{} \", n));\n    }\n\n    s.reverse();\n\
    \n    s.insert(0, \" \");\n    s.push_str(\"and\");\n    \n    return String::from(&s[..]);\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpy47vhlfd.rs:20:31\n\
    \   |\n20 |             1 => numbers.push('one'),\n   |                      \
    \         ^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n20 |             1 => numbers.push(\"one\"),\n   |           \
    \                    ~~~~~\n\nerror: character literal may only contain one codepoint\n\
    \  --> /tmp/tmpy47vhlfd.rs:21:31\n   |\n21 |             2 => numbers.push('two'),\n\
    \   |                               ^^^^^\n   |\nhelp: if you meant to write a\
    \ `str` literal, use double quotes\n   |\n21 |             2 => numbers.push(\"\
    two\"),\n   |                               ~~~~~\n\nerror: character literal\
    \ may only contain one codepoint\n  --> /tmp/tmpy47vhlfd.rs:22:31\n   |\n22 |\
    \             3 => numbers.push('three'),\n   |                              \
    \ ^^^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double quotes\n\
    \   |\n22 |             3 => numbers.push(\"three\"),\n   |                  \
    \             ~~~~~~~\n\nerror: character literal may only contain one codepoint\n\
    \  --> /tmp/tmpy47vhlfd.rs:23:31\n   |\n23 |             4 => numbers.push('four'),\n\
    \   |                               ^^^^^^\n   |\nhelp: if you meant to write\
    \ a `str` literal, use double quotes\n   |\n23 |             4 => numbers.push(\"\
    four\"),\n   |                               ~~~~~~\n\nerror: character literal\
    \ may only contain one codepoint\n  --> /tmp/tmpy47vhlfd.rs:24:31\n   |\n24 |\
    \             5 => numbers.push('five'),\n   |                               ^^^^^^\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    24 |             5 => numbers.push(\"five\"),\n   |                          \
    \     ~~~~~~\n\nerror: character literal may only contain one codepoint\n  -->\
    \ /tmp/tmpy47vhlfd.rs:25:31\n   |\n25 |             6 => numbers.push('six'),\n\
    \   |                               ^^^^^\n   |\nhelp: if you meant to write a\
    \ `str` literal, use double quotes\n   |\n25 |             6 => numbers.push(\"\
    six\"),\n   |                               ~~~~~\n\nerror: character liter"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    numbers.chars().sorted(|&x, &y|\
    \ x.cmp(&y)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp934y7ap5.rs:7:21\n  |\n7 |     numbers.chars().sorted(|&x,\
    \ &y| x.cmp(&y)).collect()\n  |                     ^^^^^^ method not found in\
    \ `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
