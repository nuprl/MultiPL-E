name: HumanEval_46_fib4
language: rust
results:
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        4\
    \ => 0,\n        5 => 4,\n        6 => 8,\n        7 => 14,\n        _ => panic!(\"\
    fib4 requires a positive integer greater than or equal to 7\")\n    }\n}\n\nfn\
    \ main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'fib4 requires a positive integer greater than\
    \ or equal to 7', /tmp/tmpomvu78a3.rs:24:14\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4),\n    }\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    debug_assert!(n\
    \ >= 1);\n    if n < 4 {\n        return n;\n    }\n    let mut a = 1;\n    let\
    \ mut b = 1;\n    let mut c = 1;\n    let mut d = 1;\n    for _ in 0..n {\n  \
    \      let c = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = c;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n \
    \   assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp0pq2qq9c.rs:21:9\n\
    \   |\n21 |     let mut c = 1;\n   |         ----^\n   |         |\n   |     \
    \    help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0384]: cannot assign twice to immutable variable `c`\n  --> /tmp/tmp0pq2qq9c.rs:27:9\n\
    \   |\n24 |         let c = a + b + c + d;\n   |             -\n   |         \
    \    |\n   |             first assignment to `c`\n   |             help: consider\
    \ making this binding mutable: `mut c`\n...\n27 |         c = d;\n   |       \
    \  ^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ if n == 4 {\n        return 1\n    }\n    return fib4(n - 1) + fib4(n - 2) +\
    \ fib4(n - 3) + fib4(n - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `28`', /tmp/tmp3dhou2it.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ 0 }\n    else { 1 + fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4) }\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 3 {\n\
    \        0\n    } else {\n        n + fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `4`', /tmp/tmppp6elgh6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 1;\n   \
    \ }\n    if n == 3 {\n        return 2;\n    }\n    if n == 4 {\n        return\
    \ 3;\n    }\n    if n == 5 {\n        return 4;\n    }\n    if n == 6 {\n    \
    \    return 5;\n    }\n    if n == 7 {\n        return 6;\n    }\n    if n ==\
    \ 8 {\n        return 7;\n    }\n    if n == 9 {\n        return 8;\n    }\n \
    \   if n == 10 {\n        return 9;\n    }\n    if n == 11 {\n        return 10;\n\
    \    }\n    if n == 12 {\n        return 11;\n    }\n    if n == 13 {\n      \
    \  return 12;\n    }\n    if n == 14 {\n        return 13;\n    }\n    if n ==\
    \ 15 {\n        return 14;\n    }\n    if n == 16 {\n        return 15;\n    }\n\
    \    if n == 17 {\n        return 16;\n    }\n    if n == 18 {\n        return\
    \ 17;\n    }\n    if n == 19 {\n        return 18;\n    }\n    if n == 20 {\n\
    \        return 19;\n    }\n    if n == 21 {\n        return 20;\n    }\n    if\
    \ n == 22 {\n        return 21;\n    }\n    if n == 23 {\n        return 22;\n\
    \    }\n    if n == 24 {\n        return 23;\n    }\n    if n == 25 {\n      \
    \  return 24;\n    }\n    if n == 26 {\n        return 25;\n    }\n    if n ==\
    \ 27 {\n        return 26;\n    }\n    if n == 28 {\n        return 27;\n    }\n\
    \    if n == 29 {\n        return 28;\n    }\n    if n == 30 {\n        return\
    \ 29;\n    }\n    if n == 31 {\n        return 30;\n    }\n    if n == 32 {\n\
    \        return 31;\n    }\n    if n == 33 {\n        return 32;\n    }\n    if\
    \ n == 34 {\n        return 33;\n    }\n    if n == 35 {\n        return 34;\n\
    \    }\n    if n == 36 {\n        return 35;\n    }\n    if n == 37 {\n      \
    \  return 36;\n    }\n    if n == 38 {\n        return 37;\n    }\n    if n ==\
    \ 39 {\n        return 38;\n    }\n    if n == 40 {\n        return 39;\n    }\n\
    \    if n == 41 {\n        return 40;\n    }\n    if n == 42 {\n        return\
    \ 41;\n    }\n    if n == 43 {\n        return 42;\n    }\n    if n == 44 {\n\
    \        return 43;\n    }\n    if n == 45 {\n        return 44;\n    }\n    if\
    \ n == 46 {\n        return 45;\n    }\n    if n == 47 {\n        return 46;\n\
    \    }\n    if n == 48 {\n        return 47;\n    }\n    if n == 49 {\n      \
    \  return \n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpeu1ve3j1.rs:169:3\n\
    \    |\n14  | fn fib4(n: isize) -> isize {\n    |                            -\
    \ unclosed delimiter\n...\n159 |     if n == 49 {\n    |                - this\
    \ delimiter might not be properly closed...\n160 |         return \n161 | }\n\
    \    | - ...as it matches this but it has different indentation\n...\n169 | }\n\
    \    |   ^\n\nerror[E0069]: `return;` in a function whose return type is not `()`\n\
    \   --> /tmp/tmpeu1ve3j1.rs:160:9\n    |\n14  | fn fib4(n: isize) -> isize {\n\
    \    |                      ----- expected `isize` because of this return type\n\
    ...\n160 |         return \n    |         ^^^^^^ return type is not `()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeu1ve3j1.rs:14:22\n   |\n14 | fn fib4(n: isize)\
    \ -> isize {\n   |    ----              ^^^^^ expected `isize`, found `()`\n \
    \  |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0069, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0069`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::mem::replace;\n\
    \    use std::mem::swap;\n    let mut fib: isize = 0;\n    for _ in 0..n {\n \
    \       fib += 1;\n        swap(fib, fib - 1);\n    }\n    fib\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "warning: unused import: `std::mem::replace`\n  --> /tmp/tmp3lzock9i.rs:15:9\n\
    \   |\n15 |     use std::mem::replace;\n   |         ^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3lzock9i.rs:20:14\n   |\n20 |         swap(fib, fib - 1);\n\
    \   |              ^^^\n   |              |\n   |              expected `&mut\
    \ _`, found `isize`\n   |              help: consider mutably borrowing here:\
    \ `&mut fib`\n   |\n   = note: expected mutable reference `&mut _`\n         \
    \                  found type `isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp3lzock9i.rs:20:19\n   |\n20 |         swap(fib, fib - 1);\n   |    \
    \               ^^^^^^^\n   |                   |\n   |                   expected\
    \ `&mut _`, found `isize`\n   |                   help: consider mutably borrowing\
    \ here: `&mut (fib - 1)`\n   |\n   = note: expected mutable reference `&mut _`\n\
    \                           found type `isize`\n\nerror: aborting due to 2 previous\
    \ errors; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 2 { return\
    \ n }\n    let a = fib4(n - 1);\n    let b = fib4(n - 2);\n    let c = fib4(n\
    \ - 3);\n    let d = fib4(n - 4);\n    (a + b + c + d) as isize\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-6`,\n right: `4`', /tmp/tmpzl94240u.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut sum\
    \ = 0;\n    loop {\n        if n == 0 {\n            return sum;\n        }\n\
    \        sum += n;\n        n -= 1;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpof_p2u6n.rs:21:9\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |         - help: consider making\
    \ this binding mutable: `mut n`\n...\n21 |         n -= 1;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4\
    \ = [0i32; 4];\n    for i in 0..n {\n        fib4[i] = fib4[i - 1] + fib4[i -\
    \ 2] + fib4[i - 3] + fib4[i - 4];\n    }\n    fib4[n - 1]\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[i32]` cannot be indexed by `isize`\n  --> /tmp/tmpbzumylgu.rs:17:9\n\
    \   |\n17 |         fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i\
    \ - 4];\n   |         ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[i32]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `[i32]`\n\
    \nerror[E0277]: the type `[i32]` cannot be indexed by `isize`\n  --> /tmp/tmpbzumylgu.rs:17:19\n\
    \   |\n17 |         fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i\
    \ - 4];\n   |                   ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[i32]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[i32]`\n\nerror[E0277]: the type `[i32]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpbzumylgu.rs:17:33\n   |\n17 |         fib4[i] = fib4[i\
    \ - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n   |                      \
    \           ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[i32]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `[i32]`\n\
    \nerror[E0277]: the type `[i32]` cannot be indexed by `isize`\n  --> /tmp/tmpbzumylgu.rs:17:47\n\
    \   |\n17 |         fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i\
    \ - 4];\n   |                                               ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[i32]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `[i32]`\n\nerror[E0277]: the type `["
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut s =\
    \ 0.;\n    let mut x = 0.;\n    if n == 0 {\n        return 0;\n    }\n    if\
    \ n == 1 || n == 2 {\n        return 1;\n    }\n    if n == 3 {\n        return\
    \ 2;\n    }\n    if n == 4 {\n        return 1;\n    }\n    if n == 5 {\n    \
    \    return 3;\n    }\n    while x < n {\n        s = s + x;\n        x = x +\
    \ 1;\n    }\n    s * 5\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp97f18lnf.rs:32:15\n   |\n\
    32 |     while x < n {\n   |               ^ expected floating-point number, found\
    \ `isize`\n\nerror[E0277]: can't compare `{float}` with `isize`\n  --> /tmp/tmp97f18lnf.rs:32:13\n\
    \   |\n32 |     while x < n {\n   |             ^ no implementation for `{float}\
    \ < isize` and `{float} > isize`\n   |\n   = help: the trait `PartialOrd<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: cannot add an integer\
    \ to a float\n  --> /tmp/tmp97f18lnf.rs:34:15\n   |\n34 |         x = x + 1;\n\
    \   |               ^ no implementation for `{float} + {integer}`\n   |\n   =\
    \ help: the trait `Add<{integer}>` is not implemented for `{float}`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ multiply `{float}` by `{integer}`\n  --> /tmp/tmp97f18lnf.rs:36:7\n   |\n36\
    \ |     s * 5\n   |       ^ no implementation for `{float} * {integer}`\n   |\n\
    \   = help: the trait `Mul<{integer}>` is not implemented for `{float}`\n   =\
    \ help: the following other types implement trait `Mul<Rhs>`:\n             <&'a\
    \ f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128\
    \ as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as\
    \ Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc -"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ 0 } else { fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4) }\n}\n\nfn\
    \ main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 3 { return\
    \ n }\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n\nfn main() {\n \
    \   let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `4`', /tmp/tmpei_cis8g.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match (0..=n).take(5).fold(0,|a,b|\
    \ a + b + fib4(b - 1))\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `?`, `{`, or an operator, found `}`\n  -->\
    \ /tmp/tmpqxhd360k.rs:16:1\n   |\n15 |     match (0..=n).take(5).fold(0,|a,b|\
    \ a + b + fib4(b - 1))\n   |     ----- while parsing this `match` expression \
    \           - expected one of `.`, `?`, `{`, or an operator\n16 | }\n   | ^ unexpected\
    \ token\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 2 { return\
    \ 0 }\n    if n < 4 { return 1 }\n    if n < 9 { return n }\n    let mut f = 0usize;\n\
    \    for i in 1..(n/4) {\n        let f = f + i;\n    }\n    let f = f + 4;\n\
    \    f\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4_017oef.rs:20:21\n   |\n\
    20 |         let f = f + i;\n   |                     ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmp4_017oef.rs:20:19\n\
    \   |\n20 |         let f = f + i;\n   |                   ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4_017oef.rs:23:5\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |                      ----- expected\
    \ `isize` because of return type\n...\n23 |     f\n   |     ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n23 |     f.try_into().unwrap()\n \
    \  |      ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ let fib5 = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    fib5\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpb5g4ujjl.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        0\n    } else {\n        fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    debug_assert!(n\
    \ >= 0 && n < 41);\n    let mut a: isize = 0;\n    let mut b = 1;\n    for _ in\
    \ 0..n {\n        let tmp = a;\n        a = b;\n        b = tmp + b + a + b;\n\
    \    }\n    b\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `360`,\n right: `4`', /tmp/tmp8276wr_0.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::iter::repeat;\n\
    \n    fn fib(n: isize) -> isize {\n        if n == 0 || n == 1 {\n           \
    \ return 0;\n        }\n        fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n -\
    \ 4)\n    }\n\n    repeat(n - 1).chain(repeat(n - 2).chain(repeat(n - 3).chain(repeat(n\
    \ - 4)))).take(n).sum()\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2gcotvf2.rs:24:87\n   |\n\
    24 |     repeat(n - 1).chain(repeat(n - 2).chain(repeat(n - 3).chain(repeat(n\
    \ - 4)))).take(n).sum()\n   |                                                \
    \                                       ^ expected `usize`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n24 |     repeat(n - 1).chain(repeat(n - 2).chain(repeat(n\
    \ - 3).chain(repeat(n - 4)))).take(n.try_into().unwrap()).sum()\n   |        \
    \                                                                            \
    \    ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\n            \"fib4() called with invalid argument {} < 0\".format(n)\n\
    \        )\n    }\n\n    let mut fib4_n = 4 * (n - 1) + fib4(n - 2);\n    fib4_n\
    \ += fib4(n - 3) + fib4(n - 4);\n    fib4_n\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n  --> /tmp/tmpehntlqm2.rs:17:58\n   |\n17 |          \
    \   \"fib4() called with invalid argument {} < 0\".format(n)\n   |           \
    \                                               ^^^^^^ method not found in `&'static\
    \ str`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        n\
    \ => fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    fn fib4(i: isize)\
    \ -> isize {\n        if i == 0 || i == 1 {\n            i\n        }\n      \
    \  else if i == 2 {\n            0\n        }\n        else if i == 3 {\n    \
    \        1\n        }\n        else {\n            fib4(i-1) + fib4(i-2) + fib4(i-3)\
    \ + fib4(i-4)\n        }\n    }\n    fib4(n)\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `27`,\n right: `28`', /tmp/tmp8alsvqn1.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ 0 }\n    else if n == 1 { 1 }\n    else { fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4) }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    fn recurse(n:\
    \ isize, x: usize) -> isize {\n        if n == 0 {\n            x\n        } else\
    \ {\n            recurse(n - 1, x + x)\n        }\n    }\n    recurse(n, 0)\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvj9t1lmx.rs:17:13\n   |\n\
    15 |     fn recurse(n: isize, x: usize) -> isize {\n   |                     \
    \                  ----- expected `isize` because of return type\n16 |       \
    \  if n == 0 {\n17 |             x\n   |             ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |             x.try_into().unwrap()\n\
    \   |              ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut num:\
    \ isize = 1;\n    while n != 0 {\n        num = num + n;\n        n = n - 4;\n\
    \    }\n    num\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpnmbv8byv.rs:18:9\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |         - help: consider making\
    \ this binding mutable: `mut n`\n...\n18 |         n = n - 4;\n   |         ^^^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n\n    let mut tmp: isize = 1\n    for i in 1..n {\n\
    \        tmp += i\n    }\n\n    tmp\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmp9_3a5pcm.rs:19:27\n\
    \   |\n19 |     let mut tmp: isize = 1\n   |                           ^ help:\
    \ add `;` here\n20 |     for i in 1..n {\n   |     --- unexpected token\n\nerror:\
    \ aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    if n < 4 {\n        return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4);\n    }\n    let result = fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4);\n    if n < 8 {\n        result + fib4(n-4);\n    }\n    else {\n\
    \        result + fib4(n-8);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-6`,\n right: `4`', /tmp/tmpdoit11qk.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut accum:\
    \ isize = 0;\n    for i in 0..n {\n        accum += fibo4(i);\n    }\n    accum\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fibo4` in this scope\n  --> /tmp/tmpmtygin6l.rs:17:18\n\
    \   |\n17 |         accum += fibo4(i);\n   |                  ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    // Your code\
    \ here\n    let mut fib4 = vec![0, 1, 1, 1];\n    if n <= 3 { fib4[n] } else {\
    \ fib4 += fib4[n - 1] + fib4[n - 2] + fib4[n - 3] + fib4[n - 4]; }\n    fib4\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpomekq1_5.rs:17:17\n   |\n17 |     if n <= 3 { fib4[n] } else { fib4\
    \ += fib4[n - 1] + fib4[n - 2] + fib4[n - 3] + fib4[n - 4]; }\n   |          \
    \       ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpomekq1_5.rs:17:42\n\
    \   |\n17 |     if n <= 3 { fib4[n] } else { fib4 += fib4[n - 1] + fib4[n - 2]\
    \ + fib4[n - 3] + fib4[n - 4]; }\n   |                                       \
    \   ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpomekq1_5.rs:17:56\n\
    \   |\n17 |     if n <= 3 { fib4[n] } else { fib4 += fib4[n - 1] + fib4[n - 2]\
    \ + fib4[n - 3] + fib4[n - 4]; }\n   |                                       \
    \                 ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpomekq1_5.rs:17:70\n\
    \   |\n17 |     if n <= 3 { fib4[n] } else { fib4 += fib4[n - 1] + fib4[n - 2]\
    \ + fib4[n - 3] + fib4[n - 4]; }\n   |                                       \
    \                               ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = he"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 4;\n    }\n    let temp2 = fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4);\n    let temp3 = temp2 - temp2;\n    let temp4\
    \ = temp3 - temp3;\n    let temp5 = temp4 - temp4;\n    temp5\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpfpidt8h4.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    let mut a: isize = 0;\n    let mut b: isize = 1;\n\
    \    let mut c: isize = 2;\n    let mut d: isize = 3;\n    for i in 1..(n-4) {\n\
    \        let a = a + b;\n        let b = b + c;\n        let c = c + d;\n    \
    \    let d = a + d;\n    }\n    return d;\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpgorpygh_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 2 {\n\
    \        0\n    } else if n < 5 {\n        fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n    } else {\n        fib4(n - 4) + fib4(n - 3) + fib4(n\
    \ - 2) + fib4(n - 1)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpdsjxrtr9.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut sum\
    \ = 0;\n    for i in 0..n {\n        sum += i;\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `4`', /tmp/tmp34x52p91.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut cur\
    \ = vec![0; 4];\n    let mut prev = vec![0; 4];\n    loop {\n        cur[0] =\
    \ cur[1] = 1;\n        cur[2] = 2;\n        for &i in &mut prev {\n          \
    \  *i += *i;\n        }\n        if n <= 2 {\n            return cur[n];\n   \
    \     }\n        prev[3] = prev[2] = prev[1] = 1;\n        for &i in &mut prev\
    \ {\n            *i += *i;\n        }\n        if n == 4 {\n            return\
    \ cur[n];\n        }\n        cur[3] = cur[2] = cur[1] = 1;\n        for &i in\
    \ &mut cur {\n            *i += *i;\n        }\n        prev[n-4] = prev[n-3]\
    \ = prev[n-2] = prev[n-1] = 1;\n        for &i in &mut prev {\n            *i\
    \ += *i;\n        }\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpud2woiop.rs:18:18\n   |\n\
    18 |         cur[0] = cur[1] = 1;\n   |         ------   ^^^^^^^^^^ expected integer,\
    \ found `()`\n   |         |\n   |         expected due to the type of this binding\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpud2woiop.rs:20:13\n   |\n20 |\
    \         for &i in &mut prev {\n   |             ^^    --------- this expression\
    \ has type `Option<&mut {integer}>`\n   |             |\n   |             types\
    \ differ in mutability\n   |             help: you can probably remove the explicit\
    \ borrow: `i`\n   |\n   = note: expected mutable reference `&mut {integer}`\n\
    \                      found reference `&_`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpud2woiop.rs:24:20\n   |\n24 |  \
    \           return cur[n];\n   |                    ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpud2woiop.rs:26:29\n   |\n26 |         prev[3] = prev[2] = prev[1] =\
    \ 1;\n   |                   -------   ^^^^^^^^^^^ expected integer, found `()`\n\
    \   |                   |\n   |                   expected due to the type of\
    \ this binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpud2woiop.rs:26:19\n\
    \   |\n26 |         prev[3] = prev[2] = prev[1] = 1;\n   |         -------   ^^^^^^^^^^^^^^^^^^^^^\
    \ expected integer, found `()`\n   |         |\n   |         expected due to the\
    \ type of this binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpud2woiop.rs:27:13\n\
    \   |\n27 |         for &i in &mut prev {\n   |             ^^    --------- this\
    \ expression has type `Option<&mut {integer}>`\n   |             |\n   |     \
    \        types differ in mutability\n   |             help: you can probably remove\
    \ the explicit borrow: `i`\n   |\n   = note: expected mutable reference `&mut\
    \ {integer}`\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    // please implement\
    \ fib4 as a function of type 'static fn(&'static isize) -> isize\n    if n <=\
    \ 2 {\n        0\n    } else if n > 2 {\n        fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp3tuefvt3.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 1 {\n\
    \        n\n    } else {\n        fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-6`,\n right: `4`', /tmp/tmp79vmhg7b.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return n;\n    }\n    let rem_fib = n%4 == 1 ? 1 : fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4);\n    (n/4)*(rem_fib + fib4(n-4))\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `1`\n\
    \  --> /tmp/tmpsa6sa9yz.rs:18:30\n   |\n18 |     let rem_fib = n%4 == 1 ? 1 :\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n   |                       \
    \       ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else {\n        fib_4(n - 1) + fib_4(n - 2) + fib_4(n - 3) +\
    \ fib_4(n - 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib_4` in this scope\n  --> /tmp/tmpvbhl2b73.rs:18:9\n\
    \   |\n18 |         fib_4(n - 1) + fib_4(n - 2) + fib_4(n - 3) + fib_4(n - 4)\n\
    \   |         ^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `fib_4` in this scope\n  --> /tmp/tmpvbhl2b73.rs:18:24\n   |\n18 |         fib_4(n\
    \ - 1) + fib_4(n - 2) + fib_4(n - 3) + fib_4(n - 4)\n   |                    \
    \    ^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `fib_4`\
    \ in this scope\n  --> /tmp/tmpvbhl2b73.rs:18:39\n   |\n18 |         fib_4(n -\
    \ 1) + fib_4(n - 2) + fib_4(n - 3) + fib_4(n - 4)\n   |                      \
    \                 ^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `fib_4` in this scope\n  --> /tmp/tmpvbhl2b73.rs:18:54\n   |\n18 |         fib_4(n\
    \ - 1) + fib_4(n - 2) + fib_4(n - 3) + fib_4(n - 4)\n   |                    \
    \                                  ^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::cmp::Ordering;\n\
    \n    if n == 0 || n == 1 {\n        return n;\n    }\n\n    let mut a = 1;\n\
    \    let mut b = 0;\n\n    for i in 2..=n {\n        if i <= 3 {\n           \
    \ a = a+b;\n        }\n        if i <= 5 {\n            b = a+b;\n        }\n\
    \    }\n    a\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp3nbmc5tz.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut x: isize\
    \ = 0;\n    while x <= n {\n        x = (x + (n - x)) % 4;\n    }\n    x\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 { return\
    \ 0 }\n    if n < 3 { return n }\n    if n < 7 { return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4) + fib4(n - 5) }\n    fib4(n - 6) + fib4(n - 5)\
    \ + fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1) + fib4(0)\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmpz9zuem9p.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    fn fib(n: isize)\
    \ -> isize {\n        match n % 4 {\n            0 => 0,\n            1 => n,\n\
    \            2 => n,\n            3 => fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4),\n\
    \            _ => fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4),\n        }\n    }\n\
    \n    fib(n)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `4`', /tmp/tmpujiqel9x.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    \n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw942a1vw.rs:14:22\n   |\n\
    14 | fn fib4(n: isize) -> isize {\n   |    ----              ^^^^^ expected `isize`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        _ => 1 + fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4),\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ return 0; }\n    if n == 1 { return 1; }\n    if n == 2 { return 1; }\n    if\
    \ n == 3 { return 2; }\n    if n == 4 { return 3; }\n    fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `4`', /tmp/tmpi97zk2v3.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-6`,\n right: `4`', /tmp/tmpb6f4wc0c.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    fib4_helper(n, 4)\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib4_helper` in this scope\n  --> /tmp/tmpdy606dxc.rs:18:5\n\
    \   |\n18 |     fib4_helper(n, 4)\n   |     ^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    (1..=n).fold(0,\
    \ |x, _| { let y = x + x; (y, y)})\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxo737cd0.rs:15:45\n   |\n\
    15 |     (1..=n).fold(0, |x, _| { let y = x + x; (y, y)})\n   |              \
    \                               ^^^^^^ expected `isize`, found tuple\n   |\n \
    \  = note: expected type `isize`\n             found tuple `(isize, isize)`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"Negative Fib4 numbers are not allowed\");\n    }\n    let mut\
    \ fib4 = vec![0; 5];\n    for _ in 0..n {\n        fib4[n - 1] = fib4[n] + fib4[n-1]\
    \ + fib4[n-2] + fib4[n-3];\n    }\n    fib4[n - 1]\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp2s5n54cm.rs:20:9\n   |\n20 |         fib4[n - 1] = fib4[n] + fib4[n-1]\
    \ + fib4[n-2] + fib4[n-3];\n   |         ^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp2s5n54cm.rs:20:23\n   |\n20 |  \
    \       fib4[n - 1] = fib4[n] + fib4[n-1] + fib4[n-2] + fib4[n-3];\n   |     \
    \                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp2s5n54cm.rs:20:33\n\
    \   |\n20 |         fib4[n - 1] = fib4[n] + fib4[n-1] + fib4[n-2] + fib4[n-3];\n\
    \   |                                 ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp2s5n54cm.rs:20:45\n   |\n20 |  \
    \       fib4[n - 1] = fib4[n] + fib4[n-1] + fib4[n-2] + fib4[n-3];\n   |     \
    \                                        ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Ind"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    loop {\n   \
    \     let x = if n < 5 { n } else { fib4(n-5) + fib4(n-4) + fib4(n-3) + fib4(n-2)\
    \ + fib4(n-1) + 1 };\n        return x;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `11`,\n right: `4`', /tmp/tmpozs8oh4k.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return n;\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n -\
    \ 3) + fib4(n - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4w83e4hw.rs:14:22\n   |\n\
    14 | fn fib4(n: isize) -> isize {\n   |    ----              ^^^^^ expected `isize`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n...\n18 |     fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4);\n   |                                                       \
    \   - help: remove this semicolon\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4:\
    \ Vec<_> = vec![0; 10];\n\n    for i in 0..10 {\n        fib4[i] = fib4[i - 1]\
    \ + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n    }\n\n    fib4[n]\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp_rongvx1.rs:21:5\n   |\n21 |     fib4[n]\n   |     ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match (0, n)\
    \ {\n        (0,  _) => (0),\n        (1,  _) => (1),\n        (2,  _) => (2),\n\
    \        (3,  _) => (0),\n        (4,  _) => (2),\n        (_, n) => fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpcosyt22s.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib:\
    \ [isize; 5] = [0isize;\n    for i in 0..4 {\n        fib[i] = fib[i as usize]\
    \ + fib[i as usize+1] + fib[i as usize+2] + fib[i as usize+3] + fib[i as usize+4];\n\
    \    }\n    fib[n as usize]\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmphzamoqzw.rs:15:31\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |                            - closing\
    \ delimiter possibly meant for this\n15 |     let mut fib: [isize; 5] = [0isize;\n\
    \   |                               ^ unclosed delimiter\n...\n20 | }\n   | ^\
    \ mismatched closing delimiter\n\nerror: expected one of `.`, `?`, `]`, or an\
    \ operator, found `fib`\n  --> /tmp/tmphzamoqzw.rs:15:31\n   |\n15 |     let mut\
    \ fib: [isize; 5] = [0isize;\n   |                               ^ unclosed delimiter\n\
    ...\n18 |     }\n   |      - help: `]` may belong here\n19 |     fib[n as usize]\n\
    \   |     ^^^\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::cmp::{max,\
    \ Ordering};\n    use std::cmp::Ordering::{Less, Equal, Greater};\n    \n    if\
    \ n <= 1 {\n        return n;\n    }\n    let mut fib4 = 0; \n    for i in 1..n-1\
    \ {\n        fib4 += i;\n    }\n    fib4\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp0oc3ga41.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ if n == 4 {\n        return 4\n    }\n    let fib4_4 = fib4(4) + fib4(3) + fib2(2)\
    \ + fib1(1) + fib0(0)\n    return fib4_4 * fib4_4 * fib4_4 * fib4_4\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `return`\n  --> /tmp/tmpt86ne12_.rs:30:65\n\
    \   |\n30 |     let fib4_4 = fib4(4) + fib4(3) + fib2(2) + fib1(1) + fib0(0)\n\
    \   |                                                                 ^ help:\
    \ add `;` here\n31 |     return fib4_4 * fib4_4 * fib4_4 * fib4_4\n   |     ------\
    \ unexpected token\n\nerror[E0425]: cannot find function `fib2` in this scope\n\
    \  --> /tmp/tmpt86ne12_.rs:30:38\n   |\n30 |     let fib4_4 = fib4(4) + fib4(3)\
    \ + fib2(2) + fib1(1) + fib0(0)\n   |                                      ^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `fib1` in this\
    \ scope\n  --> /tmp/tmpt86ne12_.rs:30:48\n   |\n30 |     let fib4_4 = fib4(4)\
    \ + fib4(3) + fib2(2) + fib1(1) + fib0(0)\n   |                              \
    \                  ^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `fib0` in this scope\n  --> /tmp/tmpt86ne12_.rs:30:58\n   |\n30 |     let fib4_4\
    \ = fib4(4) + fib4(3) + fib2(2) + fib1(1) + fib0(0)\n   |                    \
    \                                      ^^^^ not found in this scope\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 1 {\n\
    \        return 0;\n    }\n    fn g(x: isize) -> isize {\n        if x < 2 {\n\
    \            x\n        } else {\n            x + g(x - 1)\n        }\n    }\n\
    \    g(n)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `4`', /tmp/tmpzfwb7dgv.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4\
    \ = 0..(n).fold(0, |a, b| b + a + b + a + b + a + b)\n    fib4\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error: expected `;`, found `fib4`\n  --> /tmp/tmpjjyd6zup.rs:15:68\n  \
    \ |\n15 |     let mut fib4 = 0..(n).fold(0, |a, b| b + a + b + a + b + a + b)\n\
    \   |                                                                    ^ help:\
    \ add `;` here\n16 |     fib4\n   |     ---- unexpected token\n\nerror[E0599]:\
    \ `isize` is not an iterator\n  --> /tmp/tmpjjyd6zup.rs:15:27\n   |\n15 |    \
    \ let mut fib4 = 0..(n).fold(0, |a, b| b + a + b + a + b + a + b)\n   |      \
    \                     ^^^^ `isize` is not an iterator\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `isize: Iterator`\n           which\
    \ is required by `&mut isize: Iterator`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpjjyd6zup.rs:16:5\n   |\n14 | fn fib4(n: isize) -> isize {\n   |    \
    \                  ----- expected `isize` because of return type\n15 |     let\
    \ mut fib4 = 0..(n).fold(0, |a, b| b + a + b + a + b + a + b)\n16 |     fib4\n\
    \   |     ^^^^ expected `isize`, found struct `std::ops::Range`\n   |\n   = note:\
    \ expected type `isize`\n            found struct `std::ops::Range<{integer}>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ 0 }\n    else if n == 1 { 1 }\n    else if n == 2 { 2 }\n    else if n == 3\
    \ { 0 }\n    else { fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) }\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpi47kmsq0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut sum\
    \ = 0;\n    if n <= 1 {\n        sum = 0;\n    } else {\n        let mut i = 1;\n\
    \        while i <= n {\n            let tmp = sum;\n            sum += i;\n \
    \           i += tmp;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n \
    \   let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp8n0n83m5.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 4 {\n\
    \        0\n    } else {\n        fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp2vc2_47v.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 1 {\n\
    \        n\n    } else {\n        fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-6`,\n right: `4`', /tmp/tmpv2z5n9zm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else {\n        fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    assert!(n >\
    \ 0);\n    if n == 1 {\n        return 0;\n    }\n\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: n > 0', /tmp/tmpo_z8rrgl.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut result\
    \ = 0;\n    let mut next = 1;\n    for _ in 0..n {\n        result = next;\n \
    \       next = result + next + result + next + result;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `625`,\n right: `4`', /tmp/tmp4nsnhtah.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib_seq:\
    \ Vec<isize> = vec![];\n    fib_seq.reserve(4 * n);\n    \n    for i in 1..n {\n\
    \        fib_seq.push(i);\n        fib_seq.push(i+1);\n        fib_seq.push(i+1);\n\
    \        fib_seq.push(i+1);\n    }\n    \n    fib_seq\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqdf7igz5.rs:16:21\n   |\n\
    16 |     fib_seq.reserve(4 * n);\n   |                     ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |     fib_seq.reserve((4 * n).try_into().unwrap());\n\
    \   |                     +     +++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqdf7igz5.rs:25:5\n   |\n14 | fn fib4(n: isize) -> isize\
    \ {\n   |                      ----- expected `isize` because of return type\n\
    ...\n25 |     fib_seq\n   |     ^^^^^^^ expected `isize`, found struct `Vec`\n\
    \   |\n   = note: expected type `isize`\n            found struct `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    // Base cases\n\
    \    if n == 0 || n == 1 {\n        return 0;\n    }\n\n    // Compute sum of\
    \ all terms in the sequence (including n)\n    let mut sum = 0;\n    for i in\
    \ 1..n {\n        sum += fib4(n - i);\n    }\n\n    // Return nth term\n    sum\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpnvtwijl6.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => {\n            let fib4_res = fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n\
    \ - 1);\n            fib4_res\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 0 {\n\
    \        return 0;\n    }\n    if n <= 3 {\n        return n;\n    }\n    fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmpmjw7i4vk.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    loop {\n   \
    \     if n < 0 || n > 4294967295 { panic!(\"fib4 number out of range\"); }\n \
    \       if n == 0 { break; }\n        match n % 4 {\n            0 => return 0,\n\
    \            1 => return n,\n            2 => return n + (n - 1) + fib4(n - 2)\
    \ + fib4(n - 3),\n            _ => return n + (n - 1) + fib4(n - 2) + fib4(n -\
    \ 3) + fib4(n - 4),\n        }\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj3w0mhhz.rs:17:21\n   |\n\
    14 | fn fib4(n: isize) -> isize {\n   |                      ----- expected `isize`\
    \ because of return type\n...\n17 |         if n == 0 { break; }\n   |       \
    \              ^^^^^\n   |                     |\n   |                     expected\
    \ `isize`, found `()`\n   |                     help: give it a value of the expected\
    \ type: `break 42`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    assert!(n >\
    \ 0);\n    \n    if n == 0 {\n        return 0;\n    }\n    \n    if n == 1 {\n\
    \        return 0;\n    }\n    \n    if n == 2 {\n        return 2;\n    }\n \
    \   \n    if n == 3 {\n        return 0;\n    }\n    \n    let a = fib4(n-1);\n\
    \    let b = fib4(n-2);\n    let c = fib4(n-3);\n    let d = fib4(n-4);\n    \n\
    \    (a + b + c + d)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: n > 0', /tmp/tmpn2r9ffg1.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"fib4(n) requires n to be non-negative\")\n    }\n\n    if n\
    \ == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    let mut a = fib4(n-1);\n    let mut b = fib4(n-2);\n    let mut c = fib4(n-3);\n\
    \    let mut d = fib4(n-4);\n    return a + b + c + d;\n}\n\nfn main() {\n   \
    \ let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'fib4(n) requires n to be non-negative', /tmp/tmpzpu4tbou.rs:16:9\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    fn fib4(_x:\
    \ isize) -> isize {\n        0\n    }\n    if n < 3 {\n        return 0;\n   \
    \ }\n    if n == 4 {\n        return 2;\n    }\n    fib4((n - 1) + fib4((n - 2)\
    \ + fib4((n - 3) + fib4((n - 4))));\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `;`\n\
    \  --> /tmp/tmp8ldisaux.rs:24:9\n   |\n24 |     fib4((n - 1) + fib4((n - 2) +\
    \ fib4((n - 3) + fib4((n - 4))));\n   |         ^ unclosed delimiter         \
    \                           ^ help: `)` may belong here\n\nerror: expected expression,\
    \ found `)`\n  --> /tmp/tmp8ldisaux.rs:25:1\n   |\n25 | }\n   | ^ expected expression\n\
    \nwarning: unnecessary parentheses around function argument\n  --> /tmp/tmp8ldisaux.rs:24:55\n\
    \   |\n24 |     fib4((n - 1) + fib4((n - 2) + fib4((n - 3) + fib4((n - 4))));\n\
    \   |                                                       ^     ^\n   |\n  \
    \ = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n24 -     fib4((n - 1) + fib4((n - 2) + fib4((n - 3) + fib4((n - 4))));\n\
    24 +     fib4((n - 1) + fib4((n - 2) + fib4((n - 3) + fib4(n - 4)));\n   | \n\n\
    error: aborting due to 2 previous errors; 1 warning emitted\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4\
    \ = 0.0;\n    for i in 0..n {\n        fib4 += i;\n    }\n    fib4\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp4lmf44d9.rs:17:14\n\
    \   |\n17 |         fib4 += i;\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4lmf44d9.rs:19:5\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |                      ----- expected\
    \ `isize` because of return type\n...\n19 |     fib4\n   |     ^^^^ expected `isize`,\
    \ found floating-point number\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 2;\n   \
    \ }\n    if n == 3 {\n        return 0;\n    }\n\n    let result = fib4(n - 4)\
    \ + fib4(n - 3) + fib4(n - 2) + fib4(n - 1);\n    println!(\"{}\", result);\n\
    \    result\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: "2\n4\n2\n2\n4\n2\n2\n4\n8\n2\n2\n4\n2\n2\n4\n8\n14\n28\n2\n2\n4\n8\n2\n\
    2\n4\n2\n2\n4\n8\n14\n2\n2\n4\n2\n2\n4\n8\n2\n2\n4\n2\n2\n4\n8\n14\n28\n2\n4\n\
    2\n2\n4\n8\n2\n2\n4\n2\n2\n4\n8\n14\n2\n2\n4\n2\n2\n4\n8\n2\n2\n4\n2\n2\n4\n8\n\
    14\n28\n54\n104\n2\n2\n4\n2\n2\n4\n8\n2\n2\n4\n2\n2\n4\n8\n14\n28\n2\n4\n2\n2\n\
    4\n8\n2\n2\n4\n2\n2\n4\n8\n14\n2\n2\n4\n2\n2\n4\n8\n2\n2\n4\n2\n2\n4\n8\n14\n\
    28\n54\n2\n2\n4\n8\n2\n2\n4\n2\n2\n4\n8\n14\n2\n2\n4\n2\n2\n4\n8\n2\n2\n4\n2\n\
    2\n4\n8\n14\n28\n2\n4\n2\n2\n4\n8\n2\n2\n4\n2\n2\n4\n8\n14\n2\n2\n4\n2\n2\n4\n\
    8\n2\n2\n4\n2\n2\n4\n8\n14\n28\n54\n104\n2\n2\n4\n2\n2\n4\n8\n14\n2\n2\n4\n2\n\
    2\n4\n8\n2\n2\n4\n2\n2\n4\n8\n14\n28\n2\n4\n2\n2\n4\n8\n2\n2\n4\n2\n2\n4\n8\n\
    14\n2\n2\n4\n2\n2\n4\n8\n2\n2\n4\n2\n2\n4\n8\n14\n28\n54\n2\n2\n4\n8\n2\n2\n4\n\
    2\n2\n4\n8\n14\n2\n2\n4\n2\n2\n4\n8\n2\n2\n4\n2\n2\n4\n8\n14\n28\n2\n4\n2\n2\n\
    4\n8\n2\n2\n4\n2\n2\n4\n8\n14\n2\n2\n4\n2\n2\n4\n8\n2\n2\n4\n2\n2\n4\n8\n14\n\
    28\n54\n104\n200\n386\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        0\n    } else if n == 0 {\n        0\n    } else {\n        let mut result\
    \ = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n        result\n \
    \   }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpvt7rhh_h.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 2;\n   \
    \ }\n    if n == 3 {\n        return 0;\n    }\n    if n == 4 {\n        return\
    \ 4;\n    }\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpg4yclzdt.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    debug_assert!(n\
    \ >= 0);\n    debug_assert!(n <= 4);\n    if n == 0 || n == 1 || n == 2 {\n  \
    \      return 0;\n    }\n    if n == 3 {\n        return 1;\n    }\n    if n ==\
    \ 4 {\n        return 2;\n    }\n    fib4_helper(n - 4, n-3) + fib4_helper(n -\
    \ 3, n - 2) + fib4_helper(n - 2, n - 1) + fib4_helper(n - 1, n) - 4\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib4_helper` in this scope\n  --> /tmp/tmpds5ohs0a.rs:26:5\n\
    \   |\n26 |     fib4_helper(n - 4, n-3) + fib4_helper(n - 3, n - 2) + fib4_helper(n\
    \ - 2, n - 1) + fib4_helper(n - 1, n) - 4\n   |     ^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `fib4_helper` in this scope\n  -->\
    \ /tmp/tmpds5ohs0a.rs:26:31\n   |\n26 |     fib4_helper(n - 4, n-3) + fib4_helper(n\
    \ - 3, n - 2) + fib4_helper(n - 2, n - 1) + fib4_helper(n - 1, n) - 4\n   |  \
    \                             ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `fib4_helper` in this scope\n  --> /tmp/tmpds5ohs0a.rs:26:59\n\
    \   |\n26 |     fib4_helper(n - 4, n-3) + fib4_helper(n - 3, n - 2) + fib4_helper(n\
    \ - 2, n - 1) + fib4_helper(n - 1, n) - 4\n   |                              \
    \                             ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `fib4_helper` in this scope\n  --> /tmp/tmpds5ohs0a.rs:26:87\n\
    \   |\n26 |     fib4_helper(n - 4, n-3) + fib4_helper(n - 3, n - 2) + fib4_helper(n\
    \ - 2, n - 1) + fib4_helper(n - 1, n) - 4\n   |                              \
    \                                                         ^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => {\n            let (left, right) = (fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4));\n\
    \            (left + right) % 4\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpaw3cpimd.rs:21:33\n\
    \   |\n21 |             let (left, right) = (fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4));\n   |                                 ^                      \
    \                       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n21 -             let (left, right) = (fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4));\n21 +             let (left, right) =\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n   | \n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpaw3cpimd.rs:21:17\n   |\n21 |             let (left, right)\
    \ = (fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4));\n   |                 ^^^^^^^^^^^^^\
    \   ----------------------------------------------- this expression has type `isize`\n\
    \   |                 |\n   |                 expected `isize`, found tuple\n\
    \   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\n\
    error: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    loop {\n   \
    \     if n == 0 { return 0; }\n        let (current, next) = if n <= 2 { return\
    \ (n, 2 * n); } else { return (n, (n + 1) * (2 * n - 1)); }\n        n = next;\n\
    \    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `n`\n  --> /tmp/tmpxo2q2fc4.rs:17:107\n   |\n\
    17 |         let (current, next) = if n <= 2 { return (n, 2 * n); } else { return\
    \ (n, (n + 1) * (2 * n - 1)); }\n   |                                        \
    \                                                                   ^ help: add\
    \ `;` here\n18 |         n = next;\n   |         - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxo2q2fc4.rs:17:50\n   |\n17 |         let (current,\
    \ next) = if n <= 2 { return (n, 2 * n); } else { return (n, (n + 1) * (2 * n\
    \ - 1)); }\n   |                                                  ^^^^^^^^^^ expected\
    \ `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found\
    \ tuple `(isize, isize)`\n\nwarning: unreachable statement\n  --> /tmp/tmpxo2q2fc4.rs:18:9\n\
    \   |\n17 |         let (current, next) = if n <= 2 { return (n, 2 * n); } else\
    \ { return (n, (n + 1) * (2 * n - 1)); }\n   |                               \
    \            ----------------- any code following this expression is unreachable\n\
    18 |         n = next;\n   |         ^^^^^^^^^ unreachable statement\n   |\n \
    \  = note: `#[warn(unreachable_code)]` on by default\n\nerror: aborting due to\
    \ 2 previous errors; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 1;\n    let mut b = 1;\n    let mut c = 1;\n    let mut d = 1;\n    while n\
    \ > 0 {\n        let tmp = a + b + c + d;\n        a = b;\n        b = c;\n  \
    \      c = d;\n        d = tmp;\n        n -= 1;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpd7bwpqhb.rs:25:9\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |         - help: consider making\
    \ this binding mutable: `mut n`\n...\n25 |         n -= 1;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4\
    \ = vec![0];\n    fib4[0] = fib4[1] = 0;\n    fib4[2] = 1;\n    for i in 0..(n)\
    \ {\n        fib4[3] = fib4[4] = fib4[5] = fib4[6] = fib4[7] = 0;\n        fib4[0]\
    \ += fib4[2] + fib4[3] + fib4[4] + fib4[5];\n        fib4[2] += fib4[5] + fib4[7]\
    \ + fib4[6];\n        fib4[4] += fib4[7];\n        fib4[6] += fib4[0];\n    }\n\
    \    return fib4[0];\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppmedvjm3.rs:16:15\n   |\n\
    16 |     fib4[0] = fib4[1] = 0;\n   |     -------   ^^^^^^^^^^^ expected integer,\
    \ found `()`\n   |     |\n   |     expected due to the type of this binding\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmppmedvjm3.rs:19:49\n   |\n19 |  \
    \       fib4[3] = fib4[4] = fib4[5] = fib4[6] = fib4[7] = 0;\n   |           \
    \                            -------   ^^^^^^^^^^^ expected integer, found `()`\n\
    \   |                                       |\n   |                          \
    \             expected due to the type of this binding\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppmedvjm3.rs:19:39\n   |\n19 |         fib4[3] = fib4[4]\
    \ = fib4[5] = fib4[6] = fib4[7] = 0;\n   |                             -------\
    \   ^^^^^^^^^^^^^^^^^^^^^ expected integer, found `()`\n   |                 \
    \            |\n   |                             expected due to the type of this\
    \ binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppmedvjm3.rs:19:29\n\
    \   |\n19 |         fib4[3] = fib4[4] = fib4[5] = fib4[6] = fib4[7] = 0;\n   |\
    \                   -------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected integer,\
    \ found `()`\n   |                   |\n   |                   expected due to\
    \ the type of this binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppmedvjm3.rs:19:19\n\
    \   |\n19 |         fib4[3] = fib4[4] = fib4[5] = fib4[6] = fib4[7] = 0;\n   |\
    \         -------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected integer,\
    \ found `()`\n   |         |\n   |         expected due to the type of this binding\n\
    \nerror: aborting due to 5 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n    for i in\
    \ 0..n {\n        a = b;\n        b = c;\n        c = d;\n        d = a + b +\
    \ c + d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `130`,\n right: `4`', /tmp/tmpspm_8d_i.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 1 {\n\
    \        0\n    } else {\n        let mut fib_4 = 0;\n        for &x in [n, n\
    \ - 1, n - 2, n - 3, n - 4] {\n            fib_4 += x;\n        }\n        fib_4\n\
    \    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph47448fr.rs:19:13\n   |\n\
    19 |         for &x in [n, n - 1, n - 2, n - 3, n - 4] {\n   |             ^^\
    \    ------------------------------- this expression has type `Option<isize>`\n\
    \   |             |\n   |             expected `isize`, found reference\n   |\
    \             help: you can probably remove the explicit borrow: `x`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 0 {\
    \ 0 }\n    else if n == 1 { 1 }\n    else { fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4) }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpm1q56fd1.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        0\n    } else if n == 2 {\n        2\n    } else {\n     \
    \   fibonacci(n) + fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3)\n  \
    \  }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fibonacci` in this scope\n  --> /tmp/tmp3fw4j4_d.rs:20:9\n\
    \   |\n20 |         fibonacci(n) + fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n\
    \ - 3)\n   |         ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `fibonacci` in this scope\n  --> /tmp/tmp3fw4j4_d.rs:20:24\n \
    \  |\n20 |         fibonacci(n) + fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n\
    \ - 3)\n   |                        ^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `fibonacci` in this scope\n  --> /tmp/tmp3fw4j4_d.rs:20:43\n\
    \   |\n20 |         fibonacci(n) + fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n\
    \ - 3)\n   |                                           ^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `fibonacci` in this scope\n\
    \  --> /tmp/tmp3fw4j4_d.rs:20:62\n   |\n20 |         fibonacci(n) + fibonacci(n\
    \ - 1) + fibonacci(n - 2) + fibonacci(n - 3)\n   |                           \
    \                                   ^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    loop {\n   \
    \     match n {\n            1 => return 0,\n            2 => return 2,\n    \
    \        3 => return 0,\n            n => {\n                if n == 4 { return\
    \ 0 }\n                return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4).\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp1pw9wpls.rs:23:13\n   |\n23\
    \ |             }\n   |             ^\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    // please do\
    \ not use recursion\n    if n == 0 || n == 1 {\n        return 0\n    }\n\n  \
    \  // please do not use recursion\n    if n == 2 {\n        return 2\n    }\n\n\
    \    // please do not use recursion\n    if n == 3 {\n        return 0\n    }\n\
    \n    // please do not use recursion\n    if n == 4 {\n        return 4\n    }\n\
    \n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmphd2xmz2y.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let fib4 = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    return\
    \ fib4;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::cmp::Ordering::{Lt,\
    \ Less};\n    let mut fib = 0u8;\n\n    for _ in 0..n {\n        fib += fib %\
    \ 5 + 1;\n        fib /= 5;\n    }\n\n    fib\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0432]: unresolved import `std::cmp::Ordering::Lt`\n  --> /tmp/tmpnhhplt7i.rs:15:30\n\
    \   |\n15 |     use std::cmp::Ordering::{Lt, Less};\n   |                    \
    \          ^^ no `Lt` in `cmp::Ordering`\n\nwarning: unused import: `Less`\n \
    \ --> /tmp/tmpnhhplt7i.rs:15:34\n   |\n15 |     use std::cmp::Ordering::{Lt, Less};\n\
    \   |                                  ^^^^\n   |\n   = note: `#[warn(unused_imports)]`\
    \ on by default\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnhhplt7i.rs:23:5\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |                      ----- expected\
    \ `isize` because of return type\n...\n23 |     fib\n   |     ^^^ expected `isize`,\
    \ found `u8`\n   |\nhelp: you can convert a `u8` to an `isize`\n   |\n23 |   \
    \  fib.into()\n   |        +++++++\n\nerror: aborting due to 2 previous errors;\
    \ 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0432.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 1 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 1;\n    }\n    return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpo3wv1jgi.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    fn inner_fib4(n:\
    \ isize) -> isize {\n        if n == 0 {\n            0\n        }\n        \n\
    \        if n == 1 {\n            0\n        }\n        \n        if n == 2 {\n\
    \            2\n        }\n        \n        if n == 3 {\n            0\n    \
    \    }\n        \n        inner_fib4(n - 4) + inner_fib4(n - 3) + inner_fib4(n\
    \ - 2) + inner_fib4(n - 1)\n    }\n    \n    inner_fib4(n)\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3qxb0epe.rs:17:13\n   |\n\
    16 | /         if n == 0 {\n17 | |             0\n   | |             ^ expected\
    \ `()`, found integer\n18 | |         }\n   | |_________- expected this to be\
    \ `()`\n   |\nhelp: you might have meant to return this value\n   |\n17 |    \
    \         return 0;\n   |             ++++++  +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3qxb0epe.rs:21:13\n   |\n20 | /         if n == 1 {\n21 | |   \
    \          0\n   | |             ^ expected `()`, found integer\n22 | |      \
    \   }\n   | |_________- expected this to be `()`\n   |\nhelp: you might have meant\
    \ to return this value\n   |\n21 |             return 0;\n   |             ++++++\
    \  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3qxb0epe.rs:25:13\n   |\n\
    24 | /         if n == 2 {\n25 | |             2\n   | |             ^ expected\
    \ `()`, found integer\n26 | |         }\n   | |_________- expected this to be\
    \ `()`\n   |\nhelp: you might have meant to return this value\n   |\n25 |    \
    \         return 2;\n   |             ++++++  +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3qxb0epe.rs:29:13\n   |\n28 | /         if n == 3 {\n29 | |   \
    \          0\n   | |             ^ expected `()`, found integer\n30 | |      \
    \   }\n   | |_________- expected this to be `()`\n   |\nhelp: you might have meant\
    \ to return this value\n   |\n29 |             return 0;\n   |             ++++++\
    \  +\n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4\
    \ = vec![0; n + 1];\n    fib4[0] = 0;\n    fib4[1] = 0;\n    fib4[2] = 2;\n  \
    \  fib4[3] = fib4[2] + fib4[1];\n    for i in 2..=4 {\n        fib4[i] = fib4[i\
    \ - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n    }\n    fib4[n]\n}\n\nfn\
    \ main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcq6armcn.rs:15:28\n   |\n\
    15 |     let mut fib4 = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n15 |     let mut\
    \ fib4 = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpcq6armcn.rs:23:5\n   |\n23 |     fib4[n]\n\
    \   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n\n    if n == 2 {\n        return 0;\n    }\n\n   \
    \ if n == 3 {\n        return 1;\n    }\n\n    if n == 4 {\n        return 2;\n\
    \    }\n\n    return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1);\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `27`,\n right: `28`', /tmp/tmprlc_mm3j.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::cmp::min;\n\
    \n    let mut res = 0;\n    if n < 0 {\n        return -fib4(-n);\n    }\n\n \
    \   for i in 1..n+1 {\n        let cur = *i::pow::<isize>(&min(*i, 4));\n    \
    \    res = *i + cur;\n    }\n    res\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `i`\n\
    \  --> /tmp/tmpxwxaekzl.rs:23:20\n   |\n23 |         let cur = *i::pow::<isize>(&min(*i,\
    \ 4));\n   |                    ^ use of undeclared crate or module `i`\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpxwxaekzl.rs:23:41\n   |\n\
    23 |         let cur = *i::pow::<isize>(&min(*i, 4));\n   |                  \
    \                       ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpxwxaekzl.rs:24:15\n   |\n24 |         res = *i + cur;\n   |   \
    \            ^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0433, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 { return\
    \ 0 }\n    if n < 4 { return n }\n    let mut x = 1;\n    for i in 0..(n + 1)\
    \ {\n        x += x;\n    }\n    x\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `64`,\n right: `4`', /tmp/tmp3qe3mdr9.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n\n    if n == 1 {\n        return 1;\n    }\n\n   \
    \ if n == 2 {\n        return 2;\n    }\n\n    if n == 3 {\n        return 0;\n\
    \    }\n\n    if n == 4 {\n        return 1;\n    }\n\n    if n == 5 {\n     \
    \   return 3;\n    }\n\n    if n == 6 {\n        return 5;\n    }\n\n    if n\
    \ == 7 {\n        return 7;\n    }\n\n    if n == 8 {\n        return 1;\n   \
    \ }\n\n    if n == 9 {\n        return 3;\n    }\n\n    if n == 10 {\n       \
    \ return 5;\n    }\n\n    if n == 11 {\n        return 7;\n    }\n\n    if n ==\
    \ 12 {\n        return 9;\n    }\n\n    if n == 13 {\n        return 11;\n   \
    \ }\n\n    if n == 14 {\n        return 13;\n    }\n\n    if n == 15 {\n     \
    \   return 15;\n    }\n\n    if n == 16 {\n        return 11;\n    }\n\n    if\
    \ n == 17 {\n        return 13;\n    }\n\n    if n == 18 {\n        return 15;\n\
    \    }\n\n    if n == 19 {\n        return 17;\n    }\n\n    if n == 20 {\n  \
    \      return 19;\n    }\n\n    if n == 21 {\n        return 21;\n    }\n\n  \
    \  if n == 22 {\n        return 23;\n    }\n\n    if n == 23 {\n        return\
    \ 21;\n    }\n\n    if n == 24 {\n        return 23;\n    }\n\n    if n == 25\
    \ {\n        return 25;\n    }\n\n    if n == 26 {\n        return 23;\n    }\n\
    \n    if n == 27 {\n        return 27;\n    }\n\n    if n == 28 {\n        return\
    \ 23;\n    }\n\n    if n == 29 {\n        return 29;\n    }\n\n    if n == 30\
    \ {\n        return 31;\n    }\n\n    if n == 31 {\n        return 31;\n    }\n\
    \n    if n == 32 {\n        return 31;\n    }\n\n    if n == 33 {\n        return\
    \ 33;\n    }\n\n    if n == 34 {\n        return 31;\n    }\n\n    if n == 35\
    \ {\n        return 35;\n    }\n\n    if n == 36 {\n        return 31;\n    }\n\
    \n    if n == 37 {\n        return 37;\n    }\n\n    if n == 38 {\n        return\
    \ 35;\n    }\n\n    if n == 39 {\n        return 39;\n    }\n\n    if n == 40\
    \ {\n        return 41;\n    }\n\n    if n == 41 {\n        return 41;\n    }\n\
    \n    if n == 42 {\n        return 41;\n    }\n\n    if n == 43 {\n        return\
    \ 43;\n    }\n\n    if n == 44 {\n        return 41;\n    }\n\n    if n == 45\
    \ {\n        return 45;\n    }\n\n    if n == 46 {\n        return 41;\n    }\n\
    \n    if n == 47 {\n        return 47;\n    }\n\n    if n == 48 {\n        return\
    \ 41;\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0317]: `if` may be missing an `else` clause\n   --> /tmp/tmpb77s0cc3.rs:207:5\n\
    \    |\n14  |   fn fib4(n: isize) -> isize {\n    |                        -----\
    \ expected `isize` because of this return type\n...\n207 | /     if n == 48 {\n\
    208 | |         return 41;\n209 | |     }\n    | |_____^ expected `isize`, found\
    \ `()`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n\
    \    = help: consider adding an `else` block that evaluates to the expected type\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0317`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 1\n    } else if n ==\
    \ 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    } else\
    \ {\n        let mut f4 = fib4(n - 1);\n        f4 += fib4(n - 2);\n        f4\
    \ += fib4(n - 3);\n        f4 += fib4(n - 4);\n        return f4\n    }\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpgx10a4ch.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0;\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n -\
    \ 3) + fib4(n - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp74xyyeek.rs:14:22\n   |\n\
    14 | fn fib4(n: isize) -> isize {\n   |    ----              ^^^^^ expected `isize`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n...\n18 |     fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4);\n   |                                                       \
    \   - help: remove this semicolon\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 4 {\n\
    \        0\n    } else {\n        fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpo4qpgvaz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n\n    if n == 1 {\n        return 1\n    }\n\n    if\
    \ n == 2 {\n        return 2\n    }\n\n    let mut i = 4\n    let mut fib4 = isize::pow(2,\
    \ i).unwrap();\n    let mut prev = fib4;\n    while i < n {\n        prev = fib4;\n\
    \        fib4 += prev;\n        i += 1;\n    }\n    fib4\n}\n\nfn main() {\n \
    \   let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu9oxjezm.rs:27:18\n\
    \   |\n27 |     let mut i = 4\n   |                  ^ help: add `;` here\n28\
    \ |     let mut fib4 = isize::pow(2, i).unwrap();\n   |     --- unexpected token\n\
    \nerror[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpu9oxjezm.rs:28:37\n   |\n28 |     let mut fib4 = isize::pow(2,\
    \ i).unwrap();\n   |                                     ^^^^^^ method not found\
    \ in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu9oxjezm.rs:30:15\n\
    \   |\n30 |     while i < n {\n   |               ^ expected `u32`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `u32` and panic if the converted\
    \ value doesn't fit\n   |\n30 |     while i < n.try_into().unwrap() {\n   |  \
    \              ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    loop {\n   \
    \     if n == 0 {\n            return 0;\n        }\n        n -= 4;\n       \
    \ let n1 = fib4(n);\n        let n2 = fib4(n+1);\n        let n3 = fib4(n+2);\n\
    \        let n4 = fib4(n+3);\n        return n1 + n2 + n3 + n4;\n    }\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpiuczgfpb.rs:19:9\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |         - help: consider making\
    \ this binding mutable: `mut n`\n...\n19 |         n -= 4;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    assert!(n >=\
    \ 0 && n < 4, \"fib4 number sequence not defined for negative values > or equal\
    \ to 4\");\n\n    if n == 0 {\n        return 0\n    }\n    else if n == 1 {\n\
    \        return fib4(0)\n    }\n    else if n == 2 {\n        return fib4(1)\n\
    \    }\n    else if n == 3 {\n        return fib4(2)\n    }\n    else if n ==\
    \ 4 {\n        return fib4(3) + fib4(4) + fib4(5) + fib4(6)\n    }\n    else {\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n}\n\nfn\
    \ main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'fib4 number sequence not defined for negative\
    \ values > or equal to 4', /tmp/tmpqi718eh2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 1;\n    let mut b = 1;\n    for i in 0..n {\n        let c = a + b;\n      \
    \  a = b;\n        b = c;\n    }\n    b\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `4`', /tmp/tmp_n_ff2r0.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    // TODO: Fill\
    \ in the code here\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n\
    \        return 1\n    } else if n == 2 {\n        return 2\n    } else if n ==\
    \ 3 {\n        return 0\n    } else {\n        fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp8dicyxct.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ let fib4 = fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n-1)\n    fib4\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `fib4`\n  --> /tmp/tmphd9b8xuh.rs:27:67\n  \
    \ |\n27 |     let fib4 = fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n-1)\n\
    \   |                                                                   ^ help:\
    \ add `;` here\n28 |     fib4\n   |     ---- unexpected token\n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ if n == 4 {\n        return 0\n    }\n    if n == 5 {\n        return 4\n  \
    \  }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return\
    \ 14\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp3q85et9s.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 2 {\n\
    \        0\n    } else if n <= 3 {\n        0\n    } else {\n        fib_helper(n\
    \ - 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib_helper` in this scope\n  --> /tmp/tmp3p3uz3xo.rs:20:9\n\
    \   |\n20 |         fib_helper(n - 4)\n   |         ^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    fib4_helper(n\
    \ - 2, n - 1, n - 3, n - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib4_helper` in this scope\n  --> /tmp/tmpa1jho_2u.rs:15:5\n\
    \   |\n15 |     fib4_helper(n - 2, n - 1, n - 3, n - 4)\n   |     ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"fib4 called for negative input\")\n    }\n    match n {\n  \
    \      0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        4 =>\
    \ 0,\n        _ => n,\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n  \
    \  assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `4`', /tmp/tmptckl77d7.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n\n    }\n    let mut fib4 = fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4);\n    for _ in 0..n {\n        fib4 += 1;\n    }\n    return\
    \ fib4\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `4`', /tmp/tmpb4cjfjlg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib:\
    \ [isize; 4] = [0; 4];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 0;\n  \
    \  fib[3] = 0;\n\n    for i in 2..=n {\n        let prev_index = i - 1;\n    \
    \    let curr_sum = fib[prev_index] + fib[prev_index - 1];\n        fib[i] = curr_sum;\n\
    \    }\n    fib[4]\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aj9zqps.rs:23:24\n\
    \   |\n23 |         let curr_sum = fib[prev_index] + fib[prev_index - 1];\n  \
    \ |                        ^^^^^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `[isize]`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp7aj9zqps.rs:23:42\n   |\n23 |         let curr_sum = fib[prev_index]\
    \ + fib[prev_index - 1];\n   |                                          ^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `[isize]`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7aj9zqps.rs:24:9\n\
    \   |\n24 |         fib[i] = curr_sum;\n   |         ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[isize]`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    fn inner(n: isize) -> isize {\n        if n ==\
    \ 1 {\n            return 0;\n        }\n        inner(n - 1) + inner(n - 2) +\
    \ inner(n - 3) + inner(n - 4);\n    }\n    inner(n);\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp881qj8jg.rs:14:22\n   |\n\
    14 | fn fib4(n: isize) -> isize {\n   |    ----              ^^^^^ expected `isize`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n...\n24 |     inner(n);\n   |             - help: remove\
    \ this semicolon\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp881qj8jg.rs:18:27\n\
    \   |\n18 |     fn inner(n: isize) -> isize {\n   |        -----             \
    \ ^^^^^ expected `isize`, found `()`\n   |        |\n   |        implicitly returns\
    \ `()` as its body has no tail or `return` expression\n...\n22 |         inner(n\
    \ - 1) + inner(n - 2) + inner(n - 3) + inner(n - 4);\n   |                   \
    \                                               - help: remove this semicolon\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n\
    \    if n == 3 {\n        return 0\n    }\n    return fib4(n - 4) + fib4(n - 3)\
    \ + fib4(n - 2) + fib4(n - 1)\n}\n\nfn main() {\n    let candidate = fib4;\n \
    \   assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n\
    \    if n == 3 {\n        return 0\n    }\n    if n == 4 {\n        return 0\n\
    \    }\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpv3b8ed09.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 4;\n    }\n    return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpqnakevsi.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    \n    if n == 1 {\n        return 0\n    }\n\n \
    \   let mut result = 1;\n    let mut rest = n - 1;\n\n    while rest > 0 {\n \
    \       result += rest;\n        rest = rest - 2;\n    }\n    result * rest\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp4_8xv9ij.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 4 {\n\
    \        0\n    } else {\n        fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp_udxjpx6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n\n    let result = fib4(n-1);\n\n    if n%4 == 0 {\n\
    \        result += fib4(n-2);\n    }\n\n    if n%4 == 1 {\n        result += fib4(n-3);\n\
    \    }\n\n    if n%4 == 2 {\n        result += fib4(n-4);\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `result`\n  -->\
    \ /tmp/tmpaycc5usx.rs:22:9\n   |\n19 |     let result = fib4(n-1);\n   |     \
    \    ------\n   |         |\n   |         first assignment to `result`\n   | \
    \        help: consider making this binding mutable: `mut result`\n...\n22 | \
    \        result += fib4(n-2);\n   |         ^^^^^^^^^^^^^^^^^^^ cannot assign\
    \ twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable\
    \ variable `result`\n  --> /tmp/tmpaycc5usx.rs:26:9\n   |\n19 |     let result\
    \ = fib4(n-1);\n   |         ------\n   |         |\n   |         first assignment\
    \ to `result`\n   |         help: consider making this binding mutable: `mut result`\n\
    ...\n26 |         result += fib4(n-3);\n   |         ^^^^^^^^^^^^^^^^^^^ cannot\
    \ assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable\
    \ variable `result`\n  --> /tmp/tmpaycc5usx.rs:30:9\n   |\n19 |     let result\
    \ = fib4(n-1);\n   |         ------\n   |         |\n   |         first assignment\
    \ to `result`\n   |         help: consider making this binding mutable: `mut result`\n\
    ...\n30 |         result += fib4(n-4);\n   |         ^^^^^^^^^^^^^^^^^^^ cannot\
    \ assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::cmp::Ordering::{Greater,\
    \ Less};\n    if n < 2 {\n        0\n    } else if n < 4 {\n        0\n    } else\
    \ if n < 7 {\n        2\n    } else if n < 11 {\n        0\n    } else {\n   \
    \     (\n            fib4(n - 2) + fib4(n - 3) + fib4(n - 4) + fib4(n - 5)\n \
    \       ).partial_cmp(&fib4(n - 6)).unwrap()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "warning: unused imports: `Greater`, `Less`\n  --> /tmp/tmpl32wduj1.rs:15:30\n\
    \   |\n15 |     use std::cmp::Ordering::{Greater, Less};\n   |               \
    \               ^^^^^^^  ^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by\
    \ default\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl32wduj1.rs:25:9\n\
    \   |\n14 |   fn fib4(n: isize) -> isize {\n   |                        -----\
    \ expected `isize` because of return type\n...\n25 | /         (\n26 | |     \
    \        fib4(n - 2) + fib4(n - 3) + fib4(n - 4) + fib4(n - 5)\n27 | |       \
    \  ).partial_cmp(&fib4(n - 6)).unwrap()\n   | |____________________________________________^\
    \ expected `isize`, found enum `std::cmp::Ordering`\n\nerror: aborting due to\
    \ previous error; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    fn aux(f: isize)\
    \ -> (isize, isize) {\n        if n <= 1 {\n            (1, 0)\n        } else\
    \ {\n            (aux(f+1)[0]+aux(f+1)[1], f+1)\n        }\n    }\n    aux(0)\n\
    \        .1\n        .1\n        .1\n        .1\n        .1\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmpudsrjxzg.rs:16:12\n\
    \   |\n16 |         if n <= 1 {\n   |            ^\n   |\n   = help: use the `||\
    \ { ... }` closure form instead\n\nerror[E0610]: `isize` is a primitive type and\
    \ therefore doesn't have fields\n  --> /tmp/tmpudsrjxzg.rs:24:10\n   |\n24 | \
    \        .1\n   |          ^\n\nerror[E0608]: cannot index into a value of type\
    \ `(isize, isize)`\n  --> /tmp/tmpudsrjxzg.rs:19:14\n   |\n19 |             (aux(f+1)[0]+aux(f+1)[1],\
    \ f+1)\n   |              ^^^^^^^^^^^ help: to access tuple elements, use: `aux(f+1).0`\n\
    \nerror[E0608]: cannot index into a value of type `(isize, isize)`\n  --> /tmp/tmpudsrjxzg.rs:19:26\n\
    \   |\n19 |             (aux(f+1)[0]+aux(f+1)[1], f+1)\n   |                 \
    \         ^^^^^^^^^^^ help: to access tuple elements, use: `aux(f+1).1`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0434, E0608, E0610.\nFor more information about an error, try `rustc --explain\
    \ E0434`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut ret\
    \ = 0;\n    for i in 0..(n - 1) {\n        ret += fib3(n - 4) + fib3(n - 3) +\
    \ fib3(n - 2) + fib3(n - 1);\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib3` in this scope\n  --> /tmp/tmp7omu3y26.rs:17:16\n\
    \   |\n17 |         ret += fib3(n - 4) + fib3(n - 3) + fib3(n - 2) + fib3(n -\
    \ 1);\n   |                ^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `fib3` in this scope\n  --> /tmp/tmp7omu3y26.rs:17:30\n   |\n\
    17 |         ret += fib3(n - 4) + fib3(n - 3) + fib3(n - 2) + fib3(n - 1);\n \
    \  |                              ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `fib3` in this scope\n  --> /tmp/tmp7omu3y26.rs:17:44\n\
    \   |\n17 |         ret += fib3(n - 4) + fib3(n - 3) + fib3(n - 2) + fib3(n -\
    \ 1);\n   |                                            ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `fib3` in this scope\n  --> /tmp/tmp7omu3y26.rs:17:58\n\
    \   |\n17 |         ret += fib3(n - 4) + fib3(n - 3) + fib3(n - 2) + fib3(n -\
    \ 1);\n   |                                                          ^^^^ not\
    \ found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    // please do\
    \ not use recursion\n    let mut fib4 = vec![0; 4];\n    for index in 0..n {\n\
    \        fib4[index] = fib4[index-1] + fib4[index-2] + fib4[index-3] + fib4[index-4];\n\
    \    }\n    fib4[n]\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpkli2bmxb.rs:18:9\n   |\n18 |         fib4[index] = fib4[index-1] + fib4[index-2]\
    \ + fib4[index-3] + fib4[index-4];\n   |         ^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpkli2bmxb.rs:18:23\n   |\n18 |  \
    \       fib4[index] = fib4[index-1] + fib4[index-2] + fib4[index-3] + fib4[index-4];\n\
    \   |                       ^^^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpkli2bmxb.rs:18:39\n   |\n18 |  \
    \       fib4[index] = fib4[index-1] + fib4[index-2] + fib4[index-3] + fib4[index-4];\n\
    \   |                                       ^^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpkli2bmxb.rs:18:55\n   |\n18 |  \
    \       fib4[index] = fib4[index-1] + fib4[index-2] + fib4[index-3] + fib4[index-4];\n\
    \   |                                                       ^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceInde"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return n;\n    }\n\n    fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 1;\n    let mut d = 1;\n\n    for _\
    \ in 0..n {\n        let new_a = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = new_a;\n    }\n    d\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `29`,\n right: `4`', /tmp/tmpg0zg2lcj.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut i =\
    \ 0; \n    while i < n {\n        i += 1;\n    }\n    i;\n}\n\nfn main() {\n \
    \   let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqukg1fux.rs:14:22\n   |\n\
    14 | fn fib4(n: isize) -> isize {\n   |    ----              ^^^^^ expected `isize`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n...\n19 |     i;\n   |      - help: remove this semicolon\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 4 { return\
    \ 0 };\n    if n == 4 { return 1 };\n    if n == 5 { return 4 };\n    if n ==\
    \ 6 { return 8 };\n    if n == 7 { return 14 };\n    fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n \
    \   assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `27`,\n right: `28`', /tmp/tmprffhzgy6.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"fib4 requires a non-negative index!\");\n    }\n\n    // we\
    \ already checked for n<0 so we know that fib4(n) == fibbonacci(n) in the final\
    \ case\n    let mut fib4 = vec![0; n];\n    for i in 0..n {\n        fib4[i] =\
    \ fib4(i - 1) + fib4(i - 2) + fib4(i - 3) + fib4(i - 4);\n    }\n\n    fib4.last()\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa71awyqf.rs:20:28\n   |\n\
    20 |     let mut fib4 = vec![0; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n20 |     let mut fib4 =\
    \ vec![0; n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpa71awyqf.rs:22:9\n\
    \   |\n22 |         fib4[i] = fib4(i - 1) + fib4(i - 2) + fib4(i - 3) + fib4(i\
    \ - 4);\n   |         ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0618]: expected function, found `Vec<{integer}>`\n  --> /tmp/tmpa71awyqf.rs:22:19\n\
    \   |\n20 |     let mut fib4 = vec![0; n];\n   |         -------- `fib4` has type\
    \ `Vec<{integer}>`\n21 |     for i in 0..n {\n22 |         fib4[i] = fib4(i -\
    \ 1) + fib4(i - 2) + fib4(i - 3) + fib4(i - 4);\n   |                   ^^^^-------\n\
    \   |                   |\n   |                   call expression requires function\n\
    \nerror[E0618]: expected function, found `Vec<{integer}>`\n  --> /tmp/tmpa71awyqf.rs:22:33\n\
    \   |\n20 |     let mut fib4 = vec![0; n];\n   |         -------- `fib4` has type\
    \ `Vec<{integer}>`\n21 |     for i in 0..n {\n22 |         fib4[i] = fib4(i -\
    \ 1) + fib4(i - 2) + fib4(i - 3) + fib4(i - 4);\n   |                        \
    \         ^^^^-------\n   |                                 |\n   |          \
    \                       call expression requires function\n\nerror[E0618]: expected\
    \ function, found `Vec<{integer}>`\n  --> /tmp/tmpa71awyqf.rs:22:47\n   |\n20\
    \ |     let mut fib4 = vec![0; n];\n   |         -------- `fib4` has type `Vec<{integer}>`\n\
    21 |     for i in 0..n {\n22 |         fib4[i] = fib4(i - 1) + fib4(i - 2) + fib4(i\
    \ - 3) + fib4(i - 4);\n   |                  "
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib:\
    \ isize = 0.;\n    for i in 1..=n {\n        fib = fib + i;\n    }\n    fib\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk6yf40o0.rs:15:26\n   |\n\
    15 |     let mut fib: isize = 0.;\n   |                  -----   ^^ expected `isize`,\
    \ found floating-point number\n   |                  |\n   |                 \
    \ expected due to this\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 ||\
    \ n > 42 {\n        panic!(\n            \"fib4: invalid arg: fib4({})\",\n  \
    \          n\n        );\n    }\n    fn rec(\n        mut acc: isize,\n      \
    \  mut i: isize,\n        mut k: isize,\n        mut c: isize,\n    ) {\n    \
    \    if i == n {\n            acc = c + acc;\n        } else {\n            acc\
    \ = rec(acc, i + 1, k + 1, c + k);\n        }\n    }\n    rec(\n        0,\n \
    \       0,\n        0,\n        0,\n    )\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmpfmd2ucjl.rs:27:17\n\
    \   |\n27 |         if i == n {\n   |                 ^\n   |\n   = help: use\
    \ the `|| { ... }` closure form instead\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpfmd2ucjl.rs:33:5\n   |\n14 |   fn fib4(n: isize) -> isize {\n   |  \
    \                      ----- expected `isize` because of return type\n...\n33\
    \ | /     rec(\n34 | |         0,\n35 | |         0,\n36 | |         0,\n37 |\
    \ |         0,\n38 | |     )\n   | |_____^ expected `isize`, found `()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfmd2ucjl.rs:30:19\n   |\n22 |         mut acc:\
    \ isize,\n   |                  ----- expected due to this parameter type\n...\n\
    30 |             acc = rec(acc, i + 1, k + 1, c + k);\n   |                  \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0434.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        n\
    \ => fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4),\n    }\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ 0 } else { fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4) + fib4(n -\
    \ 5) }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::cmp::Ordering;\n\
    \    use std::mem::size_of;\n    use std::mem;\n\n    let mut fib4_array = &mut\
    \ [0; 8];\n\n    fib4_array[0] =  0;\n    fib4_array[1] =  0;\n    fib4_array[2]\
    \ = 2;\n    fib4_array[3] = 0;\n    fib4_array[4] = 0;\n    fib4_array[5] = 1;\n\
    \    fib4_array[6] = 0;\n    fib4_array[7] = 1;\n\n    if n == 0 {\n        fib4_array[0]\
    \ = 0;\n        return fib4_array[0];\n    }\n    if n == 1 {\n        fib4_array[1]\
    \ = 0;\n        return fib4_array[1];\n    }\n    if n == 2 {\n        fib4_array[2]\
    \ = 2;\n        return fib4_array[2];\n    }\n    if n == 3 {\n        fib4_array[3]\
    \ = 0;\n        return fib4_array[3];\n    }\n    if n == 4 {\n        fib4_array[4]\
    \ = 0;\n        fib4_array[5] = 1;\n        fib4_array[6] = 0;\n        fib4_array[7]\
    \ = 1;\n        return fib4_array[8];\n    }\n\n    if n > 4 {\n        let mut\
    \ fib4_array = &mut [0; 8];\n        fib4_array[0] = fib4_array(n - 1) + fib4_array(n\
    \ - 2) + fib4_array(n - 3) + fib4_array(n - 4);\n        fib4_array[8] = fib4_array(n\
    \ - 4) + fib4_array(n - 3) + fib4_array(n - 2) + fib4_array(n - 1);\n\n      \
    \  fib4_array[5] = fib4_array(n - 4) + fib4_array(n - 3);\n        fib4_array[7]\
    \ = fib4_array(n - 4) + fib4_array(n - 3);\n        fib4_array[6] = fib4_array(n\
    \ - 3) + fib4_array(n - 2);\n        fib4_array[2] = fib4_array(n - 3) + fib4_array(n\
    \ - 2);\n        fib4_array[3] = fib4_array(n - 2) + fib4_array(n - 1);\n    \
    \    return fib4_array[8];\n    }\n\n    let mut fib4_array = &mut [0; 8];\n\n\
    \    fib4_array[0] = fib4_array(n - 1) + fib4_array(n - 2) + fib4_array(n - 3)\
    \ + fib4_array(n - 4);\n    fib4_array[8] = fib4_array(n - 4) + fib4_array(n -\
    \ 3) + fib4_array(n - 2) + fib4_array(n - 1);\n\n    fib4_array[5] = fib4_array(n\
    \ - 4) + fib4_array(n - 3);\n    fib4_array[6] = fib4_array(n - 4) + fib4_array(n\
    \ - 3);\n    fib4_array[7] = fib4_array(n - 4) + fib4_array(n - 3);\n    fib4_array[3]\
    \ = fib4_\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `fib4_` in this scope\n  --> /tmp/tmpxq4gnn_y.rs:75:21\n\
    \   |\n75 |     fib4_array[3] = fib4_\n   |                     ^^^^^ not found\
    \ in this scope\n\nwarning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmpxq4gnn_y.rs:15:9\n\
    \   |\n15 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nwarning: unused import:\
    \ `std::mem::size_of`\n  --> /tmp/tmpxq4gnn_y.rs:16:9\n   |\n16 |     use std::mem::size_of;\n\
    \   |         ^^^^^^^^^^^^^^^^^\n\nwarning: unused import: `std::mem`\n  --> /tmp/tmpxq4gnn_y.rs:17:9\n\
    \   |\n17 |     use std::mem;\n   |         ^^^^^^^^\n\nerror[E0618]: expected\
    \ function, found `&mut [{integer}; 8]`\n  --> /tmp/tmpxq4gnn_y.rs:56:25\n   |\n\
    55 |         let mut fib4_array = &mut [0; 8];\n   |             --------------\
    \ `fib4_array` has type `&mut [{integer}; 8]`\n56 |         fib4_array[0] = fib4_array(n\
    \ - 1) + fib4_array(n - 2) + fib4_array(n - 3) + fib4_array(n - 4);\n   |    \
    \                     ^^^^^^^^^^-------\n   |                         |\n   |\
    \                         call expression requires function\n\nerror[E0618]: expected\
    \ function, found `&mut [{integer}; 8]`\n  --> /tmp/tmpxq4gnn_y.rs:56:45\n   |\n\
    55 |         let mut fib4_array = &mut [0; 8];\n   |             --------------\
    \ `fib4_array` has type `&mut [{integer}; 8]`\n56 |         fib4_array[0] = fib4_array(n\
    \ - 1) + fib4_array(n - 2) + fib4_array(n - 3) + fib4_array(n - 4);\n   |    \
    \                                         ^^^^^^^^^^-------\n   |            \
    \                                 |\n   |                                    \
    \         call expression requires function\n\nerror[E0618]: expected function,\
    \ found `&mut [{integer}; 8]`\n  --> /tmp/tmpxq4gnn_y.rs:56:65\n   |\n55 |   \
    \      let mut fib4_array = &mut [0; 8];\n   |             -------------- `fib4_array`\
    \ has type `&mut [{integer}; 8]`\n56 |         fib4_array[0] = fib4_array(n -\
    \ 1) + fib4_array(n - 2) + fib4_array(n - 3) + fib4_array(n - 4);\n   |      \
    \                                                           ^^^^^^"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else {\n        let mut fib: isize = 0;\n        let mut i =\
    \ 1;\n        while i < n {\n            fib = fib + i;\n            i = i + 1;\n\
    \        }\n        fib\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `4`', /tmp/tmp6bueo2yy.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 2 {\
    \ n } else { fib4(n-1) + fib4(n-2) }\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmppo3fsyt5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    trace!(\"fib4\"\
    , n);\n    if n == 0 {\n        0\n    }\n    else if n == 1 {\n        0\n  \
    \  }\n    else if n == 2 {\n        2\n    }\n    else if n == 3 {\n        0\n\
    \    }\n    else {\n        fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  \
    \  }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `trace` in this scope\n  --> /tmp/tmpautkfmh8.rs:15:5\n\
    \   |\n15 |     trace!(\"fib4\", n);\n   |     ^^^^^\n\nerror: aborting due to\
    \ previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 4 {\n\
    \        n\n    } else {\n        fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmppmdxafz8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 3;\n    }\n\
    \    if n == 4 {\n        return 5;\n    }\n    if n == 5 {\n        return 8;\n\
    \    }\n    if n == 6 {\n        return 14;\n    }\n    return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1) + fib4(n);\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpophhzbyu.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        _ => fib4(n - 1) +\
    \ fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        0\n    } else if n == 0 {\n        0\n    } else if n == 1 {\n      \
    \  0\n    } else if n == 2 {\n        2\n    } else if n == 3 {\n        0\n \
    \   } else {\n        fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut x = 3;\n    let mut y = 6;\n    let mut z = 8;\n    while y < n {\n\
    \        x += z;\n        y = x + y;\n        z = x + z;\n    }\n    return x;\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpbvzsgrw_.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    for x in 0..n {\n        result = result + result;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `32`,\n right: `4`', /tmp/tmpoicq5q5o.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"fib4 index must be positive\")\n    }\n    if n == 0 {\n   \
    \     return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2\
    \ {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp92x8a21m.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    fib4_aux(n,\
    \ 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib4_aux` in this scope\n  --> /tmp/tmpiko5fqko.rs:15:5\n\
    \   |\n15 |     fib4_aux(n, 4)\n   |     ^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    else if n == 1 {\n        return 1;\n    }\n  \
    \  else if n == 2 {\n        return 2;\n    }\n    else if n == 3 {\n        return\
    \ 0;\n    }\n    else {\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4);\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpc3dgen6x.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4\
    \ = vec![0; n + 1];\n    fib4[0] = fib4[1] = 0;\n    for i in 2..=n {\n      \
    \  fib4[i] = fib4[i - 1] + fib4[i - 2];\n    }\n    fib4[n]\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp495wy1q7.rs:15:28\n   |\n\
    15 |     let mut fib4 = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n15 |     let mut\
    \ fib4 = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp495wy1q7.rs:16:15\n\
    \   |\n16 |     fib4[0] = fib4[1] = 0;\n   |     -------   ^^^^^^^^^^^ expected\
    \ integer, found `()`\n   |     |\n   |     expected due to the type of this binding\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp495wy1q7.rs:18:9\n\
    \   |\n18 |         fib4[i] = fib4[i - 1] + fib4[i - 2];\n   |         ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp495wy1q7.rs:18:19\n\
    \   |\n18 |         fib4[i] = fib4[i - 1] + fib4[i - 2];\n   |               \
    \    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp495wy1q7.rs:18:33\n\
    \   |\n18 |         fib4[i] = fib4[i - 1] + fib4[i - 2];\n   |               \
    \                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements o"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    assert!(n >=\
    \ 0 && n < 4);\n    if n == 0 {\n        return 0;\n    }\n    \n    if n == 1\
    \ {\n        return 0;\n    }\n    \n    if n == 2 {\n        return 2;\n    }\n\
    \    \n    if n == 3 {\n        return 0;\n    }\n    \n    if n == 4 {\n    \
    \    return 1;\n    }\n    \n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfmgkoiun.rs:14:22\n   |\n\
    14 | fn fib4(n: isize) -> isize {\n   |    ----              ^^^^^ expected `isize`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n...\n36 |     fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4);\n   |                                                       \
    \   - help: remove this semicolon\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0;\n    }\n    let first = fib4(n - 4);\n    let second\
    \ = fib4(n - 3);\n    let third = fib4(n - 2);\n    let fourth = fib4(n - 1);\n\
    \    return fourth + second + third + first;\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpw0ziuaeq.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4\
    \ = [0i32; 4];\n    for i in 0..n {\n        fib4[0] += fib4[1] + fib4[2];\n \
    \       fib4[1] += fib4[3] + fib4[4];\n        fib4[2] += fib4[0] + fib4[1] +\
    \ fib4[2];\n        fib4[3] += fib4[2] + fib4[3];\n        fib4[4] += fib4[3]\
    \ + fib4[4];\n    }\n    fib4[4]\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxum179ku.rs:23:5\n   |\n\
    14 | fn fib4(n: isize) -> isize {\n   |                      ----- expected `isize`\
    \ because of return type\n...\n23 |     fib4[4]\n   |     ^^^^^^^ expected `isize`,\
    \ found `i32`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ if n == 4 {\n        return 0\n    }\n\n    let a1 = n - 1;\n    let a2 = n\
    \ - 2;\n    let a3 = n - 3;\n    let a4 = n - 4;\n\n    let a5 = n - 5;\n\n  \
    \  let a6 = n - 6;\n\n    let a7 = n - 7;\n\n    let a8 = n - 8;\n\n    let a9\
    \ = n - 9;\n\n    let a10 = n - 10;\n\n    let a11 = n - 11;\n\n    let a12 =\
    \ n - 12;\n\n    let a13 = n - 13;\n\n    let a14 = n - 14;\n\n    let a15 = n\
    \ - 15;\n\n    let a16 = n - 16;\n\n    let a17 = n - 17;\n\n    let a18 = n -\
    \ 18;\n\n    let a19 = n - 19;\n\n    let a20 = n - 20;\n\n    let a21 = n - 21;\n\
    \n    let a22 = n - 22;\n\n    let a23 = n - 23;\n\n    let a24 = n - 24;\n\n\
    \    let a25 = n - 25;\n\n    let a26 = n - 26;\n\n    let a27 = n - 27;\n\n \
    \   let a28 = n - 28;\n\n    let a29 = n - 29;\n\n    let a30 = n - 30;\n\n  \
    \  let a31 = n - 31;\n\n    let a32 = n - 32;\n\n    let a33 = n - 33;\n\n   \
    \ let a34 = n - 34;\n\n    let a35 = n - 35;\n\n    let a36 = n - 36;\n\n    let\
    \ a37 = n - 37;\n\n    let a38 = n - 38;\n\n    let a39 = n - 39;\n\n    let a40\
    \ = n - 40;\n\n    let a41 = n - 41;\n\n    let a42 = n - 42;\n\n    let a43 =\
    \ n - 43;\n\n    let a44 = n - 44;\n\n    let a45 = n - 45;\n\n    let a46 = n\
    \ - 46;\n\n    let a47 = n - 47;\n\n    let a48 = n - 48;\n\n    let a49 = n -\
    \ 49;\n\n    let a50 = n - 50;\n\n    let a51 = n - 51;\n\n    let a52 = n - 52;\n\
    \n    let a53 = n - 53;\n\n    let a54 = n - 54;\n\n    let a55 = n - 55;\n\n\
    \    let a56 = n - 56;\n\n    let a57 = n - 57;\n\n    let a58 = n - 58;\n\n \
    \   let a59 = n - 59;\n\n    let a60 = n - 60;\n\n    let a61 = n - 61;\n\n  \
    \  let a62 = n - 62;\n\n    let a63 = n - 63;\n\n    let a64 = n - 64;\n\n   \
    \ let a65 = \n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmpm1s5sgh5.rs:157:1\n\
    \    |\n157 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 0 {\n\
    \        0\n    }\n    if n == 1 {\n        0\n    }\n    if n == 2 {\n      \
    \  2\n    }\n    if n == 3 {\n        0\n    }\n    fib4(n - 4) + fib4(n - 3)\
    \ + fib4(n - 2) + fib4(n - 1)\n}\n\nfn main() {\n    let candidate = fib4;\n \
    \   assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcdzuozaa.rs:16:9\n   |\n\
    15 | /     if n <= 0 {\n16 | |         0\n   | |         ^ expected `()`, found\
    \ integer\n17 | |     }\n   | |_____- expected this to be `()`\n   |\nhelp: you\
    \ might have meant to return this value\n   |\n16 |         return 0;\n   |  \
    \       ++++++  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcdzuozaa.rs:19:9\n\
    \   |\n18 | /     if n == 1 {\n19 | |         0\n   | |         ^ expected `()`,\
    \ found integer\n20 | |     }\n   | |_____- expected this to be `()`\n   |\nhelp:\
    \ you might have meant to return this value\n   |\n19 |         return 0;\n  \
    \ |         ++++++  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcdzuozaa.rs:22:9\n\
    \   |\n21 | /     if n == 2 {\n22 | |         2\n   | |         ^ expected `()`,\
    \ found integer\n23 | |     }\n   | |_____- expected this to be `()`\n   |\nhelp:\
    \ you might have meant to return this value\n   |\n22 |         return 2;\n  \
    \ |         ++++++  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcdzuozaa.rs:25:9\n\
    \   |\n24 | /     if n == 3 {\n25 | |         0\n   | |         ^ expected `()`,\
    \ found integer\n26 | |     }\n   | |_____- expected this to be `()`\n   |\nhelp:\
    \ you might have meant to return this value\n   |\n25 |         return 0;\n  \
    \ |         ++++++  +\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return n;\n    }\n\n    fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 4;\n    }\n    let mut result = 2;\n    let mut\
    \ prev_result = 1;\n    for i in 0..(n-3){\n        result = result + prev_result;\n\
    \        prev_result = result;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpox2hwvuc.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ 0 }\n    else { 1 + fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4) }\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-6`,\n right: `4`', /tmp/tmpr1kztnnn.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        4\
    \ => 0,\n        _ => fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpr7rpfday.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"negative n\")\n    }\n    \n    if n == 0 {\n        return\
    \ 0;\n    }\n    \n    let mut result = 1;\n    let mut prev = 0;\n    for i in\
    \ 1..=n {\n        let result = prev + result;\n        prev = result;\n    }\n\
    \    \n    result\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpf_quxbc7.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"fib4 function requires a positive integer.\");\n    }\n\n  \
    \  if n == 0 {\n        return 0;\n    }\n\n    if n == 1 {\n        return 1;\n\
    \    }\n\n    if n == 2 {\n        return 2;\n    }\n\n    if n == 3 {\n     \
    \   return 0;\n    }\n\n    if n == 4 {\n        return 0;\n    }\n\n    let fib5\
    \ = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n    fib4\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd4o1d4yv.rs:40:5\n   |\n\
    14 | fn fib4(n: isize) -> isize {\n   | --------------------------\n   | |   \
    \                 |\n   | |                    expected `isize` because of return\
    \ type\n   | fn(isize) -> isize {fib4} defined here\n...\n40 |     fib4\n   |\
    \     ^^^^ expected `isize`, found fn item\n   |\n   = note: expected type `isize`\n\
    \           found fn item `fn(isize) -> isize {fib4}`\nhelp: use parentheses to\
    \ call this function\n   |\n40 |     fib4(n)\n   |         +++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    fn fib(n: isize)\
    \ -> isize {\n        if n <= 0 { return 0 }\n        if n == 1 { return 1 }\n\
    \        return fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\n    }\n    fib(n)\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpbpjtslc3.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 1 {\n\
    \        n\n    } else {\n        fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-6`,\n right: `4`', /tmp/tmpscvjd35k.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::mem::replace;\n\
    \n    if n < 1 {\n        0\n    } else {\n        1 + fib4(n - 2) + fib4(n -\
    \ 3) + fib4(n - 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `4`', /tmp/tmpjsnl3cig.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 2 {\
    \ 1 } else { fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4); }\n}\n\nfn\
    \ main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj41fcsju.rs:15:26\n   |\n\
    15 |     if n <= 2 { 1 } else { fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4); }\n   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^^\n\
    \   |                          |                                             \
    \         |\n   |                          |                                 \
    \                     help: remove this semicolon\n   |                      \
    \    expected `isize`, found `()`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 1isize;\n    for i in 2..n+1 {\n        a = a * i;\n    }\n    a\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `120`,\n right: `4`', /tmp/tmpk0hzaacn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4\
    \ = vec![0; n + 1];\n    for i in 0..n {\n        fib4[i] = fib4[i - 1] + fib4[i\
    \ - 2] + fib4[i - 3] + fib4[i - 4];\n    }\n    fib4[..]\n}\n\nfn main() {\n \
    \   let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi9e35rbx.rs:15:28\n   |\n\
    15 |     let mut fib4 = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n15 |     let mut\
    \ fib4 = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpi9e35rbx.rs:17:9\n   |\n17 |         fib4[i]\
    \ = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n   |         ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpi9e35rbx.rs:17:19\n\
    \   |\n17 |         fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i\
    \ - 4];\n   |                   ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpi9e35rbx.rs:17:33\n   |\n17 |  \
    \       fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n   |\
    \                                 ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpi9e35rb"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 1;\n    }\n    let mut a = 1;\n    let mut b = 2;\n\
    \    let mut c = 1;\n    let mut d = 2;\n    while n != 0 {\n        c = d + c;\n\
    \        n = n - 4;\n        d = a + b;\n        a = b;\n        b = d;\n    }\n\
    \    return a;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpzs1njw1o.rs:24:9\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |         - help: consider making\
    \ this binding mutable: `mut n`\n...\n24 |         n = n - 4;\n   |         ^^^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4sum\
    \ = 0;\n    if n < 0 {\n        println!(\"fib4 is undefined for negative numbers\"\
    );\n        return fib4sum;\n    }\n    if n == 0 {\n        fib4sum = 0;\n  \
    \      return fib4sum;\n    }\n    if n == 1 {\n        fib4sum = 1;\n       \
    \ return fib4sum;\n    }\n    fib4sum += fib4(n - 2) + fib4(n - 3);\n    fib4sum\
    \ += fib4(n - 4);\n    return fib4sum;\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: "fib4 is undefined for negative numbers\nfib4 is undefined for negative\
    \ numbers\nfib4 is undefined for negative numbers\n"
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpb17bedjs.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 1 {\n\
    \        0\n    } else {\n        fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp2sgix09g.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        4\
    \ => 4,\n        5 => 0,\n        _ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp0zd4xf81.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::mem::size_of;\n\
    \    use std::mem::swap;\n    use std::mem::forget;\n    use std::cmp::{max, min};\n\
    \    if n < 0 {\n        panic!(\"fib4 requires an integer greater than or equal\
    \ to zero\");\n    }\n    let mut x = 1;\n    let mut y = 0;\n    while n >= 2\
    \ {\n        swap(x, y);\n        let t = x + y;\n        x = y;\n        y =\
    \ t;\n        n -= 2;\n    }\n    x\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::mem::size_of`\n  --> /tmp/tmp30frhrcg.rs:15:9\n\
    \   |\n15 |     use std::mem::size_of;\n   |         ^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nwarning: unused import:\
    \ `std::mem::forget`\n  --> /tmp/tmp30frhrcg.rs:17:9\n   |\n17 |     use std::mem::forget;\n\
    \   |         ^^^^^^^^^^^^^^^^\n\nwarning: unused imports: `max`, `min`\n  -->\
    \ /tmp/tmp30frhrcg.rs:18:20\n   |\n18 |     use std::cmp::{max, min};\n   |  \
    \                  ^^^  ^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp30frhrcg.rs:25:14\n\
    \   |\n25 |         swap(x, y);\n   |              ^\n   |              |\n  \
    \ |              expected `&mut _`, found integer\n   |              help: consider\
    \ mutably borrowing here: `&mut x`\n   |\n   = note: expected mutable reference\
    \ `&mut _`\n                           found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp30frhrcg.rs:25:17\n   |\n25 |         swap(x,\
    \ y);\n   |                 ^\n   |                 |\n   |                 expected\
    \ `&mut _`, found integer\n   |                 help: consider mutably borrowing\
    \ here: `&mut y`\n   |\n   = note: expected mutable reference `&mut _`\n     \
    \                      found type `{integer}`\n\nerror: aborting due to 2 previous\
    \ errors; 3 warnings emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    fib4_helper(0,\
    \ n, 1, 1, 1)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib4_helper` in this scope\n  --> /tmp/tmp3j_lb4cr.rs:15:5\n\
    \   |\n15 |     fib4_helper(0, n, 1, 1, 1)\n   |     ^^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 1;\n    }\n\
    \    let mut fib: isize = 1;\n    for _ in 0..(n-3) {\n        fib += fib;\n \
    \   }\n    fib += fib4(n-2);\n    return fib;\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `4`', /tmp/tmpmtzars_b.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ if n == 4 {\n        return 4\n    }\n\n    fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp8ecuneb1.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    // base case\n\
    \    if n == 0 || n == 1 {\n        return 0;\n    }\n\n    // recursive case\n\
    \    if n % 2 == 0 {\n        return fib4(n - 1) + fib4(n - 2);\n    }\n\n   \
    \ return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    return fib4(n - 4) + fib4(n - 3) + fib4(n\
    \ - 2) + fib4(n - 1);\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpck3yh1k0.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ return 0; }\n    if n == 1 { return 1; }\n    if n == 2 { return 2; }\n    if\
    \ n == 3 { return 0; }\n    if n == 4 { return 2; }\n    if n == 5 { return 3;\
    \ }\n    if n == 6 { return 5; }\n    if n == 7 { return 8; }\n    if n == 8 {\
    \ return 14; }\n    if n == 9 { return 14; }\n    if n == 10 { return 16; }\n\
    \    if n == 11 { return 30; }\n    if n == 12 { return 44; }\n    if n == 13\
    \ { return 60; }\n    if n == 14 { return 70; }\n    if n == 15 { return 80; }\n\
    \    if n == 16 { return 100; }\n    if n == 17 { return 120; }\n    if n == 18\
    \ { return 140; }\n    if n == 19 { return 150; }\n    if n == 20 { return 170;\
    \ }\n    if n == 21 { return 180; }\n    if n == 22 { return 200; }\n    if n\
    \ == 23 { return 220; }\n    if n == 24 { return 230; }\n    if n == 25 { return\
    \ 240; }\n    if n == 26 { return 250; }\n    if n == 27 { return 270; }\n   \
    \ if n == 28 { return 280; }\n    if n == 29 { return 290; }\n    if n:30 { return\
    \ 300; }\n    if n == 31 { return 310; }\n    if n == 32 { return 320; }\n   \
    \ if n == 33 { return 330; }\n    if n == 34 { return 340; }\n    if n == 35 {\
    \ return 350; }\n    if n == 36 { return 360; }\n    if n == 37 { return 370;\
    \ }\n    if n == 38 { return 380; }\n    if n == 39 { return 390; }\n    if n\
    \ == 40 { return 400; }\n    if n == 41 { return 410; }\n    if n == 42 { return\
    \ 420; }\n    if n == 43 { return 430; }\n    if n == 44 { return 440; }\n   \
    \ if n == 45 { return 450; }\n    if n == 46 { return 460; }\n    if n == 47 {\
    \ return 470; }\n    if n == 48 { return 480; }\n    if n == 49 { return 490;\
    \ }\n    if n == 40 { return 500; }\n    if n == 41 { return 510; }\n    if n\
    \ == 42 { return 520; }\n    if n == 43 { return 530; }\n    if n == 44 { return\
    \ 540; }\n    if n == 45 { return 550; }\n    if n == 46 { return 560; }\n   \
    \ if n == 47 { return 570; }\n    if n == 48 { return 580; }\n    if n == 49 {\
    \ return 590; }\n    if n == 40 { return 600; }\n    if n == 41 { return 610;\
    \ }\n    if n == 42 { return 620; }\n    if n == 43 { return 630; }\n    if n\
    \ == 44 { return 640; }\n    if n == 45 { return 650; }\n    if n == 46 { return\
    \ 660; }\n    if n == 47 { return 67\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpmq6w274v.rs:91:3\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |                            - unclosed\
    \ delimiter\n...\n82 |     if n == 47 { return 67\n   |                - this\
    \ delimiter might not be properly closed...\n83 | }\n   | - ...as it matches this\
    \ but it has different indentation\n...\n91 | }\n   |   ^\n\nerror: expected type,\
    \ found `30`\n  --> /tmp/tmpmq6w274v.rs:45:10\n   |\n45 |     if n:30 { return\
    \ 300; }\n   |         -^^ expected type\n   |         |\n   |         help: maybe\
    \ write a path separator here: `::`\n\nerror: aborting due to 2 previous errors\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 3;\n    }\n    return fib4(n - 4) + fib4(n -\
    \ 3) + fib4(n - 2) + fib4(n - 1);\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpxlz99agj.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4\
    \ = vec![];\n\n    if n == 0 {\n        fib4 += [0];\n    } else if n == 1 {\n\
    \        fib4 += [0, 1];\n    } else {\n        fib4 += [0, 1, 2];\n    }\n\n\
    \    for i in 3..(n + 1) {\n        fib4 += vec![0, 1, 2];\n    }\n\n    fib4[n\
    \ - 4]\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<_>`\n  --> /tmp/tmpoe_94iv8.rs:18:9\n   |\n18 |         fib4 += [0];\n\
    \   |         ----^^^^^^^\n   |         |\n   |         cannot use `+=` on type\
    \ `Vec<_>`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Vec<_>`\n  --> /tmp/tmpoe_94iv8.rs:20:9\n   |\n20 |         fib4 +=\
    \ [0, 1];\n   |         ----^^^^^^^^^^\n   |         |\n   |         cannot use\
    \ `+=` on type `Vec<_>`\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `Vec<_>`\n  --> /tmp/tmpoe_94iv8.rs:22:9\n   |\n22 |    \
    \     fib4 += [0, 1, 2];\n   |         ----^^^^^^^^^^^^^\n   |         |\n   |\
    \         cannot use `+=` on type `Vec<_>`\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `Vec<_>`\n  --> /tmp/tmpoe_94iv8.rs:26:9\n\
    \   |\n26 |         fib4 += vec![0, 1, 2];\n   |         ----^^^^^^^^^^^^^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `Vec<_>`\n\nerror[E0277]:\
    \ the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpoe_94iv8.rs:29:5\n\
    \   |\n29 |     fib4[n - 4]\n   |     ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<_>`\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0368.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        _ => fib4(n - 1) +\
    \ fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut num\
    \ = 0;\n    while n > 4{\n        num += fib4(n-4);\n        n -= 4;\n    }\n\
    \    num += fib4(n-3);\n    num += fib4(n-2);\n    num += fib4(n-1);\n    num\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "warning: function cannot return without recursing\n  --> /tmp/tmpwampr_3i.rs:14:1\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot\
    \ return without recursing\n...\n17 |         num += fib4(n-4);\n   |        \
    \        --------- recursive call site\n...\n20 |     num += fib4(n-3);\n   |\
    \            --------- recursive call site\n   |\n   = note: `#[warn(unconditional_recursion)]`\
    \ on by default\n   = help: a `loop` may express intention better if this is on\
    \ purpose\n\nerror[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpwampr_3i.rs:18:9\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |         - help: consider making\
    \ this binding mutable: `mut n`\n...\n18 |         n -= 4;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    fn fib_iter()\
    \ -> isize {\n        if n == 0 {\n            return 0\n        }\n        if\
    \ n == 1 {\n            return 1\n        }\n        if n == 2 {\n           \
    \ return 2\n        }\n        return fib_iter() + fib_iter()\n    }\n    fib4(n).map(|x|\
    \ x).nth()\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmps_e5s_ea.rs:16:12\n\
    \   |\n16 |         if n == 0 {\n   |            ^\n   |\n   = help: use the `||\
    \ { ... }` closure form instead\n\nerror[E0434]: can't capture dynamic environment\
    \ in a fn item\n  --> /tmp/tmps_e5s_ea.rs:19:12\n   |\n19 |         if n == 1\
    \ {\n   |            ^\n   |\n   = help: use the `|| { ... }` closure form instead\n\
    \nerror[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmps_e5s_ea.rs:22:12\n\
    \   |\n22 |         if n == 2 {\n   |            ^\n   |\n   = help: use the `||\
    \ { ... }` closure form instead\n\nerror[E0599]: `isize` is not an iterator\n\
    \  --> /tmp/tmps_e5s_ea.rs:27:13\n   |\n27 |     fib4(n).map(|x| x).nth()\n  \
    \ |             ^^^ `isize` is not an iterator\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `isize: Iterator`\n           which\
    \ is required by `&mut isize: Iterator`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0434, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0434`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::cmp::Ordering;\n\
    \n    if n < 2 {\n        0\n    } else if n == 2 {\n        2\n    } else {\n\
    \        let mut fib = vec![0, 1];\n        fib[2] = 2;\n        fib[3] = 0;\n\
    \        for i in 4..(n + 1) {\n            fib[i] = fib[i - 2] + fib[i - 3] +\
    \ fib[i - 4];\n        }\n        fib[n]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmpa8p5xapl.rs:15:9\n\
    \   |\n15 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpa8p5xapl.rs:26:13\n\
    \   |\n26 |             fib[i] = fib[i - 2] + fib[i - 3] + fib[i - 4];\n   | \
    \            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpa8p5xapl.rs:26:22\n\
    \   |\n26 |             fib[i] = fib[i - 2] + fib[i - 3] + fib[i - 4];\n   | \
    \                     ^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpa8p5xapl.rs:26:35\n   |\n26 |             fib[i] =\
    \ fib[i - 2] + fib[i - 3] + fib[i - 4];\n   |                                \
    \   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpa8p5xapl.rs:26:48\n\
    \   |\n26 |             fib[i] = fib[i - 2] + fib[i - 3] + fib[i - 4];\n   | \
    \                                               ^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceInde"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ return 0; }\n    if n == 1 { return 1; }\n    if n == 2 { return 2; }\n    if\
    \ n == 3 { return 0; }\n    if n == 4 { return 3; }\n    if n == 5 { return 5;\
    \ }\n    return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1);\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `4`', /tmp/tmpcv43_zx7.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"fib4(): n must be >= 0\");\n    }\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    if n\
    \ == 4 {\n        return 4;\n    }\n    if n == 5 {\n        return 8;\n    }\n\
    \    if n == 6 {\n        return 10;\n    }\n    if n == 7 {\n        return 14;\n\
    \    }\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp6cd1qzxz.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 1;\n    }\n\
    \    let mut a = fib4(n - 1);\n    let mut b = fib4(n - 2);\n    let mut c = fib4(n\
    \ - 3);\n    let mut d = fib4(n - 4);\n    let mut ret = a + b + c + d;\n    ret\
    \ = ret + 1;\n    return ret;\n}\n\nfn main() {\n    let candidate = fib4;\n \
    \   assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `4`', /tmp/tmp9vucpcdw.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    fib4_0(n)\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib4_0` in this scope\n  --> /tmp/tmp9pujqxka.rs:15:5\n\
    \   |\n15 |     fib4_0(n)\n   |     ^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib\
    \ = 0;\n    for i in (0..(n * 4)).rev() {\n        fib = fib * 4 + i;\n    }\n\
    \    fib\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6841405683940`,\n right: `4`', /tmp/tmp5v8umyku.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib:\
    \ isize = 0;\n    while n > 0 {\n        fib = fib + n & 3;\n        n >>= 2;\n\
    \    }\n    fib\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp5z3pc6jk.rs:18:9\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |         - help: consider making\
    \ this binding mutable: `mut n`\n...\n18 |         n >>= 2;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 3 {\n\
    \        0\n    } else {\n        fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n\
    \ - 1)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpvpsl5375.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
