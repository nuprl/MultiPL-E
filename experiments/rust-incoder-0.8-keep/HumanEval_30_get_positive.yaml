name: HumanEval_30_get_positive
language: rust
prompt: "/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
  \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
  \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) ->\
  \ Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
  \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
  \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
  \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
  }\n"
completions: ["    let mut new_list = l;\n    new_list.sort();\n    new_list.iter().filter_map(|&i|\
    \ if i < 0 {\n        None\n    } else {\n        Some(i)\n    }).collect()",
  "    let mut new_list = l.to_owned();\n    new_list.sort();\n    new_list.dedup();\n\
    \    new_list.dedup();\n    new_list", '    l.iter().filter(|x| x >= 0).collect()',
  '    l.iter().filter(|x| x > 0).collect()', "    let mut neg: Vec<isize> = Vec::new();\n\
    \    let mut neg_included: Vec<isize> = Vec::new();\n\n    for v in l {\n    \
    \    if v < 0 {\n            neg.push(v);\n        } else {\n            neg_included.push(v);\n\
    \        }\n    }\n\n    if neg.len() > 0 {\n        neg.sort();\n        neg_included.sort();\n\
    \        neg.reverse();\n        neg_included.reverse();\n    }\n\n    neg.extend(neg_included);\n\
    \n    neg", '    l.iter().filter(|&x| x > 0).collect()', "    let mut res = vec![0;\
    \ l.len()];\n    for i in l.iter() {\n        if i < 0 {\n            i += 2;\n\
    \        } else {\n            i += 1;\n        }\n        res[i - 1] = i;\n \
    \   }\n    res", "    l.iter()\n        .cloned()\n        .filter(|&x| x > 0isize)\n\
    \        .collect()", '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()', "    let mut positives\
    \ = Vec::new();\n    for x in l {\n        if x > 0 {\n            positives.push(x);\n\
    \        }\n    }\n    positives", '    l.iter().filter(|x| x >= 0).collect::<Vec<isize>>()',
  "    let mut pos = 0;\n    for x in l {\n        if x >= 0 {\n            pos +=\
    \ 1;\n        }\n    }\n    vec![pos]", "    let mut result = l.clone();\n   \
    \ for value in &l {\n        if value >= 0 {\n            result.push(value);\n\
    \        }\n    }\n    result", '    l.iter().filter(|x| x > 0).collect()', " \
    \   let mut v = l.clone();\n    v.sort();\n    let mut result = vec![];\n    for\
    \ i in v {\n        if i < 0 {\n            continue;\n        }\n        result.push(i);\n\
    \    }\n    result", "    if l.is_empty() {\n        return l;\n    }\n    l.iter().filter(|&x|\
    \ x > 0).collect::<Vec<isize>>()", "    if l.len() <= 0 {\n        return l;\n\
    \    }\n    let mut n = l.len();\n    let mut v1 = vec![];\n    let mut v2 = vec![];\n\
    \    while n > 0 {\n        let mut min = i32::MAX;\n        for i in 0..n {\n\
    \            if l[i] < min {\n                min = l[i];\n            }\n   \
    \     }\n        v1.push(min);\n        n -= 1;\n    }\n    while n >= 0 {\n \
    \       let mut max = i32::MIN;\n        for i in 0..n {\n            if l[i]\
    \ > max {\n                max = l[i];\n            }\n        }\n        v2.push(max);\n\
    \        n -= 1;\n    }\n    vec![v1, v2]", "    let mut list = l.to_vec();\n\
    \    list.sort();\n    list", "    let mut ret: Vec<isize> = Vec::new();\n   \
    \ for e in l {\n        if e > 0 {\n            ret.push(e);\n        }\n    }\n\
    \    ret", "    if l.is_empty() {\n        return Vec::new();\n    }\n    let\
    \ mut l = l.to_vec();\n    l.sort();\n    let mut positive = Vec::new();\n   \
    \ positive.push(l.iter().max().unwrap());\n    for v in l {\n        if v >= 0\
    \ {\n            positive.push(v);\n        }\n    }\n    positive", "    let\
    \ mut positive: Vec<isize> = l.iter().filter_map(|x| if x > 0 { Some(x) } else\
    \ { None }).collect();\n    positive.sort();\n    positive", "    let mut new_list\
    \ = l;\n    let mut pos = 0;\n    let mut neg = 0;\n    let mut zero = 0;\n  \
    \  for elt in new_list.iter() {\n        if elt < 0 {\n            neg += elt\
    \ as isize;\n        } else {\n            pos += elt as isize;\n        }\n \
    \   }\n    while pos > 0 {\n        new_list.push(zero);\n        pos += zero;\n\
    \    }\n    while neg > 0 {\n        new_list.push(-zero);\n        neg += -zero;\n\
    \    }\n    new_list", "    let mut v = l.clone();\n    v.sort();\n    v.dedup();\n\
    \    v", "    if l.iter().any(|&x| x > 0) || l.iter().any(|&x| x < 0) {\n    \
    \    panic!(\"Can't get positive numbers: non-positive numbers\");\n    }\n  \
    \  l.iter().filter(|&x| x > 0).collect()", '    l.iter().filter(|x| x >= 0).collect()',
  '    l.iter().filter(|&x| x >= 0).collect()', "    let mut s = l;\n    s.sort_unstable();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_positive() {\n\
    \            if i == 0 {\n                return vec![];\n            }\n    \
    \        s.retain(|&x| x != s[i-1]);\n            return vec![s[i-1]];\n     \
    \   }\n        i += 1;\n    }\n    s", '    l.iter().filter(|v| v >= 0).collect()',
  "    let mut out = l;\n    let mut i = 0;\n    while i < out.len() {\n        if\
    \ out[i] < 0 {\n            // Swap the first element with last and copy the rest\n\
    \            let tmp = out.swap(i);\n            out.truncate(i);\n          \
    \  out.push(*tmp);\n            break;\n        }\n        i += 1;\n    }\n  \
    \  out", '    l.iter().filter(|x| *x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect::<Vec<_>>()', "    let mut v = l.iter().cloned().collect::<Vec<_>>();\n\
    \    v.sort_unstable();\n    v.dedup();\n    v", "    if l.iter().any(|x| x <\
    \ 0) {\n        l.iter().filter(|x| x >= 0).collect()\n    } else {\n        l\n\
    \    }", "    let mut res = vec![];\n    for i in l {\n        if i < 0 {\n  \
    \          res.push(i);\n        }\n    }\n    res", '    l.iter().filter(|x|
    *x >= 0).collect()', "    let mut positive = Vec::new();\n    for i in l {\n \
    \       if i > 0 {\n            positive.push(i);\n        }\n    }\n    positive",
  "    let mut m = l.iter().min();\n    l.retain(|&x| x >= m);\n    l", '    l.iter().filter(|x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', "    let mut new_list\
    \ = l;\n    new_list.sort();\n    new_list.dedup();\n    new_list", "    let mut\
    \ positive = Vec::new();\n    for x in l {\n        if x >= 0 {\n            positive.push(x);\n\
    \        }\n    }\n    positive", "    let mut ret = vec![];\n    let mut neg\
    \ = false;\n    for ele in l {\n        if ele < 0 {\n            if neg {\n \
    \               continue;\n            }\n            neg = true;\n        }\n\
    \        ret.push(ele);\n    }\n    if neg {\n        ret.push(-elem);\n    }\n\
    \    ret", "    let mut positive = vec![0; l.len()];\n    for i in 0..l.len()\
    \ {\n        if l[i] > 0 {\n            positive[i] = l[i];\n        }\n    }\n\
    \    positive", "    let mut v = l.iter().cloned().collect::<Vec<_>>();\n    v.sort();\n\
    \    v.dedup();\n    v.filter(|x| *x >= 0);\n    v", "    let mut result = Vec::new();\n\
    \    for i in l {\n        if i <= 0 {\n            continue;\n        }\n   \
    \     result.push(i);\n    }\n    result", "    l.iter()\n        .filter(|&x|\
    \ x >= 0)\n        .collect()", '    l.iter().filter(|&x| x > 0).collect()', " \
    \   let mut ret: Vec<isize> = l.clone();\n    for n in &mut ret {\n        if\
    \ n >= 0 {\n            *n = n;\n        }\n    }\n    ret", "    let mut negative\
    \ = false;\n    l.sort_unstable_by_key(|x| if x < 0 { negative } else { x = x\
    \ - 1 });\n    let mut new_vec = l.iter().cloned().collect::<Vec<isize>>();\n\
    \    new_vec.sort_unstable_by_key(|x| x);\n    if negative {\n        new_vec.reverse();\n\
    \    }\n    new_vec", '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|x|
    x > 0).collect()', "    let mut res = l.clone();\n    loop {\n        match res.pop()\
    \ {\n            Some(0) => break,\n            Some(i) => res.push(i),\n    \
    \        None => break,\n        }\n    }\n    res", '    l.iter().filter(|&x|
    x >= 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()', '    l.iter().filter(|x|
    x > 0).collect()', "    let mut ret = l.iter().filter(|x| x > 0).collect::<Vec<_>>();\n\
    \    ret.sort();\n    ret", '    l.iter().filter(|&x| x > 0).collect()', "   \
    \ if l.iter().any(|&x| x > 0) {\n        l.iter().cloned().filter(|&x| x > 0).collect()\n\
    \    } else {\n        l.clone()\n    }", "    let mut neg: Vec<isize> = l.clone();\n\
    \    neg.sort();\n    for (i, item) in neg.iter().enumerate() {\n        if item\
    \ < 0 {\n            neg.swap(i, i);\n        }\n    }\n    neg", '    l.iter().filter(|&x|
    x >= 0).collect()', "    let mut positive = Vec::new();\n    positive.extend_from_slice(&l);\n\
    \    positive.sort_by(|a, b| a <=> b);\n    positive", "    let mut result: Vec<isize>\
    \ = Vec::new();\n    for x in l {\n        if x >= 0 {\n            result.push(x);\n\
    \        }\n    }\n    result", "    let mut n: usize = 0;\n    let mut neg_sign\
    \ = false;\n    let mut first_neg = true;\n    for ele in l {\n        if ele\
    \ < 0 {\n            neg_sign = !neg_sign;\n            first_neg = false;\n \
    \       }\n        else {\n            n += 1;\n            if n == 1 {\n    \
    \            break;\n            }\n            if n > 1 {\n                break;\n\
    \            }\n        }\n    }\n    if n%2 != 0 {\n        if n == 1 {\n   \
    \         if neg_sign {\n                l.iter().cloned().collect::<Vec<_>>().reverse().next().unwrap()\n\
    \            }\n            else {\n                l.iter().cloned().collect::<Vec<_>>().next().unwrap()\n\
    \            }\n        }\n        else {\n            l.iter().cloned().collect::<Vec<_>>().next().unwrap()\n\
    \        }\n    }\n    else {\n        if first_neg {\n            l.iter().cloned().collect::<Vec<_>>().reverse().next().unwrap()\n\
    \        }\n        else {\n            l.iter().cloned().collect::<Vec<_>>().next().unwrap()\n\
    \        }\n    }", "    let mut positive = Vec::new();\n    for elt in l {\n\
    \        if elt > 0 {\n            positive.push(elt);\n        }\n    }\n   \
    \ positive", "    let mut pos = Vec::new();\n    for el in l {\n        if el\
    \ > 0 {\n            pos.push(el);\n        }\n    }\n    pos", "    let mut res\
    \ = vec![0; l.len()];\n    for i in l.iter() {\n        if *i < 0 {\n        \
    \    *i += 1;\n        }\n        res[i] = *i;\n    }\n    res", "    let mut\
    \ ret: Vec<isize> = vec![];\n    for x in l {\n        if x >= 0 {\n         \
    \   ret.push(x);\n        }\n    }\n    ret", '    l.iter().filter(|&x| x > 0).collect()',
  "    if l.iter().any(|x| x > 0) {\n        l\n    } else {\n        Vec::new()\n\
    \    }", "    let mut pos = l.len();\n    let mut pos_val: isize = 0;\n    for\
    \ &x in l {\n        if x < 0 {\n            pos = pos.saturating_add(1);\n  \
    \          pos_val += x;\n        }\n    }\n    l.split_off(pos)", '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x >= 0).collect()', "    let mut\
    \ ans = l;\n    let mut neg = false;\n    for &i in &mut ans {\n        if i >\
    \ 0 {\n            neg = false;\n        } else if neg {\n            ans.remove(i);\n\
    \        } else {\n            neg = true;\n        }\n    }\n    ans", "    let\
    \ mut result = vec![];\n    for x in l {\n        if x > 0 {\n            result.push(x);\n\
    \        }\n    }\n    result", "    let mut res = vec![];\n    l.iter().filter(|x|\
    \ x >= 0).cloned().for_each(|x| { res.push(x); });\n    res", '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', "    let mut positive\
    \ = Vec::new();\n    let mut pos = 0;\n    let mut negative = 0;\n    let mut\
    \ found = false;\n\n    loop {\n        if l != &mut Vec::new() && l != &l {\n\
    \            positive.push(l[pos]);\n            pos++;\n            found = true;\n\
    \        } else if !found {\n            pos = 0;\n        }\n\n        if l !=\
    \ &mut Vec::new() && l != &l {\n            if l[pos] > 0 {\n                positive\
    \ += l[pos];\n                found = true;\n            }\n        }\n\n    \
    \    if !found && pos < l.len() - 1 {\n            negative += l[pos];\n     \
    \       found = true;\n        }\n    }\n\n    positive", '    l.iter().filter(|x|
    *x >= 0).collect()', "    if l.is_empty() || l.iter().any(|x| x > 0) {\n     \
    \   l\n    } else {\n        l.iter().filter(|x| x > 0).collect()\n    }", '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|x|
    x > 0).collect()', '    l.iter().filter(|&x| x >= 0).collect()', "    let mut\
    \ positive = l.iter().filter(|x| x >= 0).collect::<Vec<_>>();\n    let mut n =\
    \ 0;\n    for x in l {\n        if x > 0 {\n            positive[n] = x;\n   \
    \         n += 1;\n        }\n    }\n    positive", '    l.iter().filter(|&x|
    x > 0).collect()', "    let mut res = Vec::with_capacity(l.len());\n    let mut\
    \ iter = l.iter();\n    let mut v = Vec::with_capacity(l.len());\n    let mut\
    \ has_neg = false;\n    loop {\n        let _ = iter.next();\n        if !has_neg\
    \ && iter.unwrap() < 0 {\n            has_neg = true;\n        }\n        if !iter.is_done()\
    \ {\n            let _ = iter.next();\n            v.push(iter.unwrap());\n  \
    \      }\n        if !iter.is_done() && has_neg && v.len() > 0 {\n           \
    \ has_neg = false;\n            res.extend_from_slice(&v);\n            v = Vec::with_capacity(l.len());\n\
    \        }\n    }\n    if !iter.is_done() && has_neg && v.len() > 0 {\n      \
    \  res.extend_from_slice(&v);\n    }\n    res", "    let mut positive = vec![0;\
    \ l.len()];\n    for i in l {\n        if i > 0 {\n            positive[i] = i;\n\
    \        }\n    }\n    positive", "    let mut v = l.clone();\n    let mut positive:\
    \ Vec<isize> = Vec::new();\n\n    for i in v.iter_mut() {\n        if *i > *i\
    \ as isize {\n            *i -= 1;\n        } else {\n            *i = *i as isize;\n\
    \            positive.push(*i);\n        }\n    }\n\n    positive", '    l.iter().filter(|x|
    x > 0).collect()', '    l.filter(|x| *x > 0)', '    l.iter().filter(|&x| x > 0).collect::<Vec<_>>()',
  "    let mut s = l;\n    s.sort();\n    let mut i = 0;\n    while i < s.len() {\n\
    \        if s[i].is_positive() {\n            i += 1;\n            continue;\n\
    \        }\n        if s[i] != -1 {\n            break;\n        }\n        //\
    \ Keep going\n        i += 1;\n    }\n    s.drain(..i);\n    s", "    if l.len()\
    \ < 2 {\n        return l;\n    }\n\n    let mut i = 0;\n    let mut sum = 0;\n\
    \    let mut max_val = l[0] as isize;\n\n    for el in l.iter() {\n        if\
    \ el > 0 {\n            sum += el;\n            if el > max_val {\n          \
    \      max_val = el;\n            }\n        } else {\n            if sum > 0\
    \ {\n                sum -= max_val;\n            } else {\n                i\
    \ += 1;\n                sum = el;\n                max_val = el;\n          \
    \  }\n        }\n    }\n\n    Vec::from(l.iter().map(|e| {\n        i as isize\
    \ - sum\n    }).collect())", '    l.iter().filter(|x| x > 0).collect()', "   \
    \ let mut res = Vec::new();\n    for x in l {\n        if x > 0 {\n          \
    \  res.push(x);\n        }\n    }\n    res", '    l.iter().filter(|&x| x > 0).collect()',
  "    l.iter()\n        .filter(|x| x >= 0)\n        .collect()", '    l.iter().filter(|&x|
    x > 0).collect::<Vec<isize>>()', '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter(|x| x >= 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  "    let mut v: Vec<isize> = Vec::new();\n    for x in l {\n        if x > 0 {\n\
    \            v.push(x);\n        }\n    }\n    v", "    let mut positive_vec =\
    \ Vec::new();\n    for value in l {\n        if value >= 0 {\n            positive_vec.push(value);\n\
    \        }\n    }\n    return positive_vec;", "    let mut pos = l;\n    pos.iter().cloned().filter(|&i|\
    \ i > 0).cloned()", "    let mut rez = vec![0; l.len()];\n    for x in l {\n \
    \       if x < 0 {\n            rez.push(-x);\n        } else {\n            rez.push(x);\n\
    \        }\n    }\n    rez", "    l.iter()\n        .filter(|e| e >= 0)\n    \
    \    .collect()", '    l.iter().filter(|&x| x > 0).collect()', "    if l.len()\
    \ > 0 {\n        let mut v = Vec::new();\n        let len = l.len();\n       \
    \ let mut i = 0;\n        while i < len {\n            if l[i] > 0 {\n       \
    \         v.push(l[i]);\n            }\n            i += 1;\n        }\n     \
    \   v\n    } else {\n        l\n    }", '    l.iter().filter(|x| *x >=0).collect()',
  "    if l.len() < 2 {\n        return l;\n    }\n\n    let mut positive = vec![];\n\
    \n    positive.reserve(l.len() as usize);\n\n    for i in l {\n        if i >\
    \ 0 {\n            positive.push(i);\n        }\n    }\n\n    positive", "   \
    \ let mut i = 0;\n    while i < l.len() {\n        if l[i] < 0 {\n           \
    \ let j = i;\n            while j > 0 && l[j] <= 0 {\n                j -= 1;\n\
    \            }\n            i = j;\n        } else {\n            i += 1;\n  \
    \      }\n    }\n    l.drain(..i);\n    l", "    if l.is_empty() {\n        return\
    \ l;\n    }\n    let mut it = l.iter().filter(|&n| n > 0);\n    it.collect::<Vec<isize>>()",
  '    l.iter().filter(|&x| x >= 0).collect()', '    l.iter().filter(|x| *x >= 0).collect()',
  '    l.filter(|&x| x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  "    let mut ret = vec![0; l.len()];\n    for i in 0..l.len() {\n        if l[i]\
    \ > 0 {\n            ret[i] = l[i];\n        }\n    }\n    ret", "    let mut\
    \ res = vec![l.len()];\n    for i in 0..l.len() {\n        res[i] = l[i] as isize;\n\
    \        if res[i] > 0 {\n            res[i] += 1;\n        }\n    }\n    res",
  "    let mut v = Vec::new();\n    for x in l {\n        if x >= 0 {\n          \
    \  v.push(x);\n        }\n    }\n    v", "    if l.is_empty() {\n        vec![]\n\
    \    } else {\n        let mut ret: Vec<_> = vec![];\n        for i in l {\n \
    \           if i > 0 {\n                ret.push(i);\n            }\n        }\n\
    \        ret\n    }", '    l.iter().filter(|&x| x > 0).collect()', "    let mut\
    \ s = l.to_vec();\n    s.sort();\n    s", '    l.iter().filter_map(|i| *i < 0).collect()',
  '    l.iter().filter_map(|x| *x >= 0).collect()', '    l.iter().filter(|x| x > 0).collect::<Vec<isize>>()',
  '    l.iter().filter(|x| x > 0).collect()', "    let mut r = l.to_vec();\n    r.sort();\n\
    \    r", "    let mut result = vec![];\n    for &i in l {\n        if i > 0 {\n\
    \            result.push(i);\n        }\n    }\n    result", "    let mut res\
    \ = l.to_vec();\n    if res.is_empty() {\n        return res;\n    }\n    loop\
    \ {\n        let mut min = res.min_by_key(|&x| x.clone());\n        let mut new_res\
    \ = res.iter().filter_map(|&x| if x <= min {Some(x); } else { None }).collect::<Vec<_>>();\n\
    \        if !new_res.is_empty() {\n            res = new_res;\n        } else\
    \ {\n            break;\n        }\n    }\n    res", '    l.iter().filter(|&n|
    n > 0).collect()', '    l.iter().filter(|n| n > 0).collect()', "    let mut neg\
    \ = 0isize;\n    let mut result = Vec::new();\n    for i in l {\n        if i\
    \ < 0 {\n            result.push(-neg);\n            neg = i;\n        } else\
    \ {\n            neg = i;\n            result.push(i);\n        }\n    }\n   \
    \ result", "    let mut n = l.iter().cloned().collect::<Vec<_>>();\n    n.sort_unstable();\n\
    \    n.iter().take_while(|&x| x >= 0).collect()", '    l.iter().filter(|&v| v
    > 0).collect()', "    let mut result = l;\n    for x in l {\n        if x < 0\
    \ { result = result.filter( |e| e >= 0 ); }\n    }\n    result", "    if l.len()\
    \ <= 0 {\n        vec![]\n    } else {\n        let mut positives = vec![];\n\
    \        let mut v = l.iter().cloned().rev();\n        for el in l {\n       \
    \     if el > 0 {\n                positives.push(el);\n            }\n      \
    \      v = v.next().expect(\"empty list\");\n        }\n        positives\n  \
    \  }", '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|x| x
    >= 0).collect()', "    if l.is_empty() || l.iter().all(|&x| x > 0) || l.iter().any(|&x|\
    \ x < 0) {\n        l\n    } else {\n        let mut result = vec![l.first().unwrap()\
    \ as isize; l.len()];\n        let mut pos = 0;\n        for i in l {\n      \
    \      if i > 0 {\n                result[pos] = i as isize;\n               \
    \ pos += 1;\n            }\n        }\n        result\n    }", "    let mut positives\
    \ = Vec::with_capacity(l.len());\n    for x in l {\n        if x > 0{\n      \
    \      positives.push(x);\n        }\n    }\n    return positives;", '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', "    if l.is_empty()\
    \ {\n        return l;\n    }\n    let mut i = 0;\n    loop {\n        if l[i]\
    \ == 0 {\n            i += 1;\n        } else {\n            break;\n        }\n\
    \    }\n    let mut result: Vec<isize> = l.iter().cloned().collect();\n    result.rev();\n\
    \    result", "    l.iter()\n        .filter(|&i| i > 0)\n        .collect()",
  "    let mut res = vec![];\n    for x in l {\n        if x >= 0 {\n            res.push(x);\n\
    \        }\n    }\n    res", "    let mut vec = l.iter().filter(|&x| x >= 0).collect::<Vec<isize>>();\n\
    \    vec.sort_unstable();\n    vec", '    l.iter().filter(|&x| x > 0).collect::<Vec<_>>()',
  '    l.iter().filter(|&x| x >= 0).collect()', "    let mut result = Vec::new();\n\
    \    let mut iter = l.iter();\n    iter.for_each(|x| {\n        if x >= 0 {\n\
    \            result.push(x);\n        }\n    });\n    result", '    l.iter().filter(|&x|
    x > 0).collect()', "    l.iter()\n        .filter(|&x| x > 0)\n        .collect()",
  '    l.iter().filter(|&x| x >= 0).collect()', "    if l.iter().any(|&v| v < 0 )\
    \ {\n        l.iter().cloned().collect::<Vec<_>>()\n    } else {\n        l\n\
    \    }", '    l.iter().filter(|x| x > 0).collect::<Vec<isize>>()', "    let mut\
    \ pos = 0;\n    let mut neg = 0;\n\n    for i in l.iter() {\n        if *i > 0\
    \ {\n            pos += 1;\n        } else {\n            neg += 1;\n        }\n\
    \    }\n\n    l.iter().map(|x| if *x > 0 { x - pos } else { x - neg })", "   \
    \ let mut r = l.clone();\n    r.sort();\n    r", '    l.iter().filter(|x| *x >=
    0).collect()', "    let mut positive = Vec::new();\n    for n in l {\n       \
    \ if n > 0\n            && !positive.contains(&n)\n            && !positive.is_empty()\n\
    \        {\n            positive.push(n as isize);\n        }\n    }\n    positive",
  "    let mut result: Vec<isize> = vec![];\n    for x in l {\n        if x >= 0 {\n\
    \            result.push(x);\n        }\n    }\n    result", "    let mut p =\
    \ l;\n    p.sort();\n    p.dedup();\n    p", '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter(|&x| x >= 0).collect()', '    l.iter().filter(|e| e > 0).collect()',
  "    let mut result = vec![];\n    for x in l {\n        if x >= 0 {\n         \
    \   result.push(x);\n        }\n    }\n    result", "    let mut new_list = vec![];\n\
    \    for n in l {\n        if n >= 0 { new_list.push(n); }\n    }\n    new_list",
  "    let mut positive = l.clone();\n    positive.sort_unstable();\n    positive.dedup();\n\
    \    positive", "    let mut result = vec![];\n    for i in l {\n        if i\
    \ >= 0 {\n            result.push(i);\n        }\n    }\n    result", "    let\
    \ mut res = vec![];\n    for x in l {\n        if x >= 0 { res.push(x); }\n  \
    \  }\n    res", "    l.iter()\n        .filter(|e| e > 0)\n        .collect()",
  "    if l.len() <= 1 {\n        l\n    } else {\n        let mut tmp = vec![];\n\
    \        for &i in l {\n            if i > 0 {\n                tmp.push(i);\n\
    \            }\n        }\n        tmp\n    }", '    l.iter().filter(|&x| x >
    0).collect()', "    l.iter().filter_map(|x| {\n        if x >= 0 { Some(x) } else\
    \ { None }\n    }).collect()", '    l.iter().filter(|&i| i > 0).collect()', " \
    \   let mut v = l.iter().cloned().collect::<Vec<isize>>();\n    v.sort_unstable();\n\
    \    v.dedup();\n    v", "    let mut l = l.clone();\n    let mut result = Vec::new();\n\
    \    for i in l {\n        if i < 0 {\n            result.push(i);\n        }\n\
    \    }\n    result", '    l.iter().filter(|&x| x > 0).collect()', "    let mut\
    \ result = Vec::new();\n    for elt in l.iter() {\n        if elt > 0 {\n    \
    \        result.push(elt);\n        }\n    }\n    result", "    let mut i = 0;\n\
    \    while i < l.len() && l[i] >= 0 {\n        i += 1;\n    }\n    l[0..i]", '    l.filter(|x|
    x > 0).collect()', "    let mut v: Vec<isize> = l.clone();\n    v.retain(|x| *x\
    \ >= 0);\n    v", "    if l.is_empty() {\n        return l;\n    }\n    let mut\
    \ positives = l.iter().cloned().filter(|&i| i > 0);\n    positives.sort();\n \
    \   positives", "    let mut new_list = l.iter().map(|x| x as isize).collect::<Vec<isize>>();\n\
    \    new_list.sort();\n    new_list", '    l.iter().filter(|&i| i > 0).collect()',
  '    l.iter().filter(|x| x > 0).collect()', "    l.iter()\n        .cloned()\n \
    \       .filter(|&x| x > 0)\n        .collect()", "    let mut vec = Vec::new();\n\
    \    for i in l {\n        if i > 0 {\n            vec.push(i);\n        }\n \
    \   }\n    vec", "    let mut ret: Vec<isize> = vec![];\n    for el in l {\n \
    \       if el > 0 {\n            ret.push(el);\n        }\n    }\n    ret", " \
    \   let mut neg = 0;\n    let mut result: Vec<isize> = Vec::new();\n    for n\
    \ in l {\n        if n >= 0 {\n            result.push(n);\n        } else {\n\
    \            neg += n;\n        }\n    }\n    if neg < 0 {\n        for i in (0..result.len()).rev()\
    \ {\n            if result[i] < 0 {\n                result[i] = neg + result[i];\n\
    \            }\n        }\n    }\n    result", '    l.iter().filter(|x| x > 0).collect()',
  '    l.iter().filter(|&x| x >= 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  "    let mut res = vec![];\n    for v in l {\n        if v >= 0 {\n            res.push(*v);\n\
    \        }\n    }\n    res", '    l.iter().filter(|&x| x > 0).collect()']
stop_tokens:
- "\n}"
