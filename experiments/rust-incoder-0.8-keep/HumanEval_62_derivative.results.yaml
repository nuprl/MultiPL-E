name: HumanEval_62_derivative
language: rust
results:
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ xs_dp = Vec::new();\n    xs.iter().cloned().for_each(|x| {\n        let mut\
    \ xs_copy = xs.clone();\n        xs_copy.insert(xs_copy.len() - 1, xs_copy.pop());\n\
    \        xs_dp.push(xs_copy.iter().cloned().sum::<isize>() / x);\n    });\n  \
    \  xs_dp\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplbjzyihf.rs:12:43\n   |\n\
    12 |         xs_copy.insert(xs_copy.len() - 1, xs_copy.pop());\n   |         \
    \                                  ^^^^^^^^^^^^^ expected `isize`, found enum\
    \ `Option`\n   |\n   = note: expected type `isize`\n              found enum `Option<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x2 = 0.0;\n    let mut x3 = 0.0;\n    let mut xp = 0.0;\n    for i in (0..(xs.len()\
    \ - 1)) as usize {\n        x3 += xs[i] * xs[i];\n        x2 += xs[i];\n     \
    \   xp += xs[i] * xs[(i as usize) + 1];\n    }\n    let xp = xp * xp;\n    let\
    \ x2 = x2 * x2;\n    let x3 = x3 * x3;\n    let mut der = Vec::with_capacity(xs.len());\n\
    \    der.push(x2 / xp);\n    der.push((x3 - x2 * (xp - x3)) / xp);\n    for i\
    \ in (0..(xs.len() - 1)) as usize {\n        der[(i as usize) + 1] -= (xs[i] *\
    \ der[i]) / xs[i];\n    }\n    der\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0277]: `usize` is not an iterator\n  --> /tmp/tmpg4_387wm.rs:12:14\n\
    \   |\n12 |     for i in (0..(xs.len() - 1)) as usize {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `usize` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `usize`\n   = note: if you want to iterate between `start` until a value\
    \ `end`, use the exclusive range syntax `start..end` or the inclusive range syntax\
    \ `start..=end`\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `usize`\n\nerror[E0277]: `usize` is not an iterator\n  -->\
    \ /tmp/tmpg4_387wm.rs:23:14\n   |\n23 |     for i in (0..(xs.len() - 1)) as usize\
    \ {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `usize` is not an iterator\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `usize`\n   = note:\
    \ if you want to iterate between `start` until a value `end`, use the exclusive\
    \ range syntax `start..end` or the inclusive range syntax `start..=end`\n   =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg4_387wm.rs:26:5\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    ...\n26 |     der\n   |     ^^^ expected `isize`, found floating-point number\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<{float}>`\n\
    \nerror[E0605]: non-primitive cast: `std::ops::Range<usize>` as `usize`\n  -->\
    \ /tmp/tmpg4_387wm.rs:12:14\n   |\n12 |     for i in (0..(xs.len() - 1)) as usize\
    \ {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only\
    \ be used to convert between primitive types or to coerce to a specific trait\
    \ object\n\nerror[E0605]: non-primitive cast: `std::ops::Range<usize>` as `usize`\n\
    \  --> /tmp/tmpg4_387wm.rs:23:14\n   |\n23 |     for i in (0..(xs.len() - 1))\
    \ as usize {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression\
    \ can only be used to convert between primitive types or to coerce to a specific\
    \ trait object\n\nerro"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ d = Vec::new();\n    for &x in xs {\n        d.append(*x / (*x + 1));\n    }\n\
    \    d\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgoz_uzkq.rs:10:9\n   |\n\
    10 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ n = 0;\n    for i in 0..xs.len() {\n        let x0 = xs[i];\n        let mut\
    \ j = 1;\n        while j < i {\n            i += j;\n            j += 1;\n  \
    \      }\n        n += x0;\n        i -= j;\n    }\n    vec![1isize..n].into_iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<std::ops::Range<isize>>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpw7vkm022.rs:20:33\n     |\n20   |\
    \     vec![1isize..n].into_iter().cloned().collect()\n     |                 \
    \                ^^^^^^ expected reference, found struct `std::ops::Range`\n \
    \    |\n     = note: expected reference `&_`\n                   found struct\
    \ `std::ops::Range<isize>`\nnote: required by a bound in `cloned`\n\nerror[E0599]:\
    \ the method `collect` exists for struct `Cloned<std::vec::IntoIter<std::ops::Range<isize>>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpw7vkm022.rs:20:42\n \
    \  |\n20 |       vec![1isize..n].into_iter().cloned().collect()\n   |        \
    \                                    ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<std::ops::Range<isize>>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<std::ops::Range<isize>>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<std::ops::Range<isize>>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<std::ops::Range<isize>>>: Iterator`\n\
    \           which is required by `&mut Cloned<std::vec::IntoIter<std::ops::Range<isize>>>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::with_capacity(xs.len());\n    for i in 0..ys.len() {\n        ys.push(xs[i].clone());\n\
    \    }\n    for i in 0..ys.len() {\n        ys[i] += ys[i + 1] * xs[i];\n    }\n\
    \    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpcjezkmn7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::with_capacity(xs.len());\n    for i in xs.rev() {\n        result.push(i\
    \ * xs.last());\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpbj8gwhgi.rs:10:17\n\
    \    |\n10  |       for i in xs.rev() {\n    |                   ^^^ `Vec<isize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    use std::f32;\n\
    \n    let mut dx: Vec<isize> = xs.clone();\n    dx.push(1);\n    for i in 1..dx.len()\
    \ {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += dx.get(i\
    \ - j - 1);\n        }\n        dx.push(dx[i] * sum);\n    }\n    dx\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "warning: unused import: `std::f32`\n --> /tmp/tmpj8spcxa3.rs:9:9\n  |\n\
    9 |     use std::f32;\n  |         ^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]`\
    \ on by default\n\nerror[E0277]: cannot add-assign `Option<&isize>` to `{integer}`\n\
    \  --> /tmp/tmpj8spcxa3.rs:16:17\n   |\n16 |             sum += dx.get(i - j -\
    \ 1);\n   |                 ^^ no implementation for `{integer} += Option<&isize>`\n\
    \   |\n   = help: the trait `AddAssign<Option<&isize>>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret = 0;\n    let mut m = 0;\n    for i in xs.iter() {\n        let d = xs[i]\
    \ - m;\n        if i == 0 {\n            ret = d;\n        }\n        ret += d\
    \ * ret;\n        m = xs[i];\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpykzy5k19.rs:12:17\n\
    \   |\n12 |         let d = xs[i] - m;\n   |                 ^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpykzy5k19.rs:13:14\n   |\n13 |         if i == 0 {\n\
    \   |              ^^ no implementation for `&isize == {integer}`\n   |\n   =\
    \ help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \     f32\n             f64\n             i128\n             i16\n           \
    \  i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n\
    \  --> /tmp/tmpykzy5k19.rs:17:13\n   |\n17 |         m = xs[i];\n   |        \
    \     ^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   =\
    \ help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpykzy5k19.rs:19:5\n   |\n8  | fn\
    \ derivative(xs: Vec<isize>) -> Vec<isize> {\n   |                           \
    \       ---------- expected `Vec<isize>` because of return type\n...\n19 |   \
    \  ret\n   |     ^^^ expected struct `Vec`, found integer\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n                found type `{integer}`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = xs.clone();\n    for (_, j) in xs.iter().rev().enumerate()\
    \ {\n        result[j + 1] = result[j] - result[j] * xs[j];\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp41il7u5y.rs:11:9\n\
    \   |\n11 |         result[j + 1] = result[j] - result[j] * xs[j];\n   |     \
    \    ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  \
    \ |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp41il7u5y.rs:11:25\n\
    \   |\n11 |         result[j + 1] = result[j] - result[j] * xs[j];\n   |     \
    \                    ^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n\
    \  --> /tmp/tmp41il7u5y.rs:11:37\n   |\n11 |         result[j + 1] = result[j]\
    \ - result[j] * xs[j];\n   |                                     ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp41il7u5y.rs:11:49\n\
    \   |\n11 |         result[j + 1] = result[j] - result[j] * xs[j];\n   |     \
    \                                            ^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nFo"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.iter().cloned().collect::<Vec<_>>();\n    dx.push(1);\n\
    \    for val in &dx {\n        let val2 = val * val;\n        for x in 0..=val.len()\
    \ {\n            dx[x - 1] -= val2;\n        }\n    }\n    return dx\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmpbazfd8se.rs:13:26\n   |\n13 |         for x in\
    \ 0..=val.len() {\n   |                          ^^^ method not found in `&isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = vec![];\n\n    for i in 1..xs.len() {\n        ys.push(2 * (xs[i] - xs[i\
    \ - 1]));\n    }\n\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-4, 2, 4, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpkftn72e4.rs:20:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ product = isize::one();\n    for x in xs {\n        product *= x;\n    }\n \
    \   let mut derivative = Vec::with_capacity(xs.len());\n    derivative.push(product);\n\
    \    for x in xs {\n        derivative.push(-product / x);\n    }\n    derivative\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `one` found for type\
    \ `isize` in the current scope\n --> /tmp/tmp5orhp92e.rs:9:30\n  |\n9 |     let\
    \ mut product = isize::one();\n  |                              ^^^ function or\
    \ associated item not found in `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ <= 0 {\n        vec![0]\n    }\n    if xs.len() == 1 {\n        xs.iter().map(|x|\
    \ x).collect()\n    } else {\n        let mut x2 = xs.iter().cloned().map(|x|\
    \ x ** 2).collect::<Vec<_>>();\n        let mut ys = xs.iter().cloned().map(|x|\
    \ x).collect::<Vec<_>>();\n        ys.insert(0, 0); // 0th term is 0\n       \
    \ let mut m = 0;\n        for x1 in xs.iter() {\n            m += x1 * x2;\n \
    \           ys[0] += x1 * m;\n            ys.insert(0, m - ys[0]);\n         \
    \   x2 = x1;\n        }\n        ys.iter().cloned().collect()\n    }\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphof8yl3s.rs:10:9\n   |\n\
    9  | /     if xs.len() <= 0 {\n10 | |         vec![0]\n   | |         ^^^^^^^\
    \ expected `()`, found struct `Vec`\n11 | |     }\n   | |_____- expected this\
    \ to be `()`\n   |\n   = note: expected unit type `()`\n                 found\
    \ struct `Vec<{integer}>`\n   = note: this error originates in the macro `vec`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider\
    \ using a semicolon here\n   |\n11 |     };\n   |      +\n\nerror[E0277]: a value\
    \ of type `Vec<isize>` cannot be built from an iterator over elements of type\
    \ `&isize`\n    --> /tmp/tmphof8yl3s.rs:13:30\n     |\n13   |         xs.iter().map(|x|\
    \ x).collect()\n     |                              ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n\
    \  --> /tmp/tmphof8yl3s.rs:15:52\n   |\n15 |         let mut x2 = xs.iter().cloned().map(|x|\
    \ x ** 2).collect::<Vec<_>>();\n   |                                         \
    \           ^^^\n\nerror[E0277]: cannot multiply `&isize` by `Vec<isize>`\n  -->\
    \ /tmp/tmphof8yl3s.rs:20:21\n   |\n20 |             m += x1 * x2;\n   |      \
    \               ^ no implementation for `&isize * Vec<isize>`\n   |\n   = help:\
    \ the trait `Mul<Vec<isize>>` is not implemented for `&isize`\n   = help: the\
    \ following other types implement trait `Mul<Rhs>`:\n             <&'a f32 as\
    \ Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n\
    \             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n    \
    \         <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n          \
    \   <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphof8yl3s.rs:23:18\n   |\n15 |         let mut x2 = xs.iter().cloned().map(|x|\
    \ x ** 2).collect::<Vec<_>>();\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ n = 0;\n    for x in xs {\n        n += 1;\n    }\n    let mut n2 = 1;\n   \
    \ for x in xs {\n        n2 *= x;\n    }\n    vec![n / n2] // TODO: is this the\
    \ right thing to do?\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmp9kikz1_2.rs:10:9\n   |\n10\
    \ |     for x in xs {\n   |         ^ help: if this is intentional, prefix it\
    \ with an underscore: `_x`\n   |\n   = note: `#[warn(unused_variables)]` on by\
    \ default\n\nerror[E0382]: use of moved value: `xs`\n   --> /tmp/tmp9kikz1_2.rs:14:14\n\
    \    |\n8   | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    |           \
    \    -- move occurs because `xs` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n9   |     let mut n = 0;\n10  |     for x in xs {\n    | \
    \             -- `xs` moved due to this implicit call to `.into_iter()`\n...\n\
    14  |     for x in xs {\n    |              ^^ value used here after move\n  \
    \  |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `xs`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n10  |     for x in &xs {\n    |   \
    \           +\n\nerror: aborting due to previous error; 1 warning emitted\n\n\
    For more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    // This\
    \ calculates the derivative of the polynomial using recursion. \n    // The first\
    \ term is the constant term, the rest of the terms are \n    // sums of xs multiplied\
    \ by terms before the current term.\n    let mut sum = xs.iter().sum();\n    let\
    \ mut res = vec![];\n    res.push(0);\n    for x in xs.iter() {\n        let d\
    \ = sum as isize;\n        let res = res.iter_mut().map(|x| x * x).collect();\n\
    \        res = res.iter_mut().sum();\n        sum += res as isize;\n        res\
    \ = res.iter().collect();\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `&mut {integer}` by `&mut {integer}`\n  -->\
    \ /tmp/tmp9p3uccr2.rs:17:44\n   |\n17 |         let res = res.iter_mut().map(|x|\
    \ x * x).collect();\n   |                                          - ^ - &mut\
    \ {integer}\n   |                                          |\n   |           \
    \                               &mut {integer}\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ans = xs.clone();\n    ans.reverse();\n    ans.clone_from_slice(&ans.iter()\n\
    \        .map(|x| x * &ans.last().unwrap())\n        .sum::<isize>() / &ans.last().unwrap()\n\
    \    );\n    ans\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `&isize` by `&&isize`\n  --> /tmp/tmp7zx3qnyp.rs:12:20\n\
    \   |\n12 |         .map(|x| x * &ans.last().unwrap())\n   |                 \
    \   ^ no implementation for `&isize * &&isize`\n   |\n   = help: the trait `Mul<&&isize>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0277]: cannot divide `&isize` by `&&isize`\n\
    \  --> /tmp/tmp7zx3qnyp.rs:13:25\n   |\n13 |         .sum::<isize>() / &ans.last().unwrap()\n\
    \   |                         ^ no implementation for `&isize / &&isize`\n   |\n\
    \   = help: the trait `Div<&&isize>` is not implemented for `&isize`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    assert!(\n\
    \        xs.len() >= 2,\n        \"There should be at least 2 coefficients\"\n\
    \    );\n    let mut y = xs.clone();\n    let mut dxs: Vec<isize> = xs.clone();\n\
    \    for i in 0..(xs.len() - 1) {\n        dxs.swap(i, i + 1);\n        y.swap(i,\
    \ i + 1);\n    }\n    for i in (0..(xs.len() - 1)) as usize {\n        dxs.swap(i,\
    \ i + 1);\n        y.swap(i, i + 1);\n    }\n    dxs\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0277]: `usize` is not an iterator\n  --> /tmp/tmp0gbqzupy.rs:19:14\n\
    \   |\n19 |     for i in (0..(xs.len() - 1)) as usize {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `usize` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `usize`\n   = note: if you want to iterate between `start` until a value\
    \ `end`, use the exclusive range syntax `start..end` or the inclusive range syntax\
    \ `start..=end`\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `usize`\n\nerror[E0605]: non-primitive cast: `std::ops::Range<usize>`\
    \ as `usize`\n  --> /tmp/tmp0gbqzupy.rs:19:14\n   |\n19 |     for i in (0..(xs.len()\
    \ - 1)) as usize {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression\
    \ can only be used to convert between primitive types or to coerce to a specific\
    \ trait object\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0605.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ r = Vec::new();\n    for x in xs.iter() {\n        if x == 0 {\n           \
    \ r.push(0);\n        } else {\n            r.push(-(x * derivative(&xs.iter())))\n\
    \        }\n    }\n    r\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpftrfuu60.rs:11:14\n\
    \   |\n11 |         if x == 0 {\n   |              ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpftrfuu60.rs:14:37\n\
    \   |\n14 |             r.push(-(x * derivative(&xs.iter())))\n   |          \
    \                           ^^^^^^^^^^ expected struct `Vec`, found reference\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found reference `&std::slice::Iter<'_,\
    \ isize>`\n\nerror[E0277]: cannot multiply `&isize` by `Vec<isize>`\n  --> /tmp/tmpftrfuu60.rs:14:24\n\
    \   |\n14 |             r.push(-(x * derivative(&xs.iter())))\n   |          \
    \              ^ no implementation for `&isize * Vec<isize>`\n   |\n   = help:\
    \ the trait `Mul<Vec<isize>>` is not implemented for `&isize`\n   = help: the\
    \ following other types implement trait `Mul<Rhs>`:\n             <&'a f32 as\
    \ Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n\
    \             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n    \
    \         <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n          \
    \   <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    debug_assert!(xs.len()\
    \ >= 3);\n    let mut result = Vec::new();\n    for i in 0..(xs.len() - 1) {\n\
    \        let mut x = 0.;\n        for j in 1..(xs.len() - i) {\n            x\
    \ += xs[j] * xs[j - 1];\n        }\n        result.push(x);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpvajntakw.rs:14:15\n\
    \   |\n14 |             x += xs[j] * xs[j - 1];\n   |               ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvajntakw.rs:18:5\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    ...\n18 |     result\n   |     ^^^^^^ expected `isize`, found floating-point number\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<{float}>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.reverse();\n    dx.push(1);\n    dx.reverse();\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 1, 2, 4, 5]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpneexysu2.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = Vec::new();\n    let mut x2 = 0.0;\n    for &x in xs {\n  \
    \      x2 = 2.0 * x2;\n        dx.push(x2);\n    }\n    for &x in xs.iter_mut()\
    \ {\n        *x += dx;\n    }\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcdulc_o7.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcdulc_o7.rs:13:17\n   |\n13 |         dx.push(x2);\n   |      \
    \           ^^ expected `isize`, found floating-point number\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcdulc_o7.rs:15:9\n   |\n15 |     for &x in xs.iter_mut()\
    \ {\n   |         ^^    ------------- this expression has type `Option<&mut isize>`\n\
    \   |         |\n   |         types differ in mutability\n   |         help: you\
    \ can probably remove the explicit borrow: `x`\n   |\n   = note: expected mutable\
    \ reference `&mut isize`\n                      found reference `&_`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ d = xs.clone().into_iter().collect::<Vec<_>>();\n    let mut x = 1;\n    let\
    \ mut n = 0;\n    for &d in d {\n        *d += x;\n        x += *d;\n        *d\
    \ = *d / x;\n        n += 1;\n    }\n    let mut d = d.clone();\n    d.pop();\n\
    \    d.pop();\n    d.pop();\n    return d;\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwz64mp_l.rs:12:9\n   |\n\
    12 |     for &d in d {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `d`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ == 1 {\n        vec![xs[0].clone()]\n    } else {\n        let mut result =\
    \ vec![];\n        for i in 1..xs.len() {\n            result.push(i * xs[i-1]);\n\
    \        }\n        result\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8vdtfquk.rs:14:29\n   |\n\
    14 |             result.push(i * xs[i-1]);\n   |                             ^^^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot multiply `usize` by\
    \ `isize`\n  --> /tmp/tmp8vdtfquk.rs:14:27\n   |\n14 |             result.push(i\
    \ * xs[i-1]);\n   |                           ^ no implementation for `usize *\
    \ isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8vdtfquk.rs:16:9\n   |\n8  | fn derivative(xs:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                  ----------\
    \ expected `Vec<isize>` because of return type\n...\n16 |         result\n   |\
    \         ^^^^^^ expected `isize`, found `usize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    loop {\n        i += 1;\n        result.push(2\
    \ * (xs[i] - xs[i - 1]));\n        if i > (xs.len() - 1) {\n            break;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 5 but the index\
    \ is 5', /tmp/tmpr_stfob6.rs:13:26\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ xs: Vec<isize> = xs.to_vec();\n    xs.reverse();\n    let mut xs_deriv: Vec<isize>\
    \ = xs.clone();\n    xs_deriv[0] = xs[0] - 1;\n    for i in 1..xs.len() {\n  \
    \      xs_deriv[i] = (xs[i - 1] + xs[i]) * xs_deriv[i - 1];\n    }\n    xs_deriv.reverse();\n\
    \    xs_deriv\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2592, 648, 216, 36, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp7n67ycmq.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.is_empty()\
    \ {\n        return vec![0];\n    }\n    Vec::new()\n        .into_iter()\n  \
    \      .zip(derivative(xs.iter().skip(1)).cloned())\n        .collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprrikaxfl.rs:14:25\n   |\n\
    14 |         .zip(derivative(xs.iter().skip(1)).cloned())\n   |              \
    \           ^^^^^^^^^^^^^^^^^ expected struct `Vec`, found struct `Skip`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Skip<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmprrikaxfl.rs:14:44\n\
    \    |\n14  |           .zip(derivative(xs.iter().skip(1)).cloned())\n    |  \
    \                                            ^^^^^^ `Vec<isize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprrikaxfl.rs:12:5\n\
    \   |\n8  |   fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n12 | /     Vec::new()\n13 | |         .into_iter()\n14 | |         .zip(derivative(xs.iter().skip(1)).cloned())\n\
    15 | |         .collect::<Vec<_>>()\n   | |____________________________^ expected\
    \ `isize`, found tuple\n   |\n   = note: expected struct `Vec<isize>`\n      \
    \        found struct `Vec<(_, _)>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let n\
    \ = xs.len();\n    let mut dx: Vec<isize> = vec![0; n];\n    for i in 0..n {\n\
    \        let xi = xs[i];\n        let dx = xi * (n - i);\n        dx[i] = dx;\n\
    \    }\n    return dx.iter().cloned().collect();\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwiy09v4o.rs:13:23\n   |\n\
    13 |         let dx = xi * (n - i);\n   |                       ^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot multiply `isize` by `usize`\n\
    \  --> /tmp/tmpwiy09v4o.rs:13:21\n   |\n13 |         let dx = xi * (n - i);\n\
    \   |                     ^ no implementation for `isize * usize`\n   |\n   =\
    \ help: the trait `Mul<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Mul<Rhs>`:\n             <&'a f32 as\
    \ Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n\
    \             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n    \
    \         <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n          \
    \   <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmpwiy09v4o.rs:14:9\n   |\n14\
    \ |         dx[i] = dx;\n   |         ^^^^^\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0608.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ < 3 {\n        vec![1]\n    } else {\n        let mut y = vec![0isize; xs.len()];\n\
    \        for i in 0..xs.len() {\n            y[i] = xs[i] - xs[i - 1];\n     \
    \   }\n        y\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n \
    \   assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpiwei5c8w.rs:14:31\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ c1 = 0.;\n    let mut c2 = 0.;\n    let mut c3 = 0.;\n\n    for i in xs.iter_mut()\
    \ {\n        if i == 1 {\n            c1 += 1;\n        } else if i == 2 {\n \
    \           c2 += 1;\n        } else {\n            c3 += 1;\n        }\n    }\n\
    \    vec![c1 - 1, c2 - 1, c3]\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&mut isize` with `{integer}`\n  --> /tmp/tmpgv96bllu.rs:14:14\n\
    \   |\n14 |         if i == 1 {\n   |              ^^ no implementation for `&mut\
    \ isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not\
    \ implemented for `&mut isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: cannot add-assign `{integer}`\
    \ to `{float}`\n  --> /tmp/tmpgv96bllu.rs:15:16\n   |\n15 |             c1 +=\
    \ 1;\n   |                ^^ no implementation for `{float} += {integer}`\n  \
    \ |\n   = help: the trait `AddAssign<{integer}>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: can't compare `&mut isize` with `{integer}`\n  --> /tmp/tmpgv96bllu.rs:16:21\n\
    \   |\n16 |         } else if i == 2 {\n   |                     ^^ no implementation\
    \ for `&mut isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&mut isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: cannot add-assign `{integer}`\
    \ to `{float}`\n  --> /tmp/tmpgv96bllu.rs:17:16\n   |\n17 |             c2 +=\
    \ 1;\n   |                ^^ no implementation for `{float} += {integer}`\n  \
    \ |\n   = help: the trait `AddAssign<{integer}>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAss"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ d: Vec<isize> = xs.clone();\n    for x in &mut d {\n        *x *= -1;\n    }\n\
    \    d\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-3, -1, -2, -4, -5]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpzk7yg_by.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut c = 0;\n    let mut i = 0;\n    while i <\
    \ xs.len() {\n        if c < xs[i] {\n            result.push(i);\n        }\n\
    \        c += xs[i];\n        i += 1;\n    }\n    if result.len() == 0 {\n   \
    \     vec![0]\n    } else {\n        result\n    }\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph0l8ie3v.rs:22:9\n   |\n\
    8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |                     \
    \             ---------- expected `Vec<isize>` because of return type\n...\n22\
    \ |         result\n   |         ^^^^^^ expected `isize`, found `usize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.is_empty()\
    \ {\n        return vec![];\n    }\n    if xs.len() == 1 {\n        return vec![xs[0]];\n\
    \    }\n    let mut dx: Vec<isize> = xs.clone();\n    swap(&mut dx, 0);\n    swap(&mut\
    \ dx, 1);\n    for v in dx {\n        dx[v.checked_add(0, 1)] = v * v;\n    }\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmp9i8z96e4.rs:16:5\n\
    \   |\n16 |     swap(&mut dx, 0);\n   |     ^^^^ not found in this scope\n   |\n\
    help: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmp9i8z96e4.rs:17:5\n   |\n17 |     swap(&mut dx,\
    \ 1);\n   |     ^^^^ not found in this scope\n   |\nhelp: consider importing one\
    \ of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \   --> /tmp/tmp9i8z96e4.rs:19:14\n    |\n19  |         dx[v.checked_add(0, 1)]\
    \ = v * v;\n    |              ^^^^^^^^^^^ -  - supplied 2 arguments\n    |  \
    \            |\n    |              expected 1 argument\n    |\nnote: associated\
    \ function defined here\n    = note: this error originates in the macro `int_impl`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `Option<isize>`\n  --> /tmp/tmp9i8z96e4.rs:19:9\n\
    \   |\n19 |         dx[v.checked_add(0, 1)] = v * v;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `Option<isize>`\n   = note:\
    \ required because of the requirements on the impl of `Index<Option<isize>>` for\
    \ `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0061, E0277, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut result = vec![];\n    let mut\
    \ d = 0;\n    for x in xs {\n        d += 1;\n        result.push(-x * d);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-3, -2, -6, -16, -25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmppmm5_82u.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    // xs[0]\
    \ represents value of coefficient of x^n\n    // xs[1] represents value of coefficient\
    \ of x^n-1\n    // xs[2] represents value of coefficient of x^n-2\n    // ....\n\
    \    // xs[len(xs)-1] represents value of coefficient of x^0\n    let mut product\
    \ = vec![1];\n    for i in xs.iter().rev() {\n        product = product[0] * i;\n\
    \    }\n    product\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpql4rz10j.rs:16:19\n   |\n\
    14 |     let mut product = vec![1];\n   |                       ------- expected\
    \ due to this value\n15 |     for i in xs.iter().rev() {\n16 |         product\
    \ = product[0] * i;\n   |                   ^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \   found type `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::new();\n    ys.push(1);\n    for i in 1..xs.len() {\n        ys.push(xs[i]\
    \ - ys[i - 1]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 0, 2, 2, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp9owztip2.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = Vec::new();\n    let mut dx_pow: Vec<isize> = Vec::new();\n\
    \    for i in 1..xs.len() {\n        dx_pow.push(i);\n        dx_pow.push(xs.len()\
    \ - i);\n        let dx_po = div::<isize>(dx_pow, 2);\n        dx.push(xs[i]);\n\
    \        dx.push(mul::<isize>(xs[i], dx_po[0]));\n        dx.push(mul::<isize>(xs[i],\
    \ dx_po[1]));\n    }\n    dyn_derivative(xs, dx)\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `div` in this scope\n  --> /tmp/tmp14yy6q9d.rs:14:21\n\
    \   |\n14 |         let dx_po = div::<isize>(dx_pow, 2);\n   |               \
    \      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `mul`\
    \ in this scope\n  --> /tmp/tmp14yy6q9d.rs:16:17\n   |\n16 |         dx.push(mul::<isize>(xs[i],\
    \ dx_po[0]));\n   |                 ^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `mul` in this scope\n  --> /tmp/tmp14yy6q9d.rs:17:17\n\
    \   |\n17 |         dx.push(mul::<isize>(xs[i], dx_po[1]));\n   |            \
    \     ^^^ not found in this scope\n\nerror[E0425]: cannot find function `dyn_derivative`\
    \ in this scope\n  --> /tmp/tmp14yy6q9d.rs:19:5\n   |\n19 |     dyn_derivative(xs,\
    \ dx)\n   |     ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp14yy6q9d.rs:12:21\n   |\n12 |         dx_pow.push(i);\n\
    \   |                     ^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n12 |         dx_pow.push(i.try_into().unwrap());\n   |                \
    \      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp14yy6q9d.rs:13:21\n\
    \   |\n13 |         dx_pow.push(xs.len() - i);\n   |                     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n13 |         dx_pow.push((xs.len()\
    \ - i).try_into().unwrap());\n   |                     +            +++++++++++++++++++++\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dy_dxs = Vec::new();\n    let mut dy_dxs_len = xs.len();\n    while dy_dxs_len\
    \ > 1 {\n        dy_dxs.push(0);\n        let x = dy_dxs.pop() as isize;\n   \
    \     let mut dx = 1;\n        while dy_dxs.len() > 0 && (dy_dxs.pop() as isize)\
    \ != x {\n            dx = dx / dy_dxs.pop() as isize;\n        }\n        dy_dxs.push(dx);\n\
    \        dy_dxs_len -= 1;\n    }\n    dy_dxs[0]\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpivg48gci.rs:21:5\n   |\n\
    8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |                     \
    \             ---------- expected `Vec<isize>` because of return type\n...\n21\
    \ |     dy_dxs[0]\n   |     ^^^^^^^^^ expected struct `Vec`, found `isize`\n \
    \  |\n   = note: expected struct `Vec<isize>`\n                found type `isize`\n\
    \nerror[E0605]: non-primitive cast: `Option<isize>` as `isize`\n  --> /tmp/tmpivg48gci.rs:13:17\n\
    \   |\n13 |         let x = dy_dxs.pop() as isize;\n   |                 ^^^^^^^^^^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror[E0605]: non-primitive cast: `Option<isize>`\
    \ as `isize`\n  --> /tmp/tmpivg48gci.rs:15:35\n   |\n15 |         while dy_dxs.len()\
    \ > 0 && (dy_dxs.pop() as isize) != x {\n   |                                \
    \   ^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between\
    \ primitive types or to coerce to a specific trait object\n\nerror[E0605]: non-primitive\
    \ cast: `Option<isize>` as `isize`\n  --> /tmp/tmpivg48gci.rs:16:23\n   |\n16\
    \ |             dx = dx / dy_dxs.pop() as isize;\n   |                       ^^^^^^^^^^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0605.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = xs.clone();\n    for x in &mut res {\n        res -= x.pow2();\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `pow2` found for mutable reference `&mut\
    \ isize` in the current scope\n  --> /tmp/tmpr1wxir84.rs:11:18\n   |\n11 |   \
    \      res -= x.pow2();\n   |                  ^^^^ help: there is an associated\
    \ function with a similar name: `pow`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ derivative: Vec<_> = xs.into_iter().rev().enumerate().map(|(i, x)| {\n     \
    \   x * i\n    }).sum();\n    derivative.push(xs.last().unwrap());\n    derivative\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9n7a8xvo.rs:10:13\n   |\n\
    10 |         x * i\n   |             ^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot multiply `isize` by `usize`\n  --> /tmp/tmp9n7a8xvo.rs:10:11\n   |\n\
    10 |         x * i\n   |           ^ no implementation for `isize * usize`\n \
    \  |\n   = help: the trait `Mul<usize>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n             <&'a f32\
    \ as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as\
    \ Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n\
    \             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n      \
    \       <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: the\
    \ trait bound `Vec<_>: Sum<isize>` is not satisfied\n    --> /tmp/tmp9n7a8xvo.rs:11:8\n\
    \     |\n11   |     }).sum();\n     |        ^^^ the trait `Sum<isize>` is not\
    \ implemented for `Vec<_>`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <Duration as Sum<&'a Duration>>\n          \
    \     <Duration as Sum>\n               <Option<T> as Sum<Option<U>>>\n      \
    \         <Result<T, E> as Sum<Result<U, E>>>\n               <Simd<f32, LANES>\
    \ as Sum<&'a Simd<f32, LANES>>>\n               <Simd<f32, LANES> as Sum>\n  \
    \             <Simd<f64, LANES> as Sum<&'a Simd<f64, LANES>>>\n              \
    \ <Simd<f64, LANES> as Sum>\n             and 72 others\nnote: required by a bound\
    \ in `std::iter::Iterator::sum`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9n7a8xvo.rs:13:5\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    ...\n13 |     derivative\n   |     ^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ d = 0;\n    for v in xs {\n        d += v;\n    }\n    Vec::new()\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpa17uxjce.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let n\
    \ = xs.len();\n    let mut ys = Vec::new();\n    ys.push(xs[0]);\n    for i in\
    \ 1..n - 1 {\n        ys.push(xs[i] * (xs[i + 1] - xs[i - 1]));\n    }\n    ys\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, -1, 6, 12]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpqz70nuzf.rs:20:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ product = Vec::new();\n    for i in xs.iter() {\n        if i == 0 {\n     \
    \       continue;\n        }\n        product.push(i as isize);\n    }\n    product.iter().rev().for_each(|&i|\
    \ product.push(i * product.last().unwrap()));\n    product\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpdb04mze2.rs:11:14\n\
    \   |\n11 |         if i == 0 {\n   |              ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0606]: casting `&isize` as `isize` is invalid\n \
    \ --> /tmp/tmpdb04mze2.rs:14:22\n   |\n14 |         product.push(i as isize);\n\
    \   |                      -^^^^^^^^^\n   |                      |\n   |     \
    \                 cannot cast `&isize` as `isize`\n   |                      help:\
    \ dereference the expression: `*i`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0606.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ == 0 {\n        return vec![];\n    }\n    if xs.len() <= 1 {\n        return\
    \ xs;\n    }\n    let mut result = vec![];\n    let mut x = 1;\n    let mut c\
    \ = 0;\n    for n in xs.iter().rev() {\n        result[result.len() - n - 1] =\
    \ c * x + n;\n        x += (n - 1) * (n - 1);\n        c += n - 1;\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg5hqj_d1.rs:19:31\n   |\n\
    19 |         result[result.len() - n - 1] = c * x + n;\n   |                 \
    \              ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `&isize` from `usize`\n  --> /tmp/tmpg5hqj_d1.rs:19:29\n   |\n19 |         result[result.len()\
    \ - n - 1] = c * x + n;\n   |                             ^ no implementation\
    \ for `usize - &isize`\n   |\n   = help: the trait `Sub<&isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret: Vec<isize> = xs.clone();\n    let mut m: isize = 1;\n    for x in &xs {\n\
    \        ret -= (ret[m - 1] - 1) * x;\n        m += 1;\n    }\n    ret\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmgwmetjg.rs:12:17\n\
    \   |\n12 |         ret -= (ret[m - 1] - 1) * x;\n   |                 ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `Vec<isize>`\n  -->\
    \ /tmp/tmpmgwmetjg.rs:12:9\n   |\n12 |         ret -= (ret[m - 1] - 1) * x;\n\
    \   |         ---^^^^^^^^^^^^^^^^^^^^^^^^\n   |         |\n   |         cannot\
    \ use `-=` on type `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0368.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ xs: Vec<isize> = xs;\n    xs.insert(0, 0);\n    xs.push(xs.last().unwrap() *\
    \ xs.last().unwrap());\n    for i in 1..xs.len() {\n        xs.push(2 * xs.last().unwrap()\
    \ * (xs[i - 1].unwrap() - xs[i]));\n    }\n    xs\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpla45iir6.rs:13:53\n   |\n13 |         xs.push(2 * xs.last().unwrap()\
    \ * (xs[i - 1].unwrap() - xs[i]));\n   |                                     \
    \                ^^^^^^ method not found in `isize`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    assert!(xs.len()\
    \ >= 3);\n\n    let mut ret: Vec<isize> = xs.clone();\n    for i in 3..(xs.len()\
    \ - 1) {\n        ret[i] = ret[i] - ret[i - 1] * xs[i - 3];\n    }\n\n    ret\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, -2, 5]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp7a9k2epc.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x = xs.clone();\n    x.reverse();\n    let mut y = x.clone();\n    y.push(0);\n\
    \    for i in 0..x.len() {\n        for j in 0..xs.len() {\n            if i !=\
    \ j {\n                let z = x[i] * y[j];\n                y[j] = z;\n     \
    \       }\n        }\n    }\n    y.reverse();\n    y\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 120, 120, 120, 120, 120]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp5_cejd1n.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ == 1 {\n        vec![1.0]\n    } else {\n        let mut f = 0;\n        for\
    \ &x in xs {\n            f += x;\n        }\n        vec![xs[0] - f]\n    }\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1xkduxjk.rs:10:14\n   |\n\
    10 |         vec![1.0]\n   |              ^^^ expected `isize`, found floating-point\
    \ number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1xkduxjk.rs:13:13\n\
    \   |\n13 |         for &x in xs {\n   |             ^^    -- this expression\
    \ has type `Option<isize>`\n   |             |\n   |             expected `isize`,\
    \ found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `x`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![xs[0]];\n    for x in xs.iter().rev() {\n        let mut i = 0;\n\
    \        for y in result.iter().rev() {\n            i += y;\n        }\n    \
    \    result.rev().push(x - i as isize);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpxhk_fp18.rs:15:16\n\
    \    |\n15  |           result.rev().push(x - i as isize);\n    |            \
    \      ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `Vec<isize>: Iterator`\n           \
    \ which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n\
    \            which is required by `&mut [isize]: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    // if\
    \ only one number then return it.\n    if xs.len() == 1 {\n        return vec![xs[0]];\n\
    \    }\n\n    // Get degree\n    let d = xs.len() - 1;\n\n    // Get first derivative\n\
    \    let mut first_der = 0;\n    for _ in 1..d {\n        first_der = first_der\
    \ * xs[d] + 1;\n    }\n\n    // Get second derivative\n    let mut second_der\
    \ = 0;\n    for _ in 0..d {\n        second_der = second_der * xs[d - 1] + 1;\n\
    \    }\n\n    // Return both derivative vectors\n    return vec![first_der, second_der];\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[31, 85]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp45473gg8.rs:35:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys: Vec<_> = xs.iter().cloned().collect();\n\n    ys.sort_unstable();\n    let\
    \ mut cur = ys[0];\n    let mut x = 1;\n\n    for i in xs.iter().skip(1) {\n \
    \       let y_i = cur;\n        let y_i_2 = cur * x;\n        let y_i_3 = cur\
    \ * x * x;\n        cur = y_i + y_i_2 + y_i_3;\n        x += 1;\n    }\n\n   \
    \ ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp8b6e5h9q.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = xs.iter().copied().collect::<Vec<_>>();\n    if result.is_empty() {\n\
    \        return result;\n    }\n\n    result.push(-result.last());\n    for i\
    \ in 1..result.len() {\n        result[i] = result[i] - result[i - 1] * xs[i -\
    \ 1];\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0600]: cannot apply unary operator `-` to type `Option<&isize>`\n\
    \  --> /tmp/tmp5_eydbbj.rs:14:17\n   |\n14 |     result.push(-result.last());\n\
    \   |                 ^^^^^^^^^^^^^^ cannot apply unary operator `-`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0600`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = Vec::new();\n    for i in 0..(xs.len() - 1) {\n        let diff = if i\
    \ < xs.len() - 1 {\n            xs[i + 1] - xs[i]\n        } else {\n        \
    \    xs.len() - i\n        };\n        let mut power = i;\n        while power\
    \ < res.len() {\n            res[power] += diff * res[power + 1];\n          \
    \  power += 1;\n        }\n        res.push(diff * res[0]);\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmp5wfbbikl.rs:14:13\n\
    \   |\n11 |           let diff = if i < xs.len() - 1 {\n   |  ____________________-\n\
    12 | |             xs[i + 1] - xs[i]\n   | |             ----------------- expected\
    \ because of this\n13 | |         } else {\n14 | |             xs.len() - i\n\
    \   | |             ^^^^^^^^^^^^ expected `isize`, found `usize`\n15 | |     \
    \    };\n   | |_________- `if` and `else` have incompatible types\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ acc: Vec<isize> = vec![0isize; xs.len()];\n    acc.iter().for_each(|&x| acc\
    \ += xs.iter().take(xs.len() - 1).map(|&y| x * y).sum())\n    acc\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error: expected `;`, found `acc`\n  --> /tmp/tmpvqd1n_9l.rs:10:88\n   |\n\
    10 |     acc.iter().for_each(|&x| acc += xs.iter().take(xs.len() - 1).map(|&y|\
    \ x * y).sum())\n   |                                                        \
    \                                ^ help: add `;` here\n11 |     acc\n   |    \
    \ --- unexpected token\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `Vec<isize>`\n  --> /tmp/tmpvqd1n_9l.rs:10:30\n   |\n10 |\
    \     acc.iter().for_each(|&x| acc += xs.iter().take(xs.len() - 1).map(|&y| x\
    \ * y).sum())\n   |                              ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                              |\n   |                              cannot\
    \ use `+=` on type `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ <= 1 {\n        return vec![xs.iter().rev().collect::<Vec<isize>>()]\n    }\
    \ else {\n        vec![xs.iter().rev().skip(1).zip(\n            xs.iter().rev().skip(1).map(|x|\
    \ **x),\n        )]\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpglvzy76p.rs:10:37\n     |\n\
    10   |         return vec![xs.iter().rev().collect::<Vec<isize>>()]\n     |  \
    \                                   ^^^^^^^ value of type `Vec<isize>` cannot\
    \ be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait\
    \ `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpglvzy76p.rs:10:21\n\
    \   |\n10 |         return vec![xs.iter().rev().collect::<Vec<isize>>()]\n   |\
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `Vec<isize>`\n\nerror[E0614]: type `isize` cannot be dereferenced\n \
    \ --> /tmp/tmpglvzy76p.rs:13:45\n   |\n13 |             xs.iter().rev().skip(1).map(|x|\
    \ **x),\n   |                                             ^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpglvzy76p.rs:12:14\n   |\n12 |           vec![xs.iter().rev().skip(1).zip(\n\
    \   |  ______________^\n13 | |             xs.iter().rev().skip(1).map(|x| **x),\n\
    14 | |         )]\n   | |_________^ expected `isize`, found struct `Zip`\n   |\n\
    \   = note: expected type `isize`\n            found struct `Zip<Skip<Rev<std::slice::Iter<'_,\
    \ isize>>>, Map<Skip<Rev<std::slice::Iter<'_, isize>>>, _>>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ d = Vec::with_capacity(xs.len());\n\n    for i in 0..(xs.len() - 1) {\n    \
    \    d.push((xs[i + 1] - xs[i]) / (xs[i + 1] - xs[i]));\n    }\n\n    d\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpfhinopsd.rs:20:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ xs_dot = xs.clone();\n    xs_dot[0] = xs[1];\n    xs_dot[1] = -xs_dot[0];\n\
    \    for i in 2..(xs.len()) as usize {\n        xs_dot[i] = -xs_dot[i - 1] + xs[i]\
    \ - xs[i - 1] * xs[i];\n    }\n    xs_dot\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, -1, 1, -5, -10]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpjg_mliee.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = xs.clone();\n    result[0] = 1;\n    for i in 1..result.len() {\n \
    \       result[i] = result[i] - result[i-1];\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 0, 2, 2, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpz4im8pjv.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    match\
    \ xs.len() {\n        0 => vec![1],\n        _ => xs.iter().zip(derivative(xs.iter().skip(1))).map(|(&x,\
    \ &d)| x * d).collect(),\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0b6xgl_e.rs:11:39\n   |\n\
    11 |         _ => xs.iter().zip(derivative(xs.iter().skip(1))).map(|(&x, &d)|\
    \ x * d).collect(),\n   |                                       ^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Skip`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Skip<std::slice::Iter<'_, isize>>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0b6xgl_e.rs:11:69\n   |\n11 |\
    \         _ => xs.iter().zip(derivative(xs.iter().skip(1))).map(|(&x, &d)| x *\
    \ d).collect(),\n   |                                                        \
    \             ^^- expected due to this\n   |                                 \
    \                                    |\n   |                                 \
    \                                    expected `isize`, found reference\n   | \
    \                                                                    help: you\
    \ can probably remove the explicit borrow: `d`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ d = Vec::new();\n    if xs.len() == 0 {\n        d.push(0);\n    } else {\n\
    \        for i in 0..(xs.len() - 1) {\n            d.push((xs[i + 1] - xs[i])\
    \ / (i + 1));\n        }\n    }\n    d\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeizgqohr.rs:14:42\n   |\n\
    14 |             d.push((xs[i + 1] - xs[i]) / (i + 1));\n   |                \
    \                          ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot divide `isize` by `usize`\n  --> /tmp/tmpeizgqohr.rs:14:40\n   |\n14\
    \ |             d.push((xs[i + 1] - xs[i]) / (i + 1));\n   |                 \
    \                       ^ no implementation for `isize / usize`\n   |\n   = help:\
    \ the trait `Div<usize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ d = 0;\n    for i in xs.iter().rev() {\n        let tmp = d;\n        d += i;\n\
    \        xs[i] = tmp;\n    }\n\n    xs.iter().cloned().rev().collect()\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp8a8seivr.rs:13:9\n\
    \   |\n13 |         xs[i] = tmp;\n   |         ^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ sum = 0;\n    let mut i = 0;\n\n    while i < xs.len() {\n        let x = xs[i];\n\
    \n        if xs.len() == 1 {\n            sum += x;\n        } else {\n      \
    \      sum += x * xs[i - 1];\n        }\n\n        i += 1;\n    }\n\n    sum\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpejbp72ak.rs:24:5\n   |\n\
    8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |                     \
    \             ---------- expected `Vec<isize>` because of return type\n...\n24\
    \ |     sum\n   |     ^^^ expected struct `Vec`, found `isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n                found type `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ <= 2 {\n        return xs;\n    }\n    let mut res = Vec::new();\n    for ix\
    \ in (0..xs.len() - 1).rev() {\n        let mut tmp = 0;\n        for iy in (0..ix).rev()\
    \ {\n            tmp += xs[iy] * xs[ix + iy];\n        }\n        res.push(ix\
    \ - tmp);\n    }\n    res.reverse();\n    return res;\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvb0d287k.rs:18:23\n   |\n\
    18 |         res.push(ix - tmp);\n   |                       ^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpvb0d287k.rs:18:21\n\
    \   |\n18 |         res.push(ix - tmp);\n   |                     ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvb0d287k.rs:21:12\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    ...\n21 |     return res;\n   |            ^^^ expected `isize`, found `usize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ d: Vec<isize> = xs.clone();\n    for i in 1..d.len() {\n        d[i] = 0; //\
    \ zero coefficient\n        d[i] += d[i-1];\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3, 3, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp43o55zfw.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs;\n    dx.pop();\n    for i in 0..dx.len() {\n        dx[i]\
    \ = xs[i] * dx[i - 1];\n    }\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `xs`\n  --> /tmp/tmp_d1d97rg.rs:12:17\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \ -- move occurs because `xs` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n9  |     let mut dx: Vec<isize> = xs;\n   |              \
    \                -- value moved here\n...\n12 |         dx[i] = xs[i] * dx[i -\
    \ 1];\n   |                 ^^ value borrowed here after move\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ d = 0;\n    for i in xs.iter_mut() {\n        *i += 1;\n        d += 1;\n  \
    \  }\n    d.iter_mut().cloned()\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter_mut` found for type `{integer}` in\
    \ the current scope\n  --> /tmp/tmp6gqrzz5t.rs:14:7\n   |\n14 |     d.iter_mut().cloned()\n\
    \   |       ^^^^^^^^ method not found in `{integer}`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut x = 1;\n    let mut pow = 1;\n    for _x in xs\
    \ {\n        pow *= x;\n        x = x * _x + 1;\n        result.push(pow);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 4, 20, 220, 9900]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpw5n_3z17.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret: Vec<isize> = xs.clone();\n    for i in (0..ret.len()).rev() {\n       \
    \ ret[i] = ret[i] - ret[0] as isize;\n    }\n    ret\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, -2, -1, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp5fwjwzcy.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ der = 0;\n    for i in 1..xs.len() {\n        if i % 2 == 0 {\n            der\
    \ += xs[i - 1];\n        }\n        der *= xs[i - 1];\n    }\n    der\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2t9g0mun.rs:16:5\n   |\n\
    8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |                     \
    \             ---------- expected `Vec<isize>` because of return type\n...\n16\
    \ |     der\n   |     ^^^ expected struct `Vec`, found `isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n                found type `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = [0isize; xs.len()];\n    for i in 0..xs.len() {\n        result[i]\
    \ = xs[i] - xs[i - 1];\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmp3jvg49h9.rs:9:31\n\
    \  |\n8 | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n  |               --\
    \ this would need to be a `const`\n9 |     let mut result = [0isize; xs.len()];\n\
    \  |                               ^^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0435`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ derivated = Vec::new();\n    let mut i = 0;\n    for x in xs {\n        derivated.push(x);\n\
    \        if i == xs.len() - 1 {\n            i += 1;\n        } else {\n     \
    \       derivated.push(xs[i + 1] - xs[i] * xs[i - 1]);\n            i += 1;\n\
    \        }\n    }\n    derivated\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `xs`\n   --> /tmp/tmpazuinlxk.rs:13:17\n\
    \    |\n8   | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n    |           \
    \    -- move occurs because `xs` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n11  |     for x in xs {\n    |              -- `xs` moved\
    \ due to this implicit call to `.into_iter()`\n12  |         derivated.push(x);\n\
    13  |         if i == xs.len() - 1 {\n    |                 ^^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `xs`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n11  |     for x in &xs {\n\
    \    |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = xs.clone();\n    for i in 1..result.len() {\n        result[i] = result[i\
    \ - 1] * xs[i - 1];\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 9, 9, 18, 72]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbhg5smnn.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ n = xs.len();\n    let mut result = [0; n];\n    for i in 0..n {\n        if\
    \ i < 1 {\n            result[i] = 1;\n        } else {\n            result[i]\
    \ = xs[i] + xs[i - 1] * result[i - 1];\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpfpubdotw.rs:10:26\n   |\n9  |     let mut n = xs.len();\n   |     ---------\
    \ help: consider using `const` instead of `let`: `const n`\n10 |     let mut result\
    \ = [0; n];\n   |                          ^ non-constant value\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0435`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.is_empty()\
    \ {\n        vec![0]\n    } else {\n        let mut ys = vec![0];\n        for\
    \ &x in xs {\n            let mut dys = vec![0];\n            for &y in ys {\n\
    \                dys.push(y*x + 1);\n            }\n            ys = dys;\n  \
    \      }\n        ys\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj7743gwt.rs:13:13\n   |\n\
    13 |         for &x in xs {\n   |             ^^    -- this expression has type\
    \ `Option<isize>`\n   |             |\n   |             expected `isize`, found\
    \ reference\n   |             help: you can probably remove the explicit borrow:\
    \ `x`\n   |\n   = note:   expected type `isize`\n           found reference `&_`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpj7743gwt.rs:15:17\n   |\n15 |\
    \             for &y in ys {\n   |                 ^^    -- this expression has\
    \ type `Option<{integer}>`\n   |                 |\n   |                 expected\
    \ integer, found reference\n   |                 help: you can probably remove\
    \ the explicit borrow: `y`\n   |\n   = note:   expected type `{integer}`\n   \
    \        found reference `&_`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ product = 1;\n    let mut result = Vec::new();\n    for i in xs.iter() {\n \
    \       let mut j = i;\n        while *j < 0 {\n            j = j + 1;\n     \
    \   }\n        result.push(*j);\n        product *= i;\n    }\n    result.push(product);\n\
    \    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2pjeoy4y.rs:14:17\n   |\n\
    12 |         let mut j = i;\n   |                     - expected due to this value\n\
    13 |         while *j < 0 {\n14 |             j = j + 1;\n   |               \
    \  ^^^^^\n   |                 |\n   |                 expected `&isize`, found\
    \ `isize`\n   |                 help: consider borrowing here: `&(j + 1)`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ d: Vec<isize> = xs;\n    d.pop();\n    d.pop();\n    d.pop();\n    d.pop();\n\
    \    d\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpakk448ka.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    xs.iter()\n\
    \        .map(|x| x.powi(2))\n        .sum()\n        / xs\n        .iter()\n\
    \        .map(|x| x.powi(2))\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `powi` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmp_f15f6es.rs:10:20\n   |\n10 |         .map(|x|\
    \ x.powi(2))\n   |                    ^^^^ help: there is an associated function\
    \ with a similar name: `pow`\n\nerror[E0599]: no method named `powi` found for\
    \ reference `&isize` in the current scope\n  --> /tmp/tmp_f15f6es.rs:14:20\n \
    \  |\n14 |         .map(|x| x.powi(2))\n   |                    ^^^^ help: there\
    \ is an associated function with a similar name: `pow`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    if xs.len() == 1 {\n        result.push(1);\n    }\
    \ else {\n        let mut x0 = xs[0];\n        let mut x1 = xs.clone();\n    \
    \    x1.remove(0);\n        x1.remove(0);\n        let mut x2 = xs.clone();\n\
    \        x2.remove(0);\n        x2.remove(0);\n        let mut x3 = xs.clone();\n\
    \        x3.remove(0);\n        x3.remove(0);\n        let mut x4 = xs.clone();\n\
    \        x4.remove(0);\n        x4.remove(0);\n        let mut x5 = xs.clone();\n\
    \        x5.remove(0);\n        x5.remove(0);\n\n        for i in 0..xs.len()\
    \ {\n            result.push(\n                x0 * (x1[i + 1] - xs[i + 1]) *\
    \ (xs[i + 2] - xs[i as usize - 1] + xs[i - 1] * xs[i - 2] + xs[i - 1] * xs[i -\
    \ 1]),\n            );\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpo3t0ihdq.rs:32:64\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    (xs.len()\
    \ - 1) as *const u8 +\n        unsafe {\n            &*(&*xs + 1) as *const u8\
    \ +\n            &*(&*xs + 2) as *const u8 +\n            &*(&*xs + 3) as *const\
    \ u8 +\n            &*(&*xs + 4) as *const u8 +\n            &*(&*xs + 5) as *const\
    \ u8 +\n            &*(&*xs + 6) as *const u8 +\n            &*(&*xs + 7) as *const\
    \ u8 +\n            &*(&*xs + 8) as *const u8 +\n            &*(&*xs + 9) as *const\
    \ u8 +\n            &*(&*xs + 10) as *const u8 +\n            &*(&*xs + 11) as\
    \ *const u8 +\n            &*(&*xs + 12) as *const u8 +\n            &*(&*xs +\
    \ 13) as *const u8 +\n            &*(&*xs + 14) as *const u8 +\n            &*(&*xs\
    \ + 15) as *const u8\n        }\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `{integer}` to `&[isize]`\n  --> /tmp/tmp0jh3qc2j.rs:11:21\n\
    \   |\n11 |             &*(&*xs + 1) as *const u8 +\n   |                ----\
    \ ^ - {integer}\n   |                |\n   |                &[isize]\n\nerror[E0369]:\
    \ cannot add `{integer}` to `&[isize]`\n  --> /tmp/tmp0jh3qc2j.rs:12:21\n   |\n\
    12 |             &*(&*xs + 2) as *const u8 +\n   |                ---- ^ - {integer}\n\
    \   |                |\n   |                &[isize]\n\nerror[E0369]: cannot add\
    \ `{integer}` to `&[isize]`\n  --> /tmp/tmp0jh3qc2j.rs:13:21\n   |\n13 |     \
    \        &*(&*xs + 3) as *const u8 +\n   |                ---- ^ - {integer}\n\
    \   |                |\n   |                &[isize]\n\nerror[E0369]: cannot add\
    \ `{integer}` to `&[isize]`\n  --> /tmp/tmp0jh3qc2j.rs:14:21\n   |\n14 |     \
    \        &*(&*xs + 4) as *const u8 +\n   |                ---- ^ - {integer}\n\
    \   |                |\n   |                &[isize]\n\nerror[E0369]: cannot add\
    \ `{integer}` to `&[isize]`\n  --> /tmp/tmp0jh3qc2j.rs:15:21\n   |\n15 |     \
    \        &*(&*xs + 5) as *const u8 +\n   |                ---- ^ - {integer}\n\
    \   |                |\n   |                &[isize]\n\nerror[E0369]: cannot add\
    \ `{integer}` to `&[isize]`\n  --> /tmp/tmp0jh3qc2j.rs:16:21\n   |\n16 |     \
    \        &*(&*xs + 6) as *const u8 +\n   |                ---- ^ - {integer}\n\
    \   |                |\n   |                &[isize]\n\nerror[E0369]: cannot add\
    \ `{integer}` to `&[isize]`\n  --> /tmp/tmp0jh3qc2j.rs:17:21\n   |\n17 |     \
    \        &*(&*xs + 7) as *const u8 +\n   |                ---- ^ - {integer}\n\
    \   |                |\n   |                &[isize]\n\nerror[E0369]: cannot add\
    \ `{integer}` to `&[isize]`\n  --> /tmp/tmp0jh3qc2j.rs:18:21\n   |\n18 |     \
    \        &*(&*xs + 8) as *const u8 +\n   |                ---- ^ - {integer}\n\
    \   |                |\n   |                &[isize]\n\nerror[E0369]: cannot add\
    \ `{integer}` to `&[isize]`\n  --> /tmp/tmp0jh3qc2j.rs:19:21\n   |\n19 |     \
    \        &*(&*xs + 9) as *const u8 +\n   |                ---- ^ - {integer}\n\
    \   |                |\n   |                &[isize]\n\nerror[E0369]: cannot add\
    \ `{integ"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for i in 1..(xs.len() + 1) {\n        let mut current\
    \ = Vec::new();\n        for j in 0..i {\n            current.push(xs[i - 1] *\
    \ j);\n        }\n        result.push(current);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1nawgqgp.rs:13:38\n   |\n\
    13 |             current.push(xs[i - 1] * j);\n   |                          \
    \            ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot multiply\
    \ `isize` by `usize`\n  --> /tmp/tmp1nawgqgp.rs:13:36\n   |\n13 |            \
    \ current.push(xs[i - 1] * j);\n   |                                    ^ no implementation\
    \ for `isize * usize`\n   |\n   = help: the trait `Mul<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1nawgqgp.rs:17:5\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    ...\n17 |     result\n   |     ^^^^^^ expected `isize`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Vec<isize>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ds: Vec<isize>;\n    if xs.len() == 0 {\n        ds = vec![];\n    } else {\n\
    \        ds = vec![0; xs.len()];\n        ds[0] = xs[1];\n        for i in 1..xs.len()\
    \ {\n            ds[i] = xs[i] * ds[i - 1];\n        }\n    }\n    ds\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 2, 8, 40]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpthu9zb0l.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ d = 0;\n    let mut x = xs[0];\n    for i in 1..xs.len() {\n        d += xs[i]\
    \ - x;\n        x = xs[i];\n    }\n    vec![d]\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp5szq_4xs.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x = 1;\n    for i in 1..xs.len() {\n        x *= xs[i - 1];\n        xs[i] =\
    \ x;\n    }\n    vec![xs[0u]]\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error: invalid suffix `u` for number literal\n  --> /tmp/tmpqoikwxmk.rs:14:13\n\
    \   |\n14 |     vec![xs[0u]]\n   |             ^^ invalid suffix `u`\n   |\n \
    \  = help: the suffix must be one of the numeric types (`u32`, `isize`, `f32`,\
    \ etc.)\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ n = xs.len();\n    loop {\n        if n % 2 == 0 {\n            // x^n\n   \
    \         n--;\n            let mut sum = 0;\n            for _i in 0..n {\n \
    \               sum += xs[n - _i] * xs[n - _i];\n            }\n            xs[n\
    \ % xs.len()] += sum;\n        } else {\n            // n^x\n            n /=\
    \ 2;\n            xs[n % xs.len()] += xs[n - 1];\n        }\n        if n == 1\
    \ {\n            break;\n        }\n    }\n    xs\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmp47csebs9.rs:13:16\n\
    \   |\n13 |             n--;\n   |                ^ expected expression\n\nerror:\
    \ aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dys: Vec<isize> = xs.clone();\n    for i in &mut dys[..] {\n        *i -= 1;\n\
    \    }\n    dys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 0, 1, 3, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpazwtm2dj.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    assert!(xs.len()\
    \ > 1);\n\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    let mut dx: Vec<_>\
    \ = xs.into_iter().map(|x| x * x).collect();\n    dx.push(xs.last().unwrap() *\
    \ xs.last().unwrap());\n\n    // dx / dx\n    dx.iter_mut().for_each(|&dx| *dx\
    \ /= *dx);\n    dx.into_iter().collect()\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8uv9c4vg.rs:16:29\n   |\n\
    16 |     dx.iter_mut().for_each(|&dx| *dx /= *dx);\n   |                     \
    \        ^---\n   |                             ||\n   |                     \
    \        |expected due to this\n   |                             types differ\
    \ in mutability\n   |                             help: did you mean `dx`: `&&mut\
    \ isize`\n   |\n   = note: expected mutable reference `&mut isize`\n         \
    \             found reference `&_`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ < 2 {\n        vec![0]\n    } else {\n        let mut sum: Vec<isize> = xs.clone();\n\
    \        let mut temp: Vec<isize> = xs.clone();\n        let mut i = 1isize;\n\
    \        while i < xs.len() {\n            temp.push(temp.last() * xs[i - 1] +\
    \ sum[i - 1]);\n            i += 1;\n        }\n        temp\n    }\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe_s9h5th.rs:15:19\n   |\n\
    15 |         while i < xs.len() {\n   |                   ^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n15 |         while i < xs.len().try_into().unwrap()\
    \ {\n   |                           ++++++++++++++++++++\n\nerror[E0277]: the\
    \ type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe_s9h5th.rs:16:37\n\
    \   |\n16 |             temp.push(temp.last() * xs[i - 1] + sum[i - 1]);\n   |\
    \                                     ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0369]: cannot multiply `Option<&isize>`\
    \ by `_`\n  --> /tmp/tmpe_s9h5th.rs:16:35\n   |\n16 |             temp.push(temp.last()\
    \ * xs[i - 1] + sum[i - 1]);\n   |                       ----------- ^ ---------\
    \ _\n   |                       |\n   |                       Option<&isize>\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe_s9h5th.rs:16:49\n\
    \   |\n16 |             temp.push(temp.last() * xs[i - 1] + sum[i - 1]);\n   |\
    \                                                 ^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    assert!(xs.is_sorted());\n\
    \n    if xs.len() == 1 {\n        return vec![1];\n    }\n\n    let mut ys = vec![];\n\
    \    let mut y = xs[0];\n\n    for i in 0..(xs.len() - 1) {\n        let x2 =\
    \ xs[i];\n\n        if i + 1 < xs.len() {\n            ys += xs[i] + xs[i + 1]\
    \ * y;\n        }\n\n        ys += xs[i] * y;\n\n        if i + 2 < xs.len() {\n\
    \            ys += xs[i] * y * x2;\n        }\n\n        y = xs[i + 1];\n    }\n\
    \n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0658]: use of unstable library feature 'is_sorted': new API\n -->\
    \ /tmp/tmp96y27vrp.rs:9:16\n  |\n9 |     assert!(xs.is_sorted());\n  |       \
    \         ^^^^^^^^^\n  |\n  = note: see issue #53485 <https://github.com/rust-lang/rust/issues/53485>\
    \ for more information\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `Vec<_>`\n  --> /tmp/tmp96y27vrp.rs:22:13\n   |\n22 |   \
    \          ys += xs[i] + xs[i + 1] * y;\n   |             --^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `Vec<_>`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `Vec<_>`\n  --> /tmp/tmp96y27vrp.rs:25:9\n\
    \   |\n25 |         ys += xs[i] * y;\n   |         --^^^^^^^^^^^^^\n   |     \
    \    |\n   |         cannot use `+=` on type `Vec<_>`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Vec<_>`\n  --> /tmp/tmp96y27vrp.rs:28:13\n\
    \   |\n28 |             ys += xs[i] * y * x2;\n   |             --^^^^^^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `Vec<_>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0368, E0658.\nFor more information about an error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    for &x in xs.iter() {\n        dx.push(x /\
    \ dx.last());\n    }\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `Option<&isize>`\n  --> /tmp/tmpzu1xwmbb.rs:11:19\n\
    \   |\n11 |         dx.push(x / dx.last());\n   |                   ^ no implementation\
    \ for `isize / Option<&isize>`\n   |\n   = help: the trait `Div<Option<&isize>>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    // if\
    \ derivatives are calculated with xs[i], then xs[0] becomes xs[i]\n    let len\
    \ = xs.len();\n    if len == 1 {\n        return vec![xs[0]];\n    }\n\n    let\
    \ mut x = 0;\n    let mut dx_squared = 0;\n    for i in 0..len - 1 {\n       \
    \ x += xs[i];\n        dx_squared += xs[i] * xs[i];\n    }\n    let dx_by_squared\
    \ = dx_squared / len;\n    let dx_by_d_xs = xs.iter().map(|&x| x * x).sum::<f64>();\n\
    \    let result = dx_by_squared + dx_by_d_xs;\n    if result == 0 {\n        return\
    \ vec![];\n    }\n    if result > 0 {\n        // if derivative is positive then\
    \ return derivative of polynomial with highest degree first\n        let highest_degree\
    \ = xs.iter().max_by_key(|&x| x).unwrap();\n        return derivative(highest_degree\
    \ as usize + 1).iter().map(|&x| x * x).collect();\n    } else {\n        // if\
    \ derivative is negative then return derivative of polynomial with lowest degree\
    \ first\n        let lowest_degree = xs.iter().min_by_key(|&x| x).unwrap();\n\
    \        return derivative(lowest_degree as usize + 1).iter().map(|&x| x * x).collect();\n\
    \    }\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptbowxt_w.rs:21:38\n   |\n\
    21 |     let dx_by_squared = dx_squared / len;\n   |                         \
    \             ^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot divide\
    \ `isize` by `usize`\n  --> /tmp/tmptbowxt_w.rs:21:36\n   |\n21 |     let dx_by_squared\
    \ = dx_squared / len;\n   |                                    ^ no implementation\
    \ for `isize / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: the trait bound `f64: Sum<isize>` is not satisfied\n\
    \    --> /tmp/tmptbowxt_w.rs:22:48\n     |\n22   |     let dx_by_d_xs = xs.iter().map(|&x|\
    \ x * x).sum::<f64>();\n     |                                               \
    \ ^^^ the trait `Sum<isize>` is not implemented for `f64`\n     |\n     = help:\
    \ the following other types implement trait `Sum<A>`:\n               <f32 as\
    \ Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n\
    \               <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n       \
    \        <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16\
    \ as Sum>\n             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror[E0277]: cannot add `f64` to `isize`\n  --> /tmp/tmptbowxt_w.rs:23:32\n\
    \   |\n23 |     let result = dx_by_squared + dx_by_d_xs;\n   |               \
    \                 ^ no implementation for `isize + f64`\n   |\n   = help: the\
    \ trait `Add<f64>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n    \
    \         <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n      \
    \       <&'a i16 as Add<i16>>\n             <&'a"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let n\
    \ = xs.len();\n    let mut ys = Vec::with_capacity(n);\n    for i in 0..n {\n\
    \        let mut deriv = i;\n        for j in i+1..n {\n            deriv += xs[j]\
    \ * deriv;\n        }\n        ys.push(deriv);\n    }\n    ys\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi2ndu0od.rs:14:30\n   |\n\
    14 |             deriv += xs[j] * deriv;\n   |                              ^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot multiply `isize` by\
    \ `usize`\n  --> /tmp/tmpi2ndu0od.rs:14:28\n   |\n14 |             deriv += xs[j]\
    \ * deriv;\n   |                            ^ no implementation for `isize * usize`\n\
    \   |\n   = help: the trait `Mul<usize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Mul<Rhs>`:\n             <&'a\
    \ f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128\
    \ as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as\
    \ Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpi2ndu0od.rs:14:22\n   |\n14 |             deriv\
    \ += xs[j] * deriv;\n   |                      ^^^^^^^^^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmpi2ndu0od.rs:14:19\n\
    \   |\n14 |             deriv += xs[j] * deriv;\n   |                   ^^ no\
    \ implementation for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi2ndu0od.rs:18:5\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    ...\n18 |     ys\n   |     ^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to 5 previou"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ deriv: Vec<isize> = xs.clone();\n    deriv[0] += deriv[1];\n    for i in 2..deriv.len()\
    \ {\n        deriv[i] = deriv[i - 1] * xs[i - 1];\n    }\n    deriv\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 1, 2, 8]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp5b28scb2.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys: Vec<isize> = xs.clone();\n    for i in 1..ys.len() {\n        ys[i] = ys[i-1]\
    \ * xs[i];\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 6, 24, 120]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpzkqbpsef.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    use core::cmp::Ordering;\n\
    \n    if xs.len() < 2 {\n        return vec![];\n    }\n\n    let mut ps = Vec::new();\n\
    \    let mut x = 1;\n\n    while let Some(k) = xs.iter().min() {\n        ps.push(x);\n\
    \        ps.extend_from_slice(k.iter().map(|i| i * x).collect::<Vec<_>>());\n\
    \        x = x * k;\n    }\n\n    ps.push(x);\n    ps.reverse();\n    ps\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: maybe a missing crate `core`?\n --> /tmp/tmp4x105arb.rs:9:9\n\
    \  |\n9 |     use core::cmp::Ordering;\n  |         ^^^^ maybe a missing crate\
    \ `core`?\n\nerror[E0599]: no method named `iter` found for reference `&isize`\
    \ in the current scope\n  --> /tmp/tmp4x105arb.rs:20:32\n   |\n20 |         ps.extend_from_slice(k.iter().map(|i|\
    \ i * x).collect::<Vec<_>>());\n   |                                ^^^^ method\
    \ not found in `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0433, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    (xs as\
    \ f64).recip() * (xs.len() as f64)\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbfnbv0ou.rs:9:5\n  |\n8 |\
    \ fn derivative(xs: Vec<isize>) -> Vec<isize> {\n  |                         \
    \         ---------- expected `Vec<isize>` because of return type\n9 |     (xs\
    \ as f64).recip() * (xs.len() as f64)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `f64`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \               found type `f64`\n\nerror[E0605]: non-primitive cast: `Vec<isize>`\
    \ as `f64`\n --> /tmp/tmpbfnbv0ou.rs:9:5\n  |\n9 |     (xs as f64).recip() * (xs.len()\
    \ as f64)\n  |     ^^^^^^^^^^^ an `as` expression can only be used to convert\
    \ between primitive types or to coerce to a specific trait object\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0605.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut y = vec![1; xs.len()];\n\
    \    for j in 1..xs.len() {\n        let mut z = y.clone();\n        z[j] -= xs[j];\n\
    \        y.push(z * z);\n    }\n    y\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `Vec<isize>` by `Vec<isize>`\n  --> /tmp/tmplps8y3fh.rs:16:18\n\
    \   |\n16 |         y.push(z * z);\n   |                - ^ - Vec<isize>\n   |\
    \                |\n   |                Vec<isize>\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for i in 0..(xs.len() - 1) {\n        result.append(xs[i\
    \ + 1]);\n    }\n    result.into_iter().rev().collect()\n}\n\nfn main() {\n  \
    \  let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1xr2vrit.rs:11:23\n   |\n\
    11 |         result.append(xs[i + 1]);\n   |                       ^^^^^^^^^ expected\
    \ `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<_>`\n                           found type `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    xs.iter().cloned().map(|x|\
    \ x * x).sum::<isize>() / xs.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgtgfaenv.rs:9:5\n  |\n8 |\
    \ fn derivative(xs: Vec<isize>) -> Vec<isize> {\n  |                         \
    \         ---------- expected `Vec<isize>` because of return type\n9 |     xs.iter().cloned().map(|x|\
    \ x * x).sum::<isize>() / xs.len() as isize\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \               found type `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ <= 1 {\n        return xs;\n    }\n    let mut xs = xs.clone();\n    xs.reverse();\n\
    \    let mut ys = xs.clone();\n    ys.extend_from_slice(&[(ys.len() - 2).pow(&xs[ys.len()\
    \ - 1])]);\n    for &x in &xs[1..] {\n        let mut y = ys.clone();\n      \
    \  y[0] = y[0] * x;\n        ys.swap_remove(1);\n        ys.extend_from_slice(&y);\n\
    \    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp54auhaen.rs:15:47\n   |\n\
    15 |     ys.extend_from_slice(&[(ys.len() - 2).pow(&xs[ys.len() - 1])]);\n   |\
    \                                               ^^^^^^^^^^^^^^^^^ expected `u32`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp54auhaen.rs:15:28\n\
    \   |\n15 |     ys.extend_from_slice(&[(ys.len() - 2).pow(&xs[ys.len() - 1])]);\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |     ys.extend_from_slice(&[(ys.len()\
    \ - 2).pow(&xs[ys.len() - 1]).try_into().unwrap()]);\n   |                   \
    \                                              ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = xs.clone();\n    for i in 1..result.len() {\n        result[i]\
    \ = xs[i - 1] * result[i] - result[i] - 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, -1, 3, 14]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpk3welub5.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dxs = Vec::new();\n    for x in xs.iter() {\n        dxs.push(x - (xs.len()\
    \ - 1) * x);\n    }\n    dxs\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuhyg7_lc.rs:11:39\n   |\n\
    11 |         dxs.push(x - (xs.len() - 1) * x);\n   |                         \
    \              ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot multiply\
    \ `usize` by `&isize`\n  --> /tmp/tmpuhyg7_lc.rs:11:37\n   |\n11 |         dxs.push(x\
    \ - (xs.len() - 1) * x);\n   |                                     ^ no implementation\
    \ for `usize * &isize`\n   |\n   = help: the trait `Mul<&isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuhyg7_lc.rs:11:22\n\
    \   |\n11 |         dxs.push(x - (xs.len() - 1) * x);\n   |                  \
    \    ^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot\
    \ subtract `usize` from `&isize`\n  --> /tmp/tmpuhyg7_lc.rs:11:20\n   |\n11 |\
    \         dxs.push(x - (xs.len() - 1) * x);\n   |                    ^ no implementation\
    \ for `&isize - usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dydxs = Vec::new();\n    for i in xs.iter() {\n        dydxs.push(i * (i + 1)\
    \ / 2);\n    }\n    dydxs\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 1, 3, 10, 15]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpcf0tiazb.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ <= 1 {\n        return xs;\n    }\n    let mut x2 = xs.iter().cloned().fold(0,\
    \ |a, b| a * b);\n    let mut x3 = xs.iter().cloned().fold(xs.clone(), |a, b|\
    \ a * b);\n    for i in xs.iter().skip(1) {\n        x3 = x3 * (x2 + xs[i - 1]);\n\
    \    }\n    (x3 - xs.iter().cloned().sum()).into()\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `Vec<isize>` by `isize`\n  --> /tmp/tmp8e3utwj5.rs:13:63\n\
    \   |\n13 |     let mut x3 = xs.iter().cloned().fold(xs.clone(), |a, b| a * b);\n\
    \   |                                                             - ^ - isize\n\
    \   |                                                             |\n   |    \
    \                                                         Vec<isize>\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8e3utwj5.rs:15:25\n\
    \   |\n15 |         x3 = x3 * (x2 + xs[i - 1]);\n   |                        \
    \ ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0369]: cannot multiply `Vec<isize>` by `_`\n  --> /tmp/tmp8e3utwj5.rs:15:17\n\
    \   |\n15 |         x3 = x3 * (x2 + xs[i - 1]);\n   |              -- ^ ----------------\
    \ _\n   |              |\n   |              Vec<isize>\n\nerror[E0369]: cannot\
    \ subtract `_` from `Vec<isize>`\n  --> /tmp/tmp8e3utwj5.rs:17:9\n   |\n17 | \
    \    (x3 - xs.iter().cloned().sum()).into()\n   |      -- ^ ------------------------\
    \ _\n   |      |\n   |      Vec<isize>\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    // calculate\
    \ power of x to multiply with each coefficient of derivative\n    // power is\
    \ represented as exponent * power\n    // exponent is represented as x exponent\
    \ * base of x\n    // base is represented as x / base\n    let mut power = 1;\n\
    \    let mut exponent = 1;\n    let mut base = 1;\n    for x in xs {\n       \
    \ power = power * x;\n        exponent *= x;\n        base = base * x;\n    }\n\
    \    let mut derivative = vec![1.0];\n    for x in xs {\n        derivative.push(derivative.last().unwrap()\
    \ * base);\n    }\n    power = power / exponent;\n    for x in xs {\n        derivative.push(derivative.last().unwrap()\
    \ * power);\n    }\n    derivative\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `&{float}` by `isize`\n  --> /tmp/tmpi9pazq3t.rs:23:52\n\
    \   |\n23 |         derivative.push(derivative.last().unwrap() * base);\n   |\
    \                                                    ^ no implementation for `&{float}\
    \ * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented for `&{float}`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `&{float}` by `isize`\n  --> /tmp/tmpi9pazq3t.rs:27:52\n   |\n\
    27 |         derivative.push(derivative.last().unwrap() * power);\n   |      \
    \                                              ^ no implementation for `&{float}\
    \ * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented for `&{float}`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpi9pazq3t.rs:29:5\n   |\n8  | fn derivative(xs:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                  ----------\
    \ expected `Vec<isize>` because of return type\n...\n29 |     derivative\n   |\
    \     ^^^^^^^^^^ expected `isize`, found floating-point number\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<{float}>`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for i in xs.iter().rev() {\n        let mut k = i;\n \
    \       while k > 0 {\n            result.push(-xs[k - 1]);\n            k = k\
    \ / 2;\n        }\n        result.push(1);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx4ju47l8.rs:12:19\n   |\n\
    12 |         while k > 0 {\n   |                   ^\n   |                   |\n\
    \   |                   expected `&isize`, found integer\n   |               \
    \    help: consider borrowing here: `&0`\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpx4ju47l8.rs:13:26\n   |\n13 |         \
    \    result.push(-xs[k - 1]);\n   |                          ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx4ju47l8.rs:14:17\n\
    \   |\n11 |         let mut k = i;\n   |                     - expected due to\
    \ this value\n...\n14 |             k = k / 2;\n   |                 ^^^^^\n \
    \  |                 |\n   |                 expected `&isize`, found `isize`\n\
    \   |                 help: consider borrowing here: `&(k / 2)`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = vec![];\n    for i in xs.iter() {\n        let mut current = i;\n    \
    \    let mut next = i;\n        loop {\n            next += 1;\n            if\
    \ next > xs.len() {\n                break;\n            }\n            current\
    \ = xs[next];\n            res.push((current - xs[i - 1]) / (xs[next] - xs[i -\
    \ 1]));\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&isize`\n  --> /tmp/tmphra79alk.rs:14:13\n   |\n14 |             next += 1;\n\
    \   |             ----^^^^^\n   |             |\n   |             cannot use `+=`\
    \ on type `&isize`\n   |\nhelp: `+=` can be used on `isize`, you can dereference\
    \ `next`\n   |\n14 |             *next += 1;\n   |             +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphra79alk.rs:15:23\n   |\n15 |             if\
    \ next > xs.len() {\n   |                       ^^^^^^^^ expected `&isize`, found\
    \ `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n\
    \  --> /tmp/tmphra79alk.rs:18:23\n   |\n18 |             current = xs[next];\n\
    \   |                       ^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmphra79alk.rs:19:33\n   |\n19 |             res.push((current - xs[i\
    \ - 1]) / (xs[next] - xs[i - 1]));\n   |                                 ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmphra79alk.rs:19:47\n\
    \   |\n19 |             res.push((current - xs[i - 1]) / (xs[next] - xs[i - 1]));\n\
    \   |                                               ^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dxs = Vec::new();\n    let mut x_i = 1;\n    for i in 0..(xs.len() - 1) {\n\
    \        dxs.push(x_i);\n        x_i *= xs[i];\n    }\n    dxs\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 3, 6]`,\n right: `[1, 4, 12, 20]`', /tmp/tmprp02zytl.rs:20:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    // Create\
    \ list from 0 to total power\n    // First term is 1\n    let mut xs_pow: Vec<isize>\
    \ = xs.into_iter().map(|x| *x).collect();\n\n    // Remove first term from list\n\
    \    xs_pow.remove(0);\n\n    let mut dx: Vec<isize> = xs.clone();\n    let mut\
    \ next_x: isize = *xs_pow.clone();\n    for x in xs_pow {\n        let mut next_d\
    \ = 1;\n        for mut x_pow in dx {\n            if x_pow == 0 {\n         \
    \       break;\n            }\n            if x_pow == x {\n                next_d\
    \ *= next_x;\n                break;\n            }\n            match x_pow {\n\
    \                x => {\n                    next_d /= x_pow;\n              \
    \      break;\n                }\n            }\n        }\n        dx = next_x.into_iter().map(|x|\
    \ *x).collect();\n        next_x = x;\n    }\n    dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmphzs0by7h.rs:11:57\n\
    \   |\n11 |     let mut xs_pow: Vec<isize> = xs.into_iter().map(|x| *x).collect();\n\
    \   |                                                         ^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphzs0by7h.rs:17:29\n   |\n17 |     let mut next_x:\
    \ isize = *xs_pow.clone();\n   |                     -----   ^^^^^^^^^^^^^^^ expected\
    \ `isize`, found slice `[isize]`\n   |                     |\n   |           \
    \          expected due to this\n\nerror[E0599]: `isize` is not an iterator\n\
    \  --> /tmp/tmphzs0by7h.rs:35:21\n   |\n35 |         dx = next_x.into_iter().map(|x|\
    \ *x).collect();\n   |                     ^^^^^^^^^ `isize` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `isize:\
    \ Iterator`\n           which is required by `isize: IntoIterator`\n         \
    \  `&isize: Iterator`\n           which is required by `&isize: IntoIterator`\n\
    \           `&mut isize: Iterator`\n           which is required by `&mut isize:\
    \ IntoIterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    xs.iter()\n\
    \        .enumerate()\n        .map(|(i, x)| {\n            x - 2 * (i * x)\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxrm09kkq.rs:12:26\n   |\n\
    12 |             x - 2 * (i * x)\n   |                          ^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot multiply `usize` by `&isize`\n  --> /tmp/tmpxrm09kkq.rs:12:24\n\
    \   |\n12 |             x - 2 * (i * x)\n   |                        ^ no implementation\
    \ for `usize * &isize`\n   |\n   = help: the trait `Mul<&isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxrm09kkq.rs:12:17\n\
    \   |\n12 |             x - 2 * (i * x)\n   |                 ^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot subtract `usize` from `&isize`\n\
    \  --> /tmp/tmpxrm09kkq.rs:12:15\n   |\n12 |             x - 2 * (i * x)\n   |\
    \               ^ no implementation for `&isize - usize`\n   |\n   = help: the\
    \ trait `Sub<usize>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    use std::cmp::Ordering;\n\
    \n    let mut result = Vec::new();\n    let mut last_value: Option<isize> = None;\n\
    \n    for &x in xs {\n        result.push((last_value.cloned().unwrap() * x).floor());\n\
    \        last_value = Some(x);\n    }\n\n    result\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering`\n --> /tmp/tmpnjuwe9gr.rs:9:9\n\
    \  |\n9 |     use std::cmp::Ordering;\n  |         ^^^^^^^^^^^^^^^^^^\n  |\n \
    \ = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnjuwe9gr.rs:14:9\n   |\n14 |     for &x in xs {\n   | \
    \        ^^    -- this expression has type `Option<isize>`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `x`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0599]: `Option<isize>` is not an iterator\n\
    \   --> /tmp/tmpnjuwe9gr.rs:15:33\n    |\n15  |           result.push((last_value.cloned().unwrap()\
    \ * x).floor());\n    |                                   ^^^^^^ `Option<isize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<isize>: Iterator`\n            which is required by `&mut\
    \ Option<isize>: Iterator`\n\nerror: aborting due to 2 previous errors; 1 warning\
    \ emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    // xs[0]\
    \ = constant, xs[1] - first derivative and so on\n    let mut dx = xs[1];\n\n\
    \    for i in 2..xs.len() {\n        dx *= xs[i - 1];\n        dx += xs[i];\n\
    \    }\n\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuz6elchr.rs:17:5\n   |\n\
    8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |                     \
    \             ---------- expected `Vec<isize>` because of return type\n...\n17\
    \ |     dx\n   |     ^^ expected struct `Vec`, found `isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n                found type `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for x in xs {\n        result.push(x * (xs.len() - 1));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3p5y7ara.rs:11:25\n   |\n\
    11 |         result.push(x * (xs.len() - 1));\n   |                         ^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot multiply `isize` by\
    \ `usize`\n  --> /tmp/tmp3p5y7ara.rs:11:23\n   |\n11 |         result.push(x *\
    \ (xs.len() - 1));\n   |                       ^ no implementation for `isize\
    \ * usize`\n   |\n   = help: the trait `Mul<usize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = [xs[0]];\n    for i in 1..xs.len() {\n        result.push(xs[i] + result[i\
    \ - 1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for array `[isize; 1]` in the\
    \ current scope\n  --> /tmp/tmpmdr01nf4.rs:11:16\n   |\n11 |         result.push(xs[i]\
    \ + result[i - 1]);\n   |                ^^^^ method not found in `[isize; 1]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmdr01nf4.rs:13:5\n   |\n8  | fn\
    \ derivative(xs: Vec<isize>) -> Vec<isize> {\n   |                           \
    \       ---------- expected `Vec<isize>` because of return type\n...\n13 |   \
    \  result\n   |     ^^^^^^- help: try using a conversion method: `.to_vec()`\n\
    \   |     |\n   |     expected struct `Vec`, found array `[isize; 1]`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n               found array `[isize;\
    \ 1]`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let n\
    \ = xs.len() - 1;\n    vec![xs[1..n].iter().sum().cloned() .. (xs[n - 1] * xs[n\
    \ - 1])].to_owned()\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp0hnaoz_0.rs:10:26\n\
    \   |\n10 |     vec![xs[1..n].iter().sum().cloned() .. (xs[n - 1] * xs[n - 1])].to_owned()\n\
    \   |                          ^^^ cannot infer type for type parameter `S` declared\
    \ on the associated function `sum`\n   |\n   = note: type must be known at this\
    \ point\nhelp: consider specifying the type argument in the method call\n   |\n\
    10 |     vec![xs[1..n].iter().sum::<S>().cloned() .. (xs[n - 1] * xs[n - 1])].to_owned()\n\
    \   |                             +++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp0hnaoz_0.rs:10:5\n   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                  ---------- expected `Vec<isize>` because\
    \ of return type\n9  |     let n = xs.len() - 1;\n10 |     vec![xs[1..n].iter().sum().cloned()\
    \ .. (xs[n - 1] * xs[n - 1])].to_owned()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found struct `std::ops::Range`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<std::ops::Range<isize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0282, E0308.\nFor more information about an error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x = xs[0];\n    let mut dydxs = vec![xs.iter().rev().skip(1).sum::<isize>()];\n\
    \    for &i in xs.iter().rev() {\n        if i > 0 {\n            x += i;\n  \
    \          dydxs.push(x / i);\n        }\n    }\n    dydxs\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10, 1, 3, 7, 15, 6]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpqkp11qcl.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x = 0.0_isize;\n    let mut res = Vec::with_capacity(xs.len());\n    for i in\
    \ 0..xs.len() {\n        if i != 0 {\n            x /= xs[i];\n        } else\
    \ {\n            x = 1.0_isize;\n        }\n        res.push(x * xs[i]);\n   \
    \ }\n    res\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error: invalid suffix `isize` for float literal\n --> /tmp/tmp6jkui6yi.rs:9:17\n\
    \  |\n9 |     let mut x = 0.0_isize;\n  |                 ^^^^^^^^^ invalid suffix\
    \ `isize`\n  |\n  = help: valid suffixes are `f32` and `f64`\n\nerror: invalid\
    \ suffix `isize` for float literal\n  --> /tmp/tmp6jkui6yi.rs:15:17\n   |\n15\
    \ |             x = 1.0_isize;\n   |                 ^^^^^^^^^ invalid suffix\
    \ `isize`\n   |\n   = help: valid suffixes are `f32` and `f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.is_empty()\
    \ {\n        return vec![1];\n    }\n    let mut x = xs.last().unwrap();\n   \
    \ let mut result = vec![1isize];\n    for y in xs.iter().rev() {\n        if *y\
    \ != x {\n            result *= y;\n        } else {\n            result *= x;\n\
    \        }\n        x /= y;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzu6nydr7.rs:15:18\n   |\n\
    15 |         if *y != x {\n   |                  ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n15 |         if *y != *x\
    \ {\n   |                  +\n\nerror[E0368]: binary assignment operation `*=`\
    \ cannot be applied to type `Vec<isize>`\n  --> /tmp/tmpzu6nydr7.rs:16:13\n  \
    \ |\n16 |             result *= y;\n   |             ------^^^^^\n   |       \
    \      |\n   |             cannot use `*=` on type `Vec<isize>`\n\nerror[E0368]:\
    \ binary assignment operation `*=` cannot be applied to type `Vec<isize>`\n  -->\
    \ /tmp/tmpzu6nydr7.rs:18:13\n   |\n18 |             result *= x;\n   |       \
    \      ------^^^^^\n   |             |\n   |             cannot use `*=` on type\
    \ `Vec<isize>`\n\nerror[E0368]: binary assignment operation `/=` cannot be applied\
    \ to type `&isize`\n  --> /tmp/tmpzu6nydr7.rs:20:9\n   |\n20 |         x /= y;\n\
    \   |         -^^^^^\n   |         |\n   |         cannot use `/=` on type `&isize`\n\
    \   |\nhelp: `/=` can be used on `isize`, you can dereference `x`\n   |\n20 |\
    \         *x /= y;\n   |         +\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dxs = Vec::with_capacity(xs.len());\n    for i in 0..(xs.len() - 1) {\n    \
    \    let mut c = 0;\n        for j in (0..(xs.len() - 1 - i)).rev() {\n      \
    \      c += xs[j] * xs[j + 1];\n        }\n        dxs.push(c);\n    }\n    dxs\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[33, 13, 5, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpmvo7m2tu.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    // xs[0]\
    \ = 3\n    // xs[1] = 1\n    // xs[2] = 2\n    // xs[3] = 3 * x\n    // xs[4]\
    \ = 3 * 2\n    // xs[5] = 4\n    let mut ret = vec![];\n    let n = xs.len();\n\
    \    for i in 0..n {\n        let term = if i == 1 {\n            1\n        }\
    \ else {\n            (*xs[i - 1] + 1) / (*xs[i])\n        };\n        ret.push(term);\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpm4v3ha5z.rs:21:14\n\
    \   |\n21 |             (*xs[i - 1] + 1) / (*xs[i])\n   |              ^^^^^^^^^^\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpm4v3ha5z.rs:21:32\n\
    \   |\n21 |             (*xs[i - 1] + 1) / (*xs[i])\n   |                    \
    \            ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut len = xs.len();\n    while len > 0 {\n       \
    \ if len == 1 {\n            result.push(1);\n        } else {\n            result.push(xs[len\
    \ - 2]);\n            result.push(xs[len - 1]);\n        }\n        len -= 2;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpbvywws7z.rs:18:9\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = vec![];\n    for i in xs.iter() {\n        res.append(xs[0] + i * xs[1]);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphtx262z_.rs:11:20\n   |\n\
    11 |         res.append(xs[0] + i * xs[1]);\n   |                    ^^^^^^^^^^^^^^^^^\
    \ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference\
    \ `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret: Vec<isize> = xs.clone();\n    let mut len = ret.len();\n    let mut i =\
    \ 1;\n    while i < len {\n        if ret[i - 1] != 0 {\n            ret[i - 1]\
    \ += ret[i] - ret[i - 1] * ret[i - 1];\n        }\n        if ret[i] != 0 {\n\
    \            ret[i - 1] += ret[i];\n        }\n        i += 1;\n    }\n    ret\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-4, 4, 6, -2, 5]`,\n right: `[1, 4, 12, 20]`', /tmp/tmppw1412bo.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n    dx.push(1);\n\
    \    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpk1rasz6z.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    debug_assert!(\n\
    \        xs.len() >= 1,\n        \"derivative requires at least one input\"\n\
    \    );\n\n    let mut deriv = xs.clone();\n    for d in &deriv[..] {\n      \
    \  let x = *d;\n        deriv.insert(x, deriv[x] - 1);\n    }\n    deriv\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe3p9l8f_.rs:17:22\n   |\n\
    17 |         deriv.insert(x, deriv[x] - 1);\n   |                      ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |         deriv.insert(x.try_into().unwrap(),\
    \ deriv[x] - 1);\n   |                       ++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe3p9l8f_.rs:17:25\n\
    \   |\n17 |         deriv.insert(x, deriv[x] - 1);\n   |                     \
    \    ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n \
    \  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  \
    \ = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = Vec::new();\n    \n    for i in 0..(xs.len() - 1) {\n        res.push(Derivative::new(xs[i],\
    \ xs[i + 1]));\n    }\n    \n    res\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Derivative`\n\
    \  --> /tmp/tmpxp2bch3h.rs:12:18\n   |\n12 |         res.push(Derivative::new(xs[i],\
    \ xs[i + 1]));\n   |                  ^^^^^^^^^^ use of undeclared type `Derivative`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut a = xs.clone();\n    let mut b = xs.clone();\n\
    \    for i in a.iter_mut() {\n        *i += *i;\n    }\n    for i in b.iter_mut()\
    \ {\n        *i -= *i;\n    }\n    while a.len() > 0 {\n        let c = a.clone();\n\
    \        let mut f = c.clone();\n        for i in f.iter_mut() {\n           \
    \ *i = *i;\n        }\n        for j in c {\n            result.push(*j);\n  \
    \      }\n        a -= f;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp4wwwbe2a.rs:25:25\n\
    \   |\n25 |             result.push(*j);\n   |                         ^^\n\n\
    error[E0368]: binary assignment operation `-=` cannot be applied to type `Vec<isize>`\n\
    \  --> /tmp/tmp4wwwbe2a.rs:27:9\n   |\n27 |         a -= f;\n   |         -^^^^^\n\
    \   |         |\n   |         cannot use `-=` on type `Vec<isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0368, E0614.\n\
    For more information about an error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.is_empty()\
    \ {\n        return Vec::new();\n    }\n    let mut dp = vec![0isize..(xs.len()\
    \ - 1)]; // dp[i] = xs[i]\n    let mut i = 1;\n    while i < (xs.len() - 1) {\n\
    \        dp[i] = (xs[i] - xs[i-1]) / dx;\n        i += 1;\n    }\n    dp.into_iter().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `dx` in this scope\n  --> /tmp/tmp01d43c0v.rs:15:37\n\
    \   |\n15 |         dp[i] = (xs[i] - xs[i-1]) / dx;\n   |                    \
    \                 ^^ help: a local variable with a similar name exists: `dp`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp01d43c0v.rs:12:31\n   |\n12 |\
    \     let mut dp = vec![0isize..(xs.len() - 1)]; // dp[i] = xs[i]\n   |      \
    \                         ^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp01d43c0v.rs:15:17\n   |\n15 |         dp[i]\
    \ = (xs[i] - xs[i-1]) / dx;\n   |         -----   ^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `std::ops::Range`, found `isize`\n   |         |\n   |         expected\
    \ due to the type of this binding\n   |\n   = note: expected struct `std::ops::Range<isize>`\n\
    \                found type `isize`\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `std::ops::Range<isize>`\n\
    \    --> /tmp/tmp01d43c0v.rs:18:26\n     |\n18   |     dp.into_iter().rev().collect()\n\
    \     |                          ^^^^^^^ value of type `Vec<isize>` cannot be\
    \ built from `std::iter::Iterator<Item=std::ops::Range<isize>>`\n     |\n    \
    \ = help: the trait `FromIterator<std::ops::Range<isize>>` is not implemented\
    \ for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for\
    \ `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ == 1 {\n        return xs\n    }\n    match xs[0] {\n        0 => [1isize]\n\
    \        1 => [2isize]\n        _ => xs[1..].iter().cloned().cloned().zip(xs[1..]).map(|(dx,\
    \ dy)| dx + dy * dx).collect()\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `1`\n\
    \  --> /tmp/tmp3rtsu1zj.rs:14:9\n   |\n13 |         0 => [1isize]\n   |      \
    \     --         - expected one of `,`, `.`, `?`, `}`, or an operator\n   |  \
    \         |\n   |           while parsing the `match` arm starting here\n14 |\
    \         1 => [2isize]\n   |         ^ unexpected token\n\nerror: aborting due\
    \ to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    assert!(xs.len()\
    \ >= 1);\n\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    let mut n = 0;\n\
    \    for a in xs.iter() {\n        n += a;\n    }\n\n    let mut d = 0;\n    for\
    \ i in 1..xs.len() {\n        d += xs[0] / i;\n    }\n    d += 1;\n    d * xs.iter().map(|&a|\
    \ a).collect()\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmdstigsb.rs:19:22\n   |\n\
    19 |         d += xs[0] / i;\n   |                      ^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: cannot divide `isize` by `usize`\n  --> /tmp/tmpmdstigsb.rs:19:20\n\
    \   |\n19 |         d += xs[0] / i;\n   |                    ^ no implementation\
    \ for `isize / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.is_empty()\
    \ {\n        return vec![];\n    }\n    let len = xs.len() - 1;\n    let mut d\
    \ = vec![1isize; len];\n    for i in 0..len {\n        let mut k = i;\n      \
    \  for j in 0..i {\n            let mut jk = j * k;\n            while jk <= len\
    \ {\n                if jk >= len {\n                    break;\n            \
    \    }\n                let xi = xs[jk];\n                let mut c = 0;\n   \
    \             for j in 0..i {\n                    let xj = xs[j];\n         \
    \           c += xj * xi;\n                }\n                d[i] += c * d[k];\n\
    \                jk += 1;\n            }\n            k += 1;\n        }\n   \
    \ }\n    d\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3640, 9961, 43225]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpxf2_5x62.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = xs[..];\n    let mut prev = xs[..];\n    for i in xs.iter().rev() {\n\
    \        result[i] = prev[i] - prev[i] * result[i] / result[i];\n        prev[i]\
    \ = prev[i] * result[i] / result[i];\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n --> /tmp/tmp7arq8o7u.rs:9:9\n  |\n9 |     let mut result\
    \ = xs[..];\n  |         ^^^^^^^^^^ doesn't have a size known at compile-time\n\
    \  |\n  = help: the trait `Sized` is not implemented for `[isize]`\n  = note:\
    \ all local variables must have a statically known size\n  = help: unsized locals\
    \ are gated as an unstable feature\nhelp: consider borrowing here\n  |\n9 |  \
    \   let mut result = &xs[..];\n  |                      +\n\nerror[E0277]: the\
    \ size for values of type `[isize]` cannot be known at compilation time\n  -->\
    \ /tmp/tmp7arq8o7u.rs:10:9\n   |\n10 |     let mut prev = xs[..];\n   |      \
    \   ^^^^^^^^ doesn't have a size known at compile-time\n   |\n   = help: the trait\
    \ `Sized` is not implemented for `[isize]`\n   = note: all local variables must\
    \ have a statically known size\n   = help: unsized locals are gated as an unstable\
    \ feature\nhelp: consider borrowing here\n   |\n10 |     let mut prev = &xs[..];\n\
    \   |                    +\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `&isize`\n  --> /tmp/tmp7arq8o7u.rs:12:9\n   |\n12 |         result[i] =\
    \ prev[i] - prev[i] * result[i] / result[i];\n   |         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `[isize]`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `&isize`\n  --> /tmp/tmp7arq8o7u.rs:12:21\n   |\n12 |         result[i]\
    \ = prev[i] - prev[i] * result[i] / result[i];\n   |                     ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<&isize>` for `[isize]`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `&isi"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    // First\
    \ derivative is simply the second derivative, times 2\n    // The only reason\
    \ we need to multiply by 2 is for consistency\n    // with our recursive formula,\
    \ which does x^4 + x * x^3\n\n    let mut dxs = Vec::new();\n    dxs.push(xs[1]);\n\
    \n    let mut two = I::zero();\n\n    for i in 2..(xs.len() - 1) {\n        two.add(xs[i]);\n\
    \        dxs.push(two);\n        two = two.mult(2);\n    }\n\n    dxs\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `I`\n  --> /tmp/tmpaxcw1b7f.rs:16:19\n\
    \   |\n16 |     let mut two = I::zero();\n   |                   ^ use of undeclared\
    \ type `I`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for i in 0..xs.len() - 1 {\n        result.push(xs[i +\
    \ 1] - xs[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp9s7u_20n.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = vec![0isize; xs.len()];\n    for i in 0..xs.len() {\n        ys[i] = xs[i]\
    \ - xs.len() - i - 1;\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpguln5mjv.rs:11:25\n   |\n\
    11 |         ys[i] = xs[i] - xs.len() - i - 1;\n   |                         ^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot subtract `usize` from\
    \ `isize`\n  --> /tmp/tmpguln5mjv.rs:11:23\n   |\n11 |         ys[i] = xs[i] -\
    \ xs.len() - i - 1;\n   |                       ^ no implementation for `isize\
    \ - usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpguln5mjv.rs:11:36\n   |\n11 |         ys[i]\
    \ = xs[i] - xs.len() - i - 1;\n   |                                    ^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot subtract `usize` from `isize`\n\
    \  --> /tmp/tmpguln5mjv.rs:11:34\n   |\n11 |         ys[i] = xs[i] - xs.len()\
    \ - i - 1;\n   |                                  ^ no implementation for `isize\
    \ - usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ < 2 {\n        xs\n    } else {\n        xs[1..].iter().cloned().chain(xs.iter().cloned())\n\
    \            .map(|a| a * &xs[0]).collect()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 6, 12, 15, 9, 3, 6, 12, 15]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpf3w9wi7i.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut n = 0;\n\n    for d in xs {\n        let d2\
    \ = d * (*n) / (*n - 1);\n        result.append(d2);\n        *n += 1;\n    }\n\
    \n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmplma5yar5.rs:13:22\n\
    \   |\n13 |         let d2 = d * (*n) / (*n - 1);\n   |                      ^^^^\n\
    \nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmplma5yar5.rs:13:30\n\
    \   |\n13 |         let d2 = d * (*n) / (*n - 1);\n   |                      \
    \        ^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplma5yar5.rs:14:23\n\
    \   |\n14 |         result.append(d2);\n   |                       ^^ expected\
    \ `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<_>`\n                           found type `isize`\n\nerror[E0614]: type\
    \ `{integer}` cannot be dereferenced\n  --> /tmp/tmplma5yar5.rs:15:9\n   |\n15\
    \ |         *n += 1;\n   |         ^^\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = vec![];\n\n    for i in (0..(xs.len() - 1)).rev() {\n        ys.push(ys.last()\
    \ + xs[i] * xs[i + 1]);\n    }\n\n    ys\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `isize` to `Option<&_>`\n  --> /tmp/tmpntc9dj_9.rs:12:27\n\
    \   |\n12 |         ys.push(ys.last() + xs[i] * xs[i + 1]);\n   |            \
    \     --------- ^ ----------------- isize\n   |                 |\n   |      \
    \           Option<&_>\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x = Vec::new();\n    let mut y = Vec::new();\n    for y in xs.iter().rev() {\n\
    \        x.push(-y);\n        let mut sum = 1;\n        for _ in 0..x.len() {\n\
    \            sum += (*x) as isize;\n            x.pop();\n        }\n        y.push(sum);\n\
    \    }\n    y\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmp9_3d45pp.rs:18:11\n   |\n18 |         y.push(sum);\n\
    \   |           ^^^^ method not found in `&isize`\n\nerror[E0605]: non-primitive\
    \ cast: `[isize]` as `isize`\n  --> /tmp/tmp9_3d45pp.rs:15:20\n   |\n15 |    \
    \         sum += (*x) as isize;\n   |                    ^^^^^^^^^^^^^ an `as`\
    \ expression can only be used to convert between primitive types or to coerce\
    \ to a specific trait object\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0599, E0605.\nFor more information about\
    \ an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut x = 0;\n    for i in xs.iter_mut() {\n   \
    \     *i += x;\n        x += 1;\n    }\n    for _ in xs.iter_mut() {\n       \
    \ result.push(0);\n    }\n    for i in 0..xs.len() {\n        let mut tmp = 0;\n\
    \        for j in 0..i {\n            tmp += xs[j] * result[j];\n        }\n \
    \       for j in 0..i {\n            result[j] -= xs[i] * tmp;\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `xs` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmp0atp1tcg.rs:11:14\n   |\n8  | fn derivative(xs: Vec<isize>) ->\
    \ Vec<isize> {\n   |               -- help: consider changing this to be mutable:\
    \ `mut xs`\n...\n11 |     for i in xs.iter_mut() {\n   |              ^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `xs` as mutable, as\
    \ it is not declared as mutable\n  --> /tmp/tmp0atp1tcg.rs:15:14\n   |\n8  | fn\
    \ derivative(xs: Vec<isize>) -> Vec<isize> {\n   |               -- help: consider\
    \ changing this to be mutable: `mut xs`\n...\n15 |     for _ in xs.iter_mut()\
    \ {\n   |              ^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ d = 0;\n    for i in xs.iter_mut() {\n        *i += d;\n        d += 1;\n  \
    \  }\n    xs.iter_mut().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::IterMut<'_, isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpivr_v92t.rs:14:19\n     |\n14   |\
    \     xs.iter_mut().cloned().collect()\n     |                   ^^^^^^ types\
    \ differ in mutability\n     |\n     = note:      expected reference `&_`\n  \
    \           found mutable reference `&mut isize`\nnote: required by a bound in\
    \ `cloned`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<std::slice::IterMut<'_,\
    \ isize>>`, but its trait bounds were not satisfied\n   --> /tmp/tmpivr_v92t.rs:14:28\n\
    \    |\n14  |       xs.iter_mut().cloned().collect()\n    |                  \
    \            ^^^^^^^ method cannot be called on `Cloned<std::slice::IterMut<'_,\
    \ isize>>` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `<std::slice::IterMut<'_, isize> as\
    \ Iterator>::Item = &_`\n            which is required by `Cloned<std::slice::IterMut<'_,\
    \ isize>>: Iterator`\n            `Cloned<std::slice::IterMut<'_, isize>>: Iterator`\n\
    \            which is required by `&mut Cloned<std::slice::IterMut<'_, isize>>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ < 2 {\n        vec![1]\n    } else {\n        vec![xs[0] as isize - 1] + derivative(xs.iter().skip(1))\n\
    \    }\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpamdh3qxd.rs:12:47\n   |\n\
    12 |         vec![xs[0] as isize - 1] + derivative(xs.iter().skip(1))\n   |  \
    \                                             ^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found struct `Skip`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Skip<std::slice::Iter<'_, isize>>`\n\nerror[E0369]:\
    \ cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpamdh3qxd.rs:12:34\n \
    \  |\n12 |         vec![xs[0] as isize - 1] + derivative(xs.iter().skip(1))\n\
    \   |         ------------------------ ^ ----------------------------- Vec<isize>\n\
    \   |         |\n   |         Vec<isize>\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    vec_dot(&xs,\
    \ &xs, vec![1])\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `vec_dot` in this scope\n --> /tmp/tmpk9oq1jsj.rs:9:5\n\
    \  |\n9 |     vec_dot(&xs, &xs, vec![1])\n  |     ^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<_> = xs.iter().rev().cloned().collect();\n    dx.push((xs.len() - 1)\
    \ * xs.len() - dx[-1]);\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error: negative integers cannot be used to index on a `Vec<isize>`\n  -->\
    \ /tmp/tmplqs00268.rs:10:44\n   |\n10 |     dx.push((xs.len() - 1) * xs.len()\
    \ - dx[-1]);\n   |                                            ^^ cannot use a\
    \ negative integer for indexing on `Vec<isize>`\n   |\nhelp: to access an element\
    \ starting from the end of the `Vec<isize>`, compute the index\n   |\n10 |   \
    \  dx.push((xs.len() - 1) * xs.len() - dx[dx.len() -1]);\n   |               \
    \                             ++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplqs00268.rs:10:13\n   |\n10 |     dx.push((xs.len() - 1) * xs.len()\
    \ - dx[-1]);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n10 |     dx.push(((xs.len() - 1) *\
    \ xs.len() - dx[-1]).try_into().unwrap());\n   |             +               \
    \                   +++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ deriv = 0;\n    for i in xs.iter() {\n        deriv += i;\n    }\n    deriv.into()\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `Vec<isize>: From<isize>` is not satisfied\n\
    \  --> /tmp/tmpaqm62lqo.rs:13:11\n   |\n13 |     deriv.into()\n   |          \
    \ ^^^^ the trait `From<isize>` is not implemented for `Vec<isize>`\n   |\n   =\
    \ help: the following other types implement trait `From<T>`:\n             <Vec<T,\
    \ A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n\
    \             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n\
    \             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a,\
    \ [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n\
    \           and 2 others\n   = note: required because of the requirements on the\
    \ impl of `Into<Vec<isize>>` for `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ == 1 {\n        vec![1.0]\n    } else {\n        let mut result = vec![0.0;\
    \ xs.len() - 1];\n        for i in 0..xs.len() - 1 {\n            result[i] =\
    \ xs[i] - xs[i + 1];\n        }\n        result\n    }\n}\n\nfn main() {\n   \
    \ let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz02bfzt0.rs:10:14\n   |\n\
    10 |         vec![1.0]\n   |              ^^^ expected `isize`, found floating-point\
    \ number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz02bfzt0.rs:14:25\n\
    \   |\n14 |             result[i] = xs[i] - xs[i + 1];\n   |             ---------\
    \   ^^^^^^^^^^^^^^^^^ expected floating-point number, found `isize`\n   |    \
    \         |\n   |             expected due to the type of this binding\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpz02bfzt0.rs:16:9\n   |\n8  | fn derivative(xs:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                  ----------\
    \ expected `Vec<isize>` because of return type\n...\n16 |         result\n   |\
    \         ^^^^^^ expected `isize`, found floating-point number\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<{float}>`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ product = 1.0;\n    let mut result = Vec::new();\n    for x in xs {\n      \
    \  let p = x * product;\n        result.push(p);\n        product *= x;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpl15u9j0a.rs:12:19\n\
    \   |\n12 |         let p = x * product;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply-assign `{float}` by `isize`\n  -->\
    \ /tmp/tmpl15u9j0a.rs:14:17\n   |\n14 |         product *= x;\n   |          \
    \       ^^ no implementation for `{float} *= isize`\n   |\n   = help: the trait\
    \ `MulAssign<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `MulAssign<Rhs>`:\n             <f32 as MulAssign<&f32>>\n\
    \             <f32 as MulAssign>\n             <f64 as MulAssign<&f64>>\n    \
    \         <f64 as MulAssign>\n             <i128 as MulAssign<&i128>>\n      \
    \       <i128 as MulAssign>\n             <i16 as MulAssign<&i16>>\n         \
    \    <i16 as MulAssign>\n           and 20 others\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ == 0 {\n        return vec![];\n    }\n    if xs.len() == 1 {\n        return\
    \ vec![xs[0]];\n    }\n    let mut ans = vec![0isize];\n    let mut m = 1;\n \
    \   for i in xs.iter().rev() {\n        ans[i] = m;\n        m *= i;\n    }\n\
    \    for x in xs {\n        let mut i = 0;\n        while i < xs.len() {\n   \
    \         ans[i] *= x;\n            i += 1;\n        }\n    }\n    ans\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpr0ujgnu0.rs:18:9\n\
    \   |\n18 |         ans[i] = m;\n   |         ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<_> = xs.clone();\n    for i in 1..result.len() {\n        result[i]\
    \ = result[i] + result[i - 1];\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4, 6, 10, 15]`,\n right: `[1, 4, 12, 20]`', /tmp/tmppvr03q8s.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = xs.clone();\n    result[0] -= 1;\n    for i in 1..result.len()\
    \ {\n        let mut j = i;\n        while j > 1 {\n            result[j] -= result[j\
    \ - 1] * result[j];\n            j -= 1;\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 0, 4, -15]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp9m1vph8o.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.is_empty()\
    \ {\n        return Vec::new();\n    }\n    let mut res = Vec::new();\n    let\
    \ mut k = 0.0;\n    for x in xs.iter() {\n        if x <= 2 {\n            res.push(1);\n\
    \        }\n        else {\n            res.push(k * (x - 1));\n        }\n  \
    \      k += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxf0fj_vn.rs:15:17\n   |\n\
    15 |         if x <= 2 {\n   |                 ^\n   |                 |\n   |\
    \                 expected `&isize`, found integer\n   |                 help:\
    \ consider borrowing here: `&2`\n\nerror[E0277]: cannot multiply `{float}` by\
    \ `isize`\n  --> /tmp/tmpxf0fj_vn.rs:19:24\n   |\n19 |             res.push(k\
    \ * (x - 1));\n   |                        ^ no implementation for `{float} *\
    \ isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot add-assign `{integer}` to `{float}`\n  --> /tmp/tmpxf0fj_vn.rs:21:11\n\
    \   |\n21 |         k += 1;\n   |           ^^ no implementation for `{float}\
    \ += {integer}`\n   |\n   = help: the trait `AddAssign<{integer}>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for x in xs {\n        result.push(1);\n        for y\
    \ in result.iter().rev() {\n            y.mul(x);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `mul` found for reference `&{integer}` in\
    \ the current scope\n  --> /tmp/tmpsv13oxdi.rs:13:15\n   |\n13 |             y.mul(x);\n\
    \   |               ^^^ method not found in `&{integer}`\n   |\n   = help: items\
    \ from traits can only be used if the trait is in scope\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use\
    \ std::ops::Mul;\n   |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dp = vec![];\n    dp.push(xs[0]);\n    for i in 1..(xs.len() - 1) {\n      \
    \  let mut s = 0.;\n        let mut d = xs[i];\n        for j in 0..(i + 1) {\n\
    \            s += d * d;\n            d *= xs[j];\n        }\n        dp.push(s);\n\
    \    }\n    dp.push(xs.len());\n    dp.reverse();\n    dp.to_owned()\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmphctcemt7.rs:15:15\n\
    \   |\n15 |             s += d * d;\n   |               ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphctcemt7.rs:18:17\n\
    \   |\n18 |         dp.push(s);\n   |                 ^ expected `isize`, found\
    \ floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphctcemt7.rs:20:13\n\
    \   |\n20 |     dp.push(xs.len());\n   |             ^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     dp.push(xs.len().try_into().unwrap());\n\
    \   |                     ++++++++++++++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dy: Vec<isize> = xs.clone();\n    dy.pop();\n    for y in &dy {\n        for\
    \ i in 0..3 {\n            dy.push(y * (i + 1));\n        }\n    }\n    dy\n}\n\
    \nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `dy` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmp4paut_mx.rs:13:13\n   |\n11 |     for y in &dy {\n\
    \   |              ---\n   |              |\n   |              immutable borrow\
    \ occurs here\n   |              immutable borrow later used here\n12 |      \
    \   for i in 0..3 {\n13 |             dy.push(y * (i + 1));\n   |            \
    \ ^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ < 1 {\n        return vec![];\n    }\n    let mut dp = vec![];\n    dp.push(xs.last());\n\
    \    for i in xs.iter().rev() {\n        if i < 0 {\n            return vec![];\n\
    \        }\n        let mut d = 0;\n        for j in xs.iter() {\n           \
    \ d += i * j;\n        }\n        dp.push(d);\n    }\n    return dp;\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpblz2bplu.rs:15:16\n   |\n\
    15 |         if i < 0 {\n   |                ^\n   |                |\n   |  \
    \              expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpblz2bplu.rs:22:17\n\
    \   |\n22 |         dp.push(d);\n   |                 ^ expected enum `Option`,\
    \ found `isize`\n   |\n   = note: expected enum `Option<&isize>`\n           \
    \   found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpblz2bplu.rs:24:12\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<_>` because of return type\n...\n\
    24 |     return dp;\n   |            ^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<&isize>>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    Vec::new()\n\
    \        .iter()\n        .zip(x.iter().cloned())\n        .zip(ys.iter().cloned())\n\
    \        .map(|(x, y) | (y, x))\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `x` in this scope\n  --> /tmp/tmp7vw960qn.rs:11:14\n\
    \   |\n11 |         .zip(x.iter().cloned())\n   |              ^ help: a local\
    \ variable with a similar name exists: `xs`\n\nerror[E0425]: cannot find value\
    \ `ys` in this scope\n  --> /tmp/tmp7vw960qn.rs:12:14\n   |\n12 |         .zip(ys.iter().cloned())\n\
    \   |              ^^ help: a local variable with a similar name exists: `xs`\n\
    \nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `(_, (&_, _))`\n    --> /tmp/tmp7vw960qn.rs:14:10\n  \
    \   |\n14   |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=(_, (&_, _))>`\n     |\n    \
    \ = help: the trait `FromIterator<(_, (&_, _))>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ d: Vec<isize> = xs.clone();\n    for i in 0..d.len() - 1 {\n        let mut\
    \ d = d.iter_mut();\n        let mut f = d.pop();\n        let mut x = d.pop();\n\
    \        for &mut x in d {\n            f = x * f;\n        }\n        d.append(f);\n\
    \    }\n    d\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `pop` found for struct `std::slice::IterMut`\
    \ in the current scope\n  --> /tmp/tmp4z67kqqh.rs:12:23\n   |\n12 |         let\
    \ mut f = d.pop();\n   |                       ^^^ method not found in `std::slice::IterMut<'_,\
    \ isize>`\n\nerror[E0599]: no method named `pop` found for struct `std::slice::IterMut`\
    \ in the current scope\n  --> /tmp/tmp4z67kqqh.rs:13:23\n   |\n13 |         let\
    \ mut x = d.pop();\n   |                       ^^^ method not found in `std::slice::IterMut<'_,\
    \ isize>`\n\nerror[E0599]: no method named `append` found for struct `std::slice::IterMut`\
    \ in the current scope\n  --> /tmp/tmp4z67kqqh.rs:17:11\n   |\n17 |         d.append(f);\n\
    \   |           ^^^^^^ method not found in `std::slice::IterMut<'_, isize>`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result: Vec<isize> = xs.clone() + vec![0isize];\n    for i in xs.iter() {\n\
    \        let mut temp: Vec<isize> = result.clone();\n        temp.push(-(*i));\n\
    \        result.push(temp[0]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n --> /tmp/tmpeyli3t00.rs:9:45\n\
    \  |\n9 |     let mut result: Vec<isize> = xs.clone() + vec![0isize];\n  |   \
    \                               ---------- ^ ------------ Vec<isize>\n  |    \
    \                              |\n  |                                  Vec<isize>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ deriv = Vec::new();\n    let mut x = 1;\n    for d in &mut deriv {\n       \
    \ *d = 0;\n    }\n\n    for x in xs.iter() {\n        for d in &mut deriv {\n\
    \            *d = *d + (*x) * x;\n        }\n    }\n    deriv\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 4, 12, 20]`', /tmp/tmplro8odfi.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    for i in 0..dx.len()\
    \ {\n        dx[i] *= xs[i];\n    }\n    return dx;\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp5itq916j.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ <= 1 {\n        return vec![];\n    }\n    let mut ds = vec![0isize..];\n  \
    \  ds[0] = *xs[0];\n    for i in 1..(xs.len() - 1) {\n        ds[i] = (ds[i -\
    \ 1] * xs[i - 1]) - (xs[i] * ds[i - 1]);\n    }\n    ds[xs.len() - 1]\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpz7qz9808.rs:13:13\n\
    \   |\n13 |     ds[0] = *xs[0];\n   |             ^^^^^^\n\nerror[E0369]: cannot\
    \ multiply `RangeFrom<isize>` by `isize`\n  --> /tmp/tmpz7qz9808.rs:15:28\n  \
    \ |\n15 |         ds[i] = (ds[i - 1] * xs[i - 1]) - (xs[i] * ds[i - 1]);\n   |\
    \                  --------- ^ --------- isize\n   |                  |\n   |\
    \                  RangeFrom<isize>\n\nerror[E0277]: cannot multiply `isize` by\
    \ `RangeFrom<isize>`\n  --> /tmp/tmpz7qz9808.rs:15:50\n   |\n15 |         ds[i]\
    \ = (ds[i - 1] * xs[i - 1]) - (xs[i] * ds[i - 1]);\n   |                     \
    \                             ^ no implementation for `isize * RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Mul<RangeFrom<isize>>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpz7qz9808.rs:17:5\n   |\n8  | fn derivative(xs:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                  ----------\
    \ expected `Vec<isize>` because of return type\n...\n17 |     ds[xs.len() - 1]\n\
    \   |     ^^^^^^^^^^^^^^^^ expected struct `Vec`, found struct `RangeFrom`\n \
    \  |\n   = note: expected struct `Vec<isize>`\n              found struct `RangeFrom<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0369, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![1isize];\n    for i in 1..xs.len() {\n        let mut temp = 0;\n\
    \        for j in 0..i {\n            temp = temp + xs[j] * result[j];\n     \
    \   }\n        result.push(temp);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 3, 6, 18, 90]`,\n right: `[1, 4, 12, 20]`', /tmp/tmptfcfednp.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    // xs[1]\
    \ - 2 * xs[0]\n    Vec::from_iter(\n        xs\n            .iter()\n        \
    \    .enumerate()\n            .map(|(i, x)| i * 2 - x).collect(),\n    )\n}\n\
    \nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `from_iter` found for\
    \ struct `Vec<_, _>` in the current scope\n  --> /tmp/tmp18q6j_0i.rs:10:10\n \
    \  |\n10 |     Vec::from_iter(\n   |          ^^^^^^^^^ function or associated\
    \ item not found in `Vec<_, _>`\n   |\n   = help: items from traits can only be\
    \ used if the trait is in scope\nhelp: the following trait is implemented but\
    \ not in scope; perhaps add a `use` for it:\n   |\n1  | use std::iter::FromIterator;\n\
    \   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp18q6j_0i.rs:14:35\n   |\n\
    14 |             .map(|(i, x)| i * 2 - x).collect(),\n   |                   \
    \                ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `&isize` from `usize`\n  --> /tmp/tmp18q6j_0i.rs:14:33\n   |\n14 |         \
    \    .map(|(i, x)| i * 2 - x).collect(),\n   |                               \
    \  ^ no implementation for `usize - &isize`\n   |\n   = help: the trait `Sub<&isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ i = 0;\n    let mut ds = Vec::new();\n    let mut ds = xs.clone();\n    while\
    \ i < xs.len() - 1 {\n        ds[i] = ds[i] * 2 - ds[i + 1];\n        ds[i + 1]\
    \ = 0;\n        i += 1;\n    }\n    ds.cloned()\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpz9r03m1_.rs:17:8\n\
    \    |\n17  |       ds.cloned()\n    |          ^^^^^^ `Vec<isize>` is not an\
    \ iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ product: isize = 1;\n    for x in xs {\n        product *= x;\n    }\n    let\
    \ mut out: Vec<isize> = xs.iter().cloned().collect();\n    out.push((product /\
    \ xs.len() - xs.len() * x[0]) as isize);\n    out\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `x` in this scope\n  --> /tmp/tmpf8y2_dys.rs:14:47\n\
    \   |\n14 |     out.push((product / xs.len() - xs.len() * x[0]) as isize);\n \
    \  |                                               ^ help: a local variable with\
    \ a similar name exists: `xs`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf8y2_dys.rs:14:25\n\
    \   |\n14 |     out.push((product / xs.len() - xs.len() * x[0]) as isize);\n \
    \  |                         ^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot divide `isize` by `usize`\n  --> /tmp/tmpf8y2_dys.rs:14:23\n   |\n14\
    \ |     out.push((product / xs.len() - xs.len() * x[0]) as isize);\n   |     \
    \                  ^ no implementation for `isize / usize`\n   |\n   = help: the\
    \ trait `Div<usize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf8y2_dys.rs:14:36\n   |\n14 |     out.push((product / xs.len()\
    \ - xs.len() * x[0]) as isize);\n   |                                    ^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot subtract `usize` from\
    \ `isize`\n  --> /tmp/tmpf8y2_dys.rs:14:34\n   |\n14 |     out.push((product /\
    \ xs.len() - xs.len() * x[0]) as isize);\n   |                               \
    \   ^ no implementation for `isize - usize`\n   |\n   = help: the trait `Sub<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror: a"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut current = vec![0];\n    for i\
    \ in 1..xs.len() {\n        current += xs[i - 1];\n    }\n    current\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<{integer}>`\n  --> /tmp/tmp5dpxog_m.rs:14:9\n   |\n14 |         current\
    \ += xs[i - 1];\n   |         -------^^^^^^^^^^^^^\n   |         |\n   |     \
    \    cannot use `+=` on type `Vec<{integer}>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0368`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ y = xs.clone();\n    for i in 0..y.len() {\n        y[i] = y[i] * y[i + 1];\n\
    \    }\n    y\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 5 but the index\
    \ is 5', /tmp/tmpu9b0btx2.rs:11:23\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dp = vec![xs[0]];\n    for i in 1..xs.len() {\n        let x = xs[i];\n    \
    \    dp.push((dp.last().unwrap() * x).unwrap() + x);\n    }\n    dp\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpxj57qltj.rs:12:42\n   |\n12 |         dp.push((dp.last().unwrap()\
    \ * x).unwrap() + x);\n   |                                          ^^^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    // if\
    \ degree is 0, return unit vector\n    if xs.len() == 0 {\n        return vec![];\n\
    \    }\n    if xs.len() == 1 {\n        return vec![xs[0]];\n    }\n\n    // Create\
    \ list of derivatives\n    let mut derivatives = vec![xs.clone()];\n    for i\
    \ in xs.len() - 1 {\n        derivatives.push(derivatives[i] + xs[i + 1]);\n \
    \   }\n\n    // If coefficient is zero return zero\n    if derivatives.iter().any(|&i|\
    \ i == 0) {\n        return vec![];\n    }\n\n    return derivatives\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `usize` is not an iterator\n  --> /tmp/tmpdqji5ksq.rs:19:14\n\
    \   |\n19 |     for i in xs.len() - 1 {\n   |              ^^^^^^^^^^^^ `usize`\
    \ is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `usize`\n   = note: if you want to iterate between `start` until a value\
    \ `end`, use the exclusive range syntax `start..end` or the inclusive range syntax\
    \ `start..=end`\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `usize`\n\nerror[E0277]: can't compare `Vec<isize>` with\
    \ `{integer}`\n  --> /tmp/tmpdqji5ksq.rs:24:38\n   |\n24 |     if derivatives.iter().any(|&i|\
    \ i == 0) {\n   |                                      ^^ no implementation for\
    \ `Vec<isize> == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `Vec<isize>`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n\
    \             <Vec<T, A> as PartialEq<&[U; N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n\
    \             <Vec<T, A> as PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<[U]>>\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdqji5ksq.rs:28:12\n   |\n8  | fn derivative(xs: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                  ---------- expected `Vec<_>`\
    \ because of return type\n...\n28 |     return derivatives\n   |            ^^^^^^^^^^^\
    \ expected `isize`, found struct `Vec`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<Vec<isize>>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.is_empty()\
    \ {\n        return vec![];\n    }\n\n    if xs.len() == 1 {\n        return vec![xs.iter().cloned().collect::<Vec<_>>()];\n\
    \    }\n\n    let mut s = vec![];\n    for x in xs {\n        s.push(x * x);\n\
    \    }\n    s.iter().cloned().collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1ad3hgx8.rs:14:21\n   |\n\
    14 |         return vec![xs.iter().cloned().collect::<Vec<_>>()];\n   |      \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ struct `Vec`\n   |\n   = note: expected type `isize`\n            found struct\
    \ `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut d = 0;\n    for i in 0..(xs.len() - 1) {\n\
    \        d += xs[i + 1] * d;\n        result.push(d);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpq3138q8o.rs:20:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ == 1 {\n        vec![1]\n    } else {\n        let mut ys = vec![];\n      \
    \  let mut x2 = vec![];\n        let mut x3 = vec![];\n        let mut x4 = vec![];\n\
    \        let mut x5 = vec![];\n        for &x in xs {\n            switch x {\n\
    \            case 1: ys.push(1);\n            break;\n            case 2: ys.push(2\
    \ * ys[0]);\n            x2.push(2 * xs[0]);\n            break;\n           \
    \ case 3: ys.push(3 * ys[0] + 2 * ys[1]);\n            x2.push(2 * xs[0] + 2 *\
    \ xs[1]);\n            x3.push(3 * xs[0] + 2 * xs[1] + 2 * xs[2]);\n         \
    \   break;\n            case 4: ys.push(4 * ys[0] + 3 * ys[1] + 2 * ys[2]);\n\
    \            x2.push(2 * xs[0] + 2 * xs[1] + 2 * xs[2] + 2 * xs[3]);\n       \
    \     x3.push(3 * xs[0] + 2 * xs[1] + 2 * xs[2] + 2 * xs[3] + 2 * xs[4]);\n  \
    \          break;\n            case 5: ys.push(5 * ys[0] + 4 * ys[1] + 3 * ys[2]\
    \ + 2 * ys[3]);\n            x2.push(2 * xs[0] + 2 * xs[1] + 2 * xs[2] + 2 * xs[3]\
    \ + 2 * xs[3] + 2 * xs[4] + xs[5]);\n            x3.push(3 * xs[0] + 2 * xs[1]\
    \ + 2 * xs[2] + 2 * xs[3] + 2 * xs[3] + 2 * xs[4] + xs[5] + xs[6]);\n        \
    \    x4\n                .append(xs[4] + 2 * xs[3] + 2 * xs[2] + 2 * xs[1] + 2\
    \ * xs[0])\n                .push(4 * xs[4] + 3 * xs[3] + 2 * xs[2] + 2 * xs[1]\
    \ + 2 * xs[0] + xs[5]);\n            x5\n                .append(xs[4] + 2 * xs[3]\
    \ + 2 * xs[2] + 2 * xs[1] + 2 * xs[0] + xs[5])\n                .push(5 * xs[4]\
    \ + 4 * xs[3] + 3 * xs[2] + 2 * xs[1] + 2 * xs[0] + xs[5] + xs[6]);\n        \
    \    break;\n            default: panic!(\"Derivative: unknown coefficient {}\"\
    , x);\n            }\n        }\n        ys.extend(x5);\n        ys.extend(x4);\n\
    \        ys.extend(x3);\n        ys.extend(x2);\n        ys.extend(xs);\n    \
    \    ys.sort();\n        ys\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found `x`\n  --> /tmp/tmprecwdzdv.rs:18:20\n   |\n18 |             switch x\
    \ {\n   |                    ^ expected one of 8 possible tokens\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprecwdzdv.rs:17:13\n   |\n17 |         for &x\
    \ in xs {\n   |             ^^    -- this expression has type `Option<isize>`\n\
    \   |             |\n   |             expected `isize`, found reference\n   |\
    \             help: you can probably remove the explicit borrow: `x`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = Vec::new();\n    let mut i = 0;\n    while i < xs.len() - 1 {\n      \
    \  res.push(xs[i / 2] + xs[i / 2] * xs[i as usize] + xs[i as usize] * (xs[i as\
    \ usize] * (xs[i as usize] - 1)));\n        i += 1;\n    }\n    if xs.len() %\
    \ 2 == 1 {\n        res.push(xs[i / 2]);\n    }\n    res\n}\n\nfn main() {\n \
    \   let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[30, 6, 7, 53, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp2v5q4q1i.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.is_empty()\
    \ {\n        return Vec::new();\n    }\n\n    let mut derivatives = Vec::new();\n\
    \    let mut c = xs[0];\n    derivatives.push(c as isize);\n    for &x in xs[1..]\
    \ {\n        derivatives.push(x * c as isize);\n        c = x;\n    }\n\n    derivatives\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmpw67sxkjt.rs:16:15\n   |\n16 |     for &x in\
    \ xs[1..] {\n   |               ^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \   |\n   = note: the trait bound `[isize]: IntoIterator` is not satisfied\n \
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `[isize]`\nhelp: consider borrowing here\n   |\n16 |     for &x in &xs[1..]\
    \ {\n   |               +\n16 |     for &x in &mut xs[1..] {\n   |           \
    \    ++++\n\nerror[E0277]: `[isize]` is not an iterator\n  --> /tmp/tmpw67sxkjt.rs:16:15\n\
    \   |\n16 |     for &x in xs[1..] {\n   |               ^^^^^^^ expected an implementor\
    \ of trait `IntoIterator`\n   |\n   = note: the trait bound `[isize]: IntoIterator`\
    \ is not satisfied\n   = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n   |\n16 | \
    \    for &x in &xs[1..] {\n   |               +\n16 |     for &x in &mut xs[1..]\
    \ {\n   |               ++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    match\
    \ xs.len() {\n        0 => Vec::new(),\n        _ => {\n            let x = xs.last().unwrap()\
    \ as isize;\n            xs.iter().cloned().enumerate().map(|(i, x)| {\n     \
    \           let k = i + 1;\n                x * (k - 1) / k\n            }).collect()\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkky4u1wt.rs:15:21\n   |\n\
    15 |                 x * (k - 1) / k\n   |                     ^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot multiply `isize` by `usize`\n\
    \  --> /tmp/tmpkky4u1wt.rs:15:19\n   |\n15 |                 x * (k - 1) / k\n\
    \   |                   ^ no implementation for `isize * usize`\n   |\n   = help:\
    \ the trait `Mul<usize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkky4u1wt.rs:15:31\n   |\n15 |                 x * (k -\
    \ 1) / k\n   |                               ^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n  --> /tmp/tmpkky4u1wt.rs:15:29\n\
    \   |\n15 |                 x * (k - 1) / k\n   |                            \
    \ ^ no implementation for `isize / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0606]: casting `&isize` as `isize` is invalid\n\
    \  --> /tmp/tmpkky4u1wt.rs:12:21\n   |\n12 |             let x = xs.last().unwrap()\
    \ as isize;\n   |                     ------------------^^^^^^^^^\n   |      \
    \               |\n   |                     cannot cast `&isize` as `isize`\n\
    \   |                     help: dereference the expression: `*xs.last().unwrap()`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed e"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    fn f(a:\
    \ isize, x: isize, n: isize) -> isize {\n        a.pow(n - 1) * x\n    }\n   \
    \ let n = xs.len();\n    if n < 2 {\n        return Vec::new();\n    }\n    let\
    \ mut f = &f(xs[0], xs[0], 1);\n    for i in 1..n {\n        f = &f(&xs[i - 1],\
    \ &xs[i], i);\n    }\n    f.iter().cloned().collect()\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0618]: expected function, found `&isize`\n  --> /tmp/tmpy7sojkee.rs:18:14\n\
    \   |\n16 |     let mut f = &f(xs[0], xs[0], 1);\n   |         ----- `f` has type\
    \ `&isize`\n17 |     for i in 1..n {\n18 |         f = &f(&xs[i - 1], &xs[i],\
    \ i);\n   |              ^-----------------------\n   |              |\n   | \
    \             call expression requires function\n\nerror[E0599]: no method named\
    \ `iter` found for reference `&isize` in the current scope\n  --> /tmp/tmpy7sojkee.rs:20:7\n\
    \   |\n20 |     f.iter().cloned().collect()\n   |       ^^^^ method not found\
    \ in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy7sojkee.rs:10:15\n\
    \   |\n10 |         a.pow(n - 1) * x\n   |               ^^^^^ expected `u32`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and panic if\
    \ the converted value doesn't fit\n   |\n10 |         a.pow((n - 1).try_into().unwrap())\
    \ * x\n   |               +     +++++++++++++++++++++\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0618.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v: Vec<isize> = xs.clone();\n    v.into_iter().rev().for_each(|&x| *v = if x\
    \ >= 1 { *v - x } else { 0 });\n    v\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkdacxr25.rs:10:35\n   |\n\
    10 |     v.into_iter().rev().for_each(|&x| *v = if x >= 1 { *v - x } else { 0\
    \ });\n   |                                   ^--\n   |                      \
    \             ||\n   |                                   |expected due to this\n\
    \   |                                   expected `isize`, found reference\n  \
    \ |                                   help: did you mean `x`: `&isize`\n   |\n\
    \   = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0369]:\
    \ cannot subtract `_` from `[isize]`\n  --> /tmp/tmpkdacxr25.rs:10:59\n   |\n\
    10 |     v.into_iter().rev().for_each(|&x| *v = if x >= 1 { *v - x } else { 0\
    \ });\n   |                                                        -- ^ - _\n\
    \   |                                                        |\n   |         \
    \                                               [isize]\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkdacxr25.rs:10:72\n   |\n10 |     v.into_iter().rev().for_each(|&x|\
    \ *v = if x >= 1 { *v - x } else { 0 });\n   |                               \
    \                                         ^ expected slice `[isize]`, found integer\n\
    \   |\nhelp: to create an array, use square brackets instead of curly braces\n\
    \   |\n10 |     v.into_iter().rev().for_each(|&x| *v = if x >= 1 { *v - x } else\
    \ [ 0 ]);\n   |                                                              \
    \        ~   ~\n\nerror[E0277]: the size for values of type `[isize]` cannot be\
    \ known at compilation time\n  --> /tmp/tmpkdacxr25.rs:10:39\n   |\n10 |     v.into_iter().rev().for_each(|&x|\
    \ *v = if x >= 1 { *v - x } else { 0 });\n   |                               \
    \        ^^ doesn't have a size known at compile-time\n   |\n   = help: the trait\
    \ `Sized` is not implemented for `[isize]`\n   = note: the left-hand-side of an\
    \ assignment must have a statically known size\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0369.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<isize> = xs.clone();\n    for i in 0..dx.len() {\n        dx[i] = dx[i]\
    \ - dx[i - 1] * xs[i - 1];\n    }\n    dx\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp1pk6fan_.rs:11:28\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = xs;\n    for (i, &mut y) in ys.iter_mut().zip(ys.iter()) {\n        if\
    \ i == 0 {\n            y = 0;\n        } else {\n            y = y * &xs[i -\
    \ 1] - &xs[i - 2];\n        }\n    }\n    ys\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1o4f2bfj.rs:10:13\n   |\n\
    10 |     for (i, &mut y) in ys.iter_mut().zip(ys.iter()) {\n   |             ^^^^^^\
    \     ---------------------------- this expression has type `Option<(&mut isize,\
    \ &isize)>`\n   |             |\n   |             types differ in mutability\n\
    \   |             help: you can probably remove the explicit borrow: `y`\n   |\n\
    \   = note:      expected reference `&isize`\n           found mutable reference\
    \ `&mut _`\n\nerror[E0277]: can't compare `&mut isize` with `{integer}`\n  -->\
    \ /tmp/tmp1o4f2bfj.rs:11:14\n   |\n11 |         if i == 0 {\n   |            \
    \  ^^ no implementation for `&mut isize == {integer}`\n   |\n   = help: the trait\
    \ `PartialEq<{integer}>` is not implemented for `&mut isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror[E0369]:\
    \ cannot subtract `{integer}` from `&mut isize`\n  --> /tmp/tmp1o4f2bfj.rs:14:27\n\
    \   |\n14 |             y = y * &xs[i - 1] - &xs[i - 2];\n   |               \
    \          - ^ - {integer}\n   |                         |\n   |             \
    \            &mut isize\n   |\nhelp: `-` can be used on `isize`, you can dereference\
    \ `i`\n   |\n14 |             y = y * &xs[*i - 1] - &xs[i - 2];\n   |        \
    \                 +\n\nerror[E0369]: cannot subtract `{integer}` from `&mut isize`\n\
    \  --> /tmp/tmp1o4f2bfj.rs:14:40\n   |\n14 |             y = y * &xs[i - 1] -\
    \ &xs[i - 2];\n   |                                      - ^ - {integer}\n   |\
    \                                      |\n   |                               \
    \       &mut isize\n   |\nhelp: `-` can be used on `isize`, you can dereference\
    \ `i`\n   |\n14 |             y = y * &xs[i - 1] - &xs[*i - 2];\n   |        \
    \                              +\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ret: Vec<isize> = xs.clone();\n    for i in ret.rev() {\n        let mut next\
    \ = 0;\n        for (j, &v) in ret.iter().zip(&xs) {\n            next += v *\
    \ j;\n        }\n        ret[i] = next / i;\n    }\n    ret\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpr6_kiczm.rs:10:18\n\
    \    |\n10  |       for i in ret.rev() {\n    |                    ^^^ `Vec<isize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    xs.iter().cloned().rev().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpom6ajhq_.rs:9:35\n  |\n9 |\
    \     xs.iter().cloned().rev().fold(1, |acc, x| acc * x)\n  |                \
    \                   ^ expected struct `Vec`, found integer\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n               found type `{integer}`\n\nerror[E0369]:\
    \ cannot multiply `Vec<isize>` by `isize`\n --> /tmp/tmpom6ajhq_.rs:9:51\n  |\n\
    9 |     xs.iter().cloned().rev().fold(1, |acc, x| acc * x)\n  |              \
    \                                 --- ^ - isize\n  |                         \
    \                      |\n  |                                               Vec<isize>\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ == 1 {\n        vec![xs[0]]\n    } else {\n        let mut ds: Vec<isize> =\
    \ xs.iter().cloned().collect();\n        ds.pop().unwrap();\n        ds.reverse();\n\
    \        ds\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 1, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpwjuf67xl.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ xs_d: Vec<isize> = xs.iter().cloned().collect();\n    xs_d.reverse();\n    for\
    \ x in xs_d {\n        xs_d.insert(xs_d.len() - x - 1, x);\n    }\n    xs_d\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp5506t96.rs:12:34\n   |\n\
    12 |         xs_d.insert(xs_d.len() - x - 1, x);\n   |                       \
    \           ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpp5506t96.rs:12:32\n   |\n12 |         xs_d.insert(xs_d.len()\
    \ - x - 1, x);\n   |                                ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ product = 1.;\n    for x in xs.iter() {\n        product *= x;\n    }\n    product\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply-assign `{float}` by `&isize`\n  --> /tmp/tmp48dhuvwl.rs:11:17\n\
    \   |\n11 |         product *= x;\n   |                 ^^ no implementation for\
    \ `{float} *= &isize`\n   |\n   = help: the trait `MulAssign<&isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `MulAssign<Rhs>`:\n\
    \             <f32 as MulAssign<&f32>>\n             <f32 as MulAssign>\n    \
    \         <f64 as MulAssign<&f64>>\n             <f64 as MulAssign>\n        \
    \     <i128 as MulAssign<&i128>>\n             <i128 as MulAssign>\n         \
    \    <i16 as MulAssign<&i16>>\n             <i16 as MulAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp48dhuvwl.rs:13:5\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    ...\n13 |     product\n   |     ^^^^^^^ expected struct `Vec`, found floating-point\
    \ number\n   |\n   = note: expected struct `Vec<isize>`\n                found\
    \ type `{float}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ < 2 {\n        return vec![];\n    }\n\n    let mut dp = vec![];\n    dp.push(xs.iter().product().cloned());\n\
    \n    for i in 2..(xs.len() - 1) {\n        let mut p = dp;\n        p.push(xs[i]\
    \ * (p.len() - i));\n\n        dp = p;\n    }\n\n    dp\n}\n\nfn main() {\n  \
    \  let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp58uiq5f2.rs:14:23\n\
    \   |\n14 |     dp.push(xs.iter().product().cloned());\n   |                 \
    \      ^^^^^^^ cannot infer type for type parameter `P` declared on the associated\
    \ function `product`\n   |\n   = note: type must be known at this point\nhelp:\
    \ consider specifying the type argument in the method call\n   |\n14 |     dp.push(xs.iter().product::<P>().cloned());\n\
    \   |                              +++++\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp58uiq5f2.rs:18:24\n   |\n18 |         p.push(xs[i] * (p.len() -\
    \ i));\n   |                        ^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot multiply `isize` by `usize`\n  --> /tmp/tmp58uiq5f2.rs:18:22\n\
    \   |\n18 |         p.push(xs[i] * (p.len() - i));\n   |                     \
    \ ^ no implementation for `isize * usize`\n   |\n   = help: the trait `Mul<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0282, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ ys = Vec::with_capacity(xs.len());\n\n    for i in xs.iter() {\n        if i\
    \ > 0 {\n            ys.push(i / xs.last() + 1);\n        } else {\n         \
    \   ys.push(1);\n        }\n    }\n\n    ys\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppf4javan.rs:12:16\n   |\n\
    12 |         if i > 0 {\n   |                ^\n   |                |\n   |  \
    \              expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&0`\n\nerror[E0277]: cannot divide `&isize` by `Option<&isize>`\n\
    \  --> /tmp/tmppf4javan.rs:13:23\n   |\n13 |             ys.push(i / xs.last()\
    \ + 1);\n   |                       ^ no implementation for `&isize / Option<&isize>`\n\
    \   |\n   = help: the trait `Div<Option<&isize>>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dx: Vec<_> = xs.iter().rev().enumerate().fold(Vec<_>::new(), |mut acc, (ix,\
    \ xv)| {\n        let mut res = xv.clone();\n        acc.push(res.iter().sum());\n\
    \        res\n    });\n    dx.reverse();\n    dx\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n --> /tmp/tmpd54lymvd.rs:9:62\n\
    \  |\n9 |     let mut dx: Vec<_> = xs.iter().rev().enumerate().fold(Vec<_>::new(),\
    \ |mut acc, (ix, xv)| {\n  |                                                 \
    \             ^ ^\n  |\nhelp: use `::<...>` instead of `<...>` to specify lifetime,\
    \ type, or const arguments\n  |\n9 |     let mut dx: Vec<_> = xs.iter().rev().enumerate().fold(Vec::<_>::new(),\
    \ |mut acc, (ix, xv)| {\n  |                                                 \
    \             ++\n\nerror[E0599]: no method named `iter` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpd54lymvd.rs:11:22\n   |\n11 |         acc.push(res.iter().sum());\n\
    \   |                      ^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd54lymvd.rs:12:9\n   |\n12 |         res\n   |        \
    \ ^^^ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<_>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    xs\n\
    \        .iter()\n        .enumerate()\n        .map(|(i, x)| i * (x - xs[1]))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6k5355hn.rs:12:27\n   |\n\
    12 |         .map(|(i, x)| i * (x - xs[1]))\n   |                           ^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot multiply `usize` by\
    \ `isize`\n  --> /tmp/tmp6k5355hn.rs:12:25\n   |\n12 |         .map(|(i, x)| i\
    \ * (x - xs[1]))\n   |                         ^ no implementation for `usize\
    \ * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `usize`\n    --> /tmp/tmp6k5355hn.rs:13:10\n     |\n13   |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=usize>`\n\
    \     |\n     = help: the trait `FromIterator<usize>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v: Vec<isize> = xs.clone();\n    v[0] -= 1;\n    for i in 2..v.len() {\n   \
    \     v[i] = (v[i] - v[i-1]) / (xs[i] - xs[i-1]);\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 1, 1, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpig_ztayd.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ == 1 {\n        return vec![0];\n    }\n    let mut acc = vec![1.0; xs.len()];\n\
    \    for i in xs.len() - 1 {\n        acc[i] = acc[i + 1] * xs[i] + acc[i];\n\
    \    }\n    acc\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: `usize` is not an iterator\n  --> /tmp/tmpaxjbatwa.rs:13:14\n\
    \   |\n13 |     for i in xs.len() - 1 {\n   |              ^^^^^^^^^^^^ `usize`\
    \ is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `usize`\n   = note: if you want to iterate between `start` until a value\
    \ `end`, use the exclusive range syntax `start..end` or the inclusive range syntax\
    \ `start..=end`\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaxjbatwa.rs:16:5\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     acc\n   |     ^^^ expected `isize`, found floating-point number\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<{float}>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    xs.iter()\n\
    \        .cloned()\n        .map(|x| *x * (*x as isize + 1))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpcoyxvx15.rs:11:18\n\
    \   |\n11 |         .map(|x| *x * (*x as isize + 1))\n   |                  ^^\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpcoyxvx15.rs:11:24\n\
    \   |\n11 |         .map(|x| *x * (*x as isize + 1))\n   |                   \
    \     ^^\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ der: Vec<_> = xs.iter().map(|x| x * x).collect();\n    der.pop();\n    der\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp943mretj.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ == 1 {\n        return vec![(xs[0] as isize)];\n    }\n\n    let mut dp = vec![(xs[0]\
    \ as isize)]; // dp = dp xs + [xs[0]]\n    for x in xs[1..] {\n        dp.push((x\
    \ * dp[0]) as isize);\n    }\n    dp.reverse();\n    dp\n}\n\nfn main() {\n  \
    \  let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmp01m9omxq.rs:14:14\n   |\n14 |     for x in xs[1..]\
    \ {\n   |              ^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \   |\n   = note: the trait bound `[isize]: IntoIterator` is not satisfied\n \
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `[isize]`\nhelp: consider borrowing here\n   |\n14 |     for x in &xs[1..]\
    \ {\n   |              +\n14 |     for x in &mut xs[1..] {\n   |             \
    \ ++++\n\nerror[E0277]: `[isize]` is not an iterator\n  --> /tmp/tmp01m9omxq.rs:14:14\n\
    \   |\n14 |     for x in xs[1..] {\n   |              ^^^^^^^ expected an implementor\
    \ of trait `IntoIterator`\n   |\n   = note: the trait bound `[isize]: IntoIterator`\
    \ is not satisfied\n   = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n   |\n14 | \
    \    for x in &xs[1..] {\n   |              +\n14 |     for x in &mut xs[1..]\
    \ {\n   |              ++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ cx: Vec<isize> = xs.clone();\n    cx.pop();\n    let mut fx: Vec<isize> = xs.clone();\n\
    \    fx.pop();\n    let mut cx_sqr = cx.iter().map(|x| x * x).sum();\n    let\
    \ mut fx_sqr = fx.iter().map(|x| x * x).sum();\n    while cx_sqr > fx_sqr {\n\
    \        cx.pop();\n        fx.pop();\n        cx_sqr = cx.iter().map(|x| x *\
    \ x).sum();\n        fx_sqr = fx.iter().map(|x| x * x).sum();\n    }\n    cx.reverse();\n\
    \    fx.reverse();\n    cx.pop();\n    fx.pop();\n    cx.reverse();\n    fx.reverse();\n\
    \    cx.pop();\n    fx.pop();\n    cx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpj7bkwjd7.rs:13:9\n\
    \   |\n13 |     let mut cx_sqr = cx.iter().map(|x| x * x).sum();\n   |       \
    \  ^^^^^^^^^^ consider giving `cx_sqr` a type\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if xs.len()\
    \ == 0 {\n        return Vec::new();\n    }\n    if xs.len() == 1 {\n        return\
    \ vec![1; 1];\n    }\n    let mut res = vec![0..(xs.len())];\n    let mut j =\
    \ 0;\n    for i in 0..(xs.len() - 1) {\n        let mut d = xs[i] - xs[j];\n \
    \       let mut k = i;\n        while k <= j {\n            d *= xs[k];\n    \
    \        k += 1;\n        }\n        res.push(d * d);\n        j += 1;\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3n1bcion.rs:24:18\n   |\n\
    24 |         res.push(d * d);\n   |                  ^^^^^ expected struct `std::ops::Range`,\
    \ found `isize`\n   |\n   = note: expected struct `std::ops::Range<usize>`\n \
    \               found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3n1bcion.rs:27:5\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    ...\n27 |     res\n   |     ^^^ expected `isize`, found struct `std::ops::Range`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<std::ops::Range<usize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ res = Vec::with_capacity(xs.len());\n    for i in xs.iter() {\n        res.push(-1.0\
    \ / i);\n    }\n    res\n}\n\nfn main() {\n    let candidate = derivative;\n \
    \   assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `{float}` by `&isize`\n  --> /tmp/tmpov907zms.rs:11:23\n\
    \   |\n11 |         res.push(-1.0 / i);\n   |                       ^ no implementation\
    \ for `{float} / &isize`\n   |\n   = help: the trait `Div<&isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ dys = vec![];\n    for i in 1..xs.len() {\n        dys.push(xs[i - 1] * (xs[i\
    \ - 1] - 1));\n    }\n    dys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 0, 2, 12]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpv9l58wsz.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ y = xs[0];\n    for i in xs.iter().rev() {\n        y += i;\n    }\n    let\
    \ mut x = 1;\n    let mut ds = Vec::new();\n    for i in 0..x.iter().rev().len()\
    \ {\n        ds.push((y - x) * x ** i);\n        x += i;\n    }\n    ds\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for type `{integer}` in the\
    \ current scope\n  --> /tmp/tmp9j790akm.rs:15:19\n   |\n15 |     for i in 0..x.iter().rev().len()\
    \ {\n   |                   ^^^^ method not found in `{integer}`\n\nerror[E0614]:\
    \ type `{integer}` cannot be dereferenced\n  --> /tmp/tmp9j790akm.rs:16:30\n \
    \  |\n16 |         ds.push((y - x) * x ** i);\n   |                          \
    \    ^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0599, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    fn iterate_over_coefficients(\n\
    \        xs: &[isize],\n    ) -> std::io::Result<Vec<isize>> {\n        if xs.is_empty()\
    \ {\n            return Ok(Vec::new());\n        }\n\n        let mut ys = Vec::new();\n\
    \        for &x in xs {\n            if y := x * 2; y > 0 {\n                ys.push((x\
    \ + 1) * ys / x);\n            } else {\n                ys.push(0);\n       \
    \     }\n        }\n        return Ok(ys);\n    }\n\n    iterate_over_coefficients(xs)\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error: expected type, found `=`\n  --> /tmp/tmpby1jbliv.rs:18:19\n   |\n\
    18 |             if y := x * 2; y > 0 {\n   |                  -^ expected type\n\
    \   |                  |\n   |                  tried to parse a type due to this\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpby1jbliv.rs:27:31\n   |\n27 |\
    \     iterate_over_coefficients(xs)\n   |                               ^^\n \
    \  |                               |\n   |                               expected\
    \ `&[isize]`, found struct `Vec`\n   |                               help: consider\
    \ borrowing here: `&xs`\n   |\n   = note: expected reference `&[isize]`\n    \
    \             found struct `Vec<isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpby1jbliv.rs:27:5\n   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                  ---------- expected `Vec<isize>` because\
    \ of return type\n...\n27 |     iterate_over_coefficients(xs)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found enum `Result`\n   |\n   = note: expected struct\
    \ `Vec<_>`\n                found enum `Result<Vec<_>, std::io::Error>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ fs = [0..isize_max()];\n    fs[0] = xs[0];\n    for i in 1..xs.len() {\n   \
    \     fs[i] = fs[i-1] * xs[i];\n    }\n    fs\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `isize_max` in this scope\n --> /tmp/tmp08du19qg.rs:9:22\n\
    \  |\n9 |     let mut fs = [0..isize_max()];\n  |                      ^^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp08du19qg.rs:10:13\n\
    \   |\n10 |     fs[0] = xs[0];\n   |     -----   ^^^^^ expected struct `std::ops::Range`,\
    \ found `isize`\n   |     |\n   |     expected due to the type of this binding\n\
    \   |\n   = note: expected struct `std::ops::Range<{integer}>`\n             \
    \   found type `isize`\n\nerror[E0369]: cannot multiply `std::ops::Range<{integer}>`\
    \ by `isize`\n  --> /tmp/tmp08du19qg.rs:12:25\n   |\n12 |         fs[i] = fs[i-1]\
    \ * xs[i];\n   |                 ------- ^ ----- isize\n   |                 |\n\
    \   |                 std::ops::Range<{integer}>\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp08du19qg.rs:14:5\n   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                  ---------- expected `Vec<isize>` because\
    \ of return type\n...\n14 |     fs\n   |     ^^ expected struct `Vec`, found array\
    \ of 1 element\n   |\n   = note: expected struct `Vec<isize>`\n              \
    \ found array `[std::ops::Range<{integer}>; 1]`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369, E0425.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
    \ 2, 3])\n/// [2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for i in 0..xs.len() - 1 {\n        let num = xs[i];\n\
    \        let denom = xs[i + 1];\n        result.append(num / denom);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_e49m86e.rs:13:23\n   |\n\
    13 |         result.append(num / denom);\n   |                       ^^^^^^^^^^^\
    \ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference\
    \ `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
