name: HumanEval_17_parse_music
language: rust
results:
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_iter = music_string.chars().enumerate().take(music_string.len()\
    \ / 12).collect();\n    let mut beats_per_note = 1;\n\n    // We need to keep\
    \ track of how many notes we currently have, and to know when to stop\n    let\
    \ mut current_note = 0;\n    let mut notes_since_last = 0;\n\n    for (index,\
    \ note) in music_iter {\n        if notes_since_last == 4 {\n            // 'o'\
    \ - whole note, lasts four beats\n            beats_per_note = 4;\n        }\n\
    \        if notes_since_last == 2 {\n            // 'o|' - half note, lasts two\
    \ beats\n            beats_per_note = 2;\n        }\n        if notes_since_last\
    \ == 1 {\n            // '.|' - quater note, lasts one beat\n            beats_per_note\
    \ = 1;\n        }\n        if note == '|' {\n            // We got a quater note\n\
    \            current_note = index;\n            notes_since_last = 0;\n      \
    \  }\n        if note == 'o' {\n            // We got a whole note\n         \
    \   current_note = index;\n            notes_since_last = 0;\n        }\n    \
    \    if notes_since_last == 3 {\n            // Now we're done. Return our results\n\
    \            music_iter.truncate(current_note);\n            return music_iter.collect();\n\
    \        }\n        notes_since_last += 1;\n    }\n\n    // If we reached the\
    \ end of the string, return an empty vector\n    music_iter.truncate(0);\n   \
    \ music_iter.collect();\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp2csqlm31.rs:43:13\n\
    \   |\n11 |     let mut music_iter = music_string.chars().enumerate().take(music_string.len()\
    \ / 12).collect();\n   |         -------------- consider giving `music_iter` a\
    \ type\n...\n43 |             music_iter.truncate(current_note);\n   |       \
    \      ^^^^^^^^^^ cannot infer type\n   |\n   = note: type must be known at this\
    \ point\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2csqlm31.rs:10:41\n \
    \  |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\
    \    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0282, E0308.\nFor more information about an error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = vec![0; music_string.len()];\n\
    \    let mut last_note = music_string.chars().skip(1).count();\n    let mut note_duration:\
    \ isize = 1;\n    let mut current_note = 0;\n    let mut first_note = 0;\n   \
    \ while current_note < music_string.len() {\n        if music_string[current_note]\
    \ == 'o' {\n            if first_note == 0 {\n                first_note = current_note;\n\
    \            }\n            current_note = current_note + 1;\n            result[current_note]\
    \ = result[current_note] + 1;\n            if current_note == music_string.len()\
    \ - 1 {\n                result[current_note] = result[current_note] + note_duration;\n\
    \            }\n            last_note = current_note;\n            note_duration\
    \ = 1;\n            current_note = current_note + 1;\n        } else {\n     \
    \       if last_note == 0 {\n                result[current_note] = result[current_note]\
    \ + 1;\n                note_duration = 1;\n                current_note = current_note\
    \ + 1;\n            } else {\n                if last_note == current_note {\n\
    \                    result[current_note] = result[current_note] + 1;\n      \
    \              note_duration = 1;\n                } else {\n                \
    \    result[current_note] = result[current_note] + note_duration;\n          \
    \          note_duration = 1;\n                }\n                current_note\
    \ = current_note + 1;\n            }\n            last_note = current_note;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpcy88juod.rs:17:12\n\
    \   |\n17 |         if music_string[current_note] == 'o' {\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_per_note = vec![];\n    for note\
    \ in music_string.chars() {\n        match note {\n            'o' => {\n    \
    \            beats_per_note.push(4);\n            }\n            'o|' => {\n \
    \               beats_per_note.push(2);\n            }\n            '.|' => {\n\
    \                beats_per_note.push(1);\n            }\n            _ => {\n\
    \                continue;\n            }\n        }\n    }\n    beats_per_note\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpqfwljoe1.rs:17:16\n\
    \   |\n17 |             'o|' => {\n   |                ^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut output = Vec::new();\n    let mut current_note\
    \ = 0;\n    let mut last_note = 0;\n    let mut note_length = 0;\n    for c in\
    \ music_string {\n        match c {\n            'o' => last_note = current_note,\n\
    \            'o|' => last_note = current_note + 1,\n            'o' => current_note\
    \ += 1,\n            '.|' => current_note += 1,\n            '.' => output.push(current_note),\n\
    \            _ => break\n        }\n    }\n    output\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpwn34k3nb.rs:18:16\n\
    \   |\n18 |             'o|' => last_note = current_note + 1,\n   |          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::<isize>::new();\n    let\
    \ music_string = music_string.trim_end_matches(\".\").trim_start_matches(\"o\"\
    );\n\n    for c in music_string.chars().filter_map(|c| match c {\n        'o'\
    \ => c == '.' || c == ' ' || (c as usize) % 4 == 0,\n        'o|' => c == '.'\
    \ || c == ' ' || (c as usize) % 2 == 0,\n        _ => false,\n    }) {\n     \
    \   result += (c as isize) / 4;\n    }\n\n    result\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpxhf9yqmu.rs:16:12\n\
    \   |\n16 |         'o|' => c == '.' || c == ' ' || (c as usize) % 2 == 0,\n \
    \  |            ^^^^^^^^^^^\n   |\nhelp: if you meant to write a `str` literal,\
    \ use double quotes\n   |\n16 |         'o|\" => c == \".' || c == ' ' || (c as\
    \ usize) % 2 == 0,\n   |            ~~~~~~~~~~~\n\nerror: character literal may\
    \ only contain one codepoint\n  --> /tmp/tmpxhf9yqmu.rs:16:24\n   |\n16 |    \
    \     'o|' => c == '.' || c == ' ' || (c as usize) % 2 == 0,\n   |           \
    \             ^^^^^^^^^^^\n   |\nhelp: if you meant to write a `str` literal,\
    \ use double quotes\n   |\n16 |         'o|' => c == '.\" || c == \" ' || (c as\
    \ usize) % 2 == 0,\n   |                        ~~~~~~~~~~~\n\nerror[E0762]: unterminated\
    \ character literal\n  --> /tmp/tmpxhf9yqmu.rs:16:36\n   |\n16 |         'o|'\
    \ => c == '.' || c == ' ' || (c as usize) % 2 == 0,\n   |                    \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes: Vec<isize> = Vec::new();\n    let\
    \ mut current_note = music_string.chars().next().unwrap();\n    for c in music_string\
    \ {\n        if *c == current_note {\n            notes.push(1);\n        } else\
    \ {\n            notes.push(0);\n        }\n        if *c == '|' {\n         \
    \   notes.push(1);\n            current_note = *c;\n        }\n    }\n    notes\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: `String` is not an iterator\n  --> /tmp/tmp0tr8wmf3.rs:13:14\n\
    \   |\n13 |     for c in music_string {\n   |              ^^^^^^^^^^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the\
    \ trait `Iterator` is not implemented for `String`\n   = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string\n        .chars()\n        .filter(|c|\
    \ *c != '|')\n        .map(|c| match c {\n            'o' => 4,\n            'o|'\
    \ => 2,\n            '.|' => 1,\n            _ => 0,\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp_1enkw_p.rs:16:16\n\
    \   |\n16 |             'o|' => 2,\n   |                ^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut intervals: Vec<isize> = vec![0; music_string.len()];\n\
    \    let mut current_note = music_string[0];\n    let mut current_beat = 0;\n\
    \    let mut current_octave = 1;\n    for &c in music_string.chars() {\n     \
    \   match c {\n            'o' => intervals[current_note - 'o'] -= current_beat,\n\
    \            'o|' => intervals[current_note - 'o'] -= current_beat,\n        \
    \    '.|' => intervals[current_note - 'o'] -= current_beat,\n            _ =>\
    \ {\n                intervals[current_note - 'o'] += 1;\n                intervals[current_note]\
    \ -= 1;\n                current_note = c;\n                current_beat = intervals[current_note];\n\
    \                current_octave += 1;\n            }\n        }\n    }\n    return\
    \ intervals;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpvqkw1aq4.rs:18:16\n\
    \   |\n18 |             'o|' => intervals[current_note - 'o'] -= current_beat,\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n   |\n18 |             'o|\" =>\
    \ intervals[current_note - \"o'] -= current_beat,\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0762]: unterminated character literal\n  --> /tmp/tmpvqkw1aq4.rs:18:48\n\
    \   |\n18 |             'o|' => intervals[current_note - 'o'] -= current_beat,\n\
    \   |                                                ^^^^^^^^^^^^^^^^^^^\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_counter: Vec<isize> = Vec::new();\n\
    \    let mut beat = 0;\n    music_string\n        .split_whitespace()\n      \
    \  .filter(|ch| !ch.is_ascii_whitespace())\n        .into_iter()\n        .for_each(|ch|\
    \ {\n            match ch {\n                ' ' | '\\t' | '\\n' => {}\n     \
    \           'o' | 'o|' | '.|' => { beats_counter.push(beat); beat += 1 }\n   \
    \             rest => panic!(\"Unsupported musical symbol: {}\", rest)\n     \
    \       }\n        });\n    beats_counter\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp_rc0pei8.rs:20:26\n\
    \   |\n20 |                 'o' | 'o|' | '.|' => { beats_counter.push(beat); beat\
    \ += 1 }\n   |                          ^--^^\n   |                          \
    \ |\n   |                           help: consider removing the non-printing characters:\
    \ `|`\n   |\nnote: there are non-printing characters, the full sequence is ` |\
    \ `\n  --> /tmp/tmp_rc0pei8.rs:20:27\n   |\n20 |                 'o' | 'o|' |\
    \ '.|' => { beats_counter.push(beat); beat += 1 }\n   |                      \
    \     ^^\n\nerror[E0762]: unterminated character literal\n  --> /tmp/tmp_rc0pei8.rs:20:33\n\
    \   |\n20 |                 'o' | 'o|' | '.|' => { beats_counter.push(beat); beat\
    \ += 1 }\n   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // YOUR CODE HERE\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplm90bi2b.rs:10:41\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\
    \    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_per_beat = 1;\n    let mut current_beat\
    \ = 0;\n\n    let mut music_string = music_string.to_string();\n    let mut music_string_chars\
    \ = music_string.chars();\n\n    let mut notes: Vec<isize> = vec![];\n    while\
    \ music_string_chars.next() != Some(&'.') {\n        if music_string_chars.next()\
    \ != Some(&'|') {\n            if music_string_chars.next() == Some(&'o') {\n\
    \                notes.push(current_beat + 4);\n                music_string_chars.next();\n\
    \            } else if music_string_chars.next() == Some(&'o|') {\n          \
    \      notes.push(current_beat + 2);\n                music_string_chars.next();\n\
    \            } else if music_string_chars.next() == Some(&'.|') {\n          \
    \      notes.push(current_beat);\n                music_string_chars.next();\n\
    \            } else {\n                return vec![];\n            }\n       \
    \     beats_per_beat += 1;\n            current_beat += 1;\n        } else {\n\
    \            notes.push(current_beat);\n            music_string_chars.next();\n\
    \            beats_per_beat += 1;\n            current_beat += 1;\n        }\n\
    \    }\n    notes\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmppxdaf_tc.rs:23:61\n\
    \   |\n23 |             } else if music_string_chars.next() == Some(&'o|') {\n\
    \   |                                                             ^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_so_far: Vec<isize> = vec![0, 0, 0,\
    \ 0, 0, 0, 0, 0];\n    let mut music_string = music_string.to_string();\n    let\
    \ mut notes = music_string.chars().take_while(|c| *c != '|').collect::<String>();\n\
    \    for note in notes {\n        match note {\n            'o' => beats_so_far.push(4),\n\
    \            'o|' => beats_so_far.push(2),\n            '.|' => beats_so_far.push(1)\n\
    \            _ => {}\n        }\n    }\n    beats_so_far\n}\n\nfn main() {\n \
    \   let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpyu05kjn5.rs:17:16\n\
    \   |\n17 |             'o|' => beats_so_far.push(2),\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = music_string.chars().map(|c|\
    \ match c {\n        'o' => 4,\n        'o|' => 2,\n        '.|' => 1,\n     \
    \   _ => 0,\n    }).collect();\n\n    beats.sort_by_key(|x| *x).reverse();\n\n\
    \    beats.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpfo4jb6d3.rs:13:12\n\
    \   |\n13 |         'o|' => 2,\n   |            ^^^^^^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().skip_while(|c| *c == ' ').collect::<String>().chars().nth(music_string.chars().count()\
    \ - 1).unwrap()\n        .chars().enumerate().filter_map(|(i, char)| {\n     \
    \       match char {\n                'o' => 1,\n                'o|' => 2,\n\
    \                '.|' => 4,\n                _ => 0,\n            }\n        }).collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpwoad8gzu.rs:15:20\n\
    \   |\n15 |                 'o|' => 2,\n   |                    ^^^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split(' ').filter_map(|x| match x\
    \ {\n        \"o\" => Some(4),\n        \"o|\" => Some(2),\n        '.|' => Some(1),\n\
    \        _ => None,\n    }).collect::<Vec<Option<isize>>>().flatten()\n      \
    \  .filter(|&_| _ != None).collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp780ao_xv.rs:14:9\n\
    \   |\n14 |         '.|' => Some(1),\n   |         ^^^^\n   |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n   |\n14 |         \".|\" => Some(1),\n\
    \   |         ~~~~\n\nerror: in expressions, `_` can only be used on the left-hand\
    \ side of an assignment\n  --> /tmp/tmp780ao_xv.rs:17:22\n   |\n17 |         .filter(|&_|\
    \ _ != None).collect::<Vec<_>>()\n   |                      ^ `_` not allowed\
    \ here\n\nerror[E0277]: a value of type `Vec<Option<isize>>` cannot be built from\
    \ an iterator over elements of type `{integer}`\n    --> /tmp/tmp780ao_xv.rs:16:8\n\
    \     |\n16   |     }).collect::<Vec<Option<isize>>>().flatten()\n     |     \
    \   ^^^^^^^ value of type `Vec<Option<isize>>` cannot be built from `std::iter::Iterator<Item={integer}>`\n\
    \     |\n     = help: the trait `FromIterator<{integer}>` is not implemented for\
    \ `Vec<Option<isize>>`\n     = help: the trait `FromIterator<T>` is implemented\
    \ for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0599]: `Vec<Option<isize>>`\
    \ is not an iterator\n   --> /tmp/tmp780ao_xv.rs:16:40\n    |\n16  |       }).collect::<Vec<Option<isize>>>().flatten()\n\
    \    |                                          ^^^^^^^ `Vec<Option<isize>>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<Option<isize>>: Iterator`\n            which is required by\
    \ `&mut Vec<Option<isize>>: Iterator`\n            `[Option<isize>]: Iterator`\n\
    \            which is required by `&mut [Option<isize>]: Iterator`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut counters = Vec::new();\n\n    let mut music_string_iter\
    \ = music_string.chars().enumerate();\n    let mut cur_beat: isize = 0;\n    let\
    \ mut cur_note = 0;\n    let mut next_note = 0;\n\n    loop {\n        match music_string_iter.next()\
    \ {\n            Some(note_char) => {\n                if note_char == b'o' {\n\
    \                    counters.push(cur_beat);\n                    cur_beat =\
    \ 0;\n                    cur_note += 1;\n                } else if note_char\
    \ == b'o|' {\n                    counters.push(cur_beat);\n                 \
    \   cur_beat = 0;\n                    cur_note += 2;\n                } else\
    \ if note_char == b'.|' {\n                    counters.push(cur_beat);\n    \
    \                cur_beat = 0;\n                    cur_note += 4;\n         \
    \       } else if note_char == b'o|o|' {\n                    counters.push(cur_beat);\n\
    \                    cur_beat = 0;\n                    cur_note += 8;\n     \
    \           } else if note_char == b'o|o|o|o|o|' {\n                    counters.push(cur_beat);\n\
    \                    cur_beat = 0;\n                    cur_note += 16;\n    \
    \            } else {\n                    cur_beat += 1;\n                  \
    \  next_note = note_char;\n                }\n            }\n            None\
    \ => break,\n        }\n    }\n\n    counters.push(cur_beat);\n    counters.push(cur_note);\n\
    \    counters.push(next_note);\n\n    counters\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpj7zh9o62.rs:25:40\n\
    \   |\n25 |                 } else if note_char == b'o|' {\n   |             \
    \                           ^^^^^\n   |\nhelp: if you meant to write a byte string\
    \ literal, use double quotes\n   |\n25 |                 } else if note_char ==\
    \ b\"o|\" {\n   |                                        ~~~~~\n\nerror: character\
    \ literal may only contain one codepoint\n  --> /tmp/tmpj7zh9o62.rs:29:40\n  \
    \ |\n29 |                 } else if note_char == b'.|' {\n   |               \
    \                         ^^^^^\n   |\nhelp: if you meant to write a byte string\
    \ literal, use double quotes\n   |\n29 |                 } else if note_char ==\
    \ b\".|\" {\n   |                                        ~~~~~\n\nerror: character\
    \ literal may only contain one codepoint\n  --> /tmp/tmpj7zh9o62.rs:33:40\n  \
    \ |\n33 |                 } else if note_char == b'o|o|' {\n   |             \
    \                           ^^^^^^^\n   |\nhelp: if you meant to write a byte\
    \ string literal, use double quotes\n   |\n33 |                 } else if note_char\
    \ == b\"o|o|\" {\n   |                                        ~~~~~~~\n\nerror:\
    \ character literal may only contain one codepoint\n  --> /tmp/tmpj7zh9o62.rs:37:40\n\
    \   |\n37 |                 } else if note_char == b'o|o|o|o|o|' {\n   |     \
    \                                   ^^^^^^^^^^^^^\n   |\nhelp: if you meant to\
    \ write a byte string literal, use double quotes\n   |\n37 |                 }\
    \ else if note_char == b\"o|o|o|o|o|\" {\n   |                               \
    \         ~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj7zh9o62.rs:21:33\n\
    \   |\n21 |                 if note_char == b'o' {\n   |                     \
    \            ^^^^ expected tuple, found `u8`\n   |\n   = note: expected tuple\
    \ `(usize, char)`\n               found type `u8`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj7zh9o62.rs:43:33\n   |\n16 |     let mut next_note = 0;\n\
    \   |                         - expected due to this value\n...\n43 |        \
    \             next_note = note_char;\n   |                          "
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string\n        .split_whitespace()\n   \
    \     .chars()\n        .filter(|c| *c >= 'o' && *c <= 'o')\n        .map(|c|\
    \ c.to_digit(16))\n        .filter(|&c| c >= '0' && c <= '9')\n        .collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `chars` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpbbcxuar8.rs:13:10\n   |\n13 |         .chars()\n\
    \   |          ^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut note_count: usize = 0;\n    let mut notes: Vec<&'static str> = Vec::new();\n\
    \    let mut current_note: &'static str = String::new();\n\n    for c in music_string.chars()\
    \ {\n        note_count += 1;\n\n        match c {\n            'o' | 'o|' =>\
    \ notes.push(current_note.clone()),\n            '.|' => notes.push(current_note.clone()),\n\
    \            _ => notes.push(c),\n        };\n\n        if notes.len() == 3 {\n\
    \            beats.push(note_count);\n            note_count = 0;\n          \
    \  notes.clear();\n        }\n\n        current_note = c;\n    }\n\n    beats.push(note_count);\n\
    \n    notes\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpgf5_7txb.rs:20:22\n\
    \   |\n20 |             'o' | 'o|' => notes.push(current_note.clone()),\n   |\
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = 0; // number of beats\n\n    for\
    \ note in music_string.chars() {\n        match note {\n            'o' => beats\
    \ += 4,\n            'o|' => beats += 2,\n            '.|' => beats += 1,\n  \
    \          _ => (),\n        }\n    }\n\n    beats\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp1bnl7o9x.rs:16:16\n\
    \   |\n16 |             'o|' => beats += 2,\n   |                ^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // Split the string into chunks delimited by `|`\n\
    \    let chunks = music_string.chars().take_while(|c| c != '|').collect();\n\n\
    \    // Convert each chunk to an int and collect into vec with beats per note\n\
    \    let chunk_beats_per_note = chunks\n        .iter()\n        .map(|c| match\
    \ c {\n            '.' => 1,\n            'o' => 4,\n            '|' => 2,\n \
    \           _ => panic!(\"'{}' does not represent a note!\", c),\n        })\n\
    \        .collect();\n\n    // Add the sum of all beats per note together and\
    \ divide by 4 to get number of beats per note\n    let result = chunk_beats_per_note.iter().sum()\
    \ / 4;\n    vec![result]\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp6mktrb_q.rs:12:56\n\
    \   |\n12 |     let chunks = music_string.chars().take_while(|c| c != '|').collect();\n\
    \   |                                                        ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_per_note = vec![];\n    let mut note_len\
    \ = music_string.len();\n\n    let mut note_start = -1;\n    let mut note_end\
    \ = -1;\n\n    for c in music_string {\n        if c == ' ' {\n            if\
    \ note_end < 0 {\n                note_start = c;\n                note_end =\
    \ c;\n            } else if note_end == c {\n                note_end = c;\n \
    \           } else {\n                note_end = c;\n                beats_per_note.push(i\
    \ - note_start);\n                note_start = -1;\n            }\n        } else\
    \ {\n            if note_start < 0 {\n                note_start = c;\n      \
    \      } else {\n                note_end = c;\n            }\n        }\n   \
    \ }\n\n    if note_start >= 0 {\n        beats_per_note.push(i - note_start);\n\
    \    }\n\n    beats_per_note\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp4hhp78as.rs:26:37\n\
    \   |\n26 |                 beats_per_note.push(i - note_start);\n   |       \
    \                              ^ help: a local variable with a similar name exists:\
    \ `c`\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp4hhp78as.rs:39:29\n\
    \   |\n39 |         beats_per_note.push(i - note_start);\n   |               \
    \              ^ not found in this scope\n\nerror[E0277]: `String` is not an iterator\n\
    \  --> /tmp/tmp4hhp78as.rs:17:14\n   |\n17 |     for c in music_string {\n   |\
    \              ^^^^^^^^^^^^ `String` is not an iterator; try calling `.chars()`\
    \ or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for\
    \ `String`\n   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `String`\n\nerror[E0277]: can't compare `{integer}` with `char`\n  --> /tmp/tmp4hhp78as.rs:18:14\n\
    \   |\n18 |         if c == ' ' {\n   |              ^^ no implementation for\
    \ `{integer} == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split_whitespace().iter().map(|note|\
    \ {\n        let mut i = 0;\n        let mut j = 0;\n        let mut last = 0;\n\
    \        let mut count = 1;\n        while i < music.len() && music[i] == '|'\
    \ {\n            i += 1;\n            count *= 2;\n        }\n        if music[i]\
    \ == 'o' {\n            i += 1;\n            last = 4;\n        }\n        if\
    \ music[i] == 'o|' {\n            i += 1;\n            last = 2;\n        }\n\
    \        if music[i] == '.' {\n            i += 1;\n            count = 1;\n \
    \       }\n        \n        for (; i <= music.len() - 1 && music[i] != '|' &&\
    \ !music.is_empty(); i += 1, last = count) {\n            for (; j <= music.len()\
    \ - 1 && music[j] != '|' && !music.is_empty(); j += 1, count = (count - 1) / 2)\
    \ {\n            }\n        }\n        if music[i] == ' ' {\n            i +=\
    \ 1;\n        }\n        \n        last = music.len() - i;\n        if music[i]\
    \ == 'o' {\n            i += 1;\n            last = 4;\n        }\n        if\
    \ music[i] == 'o|' {\n            i += 1;\n            last = 2;\n        }\n\
    \        if music[i] == '.' {\n            i += 1;\n            last = 1;\n  \
    \      }\n        if music.len() > 1 && music[i + 1] == '.' {\n            i +=\
    \ 1;\n            last = 1;\n        }\n        \n        i += 1;\n        \n\
    \        if music[i] == '.' {\n            i += 1;\n            last = 1;\n  \
    \      }\n        if music.len() > 1 && music[i + 1] == '.' {\n            i +=\
    \ 1;\n            last = 1;\n        }\n        \n        if music[i] == 'o' {\n\
    \            i += 1;\n            last = 4;\n        }\n        if music[i] ==\
    \ 'o|' {\n            i += 1;\n            last = 2;\n        }\n        \n  \
    \      if music.len() > 1 && music[i + 1] == '.' {\n            i += 1;\n    \
    \        last = 1;\n        }\n        \n        if music[i] == '.' {\n      \
    \      i += 1;\n            last = 1;\n        }\n        if music.len() > 1 &&\
    \ music[i + 1] == '.' {\n            i += 1;\n            last = 1;\n        }\n\
    \        \n        if music[i] == 'o' {\n            i += 1;\n            last\
    \ = 4;\n        }\n        if music[i] == 'o|' {\n            i += 1;\n      \
    \      last = 2;\n        }\n        if music.len() > 1 && music[i + 1] == '.'\
    \ {\n            i += 1;\n            last = 1;\n        }\n        \n       \
    \ if music.len() > 1 && music[i + 1] == '.' {\n            i += 1;\n         \
    \   last = 1;\n        }\n        \n        if music[i] == '.' {\n           \
    \ i += 1;\n            last = 1;\n        }\n        \n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpfvq75o81.rs:24:27\n\
    \   |\n24 |         if music[i] == 'o|' {\n   |                           ^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![];\n    for note\
    \ in music_string.chars().filter(|&c| c == 'o' || c == '|' || c == '.') {\n  \
    \      if note == 'o' {\n            beats.push(4);\n        } else if note ==\
    \ '|' {\n            beats.push(2);\n        } else if note == '.' {\n       \
    \     beats.push(1);\n        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpz1g7pqzi.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_string = music_string.to_string();\n\
    \    let mut music_vector: Vec<isize> = Vec::new();\n    let mut note_string =\
    \ music_string.chars();\n\n    while let Some(note_character) = note_string.next()\
    \ {\n        // If note is '.' , quater note or whole note, then increase counter\
    \ and store in vector\n        if note_character == '.' {\n            music_vector.push(1);\n\
    \        } else if note_character == 'o' {\n            music_vector.push(4);\n\
    \        } else if note_character == '|' {\n            music_vector.push(2);\n\
    \        } else {\n            music_vector.push(0);\n        }\n    }\n\n   \
    \ music_vector\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp5rk0p1c2.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let music_string = music_string.trim().to_string();\n\
    \    let mut beats = 0;\n    let mut current_note_length = 0;\n    let mut current_note_length\
    \ = 0;\n    let mut current_note = Note::UNKNOWN;\n    let mut current_note_length\
    \ = 0;\n    for i in music_string.chars() {\n        // if we hit '.|' then we\
    \ have reached the end of note, so we can increment current_note_length\n    \
    \    if i.is_whitespace() {\n            current_note_length += 1;\n         \
    \   beats += 1;\n            current_note = Note::UNKNOWN;\n            continue;\n\
    \        }\n\n        // if we hit 'o|' then we know that the next note was '.|'\
    \ and we can continue counting the rest\n        if i.is_ascii(\"o|\") {\n   \
    \         current_note_length += 1;\n            continue;\n        }\n\n    \
    \    // if we hit 'o' then we know that we are done with current note and can\
    \ move on to the next one\n        if i.is_ascii(\"o\") {\n            beats +=\
    \ 1;\n            current_note = Note::UNKNOWN;\n            continue;\n     \
    \   }\n\n        // if we hit any other character then we know that this note\
    \ just has last one beat and we can continue\n        // counting rests\n    \
    \    current_note_length += 1;\n    }\n\n    if current_note != Note::UNKNOWN\
    \ {\n        beats += 1;\n    }\n\n    vec![beats]\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Note`\n  --> /tmp/tmp4v3qf4qy.rs:15:28\n\
    \   |\n15 |     let mut current_note = Note::UNKNOWN;\n   |                  \
    \          ^^^^ use of undeclared type `Note`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Note`\n  --> /tmp/tmp4v3qf4qy.rs:22:28\n   |\n22 | \
    \            current_note = Note::UNKNOWN;\n   |                            ^^^^\
    \ use of undeclared type `Note`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Note`\n  --> /tmp/tmp4v3qf4qy.rs:35:28\n   |\n35 |             current_note\
    \ = Note::UNKNOWN;\n   |                            ^^^^ use of undeclared type\
    \ `Note`\n\nerror[E0433]: failed to resolve: use of undeclared type `Note`\n \
    \ --> /tmp/tmp4v3qf4qy.rs:44:24\n   |\n44 |     if current_note != Note::UNKNOWN\
    \ {\n   |                        ^^^^ use of undeclared type `Note`\n\nerror[E0061]:\
    \ this function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmp4v3qf4qy.rs:27:14\n\
    \     |\n27   |         if i.is_ascii(\"o|\") {\n     |              ^^^^^^^^\
    \ ---- supplied 1 argument\n     |              |\n     |              expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror[E0061]:\
    \ this function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmp4v3qf4qy.rs:33:14\n\
    \     |\n33   |         if i.is_ascii(\"o\") {\n     |              ^^^^^^^^ ---\
    \ supplied 1 argument\n     |              |\n     |              expected 0 arguments\n\
    \     |\nnote: associated function defined here\n\nerror: aborting due to 6 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_per_note_last = 0;\n    for &c in\
    \ music_string.chars() {\n        match c {\n            'o' | 'o|' => beats_per_note_last\
    \ = 4,\n            '.|' => beats_per_note_last = 1\n            _ => break\n\
    \        }\n    }\n\n    let mut music_note_lasts = Vec::new();\n    for c in\
    \ music_string.chars() {\n        match c {\n            'o' | 'o|' =>\n     \
    \           music_note_lasts.push(beats_per_note_last),\n            '.|' => music_note_lasts.push(1)\n\
    \            _ => break\n        }\n    }\n    music_note_lasts\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpcf9s8veg.rs:14:22\n\
    \   |\n14 |             'o' | 'o|' => beats_per_note_last = 4,\n   |         \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string\n        .chars()\n        .filter(|c|\
    \ c != '|')\n        .filter_map(|c| match c {\n            'o' => (0,),\n   \
    \         'o|' => (4,),\n            '.' => (1,),\n            _ => return Err(format_err!(\"\
    Incorrect music string: {}\", music_string)),\n        })\n        .collect::<Result<Vec<_>,\
    \ _>>()?\n        .into_iter()\n        .map(|beats| *beats)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp4t5xjnvx.rs:16:16\n\
    \   |\n16 |             'o|' => (4,),\n   |                ^^^^^^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = music_string.chars().map(|c| match\
    \ c {\n        'o' => 4,\n        'o|' => 2,\n        '.|' => 1,\n        _ =>\
    \ 0,\n    }).collect::<Vec<_>>();\n    let mut i = 0;\n    let mut last_beat_beats\
    \ = music_string.chars().skip(1).peekable().map(|c| c != '|').count() as isize;\n\
    \    while i < beats.len() {\n        beats[i] += last_beat_beats;\n        last_beat_beats\
    \ = music_string.chars().skip(1).take_while(|c| c != '|').count() as isize;\n\
    \        i += 1;\n    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp6gz2h9sy.rs:13:12\n\
    \   |\n13 |         'o|' => 2,\n   |            ^^^^^^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // TODO: implement this\n}\n\nfn main() {\n   \
    \ let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeq41csm2.rs:10:41\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\
    \    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.trim().chars().map(|x| match x {\n\
    \        'o' => 4,\n        'o|' => 2,\n        '.|' => 1,\n        _ => 0,\n\
    \    }).sum()\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp3vgdxbok.rs:13:12\n\
    \   |\n13 |         'o|' => 2,\n   |            ^^^^^^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![];\n    let mut\
    \ current_note = \"\";\n    for char in music_string.chars() {\n        match\
    \ char {\n            '.' => {}\n            'o' => {}\n            '|' => {}\n\
    \            ' ' => {}\n            _ => {\n                let note_num = char.code_str().parse().unwrap();\n\
    \                beats.push(note_num);\n                current_note = char.to_string();\n\
    \            }\n        }\n    }\n    beats.push(beats.last().unwrap());\n   \
    \ return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `code_str` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp95seg15i.rs:20:37\n   |\n20 |                 let note_num\
    \ = char.code_str().parse().unwrap();\n   |                                  \
    \   ^^^^^^^^ method not found in `char`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp95seg15i.rs:22:32\n   |\n12 |     let mut current_note = \"\";\n   |\
    \                            -- expected due to this value\n...\n22 |        \
    \         current_note = char.to_string();\n   |                             \
    \   ^^^^^^^^^^^^^^^^\n   |                                |\n   |            \
    \                    expected `&str`, found struct `String`\n   |            \
    \                    help: consider borrowing here: `&char.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp95seg15i.rs:26:16\n   |\n26 |     beats.push(beats.last().unwrap());\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n26 |     beats.push(*beats.last().unwrap());\n\
    \   |                +\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::<isize>::new();\n\n    for\
    \ note in music_string.chars().take(music_string.len()) {\n        match note\
    \ {\n            'o' => beats.extend_from_slice(&[4, 4]),\n            'o|' =>\
    \ beats.extend_from_slice(&[2, 2]),\n            '.|' => beats.extend_from_slice(&[1]),\n\
    \            _ => ()\n        }\n    }\n\n    beats.reverse();\n\n    beats\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpinprkguq.rs:16:16\n\
    \   |\n16 |             'o|' => beats.extend_from_slice(&[2, 2]),\n   |      \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.lines()\n        .map(|line| {\n \
    \           let mut beats: isize = 0;\n            let mut note = &line[0];\n\
    \            let mut prev_note = &note[..1];\n            while note[0] != '|'\
    \ {\n                if note[0] == 'o' {\n                    if note[1] == prev_note\
    \ {\n                        beats += 4;\n                    } else {\n     \
    \                   beats += 1;\n                    }\n                } else\
    \ if note[0] == '.' {\n                    if note[1] == prev_note {\n       \
    \                 beats += 1;\n                    } else {\n                \
    \        beats += 2;\n                    }\n                } else {\n      \
    \              beats += 1;\n                }\n                prev_note = note[1];\n\
    \                note = &note[2..];\n            }\n            beats\n      \
    \  })\n        .collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `str` cannot be indexed by `{integer}`\n  --> /tmp/tmp6innek2h.rs:14:29\n\
    \   |\n14 |             let mut note = &line[0];\n   |                       \
    \      ^^^^^^^ string indices are ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<str>` is not implemented for `{integer}`\n   = note: you can use\
    \ `.chars().nth()` or `.bytes().nth()`\n           for more information, see chapter\
    \ 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<{integer}>` for `str`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string\n        .chars()\n        .enumerate()\n\
    \        .filter_map(|(idx, char)| match char {\n            'o' => Some(idx as\
    \ isize),\n            'o|' => Some(idx as isize * 2),\n            '.|' => Some(idx\
    \ as isize * 4),\n            _ => None,\n        })\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp0t8_c4ld.rs:16:16\n\
    \   |\n16 |             'o|' => Some(idx as isize * 2),\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.lines()\n        .map(|line| match\
    \ line {\n            'o' => 4,\n            'o|' => 2,\n            '.|' => 1,\n\
    \            _ => 0,\n        })\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpp9daedtp.rs:14:16\n\
    \   |\n14 |             'o|' => 2,\n   |                ^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut counters = Vec::new();\n\n    for note\
    \ in music_string.chars().filter(|x| *x != '|') {\n        let mut note_count\
    \ = Counter::new();\n        let note_to_beats = note_to_beats(note);\n      \
    \  for i in 0..note_to_beats.len() {\n            note_count[note_to_beats[i]]\
    \ += 1;\n        }\n        counters.push(note_count.clone());\n    }\n\n    note_to_beats(music_string)\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Counter`\n  -->\
    \ /tmp/tmpapqm9l2e.rs:14:30\n   |\n14 |         let mut note_count = Counter::new();\n\
    \   |                              ^^^^^^^ use of undeclared type `Counter`\n\n\
    error[E0425]: cannot find function `note_to_beats` in this scope\n  --> /tmp/tmpapqm9l2e.rs:15:29\n\
    \   |\n15 |         let note_to_beats = note_to_beats(note);\n   |           \
    \                  ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `note_to_beats` in this scope\n  --> /tmp/tmpapqm9l2e.rs:22:5\n\
    \   |\n22 |     note_to_beats(music_string)\n   |     ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0433.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = 0;\n    music_string\n        .lines()\n\
    \        .filter_map(|line| line.chars().map(|c| c.to_digit(10).unwrap()))\n \
    \       .filter(|x| *x == '.')\n        .filter(|x| *x == '|')\n        .for_each(|x|\
    \ *x != 'o' && *x != '|')\n        .for_each(|x| *x != '|' && *x != 'o')\n   \
    \     .for_each(|x| *x != 'o' && beats += x * 4);\n    music_string\n        .lines()\n\
    \        .filter_map(|line| line.chars().map(|c| c.to_digit(10).unwrap()))\n \
    \       .filter(|x| *x == 'o')\n        .filter(|x| *x == '|')\n        .for_each(|x|\
    \ *x != '|' && *x != 'o')\n        .for_each(|x| *x != 'o' && beats += x * 2);\n\
    \    music_string\n        .lines()\n        .filter_map(|line| line.chars().map(|c|\
    \ c.to_digit(10).unwrap()))\n        .filter(|x| *x == 'o')\n        .filter(|x|\
    \ *x != '|')\n        .for_each(|x| *x != 'o' && *x != '|')\n        .for_each(|x|\
    \ *x != 'o' && beats += x);\n    music_string\n        .lines()\n        .filter_map(|line|\
    \ line.chars().map(|c| c.to_digit(10).unwrap()))\n        .filter(|x| *x == 'o')\n\
    \        .filter(|x| *x != '|')\n        .for_each(|x| *x != 'o' && *x != '|')\n\
    \        .for_each(|x| *x != 'o' && beats += x);\n    music_string\n        .lines()\n\
    \        .filter_map(|line| line.chars().map(|c| c.to_digit(10).unwrap()))\n \
    \       .filter(|x| *x == 'o')\n        .filter(|x| *x != '|')\n        .for_each(|x|\
    \ *x != 'o' && *x != '|')\n        .for_each(|x| *x != 'o' && beats += x);\n \
    \   music_string\n        .lines()\n        .filter_map(|line| line.chars().map(|c|\
    \ c.to_digit(10).unwrap()))\n        .filter(|x| *x == 'o')\n        .filter(|x|\
    \ *x != '|')\n        .for_each(|x| *x != 'o\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: expected `while`, `for`, `loop` or `{` after a label\n  --> /tmp/tmpumqufxw1.rs:54:1\n\
    \   |\n54 | }\n   | ^ expected `while`, `for`, `loop` or `{` after a label\n\n\
    error: expected expression, found `)`\n  --> /tmp/tmpumqufxw1.rs:54:1\n   |\n\
    54 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter: `}`\n\
    \  --> /tmp/tmpumqufxw1.rs:53:18\n   |\n10 | fn parse_music(music_string: String)\
    \ -> Vec<isize> {\n   |                                                    - closing\
    \ delimiter possibly meant for this\n...\n53 |         .for_each(|x| *x != 'o\n\
    \   |                  ^ unclosed delimiter\n54 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpumqufxw1.rs:14:28\n\
    \   |\n14 |         .filter_map(|line| line.chars().map(|c| c.to_digit(10).unwrap()))\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found struct `Map`\n   |\n   = note: expected enum `Option<_>`\n\
    \            found struct `Map<Chars<'_>, [closure@/tmp/tmpumqufxw1.rs:14:45:\
    \ 14:72]>`\nhelp: try wrapping the expression in `Some`\n   |\n14 |         .filter_map(|line|\
    \ Some(line.chars().map(|c| c.to_digit(10).unwrap())))\n   |                 \
    \           +++++                                             +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpumqufxw1.rs:17:23\n   |\n17 |         .for_each(|x|\
    \ *x != 'o' && *x != '|')\n   |                       ^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `()`, found `bool`\n\nerror[E0599]: `()` is not an iterator\n  --> /tmp/tmpumqufxw1.rs:18:10\n\
    \   |\n18 |         .for_each(|x| *x != '|' && *x != 'o')\n   |          ^^^^^^^^\
    \ `()` is not an iterator\n   |\n   = note: the following trait bounds were not\
    \ satisfied:\n           `(): Iterator`\n           which is required by `&mut\
    \ (): Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpumqufxw1.rs:19:36\n\
    \   |\n19 |         .for_each(|x| *x != 'o' && beats += x * 4);\n   |        \
    \                            ^^^^^ expected `bool`, found integer\n\nerror[E0067]:\
    \ invalid left-hand side of assignment\n  --> /tmp/tmpumqufxw1.rs:19:4"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string\n        .lines()\n        .map(|l|\
    \ {\n            match l.chars().next().unwrap() {\n                'o' => 4,\n\
    \                'o|' => 2,\n                '.|' => 1,\n                _ =>\
    \ panic!(\"Unexpected symbol in music string: {:?}\", l),\n            }\n   \
    \     })\n        .collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmped943wd_.rs:16:20\n\
    \   |\n16 |                 'o|' => 2,\n   |                    ^^^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string\n        .chars()\n        .flat_map(|c|\
    \ *c as u8)\n        .collect::<Vec<_>>()\n        .into_iter()\n        .map(|note|\
    \ match note {\n            'o' => 1,\n            'o|' => 2,\n            '.|'\
    \ => 4,\n            _ => panic!(\"{}\", note),\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp4_wil5o_.rs:18:16\n\
    \   |\n18 |             'o|' => 2,\n   |                ^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n\n    for music_note\
    \ in music_string.chars() {\n        let music_note = music_note.to_string();\n\
    \        let note_to_beats = match music_note {\n            'o' => 0,\n     \
    \       'o|' => 2,\n            '.|' => 1,\n            _ => {\n             \
    \   println!(\"Invalid music note {}\", music_note);\n                println!(\"\
    {}\", music_string);\n                continue;\n            }\n        };\n \
    \       for _ in 0..note_to_beats {\n            beats.push(note_to_beats);\n\
    \        }\n    }\n\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp5zd6xvi6.rs:17:16\n\
    \   |\n17 |             'o|' => 2,\n   |                ^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut notes\
    \ = 0;\n    let mut last_beat = 0;\n    loop {\n        music_string\n       \
    \     .chars()\n            .skip_while(|c| *c != 'o' | c == '|')\n          \
    \  .take_while(|c| *c != 'o' | c == '|')\n            .skip_while(|c| *c != '.'\
    \ | c == '|')\n            .take_while(|c| *c != '.' | c == '|')\n           \
    \ .for_each(|c| *c as usize += last_beat);\n        notes += 1;\n        last_beat\
    \ = 0;\n        if music_string.chars().last().unwrap() == 'o' {\n           \
    \ last_beat = 4;\n        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp1tr9tsqm.rs:17:32\n\
    \   |\n17 |             .skip_while(|c| *c != 'o' | c == '|')\n   |          \
    \                      ^^         ^^\n\nerror: comparison operators cannot be\
    \ chained\n  --> /tmp/tmp1tr9tsqm.rs:18:32\n   |\n18 |             .take_while(|c|\
    \ *c != 'o' | c == '|')\n   |                                ^^         ^^\n\n\
    error: comparison operators cannot be chained\n  --> /tmp/tmp1tr9tsqm.rs:19:32\n\
    \   |\n19 |             .skip_while(|c| *c != '.' | c == '|')\n   |          \
    \                      ^^         ^^\n\nerror: comparison operators cannot be\
    \ chained\n  --> /tmp/tmp1tr9tsqm.rs:20:32\n   |\n20 |             .take_while(|c|\
    \ *c != '.' | c == '|')\n   |                                ^^         ^^\n\n\
    error[E0369]: no implementation for `char | &char`\n  --> /tmp/tmp1tr9tsqm.rs:17:39\n\
    \   |\n17 |             .skip_while(|c| *c != 'o' | c == '|')\n   |          \
    \                         --- ^ - &char\n   |                                \
    \   |\n   |                                   char\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1tr9tsqm.rs:17:46\n   |\n17 |             .skip_while(|c|\
    \ *c != 'o' | c == '|')\n   |                                              ^^^\
    \ expected `bool`, found `char`\n\nerror[E0369]: no implementation for `char |\
    \ &char`\n  --> /tmp/tmp1tr9tsqm.rs:18:39\n   |\n18 |             .take_while(|c|\
    \ *c != 'o' | c == '|')\n   |                                   --- ^ - &char\n\
    \   |                                   |\n   |                              \
    \     char\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1tr9tsqm.rs:18:46\n\
    \   |\n18 |             .take_while(|c| *c != 'o' | c == '|')\n   |          \
    \                                    ^^^ expected `bool`, found `char`\n\nerror[E0369]:\
    \ no implementation for `char | &char`\n  --> /tmp/tmp1tr9tsqm.rs:19:39\n   |\n\
    19 |             .skip_while(|c| *c != '.' | c == '|')\n   |                 \
    \                  --- ^ - &char\n   |                                   |\n \
    \  |                                   char\n\nerror[E0308]: mismatched types"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut parsed_music: Vec<isize> = Vec::new();\n\
    \n    for note in music_string.chars() {\n        let mut beats: isize = 0;\n\
    \        match note {\n            'o' => { beats = 4; },\n            'o|' =>\
    \ { beats = 2; },\n            '.|' => { beats = 1; }\n            _ => {\n  \
    \              // This character is not a note nor other music character. Just\
    \ add it to our list\n                parsed_music.push(beats);\n            \
    \    continue;\n            }\n        }\n\n        // We have not reached end\
    \ of our note. Add one beat to our beat counter\n        parsed_music.push(beats\
    \ + 1);\n    }\n\n    return parsed_music;\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpn91h5dfx.rs:17:16\n\
    \   |\n17 |             'o|' => { beats = 2; },\n   |                ^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n\n   \
    \ // TODO: implement this function\n    // Oh no! It is not working! Try it yourself!\n\
    \    let mut current_beat = 0;\n    let mut current_note = 0;\n\n    for _ in\
    \ music_string.chars() {\n        let letter = *iter_mut(music_string).next();\n\
    \        if letter == 'o' {\n            beats.push(current_beat);\n         \
    \   current_beat = 0;\n            current_note = 0;\n        } else if letter\
    \ == 'o' {\n            current_beat += 1;\n        } else if letter == '|' {\n\
    \            current_note += 1;\n        } else if letter == '.' {\n         \
    \   current_note /= 2;\n        } else {\n            panic!(\"invalid input:\
    \ {:?}\", letter);\n        }\n    }\n    beats.push(current_beat);\n    current_beat\
    \ = 0;\n    current_note = 0;\n\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `iter_mut` in this scope\n  --> /tmp/tmpk05s_f1h.rs:19:23\n\
    \   |\n19 |         let letter = *iter_mut(music_string).next();\n   |       \
    \                ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // We are going to parse music string into list\
    \ of notes, i.e. 'o o' -> ['o', 'o', 'o', 'o']\n    let mut notes: Vec<String>\
    \ = music_string.split(\"\").collect();\n    // We are going to make our note\
    \ count as many as music string length\n    let mut note_count: usize = music_string.len();\n\
    \    // We are going to fill our list with zeros until we find first note\n  \
    \  let mut notes_list: Vec<isize> = notes.to_vec();\n    // We are going to fill\
    \ our list with zeros until we find second note\n    let mut notes_list_two: Vec<isize>\
    \ = notes.to_vec();\n    // We are going to keep track of how many beats last\
    \ each note (note length = 4 in our example)\n    let mut beats_last_notes: Vec<isize>\
    \ = notes.to_vec();\n    // We are going to keep track of how many beats last\
    \ each second note (note length = 2 in our example)\n    let mut beats_last_notes_two:\
    \ Vec<isize> = notes.to_vec();\n    // We are going to keep track of how many\
    \ beats last each third note (note length = 1 in our example)\n    let mut beats_last_notes_three:\
    \ Vec<isize> = notes.to_vec();\n    // We are going to keep track of how many\
    \ beats last each fourth note (note length = 2 in our example)\n    let mut beats_last_notes_four:\
    \ Vec<isize> = notes.to_vec();\n\n    // Iterate over each character of the string\n\
    \    for c in music_string {\n        // We are going to fill our notes list with\
    \ character itself\n        notes_list.push(c);\n        // We are going to add\
    \ 1 to our note count if we have a 'o' in this position\n        if c == 'o' {\n\
    \            note_count += 1;\n        }\n    }\n\n    // Iterate over each character\
    \ of the string\n    for c in music_string {\n        // We are going to fill\
    \ our notes list with character itself\n        notes_list_two.push(c);\n    \
    \    // We are going to add 2 to our note count if we have a 'o' in this position\n\
    \        if c == 'o' {\n            note_count += 2;\n        }\n    }\n\n   \
    \ // Iterate over each character of the string\n    for c in music_string {\n\
    \        // We are going to fill our notes list with character itself\n      \
    \  notes_list_three.push(c);\n        // We are going to add 3 to our note count\
    \ if we have a 'o' in this \n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp3we7yx0w.rs:62:3\n\
    \   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |       \
    \                                             - unclosed delimiter\n...\n49 |\
    \     for c in music_string {\n   |                           - this delimiter\
    \ might not be properly closed...\n...\n53 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n62 | }\n   |   ^\n\nerror[E0425]: cannot\
    \ find value `notes_list_three` in this scope\n  --> /tmp/tmp3we7yx0w.rs:51:9\n\
    \   |\n51 |         notes_list_three.push(c);\n   |         ^^^^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `notes_list_two`\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&str`\n    --> /tmp/tmp3we7yx0w.rs:12:57\n     |\n12   |     let mut\
    \ notes: Vec<String> = music_string.split(\"\").collect();\n     |           \
    \                                              ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3we7yx0w.rs:16:38\n\
    \   |\n16 |     let mut notes_list: Vec<isize> = notes.to_vec();\n   |       \
    \                  ----------   ^^^^^^^^^^^^^^ expected `isize`, found struct\
    \ `String`\n   |                         |\n   |                         expected\
    \ due to this\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3we7yx0w.rs:18:42\n\
    \   |\n18 |     let mut notes_list_two: Vec<isize> = notes.to_vec();\n   |   \
    \                          ----------   ^^^^^^^^^^^^^^ expected `isize`, found\
    \ struct `String`\n   |                             |\n   |                  \
    \           expected due to this\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<String>`\n\nerror[E030"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music = music_string.split_whitespace();\n\
    \n    let mut beats: Vec<isize> = music.iter().cloned().collect();\n    let mut\
    \ last_note = -1;\n    let mut last_beat = 0;\n\n    for note in music.iter()\
    \ {\n        match note {\n            \"o\" => {\n                beats[last_beat]\
    \ = 0;\n                last_note = 0;\n            }\n            \"o|\" => {\n\
    \                beats[last_beat] = beats[last_beat] + (4 as isize);\n       \
    \         last_note = 1;\n            }\n            \".|\" => {\n           \
    \     beats[last_beat] = beats[last_beat] + (1 as isize);\n                last_note\
    \ = 2;\n            }\n            _ => {\n                println!(\"Unknown\
    \ note, skipping\");\n                continue;\n            }\n        }\n  \
    \      last_beat = last_beat * 4;\n    }\n    beats\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp_hw0iwsn.rs:13:39\n   |\n13 |     let mut\
    \ beats: Vec<isize> = music.iter().cloned().collect();\n   |                 \
    \                      ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0599]:\
    \ no method named `iter` found for struct `SplitWhitespace` in the current scope\n\
    \  --> /tmp/tmp_hw0iwsn.rs:17:23\n   |\n17 |     for note in music.iter() {\n\
    \   |                       ^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // write your code here\n    let mut beats = 0;\n\
    \    let mut notes = music_string.split(' ');\n    notes.for_each(|note|{\n  \
    \      if note == \".\" || note == \"o\" {\n            beats = 4;\n        }\n\
    \        if note == \"o|\" || note == \".|\" {\n            beats = 2;\n     \
    \   }\n        if note == \"o||\" || note == \".|\" {\n            beats = 1;\n\
    \        }\n    });\n    beats.to_vec()\n}\n\nfn main() {\n    let candidate =\
    \ parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `to_vec` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp5tfxlm_b.rs:25:11\n   |\n25 |     beats.to_vec()\n   |        \
    \   ^^^^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n\
    \   |\n12 |     let mut beats: i32 = 0;\n   |         ~~~~~~~~~~~~~~\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![];\n    let mut\
    \ current_beat: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => current_beat = 4,\n            'o|' => current_beat\
    \ = 2,\n            '.|' => current_beat = 1,\n            _ => (),\n        }\n\
    \        beats.push(current_beat);\n    }\n    beats\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp8ss641bb.rs:16:16\n\
    \   |\n16 |             'o|' => current_beat = 2,\n   |                ^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = vec![];\n    let mut current_beat:\
    \ isize = 0;\n    let mut i = 0;\n    let mut current_note = 0;\n    let mut notes_chars\
    \ = music_string.chars();\n    while i < music_string.len() {\n        let current_char\
    \ = notes_chars.next()?;\n        match current_char {\n            'o' => current_beat\
    \ += 4,\n            'o|' => current_beat += 2,\n            '.|' => current_beat\
    \ += 1,\n            _ => {\n                beats.push(current_beat);\n     \
    \           current_beat = 0;\n                current_note += 1;\n          \
    \  }\n        }\n        i += 1;\n    }\n    beats.push(current_beat);\n    beats.clone_without_zeros()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpdhq8k6ud.rs:20:16\n\
    \   |\n20 |             'o|' => current_beat += 2,\n   |                ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split(' ').collect::<Vec<_>>().into_iter()\n\
    \        .map(|note|\n            note.chars().filter(|c| !c.is_ascii()).take_while(|c|\
    \ c != 'o')\n                .collect::<Vec<_>>().into_iter()\n              \
    \  .filter(|c| c != 'o').count()).collect()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpc8bev6vs.rs:13:69\n\
    \   |\n13 |             note.chars().filter(|c| !c.is_ascii()).take_while(|c|\
    \ c != 'o')\n   |                                                            \
    \         ^^ no implementation for `&char == char`\n   |\n   = help: the trait\
    \ `PartialEq<char>` is not implemented for `&char`\n   = help: the trait `PartialEq`\
    \ is implemented for `char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpc8bev6vs.rs:15:31\n   |\n15 |                 .filter(|c| c !=\
    \ 'o').count()).collect()\n   |                               ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator over\
    \ elements of type `usize`\n    --> /tmp/tmpc8bev6vs.rs:15:48\n     |\n15   |\
    \                 .filter(|c| c != 'o').count()).collect()\n     |           \
    \                                     ^^^^^^^ value of type `Vec<isize>` cannot\
    \ be built from `std::iter::Iterator<Item=usize>`\n     |\n     = help: the trait\
    \ `FromIterator<usize>` is not implemented for `Vec<isize>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes = music_string.chars().map(|x| x).collect();\n\
    \    notes = notes.iter().filter_map(|x| match x {\n        'o' => Some(4),\n\
    \        'o|' => Some(2),\n        '.|' => Some(1),\n        _ => None,\n    }).collect();\n\
    \    notes.sort_by(|a, b| a.cmp(b));\n    notes.into_iter().map(|x| x).collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpti_6o5ks.rs:14:12\n\
    \   |\n14 |         'o|' => Some(2),\n   |            ^^^^^^^^^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // Write your parsing code here\n    let mut output\
    \ = vec![];\n    let mut note_chars: Vec<&str> = music_string.chars().collect();\n\
    \n    for i in 0..music_string.len() - 4 {\n        let last_note = note_chars[i]\
    \ == 'o' || note_chars[i] == '.';\n        let note_beat_length = last_note ?\
    \ 4 : 2;\n        let beats_num = *note_chars.iter()\n            .skip_while(|&x|\
    \ x == note_chars.last().unwrap())\n            .take(note_beat_length)\n    \
    \        .count();\n        output.push(beats_num);\n    }\n    output\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `4`\n\
    \  --> /tmp/tmp7313yjr8.rs:17:44\n   |\n17 |         let note_beat_length = last_note\
    \ ? 4 : 2;\n   |                                            ^ expected one of\
    \ `.`, `;`, `?`, `else`, or an operator\n\nerror[E0277]: a value of type `Vec<&str>`\
    \ cannot be built from an iterator over elements of type `char`\n    --> /tmp/tmp7313yjr8.rs:13:58\n\
    \     |\n13   |     let mut note_chars: Vec<&str> = music_string.chars().collect();\n\
    \     |                                                          ^^^^^^^ value\
    \ of type `Vec<&str>` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \     |\n     = help: the trait `FromIterator<char>` is not implemented for `Vec<&str>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0277]: can't compare `&str` with `char`\n\
    \  --> /tmp/tmp7313yjr8.rs:16:39\n   |\n16 |         let last_note = note_chars[i]\
    \ == 'o' || note_chars[i] == '.';\n   |                                      \
    \ ^^ no implementation for `&str == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&str`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n   \
    \          <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0277]: can't compare `&str` with `char`\n  -->\
    \ /tmp/tmp7313yjr8.rs:16:63\n   |\n16 |         let last_note = note_chars[i]\
    \ == 'o' || note_chars[i] == '.';\n   |                                      \
    \                         ^^ no implementation for `&str == char`\n   |\n   =\
    \ help: the trait `PartialEq<char>` is not implemented for `&str`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             <&'a\
    \ str as PartialEq<"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split(|&x| !x.is_empty()).map(|x|\
    \ {\n        match x {\n            \"o\" => 1,\n            \"o|\" => 2,\n  \
    \          \".|\" => 1,\n            _ => return vec![0],\n        }\n    }).sum()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed for `&_`\n  --> /tmp/tmp49madtc0.rs:11:25\n\
    \   |\n11 |     music_string.split(|&x| !x.is_empty()).map(|x| {\n   |       \
    \                  ^^ consider giving this closure parameter the explicit type\
    \ `&_`, with the type parameters specified\n   |\n   = note: type must be known\
    \ at this point\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp49madtc0.rs:12:9\n\
    \   |\n12 | /         match x {\n13 | |             \"o\" => 1,\n14 | |      \
    \       \"o|\" => 2,\n15 | |             \".|\" => 1,\n16 | |             _ =>\
    \ return vec![0],\n17 | |         }\n   | |_________^ expected struct `Vec`, found\
    \ integer\n   |\n   = note: expected struct `Vec<{integer}>`\n               \
    \ found type `{integer}`\nnote: return type inferred to be `Vec<{integer}>` here\n\
    \  --> /tmp/tmp49madtc0.rs:16:25\n   |\n16 |             _ => return vec![0],\n\
    \   |                         ^^^^^^^\n   = note: this error originates in the\
    \ macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror[E0277]: the trait bound `Vec<isize>: Sum<Vec<{integer}>>` is not satisfied\n\
    \    --> /tmp/tmp49madtc0.rs:18:8\n     |\n18   |     }).sum()\n     |       \
    \ ^^^ the trait `Sum<Vec<{integer}>>` is not implemented for `Vec<isize>`\n  \
    \   |\n     = help: the following other types implement trait `Sum<A>`:\n    \
    \           <Duration as Sum<&'a Duration>>\n               <Duration as Sum>\n\
    \               <Option<T> as Sum<Option<U>>>\n               <Result<T, E> as\
    \ Sum<Result<U, E>>>\n               <Simd<f32, LANES> as Sum<&'a Simd<f32, LANES>>>\n\
    \               <Simd<f32, LANES> as Sum>\n               <Simd<f64, LANES> as\
    \ Sum<&'a Simd<f64, LANES>>>\n               <Simd<f64, LANES> as Sum>\n     \
    \        and 72 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0282, E0308.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut note =\
    \ String::new();\n    for c in music_string.chars() {\n        if c == 'o' {\n\
    \            if note.is_empty() {\n                continue;\n            }\n\
    \            beats.push(note.len());\n            note.clear();\n            continue;\n\
    \        }\n\n        if c.is_whitespace() {\n            continue;\n        }\n\
    \n        note.push(c);\n    }\n\n    beats.push(note.len());\n    note.clear();\n\
    \    return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7_9h_at5.rs:32:12\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |              \
    \                           ---------- expected `Vec<isize>` because of return\
    \ type\n...\n32 |     return beats;\n   |            ^^^^^ expected `isize`, found\
    \ `usize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<usize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split(' ').collect::<Vec<_>>().iter()\n\
    \        .map(|c| match c {\n            'o' => 1,\n            '|' => 2,\n  \
    \          '.' => 3,\n            _ => unimplemented!(),\n        })\n       \
    \ .collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = parse_music;\n \
    \   assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpteflqksh.rs:13:13\n   |\n\
    12 |         .map(|c| match c {\n   |                        - this expression\
    \ has type `&&str`\n13 |             'o' => 1,\n   |             ^^^ expected\
    \ `str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpteflqksh.rs:14:13\n\
    \   |\n12 |         .map(|c| match c {\n   |                        - this expression\
    \ has type `&&str`\n13 |             'o' => 1,\n14 |             '|' => 2,\n \
    \  |             ^^^ expected `str`, found `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpteflqksh.rs:15:13\n   |\n12 |         .map(|c| match c\
    \ {\n   |                        - this expression has type `&&str`\n...\n15 |\
    \             '.' => 3,\n   |             ^^^ expected `str`, found `char`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut cur_note = 0;\n    let mut cur_beat = 0;\n    let mut last_note = music_string.chars().skip(1).next().unwrap();\n\
    \    beats.push(cur_beat);\n    if last_note == 'o' {\n        cur_note = 4;\n\
    \        cur_beat += 4;\n    }\n    beats.push(cur_beat);\n    while music_string.chars().any(|&c|\
    \ c == last_note) {\n        beats.push(cur_beat);\n        last_note = music_string.chars().skip(1).next().unwrap();\n\
    \        cur_beat++;\n        if last_note == 'o' {\n            cur_note = 4;\n\
    \            cur_beat += 4;\n        }\n        beats.push(cur_beat);\n    }\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp4jsm1rfy.rs:24:17\n\
    \   |\n24 |         cur_beat++;\n   |                 ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n24 |         { let tmp = cur_beat; cur_beat\
    \ += 1; tmp };\n   |         +++++++++++         ~~~~~~~~~~~~~~~~~~~~~~\n24 -\
    \         cur_beat++;\n24 +         cur_beat += 1;\n   | \n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4jsm1rfy.rs:21:37\n   |\n21 |     while music_string.chars().any(|&c|\
    \ c == last_note) {\n   |                                     ^--\n   |      \
    \                               ||\n   |                                     |expected\
    \ due to this\n   |                                     expected `char`, found\
    \ reference\n   |                                     help: did you mean `c`:\
    \ `&char`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes: Vec<isize> = vec![];\n    music_string.split_whitespace().for_each(|note|\
    \ {\n        if note == \".\" {\n            notes.push(4);\n        }\n     \
    \   if note == \"o\" {\n            notes.push(1);\n        }\n        if note\
    \ == \"|\" {\n            notes.push(2);\n        }\n    });\n    notes\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpa02admjz.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_vec = Vec::new();\n    music_vec.reserve(music_string.len());\n\
    \    let mut notes = 0;\n    let mut current_note = 0;\n    let mut note_in_chord\
    \ = 0;\n    let mut current_chord = 0;\n    for c in music_string {\n        if\
    \ c == 'o' || c == '|' || c == ' ' {\n            if notes == 0 {\n          \
    \      notes_in_chord(notes, note_in_chord);\n                notes = 0;\n   \
    \             note_in_chord = 0;\n                notes++;\n            }\n  \
    \      } else {\n            notes++;\n        }\n        if c == 'o' || c ==\
    \ '|' || c == ' ' || c == '.' {\n            notes--;\n        }\n        current_note\
    \ = notes;\n    }\n    if notes > 0 {\n        notes_in_chord(notes, note_in_chord);\n\
    \        notes = 0;\n        note_in_chord = 0;\n        notes++;\n        music_vec.push(notes);\n\
    \    }\n    return music_vec;\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpur2cncpi.rs:23:22\n\
    \   |\n23 |                 notes++;\n   |                      ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n23 |               \
    \  { let tmp = notes; notes += 1; tmp };\n   |                 +++++++++++   \
    \   ~~~~~~~~~~~~~~~~~~~\n23 -                 notes++;\n23 +                 notes\
    \ += 1;\n   | \n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmpur2cncpi.rs:26:18\n\
    \   |\n26 |             notes++;\n   |                  ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n26 |             { let tmp =\
    \ notes; notes += 1; tmp };\n   |             +++++++++++      ~~~~~~~~~~~~~~~~~~~\n\
    26 -             notes++;\n26 +             notes += 1;\n   | \n\nerror: expected\
    \ expression, found `;`\n  --> /tmp/tmpur2cncpi.rs:29:20\n   |\n29 |         \
    \    notes--;\n   |                    ^ expected expression\n\nerror: Rust has\
    \ no postfix increment operator\n  --> /tmp/tmpur2cncpi.rs:37:14\n   |\n37 | \
    \        notes++;\n   |              ^^ not a valid postfix operator\n   |\nhelp:\
    \ use `+= 1` instead\n   |\n37 |         { let tmp = notes; notes += 1; tmp };\n\
    \   |         +++++++++++      ~~~~~~~~~~~~~~~~~~~\n37 -         notes++;\n37\
    \ +         notes += 1;\n   | \n\nerror[E0425]: cannot find function `notes_in_chord`\
    \ in this scope\n  --> /tmp/tmpur2cncpi.rs:20:17\n   |\n20 |                 notes_in_chord(notes,\
    \ note_in_chord);\n   |                 ^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `note_in_chord`\n\nerror[E0425]: cannot find function\
    \ `notes_in_chord` in this scope\n  --> /tmp/tmpur2cncpi.rs:34:9\n   |\n34 | \
    \        notes_in_chord(notes, note_in_chord);\n   |         ^^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `note_in_chord`\n\nerror[E0277]:\
    \ `String` is not an iterator\n  --> /tmp/tmpur2cncpi.rs:17:14\n   |\n17 |   \
    \  for c in music_string {\n   |              ^^^^^^^^^^^^ `String` is not an\
    \ iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator`\
    \ is not implemented for `String`\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![];\n    for c\
    \ in music_string.chars() {\n        match c {\n            'o' => beats.push(4),\n\
    \            'o|' => beats.push(2),\n            '.|' => beats.push(1),\n    \
    \        _ => continue,\n        }\n    }\n    beats\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpscl53og9.rs:15:16\n\
    \   |\n15 |             'o|' => beats.push(2),\n   |                ^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split_whitespace()\n        .filter_map(|note|\
    \ match note {\n            \"o\" => Some(4),\n            \"o|\" => Some(2),\n\
    \            \".|\" => Some(1),\n            _ => None,\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut counter = 0;\n    let mut beats = vec![0;\
    \ 128];\n    for (note, time) in music_string.chars().zip(music_string.chars().skip(1)).zip(0..music_string.len()\
    \ - 1) {\n        if note == 'o' {\n            counter = 0;\n        }\n    \
    \    if note == 'o|' {\n            counter = 2;\n        }\n        if note ==\
    \ '.|' {\n            counter = 1;\n        }\n        if note == '.' {\n    \
    \        counter = 4;\n        }\n        if note == '|' {\n            beats[time\
    \ - 1] += 1;\n        }\n        if note == '-' {\n            beats[time - 1]\
    \ += 3;\n        }\n        if note == '+' {\n            beats[time - 1] += 1;\n\
    \        }\n        if note == '/' {\n            beats[time - 1] += 2;\n    \
    \    }\n        if note == '\\\\' {\n            beats[time - 1] += 2;\n     \
    \   }\n        if note == '#' {\n            beats[time - 1] += 2;\n        }\n\
    \        if note == 'b' {\n            beats[time - 1] += 1;\n        }\n    \
    \    if note == '%' {\n            beats[time - 1] += 1;\n        }\n        if\
    \ note == 't' {\n            beats[time - 1] += 1;\n        }\n        if note\
    \ == 'j' {\n            beats[time - 1] += 1;\n        }\n        if note == 'o'\
    \ {\n            beats[time - 1] += 1;\n        }\n    }\n    beats\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmppqc32vh4.rs:17:23\n\
    \   |\n17 |         if note == 'o|' {\n   |                       ^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    for\
    \ music_note in music_string.chars().filter(|&c| c != '|') {\n        let music_note_index\
    \ = music_string.index(music_note);\n        let music_note_length = music_note_index\
    \ - music_string.len() - 1;\n        let mut beats_at_note = isize::MIN;\n\n \
    \       // if current music note is the beginning of the line, add 0 to the beats\n\
    \        if music_note_length == 0 {\n            beats_at_note += 0;\n      \
    \      continue;\n        }\n\n        // if current music note is the end of\
    \ the line, add 1 to the beats\n        if music_note_length == music_string.len()\
    \ - 1 {\n            beats_at_note += 1;\n            continue;\n        }\n\n\
    \        // if current music note has more than one beat, count each one\n   \
    \     if music_note_length != 1 {\n            for _ in 0..music_note_length {\n\
    \                beats_at_note += 1;\n            }\n            continue;\n \
    \       }\n\n        // if current music note has only one beat, count it once\
    \ for each beat\n        beats_at_note += 1;\n    }\n\n    beats\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `index` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpgmv6h2eu.rs:13:45\n   |\n13 |         let music_note_index\
    \ = music_string.index(music_note);\n   |                                    \
    \         ^^^^^ method not found in `String`\n   |\n   = help: items from traits\
    \ can only be used if the trait is in scope\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::ops::Index;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split(|&c| match c {\n        'o'\
    \ => 1..=4,\n        'o|' => 1..=4,\n        '.|' => 1..=4,\n        _ => 0\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpu5wm7yj0.rs:13:12\n\
    \   |\n13 |         'o|' => 1..=4,\n   |            ^^^^^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut notes: Vec<&str> = music_string.split_whitespace().collect();\n    for note\
    \ in notes {\n        if note.len() == 1 {\n            result.push(1);\n    \
    \    } else {\n            let mut beats = 0;\n            let mut last_note =\
    \ true;\n            for c in note.chars().skip(1) {\n                beats +=\
    \ last_note ? 4 : 1;\n                if c != '|' && c != ' ' {\n            \
    \        break;\n                }\n                last_note = !last_note;\n\
    \            }\n            result.push(beats);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `4`\n\
    \  --> /tmp/tmpxtgf14bh.rs:20:38\n   |\n20 |                 beats += last_note\
    \ ? 4 : 1;\n   |                                      ^ expected one of `.`, `;`,\
    \ `?`, `}`, or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n\n    for music_note\
    \ in music_string.chars() {\n        beats.push(music_note == '.' | music_note\
    \ == 'o' | music_note == 'o|');\n    }\n\n    beats\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpol4e41bc.rs:14:77\n\
    \   |\n14 |         beats.push(music_note == '.' | music_note == 'o' | music_note\
    \ == 'o|');\n   |                                                            \
    \                 ^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split(' ')\n        .map(|s| s.parse().unwrap())\n\
    \        .map(|beats| beats / 4)\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp5dlgds1f.rs:13:15\n\
    \   |\n13 |         .map(|beats| beats / 4)\n   |               ^^^^^ consider\
    \ giving this closure parameter a type\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = music_string.chars().map(|c|\
    \ {\n        let note = match c {\n            'o' => 0,\n            'o|' =>\
    \ 1,\n            '.|' => 2,\n            _ => panic!(\"Invalid note\"),\n   \
    \     };\n        let beat = note / 4\n            + note % 4 / 4\n          \
    \  + note % 4 % 4;\n        beat as isize\n    }).collect();\n    beats.sort_unstable();\n\
    \    beats.reverse();\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpyg5b0kmr.rs:14:16\n\
    \   |\n14 |             'o|' => 1,\n   |                ^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = music_string\n    \
    \    .split_whitespace()\n        .map(|note| {\n            match note {\n  \
    \              \"o\" => 0,\n                \"o|\" => 2,\n                \".|\"\
    \ => 1,\n                _ => panic!(\"{} is not a musical note.\", note),\n \
    \           }\n        })\n        .collect();\n    if beats.len() % 4 != 0 {\n\
    \        panic!(\"music string is not divisible by 4!\");\n    }\n    for i in\
    \ 0..beats.len() / 4 {\n        beats[i] = beats[i] as isize + 4;\n    }\n   \
    \ beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 0, 0, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpo90w5y2f.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_notes: Vec<isize> = vec![0; music_string.len()];\n\
    \    for (pos, &note) in music_string.chars().enumerate() {\n        music_notes[pos]\
    \ = if note == '.' {\n            1\n        } else if note == '|' {\n       \
    \     2\n        } else if note == 'o' {\n            4\n        } else {\n  \
    \          0\n        };\n    }\n    music_notes\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo_jg5tvw.rs:12:15\n   |\n\
    12 |     for (pos, &note) in music_string.chars().enumerate() {\n   |        \
    \       ^^^^^     -------------------------------- this expression has type `Option<(usize,\
    \ char)>`\n   |               |\n   |               expected `char`, found reference\n\
    \   |               help: you can probably remove the explicit borrow: `note`\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split(' ').map(|m| {\n        match\
    \ m {\n            'o' => 4,\n            'o|' => 2,\n            '.|' => 1,\n\
    \            _ => panic!(\"Unknown music symbol: {:?}\", m),\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp69i08qno.rs:14:16\n\
    \   |\n14 |             'o|' => 2,\n   |                ^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![0; 128];\n\n \
    \   let mut last_note = 0;\n    let mut last_beat = 0;\n\n    for note in music_string.chars()\
    \ {\n        if note == ' ' {\n            last_note += 1;\n            last_beat\
    \ = 0;\n        } else if note != 'o' && note != '.' {\n            if last_note\
    \ == 0 {\n                beats[last_beat as usize] += 1;\n            }\n\n \
    \           last_note += 1;\n        } else {\n            last_beat += 1;\n \
    \       }\n    }\n\n    beats.iter().enumerate().for_each(|&b, (&b, &b)| {\n \
    \       if b > last_beat\n            && b - last_beat > 4\n            && b -\
    \ last_beat < 8 {\n            b -= 8;\n        }\n    });\n\n    beats.iter()\n\
    \        .filter(|&b| b == 0)\n        .collect::<Vec<_>>()\n        .into_iter()\n\
    \        .take_while(|&b| b > 4)\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0415]: identifier `b` is bound more than once in this parameter\
    \ list\n  --> /tmp/tmplanurro0.rs:31:46\n   |\n31 |     beats.iter().enumerate().for_each(|&b,\
    \ (&b, &b)| {\n   |                                              ^ used as parameter\
    \ more than once\n\nerror[E0415]: identifier `b` is bound more than once in this\
    \ parameter list\n  --> /tmp/tmplanurro0.rs:31:50\n   |\n31 |     beats.iter().enumerate().for_each(|&b,\
    \ (&b, &b)| {\n   |                                                  ^ used as\
    \ parameter more than once\n\nerror[E0593]: closure is expected to take a single\
    \ 2-tuple as argument, but it takes 2 distinct arguments\n  --> /tmp/tmplanurro0.rs:31:30\n\
    \   |\n31 |     beats.iter().enumerate().for_each(|&b, (&b, &b)| {\n   |     \
    \                         ^^^^^^^^ -------------- takes 2 distinct arguments\n\
    \   |                              |\n   |                              expected\
    \ closure that takes a single 2-tuple as argument\n   |\nhelp: change the closure\
    \ to accept a tuple instead of individual arguments\n   |\n31 |     beats.iter().enumerate().for_each(|(&b,\
    \ _)| {\n   |                                       ~~~~~~~~~\n\nerror[E0277]:\
    \ can't compare `&isize` with `{integer}`\n  --> /tmp/tmplanurro0.rs:40:24\n \
    \  |\n40 |         .filter(|&b| b == 0)\n   |                        ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplanurro0.rs:43:30\n   |\n43 |         .take_while(|&b| b > 4)\n   |\
    \                              ^\n   |                              |\n   |  \
    \                            expected `&isize`, found integer\n   |          \
    \                    help: consider borrowing here: `&4`\n\nerror[E0277]: a value\
    \ of type `Vec<isize>` cannot be built from an iterator over elemen"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let music_string = music_string.trim();\n\n   \
    \ let mut beats = Vec::new();\n    let mut current_beat = 0;\n\n    let mut notes\
    \ = music_string.split_whitespace();\n    while let Some(note) = notes.next()\
    \ {\n        note = note.to_owned();\n\n        if note == \"o\" {\n         \
    \   beats.push(current_beat);\n            current_beat += 4;\n        } else\
    \ if note == \"o|\" {\n            beats.push(current_beat);\n            current_beat\
    \ += 2;\n        } else if note == \".|\" {\n            beats.push(current_beat);\n\
    \            current_beat += 1;\n        } else {\n            return Vec::new();\n\
    \        }\n    }\n\n    beats.push(current_beat);\n    beats\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfg7z1fk2.rs:18:16\n   |\n\
    17 |     while let Some(note) = notes.next() {\n   |                    ---- expected\
    \ due to the type of this binding\n18 |         note = note.to_owned();\n   |\
    \                ^^^^^^^^^^^^^^^\n   |                |\n   |                expected\
    \ `&str`, found struct `String`\n   |                help: consider borrowing\
    \ here: `&note.to_owned()`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_str = music_string.to_string();\n\
    \    music_str.replace(\"o|\", \"4\").replace(\"o|\", \"2\").replace(\"o|\", \"\
    1\").replace(\"o|\", \"1\").replace(\"o|\", \"1\").replace(\"o|\", \"1\").replace(\"\
    o|\", \"4\").replace(\"o|\", \"4\").replace(\"o|\", \"4\");\n    let music_str\
    \ = music_str.trim_end_matches('.');\n    music_str.chars()\n        .filter(|&c|\
    \ c != '|')\n        .collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpwvzg_gzc.rs:16:10\n     |\n16\
    \   |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>` cannot\
    \ be built from `std::iter::Iterator<Item=char>`\n     |\n     = help: the trait\
    \ `FromIterator<char>` is not implemented for `Vec<isize>`\n     = help: the trait\
    \ `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound in\
    \ `collect`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split(\"|\").map(|s| s.chars().take(4).collect::<Vec<Char>>()).collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `Char` in this scope\n  --> /tmp/tmpd99eosgd.rs:11:69\n\
    \   |\n11 |     music_string.split(\"|\").map(|s| s.chars().take(4).collect::<Vec<Char>>()).collect()\n\
    \   |                                                                     ^^^^\n\
    \   |\nhelp: a builtin type with a similar name exists\n   |\n11 |     music_string.split(\"\
    |\").map(|s| s.chars().take(4).collect::<Vec<char>>()).collect()\n   |       \
    \                                                              ~~~~\nhelp: you\
    \ might be missing a type parameter\n   |\n10 | fn parse_music<Char>(music_string:\
    \ String) -> Vec<isize> {\n   |               ++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes: Vec<isize> = music_string.split_whitespace().collect();\n\
    \    notes.sort_by_key(|x| x.chars().count());\n    notes.reverse();\n    notes\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpbfli43ev.rs:11:65\n     |\n11\
    \   |     let mut notes: Vec<isize> = music_string.split_whitespace().collect();\n\
    \     |                                                                 ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0599]: no method named `chars` found for reference\
    \ `&isize` in the current scope\n  --> /tmp/tmpbfli43ev.rs:12:29\n   |\n12 | \
    \    notes.sort_by_key(|x| x.chars().count());\n   |                         \
    \    ^^^^^ method not found in `&isize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string\n        .lines()\n        .filter_map(|line|\
    \ parse_note_line(&line))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `parse_note_line` in this scope\n  -->\
    \ /tmp/tmpbrn74gua.rs:13:28\n   |\n13 |         .filter_map(|line| parse_note_line(&line))\n\
    \   |                            ^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string\n        .lines()\n        .map(|note|\
    \ note.trim().parse::<isize>().unwrap())\n        .filter(|note| note > 0)\n \
    \       .collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpentosfi8.rs:14:31\n   |\n\
    14 |         .filter(|note| note > 0)\n   |                               ^\n\
    \   |                               |\n   |                               expected\
    \ `&isize`, found integer\n   |                               help: consider borrowing\
    \ here: `&0`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    for note in music_string.chars().skip(1)\
    \ {\n        match note {\n            'o' | 'o|' => beats.push(4),\n        \
    \    '.|' => beats.push(2),\n            _ => {\n                let last_beat\
    \ = beats[beats.len()-1] as isize;\n                let new_beat = match note\
    \ {\n                    '|' => 1,\n                    'o' => 4,\n          \
    \          '.' => 2,\n                    '_' => 0,\n                };\n    \
    \            if new_beat > last_beat {\n                    beats.push(new_beat);\n\
    \                }\n            }\n        }\n    }\n    beats\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmprad6azaw.rs:14:22\n\
    \   |\n14 |             'o' | 'o|' => beats.push(4),\n   |                   \
    \   ^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut note_vec: Vec<isize> = vec![];\n    for\
    \ note in music_string.chars() {\n        let note_str = note.to_string();\n \
    \       let note_cords: Vec<isize> = note_str.chars().collect();\n        let\
    \ mut note_beat_vec: Vec<isize> = vec![];\n        for n in 0..(note_cords.len()\
    \ / 6) {\n            let beat_vec: Vec<isize> = note_cords.into_iter().filter(|&x|\
    \ x % 6 == n).collect();\n            note_beat_vec.push(beat_vec.len());\n  \
    \      }\n        note_vec.push(note_beat_vec.len());\n    }\n    return note_vec;\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpn0oxszne.rs:14:55\n     |\n14\
    \   |         let note_cords: Vec<isize> = note_str.chars().collect();\n     |\
    \                                                       ^^^^^^^ value of type\
    \ `Vec<isize>` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n\
    \     = help: the trait `FromIterator<char>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn0oxszne.rs:17:84\n\
    \   |\n17 |             let beat_vec: Vec<isize> = note_cords.into_iter().filter(|&x|\
    \ x % 6 == n).collect();\n   |                                               \
    \                                     ^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n17 |             let beat_vec: Vec<isize> = note_cords.into_iter().filter(|&x|\
    \ x % 6 == n.try_into().unwrap()).collect();\n   |                           \
    \                                                          ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpn0oxszne.rs:18:32\n   |\n18 |\
    \             note_beat_vec.push(beat_vec.len());\n   |                      \
    \          ^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n18 |             note_beat_vec.push(beat_vec.len().try_into().unwrap());\n\
    \   |                                              ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn0oxszne.rs:20:23\n   |\n20 |         note_vec.push(note_beat_vec.len());\n\
    \   |                       ^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n20 |         note_vec.push(note_beat_vec.len().try_into().unwrap());\n\
    \   |                                      "
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_string = music_string.to_string();\n\
    \    music_string.replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\"\
    , \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"\
    o|\", \"|\");\n\n    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"\
    |\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\");\n\n\
    \    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"\
    |\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\");\n\n\
    \    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"\
    |\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\");\n\n\
    \    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"\
    |\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\");\n\n\
    \    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"\
    |\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\");\n\n\
    \    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"\
    |\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\");\n\n\
    \    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"\
    |\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\");\n\n\
    \    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"|\").replace(\"o|\", \"\
    |\")\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp23q1v0pu.rs:36:5\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |              \
    \                           ---------- expected `Vec<isize>` because of return\
    \ type\n...\n36 |     music_string.replace(\"o|\", \"|\").replace(\"o|\", \"|\"\
    ).replace(\"o|\", \"|\").replace(\"o|\", \"|\")\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `String`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `String`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_str: Vec<String> = music_string.split_whitespace().collect();\n\
    \    music_str.sort();\n    let mut beats_counter: Vec<isize> = music_str.len()\
    \ / 4; // 4 beats per note\n    music_str.par_iter_mut().enumerate().for_each(|(i,\
    \ note)| {\n        let last_beat_index = music_str.len() - i as usize;\n    \
    \    match note {\n            \"o\" => beats_counter[last_beat_index] += 4,\n\
    \            \"o|\" => beats_counter[last_beat_index] += 2,\n            \".|\"\
    \ => beats_counter[last_beat_index] += 1,\n            _ => {},\n        }\n \
    \   });\n    beats_counter\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpu8xmsjsr.rs:11:70\n     |\n11\
    \   |     let mut music_str: Vec<String> = music_string.split_whitespace().collect();\n\
    \     |                                                                      ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu8xmsjsr.rs:13:41\n\
    \   |\n13 |     let mut beats_counter: Vec<isize> = music_str.len() / 4; // 4\
    \ beats per note\n   |                            ----------   ^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `usize`\n   |                            |\n  \
    \ |                            expected due to this\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n                found type `usize`\n\nerror[E0599]: no\
    \ method named `par_iter_mut` found for struct `Vec<String>` in the current scope\n\
    \  --> /tmp/tmpu8xmsjsr.rs:14:15\n   |\n14 |     music_str.par_iter_mut().enumerate().for_each(|(i,\
    \ note)| {\n   |               ^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `iter_mut`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_chars = music_string.chars().collect::<Vec<char>>();\n\
    \    let mut counter: usize = 0;\n    let mut beats: Vec<isize> = vec![0; music_chars.len()];\n\
    \    let mut current_char: char;\n\n    while counter < music_chars.len() {\n\
    \        // Read char\n        current_char = music_chars[counter];\n        //\
    \ Add 1 if the char is note (0 or 1)\n        beats[counter] = if current_char\
    \ == '0' { 1 } else { 0 };\n\n        // Add 1 to the counter if the char is a\
    \ '|' char\n        if current_char == '|' {\n            counter += 1;\n    \
    \    }\n        // Else add 1 to the counter if the char is a '.' char\n     \
    \   counter += if current_char == '.' { 1 } else { 0 };\n\n        // Add 1 to\
    \ the counter if the char is a 'o' char\n        counter += if current_char ==\
    \ 'o' { 1 } else { 0 };\n\n        // Reset counter if the char is a '|' char\n\
    \        if current_char == '|' {\n            counter = 0;\n        }\n     \
    \   // Reset counter if the char is a '.' char\n        counter += if current_char\
    \ == '.' { 1 } else { 0 };\n\n        // Reset counter if the char is a 'o' char\n\
    \        counter += if current_char == 'o' { 1 } else { 0 };\n    }\n\n    beats\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, 0, 0, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp5aagef_o.rs:49:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_per_bar = 0;\n\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => beats_per_bar += 4,\n            'o|'\
    \ => beats_per_bar += 2,\n            '.|' => beats_per_bar += 1,\n          \
    \  _ => (),\n        }\n    }\n\n    vec![beats_per_bar]\n}\n\nfn main() {\n \
    \   let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpqo582uxy.rs:16:16\n\
    \   |\n16 |             'o|' => beats_per_bar += 2,\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // Split the input into an array of characters,\
    \ i.e. each character in the array represents a music note\n    let music_chars:\
    \ Vec<&str> = music_string.chars().collect();\n    \n    // Define a variable\
    \ 'beats' that stores how many beats each note last for\n    let mut beats: Vec<isize>\
    \ = music_chars.len() as Vec<_>;\n\n    // Go through each music character and\
    \ calculate the number of beats\n    for character in music_chars {\n        //\
    \ If the character is an 'o' or '|', then it represents a whole note or a half\
    \ note\n        if character == 'o' || character == '|' {\n            // If the\
    \ previous character was also a 'o' or '|' then that means the last note of last\
    \ beat has\n            // completed the beat, so update the number of beats of\
    \ that note and add 1 to its position\n            if beats[beats.len() - 1] ==\
    \ character {\n                beats[beats.len() - 1] += 1;\n            } else\
    \ {\n                // If not, then it is a new note and update the count of\
    \ beats\n                beats.push(1)\n            }\n        } else {\n    \
    \        // Otherwise, its a new beat and add 1 to its position\n            beats.push(1)\n\
    \        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<&str>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmppcld9xzl.rs:12:55\n     |\n12\
    \   |     let music_chars: Vec<&str> = music_string.chars().collect();\n     |\
    \                                                       ^^^^^^^ value of type\
    \ `Vec<&str>` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n\
    \     = help: the trait `FromIterator<char>` is not implemented for `Vec<&str>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0277]: can't compare `&str` with `char`\n\
    \  --> /tmp/tmppcld9xzl.rs:20:22\n   |\n20 |         if character == 'o' || character\
    \ == '|' {\n   |                      ^^ no implementation for `&str == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&str`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0277]: can't compare\
    \ `&str` with `char`\n  --> /tmp/tmppcld9xzl.rs:20:42\n   |\n20 |         if character\
    \ == 'o' || character == '|' {\n   |                                         \
    \ ^^ no implementation for `&str == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&str`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n   \
    \          <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E03"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes = music_string.to_string().split_whitespace();\n\
    \    let mut beats_per_note = 0;\n    for note in notes {\n        match note.chars().next().unwrap()\
    \ {\n            'o' => beats_per_note += 4,\n            '|' => beats_per_note\
    \ += 2,\n            '.' => beats_per_note += 1,\n            _ => {} // ignore\
    \ anything else\n        }\n    }\n    notes\n        .iter()\n        .enumerate()\n\
    \        .filter(|(_, note)| note != 'o')\n        .map(|(idx, note)| {\n    \
    \        match note.chars().next().unwrap() {\n                'o' => 4,\n   \
    \             '|' => 2,\n                '.' => 1,\n                _ => 0,\n\
    \            }\n        })\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp7ud3bvoi.rs:22:10\n   |\n22 |         .iter()\n\
    \   |          ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let music_list = music_string.split_whitespace();\n\
    \    let mut beats_per_note = vec![];\n    for music in music_list {\n       \
    \ if music.len() == 1 {\n            beats_per_note.push(0);\n        } else {\n\
    \            beats_per_note.push(music.len() * 4);\n        }\n    }\n    beats_per_note\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb8th8lx5.rs:20:5\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |              \
    \                           ---------- expected `Vec<isize>` because of return\
    \ type\n...\n20 |     beats_per_note\n   |     ^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<usize>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = vec![0; music_string.len()];\n\
    \    let mut last_beat = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                let last_beat = last_beat * 4 + 4;\n\
    \                result.push(last_beat);\n            }\n            'o|' => {\n\
    \                let last_beat = last_beat * 4 + 2;\n                result.push(last_beat);\n\
    \            }\n            '.|' => {\n                let last_beat = last_beat;\n\
    \                result.push(last_beat);\n            }\n            _ => (),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmps5lttrzd.rs:19:16\n\
    \   |\n19 |             'o|' => {\n   |                ^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut note_counts = vec![];\n    let mut note_to_beats\
    \ = vec![];\n    let mut beats_since_last_note = vec![];\n    let mut current_note\
    \ = 0;\n    let mut current_note_is_longer = false;\n    let mut current_note_length\
    \ = 1;\n\n    for music_note in music_string.chars().filter(|&c| c != '|') {\n\
    \        note_counts.push(0);\n        note_to_beats.push(current_note);\n   \
    \     beats_since_last_note.push(0);\n        current_note += 1;\n        current_note_is_longer\
    \ = false;\n        current_note_length = 1;\n\n        if c == 'o' {\n      \
    \      current_note_is_longer = true;\n        }\n    }\n\n    note_to_beats.sort();\n\
    \n    for (i, note_to_beat) in note_to_beats.iter().enumerate() {\n        if\
    \ note_counts[i] != 0 {\n            note_counts[i] += 1;\n            if note_counts[i]\
    \ == 4 {\n                beats_since_last_note.push(4);\n            } else {\n\
    \                beats_since_last_note.push(beats_since_last_note[note_to_beat\
    \ - 1] + 1);\n            }\n        }\n    }\n\n    beats_since_last_note\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmps82pj_v2.rs:26:12\n\
    \   |\n26 |         if c == 'o' {\n   |            ^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut note_count = music_string.chars().enumerate().map(|(n,\
    \ _)| {\n        let mut beats = 1;\n        let mut last_note = Some(n);\n  \
    \      loop {\n            let n = last_note.unwrap_or(n);\n            last_note\
    \ = Some(n);\n            beats *= 4;\n            if n > music_string.len() {\n\
    \                break;\n            }\n            if music_string[n - 1] ==\
    \ '|' {\n                beats *= 2;\n            }\n        }\n        beats\n\
    \    }).collect::<Vec<_>>();\n    note_count = note_count.into_iter().map(|n|\
    \ n).collect::<Vec<_>>();\n    note_count\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp8y46zo38.rs:21:16\n\
    \   |\n21 |             if music_string[n - 1] == '|' {\n   |                ^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = vec![];\n    let mut notes = music_string.chars().enumerate();\n\
    \    for mut (_, note) in notes.by_ref().take(music_string.len()) {\n        if\
    \ note == 'o' || note == '.' {\n            beats.push(music_string.len() - note);\n\
    \        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: `mut` must be attached to each individual binding\n  --> /tmp/tmpi1gkho01.rs:13:9\n\
    \   |\n13 |     for mut (_, note) in notes.by_ref().take(music_string.len()) {\n\
    \   |         ^^^^^^^^^^^^^ help: add `mut` to each binding: `(_, mut note)`\n\
    \   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n\
    \nerror[E0277]: cannot subtract `char` from `usize`\n  --> /tmp/tmpi1gkho01.rs:15:43\n\
    \   |\n15 |             beats.push(music_string.len() - note);\n   |         \
    \                                  ^ no implementation for `usize - char`\n  \
    \ |\n   = help: the trait `Sub<char>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat_length = 0;\n    let mut current_note = 0;\n\n    for ch in\
    \ music_string {\n        if ch == ' ' {\n            beats.push(current_beat_length);\n\
    \            current_beat_length = 0;\n            current_note = 0;\n       \
    \ } else {\n            current_beat_length += 1;\n            match ch {\n  \
    \              'o' => current_note += 1,\n                '|' => current_note\
    \ += 2,\n                '.' => current_note += 4,\n                '<' => current_note\
    \ += 8,\n                '(' if ch == '-' => {\n                    current_note\
    \ -= 8;\n                    current_beat_length -= 8;\n                },\n \
    \               _ => {\n                    current_note += 1;\n             \
    \       current_beat_length += 1;\n                }\n            }\n        }\n\
    \    }\n\n    beats.push(current_beat_length);\n\n    beats\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: `String` is not an iterator\n  --> /tmp/tmpxl5a7pwr.rs:15:15\n\
    \   |\n15 |     for ch in music_string {\n   |               ^^^^^^^^^^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the\
    \ trait `Iterator` is not implemented for `String`\n   = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = vec![];\n    let mut note = String::new();\n\
    \    let mut last = false;\n    let mut last_beat = String::new();\n    let mut\
    \ i = 1;\n    while i < music_string.len() {\n        let c = music_string.chars()\n\
    \            .find(|&c| c.is_ascii() && c == music_string[i])\n            .unwrap();\n\
    \        if c == ' ' || c == '\\n' || c == '\\t' {\n            note.clear();\n\
    \            last = false;\n            i += 1;\n            continue;\n     \
    \   }\n        if c == 'o' || c == '|' {\n            last = true;\n        }\n\
    \        if c == '|' && !last {\n            beat_count(&music_string, i, &mut\
    \ beats);\n            i += 1;\n            continue;\n        }\n        note.push(c);\n\
    \        i += 1;\n        last_beat.push(c);\n    }\n    beat_count(&music_string,\
    \ i, &mut beats);\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `beat_count` in this scope\n  --> /tmp/tmpknfmxpnb.rs:30:13\n\
    \   |\n30 |             beat_count(&music_string, i, &mut beats);\n   |      \
    \       ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `beat_count` in this scope\n  --> /tmp/tmpknfmxpnb.rs:38:5\n   |\n38 |     beat_count(&music_string,\
    \ i, &mut beats);\n   |     ^^^^^^^^^^ not found in this scope\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpknfmxpnb.rs:18:45\n\
    \   |\n18 |             .find(|&c| c.is_ascii() && c == music_string[i])\n   |\
    \                                             ^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = music_string.trim().split('|').map(|x|\
    \ x.parse().unwrap()).collect();\n\n    for i in 0..beats.len() {\n        if\
    \ beats[i] % 4 == 0 {\n            beats[i] = beats[i] * 4;\n        }\n    }\n\
    \    return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\
    \ ParseIntError { kind: Empty }', /tmp/tmpvtk9bxw7.rs:11:82\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![];\n    for note\
    \ in music_string.chars().filter(|c| c.is_ascii()) {\n        let mut current_beat:\
    \ isize = 1;\n        if note == 'o' {\n            current_beat = 4;\n      \
    \  } else if note == 'o|' {\n            current_beat = 2;\n        } else if\
    \ note == '.|' {\n            current_beat = 1;\n        }\n        beats.push(current_beat);\n\
    \    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp2qkri7qc.rs:16:30\n\
    \   |\n16 |         } else if note == 'o|' {\n   |                           \
    \   ^^^\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes: Vec<isize> = vec![];\n    music_string.split(\"\
    \").iter().for_each(|c| {\n        if c == 'o' {\n            notes.push(4);\n\
    \        } else if c == '|' {\n            notes.push(2);\n        } else if c\
    \ == '.' {\n            notes.push(1);\n        } else {\n            notes.push(0);\n\
    \        }\n    });\n    notes\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `std::str::Split`\
    \ in the current scope\n  --> /tmp/tmplg1olaj4.rs:12:28\n   |\n12 |     music_string.split(\"\
    \").iter().for_each(|c| {\n   |                            ^^^^ method not found\
    \ in `std::str::Split<'_, &str>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut output = Vec::new();\n    let mut current_note\
    \ = 0;\n    let mut notes = music_string.split_whitespace();\n    for i in 0..music_string.len()\
    \ {\n        let n = notes[i].chars().next().unwrap();\n        let beats = match\
    \ n.to_string().as_str() {\n            \"o\" => 4,\n            \"o|\" => 2,\n\
    \            \".|\" => 1,\n            _ => panic!(),\n        };\n        if\
    \ current_note == 0 {\n            output.push(beats * 4 as isize);\n        }\
    \ else {\n            output[current_note - 1] += beats as isize;\n        }\n\
    \        current_note = n;\n    }\n    output\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `SplitWhitespace<'_>`\n\
    \  --> /tmp/tmpz5xn25tk.rs:15:17\n   |\n15 |         let n = notes[i].chars().next().unwrap();\n\
    \   |                 ^^^^^^^^\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0608`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string\n        .trim()\n        .split_whitespace()\n\
    \        .map(|note| note.chars().enumerate().filter(|(_, ch)| ch == 'o').count())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp1cold_k2.rs:14:66\n\
    \   |\n14 |         .map(|note| note.chars().enumerate().filter(|(_, ch)| ch ==\
    \ 'o').count())\n   |                                                        \
    \          ^^ no implementation for `&char == char`\n   |\n   = help: the trait\
    \ `PartialEq<char>` is not implemented for `&char`\n   = help: the trait `PartialEq`\
    \ is implemented for `char`\n\nerror[E0277]: a value of type `Vec<isize>` cannot\
    \ be built from an iterator over elements of type `usize`\n    --> /tmp/tmp1cold_k2.rs:15:10\n\
    \     |\n15   |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=usize>`\n     |\n     = help:\
    \ the trait `FromIterator<usize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars()\n        .enumerate()\n  \
    \      .map(|(idx, c)| {\n            match c {\n                '.' => 0,\n \
    \               '|' => 1,\n                'o' => idx % 4 as isize,\n        \
    \        _ => 0,\n            }\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpknnh3gp2.rs:17:30\n   |\n\
    17 |                 'o' => idx % 4 as isize,\n   |                          \
    \    ^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot mod `usize`\
    \ by `isize`\n  --> /tmp/tmpknnh3gp2.rs:17:28\n   |\n17 |                 'o'\
    \ => idx % 4 as isize,\n   |                            ^ no implementation for\
    \ `usize % isize`\n   |\n   = help: the trait `Rem<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `usize`\n    --> /tmp/tmpknnh3gp2.rs:21:10\n\
    \     |\n21   |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=usize>`\n     |\n     = help:\
    \ the trait `FromIterator<usize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut current_beat\
    \ = 0;\n\n    for note in music_string.chars() {\n        match note {\n     \
    \       'o' => beats.push(current_beat);\n            'o|' => beats.push(current_beat\
    \ / 2);\n            '.|' => beats.push(current_beat / 4);\n            _ => {}\n\
    \        }\n\n        if note == '.' {\n            beats.push(0);\n        }\n\
    \n        current_beat++;\n    }\n\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp1w3rbg8u.rs:17:16\n\
    \   |\n17 |             'o|' => beats.push(current_beat / 2);\n   |          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = vec![];\n    for (i, ch) in music_string.chars().enumerate()\
    \ {\n        let beat = match ch {\n            '.' => {\n                if beats.len()\
    \ == 0 {\n                    beats.push(4);\n                } else {\n     \
    \               beats[beats.len() - 1] += 1;\n                }\n            \
    \    continue;\n            }\n            '|' => {\n                if beats.len()\
    \ == 0 {\n                    beats.push(2);\n                } else {\n     \
    \               beats[beats.len() - 1] += 1;\n                }\n            \
    \    continue;\n            }\n            c if c == ' ' => {\n              \
    \  if beats.len() == 0 {\n                    beats.push(1);\n               \
    \ } else {\n                    beats[beats.len() - 1] += 1;\n               \
    \ }\n            }\n            _ => {\n                if beats.len() == 0 {\n\
    \                    beats.push(1);\n                } else {\n              \
    \      beats[beats.len() - 1] += 1;\n                }\n            }\n      \
    \  };\n        beats.push(beat);\n    }\n    beats\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa7158t6s.rs:45:20\n   |\n\
    45 |         beats.push(beat);\n   |                    ^^^^ expected integer,\
    \ found `()`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string\n        .lines()\n        .filter_map(|x|\
    \ x.chars().map(|c| match c {\n            ' ' => 0,\n            'o' => 0,\n\
    \            '|' => 1,\n            '.' => 2,\n            _ => unreachable!(\"\
    Unrecognised character {:?}\", c),\n        }))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfai8o5yj.rs:13:25\n   |\n\
    13 |           .filter_map(|x| x.chars().map(|c| match c {\n   |  _________________________^\n\
    14 | |             ' ' => 0,\n15 | |             'o' => 0,\n16 | |           \
    \  '|' => 1,\n17 | |             '.' => 2,\n18 | |             _ => unreachable!(\"\
    Unrecognised character {:?}\", c),\n19 | |         }))\n   | |__________^ expected\
    \ enum `Option`, found struct `Map`\n   |\n   = note: expected enum `Option<_>`\n\
    \            found struct `Map<Chars<'_>, [closure@/tmp/tmpfai8o5yj.rs:13:39:\
    \ 19:10]>`\nhelp: try wrapping the expression in `Some`\n   |\n13 ~         .filter_map(|x|\
    \ Some(x.chars().map(|c| match c {\n14 |             ' ' => 0,\n15 |         \
    \    'o' => 0,\n16 |             '|' => 1,\n17 |             '.' => 2,\n18 | \
    \            _ => unreachable!(\"Unrecognised character {:?}\", c),\n ...\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_to_notes_map: HashMap<String, Vec<isize>>\
    \ = HashMap::new();\n    for note in music_string.chars() {\n        match note\
    \ {\n            'o' => {\n                beats_to_notes_map.insert(\n      \
    \              String::from(note as char),\n                    vec![i32::from(i32::from(1))],\n\
    \                );\n            }\n            'o|' => {\n                beats_to_notes_map.insert(\n\
    \                    String::from(note as char),\n                    vec![i32::from(i32::from(1)),\
    \ i32::from(i32::from(4))],\n                );\n            }\n            '.|'\
    \ => {\n                beats_to_notes_map.insert(\n                    String::from(note\
    \ as char),\n                    vec![i32::from(i32::from(1))],\n            \
    \    );\n            }\n            _ => {\n                println!(\"Invalid\
    \ note: {:?}\", note);\n                panic!(\"Invalid note\");\n          \
    \  }\n        }\n    }\n    beats_to_notes_map.iter().map(|(_, beats)| beats).collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp6p1pd6an.rs:20:16\n\
    \   |\n20 |             'o|' => {\n   |                ^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = music_string.trim().split_whitespace().collect();\n\
    \    let mut note_count = 0;\n    for note in music_string.trim().split_whitespace()\
    \ {\n        if note.chars().all(|c| c == 'o') {\n            note_count += 4;\n\
    \        } else if note.chars().all(|c| c == 'o|') {\n            note_count +=\
    \ 2;\n        } else if note.chars().all(|c| c == '.|') {\n            note_count\
    \ += 1;\n        }\n    }\n    beats.push(note_count);\n    beats\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp43xnqy84.rs:16:48\n\
    \   |\n16 |         } else if note.chars().all(|c| c == 'o|') {\n   |        \
    \                                        ^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string\n        .chars()\n        .filter(|c|\
    \ c.is_ascii())\n        .filter_map(|c| {\n            if c == 'o' {\n      \
    \          Some(4)\n            } else if c == 'o|' {\n                Some(2)\n\
    \            } else if c == '.|' {\n                Some(1)\n            } else\
    \ {\n                None\n            }\n        })\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpp6e1wc64.rs:17:31\n\
    \   |\n17 |             } else if c == 'o|' {\n   |                          \
    \     ^^^\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_notes = music_string.to_string().into_bytes();\n\
    \    let mut beats = Vec::new();\n    let mut current_beat = 0;\n    let mut last\
    \ = false;\n\n    music_notes.iter().for_each(|b|\n        if b == b'|' {\n  \
    \          last = true;\n            current_beat = 1;\n        } else if !last\
    \ {\n            beats.push(current_beat);\n            current_beat = 1;\n  \
    \      } else {\n            current_beat += 1;\n        }\n    );\n\n    beats\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&u8` with `u8`\n  --> /tmp/tmpqm2p9e2a.rs:17:14\n\
    \   |\n17 |         if b == b'|' {\n   |              ^^ no implementation for\
    \ `&u8 == u8`\n   |\n   = help: the trait `PartialEq<u8>` is not implemented for\
    \ `&u8`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut current_note = 0;\n    let mut note_length = -1;\n\n    for letter in music_string.chars()\
    \ {\n        match letter {\n            '.' => {\n                note_length\
    \ = -2;\n                beats.truncate(beats.len() - 1);\n                beats.push(isize::MAX);\n\
    \                current_note = 0;\n            }\n            '|' => {\n    \
    \            note_length = -1;\n                beats.truncate(beats.len() - 1);\n\
    \                beats.push(isize::MAX);\n                current_note = 0;\n\
    \            }\n            'o' => {\n                beats.truncate(beats.len()\
    \ - 1);\n                beats.push(isize::MAX);\n                current_note\
    \ = 0;\n            }\n            'o|' => {\n                beats.truncate(beats.len()\
    \ - 1);\n                beats.push(isize::MAX);\n                current_note\
    \ = 1;\n            }\n            _ => {\n                let beats_to_add =\
    \ if note_length == -1 {\n                    4\n                } else if note_length\
    \ == -2 {\n                    2\n                } else {\n                 \
    \   1\n                };\n                beats.append(beats.len() * beats_to_add);\n\
    \                beats.push(isize::MAX);\n                current_note = 0;\n\
    \                note_length = -1;\n            }\n        }\n\n        beats[current_note\
    \ as usize] += 1;\n    }\n\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp3m0y4ovn.rs:34:16\n\
    \   |\n34 |             'o|' => {\n   |                ^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes = music_string.to_string().chars().enumerate().map(|(_,\
    \ n)| n.to_string());\n    let mut beats = Vec::new();\n    let mut offset = 0;\n\
    \    while offset < music_string.len() {\n        match notes.next() {\n     \
    \       None => break,\n            Some((note, beat)) => {\n                notes.remove(note);\n\
    \                beats.append(beat);\n                offset += beat.len() as\
    \ isize;\n            }\n        }\n    }\n    beats\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcpuxftkm.rs:17:18\n   |\n\
    15 |         match notes.next() {\n   |               ------------ this expression\
    \ has type `Option<String>`\n16 |             None => break,\n17 |           \
    \  Some((note, beat)) => {\n   |                  ^^^^^^^^^^^^ expected struct\
    \ `String`, found tuple\n   |\n   = note: expected struct `String`\n         \
    \      found tuple `(_, _)`\n\nerror[E0599]: no method named `remove` found for\
    \ struct `Map` in the current scope\n  --> /tmp/tmpcpuxftkm.rs:18:23\n   |\n18\
    \ |                 notes.remove(note);\n   |                       ^^^^^^ method\
    \ not found in `Map<Enumerate<Chars<'_>>, [closure@/tmp/tmpcpuxftkm.rs:11:70:\
    \ 11:92]>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split(\" \").filter_map(|&note| {\n\
    \        let note_to_beats: Vec<isize> = note.chars().enumerate().filter(|&(_,\
    \ note)| note == 'o').collect();\n        note_to_beats.iter().map(|i| i.1.to_usize())\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n  --> /tmp/tmpn78i3ts1.rs:11:42\n   |\n11 |     music_string.split(\"\
    \ \").filter_map(|&note| {\n   |                                          ^^^^\
    \ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized`\
    \ is not implemented for `str`\n   = note: all local variables must have a statically\
    \ known size\n   = help: unsized locals are gated as an unstable feature\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `(usize, char)`\n    --> /tmp/tmpn78i3ts1.rs:12:99\n     |\n12   | \
    \        let note_to_beats: Vec<isize> = note.chars().enumerate().filter(|&(_,\
    \ note)| note == 'o').collect();\n     |                                     \
    \                                                              ^^^^^^^ value of\
    \ type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=(usize, char)>`\n\
    \     |\n     = help: the trait `FromIterator<(usize, char)>` is not implemented\
    \ for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for\
    \ `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0609]: no field `1`\
    \ on type `&isize`\n  --> /tmp/tmpn78i3ts1.rs:13:40\n   |\n13 |         note_to_beats.iter().map(|i|\
    \ i.1.to_usize())\n   |                                        ^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn78i3ts1.rs:13:9\n   |\n13 |         note_to_beats.iter().map(|i|\
    \ i.1.to_usize())\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found struct `Map`\n   |\n   = note: expected enum `Option<_>`\n\
    \            found struct `Map<std::slice::Iter<'_, isize>, _>`\nhelp: try wrapping\
    \ the expression in `Some`\n   |\n13 |         Some(note_to_beats.iter().map(|i|\
    \ i.1.to_usize()))\n   |         +++++                                       \
    \     +\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0609.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars()\n        .filter(|c| c.is_ascii())\n\
    \        .filter(|c| c != '|')\n        .filter(|c| c != 'o')\n        .filter(|c|\
    \ !c.is_whitespace())\n        .filter(|c| !c.is_whitespace())\n        .map(|c|\
    \ if c == 'o' {\n            4 // whole note, lasts four beats\n        } else\
    \ if c == '|' {\n            2 // half note, lasts two beats\n        } else {\n\
    \            1 // quater note, lasts one beat\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpldbkpf90.rs:13:23\n\
    \   |\n13 |         .filter(|c| c != '|')\n   |                       ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpldbkpf90.rs:14:23\n\
    \   |\n14 |         .filter(|c| c != 'o')\n   |                       ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // Implement here\n    let mut num_beat_vec: Vec<isize>\
    \ = Vec::new();\n    num_beat_vec.push(4);\n    let mut current_beat = 4;\n  \
    \  for c in music_string {\n        match c {\n            'o' => num_beat_vec.push(current_beat),\n\
    \            'o|' => num_beat_vec.push(current_beat),\n            '.|' => num_beat_vec.push(current_beat),\n\
    \            _ => num_beat_vec.push(current_beat),\n        }\n        current_beat++;\n\
    \    }\n    return num_beat_vec;\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp0egzdux8.rs:18:16\n\
    \   |\n18 |             'o|' => num_beat_vec.push(current_beat),\n   |       \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut last: Option<char> = None;\n    for (index, char) in music_string.chars().enumerate()\
    \ {\n        if char == '|' {\n            if last.is_some() {\n             \
    \   beats.push(beats.last().unwrap());\n            }\n            beats.push(1);\n\
    \            last = Some('|');\n        } else {\n            beats.push(0);\n\
    \            last = Some(char);\n        }\n    }\n    beats.push(beats.last().unwrap());\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpclazrvws.rs:16:28\n   |\n\
    16 |                 beats.push(beats.last().unwrap());\n   |                \
    \            ^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n16 |                 beats.push(*beats.last().unwrap());\n\
    \   |                            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpclazrvws.rs:25:16\n\
    \   |\n25 |     beats.push(beats.last().unwrap());\n   |                ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n25 |     beats.push(*beats.last().unwrap());\n   |                +\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut counter: Vec<isize> = vec![];\n    for\
    \ n in music_string.chars().map(|c| {\n        if c == 'o' || c == 'O' {\n   \
    \         counter.push(4);\n        } else {\n            counter.push(1);\n \
    \       }\n    }) {\n        if counter.last().unwrap() == 4 {\n            counter.pop();\n\
    \        }\n    }\n    counter // [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpunbp30ke.rs:19:36\n\
    \   |\n19 |         if counter.last().unwrap() == 4 {\n   |                  \
    \                  ^^ no implementation for `&isize == {integer}`\n   |\n   =\
    \ help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \     f32\n             f64\n             i128\n             i16\n           \
    \  i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    music_string\n\
    \        .split_whitespace()\n        .filter(|&c| !c.is_ascii())\n        .for_each(|c|\
    \ {\n            if c == 'o' {\n                beats.push(4);\n            }\
    \ else {\n                let beats = match c {\n                    'o' | 'o|'\
    \ => 2,\n                    '.|' => 1,\n                    _ => panic!(\"Invalid\
    \ music string: {}\", c),\n                };\n                beats.push(beats);\n\
    \            }\n        });\n    beats\n}\n\nfn main() {\n    let candidate =\
    \ parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpaat5dzx0.rs:20:30\n\
    \   |\n20 |                     'o' | 'o|' => 2,\n   |                       \
    \       ^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut last_note\
    \ = String::new();\n    let mut last_beat = 0;\n    let mut last_duration = 0;\n\
    \    for note in music_string.chars().filter_map(|c| match c {\n        'o' =>\
    \ Some(0),\n        'o|' => Some(2),\n        '.|' => Some(1),\n        _ => None,\n\
    \    }) {\n        if note.is_empty() {\n            continue;\n        }\n\n\
    \        let duration = note[0] as usize;\n\n        if duration > last_duration\
    \ {\n            beats.push(last_beat);\n            last_beat = 0;\n        }\n\
    \n        last_duration = duration;\n\n        let beat = beat.checked_add(duration)\
    \ as isize;\n        last_beat = beat;\n\n        if note[1] == 'o' {\n      \
    \      last_note = note;\n        }\n    }\n\n    beats.push(last_beat);\n\n \
    \   beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpqbfliwzi.rs:17:12\n\
    \   |\n17 |         'o|' => Some(2),\n   |            ^^^^^^^^^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut intervals = Vec::new();\n    let mut music_iter\
    \ = music_string.chars();\n    music_iter.for_each(|music_char| {\n        match\
    \ music_char {\n            'o' => intervals.push(4),\n            'o|' => intervals.push(2),\n\
    \            '.|' => intervals.push(1),\n            _ => {\n                let\
    \ interval = music_iter.position();\n                intervals.push(interval -\
    \ music_iter);\n            }\n        }\n    });\n    intervals\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpyfxpry2a.rs:16:16\n\
    \   |\n16 |             'o|' => intervals.push(2),\n   |                ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string\n        .lines()\n        .map(|line|\
    \ {\n            line.split(' ')\n                .iter()\n                .filter(|char|\
    \ !char.is_whitespace())\n                .enumerate()\n                .filter(|(i,\
    \ _)| i >= 3)\n                .map(|(i, note)| {\n                    let last_index\
    \ = i - 2;\n                    let count = note\n                        .trim_start()\n\
    \                        .chars()\n                        .filter(|c| c.is_ascii_letter())\n\
    \                        .count() as usize;\n                    match note {\n\
    \                        \"o\" | \"o|\" => 1,\n                        \".|\"\
    \ => 1,\n                        _ => 0,\n                    }\n            \
    \        last_index * 4 + count,\n                })\n                .sum()\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found `,`\n  --> /tmp/tmpxjdmz2zu.rs:31:43\n   |\n31 |                     last_index\
    \ * 4 + count,\n   |                                           ^ expected one\
    \ of 8 possible tokens\n\nerror[E0599]: no method named `iter` found for struct\
    \ `std::str::Split` in the current scope\n  --> /tmp/tmpxjdmz2zu.rs:15:18\n  \
    \ |\n15 |                 .iter()\n   |                  ^^^^ method not found\
    \ in `std::str::Split<'_, char>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxjdmz2zu.rs:26:21\n\
    \   |\n26 | /                     match note {\n27 | |                       \
    \  \"o\" | \"o|\" => 1,\n28 | |                         \".|\" => 1,\n29 | | \
    \                        _ => 0,\n30 | |                     }\n   | |       \
    \              ^- help: consider using a semicolon here\n   | |_____________________|\n\
    \   |                       expected `()`, found integer\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes = music_string.split_whitespace();\n\
    \    notes.retain(|&note| note != \"o\" && note != \"|\" && note != \".\");\n\
    \    let mut beats = notes.iter().filter(|&note| note == \"o\").count();\n   \
    \ for note in notes.iter().filter(|&note| note == \"|\").cloned() {\n        beats\
    \ *= 2;\n    }\n    for note in notes.iter().filter(|&note| note == \".\").cloned()\
    \ {\n        beats = 1;\n    }\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `retain` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpcg3wcmj_.rs:12:11\n   |\n12 |     notes.retain(|&note|\
    \ note != \"o\" && note != \"|\" && note != \".\");\n   |           ^^^^^^ method\
    \ not found in `SplitWhitespace<'_>`\n\nerror[E0599]: no method named `iter` found\
    \ for struct `SplitWhitespace` in the current scope\n  --> /tmp/tmpcg3wcmj_.rs:13:27\n\
    \   |\n13 |     let mut beats = notes.iter().filter(|&note| note == \"o\").count();\n\
    \   |                           ^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `iter` found for struct `SplitWhitespace` in the\
    \ current scope\n  --> /tmp/tmpcg3wcmj_.rs:14:23\n   |\n14 |     for note in notes.iter().filter(|&note|\
    \ note == \"|\").cloned() {\n   |                       ^^^^ method not found\
    \ in `SplitWhitespace<'_>`\n\nerror[E0599]: no method named `iter` found for struct\
    \ `SplitWhitespace` in the current scope\n  --> /tmp/tmpcg3wcmj_.rs:17:23\n  \
    \ |\n17 |     for note in notes.iter().filter(|&note| note == \".\").cloned()\
    \ {\n   |                       ^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcg3wcmj_.rs:20:5\n   |\n10 | fn\
    \ parse_music(music_string: String) -> Vec<isize> {\n   |                    \
    \                     ---------- expected `Vec<isize>` because of return type\n\
    ...\n20 |     beats\n   |     ^^^^^ expected struct `Vec`, found integer\n   |\n\
    \   = note: expected struct `Vec<isize>`\n                found type `{integer}`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = vec![];\n    let mut last_beat_length\
    \ = 0;\n    let mut last_beat_num = 0;\n    for c in music_string.chars() {\n\
    \        match c {\n            'o' => beats.push(4),\n            'o|' => beats.push(2),\n\
    \            '.|' => beats.push(1),\n            _ => {}\n        }\n        match\
    \ c {\n            '.' => last_beat_length += 1,\n            '|' => last_beat_num\
    \ += 1,\n            _ => {}\n        }\n    }\n    beats\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp3t7ntif2.rs:17:16\n\
    \   |\n17 |             'o|' => beats.push(2),\n   |                ^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes = Vec::new();\n    let music_length\
    \ = music_string.len();\n    let mut music_counter = 0;\n    let mut last_note_length\
    \ = 0;\n    for c in music_string {\n        if c == 'o' {\n            if music_counter\
    \ > 0 {\n                notes.push(music_counter);\n                music_counter\
    \ += 4;\n            }\n            last_note_length = 4;\n        } else if c\
    \ == 'o|' {\n            if music_counter > 0 {\n                notes.push(music_counter);\n\
    \                music_counter += 2;\n            }\n            last_note_length\
    \ = 2;\n        } else if c == '.|' {\n            if music_counter > 0 {\n  \
    \              notes.push(music_counter);\n                music_counter++;\n\
    \            }\n            last_note_length = 1;\n        } else {\n        \
    \    // If none of the above was found, we just add last note length.\n      \
    \      notes.push(last_note_length);\n            last_note_length = 0;\n    \
    \        music_counter = 0;\n        }\n    }\n    notes\n}\n\nfn main() {\n \
    \   let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpd00_gief.rs:22:27\n\
    \   |\n22 |         } else if c == 'o|' {\n   |                           ^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string\n        .split_whitespace()\n   \
    \     .filter_map(|x| x.parse::<isize>().ok())\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmprdqmdj4w.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_char_array: Vec<u8> = Vec::with_capacity(music_string.len());\n\
    \    music_string.as_bytes().for_each(|c| music_char_array.push(c));\n    let\
    \ music_char_array_len = music_char_array.len();\n    let mut beats_per_note =\
    \ 0;\n    let mut music_char_array_iter = music_char_array.iter();\n    let mut\
    \ music_char_array_ptr = music_char_array_iter as *const u8;\n    let mut music_char_array_end\
    \ = music_char_array_iter as *const u8;\n    let mut music_char_array_ptr_end\
    \ = music_char_array_end;\n    while music_char_array_ptr != music_char_array_end\
    \ {\n        let music_char_array_ptr_next = music_char_array_ptr.offset(1);\n\
    \        let music_char_array_ptr_next_2 = music_char_array_ptr_next.offset(1);\n\
    \        if *music_char_array_ptr == b'|' {\n            beats_per_note += 1;\n\
    \            if music_char_array_ptr_next != music_char_array_end {\n        \
    \        beats_per_note += 1;\n                if music_char_array_ptr_next_2\
    \ != music_char_array_end {\n                    beats_per_note += 1;\n      \
    \          }\n            }\n        } else {\n            if music_char_array_ptr_next\
    \ != music_char_array_end {\n                beats_per_note += 1;\n          \
    \  }\n        }\n        music_char_array_ptr += 1;\n    }\n    let music_char_array_ptr_end_2\
    \ = music_char_array_end.offset(1);\n    if music_char_array_ptr_end_2 != music_char_array_end\
    \ {\n        beats_per_note += 1;\n    }\n    beats_per_note += music_char_array_len\
    \ - music_char_array_array_len;\n    let mut music_char_array_array_len = music_char_array_len\
    \ / beats_per_note;\n    let mut music_char_array_array_ptr = music_char_array_ptr.offset(1);\n\
    \    let mut music_char_array_array_end = music_char_array_array_ptr + music_char_array_array_len;\n\
    \    let mut music_char_array_array_ptr_end = music_char_array_array_end;\n  \
    \  let mut music_char_array_array_ptr_end_2 = music_char_array_array_end.offset(1);\n\
    \    while music_char_array_array_ptr != music_char_array_array_end {\n      \
    \  let music_char_array_array_ptr_next = music_char_array_array_ptr.offset(1);\n\
    \        let music_char_array_array_ptr_next_2 = music_char_\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmptx_nahb_.rs:59:3\n\
    \   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |       \
    \                                             - unclosed delimiter\n...\n47 |\
    \     while music_char_array_array_ptr != music_char_array_array_end {\n   | \
    \                                                                   - this delimiter\
    \ might not be properly closed...\n...\n50 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n59 | }\n   |   ^\n\nerror: expected `;`,\
    \ found `}`\n  --> /tmp/tmptx_nahb_.rs:49:60\n   |\n49 |         let music_char_array_array_ptr_next_2\
    \ = music_char_\n   |                                                        \
    \    ^ help: add `;` here\n50 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `music_char_array_array_len` in this scope\n  --> /tmp/tmptx_nahb_.rs:41:46\n\
    \   |\n41 |     beats_per_note += music_char_array_len - music_char_array_array_len;\n\
    \   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `music_char_array_len`\n\n\
    error[E0425]: cannot find value `music_char_` in this scope\n  --> /tmp/tmptx_nahb_.rs:49:49\n\
    \   |\n49 |         let music_char_array_array_ptr_next_2 = music_char_\n   |\
    \                                                 ^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0599]: `&[u8]` is not an iterator\n  --> /tmp/tmptx_nahb_.rs:12:29\n\
    \   |\n12 |     music_string.as_bytes().for_each(|c| music_char_array.push(c));\n\
    \   |                             ^^^^^^^^ `&[u8]` is not an iterator; try calling\
    \ `.iter()`\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `&[u8]: Iterator`\n           which is required by `&mut &[u8]: Iterator`\n\
    \           `[u8]: Iterator`\n           which is required by `&mut [u8]: Iterator`\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `*const\
    \ u8`\n  --> /tmp/tmptx_nahb_.rs:35:9\n   |\n35 |         music_char_array_ptr\
    \ += 1;\n   |         --------------------^^^^^\n   |         |\n   |"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_notes: Vec<isize> = music_string\n\
    \        .split_whitespace()\n        .filter(|c| !c.is_empty())\n        .collect();\n\
    \n    let mut beats_per_pitch = music_notes.len() / 12; // 12 notes per pitch\n\
    \    // If number of notes is not an even number of 12, the last note may be of\
    \ a different pitch\n    if music_notes.len() % 12 != 0 {\n        music_notes.push(0);\n\
    \        beats_per_pitch += 1;\n    }\n\n    for note in music_notes {\n     \
    \   note /= 12;\n        if note < 4 {\n            note += 1;\n        }\n  \
    \      music_notes.insert(music_notes.iter().position(|&x| x == note).unwrap()\
    \ + 1, note);\n    }\n\n    music_notes\n}\n\nfn main() {\n    let candidate =\
    \ parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpj1jf7uuy.rs:14:10\n     |\n14\
    \   |         .collect();\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<isize>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split(|x| *x)\n        .filter_map(|note|\
    \ match note {\n            \"o\" => Some(4),\n            \"o|\" => Some(2),\n\
    \            \".|\" => Some(1),\n            _ => None,\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpt0b6kg1x.rs:11:25\n\
    \   |\n11 |     music_string.split(|x| *x)\n   |                         ^ consider\
    \ giving this closure parameter a type\n   |\n   = note: type must be known at\
    \ this point\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_vec: Vec<isize> = vec![];\n    let\
    \ mut music_vec = music_string.chars().map(|c| match c {\n        'o' => 4,\n\
    \        'o|' => 2,\n        '.|' => 1,\n        _ => 0,\n    }).collect::<Vec<_>>();\n\
    \    for i in 0..music_vec.len() {\n        beats_vec.push(music_vec[music_vec.len()\
    \ - 1 - i]);\n    }\n    return beats_vec;\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpgyjoh9r7.rs:14:12\n\
    \   |\n14 |         'o|' => 2,\n   |            ^^^^^^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().collect::<Vec<&str>>().iter().enumerate().filter(|&(i,\
    \ &note)| note == 'o' || note == '.' || note == '|').map(|(i, note)| (*i + 1)\
    \ * (note.len() / 4))\n}\n\nfn main() {\n    let candidate = parse_music;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<&str>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp2pnauhkw.rs:11:26\n     |\n11\
    \   |     music_string.chars().collect::<Vec<&str>>().iter().enumerate().filter(|&(i,\
    \ &note)| note == 'o' || note == '.' || note == '|').map(|(...\n     |       \
    \                   ^^^^^^^ value of type `Vec<&str>` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \     |\n     = help: the trait `FromIterator<char>` is not implemented for `Vec<&str>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0277]: can't compare `&str` with `char`\n\
    \  --> /tmp/tmp2pnauhkw.rs:11:94\n   |\n11 |     music_string.chars().collect::<Vec<&str>>().iter().enumerate().filter(|&(i,\
    \ &note)| note == 'o' || note == '.' || note == '|').map(|(...\n   |         \
    \                                                                            \
    \         ^^ no implementation for `&str == char`\n   |\n   = help: the trait\
    \ `PartialEq<char>` is not implemented for `&str`\n   = help: the following other\
    \ types implement trait `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n\
    \             <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0277]: can't compare `&str` with `char`\n  -->\
    \ /tmp/tmp2pnauhkw.rs:11:109\n   |\n11 | ...ate().filter(|&(i, &note)| note ==\
    \ 'o' || note == '.' || note == '|').map(|(i, note)| (*i + 1) * (note.len() /\
    \ 4))\n   |                                                   ^^ no implementation\
    \ for `&str == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&str`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \          "
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // Use regex to parse musical notes. \"([^\\|\\\
    .]|\\\\\\|[^\\.])\" means any string that doesn't include a dot or pipe or doesn't\
    \ include a pipe or dot\n    let music_pattern = \"([^\\|\\.]|\\\\\\|[^\\.])\"\
    .to_string();\n    let music_pat = Regex::new(&music_pattern).unwrap();\n\n  \
    \  // This regex will capture the lasts beats number of the notes, including decimal\
    \ number\n    let music_beat_numbers_pattern = \"[+-]?(0|[1-9]\\d*)(\\.\\d*)?\"\
    .to_string();\n    let music_beat_numbers_pat = Regex::new(&music_beat_numbers_pattern).unwrap();\n\
    \n    let music_notes = music_pat.captures_iter(music_string.clone()).collect::<Vec<_>>();\n\
    \    // Collect all notes beats numbers into one array\n    let mut music_beats_numbers:\
    \ Vec<isize> = music_notes.iter().map(|note|\n        // Use regex to capture\
    \ the beats number in the note, excluding decimal number\n        music_beat_numbers_pat.capture(note).unwrap().as_str().parse().unwrap()).collect();\n\
    \n    // Use map to calculate the number of beats for each note\n    music_beats_numbers.map(|note|\
    \ note / 4 as isize)\n}\n\nfn main() {\n    let candidate = parse_music;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: unknown character escape: `|`\n  --> /tmp/tmpbyg19t2c.rs:12:30\n\
    \   |\n12 |     let music_pattern = \"([^\\|\\.]|\\\\\\|[^\\.])\".to_string();\n\
    \   |                              ^ unknown character escape\n   |\n   = help:\
    \ for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n\
    help: if you meant to write a literal backslash (perhaps escaping in a regular\
    \ expression), consider a raw string literal\n   |\n12 |     let music_pattern\
    \ = r\"([^\\|\\.]|\\\\\\|[^\\.])\".to_string();\n   |                        \
    \ ~~~~~~~~~~~~~~~~~~~~~~\n\nerror: unknown character escape: `.`\n  --> /tmp/tmpbyg19t2c.rs:12:32\n\
    \   |\n12 |     let music_pattern = \"([^\\|\\.]|\\\\\\|[^\\.])\".to_string();\n\
    \   |                                ^ unknown character escape\n   |\n   = help:\
    \ for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n\
    help: if you meant to write a literal backslash (perhaps escaping in a regular\
    \ expression), consider a raw string literal\n   |\n12 |     let music_pattern\
    \ = r\"([^\\|\\.]|\\\\\\|[^\\.])\".to_string();\n   |                        \
    \ ~~~~~~~~~~~~~~~~~~~~~~\n\nerror: unknown character escape: `|`\n  --> /tmp/tmpbyg19t2c.rs:12:38\n\
    \   |\n12 |     let music_pattern = \"([^\\|\\.]|\\\\\\|[^\\.])\".to_string();\n\
    \   |                                      ^ unknown character escape\n   |\n\
    \   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n\
    help: if you meant to write a literal backslash (perhaps escaping in a regular\
    \ expression), consider a raw string literal\n   |\n12 |     let music_pattern\
    \ = r\"([^\\|\\.]|\\\\\\|[^\\.])\".to_string();\n   |                        \
    \ ~~~~~~~~~~~~~~~~~~~~~~\n\nerror: unknown character escape: `.`\n  --> /tmp/tmpbyg19t2c.rs:12:42\n\
    \   |\n12 |     let music_pattern = \"([^\\|\\.]|\\\\\\|[^\\.])\".to_string();\n\
    \   |                                          ^ unknown character escape\n  \
    \ |\n   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n\
    help: if you meant to write a literal backslash (perhap"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes = Vec::<isize>::new();\n    music_string\n\
    \        .lines()\n        .filter_map(|line| line.chars().take_while(|c| !c.is_whitespace()))\n\
    \        .for_each(|line| notes.push(line.count()));\n    notes\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpndxloxb4.rs:14:28\n   |\n\
    14 |         .filter_map(|line| line.chars().take_while(|c| !c.is_whitespace()))\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found struct `TakeWhile`\n   |\n   = note: expected\
    \ enum `Option<_>`\n            found struct `TakeWhile<Chars<'_>, [closure@/tmp/tmpndxloxb4.rs:14:52:\
    \ 14:74]>`\nhelp: try wrapping the expression in `Some`\n   |\n14 |         .filter_map(|line|\
    \ Some(line.chars().take_while(|c| !c.is_whitespace())))\n   |               \
    \             +++++                                               +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string\n        .chars()\n        .filter_map(|c|\
    \ match c {\n            'o' => 1,\n            'o|' => 4,\n            '.|' =>\
    \ 2,\n            _ => 0,\n        })\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpa9ae425m.rs:15:16\n\
    \   |\n15 |             'o|' => 4,\n   |                ^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beat_counts: Vec<isize> = Vec::new();\n\
    \n    for c in music_string {\n        if c == 'o' {\n            beat_counts.push(4);\n\
    \        } else if c == 'o|' {\n            beat_counts.push(2);\n        } else\
    \ if c == '.|' {\n            beat_counts.push(1);\n        } else {\n       \
    \     panic!(\"music string error\");\n        }\n    }\n\n    return beat_counts;\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpgveq6pie.rs:16:27\n\
    \   |\n16 |         } else if c == 'o|' {\n   |                           ^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![];\n    let mut\
    \ current_beat = 0;\n    for c in music_string.chars() {\n        let c_str =\
    \ match c {\n            'o' => \"1\",\n            'o|' => \"2\",\n         \
    \   'o|' => \"1\",\n            '.|' => \"4\",\n            _ => return beats,\n\
    \        };\n\n        let beats_per_letter = c_str.len() as isize / 4;\n    \
    \    let n_beats = c_str.len() / beats_per_letter;\n        for i in 0..n_beats\
    \ {\n            beats.push(current_beat + (i * beats_per_letter));\n        }\n\
    \n        current_beat += n_beats;\n    }\n    beats\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpkkl2pk_t.rs:16:16\n\
    \   |\n16 |             'o|' => \"2\",\n   |                ^^^^^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut intervals = Vec::new();\n    for c in music_string\
    \ {\n        let mut interval = c.to_ascii_digit().parse();\n        if interval\
    \ == None {\n            println!(\"The string '{}' does not represent a musical\
    \ note!\", c);\n            return None;\n        }\n        // Check whether\
    \ we are in the 'o|' interval\n        if interval == 0 || interval == 3 {\n \
    \           intervals.push(interval);\n        } else {\n            intervals.pop();\n\
    \        }\n    }\n    intervals\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: `String` is not an iterator\n  --> /tmp/tmpe4vxg0tq.rs:12:14\n\
    \   |\n12 |     for c in music_string {\n   |              ^^^^^^^^^^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the\
    \ trait `Iterator` is not implemented for `String`\n   = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe4vxg0tq.rs:16:20\n   |\n16 |             return\
    \ None;\n   |                    ^^^^ expected struct `Vec`, found enum `Option`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n                found enum `Option<_>`\n\
    \nerror[E0277]: can't compare `isize` with `Option<_>`\n  --> /tmp/tmpe4vxg0tq.rs:14:21\n\
    \   |\n14 |         if interval == None {\n   |                     ^^ no implementation\
    \ for `isize == Option<_>`\n   |\n   = help: the trait `PartialEq<Option<_>>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_per_note = vec![];\n    let mut note_count\
    \ = vec![];\n    for (i, note) in music_string.chars().enumerate() {\n       \
    \ note_count[i] = 0;\n        let mut note_index = 0;\n        let note_char =\
    \ note.to_char();\n        let mut note_end = false;\n        if note_char ==\
    \ u'o' {\n            for _ in 0..4 {\n                beats_per_note.push(note_count[note_index]);\n\
    \                note_index += 1;\n            }\n            note_end = true;\n\
    \        } else if note_char == u'|' {\n            for _ in 0..2 {\n        \
    \        beats_per_note.push(note_count[note_index]);\n                note_index\
    \ += 1;\n            }\n            note_end = true;\n        } else if note_char\
    \ == u'.' {\n            beats_per_note.push(note_count[note_index]);\n      \
    \      note_index += 1;\n        }\n        if !note_end {\n            note_count.push(0);\n\
    \        } else {\n            note_count.push(beats_per_note.len() - note_count[note_index]);\n\
    \        }\n    }\n    beats_per_note\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `'o'`\n  --> /tmp/tmp_lua51z0.rs:18:26\n   |\n\
    18 |         if note_char == u'o' {\n   |         --               ^^^ expected\
    \ `{`\n   |         |\n   |         this `if` expression has a condition, but\
    \ no block\n   |\nhelp: try placing this code inside a block\n   |\n18 |     \
    \    if note_char == u{ 'o' } {\n   |                          +     +\n\nerror[E0599]:\
    \ no method named `to_char` found for type `char` in the current scope\n  -->\
    \ /tmp/tmp_lua51z0.rs:16:30\n   |\n16 |         let note_char = note.to_char();\n\
    \   |                              ^^^^^^^ method not found in `char`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().filter_map(|&c| match c {\n\
    \        'o' => Some(4),\n        '|' => Some(2),\n        _ => None,\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8gsr1shs.rs:11:38\n   |\n\
    11 |     music_string.chars().filter_map(|&c| match c {\n   |                \
    \                      ^--\n   |                                      ||\n   |\
    \                                      |expected due to this\n   |           \
    \                           expected `char`, found reference\n   |           \
    \                           help: did you mean `c`: `&char`\n   |\n   = note:\
    \   expected type `char`\n           found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    for note in music_string.chars()\
    \ {\n        match note {\n            'o' => beats.push(4),\n            'o|'\
    \ => beats.push(2),\n            '.|' => beats.push(1),\n            _ => (),\n\
    \        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpfgcjl7kc.rs:15:16\n\
    \   |\n15 |             'o|' => beats.push(2),\n   |                ^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // parse notes and beats from music_string and\
    \ return\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6jn4e1sm.rs:10:41\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\
    \    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let music_string = music_string.to_string();\n\
    \    let mut beats = Vec::new();\n    music_string.chars()\n        .filter_map(|c|\
    \ {\n            match c {\n                'o' => { // whole note, lasts 4 beats\n\
    \                    beats.push(4);\n                    Some(true)\n        \
    \        }\n                'o|' => { // half note, lasts 2 beats\n          \
    \          beats.push(2);\n                    Some(true)\n                }\n\
    \                '.|' => { // quater note, lasts 1 beat\n                    beats.push(1);\n\
    \                    Some(true)\n                }\n                _ => Some(false)\n\
    \            }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp_b1s166m.rs:20:20\n\
    \   |\n20 |                 'o|' => { // half note, lasts 2 beats\n   |      \
    \              ^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![];\n    let music_string\
    \ = music_string.chars().collect::<String>();\n    let mut current_note = music_string[0];\n\
    \    let current_beat = 0;\n    for note in music_string.chars().skip(1).take(music_string.len()\
    \ - 1).cloned() {\n        let note_len = note.chars().count(|c| c == 'o');\n\
    \        note.chars().skip(note_len - 1).for_each(|c| {\n            if c == '|'\
    \ {\n                beats.push(current_beat);\n                current_beat +=\
    \ 1;\n            } else {\n                current_note += c;\n             \
    \   current_beat = 1;\n            }\n        });\n    }\n    beats.push(current_beat);\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmpycly10c0.rs:13:28\n   |\n13 |     let mut current_note = music_string[0];\n\
    \   |                            ^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0271]: type mismatch resolving `<std::iter::Take<Skip<Chars<'_>>>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpycly10c0.rs:15:75\n     |\n15   |\
    \     for note in music_string.chars().skip(1).take(music_string.len() - 1).cloned()\
    \ {\n     |                                                                  \
    \         ^^^^^^ expected reference, found `char`\n     |\n     = note: expected\
    \ reference `&_`\n                     found type `char`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0271]: type mismatch resolving `<std::iter::Take<Skip<Chars<'_>>>\
    \ as Iterator>::Item == &_`\n  --> /tmp/tmpycly10c0.rs:15:17\n   |\n15 |     for\
    \ note in music_string.chars().skip(1).take(music_string.len() - 1).cloned() {\n\
    \   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found reference\n   |\n   = note:   expected type `char`\n\
    \           found reference `&_`\n   = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<std::iter::Take<Skip<Chars<'_>>>>`\n \
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `Cloned<std::iter::Take<Skip<Chars<'_>>>>`\n\nerror[E0271]: type mismatch\
    \ resolving `<std::iter::Take<Skip<Chars<'_>>> as Iterator>::Item == &_`\n  -->\
    \ /tmp/tmpycly10c0.rs:15:17\n   |\n15 |     for note in music_string.chars().skip(1).ta"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let music_string_len = music_string.len();\n  \
    \  let mut beats_per_bar = vec![0; music_string_len];\n\n    let mut current_beat\
    \ = 0;\n    let mut current_beat_has_quarter_note = false;\n    let mut current_beat_has_half_note\
    \ = false;\n    let mut current_beat_has_whole_note = false;\n\n    for i in music_string.chars()\
    \ {\n        let ascii_char = i.to_ascii_lowercase();\n\n        // '.' is a special\
    \ case\n        if ascii_char == \".\" {\n            beats_per_bar[i] = 0;\n\
    \            current_beat_has_quarter_note = true;\n            current_beat_has_whole_note\
    \ = true;\n            current_beat++;\n            continue;\n        }\n\n \
    \       match ascii_char {\n            \"o\" | \"O\" => {\n                beats_per_bar[i]\
    \ = current_beat + 4;\n                current_beat_has_whole_note = false;\n\
    \                current_beat++;\n                current_beat_has_whole_note\
    \ = true;\n            }\n            \"|\" => {\n                beats_per_bar[i]\
    \ = current_beat + 2;\n                current_beat_has_whole_note = false;\n\
    \                current_beat++;\n                current_beat_has_whole_note\
    \ = true;\n            }\n            \".\" => {\n                if current_beat_has_quarter_note\
    \ {\n                    beats_per_bar[i] = current_beat + 1;\n              \
    \      current_beat++;\n                } else {\n                    if current_beat_has_half_note\
    \ {\n                        beats_per_bar[i] = current_beat;\n              \
    \          current_beat++;\n                    } else {\n                   \
    \     beats_per_bar[i] = 1;\n                    }\n                }\n      \
    \          current_beat_has_whole_note = true;\n            }\n            _ =>\
    \ {\n                beats_per_bar[i] = 1;\n            }\n        }\n    }\n\n\
    \    // TODO: Find out why this isn't needed here\n    // if beats_per_bar.iter().sum()\
    \ != music_string_len {\n    //     let mut bar = Vec::with_capacity(music_string_len);\n\
    \    //     for i in music_string_len - beats_per_bar.iter().sum() {\n    // \
    \        bar.push(0);\n    //     }\n    //     beats_per_bar.push(bar.to_owned());\n\
    \    // }\n    beats_per_bar\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpuov2nzav.rs:27:25\n\
    \   |\n27 |             current_beat++;\n   |                         ^^ not a\
    \ valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n27 |         \
    \    { let tmp = current_beat; current_beat += 1; tmp };\n   |             +++++++++++\
    \             ~~~~~~~~~~~~~~~~~~~~~~~~~~\n27 -             current_beat++;\n27\
    \ +             current_beat += 1;\n   | \n\nerror: Rust has no postfix increment\
    \ operator\n  --> /tmp/tmpuov2nzav.rs:35:29\n   |\n35 |                 current_beat++;\n\
    \   |                             ^^ not a valid postfix operator\n   |\nhelp:\
    \ use `+= 1` instead\n   |\n35 |                 { let tmp = current_beat; current_beat\
    \ += 1; tmp };\n   |                 +++++++++++             ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    35 -                 current_beat++;\n35 +                 current_beat += 1;\n\
    \   | \n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmpuov2nzav.rs:41:29\n\
    \   |\n41 |                 current_beat++;\n   |                            \
    \ ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n41 |\
    \                 { let tmp = current_beat; current_beat += 1; tmp };\n   |  \
    \               +++++++++++             ~~~~~~~~~~~~~~~~~~~~~~~~~~\n41 -     \
    \            current_beat++;\n41 +                 current_beat += 1;\n   | \n\
    \nerror: Rust has no postfix increment operator\n  --> /tmp/tmpuov2nzav.rs:47:33\n\
    \   |\n47 |                     current_beat++;\n   |                        \
    \         ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n  \
    \ |\n47 |                     { let tmp = current_beat; current_beat += 1; tmp\
    \ };\n   |                     +++++++++++             ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    47 -                     current_beat++;\n47 +                     current_beat\
    \ += 1;\n   | \n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmpuov2nzav.rs:51:37\n\
    \   |\n51 |                         current_beat++;\n   |                    \
    \                 ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n\
    \   |\n51 |            "
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![];\n\n    music_string\n\
    \        .lines()\n        .map(|line| {\n            let mut beat = 0;\n    \
    \        let mut note = match line.chars().nth(1) {\n                None => return,\n\
    \                Some(c) => {\n                    if c == '|' || c == 'o' {\n\
    \                        note = c as u8;\n                    }\n            \
    \        beat += 1;\n                }\n            };\n\n            while note\
    \ != 0 {\n                beats.push(beat);\n                note -= 1;\n    \
    \        }\n        })\n        .collect::<Vec<_>>()\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `note` in this scope\n  --> /tmp/tmp0ybibg8z.rs:21:25\n\
    \   |\n21 |                         note = c as u8;\n   |                    \
    \     ^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0ybibg8z.rs:13:5\n\
    \   |\n10 |   fn parse_music(music_string: String) -> Vec<isize> {\n   |     \
    \                                      ---------- expected `Vec<isize>` because\
    \ of return type\n...\n13 | /     music_string\n14 | |         .lines()\n15 |\
    \ |         .map(|line| {\n16 | |             let mut beat = 0;\n...  |\n31 |\
    \ |         })\n32 | |         .collect::<Vec<_>>()\n   | |____________________________^\
    \ expected `isize`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<()>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut notes_found\
    \ = 0;\n    for c in music_string {\n        if c == 'o' {\n            notes_found\
    \ += 1;\n        } else if c == '|' {\n            beats.push(notes_found);\n\
    \            notes_found = 0;\n        } else {\n            notes_found += 1;\n\
    \        }\n    }\n    beats.push(notes_found);\n    beats\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: `String` is not an iterator\n  --> /tmp/tmpkju0_bj8.rs:13:14\n\
    \   |\n13 |     for c in music_string {\n   |              ^^^^^^^^^^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the\
    \ trait `Iterator` is not implemented for `String`\n   = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut current_note\
    \ = MusicalNote::C;\n    for character in music_string.chars() {\n        if character\
    \ == 'o' {\n            current_note = MusicalNote::C;\n            beats.push((4\
    \ - beats.len()) as isize);\n        } else if character == 'o|' {\n         \
    \   current_note = MusicalNote::D;\n            beats.push((2 - beats.len()) as\
    \ isize);\n        } else if character == '.|' {\n            current_note = MusicalNote::E;\n\
    \            beats.push((1 - beats.len()) as isize);\n        } else {\n     \
    \       // We have a musical note - add note length\n            beats.push(current_note.beats());\n\
    \            // We have another musical note\n            current_note = MusicalNote::C\
    \ if character == '.';\n        }\n    }\n    beats\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmplzzm7rkg.rs:17:35\n\
    \   |\n17 |         } else if character == 'o|' {\n   |                      \
    \             ^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // implement this function\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppxfk3xmk.rs:10:41\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\
    \    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n\n    for (index,\
    \ char) in music_string.chars().enumerate() {\n        if char == ' ' {\n    \
    \        beats.push(index / 4);\n        } else {\n            beats.push(index);\n\
    \        }\n    }\n\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7eddko9t.rs:21:5\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |              \
    \                           ---------- expected `Vec<isize>` because of return\
    \ type\n...\n21 |     beats\n   |     ^^^^^ expected `isize`, found `usize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n\n   \
    \ let mut current_note = music_string.chars().next().unwrap();\n    while current_note\
    \ != \".\" && current_note != \" \" {\n        beats.push(current_note as isize);\n\
    \n        if current_note == \"|\" {\n            let note = music_string.chars().next().unwrap();\n\
    \            beats.push(note as isize);\n        }\n\n        current_note = music_string.chars().next().unwrap();\n\
    \    }\n\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp65ifedke.rs:14:27\n   |\n\
    14 |     while current_note != \".\" && current_note != \" \" {\n   |        \
    \                   ^^^ expected `char`, found `&str`\n   |\nhelp: if you meant\
    \ to write a `char` literal, use single quotes\n   |\n14 |     while current_note\
    \ != '.' && current_note != \" \" {\n   |                           ~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp65ifedke.rs:14:50\n   |\n14 |     while current_note\
    \ != \".\" && current_note != \" \" {\n   |                                  \
    \                ^^^ expected `char`, found `&str`\n   |\nhelp: if you meant to\
    \ write a `char` literal, use single quotes\n   |\n14 |     while current_note\
    \ != \".\" && current_note != ' ' {\n   |                                    \
    \              ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp65ifedke.rs:17:28\n\
    \   |\n17 |         if current_note == \"|\" {\n   |                         \
    \   ^^^ expected `char`, found `&str`\n   |\nhelp: if you meant to write a `char`\
    \ literal, use single quotes\n   |\n17 |         if current_note == '|' {\n  \
    \ |                            ~~~\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split(\" \").collect::<Vec<_>>()\n\
    \        .filter(|&x| !x.starts_with('.'))\n        .filter(|&x| !x.contains('|'))\n\
    \        .map(|x| x.chars().take_while(|&x| x != 'o').count())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<&str>` is not an iterator\n   --> /tmp/tmp3awnr33g.rs:12:10\n\
    \    |\n12  |           .filter(|&x| !x.starts_with('.'))\n    |            ^^^^^^\
    \ `Vec<&str>` is not an iterator\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Vec<&str>: Iterator`\n            which is\
    \ required by `&mut Vec<&str>: Iterator`\n            `[&str]: Iterator`\n   \
    \         which is required by `&mut [&str]: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = vec![];\n\n    let mut prev_beat\
    \ = 0;\n    let mut curr_beat = 0;\n\n    music_string.split(\" \").iter().for_each(|note|\
    \ {\n        let note = note.to_ascii_lowercase();\n\n        if note == \"o\"\
    \ {\n            result.append(curr_beat);\n            prev_beat = curr_beat;\n\
    \            curr_beat = 0;\n        }\n\n        let beats_count = note.chars().filter(|&c|\
    \ c != '|').count() + 1;\n\n        if note[1] == '|' {\n            result.append(beats_count);\n\
    \            prev_beat = curr_beat;\n            curr_beat = 0;\n        } else\
    \ {\n            curr_beat += beats_count - 1;\n        }\n    });\n\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `std::str::Split`\
    \ in the current scope\n  --> /tmp/tmpohz6h7oa.rs:16:29\n   |\n16 |     music_string.split(\"\
    \ \").iter().for_each(|note| {\n   |                             ^^^^ method not\
    \ found in `std::str::Split<'_, &str>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpohz6h7oa.rs:20:27\n   |\n20 |             result.append(curr_beat);\n\
    \   |                           ^^^^^^^^^ expected `&mut Vec<_>`, found integer\n\
    \   |\n   = note: expected mutable reference `&mut Vec<_>`\n                 \
    \          found type `{integer}`\n\nerror[E0369]: cannot subtract `{integer}`\
    \ from `&mut Vec<_>`\n  --> /tmp/tmpohz6h7oa.rs:32:38\n   |\n32 |            \
    \ curr_beat += beats_count - 1;\n   |                          ----------- ^ -\
    \ {integer}\n   |                          |\n   |                          &mut\
    \ Vec<_>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0369, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes: Vec<isize> = Vec::new();\n    for\
    \ music_char in music_string {\n        if music_char == '.' {\n            let\
    \ beats = notes.len() / 4;\n            notes.push(beats);\n        } else if\
    \ music_char == 'o' {\n            let beats = notes.len() / 4;\n            notes.push(beats);\n\
    \        } else if music_char == '|' {\n            let beats = notes.len() /\
    \ 2;\n            notes.push(beats);\n        } else if music_char == 'o|' {\n\
    \            let beats = notes.len() / 2;\n            notes.push(beats);\n  \
    \      } else {\n            notes.push(1);\n        }\n    }\n    notes\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpd6b6pk0i.rs:22:36\n\
    \   |\n22 |         } else if music_char == 'o|' {\n   |                     \
    \               ^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_per_beat: isize = 64;\n    let mut\
    \ notes: Vec<isize> = music_string.to_string().chars().enumerate().filter(|(_,\
    \ char)| char == 'o').collect();\n    let mut beats: Vec<isize> = notes.iter().cloned().map(|note|\
    \ {\n        beats_per_beat = note % 128;\n        note / 128\n    }).collect();\n\
    \    beats.sort();\n    beats_per_beat += beats[0];\n    for i in 1..beats.len()\
    \ {\n        beats_per_beat += beats[i] - beats[i - 1];\n    }\n    beats\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpk3a8hfyv.rs:12:102\n\
    \   |\n12 |     let mut notes: Vec<isize> = music_string.to_string().chars().enumerate().filter(|(_,\
    \ char)| char == 'o').collect();\n   |                                       \
    \                                                               ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator over\
    \ elements of type `(usize, char)`\n    --> /tmp/tmpk3a8hfyv.rs:12:110\n     |\n\
    12   |     let mut notes: Vec<isize> = music_string.to_string().chars().enumerate().filter(|(_,\
    \ char)| char == 'o').collect();\n     |                                     \
    \                                                                         ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=(usize,\
    \ char)>`\n     |\n     = help: the trait `FromIterator<(usize, char)>` is not\
    \ implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented\
    \ for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut numbers: Vec<isize> = vec![];\n    let\
    \ mut beats = 0;\n\n    for c in music_string.chars() {\n        let s = c - '0';\n\
    \        if s == 4 {\n            beats += 1;\n        }\n        numbers.push(s);\n\
    \    }\n\n    return numbers;\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpphexs6wq.rs:15:19\n\
    \   |\n15 |         let s = c - '0';\n   |                 - ^ --- char\n   |\
    \                 |\n   |                 char\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().map(|c|\n        match c {\n\
    \            b'o' => 4,\n            b'o|' => 2,\n            b'|' => 1,\n   \
    \         _ => 0,\n        }\n    ).sum()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpo3vx9nr3.rs:14:13\n\
    \   |\n14 |             b'o|' => 2,\n   |             ^^^^^\n   |\nhelp: if you\
    \ meant to write a byte string literal, use double quotes\n   |\n14 |        \
    \     b\"o|\" => 2,\n   |             ~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpo3vx9nr3.rs:13:13\n   |\n12 |         match c {\n   |         \
    \      - this expression has type `char`\n13 |             b'o' => 4,\n   |  \
    \           ^^^^ expected `char`, found `u8`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpo3vx9nr3.rs:15:13\n   |\n12 |         match c {\n   |         \
    \      - this expression has type `char`\n...\n15 |             b'|' => 1,\n \
    \  |             ^^^^ expected `char`, found `u8`\n\nerror[E0277]: the trait bound\
    \ `Vec<isize>: Sum<{integer}>` is not satisfied\n    --> /tmp/tmpo3vx9nr3.rs:18:7\n\
    \     |\n18   |     ).sum()\n     |       ^^^ the trait `Sum<{integer}>` is not\
    \ implemented for `Vec<isize>`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <Duration as Sum<&'a Duration>>\n\
    \               <Duration as Sum>\n               <Option<T> as Sum<Option<U>>>\n\
    \               <Result<T, E> as Sum<Result<U, E>>>\n               <Simd<f32,\
    \ LANES> as Sum<&'a Simd<f32, LANES>>>\n               <Simd<f32, LANES> as Sum>\n\
    \               <Simd<f64, LANES> as Sum<&'a Simd<f64, LANES>>>\n            \
    \   <Simd<f64, LANES> as Sum>\n             and 72 others\nnote: required by a\
    \ bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let music_notes = music_string\n        .chars()\n\
    \        .filter(|&c| c == 'o' || c == 'o|' || c == '.|')\n        .map(|c| {\n\
    \            if c == 'o' {\n                0 // whole note\n            } else\
    \ if c == 'o|' {\n                1 // half note\n            } else if c == '.|'\
    \ {\n                2 // quater note\n            } else {\n                unimplemented!();\n\
    \            }\n        })\n        .collect::<Vec<isize>>();\n\n    let music_notes_size\
    \ = music_notes.len();\n\n    let music_notes_sum: usize = music_notes.iter().fold(0,\
    \ |acc, &note| acc + note);\n\n    // Create array of beats for each note from\
    \ note to end\n    let music_notes_beats: Vec<isize> = music_notes\n        .iter()\n\
    \        .enumerate()\n        .filter(|&(_, note)| note != music_notes_sum)\n\
    \        .map(|(_, note)| note)\n        .collect::<Vec<isize>>();\n\n    // Convert\
    \ array of beats to vector of beats per measure\n    let music_notes_beats_per_measure:\
    \ Vec<isize> = music_notes_beats.iter().fold(0, |acc, &beat| acc + (beat % 4));\n\
    \n    // Calculate total beats per measure\n    let total_beats_per_measure =\
    \ music_notes_beats_per_measure\n        .iter()\n        .cloned()\n        .fold(0,\
    \ |acc, &beats_per_measure| acc + (beats_per_measure % 4));\n\n    // Convert\
    \ total beats per measure back to array of beats per measure\n    let music_notes_beats_per_measure_back:\
    \ Vec<isize> = total_beats_per_measure\n        .iter()\n        .map(|beats_per_measure|\
    \ beats_per_measure % 4)\n        .collect::<Vec<isize>>();\n\n    // Calculate\
    \ the number of beats per measure\n    let music_notes_beats_per_measure_len:\
    \ isize = music_notes_beats_per_measure\n        .iter()\n        .zip(music_notes_beats_per_measure_back)\n\
    \        .map(|(&beats_per_measure, &beats_per_measure_back)| beats_per_measure\
    \ - beats_per_measure_back)\n        .sum()\n        + music_notes_beats_per_measure_back\n\
    \        .len();\n\n    // Create vector of beats for each note\n    let music_notes_beats:\
    \ Vec<isize> = music_notes\n        .iter()\n        .map(|note| music_note\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp7zgr9_av.rs:13:42\n\
    \   |\n13 |         .filter(|&c| c == 'o' || c == 'o|' || c == '.|')\n   |   \
    \                                       ^^^^^^^^^^^\n   |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n   |\n13 |         .filter(|&c|\
    \ c == 'o' || c == 'o|\" || c == \".|')\n   |                                \
    \          ~~~~~~~~~~~\n\nerror[E0762]: unterminated character literal\n  -->\
    \ /tmp/tmp7zgr9_av.rs:13:55\n   |\n13 |         .filter(|&c| c == 'o' || c ==\
    \ 'o|' || c == '.|')\n   |                                                   \
    \    ^^\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut notes\
    \ = music_string.trim().split_whitespace();\n    while notes.len() > 0 {\n   \
    \     notes.pop();\n        let note = notes.last().unwrap();\n        if note.len()\
    \ == 1 && notes[0] == '.' {\n            notes.pop();\n            beats.push(1);\n\
    \        } else {\n            let note_index = notes.last().unwrap().chars().last().unwrap();\n\
    \            beats.push(note_index == 'o' ? 4 : 2);\n        }\n    }\n    beats\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `4`\n\
    \  --> /tmp/tmpi3b1chui.rs:21:44\n   |\n21 |             beats.push(note_index\
    \ == 'o' ? 4 : 2);\n   |                                            ^ expected\
    \ one of `)`, `,`, `.`, `?`, or an operator\n\nerror: expected one of `!`, `&&`,\
    \ `&`, `(`, `)`, `*`, `...`, `.`, `;`, `<`, `?`, `[`, `_`, `async`, `const`, `dyn`,\
    \ `extern`, `fn`, `for`, `impl`, `unsafe`, `}`, `~`, an operator, lifetime, or\
    \ path, found `2`\n  --> /tmp/tmpi3b1chui.rs:21:48\n   |\n21 |             beats.push(note_index\
    \ == 'o' ? 4 : 2);\n   |                                                ^ expected\
    \ one of 26 possible tokens\n\nerror[E0599]: no method named `len` found for struct\
    \ `SplitWhitespace` in the current scope\n  --> /tmp/tmpi3b1chui.rs:13:17\n  \
    \ |\n13 |     while notes.len() > 0 {\n   |                 ^^^ method not found\
    \ in `SplitWhitespace<'_>`\n\nerror[E0599]: no method named `pop` found for struct\
    \ `SplitWhitespace` in the current scope\n  --> /tmp/tmpi3b1chui.rs:14:15\n  \
    \ |\n14 |         notes.pop();\n   |               ^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0608]: cannot index into a value of type `SplitWhitespace<'_>`\n  -->\
    \ /tmp/tmpi3b1chui.rs:16:31\n   |\n16 |         if note.len() == 1 && notes[0]\
    \ == '.' {\n   |                               ^^^^^^^^\n\nerror[E0599]: no method\
    \ named `pop` found for struct `SplitWhitespace` in the current scope\n  --> /tmp/tmpi3b1chui.rs:17:19\n\
    \   |\n17 |             notes.pop();\n   |                   ^^^ method not found\
    \ in `SplitWhitespace<'_>`\n\nerror: aborting due to 6 previous errors\n\nSome\
    \ errors have detailed explanations: E0599, E0608.\nFor more information about\
    \ an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().map(|c| { if c == 'o' { 4\
    \ } else if c == 'o|' { 2 } else if c == '.|' { 1 } else { 0 } }).collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp41yl50qy.rs:11:70\n\
    \   |\n11 |     music_string.chars().map(|c| { if c == 'o' { 4 } else if c ==\
    \ 'o|' { 2 } else if c == '.|' { 1 } else { 0 } }).collect()\n   |           \
    \                                                           ^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    11 |     music_string.chars().map(|c| { if c == 'o' { 4 } else if c == 'o|\" {\
    \ 2 } else if c == \".|' { 1 } else { 0 } }).collect()\n   |                 \
    \                                                     ~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0762]: unterminated character literal\n  --> /tmp/tmp41yl50qy.rs:11:94\n\
    \   |\n11 |     music_string.chars().map(|c| { if c == 'o' { 4 } else if c ==\
    \ 'o|' { 2 } else if c == '.|' { 1 } else { 0 } }).collect()\n   |           \
    \                                                                            \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut notes\
    \ = music_string.split_whitespace();\n    let mut current_note = 0;\n    notes.for_each(|note|\
    \ {\n        // ignore empty notes\n        if note.is_empty() {\n           \
    \ return;\n        }\n\n        // ignore non-notes\n        let note = note.chars().next().unwrap();\n\
    \        if note != 'o' || note != '|' || note != '.' {\n            return;\n\
    \        }\n\n        // parse note length\n        let note_length = note.chars().next().unwrap()\
    \ as usize;\n        if note_length == 0 {\n            return;\n        }\n\n\
    \        // parse note duration\n        let note_duration = note.chars().next().unwrap()\
    \ as usize;\n        if note_duration > 0 {\n            beats.push(note_duration);\n\
    \        }\n\n        // parse note and add it to beats\n        beats.push(current_note);\n\
    \n        // reset current note\n        current_note = 0;\n\n        // advance\
    \ to next note\n        notes.pop();\n    });\n\n    beats\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `chars` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpkvra27gd.rs:27:32\n   |\n27 |         let note_length =\
    \ note.chars().next().unwrap() as usize;\n   |                               \
    \ ^^^^^ method not found in `char`\n\nerror[E0599]: no method named `chars` found\
    \ for type `char` in the current scope\n  --> /tmp/tmpkvra27gd.rs:33:34\n   |\n\
    33 |         let note_duration = note.chars().next().unwrap() as usize;\n   |\
    \                                  ^^^^^ method not found in `char`\n\nerror[E0599]:\
    \ no method named `pop` found for struct `SplitWhitespace` in the current scope\n\
    \  --> /tmp/tmpkvra27gd.rs:45:15\n   |\n45 |         notes.pop();\n   |      \
    \         ^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // Split input music string by spaces and remove\
    \ all empty strings\n    let mut music_list = music_string.split_whitespace().filter(|s|\
    \ !s.is_empty()).collect::<Vec<String>>();\n    // Convert all strings to lowercase\
    \ to simplify parsing.\n    music_list.sort_by_key(|s| s.to_lowercase());\n  \
    \  // Split all notes into single note and rests\n    let mut notes = music_list\n\
    \        .into_iter()\n        .flat_map(|note| note.split('|').collect::<Vec<_>>())\n\
    \        .filter(|note| note.is_some())\n        .collect::<Vec<_>>();\n    //\
    \ Add 0 at the end of rests vector if necessary\n    notes.insert(music_list.len(),\
    \ \"\");\n    // Count rests\n    let mut rests = notes\n        .iter_mut()\n\
    \        .filter_map(|note| {\n            if note.len() == 1 { Some(note.as_str())\
    \ } else { None }\n        })\n        .count();\n    // Count notes in each rest\n\
    \    rests.iter_mut().for_each(|&rest| rest.chars().for_each(|c| {\n        let\
    \ count = notes.iter().filter(|note| note.chars().any(|&&c| c == c)).count();\n\
    \        *rest = count.to_string();\n    }));\n    // Calculate how many beats\
    \ per note\n    let beats_per_note = 12 / notes.len();\n    // Return music as\
    \ vector of beats\n    notes\n        .iter()\n        .map(|note| beats_per_note\
    \ * note.chars().count())\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp2yzni2uz.rs:12:84\n     |\n12\
    \   |     let mut music_list = music_string.split_whitespace().filter(|s| !s.is_empty()).collect::<Vec<String>>();\n\
    \     |                                                                      \
    \              ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0599]: no method named `is_some` found for\
    \ reference `&&str` in the current scope\n  --> /tmp/tmp2yzni2uz.rs:19:29\n  \
    \ |\n19 |         .filter(|note| note.is_some())\n   |                       \
    \      ^^^^^^^ method not found in `&&str`\n\nerror[E0599]: no method named `as_str`\
    \ found for mutable reference `&mut &str` in the current scope\n  --> /tmp/tmp2yzni2uz.rs:27:44\n\
    \   |\n27 |             if note.len() == 1 { Some(note.as_str()) } else { None\
    \ }\n   |                                           -^^^^^^-- help: remove this\
    \ method call\n\nerror[E0599]: no method named `iter_mut` found for type `usize`\
    \ in the current scope\n  --> /tmp/tmp2yzni2uz.rs:31:11\n   |\n31 |     rests.iter_mut().for_each(|&rest|\
    \ rest.chars().for_each(|c| {\n   |           ^^^^^^^^ method not found in `usize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2yzni2uz.rs:32:66\n   |\n32 |\
    \         let count = notes.iter().filter(|note| note.chars().any(|&&c| c == c)).count();\n\
    \   |                                                                  ^^-\n \
    \  |                                                                  | |\n  \
    \ |                                                                  | expected\
    \ due to this\n   |                                                          \
    \        expected `char`, found reference\n   |\n   = note:   expected type `char`\n\
    \           found reference `&_`\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ can"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_counter = vec![0, 0, 0, 0];\n   \
    \ let mut music_string = music_string.to_ascii_lowercase();\n    loop {\n    \
    \    if music_string.is_empty() {\n            break;\n        }\n        let\
    \ mut music_char: char;\n        let mut note = music_string[0];\n        if music_string.len()\
    \ > 1 {\n            if music_string[1] == '|' {\n                note |= 'o';\n\
    \                music_string = &music_string[2..];\n            } else {\n  \
    \              note |= 'o';\n            }\n        }\n        for music_char\
    \ in music_string {\n            if !('o' <= music_char && music_char <= '.')\
    \ {\n                music_string = &music_string[1..];\n                break;\n\
    \            }\n        }\n        let mut beats = beat_count(note);\n       \
    \ if music_char == ' ' {\n            music_string = &music_string[1..];\n   \
    \         continue;\n        }\n        if music_char == '|' {\n            note\
    \ |= '|';\n            music_string = &music_string[2..];\n        } else {\n\
    \            note |= '|';\n        }\n        for music_char in music_string {\n\
    \            if !('o' <= music_char && music_char <= '.') {\n                music_string\
    \ = &music_string[1..];\n                break;\n            }\n        }\n  \
    \      beats_counter[beats - 1] += 1;\n    }\n    beats_counter.iter().collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `beat_count` in this scope\n  --> /tmp/tmp2ttj39ep.rs:33:25\n\
    \   |\n33 |         let mut beats = beat_count(note);\n   |                  \
    \       ^^^^^^^^^^ help: a local variable with a similar name exists: `beats_counter`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp2ttj39ep.rs:18:24\n\
    \   |\n18 |         let mut note = music_string[0];\n   |                    \
    \    ^^^^^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help:\
    \ the trait `Index<{integer}>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp2ttj39ep.rs:20:16\n\
    \   |\n20 |             if music_string[1] == '|' {\n   |                ^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2ttj39ep.rs:22:32\n\
    \   |\n12 |     let mut music_string = music_string.to_ascii_lowercase();\n  \
    \ |                            --------------------------------- expected due\
    \ to this value\n...\n22 |                 music_string = &music_string[2..];\n\
    \   |                                ^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `&s"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes = music_string.chars().collect::<Vec<_>>();\n\
    \    notes = notes.windows(2).collect::<Vec<_>>();\n    let mut beats: Vec<isize>\
    \ = notes.iter().cloned().collect();\n\n    let mut last = false;\n    for i in\
    \ 0..notes.len() {\n        match notes[i] {\n            'o' => {\n         \
    \       if last {\n                    beats[i] += 4;\n                }\n   \
    \             beats.push(1);\n                last = true;\n            }\n  \
    \          'o|' => {\n                if last {\n                    beats[i]\
    \ += 2;\n                }\n                beats.push(1);\n                last\
    \ = true;\n            }\n            '.|' => {\n                if last {\n \
    \                   beats[i] += 1;\n                }\n                beats.push(1);\n\
    \                last = true;\n            }\n            _ => {\n           \
    \     beats.push(1);\n                last = false;\n            }\n        }\n\
    \    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp1ltq878m.rs:25:16\n\
    \   |\n25 |             'o|' => {\n   |                ^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_per_octave: isize = 1;\n\n    let\
    \ mut beats_array: Vec<isize> = vec![0; music_string.len()];\n    for i in 0..music_string.len()\
    \ {\n        let music_symbol = music_string[..i];\n        if music_symbol ==\
    \ \".\" {\n            beats_array[i] = beats_per_octave;\n            beats_per_octave\
    \ <<= 1;\n        } else {\n            beats_array[i] += 1;\n        }\n    }\n\
    \n    beats_array\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n  --> /tmp/tmp83y7ifps.rs:15:13\n   |\n15 |         let music_symbol =\
    \ music_string[..i];\n   |             ^^^^^^^^^^^^ doesn't have a size known\
    \ at compile-time\n   |\n   = help: the trait `Sized` is not implemented for `str`\n\
    \   = note: all local variables must have a statically known size\n   = help:\
    \ unsized locals are gated as an unstable feature\nhelp: consider borrowing here\n\
    \   |\n15 |         let music_symbol = &music_string[..i];\n   |             \
    \               +\n\nerror[E0277]: can't compare `str` with `&str`\n  --> /tmp/tmp83y7ifps.rs:16:25\n\
    \   |\n16 |         if music_symbol == \".\" {\n   |                         ^^\
    \ no implementation for `str == &str`\n   |\n   = help: the trait `PartialEq<&str>`\
    \ is not implemented for `str`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n   \
    \          <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![0; music_string.len()];\n\
    \    let mut current_note = None;\n    let mut current_note_index = 0;\n    for\
    \ (index, note) in music_string.chars().enumerate() {\n        if note == 'o'\
    \ {\n            beats[current_note_index] += 4;\n            current_note = None;\n\
    \            current_note_index = index;\n        } else if note == 'o|' {\n \
    \           beats[current_note_index] += 2;\n            current_note = None;\n\
    \            current_note_index = index;\n        } else if note == '.|' {\n \
    \           beats[current_note_index] += 1;\n            current_note = None;\n\
    \            current_note_index = index;\n        } else {\n            current_note\
    \ = note;\n            beats[current_note_index] += 1;\n        }\n    }\n   \
    \ return beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp1p4kol_v.rs:19:30\n\
    \   |\n19 |         } else if note == 'o|' {\n   |                           \
    \   ^^^\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes = Vec::new();\n    for c in music_string.chars()\
    \ {\n        notes.push(match c {\n            'o' => 1,\n            'o|' =>\
    \ 2,\n            '.|' => 3,\n            _ => 0,\n        });\n    }\n    notes.iter().fold(0,\
    \ |notes: &[isize], beat| notes + beat)\n}\n\nfn main() {\n    let candidate =\
    \ parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpry27dkqg.rs:15:16\n\
    \   |\n15 |             'o|' => 2,\n   |                ^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string\n        .lines()\n        .flat_map(|line|\
    \ {\n            line.chars().enumerate()\n                .map(|(i, c)| {\n \
    \                   let (beats, note) = c.to_ascii_lowercase().split_at(1).collect();\n\
    \                    beats.parse::<isize>()\n                })\n        })\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `split_at` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpoyaxwd6q.rs:16:64\n   |\n16 |                     let (beats,\
    \ note) = c.to_ascii_lowercase().split_at(1).collect();\n   |                \
    \                                                ^^^^^^^^ method not found in\
    \ `char`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split_whitespace().map(|note| {\n\
    \        if note == \"o\" {\n            4\n        } else if note == \"o|\" {\n\
    \            2\n        } else if note == \".|\" {\n            1\n        } else\
    \ {\n            panic!(\"Unrecognized note: {}\".format(note))\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `format` found for reference `&'static str`\
    \ in the current scope\n  --> /tmp/tmph123mdux.rs:19:44\n   |\n19 |          \
    \   panic!(\"Unrecognized note: {}\".format(note))\n   |                     \
    \                       ^^^^^^ method not found in `&'static str`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![];\n    let mut\
    \ current_beat = -1;\n    let mut music_list = music_string.split_whitespace();\n\
    \    for note in music_list {\n        match note {\n            \"o\" => {\n\
    \                current_beat = current_beat + 4;\n                beats.push(current_beat);\n\
    \            }\n            \"o|\" => {\n                current_beat = current_beat\
    \ + 2;\n                beats.push(current_beat);\n            }\n           \
    \ \".|\" => {\n                current_beat = current_beat + 1;\n            \
    \    beats.push(current_beat);\n            }\n            _ => (),\n        }\n\
    \    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 7, 11, 15]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpcpit7xa9.rs:37:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = vec![];\n    music_string.chars().for_each(|c|\
    \ {\n        match c {\n            'o' => beats.push(4),\n            'o|' =>\
    \ beats.push(2),\n            '.|' => beats.push(1),\n            _ => (),\n \
    \       }\n    });\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpbmgk5xdb.rs:15:16\n\
    \   |\n15 |             'o|' => beats.push(2),\n   |                ^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = vec![];\n\n    let mut char_iter\
    \ = music_string.chars();\n    let mut i = 0;\n    let mut char = char_iter.next();\n\
    \    while let Some(&'|') = char {\n        let next_char = char_iter.next();\n\
    \        i += 1;\n\n        // We have hit the | - that means we can add the note\
    \ to the beats\n        // if we have not already added the note.\n        //\
    \ Otherwise we need to increment the note by one beat and add it to the beats\n\
    \        if !beats.contains(&i) {\n            beats.push(i);\n        } else\
    \ {\n            beats[i] = beats[i] + 1;\n        }\n        char = next_char;\n\
    \    }\n\n    return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdtc8u0_e.rs:16:20\n   |\n\
    16 |     while let Some(&'|') = char {\n   |                    ^^^^    ---- this\
    \ expression has type `Option<char>`\n   |                    |\n   |        \
    \            expected `char`, found reference\n   |\n   = note:   expected type\
    \ `char`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdtc8u0_e.rs:31:12\n   |\n10 | fn parse_music(music_string: String)\
    \ -> Vec<isize> {\n   |                                         ---------- expected\
    \ `Vec<isize>` because of return type\n...\n31 |     return beats;\n   |     \
    \       ^^^^^ expected `isize`, found `usize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_per_bar = vec![];\n    music_string.split(\"\
    \").for_each(|c| {\n        match c {\n            \"o\" => beats_per_bar.push(4),\n\
    \            \"o|\" => beats_per_bar.push(2),\n            \".|\" => beats_per_bar.push(1),\n\
    \            _ => panic!(\"Illegal character(s)\"),\n        }\n    });\n    beats_per_bar\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'Illegal character(s)', /tmp/tmpchfpg008.rs:17:18\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_taken = vec![];\n\n    // parse music\
    \ string and set initial value of each note\n    let mut notes = music_string.split('\
    \ ');\n    for note in notes {\n        let mut note_length = 1; // default to\
    \ whole note\n        let mut current_note = note.chars().nth(1).unwrap();\n\n\
    \        // if first character is a '.' or '|', it can be considered a half or\
    \ quarter note\n        if current_note == '.' || current_note == '|' {\n    \
    \        note_length = 2;\n            current_note = note.chars().nth(1).unwrap();\n\
    \        }\n\n        // if current character is not '.' or '|', it can be considered\
    \ a whole note\n        if current_note != 'o' {\n            note_length = 4;\n\
    \            current_note = note.chars().nth(1).unwrap();\n        }\n\n     \
    \   // increment the counter for how many beats each note lasts\n        beats_taken.push((note_length\
    \ as isize) * ((note as String).len() as isize) / 4);\n    }\n\n    // return\
    \ note count for each note\n    return beats_taken;\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0605]: non-primitive cast: `&str` as `String`\n  --> /tmp/tmp167onliq.rs:32:52\n\
    \   |\n32 |         beats_taken.push((note_length as isize) * ((note as String).len()\
    \ as isize) / 4);\n   |                                                    ^^^^^^^^^^^^^^^^\
    \ help: consider using the `From` trait instead: `String::from(note)`\n   |\n\
    \   = note: an `as` expression can only be used to convert between primitive types\
    \ or to coerce to a specific trait object\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0605`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_string = music_string.to_lowercase();\n\
    \n    let mut beats = Vec::new();\n\n    for note in music_string.chars() {\n\
    \        if note == 'o' || note == 'o|' || note == '.|' {\n            beats.push(4);\n\
    \        } else {\n            beats.push(1);\n        }\n    }\n\n    beats\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp3glwp6sx.rs:16:38\n\
    \   |\n16 |         if note == 'o' || note == 'o|' || note == '.|' {\n   |   \
    \                                   ^^^^^^^^^^^^^^\n   |\nhelp: if you meant to\
    \ write a `str` literal, use double quotes\n   |\n16 |         if note == 'o'\
    \ || note == 'o|\" || note == \".|' {\n   |                                  \
    \    ~~~~~~~~~~~~~~\n\nerror[E0762]: unterminated character literal\n  --> /tmp/tmp3glwp6sx.rs:16:54\n\
    \   |\n16 |         if note == 'o' || note == 'o|' || note == '.|' {\n   |   \
    \                                                   ^^^\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().map(|c| match c {\n      \
    \  'o' => 4,\n        'o|' => 2,\n        '.|' => 1,\n        _ => 0,\n    }).sum()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpvitgkcpg.rs:13:12\n\
    \   |\n13 |         'o|' => 2,\n   |            ^^^^^^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = vec![];\n\n    for note in music_string.chars()\
    \ {\n        let mut beat = 0;\n\n        match note {\n            'o' => { beat\
    \ += 4; },\n            '.' => { beat += 1; },\n            'o|' => { beat +=\
    \ 2; },\n            _ => {}\n        }\n\n        beats.push(beat);\n    }\n\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpl89b30en.rs:19:16\n\
    \   |\n19 |             'o|' => { beat += 2; },\n   |                ^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // create container for output and place initial\
    \ values\n    let mut beats_vector: Vec<isize> = vec![0, 0, 0, 0];\n    // parse\
    \ input by putting each note in a vector\n    let mut current_note = String::new();\n\
    \    for note in music_string.split(\" \") {\n        let note_to_append = note.chars().collect();\n\
    \        if note_to_append[0] == '|' {\n            note_to_append[0] = 'o';\n\
    \        }\n        current_note.extend(note_to_append);\n    }\n    let note_to_append\
    \ = current_note.chars().collect();\n    note_to_append[0] = 'o';\n    // for\
    \ each note, append it to its corresponding beats vector\n    for i in 0..note_to_append.len()\
    \ {\n        let current_beat = note_to_append[i] - '0';\n        beats_vector.push(current_beat);\n\
    \    }\n    beats_vector\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpto0w64st.rs:17:12\n\
    \   |\n16 |         let note_to_append = note.chars().collect();\n   |       \
    \      -------------- consider giving `note_to_append` a type\n17 |         if\
    \ note_to_append[0] == '|' {\n   |            ^^^^^^^^^^^^^^ cannot infer type\n\
    \   |\n   = note: type must be known at this point\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut note_count = music_string.chars().filter_map(|c|\n\
    \        if c == 'o' {\n            Some('o'.to_owned())\n        } else if c\
    \ == 'o|' {\n            Some('o'.to_owned())\n        } else if c == '.|' {\n\
    \            Some('.'.to_owned())\n        } else {\n            None\n      \
    \  }).count();\n    let mut beats = music_string.chars().filter_map(|c| {\n  \
    \      if c == 'o' {\n            Some('o'.to_owned())\n        } else if c ==\
    \ 'o|' {\n            Some('o'.to_owned())\n        } else if c == '.|' {\n  \
    \          Some('.'.to_owned())\n        } else {\n            None\n        }\n\
    \    }).count();\n    for i in 0..music_string.len() - 1 {\n        if note_count[i]\
    \ == 2 {\n            beats += 1;\n            note_count[i] = 0;\n        } else\
    \ if (note_count[i] == 1) {\n            beats += 1;\n            note_count[i]\
    \ = 0;\n        } else {\n            note_count[i] += 1;\n        }\n    }\n\
    \    return beats * note_count\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp6a88wd7a.rs:14:27\n\
    \   |\n14 |         } else if c == 'o|' {\n   |                           ^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes: Vec<isize> = music_string.split(|char|\
    \ char == ' ').collect();\n    let mut beats = Vec::new();\n    for note in &notes\
    \ {\n        beats.push(match note {\n            'o' => 0,\n            'o|'\
    \ => 1,\n            '.|' => 2,\n            _ => panic!(\"{} is not valid note!\"\
    , note)\n        });\n    }\n    beats.collect::<Vec<isize>>()\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp5wlrz77t.rs:16:16\n\
    \   |\n16 |             'o|' => 1,\n   |                ^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = vec![];\n    let music_str = music_string.to_string();\n\
    \    let mut music_chars = music_str.chars();\n    while let Some(music_char)\
    \ = music_chars.next() {\n        match music_char {\n            c @ _ if c !=\
    \ '|' => result.push(isize_from_char(c)),\n            c @ _ if c == '|' => result.push(isize_from_char(c)),\n\
    \            _ => result.push(isize_from_char(c)),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `isize_from_char` in this scope\n  -->\
    \ /tmp/tmpympe2nyg.rs:16:46\n   |\n16 |             c @ _ if c != '|' => result.push(isize_from_char(c)),\n\
    \   |                                              ^^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `isize_from_char` in this scope\n\
    \  --> /tmp/tmpympe2nyg.rs:17:46\n   |\n17 |             c @ _ if c == '|' =>\
    \ result.push(isize_from_char(c)),\n   |                                     \
    \         ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `isize_from_char` in this scope\n  --> /tmp/tmpympe2nyg.rs:18:30\n\
    \   |\n18 |             _ => result.push(isize_from_char(c)),\n   |          \
    \                    ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `c` in this scope\n  --> /tmp/tmpympe2nyg.rs:18:46\n   |\n\
    18 |             _ => result.push(isize_from_char(c)),\n   |                 \
    \                             ^ not found in this scope\n\nerror: aborting due\
    \ to 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_vec: Vec<isize> = Vec::new();\n \
    \   let music_list = music_string.trim().chars().map(|c| c.to_digit(10).unwrap()).collect();\n\
    \    for note in music_list {\n        music_vec.push((note % 12) + 1);\n    }\n\
    \    return music_vec;\n}\n\nfn main() {\n    let candidate = parse_music;\n \
    \   assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpulnmlm3y.rs:12:9\n\
    \   |\n12 |     let music_list = music_string.trim().chars().map(|c| c.to_digit(10).unwrap()).collect();\n\
    \   |         ^^^^^^^^^^ consider giving `music_list` a type\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_vec: Vec<isize> = Vec::new();\n \
    \   let mut i = 0;\n    while i < music_string.len() {\n        let mut beats\
    \ = 0;\n        let mut current_char = music_string[i];\n        while current_char\
    \ != ' ' && current_char != '|' && current_char != ' ' && current_char != 'o'\
    \ &&\n                current_char != 'o' && current_char != '.' {\n         \
    \   beats += 1;\n            i += 1;\n            current_char = music_string[i];\n\
    \        }\n        if current_char == 'o' || current_char == 'o|' {\n       \
    \     beats_vec.push(beats);\n            i += 1;\n        }\n    }\n    beats_vec\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpq_ros9k_.rs:22:54\n\
    \   |\n22 |         if current_char == 'o' || current_char == 'o|' {\n   |   \
    \                                                   ^^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_notes: Vec<isize> = Vec::new();\n\
    \    let mut note_count = music_string.len();\n    let mut current_note_count\
    \ = 0;\n    let mut current_note = String::new();\n    let mut last_note = String::new();\n\
    \    let mut last_note_count = 0;\n    let mut first_note = String::new();\n \
    \   let mut first_note_count = 0;\n    let mut rest = music_string.chars().filter(|&c|\
    \ c != ' ');\n    let mut has_current_note = false;\n    while let Some(ch) =\
    \ rest.next() {\n        note_count = note_count - 1;\n        if let Some(note)\
    \ = get_note(ch) {\n            current_note = note;\n            has_current_note\
    \ = true;\n        } else {\n            current_note_count = current_note_count\
    \ - 1;\n        }\n        if note_count == 0 {\n            music_notes.push(current_note_count);\n\
    \        }\n    }\n    music_notes.push(current_note_count);\n    music_notes\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_note` in this scope\n  --> /tmp/tmprx1rz6uv.rs:23:29\n\
    \   |\n23 |         if let Some(note) = get_note(ch) {\n   |                 \
    \            ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let music_string_bytes = music_string.as_bytes();\n\
    \    let mut music_chars = music_string_bytes.as_bytes();\n    let mut music_chars_len\
    \ = music_string_bytes.len();\n    let mut beats = vec![];\n    // go through\
    \ all symbols in music string\n    while music_chars_len > 0 {\n        debug_assert!(music_chars[0]\
    \ != '.');\n        debug_assert!(music_chars[0] != 'o');\n        debug_assert!(music_chars[0]\
    \ != '|');\n        debug_assert!(music_chars[0] != ' ');\n\n        if music_chars[0]\
    \ == 'o' {\n            beats.push(4);\n            music_chars = &music_chars[1..];\n\
    \        }\n        if music_chars[0] == 'o|' {\n            beats.push(2);\n\
    \            music_chars = &music_chars[1..];\n        }\n        if music_chars[0]\
    \ == '.' {\n            beats.push(1);\n            music_chars = &music_chars[1..];\n\
    \        }\n        if music_chars[0] == ' ' {\n            music_chars = &music_chars[1..];\n\
    \        }\n        music_chars = &music_chars[1..];\n        music_chars_len\
    \ = music_string_bytes.len();\n    }\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp7kbxgf5g.rs:26:33\n\
    \   |\n26 |         if music_chars[0] == 'o|' {\n   |                        \
    \         ^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut output_vec: Vec<isize> = Vec::new();\n\n\
    \    for music_note in music_string.chars() {\n        if music_note == 'o' {\n\
    \            output_vec.push(4);\n        } else if music_note == 'o|' {\n   \
    \         output_vec.push(2);\n        } else if music_note == '.|' {\n      \
    \      output_vec.push(1);\n        } else {\n            println!(\"{:?} is not\
    \ a valid note\", music_note);\n        }\n    }\n\n    output_vec\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpkt37n5w2.rs:16:36\n\
    \   |\n16 |         } else if music_note == 'o|' {\n   |                     \
    \               ^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_per_note = Vec::new();\n    for note\
    \ in music_string.chars().skip(1) {\n        match note {\n            '.' =>\
    \ {\n                beats_per_note.push(0);\n            }\n            'o' =>\
    \ {\n                beats_per_note.push(4);\n            }\n            '|' =>\
    \ {\n                beats_per_note.push(2);\n            }\n            _ =>\
    \ (),\n        }\n    }\n    beats_per_note\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpzhebfro1.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_count_vec: Vec<isize> = Vec::new();\n\
    \    for ch in music_string {\n        match ch {\n            'o' => {\n    \
    \            beats_count_vec.push(4);\n            }\n            'o|' => {\n\
    \                beats_count_vec.push(2);\n            }\n            '.|' =>\
    \ {\n                beats_count_vec.push(1);\n            }\n            _ =>\
    \ {\n                println!(\"Wrong music input. Unknown character: {}\", ch);\n\
    \                break;\n            }\n        }\n    }\n    beats_count_vec\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpxkix8c5o.rs:17:16\n\
    \   |\n17 |             'o|' => {\n   |                ^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut output_vector = vec![];\n    let mut notes\
    \ = music_string.chars();\n\n    for note in notes {\n        if note == '|' {\n\
    \            output_vector.push(output_vector.len() / 2);\n        } else if note\
    \ == 'o' {\n            output_vector.push(4);\n        } else {\n           \
    \ output_vector.push(1);\n        }\n    }\n    output_vector\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxutva75x.rs:23:5\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |              \
    \                           ---------- expected `Vec<isize>` because of return\
    \ type\n...\n23 |     output_vector\n   |     ^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<usize>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut current:\
    \ usize = 0;\n    let mut notes: Vec<&str> = music_string.split_whitespace().collect();\n\
    \n    loop {\n        if notes.len() > 0 {\n            current = notes[0].as_str().parse().unwrap();\n\
    \            notes = notes[1..].collect();\n        } else {\n            break;\n\
    \        }\n\n        let mut multiplier: isize = 1;\n\n        match current\
    \ {\n            'o' => multiplier = 4,\n            'o|' => multiplier = 2,\n\
    \            '.|' => multiplier = 1,\n            _ => unreachable!(),\n     \
    \   }\n\n        beats.push(multiplier * 4);\n    }\n\n    beats\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpvncvgya0.rs:27:16\n\
    \   |\n27 |             'o|' => multiplier = 2,\n   |                ^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_slice = music_string.as_bytes();\n\
    \    let music_length = music_slice.len();\n    let mut beats_array = Vec::with_capacity(music_length\
    \ / 4);\n\n    for i in 0..music_length {\n        let byte = music_slice[i *\
    \ 4];\n        let is_whole_note = (byte & 0xf0) == 0xf0;\n        let is_half_note\
    \ = (byte & 0xc0) != 0xc0;\n        let is_quarter_note = (byte & 0x80) != 0x80;\n\
    \n        if is_whole_note {\n            beats_array.push(4);\n        }\n\n\
    \        if is_half_note {\n            beats_array.push(2);\n        }\n\n  \
    \      if is_quarter_note {\n            beats_array.push(1);\n        }\n   \
    \ }\n\n    return beats_array;\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 7 but the index\
    \ is 8', /tmp/tmppgkh6odz.rs:16:20\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes = music_string\n        .chars()\n\
    \        .filter_map(|c| match c {\n            'o' => true,\n            'o|'\
    \ => true,\n            '.|' => true,\n            _ => false,\n        })\n \
    \       .collect();\n    notes.sort_by_key(|&c| c.to_ascii_lowercase());\n   \
    \ let mut beat_counts = Vec::new();\n    for note in notes {\n        let mut\
    \ note_count = 1;\n        if note == 'o' {\n            note_count += 4;\n  \
    \      }\n        if note == 'o|' {\n            note_count += 2;\n        }\n\
    \        if note == '.|' {\n            note_count = 1;\n        }\n        beat_counts.push(note_count);\n\
    \    }\n    beat_counts\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpdjjhury9.rs:15:16\n\
    \   |\n15 |             'o|' => true,\n   |                ^^^^^^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_per_note = vec![];\n\n    for ch\
    \ in music_string.chars() {\n        let mut next_note_count = 1;\n\n        if\
    \ ch == 'o' {\n            next_note_count = 4;\n        } else if ch == 'o|'\
    \ {\n            next_note_count = 2;\n        } else if ch == '.|' {\n      \
    \      next_note_count = 1;\n        }\n\n        beats_per_note.push(*next_note_count);\n\
    \    }\n\n    beats_per_note\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp5d39qh8o.rs:18:28\n\
    \   |\n18 |         } else if ch == 'o|' {\n   |                            ^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let music_str = music_string.to_owned();\n    let\
    \ mut notes: Vec<isize> = music_str.chars().collect::<Vec<isize>>();\n    notes.sort();\n\
    \    let mut current = 0usize;\n    let mut beats: usize = 0;\n\n    for note\
    \ in notes {\n        match note {\n            'o' => beats += 4,\n         \
    \   'o|' => beats += 2,\n            '.|' => beats += 1,\n            _ => continue,\n\
    \        }\n        current += 1;\n        if current == 4 {\n            beats\
    \ -= 1;\n        }\n    }\n    notes.clear();\n    notes.push(beats);\n    notes\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpgrpwfqdp.rs:20:16\n\
    \   |\n20 |             'o|' => beats += 2,\n   |                ^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ music_chars = music_string.chars().collect::<Vec<&str>>();\n    let mut notes:\
    \ Vec<&str> = Vec::new();\n\n    for music_char in music_chars.iter() {\n    \
    \    let music_char = music_char.expect(\"music_string contains invalid chars.\"\
    );\n        let music_char_note = music_char.to_string();\n\n        if music_char_note\
    \ == \"o\" {\n            notes.push(music_char_note);\n        } else if music_char_note\
    \ == \"o|\" {\n            notes.push(music_char_note);\n        } else if music_char_note\
    \ == \".|\" {\n            notes.push(music_char_note);\n        } else {\n  \
    \          panic!(\"music_string contains invalid note.\");\n        }\n    }\n\
    \n    for note in notes.iter() {\n        let note_to_beat = note.chars().skip(1).count();\n\
    \n        if note_to_beat > beats.len() {\n            beats.push(note_to_beat);\n\
    \        }\n    }\n    return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<&str>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpdf4kro5p.rs:12:44\n     |\n12\
    \   |     let music_chars = music_string.chars().collect::<Vec<&str>>();\n   \
    \  |                                            ^^^^^^^ value of type `Vec<&str>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n     |\n     = help:\
    \ the trait `FromIterator<char>` is not implemented for `Vec<&str>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror[E0599]: no method named `expect` found for reference\
    \ `&&str` in the current scope\n  --> /tmp/tmpdf4kro5p.rs:16:37\n   |\n16 |  \
    \       let music_char = music_char.expect(\"music_string contains invalid chars.\"\
    );\n   |                                     ^^^^^^ method not found in `&&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdf4kro5p.rs:34:24\n   |\n34 |\
    \             beats.push(note_to_beat);\n   |                        ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n34 |           \
    \  beats.push(note_to_beat.try_into().unwrap());\n   |                       \
    \             ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n\n   \
    \ for (note, length) in music_string.chars().zip(music_string.chars().skip(music_string.len()))\
    \ {\n        match note {\n            'o' => { beats.extend_from_slice(&length);\
    \ break }\n            'o|' => { beats.extend_from_slice(&length / 2); break }\n\
    \            '.|' => { beats.extend_from_slice(&1); break }\n            _ =>\
    \ {}\n        }\n    }\n\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpa_tjih2d.rs:16:16\n\
    \   |\n16 |             'o|' => { beats.extend_from_slice(&length / 2); break\
    \ }\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_string = music_string.chars().skip_while(|c|\
    \ c != '|').collect::<String>();\n    let mut music_notes: Vec<isize> = vec![];\n\
    \n    loop {\n        let last_note = music_string.chars().next().unwrap();\n\
    \        music_string = music_string.chars().skip_while(|c| c != last_note).collect::<String>();\n\
    \        if music_string.is_empty() {\n            break;\n        }\n       \
    \ let mut note_length = music_string.len() as isize;\n        let mut last_beat_length:\
    \ isize = 0;\n\n        let mut c = music_string.chars().next();\n        let\
    \ mut i = 1;\n\n        while let Some(x) = c.and_then(|c| c.to_digit(10)) {\n\
    \            if last_note == x {\n                let beat_length = i - 1;\n \
    \               last_beat_length += beat_length;\n                music_notes.push(beat_length);\n\
    \            }\n            c = music_string.chars().next();\n            i +=\
    \ 1;\n        }\n\n        music_notes.push(last_beat_length);\n    }\n\n    music_notes\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmp5gd2qnbx.rs:11:66\n\
    \   |\n11 |     let mut music_string = music_string.chars().skip_while(|c| c !=\
    \ '|').collect::<String>();\n   |                                            \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n   = help: the trait\
    \ `PartialEq` is implemented for `char`\n\nerror[E0277]: can't compare `&char`\
    \ with `char`\n  --> /tmp/tmp5gd2qnbx.rs:16:62\n   |\n16 |         music_string\
    \ = music_string.chars().skip_while(|c| c != last_note).collect::<String>();\n\
    \   |                                                              ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n   = help: the trait `PartialEq` is implemented for `char`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp5gd2qnbx.rs:27:29\n   |\n27 |  \
    \           if last_note == x {\n   |                             ^ expected `char`,\
    \ found `u32`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = vec![];\n\n    for\
    \ note in music_string.chars().skip(1) {\n        match note {\n            'o'\
    \ => {\n                beats.push(4);\n            }\n            'o|' => {\n\
    \                beats.push(2);\n            }\n            '.|' => {\n      \
    \          beats.push(1);\n            }\n            _ => {\n               \
    \ continue;\n            }\n        }\n    }\n\n    beats\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp3do8_7fj.rs:18:16\n\
    \   |\n18 |             'o|' => {\n   |                ^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = vec![];\n    let music_string\
    \ = music_string.trim();\n    let music_char_iter = music_string.chars();\n  \
    \  while let Some(music_char) = music_char_iter.next() {\n        if music_char\
    \ == ' ' {\n            continue;\n        }\n        let music_char = music_char.to_string();\n\
    \        match music_char {\n            \"o\" => result.push(4),\n          \
    \  \"|\" => result.push(2),\n            \".\" => result.push(1),\n          \
    \  _ => panic!(\"Invalid note '{}' given.\", music_char),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0jz_mv3a.rs:20:13\n   |\n\
    19 |         match music_char {\n   |               ---------- this expression\
    \ has type `String`\n20 |             \"o\" => result.push(4),\n   |         \
    \    ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0jz_mv3a.rs:21:13\n   |\n19 |         match music_char {\n   |\
    \               ---------- this expression has type `String`\n20 |           \
    \  \"o\" => result.push(4),\n21 |             \"|\" => result.push(2),\n   | \
    \            ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0jz_mv3a.rs:22:13\n   |\n19 |         match music_char\
    \ {\n   |               ---------- this expression has type `String`\n...\n22\
    \ |             \".\" => result.push(1),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats_vec: Vec<isize> = Vec::new();\n \
    \   \n    // parse musical note\n    let mut musical_note = music_string.chars().next().unwrap();\n\
    \    let mut note_length = musical_note.len() as usize;\n    // count how many\
    \ beats does each note last\n    while note_length > 0 {\n        // if the note\
    \ is the dot it is a whole note\n        if note_length >= 4 && musical_note[note_length-3]\
    \ != '|' {\n            beats_vec.push(4);\n        }\n        // if the note\
    \ is the dot it is a half note\n        else if note_length >= 2 && musical_note[note_length-2]\
    \ != '|' {\n            beats_vec.push(2);\n        }\n        // if the note\
    \ is the dot it is a quater note\n        else if note_length == 1 && musical_note[note_length-1]\
    \ != '|' {\n            beats_vec.push(1);\n        }\n        \n        // if\
    \ the note is not a dot\n        else {\n            // if it is a note, it must\
    \ last N beats, where N is equal to the note length\n            if note_length\
    \ % 4 == 0 {\n                beats_vec.push(4 as usize);\n            }\n   \
    \         // if it is a half note, it must last N beats, where N is equal to the\
    \ note length/2\n            else if note_length % 2 == 0 {\n                beats_vec.push(2\
    \ as usize);\n            }\n            // if it is a quater note, it must last\
    \ N beats, where N is equal to the note length/2\n            else if note_length\
    \ == 1 {\n                beats_vec.push(1);\n            }\n            else\
    \ {\n                println!(\"Incorrect note, length of note {} is not a multiple\
    \ of 4 or 2\", note_length);\n            }\n        }\n        // count how many\
    \ beats does this note last\n        note_length -= 1;\n        musical_note =\
    \ music_string.chars().next().unwrap();\n    }\n    return beats_vec;\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpt8ar97i4.rs:15:40\n   |\n15 |     let mut note_length =\
    \ musical_note.len() as usize;\n   |                                        ^^^\
    \ method not found in `char`\n\nerror[E0608]: cannot index into a value of type\
    \ `char`\n  --> /tmp/tmpt8ar97i4.rs:19:32\n   |\n19 |         if note_length >=\
    \ 4 && musical_note[note_length-3] != '|' {\n   |                            \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of\
    \ type `char`\n  --> /tmp/tmpt8ar97i4.rs:23:37\n   |\n23 |         else if note_length\
    \ >= 2 && musical_note[note_length-2] != '|' {\n   |                         \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a\
    \ value of type `char`\n  --> /tmp/tmpt8ar97i4.rs:27:37\n   |\n27 |         else\
    \ if note_length == 1 && musical_note[note_length-1] != '|' {\n   |          \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpt8ar97i4.rs:35:32\n   |\n35 |                 beats_vec.push(4\
    \ as usize);\n   |                                ^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n35 |                 beats_vec.push((4\
    \ as usize).try_into().unwrap());\n   |                                +     \
    \     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt8ar97i4.rs:39:32\n\
    \   |\n39 |                 beats_vec.push(2 as usize);\n   |                \
    \                ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n39 |                 beats_vec.push((2 as usize).try_into().unwrap());\n\
    \   |                                +          +++++++++++++++++++++\n\nerror:\
    \ aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599, E0608.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars()\n        .filter_map(|c| match\
    \ c {\n            'o' => Some(4),\n            'o|' => Some(2),\n           \
    \ '.|' => Some(1),\n            _ => None,\n        })\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpl88qzrdj.rs:14:16\n\
    \   |\n14 |             'o|' => Some(2),\n   |                ^^^^^^^^^^^^^\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut current_beat\
    \ = 0;\n    let mut last_note = String::new();\n    let mut notes_in_line = String::new();\n\
    \    for c in music_string.chars() {\n        if c == 'o' {\n            last_note\
    \ = notes_in_line;\n            notes_in_line = String::new();\n            current_beat\
    \ = 0;\n            beats.push(current_beat);\n        } else {\n            notes_in_line.push(c);\n\
    \            if c.is_whitespace() {\n                beats.push(current_beat);\n\
    \                current_beat = 0;\n            } else {\n                current_beat\
    \ += 1;\n            }\n        }\n    }\n    beats.push(current_beat);\n    beats\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpfe3odt3l.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // Your code here\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiq3z7721.rs:10:41\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\
    \    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes = String::new();\n    music_string.split('\
    \ ').for_each(|note| {\n        if note.len() == 1 {\n            notes.push_str(&note);\n\
    \            return;\n        }\n        if note.len() == 2 {\n            notes.push_str(&note[0]);\n\
    \            notes.push_str(\"|\");\n            notes.push_str(&note[1]);\n \
    \           return;\n        }\n        if note.len() == 3 {\n            notes.push_str(&note[0]);\n\
    \            notes.push_str(\"||\");\n            notes.push_str(&note[1]);\n\
    \            return;\n        }\n        if note.len() == 4 {\n            notes.push_str(&note[0]);\n\
    \            notes.push_str(\"|\");\n            notes.push_str(&note[1]);\n \
    \           notes.push_str(\"|\");\n            return;\n        }\n    });\n\
    \    notes\n        .chars()\n        .filter(|c| c.is_ascii_alphanumeric())\n\
    \        .collect::<Vec<_>>()\n        .into_iter()\n        .map(|note| match\
    \ note {\n            'o' => 0,\n            'o|' => 1,\n            '.|' => 2,\n\
    \            _ => panic!(\"Invalid note '{}'\", note),\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpabgavl57.rs:44:16\n\
    \   |\n44 |             'o|' => 1,\n   |                ^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().enumerate()\n        .filter_map(|(i,\
    \ char)| {\n            match char {\n                'o' => Some(i),\n      \
    \          'o|' => Some(i - 4),\n                '.|' => Some(i - 2),\n      \
    \          _ => None,\n            }\n        })\n        .collect()\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp5bn5_mmp.rs:15:20\n\
    \   |\n15 |                 'o|' => Some(i - 4),\n   |                    ^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_string = music_string.to_owned();\n\
    \    let mut beats = Vec::new();\n\n    loop {\n        let last_note = music_string.chars().nth(1).unwrap();\n\
    \n        let last_beat = music_string.chars().nth(music_string.chars().position(last_note).unwrap()).unwrap();\n\
    \n        if last_note == 'o' {\n            music_string.truncate(music_string.chars().position(last_beat).unwrap()\
    \ + 1);\n            beats.push(last_beat);\n        } else {\n            music_string.truncate(music_string.chars().position(last_beat).unwrap());\n\
    \        }\n\n        if music_string.chars().last() != '.' {\n            break;\n\
    \        }\n\n        music_string.push('|');\n    }\n\n    beats\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `char`\n    -->\
    \ /tmp/tmpqaixqjj9.rs:17:80\n     |\n17   |         let last_beat = music_string.chars().nth(music_string.chars().position(last_note).unwrap()).unwrap();\n\
    \     |                                                                      \
    \ -------- ^^^^^^^^^ expected an `FnMut<(char,)>` closure, found `char`\n    \
    \ |                                                                       |\n\
    \     |                                                                      \
    \ required by a bound introduced by this call\n     |\n     = help: the trait\
    \ `FnMut<(char,)>` is not implemented for `char`\nnote: required by a bound in\
    \ `position`\n\nerror[E0277]: expected a `FnMut<(char,)>` closure, found `char`\n\
    \    --> /tmp/tmpqaixqjj9.rs:20:65\n     |\n20   |             music_string.truncate(music_string.chars().position(last_beat).unwrap()\
    \ + 1);\n     |                                                        --------\
    \ ^^^^^^^^^ expected an `FnMut<(char,)>` closure, found `char`\n     |       \
    \                                                 |\n     |                  \
    \                                      required by a bound introduced by this\
    \ call\n     |\n     = help: the trait `FnMut<(char,)>` is not implemented for\
    \ `char`\nnote: required by a bound in `position`\n\nerror[E0277]: expected a\
    \ `FnMut<(char,)>` closure, found `char`\n    --> /tmp/tmpqaixqjj9.rs:23:65\n\
    \     |\n23   |             music_string.truncate(music_string.chars().position(last_beat).unwrap());\n\
    \     |                                                        -------- ^^^^^^^^^\
    \ expected an `FnMut<(char,)>` closure, found `char`\n     |                 \
    \                                       |\n     |                            \
    \                            required by a bound introduced by this call\n   \
    \  |\n     = help: the trait `FnMut<(char,)>` is not implemented for `char`\n\
    note: required by a bound in `position`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpqaixqjj9.rs:26:43\n   |\n26 |         if music_string.chars().last()\
    \ != '.' {\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // Your code here\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp18joj1i1.rs:10:41\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\
    \    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string\n        .trim()\n        .chars()\n\
    \        .filter_map(|c| match c {\n            c if c == 'o' =>\n           \
    \     Some(c as isize - '0' as isize - '0' as isize - '0' as isize - '0' as isize\
    \ - '0' as isize - '0' as isize - '0')\n            c if c == 'o|' =>\n      \
    \          Some(c as isize - '0' as isize - '0' as isize - '0' as isize - '0'\
    \ as isize - '0')\n            c if c == '.|' =>\n                Some(c as isize\
    \ - '0' as isize - '0' as isize - '0' as isize - '0')\n            c if c.is_whitespace()\
    \ => None,\n            c => None,\n        })\n        .collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  stdout: ''
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp26xfor8r.rs:17:26\n\
    \   |\n17 |             c if c == 'o|' =>\n   |                          ^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  exit_code: 1
  status: SyntaxError
