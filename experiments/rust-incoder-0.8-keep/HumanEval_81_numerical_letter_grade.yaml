name: HumanEval_81_numerical_letter_grade
language: rust
prompt: "/// It is the last week of the semester and the teacher has to give the grades\n\
  /// to students. The teacher has been making her own algorithm for grading.\n///\
  \ The only problem is, she has lost the code she used for grading.\n/// She has\
  \ given you a list of GPAs for some students and you have to write \n/// a function\
  \ that can output a list of letter grades using the following table:\n/// GPA  \
  \     |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n\
  /// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7           \
  \     B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7  \
  \              C\n/// > 1.3                C-\n/// > 1.0                D+ \n///\
  \ > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n\
  /// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C',\
  \ 'A-']\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
  \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
  C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
  \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
  D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n   \
  \ assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"),\
  \ String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
  B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"\
  D-\")]);\n}\n"
completions: ["    let mut letter_grades = Vec::new();\n    let mut gpa = grades.iter().min().unwrap();\n\
    \    let mut letter_grade = String::new();\n\n    while gpa > 0.0 {\n        let\
    \ letter_grade = if gpa > 3.0 { \"A+\" } else { \"A\" };\n        gpa -= 3.0;\
    \ // remove a point from gpa\n        letter_grades.push(letter_grade);\n    }\n\
    \n    while gpa > 2.0 {\n        let letter_grade = if gpa > 2.7 { \"B+\" } else\
    \ { \"B\" };\n        gpa -= 2.7; // remove a point from gpa\n        letter_grades.push(letter_grade);\n\
    \    }\n\n    while gpa > 1.7 {\n        let letter_grade = if gpa > 1.3 { \"\
    C+\" } else { \"C\" };\n        gpa -= 1.7; // remove a point from gpa\n     \
    \   letter_grades.push(letter_grade);\n    }\n\n    while gpa > 1.0 {\n      \
    \  let letter_grade = if gpa > 0.7 { \"D+\" } else { \"D\" };\n        gpa -=\
    \ 1.0; // remove a point from gpa\n        letter_grades.push(letter_grade);\n\
    \    }\n\n    while gpa > 0.0 {\n        let letter_grade = if gpa > 0.0 { \"\
    D-\" } else { \"E\" };\n        gpa -= 0.0; // remove a point from gpa\n     \
    \   letter_grades.push(letter_grade);\n    }\n    letter_grades", "    let mut\
    \ output: Vec<String> = vec![];\n    for i in 0..grades.len() {\n        let grade\
    \ = grades[i];\n        let gpa = grades[i - 1];\n        let grade = if gpa >\
    \ 2.0 { 1.0 + gpa - 2.0 } else if gpa > 1.0 { 1.0 } else { 0.0 };\n        let\
    \ grade = grade as f64 as char;\n        output.push((grade as String).to_string());\n\
    \    }\n    output", "    let mut grades = grades.to_vec();\n    let mut letter_grades:\
    \ Vec<String> = Vec::new();\n    grades.pop();\n    grades.sort_by_key(|x| -x.clone());\n\
    \    let mut total = 0.;\n    let mut total_per_grade: Vec<f64> = Vec::new();\n\
    \    for grade in grades {\n        let index = total / grade as f64;\n      \
    \  total += grade;\n        total_per_grade.push(index);\n    }\n    for i in\
    \ total_per_grade.iter() {\n        let index = i as f64;\n        if index ==\
    \ 0 {\n            letter_grades.push(format!(\"{}+\", 0));\n        } else if\
    \ index == 1 {\n            letter_grades.push(format!(\"{}\", 0));\n        }\
    \ else if index == 2 {\n            letter_grades.push(format!(\"{}-\", 0));\n\
    \        } else if index == 3 {\n            letter_grades.push(format!(\"+{}\"\
    , 0));\n        } else if index == 4 {\n            letter_grades.push(format!(\"\
    +{}\", 1));\n        } else if index == 5 {\n            letter_grades.push(format!(\"\
    -{}\", 0));\n        } else if index == 6 {\n            letter_grades.push(format!(\"\
    -{}\", 1));\n        } else {\n            letter_grades.push(format!(\"{}\",\
    \ 1));\n        }\n    }\n    letter_grades", "    let mut letters = Vec::new();\n\
    \    letters.push(\"E\".to_string());\n    letters.push(\"F\".to_string());\n\
    \    letters.push(\"F\".to_string());\n    for i in grades.iter().rev() {\n  \
    \      if i <= 3.0 {\n            letters.push(\"A+\".to_string());\n        }\n\
    \        if i > 3.0 && (i <= 3.7) {\n            letters.push(\"A\".to_string());\n\
    \        }\n        if i > 3.7 && i <= 3.3 {\n            letters.push(\"A-\"\
    .to_string());\n        }\n        if i > 3.3 && i <= 3.0 {\n            letters.push(\"\
    B+\".to_string());\n        }\n        if i > 3.0 && i <= 3.7 {\n            letters.push(\"\
    B\".to_string());\n        }\n        if i > 3.7 && i <= 3.3 {\n            letters.push(\"\
    B-\".to_string());\n        }\n        if i > 3.3 && i <= 3.0 {\n            letters.push(\"\
    C+\".to_string());\n        }\n        if i > 3.0 && i <= 3.7 {\n            letters.push(\"\
    C\".to_string());\n        }\n        if i > 3.7 && i <= 3.3 {\n            letters.push(\"\
    C-\".to_string());\n        }\n        if i > 3.3 && i <= 3.0 {\n            letters.push(\"\
    D+\".to_string());\n        }\n        if i > 3.0 && i <= 3.7 {\n            letters.push(\"\
    D\".to_string());\n        }\n        if i > 3.7 && i <= 3.3 {\n            letters.push(\"\
    D-\".to_string());\n        }\n        if i == 3.0 {\n            letters.push(\"\
    F\".to_string());\n        }\n    }\n    letters", "    let mut grades_copy =\
    \ grades.clone();\n    let mut letter_grades = vec![];\n    grades_copy.sort();\n\
    \    for i in grades_copy.iter() {\n        if i <= 3.3 {\n            letter_grades.push(\"\
    A+\");\n        } else if i <= 3.0 {\n            letter_grades.push(\"A\");\n\
    \        } else if i <= 2.7 {\n            letter_grades.push(\"B+\");\n     \
    \   } else if i <= 2.3 {\n            letter_grades.push(\"B\");\n        } else\
    \ if i <= 1.7 {\n            letter_grades.push(\"C+\");\n        } else if i\
    \ <= 1.3 {\n            letter_grades.push(\"C\");\n        } else if i <= 1.0\
    \ {\n            letter_grades.push(\"D+\");\n        } else if i <= 0.7 {\n \
    \           letter_grades.push(\"D\");\n        } else {\n            letter_grades.push(\"\
    D-\");\n        }\n    }\n    letter_grades", "    let mut grades_copy = grades.clone();\n\
    \    let mut grades_slice = grades_copy.as_slice();\n    let mut grades_len =\
    \ grades.len();\n    let mut result = vec![];\n    while grades_len > 0 {\n  \
    \      grades_slice.pop();\n        if grades_len == 0 {\n            result.push(\"\
    E\");\n            break;\n        }\n        let grade = grades_slice.pop();\n\
    \        result.push(format!(\"{}+\", numerical_grade(grade)));\n    }\n    result",
  "    if grades.len() != 7 {\n        panic!(\"grades must be exactly 7 grades\"\
    )\n    }\n    let mut letter_grades = Vec::new();\n    for grade in grades.iter()\
    \ {\n        letter_grades.push((\n            if grade < 3.0 { \"A+\" }\n   \
    \         else if grade < 3.7 { \"A\" }\n            else if grade < 3.3 { \"\
    A-\" }\n            else if grade < 3.0 { \"B+\" }\n            else if grade\
    \ < 2.7 { \"B\" }\n            else if grade < 2.3 { \"B-\" }\n            else\
    \ if grade < 2.0 { \"C+\" }\n            else if grade < 1.7 { \"C\" }\n     \
    \       else if grade < 1.3 { \"C-\" }\n            else if grade < 1.0 { \"D+\"\
    \ }\n            else if grade < 0.7 { \"D\" }\n            else { \"D-\" }\n\
    \        ));\n    }\n    letter_grades", "    let grades = grades.clone();\n \
    \   let mut grade_array = vec![];\n    for grade in grades {\n        let mut\
    \ letter_grade = vec![];\n        if grade <= 3.0 {\n            letter_grade.push(('A'\
    \ + grade).to_string());\n        } else if grade <= 3.3 {\n            letter_grade.push(('A'\
    \ + grade - 2).to_string());\n        } else if grade <= 3.7 {\n            letter_grade.push(('B'\
    \ + grade - 3.3).to_string());\n        } else if grade <= 4.0 {\n           \
    \ letter_grade.push(('B' + grade - 3.7).to_string());\n        } else if grade\
    \ <= 4.3 {\n            letter_grade.push(('B' + grade - 4.0).to_string());\n\
    \        } else if grade <= 4.7 {\n            letter_grade.push(('B' + grade\
    \ - 4.3).to_string());\n        } else if grade <= 5.0 {\n            letter_grade.push(('B'\
    \ + grade - 4.7).to_string());\n        } else if grade <= 5.3 {\n           \
    \ letter_grade.push(('B' + grade - 5.0).to_string());\n        } else if grade\
    \ <= 5.7 {\n            letter_grade.push(('B' + grade - 5.3).to_string());\n\
    \        } else if grade <= 6.0 {\n            letter_grade.push(('B' + grade\
    \ - 5.7).to_string());\n        } else {\n            letter_grade.push(('C' +\
    \ grade - 6.0).to_string());\n        }\n        grade_array.push(&mut letter_grade.iter().cloned().collect::<Vec<String>>());\n\
    \    }\n    grade_array", "    if grades.len() < 1 {\n        return vec![];\n\
    \    }\n    let mut grades_vec: Vec<String> = vec![];\n    let mut gpas = grades.to_vec();\n\
    \    let mut gpa_index = 0;\n    while gpa_index < gpas.len() {\n        let mut\
    \ letter_grade = \"\";\n        for mut i = 0; i < gpas.len() - gpa_index + 1;\
    \ i++ {\n            let gpa = gpas[gpa_index + i];\n            let grade = match\
    \ gpa {\n                f64 => if i ==0 { \"+\" }\n                else     \
    \      { \" \" }\n                _ => {\n                    let mut gpa1 = gpas[gpa_index\
    \ - i];\n                    let mut gpa2 = gpas[gpa_index + i];\n           \
    \         let mut gpa3 = gpas[gpa_index + 2 * i];\n                    let mut\
    \ gpa4 = gpas[gpa_index + 3 * i];\n                    if gpa1 < gpa2 { gpa1 }\n\
    \                    else          { gpa2 }\n                }\n            };\n\
    \            letter_grade += grade as char;\n        }\n        gpa_index += 1;\n\
    \        grades_vec.push(letter_grade);\n    }\n    return grades_vec;", "   \
    \ let len = grades.len();\n    if len < 7 {\n        return vec![String::from(\"\
    E\")];\n    }\n    let mut result = vec![String::from(\"E\")];\n    let grade\
    \ = grades.iter().map(|g| {\n        if g > 3.0 {\n            String::from(\"\
    B+\")\n        } else if g > 2.7 {\n            String::from(\"B\")\n        }\
    \ else if g > 2.3 {\n            String::from(\"B-\")\n        } else if g > 2.0\
    \ {\n            String::from(\"C+\")\n        } else if g > 1.7 {\n         \
    \   String::from(\"C\")\n        } else if g > 1.3 {\n            String::from(\"\
    C-\")\n        } else if g > 1.0 {\n            String::from(\"D+\")\n       \
    \ } else if g > 0.7 {\n            String::from(\"D\")\n        } else if g >\
    \ 0.0 {\n            String::from(\"D-\")\n        } else {\n            String::from(\"\
    E\")\n        }\n    }).collect::<Vec<String>>();\n    for g in grade {\n    \
    \    result.push(g);\n    }\n    result", '    // TODO', "    let grades = grades.into_iter().map(|g|\
    \ g as f64).collect::<Vec<_>>();\n    let grades_iter = grades.iter();\n    let\
    \ mut letter_grades = Vec::new();\n\n    for grade in grades_iter {\n        let\
    \ mut cur = grade;\n        loop {\n            if cur == 0.0 {\n            \
    \    letter_grades.push(\"D+\");\n                break;\n            } else if\
    \ cur < 1.0 && cur > 0.0 && cur == cur - 1.0 {\n                letter_grades.push(\"\
    D\");\n                break;\n            } else if cur < 0.0 && cur > -1.0 &&\
    \ cur == cur + 1.0 {\n                letter_grades.push(\"D-\");\n          \
    \      break;\n            } else if cur > -1.0 && cur > -1.0 && cur == cur -\
    \ 1.0 {\n                letter_grades.push(\"C\");\n                break;\n\
    \            } else if cur > -1.0 && cur < -1.0 && cur == cur + 1.0 {\n      \
    \          letter_grades.push(\"C\");\n                break;\n            } else\
    \ if cur < -1.0 && cur > -1.0 && cur == cur - 1.0 {\n                letter_grades.push(\"\
    B-\");\n                break;\n            } else if cur < -1.0 && cur < -1.0\
    \ && cur == cur + 1.0 {\n                letter_grades.push(\"B-\");\n       \
    \         break;\n            } else if cur < -1.0 && cur < -1.0 && cur == cur\
    \ - 1.0 {\n                letter_grades.push(\"B-\");\n                break;\n\
    \            } else if cur > -1.0 && cur < -1.0 && cur == cur + 1.0 {\n      \
    \          letter_grades.push(\"B-\");\n                break;\n            }\
    \ else if cur > -1.0 && cur < -1.0 && cur == cur - 1.0 {\n                letter_grades.push(\"\
    B+\");\n                break;\n            } else if cur > -1.0 && cur < -1.0\
    \ && cur == cur + 1.0 {\n                letter_grades.push(\"B+\");\n       \
    \         break;\n            } else if cur < -1.0 && cur > -1.0 && cur == cur\
    \ - 1.0 {\n                letter_grades.push(\"B+\");\n                break;\n\
    \            } else if cur < -1.0 && cur < -1.0 && cur == cur + 1.0 {\n      \
    \          letter_grades.push(\"B+\");\n                break;\n            }\
    \ else if cur > -1.0 && cur < -1.0 && cur == cur - 1.0 {\n                letter_grades.push(\"\
    A+\");\n                break;\n            } else if cur < -1.0 && cur > -1.0\
    \ && cur == cur + 1.0 {\n                letter_grades.push(\"A+\");\n       \
    \         break;\n            } else if cur < -1.0 && cur < -1.0 && cur == cur\
    \ - 1.0 {\n                letter_grades.push(\"A+\");\n                break;\n",
  "    // TODO: Implement me\n    vec![]", "    let mut letter_grades = Vec::new();\n\
    \n    for grade in grades {\n        if grade >= 3.0 {\n            letter_grades.push(match\
    \ grade {\n                0.0    => \"D\",\n                1.7    => \"C\",\n\
    \                2.0    => \"B\",\n                2.3    => \"B\",\n        \
    \        2.7    => \"B\",\n                3.0    => \"A\",\n                3.3\
    \    => \"A-\",\n                3.7    => \"A\",\n                4.0    => \"\
    A+\",\n                _      => \"E\",\n            });\n        } else if grade\
    \ >= 2.0 {\n            letter_grades.push(match grade {\n                0.0\
    \    => \"D\",\n                1.7    => \"C\",\n                2.0    => \"\
    B\",\n                2.3    => \"B-\",\n                2.7    => \"B\",\n  \
    \              3.0    => \"A\",\n                3.3    => \"A+\",\n         \
    \       3.7    => \"A\",\n                4.0    => \"A+\",\n                _\
    \      => \"E\",\n            });\n        } else if grade >= 1.0 {\n        \
    \    letter_grades.push(match grade {\n                0.0    => \"D\",\n    \
    \            1.7    => \"C\",\n                2.0    => \"B\",\n            \
    \    2.3    => \"B-\",\n                2.7    => \"B\",\n                3.0\
    \    => \"A\",\n                3.3    => \"A-\",\n                3.7    => \"\
    A\",\n                4.0    => \"A+\",\n                _      => \"E\",\n  \
    \          });\n        } else if grade >= 0.0 {\n            letter_grades.push(match\
    \ grade {\n                0.0    => \"D\",\n                1.7    => \"C\",\n\
    \                2.0    => \"B\",\n                2.3    => \"B-\",\n       \
    \         2.7    => \"B\",\n                3.0    => \"A\",\n               \
    \ 3.3    => \"A-\",\n                3.7    => \"A\",\n                4.0   \
    \ => \"A+\",\n                _      => \"E\",\n            });\n        } else\
    \ {\n            letter_grades.push(match grade {\n                0.0    => \"\
    D\",\n                1.7    => \"C\",\n                2.0    => \"B\",\n   \
    \             2.3    => \"B-\",\n                2.7    => \"B\",\n          \
    \      3.0    => \"A\",\n                3.3    => \"A-\",\n                3.7\
    \    => \"A\",\n                4.0    => \"A+\",\n                _      => \"\
    E\",\n            });\n        }\n    }\n\n    return letter_grades", "    let\
    \ mut grade = grades.iter().filter(|&x| x > 0).collect::<Vec<f64>>();\n    if\
    \ grade.len() > 0 {\n        grade.sort();\n        let mut grade_letter = vec!['B'\
    \ - 'A' + 1];\n        for grade in grade {\n            if grade < 2.0 {\n  \
    \              grade_letter.push('C' - 'A' + grade - 2.0);\n            } else\
    \ if grade < 3.0 {\n                grade_letter.push('B-');\n            } else\
    \ if grade < 4.0 {\n                grade_letter.push('A-');\n            } else\
    \ {\n                grade_letter.push('B+');\n            }\n        }\n    \
    \    return grade_letter.iter().cloned().collect::<Vec<String>>();\n    } else\
    \ {\n        return vec!['E'.to_string()];\n    }", "    let mut grades_array\
    \ = grades.to_owned();\n    let mut grades_iter = grades_array.iter();\n    let\
    \ mut grades_len = 0;\n    let mut letter_grade = String::new();\n    for grade\
    \ in grades_iter {\n        grades_len += 1;\n        if grade < 1.0 {\n     \
    \       letter_grade += \"A\";\n        } else if grade < 2.0 {\n            letter_grade\
    \ += \"A-\";\n        } else if grade < 3.0 {\n            letter_grade += \"\
    B\";\n        } else if grade < 4.0 {\n            letter_grade += \"B-\";\n \
    \       } else if grade < 5.0 {\n            letter_grade += \"C\";\n        }\
    \ else if grade < 6.0 {\n            letter_grade += \"C-\";\n        } else if\
    \ grade < 7.0 {\n            letter_grade += \"D\";\n        } else if grade <\
    \ 8.0 {\n            letter_grade += \"D-\";\n        } else if grade < 9.0 {\n\
    \            letter_grade += \"E\";\n        } else {\n            letter_grade\
    \ += \"F\";\n        }\n    }\n    let mut letter_grades_array = vec![];\n   \
    \ if grades_len == 1 {\n        letter_grades_array.push(letter_grade);\n    }\
    \ else if grades_len == 2 {\n        if grades_array[0] > grades_array[1] {\n\
    \            letter_grades_array.push(\"B-\");\n            letter_grades_array.push(\"\
    B-\");\n        } else {\n            letter_grades_array.push(\"B-\");\n    \
    \        letter_grades_array.push(\"B-\");\n        }\n    } else {\n        if\
    \ grades_array[0] > grades_array[1] && grades_array[0] > grades_array[2] {\n \
    \           letter_grades_array.push(\"B-\");\n            letter_grades_array.push(\"\
    B-\");\n            letter_grades_array.push(\"B-\");\n        } else {\n    \
    \        letter_grades_array.push(\"B-\");\n            letter_grades_array.push(\"\
    B-\");\n        }\n        if grades_array[1] > grades_array[2] {\n          \
    \  letter_grades_array.push(\"B-\");\n            letter_grades_array.push(\"\
    B-\");\n        }\n    }\n    letter_grades_array", '    // Solution goes here',
  "    let mut letter_grades = vec![];\n    for grade in grades {\n        if grade\
    \ > 4.0 {\n            letter_grades.push('C');\n        } else if grade > 3.7\
    \ {\n            letter_grades.push('B');\n        } else if grade > 3.3 {\n \
    \           letter_grades.push('A');\n        } else if grade > 3.0 {\n      \
    \      letter_grades.push('A+');\n        } else if grade > 2.7 {\n          \
    \  letter_grades.push('B');\n        } else if grade > 2.3 {\n            letter_grades.push('B-');\n\
    \        } else if grade > 2.0 {\n            letter_grades.push('A+');\n    \
    \    } else if grade > 1.7 {\n            letter_grades.push('A');\n        }\
    \ else if grade > 1.3 {\n            letter_grades.push('A-');\n        } else\
    \ if grade > 1.0 {\n            letter_grades.push('D+');\n        } else if grade\
    \ > 0.7 {\n            letter_grades.push('D');\n        } else if grade > 0.0\
    \ {\n            letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n\
    \        }\n    }\n    letter_grades", "    let mut letter_grades = vec![];\n\n\
    \    for i in grades {\n        if i >= 0.0 {\n            letter_grades.push(\"\
    A+\");\n        } else if i > 3.0 {\n            letter_grades.push(\"A\");\n\
    \        } else if i > 2.3 {\n            letter_grades.push(\"A-\");\n      \
    \  } else if i > 1.7 {\n            letter_grades.push(\"B+\");\n        } else\
    \ if i > 1.3 {\n            letter_grades.push(\"B\");\n        } else if i >\
    \ 0.7 {\n            letter_grades.push(\"B-\");\n        } else if i > 0.3 {\n\
    \            letter_grades.push(\"C+\");\n        } else if i > 0.07 {\n     \
    \       letter_grades.push(\"C\");\n        } else if i > 0.03 {\n           \
    \ letter_grades.push(\"C-\");\n        } else if i > 0.007 {\n            letter_grades.push(\"\
    D+\");\n        } else if i > 0.003 {\n            letter_grades.push(\"D\");\n\
    \        } else {\n            letter_grades.push(\"D-\");\n        }\n    }\n\
    \n    letter_grades", "    let mut grades_str = vec![\"\"];\n    let mut grade_points_to_add\
    \ = 0;\n    for i in grades.iter().cloned() {\n        if grade_points_to_add\
    \ == 3 {\n            grades_str.push(\"C\");\n            grade_points_to_add\
    \ = 0;\n        } else if grade_points_to_add == 2 {\n            grades_str.push(\"\
    B-\");\n            grade_points_to_add = 0;\n        } else if grade_points_to_add\
    \ == 1 {\n            grades_str.push(\"B-\");\n            grades_str.push(\"\
    A-\");\n            grade_points_to_add = 0;\n        } else if grade_points_to_add\
    \ == 0 {\n            grades_str.push(\"D-\");\n            grades_str.push(\"\
    C-\");\n            grades_str.push(\"B-\");\n            grades_str.push(\"A-\"\
    );\n            grades_str.push(\"A-\");\n            grades_str.push(\"D-\");\n\
    \            grades_str.push(\"C-\");\n            grade_points_to_add = 0;\n\
    \        } else {\n            grades_str.push(\"D-\");\n            grades_str.push(\"\
    C-\");\n            grades_str.push(\"B-\");\n            grades_str.push(\"A-\"\
    );\n            grades_str.push(\"A-\");\n            grades_str.push(\"D-\");\n\
    \            grades_str.push(\"C-\");\n            grade_points_to_add = 0;\n\
    \        }\n        grades_str.push(match i {\n            3.0 => \"C+\",\n  \
    \          2.7 => \"B+\",\n            2.3 => \"B-\",\n            2.0 => \"C+\"\
    ,\n            1.7 => \"C\",\n            1.3 => \"C-\",\n            1.0 => \"\
    D+\",\n            0.7 => \"D\",\n            0.0 => \"D-\",\n            _ =>\
    \ \"E\",\n        });\n        grade_points_to_add += 1;\n    }\n    grades_str",
  "    let mut letter_grades = Vec::new();\n\n    // Sort based on GPA\n    grades.sort_unstable_by_key(|x|\
    \ x.0);\n\n    // We start from index 1, because index 0 has grades 4.0 and index\
    \ 1\n    // has grades 0.0\n    for i in 1..grades.len() {\n        // Calculate\
    \ the GPA of the next student\n        let gpa = grades[i-1].0 + grades[i].0;\n\
    \n        // If GPA is less than or equal to 3.5, output A grade\n        if gpa\
    \ >= 3.5 {\n            letter_grades.push(\"A+\");\n        }\n        // If\
    \ GPA between 3.3 and 3.7, output A grade\n        if gpa >= 3.3 && gpa <= 3.7\
    \ {\n            letter_grades.push(\"A\");\n        }\n        // If GPA between\
    \ 3.0 and 3.3, output B+ grade\n        if gpa >= 3.0 && gpa <= 3.3 {\n      \
    \      letter_grades.push(\"B+\");\n        }\n        // If GPA between 2.7 and\
    \ 3.0, output B grade\n        if gpa >= 2.7 && gpa <= 3.0 {\n            letter_grades.push(\"\
    B\");\n        }\n        // If GPA between 2.3 and 2.7, output B-\n        if\
    \ gpa >= 2.3 && gpa <= 2.7 {\n            letter_grades.push(\"B-\");\n      \
    \  }\n        // If GPA between 2.0 and 3.0, output C+ grade\n        if gpa >=\
    \ 2.0 && gpa <= 2.3 {\n            letter_grades.push(\"C+\");\n        }\n  \
    \      // If GPA between 1.7 and 2.0, output C grade\n        if gpa >= 1.7 &&\
    \ gpa <= 2.0 {\n            letter_grades.push(\"C\");\n        }\n        //\
    \ If GPA between 1.3 and 1.7, output C-\n        if gpa >= 1.3 && gpa <= 1.7 {\n\
    \            letter_grades.push(\"C-\");\n        }\n        // If GPA between\
    \ 1.0 and 1.3, output D+ grade\n        if gpa >= 1.0 && gpa <= 1.3 {\n      \
    \      letter_grades.push(\"D+\");\n        }\n        // If GPA less than or\
    \ equal to 0.7, output D grade\n        if gpa <= 0.7 {\n            letter_grades.push(\"\
    D\");\n        }\n        // If GPA less than 0.0, output D- grade\n        if\
    \ gpa <= 0.0 {\n            letter_grades.push(\"D-\");\n        }\n        //\
    \ If GPA is less than or equal to 0.0, output E grade\n        if gpa <= 0.0 {\n\
    \            letter_grades.push(\"E\");\n        }\n    }\n    letter_grades",
  "    if grades.len() <= 1 || grades.len() > 10 {\n        return vec![\"F\"];\n\
    \    }\n    let mut letter_grades: Vec<String> = vec![\"F\"];\n    grades.sort_unstable();\n\
    \    let mut grade_sum: f64 = 0.0;\n    let mut total_count: usize = 1;\n    for\
    \ grade in grades {\n        grade_sum += grade;\n        total_count += 1;\n\
    \    }\n    for grade in grades {\n        let letter_grade: String;\n       \
    \ if grade < 3.0 {\n            letter_grade = \"F\";\n        } else if grade\
    \ < 3.3 {\n            letter_grade = \"E\";\n        } else if grade < 3.7 {\n\
    \            letter_grade = \"D\";\n        } else if grade < 4.0 {\n        \
    \    letter_grade = \"C\";\n        } else if grade < 4.3 {\n            letter_grade\
    \ = \"B\";\n        } else if grade < 4.7 {\n            letter_grade = \"A\"\
    ;\n        } else if grade < 5.0 {\n            letter_grade = \"A+\";\n     \
    \   } else if grade < 5.3 {\n            letter_grade = \"A-\";\n        } else\
    \ if grade < 5.7 {\n            letter_grade = \"B+\";\n        } else if grade\
    \ < 6.0 {\n            letter_grade = \"B-\";\n        } else if grade < 6.3 {\n\
    \            letter_grade = \"C+\";\n        } else if grade < 6.7 {\n       \
    \     letter_grade = \"C-\";\n        } else if grade < 7.0 {\n            letter_grade\
    \ = \"D+\";\n        } else if grade < 7.3 {\n            letter_grade = \"D-\"\
    ;\n        } else if grade < 7.7 {\n            letter_grade = \"F\";\n      \
    \  } else if grade < 8.0 {\n            letter_grade = \"E\";\n        } else\
    \ if grade < 8.3 {\n            letter_grade = \"D\";\n        } else if grade\
    \ < 8.7 {\n            letter_grade = \"C\";\n        } else if grade < 9.0 {\n\
    \            letter_grade = \"B\";\n        } else if grade < 9.3 {\n        \
    \    letter_grade = \"A\";\n        } else if grade < 9.7 {\n            letter_grade\
    \ = \"A+\";\n        } else if grade < 10.0 {\n            letter_grade = \"A-\"\
    ;\n        } else {\n            letter_grade = \"F\";\n        }\n        letter_grades.push(format!(\"\
    {}\", letter_grade));\n    }\n    letter_grades.push(format!(\"{}\", format!(\"\
    +{}\", grade_sum / total_count)));", "    // TODO: Implement the function\n  \
    \  // let grades = vec![4.0, 3.7, 3.3, 3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0];\n   \
    \ // let grades = vec![4.0, 3.7, 3.3, 3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0];\n    let\
    \ grades = vec![4.0, 3.7, 3.3, 3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0];\n    let grades_num\
    \ = grades.iter().map(|&x| x as f64).collect::<Vec<f64>>();\n    let mut grades_letter:\
    \ Vec<String> = vec![];\n    let mut running_sum = 0.0;\n\n    for grade in grades_num\
    \ {\n        running_sum += grade;\n        if running_sum >= 3.0 {\n        \
    \    grades_letter.push(\"A+\");\n        }\n        else if running_sum >= 2.0\
    \ {\n            grades_letter.push(\"B+\");\n        }\n        else if running_sum\
    \ >= 1.5 {\n            grades_letter.push(\"C+\");\n        }\n        else if\
    \ running_sum >= 1.0 {\n            grades_letter.push(\"C\");\n        }\n  \
    \      else if running_sum >= 0.0 {\n            grades_letter.push(\"D+\");\n\
    \        }\n        else if running_sum < 0.0 {\n            grades_letter.push(\"\
    D\");\n        }\n        else {\n            grades_letter.push(\"E\");\n   \
    \     }\n    }\n    grades_letter", "    let grades = grades.into_iter().map(|g|\
    \ g as f64).collect();\n    let mut grade_level = grades.len() - 1;\n    let mut\
    \ letter_grades = Vec::new();\n    loop {\n        let grade_level_index = grade_level\
    \ % grades.len();\n        let grade = grades[grade_level_index];\n        if\
    \ grade_level > 0 {\n            grade_level -= 1;\n        } else {\n       \
    \     letter_grades.push(format!(\"{}+\", grade));\n            break;\n     \
    \   }\n        letter_grades.push(format!(\"{}\", grade));\n    }\n    letter_grades",
  "    // Only grade the students if they are in the range\n    // [4.0, 3.7], i.e.,\
    \ 4.0 is the lowest grade and 3.7 is the highest grade.\n    if grades.len() <\
    \ 2 {\n        return vec![];\n    }\n    let mut num_grades = Vec::new();\n \
    \   let grade = grades[0];\n    let grades = grades[1..];\n    let mut i = 1;\n\
    \    loop {\n        if grade < grades[i] {\n            break;\n        }\n \
    \       num_grades.push(String::from(grades[i - 1]));\n        i += 1;\n    }\n\
    \    num_grades", "    let mut letter_grades = vec![\"\".to_string(); grades.len()+1];\n\
    \    let mut gpa = grades.iter().sum();\n    let mut min_grade: f64 = std::f64::MAX;\n\
    \    let mut max_grade: f64 = std::f64::MIN;\n\n    // Find minimum and maximum\n\
    \    for i in grades.iter() {\n        if i > max_grade {\n            max_grade\
    \ = i;\n        }\n        if i < min_grade {\n            min_grade = i;\n  \
    \      }\n    }\n\n    // Find the grades \n    for i in grades.iter() {\n   \
    \     if i > max_grade {\n            letter_grades[0] = format!(\"D+\");\n  \
    \          break;\n        }\n        if i < min_grade {\n            letter_grades[0]\
    \ = format!(\"D-\");\n            break;\n        }\n        let num = numerical_grade(i);\n\
    \        if num >= gpa {\n            letter_grades[0] = format!(\"D+\");\n  \
    \          break;\n        }\n        if num < gpa {\n            letter_grades[0]\
    \ = format!(\"D-\");\n            break;\n        }\n\n        let letter_grade\
    \ = letter_grades[num];\n        letter_grades[num] = match i {\n            0\
    \ => \"D+\".to_string(),\n            _ => \"\".to_string(),\n        };\n   \
    \     gpa = i - num;\n    }\n    letter_grades", "    let mut letter_grade = Vec::new();\n\
    \    grades.sort_unstable();\n    for i in 0..grades.len() {\n        let mut\
    \ grade = grades[i];\n        let grade_string = match grade {\n            4.0\
    \ => \"+\".to_string(),\n            _ => \"\".to_string()\n        };\n     \
    \   let grade = match grade {\n            3.7 => \"A\".to_string(),\n       \
    \     3.3 => \"A-\".to_string(),\n            3.0 => \"B+\".to_string(),\n   \
    \         2.7 => \"B\".to_string(),\n            2.3 => \"B-\".to_string(),\n\
    \            2.0 => \"C+\".to_string(),\n            1.7 => \"C\".to_string(),\n\
    \            1.3 => \"C-\".to_string(),\n            1.0 => \"D+\".to_string(),\n\
    \            0.7 => \"D\".to_string(),\n            0.0 => \"D-\".to_string(),\n\
    \            _ => \"\".to_string(),\n        };\n        letter_grade.push(i +\
    \ grade_string + grade);\n    }\n    return letter_grade;", "    let mut letter_grades\
    \ = Vec::new();\n    for grade in grades {\n        letter_grades.push(match grade\
    \ {\n            4.0 => \"A+\",\n            _ => match grade {\n            \
    \    3.7 => \"A\",\n                3.3 => \"A-\",\n                3.0 => \"\
    B+\",\n                2.7 => \"B\",\n                2.3 => \"B-\",\n       \
    \         2.0 => \"C+\",\n                1.7 => \"C\",\n                1.3 =>\
    \ \"C-\",\n                1.0 => \"D+\",\n                _ => \"D\",\n     \
    \       }\n        });\n    }\n    letter_grades", "    let mut grade_sum: f64\
    \ = 0.0;\n    let mut num_grade: usize = 0;\n    let mut letter_grade: String\
    \ = String::new();\n    for grade in grades {\n        let grade_part = grade\
    \ / 1.0;\n        let letter = if grade_part < 4.0 {\n            \"A+\"\n   \
    \     } else if grade_part < 3.7 {\n            \"A\"\n        } else if grade_part\
    \ < 3.3 {\n            \"A-\"\n        } else if grade_part < 3.0 {\n        \
    \    \"B+\"\n        } else if grade_part < 2.7 {\n            \"B\"\n       \
    \ } else if grade_part < 2.3 {\n            \"B-\"\n        } else if grade_part\
    \ < 2.0 {\n            \"C+\"\n        } else if grade_part < 1.7 {\n        \
    \    \"C\"\n        } else if grade_part < 1.3 {\n            \"C-\"\n       \
    \ } else if grade_part < 1.0 {\n            \"D+\"\n        } else if grade_part\
    \ < 0.7 {\n            \"D\"\n        } else if grade_part < 0.0 {\n         \
    \   \"D-\"\n        } else {\n            \"E\"\n        }\n        letter_grade\
    \ += letter;\n        grade_sum += grade;\n        num_grade++;\n    }\n    let\
    \ total_letter = num_grade - 1;\n    let total_grade = grade_sum;\n    if total_letter\
    \ > 1 {\n        for _ in 1..total_letter {\n            letter_grade += &\"-\"\
    ;\n        }\n    }\n    if total_grade < 5.0 {\n        for _ in 0..total_grade\
    \ {\n            letter_grade += &\"-\";\n        }\n    }\n    vec![&letter_grade]",
  "    let mut grades_sum = grades.iter().sum();\n    let mut letter_grades: Vec<String>\
    \ = Vec::new();\n    let mut index = grades.iter().count();\n    while index <\
    \ grades.len() {\n        if grades[index] >= grades_sum {\n            letter_grades.push(format!(\"\
    {:.2}\", grades[index] / grades_sum));\n            grades_sum += grades[index];\n\
    \        } else {\n            grades_sum -= grades[index];\n        }\n     \
    \   index += 1\n    }\n    letter_grades", "    let mut letters: Vec<String> =\
    \ vec![];\n    for grade in grades {\n        let grade: f64 = grade as f64;\n\
    \        let mut letter: String;\n        if grade < 0.0 {\n            letter\
    \ = String::from(\"E\");\n        } else {\n            letter = match grade {\n\
    \                0..3.0 => \"A+\",\n                4.0  => \"A\",\n         \
    \       > 3.7 => \"A- \",\n                3.7 => \"A \",\n                3.3\
    \ => \"A- \",\n                3.0  => \"B+\",\n                2.7 => \"B \"\
    ,\n                2.3 => \"B-\",\n                2.0  => \"C+\",\n         \
    \       1.7  => \"C\",\n                1.3  => \"C-\",\n                1.0 \
    \ => \"D+\",\n                0.7  => \"D \",\n                0.0  => \"D-\"\
    ,\n                _ => String::from(\"?\"),\n            };\n        }\n    \
    \    letters.push(letter);\n    }\n    letters", "    let (grades_min, grades_max)\
    \ = grades.min().min(|a, b| a.partial_cmp(&b).unwrap());\n    let mut grades_range\
    \ = grades_max - grades_min + 1.0;\n    let mut grades_average = grades_range\
    \ / grades.len();\n    let mut grades_average_mut = grades_average;\n    let mut\
    \ grades_letter_grades = vec![];\n\n    for grade in grades {\n        if grade\
    \ == 0.0 {\n            break;\n        }\n\n        if grades_average_mut*grade\
    \ > grades_range {\n            grades_range += 0.0;\n            grades_average\
    \ = grades_range / grades.len();\n            grades_average_mut = grades_average;\n\
    \        }\n\n        if grades_average_mut*grade == grades_range {\n        \
    \    grades_letter_grades.push(LetterGrade::average);\n        } else {\n    \
    \        let letter_grade = if grades_average >= grades_min {\n              \
    \  grades_average_mut\n            } else {\n                grades_average_mut*(-grades_min\
    \ / grades_average)\n            };\n            grades_letter_grades.push(LetterGrade::from_value(letter_grade));\n\
    \        }\n    }\n\n    grades_letter_grades", "    let mut output = Vec::new();\n\
    \    let mut min_grade = grades[0];\n    let mut max_grade = grades[0];\n\n  \
    \  for grade in grades {\n        if grade < min_grade {\n            min_grade\
    \ = grade;\n        }\n        if grade > max_grade {\n            max_grade =\
    \ grade;\n        }\n    }\n\n    for grade in grades {\n        output.push(\n\
    \            match grade {\n                0.0 <= grade && grade <= 2.0 => \"\
    A+\".to_string(),\n                2.0 <= grade && grade <= 3.0 => \"A\".to_string(),\n\
    \                3.0 <= grade && grade <= 3.7 => \"A-\".to_string(),\n       \
    \         4.0 <= grade && grade <= 4.4 => \"B+\".to_string(),\n              \
    \  4.5 <= grade && grade <= 4.7 => \"B\".to_string(),\n                4.8 <=\
    \ grade && grade <= 4.9 => \"B-\".to_string(),\n                5.0 <= grade &&\
    \ grade <= 5.4 => \"C+\".to_string(),\n                5.5 <= grade && grade <=\
    \ 5.7 => \"C\".to_string(),\n                5.8 <= grade && grade <= 5.9 => \"\
    C-\".to_string(),\n                6.0 <= grade && grade <= 6.4 => \"D+\".to_string(),\n\
    \                6.5 <= grade && grade <= 6.7 => \"D\".to_string(),\n        \
    \        6.8 <= grade && grade <= 6.9 => \"D-\".to_string(),\n               \
    \ 7.0 <= grade && grade <= 7.4 => \"F\".to_string(),\n                _ => \"\"\
    ,\n            },\n        );\n    }\n\n    match max_grade {\n        1.0 =>\
    \ output.push(\"D-\".to_string()),\n        2.0 => output.push(\"C+\".to_string()),\n\
    \        3.0 => output.push(\"C\".to_string()),\n        4.0 => output.push(\"\
    B+\".to_string()),\n        5.0 => output.push(\"B\".to_string()),\n        6.0\
    \ => output.push(\"B-\".to_string()),\n        _ => output.push(\"A+\".to_string()),\n\
    \    }", "    let mut letter_grade = Vec::new();\n    for grade in grades.iter()\
    \ {\n        let mut letter_grade_counter = 1;\n        for mut letter_grade_temp\
    \ in letter_grade.iter() {\n            if grade > letter_grade_temp {\n     \
    \           letter_grade_counter = letter_grade_counter + 1;\n            }\n\
    \        }\n        letter_grade.push(format!(\"{}\", letter_grade_counter));\n\
    \    }\n    return letter_grade;", "    grades\n        .iter()\n        .enumerate()\n\
    \        .map(|(i, grade)| {\n            let (prev, next) = grade - 0.5;\n  \
    \          let letter_grade = if next == 0.0 && prev == 0.0 { \"E\" } else { format!(\"\
    {}+\", next) };\n            format!(\"{}\", letter_grade)\n        })\n     \
    \   .collect()", "    let mut grades_sorted = grades.clone();\n    grades_sorted.sort_unstable_by_key(|a|\
    \ a.partial_cmp(&a.last()));\n    let mut grades_sorted_index = grades_sorted.iter().rev().map(|a|\
    \ a.index()).collect::<Vec<usize>>();\n    let grades_sorted_index_reversed =\
    \ grades_sorted_index.reverse();\n\n    let mut letter_grades = Vec::new();\n\n\
    \    for (grade_index, grade) in grades_sorted_index.iter().zip(grades_sorted)\
    \ {\n        let grade_percentage = grade_index / grades_sorted_index_reversed.len();\n\
    \        let grade_letter_grade = match grade_percentage {\n            0 => \"\
    E\",\n            1 => \"D\",\n            2 => \"D+\",\n            3 => \"D-\"\
    ,\n            4 => \"C\",\n            5 => \"C-\",\n            6 => \"B\",\n\
    \            7 => \"B-\",\n            8 => \"A\",\n            9 => \"A+\",\n\
    \            _ => \"A- \",\n        };\n        letter_grades.push(grade_letter_grade\
    \ + &grade);\n    }\n    letter_grades", "    // Your code here\n    return vec![\n\
    \        \"A+\",\n        \"A\",\n        \"A- \",\n        \"B+\",\n        \"\
    B\",\n        \"B-\",\n        \"C+\",\n        \"C\",\n        \"C-\",\n    \
    \    \"D+ \",\n        \"D\",\n        \"D-\",\n        \"E\",\n    ];", "   \
    \ let mut letter_grades = vec![];\n\n    let mut current_grade: f64 = grades[0];\n\
    \n    for grade in grades.iter().rev() {\n        let current_letter_grade = match\
    \ grade {\n            4.0 => \"+\".to_string(),\n            3.7 => \"A\".to_string(),\n\
    \            3.3 => \"A-\".to_string(),\n            3.0 => \"B+\".to_string(),\n\
    \            2.7 => \"B\".to_string(),\n            2.3 => \"B-\".to_string(),\n\
    \            2.0 => \"C+\".to_string(),\n            1.7 => \"C\".to_string(),\n\
    \            1.3 => \"C-\".to_string(),\n            1.0 => \"D+\".to_string(),\n\
    \            0.7 => \"D\".to_string(),\n            _ => \"\".to_string(),\n \
    \       };\n\n        if current_grade < 3.0 {\n            current_grade += 1.0;\n\
    \        }\n\n        letter_grades.push(current_letter_grade + &current_grade);\n\
    \    }\n\n    if current_grade < 3.0 {\n        letter_grades.push(\"\".to_string());\n\
    \    }\n\n    letter_grades.reverse();\n\n    letter_grades", "    let mut letter_grade\
    \ = vec![\"E\"];\n    let mut min_gpa = grades.iter().min();\n    let mut max_gpa\
    \ = grades.iter().max();\n    let mut total_gpa = grades.iter().sum();\n    for\
    \ i in 0..grades.len() {\n        if total_gpa >= 0.0 && grades[i] <= max_gpa\
    \ {\n            letter_grade.push(i + 1 + \"A+\");\n            total_gpa -=\
    \ grades[i];\n        } else {\n            if total_gpa >= min_gpa && grades[i]\
    \ >= min_gpa {\n                letter_grade.push(i + 1 + \"A\");\n          \
    \      total_gpa -= grades[i];\n            } else if total_gpa >= min_gpa &&\
    \ grades[i] <= max_gpa {\n                letter_grade.push(i + 1 + \"A-\");\n\
    \                total_gpa -= grades[i];\n            } else if total_gpa >= min_gpa\
    \ && grades[i] >= max_gpa {\n                letter_grade.push(i + 1 + \"B+\"\
    );\n                total_gpa -= grades[i];\n            } else if total_gpa >=\
    \ min_gpa && grades[i] < max_gpa {\n                letter_grade.push(i + 1 +\
    \ \"B\");\n                total_gpa -= grades[i];\n            } else if total_gpa\
    \ >= min_gpa && grades[i] <= max_gpa {\n                letter_grade.push(i +\
    \ 1 + \"B-\");\n                total_gpa -= grades[i];\n            } else if\
    \ total_gpa >= min_gpa && grades[i] >= max_gpa {\n                letter_grade.push(i\
    \ + 1 + \"C+\");\n                total_gpa -= grades[i];\n            } else\
    \ if total_gpa >= min_gpa && grades[i] < max_gpa {\n                letter_grade.push(i\
    \ + 1 + \"C\");\n                total_gpa -= grades[i];\n            } else if\
    \ total_gpa >= min_gpa && grades[i] >= max_gpa {\n                letter_grade.push(i\
    \ + 1 + \"C-\");\n                total_gpa -= grades[i];\n            } else\
    \ if total_gpa >= min_gpa && grades[i] <= max_gpa {\n                letter_grade.push(i\
    \ + 1 + \"D+\");\n                total_gpa -= grades[i];\n            } else\
    \ if total_gpa >= min_gpa && grades[i] < max_gpa {\n                letter_grade.push(i\
    \ + 1 + \"D\");\n                total_gpa -= grades[i];\n            } else if\
    \ total_gpa >= min_gpa && grades[i] <= max_gpa {\n                letter_grade.push(i\
    \ + 1 + \"D-\");\n                total_", "    let mut letter_grade = vec![];\n\
    \    let gpa: Vec<f64> = grades.iter().cloned().collect();\n    for &g in &gpa\
    \ {\n        if g > 3.0 {\n            letter_grade.push(\"B+\");\n        } else\
    \ if g > 2.7 {\n            letter_grade.push(\"B\");\n        } else if g > 2.3\
    \ {\n            letter_grade.push(\"B-\");\n        } else if g > 1.7 { \n  \
    \          letter_grade.push(\"C\");\n        } else if g > 1.3 {\n          \
    \  letter_grade.push(\"C-\");\n        } else if g > 0.7 {\n            letter_grade.push(\"\
    D\");\n        } else if g > 0.1 {\n            letter_grade.push(\"D-\");\n \
    \       } else if g > 0.0 { \n            letter_grade.push(\"E\");\n        }\n\
    \    }\n    letter_grade", "    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade < 3.0 {\n            letter_grades.push(String::from(\"\
    B+\".to_string()));\n        } else if grade < 3.7 {\n            letter_grades.push(String::from(\"\
    B\".to_string()));\n        } else if grade < 4.0 {\n            letter_grades.push(String::from(\"\
    C\".to_string()));\n        } else if grade < 4.7 {\n            letter_grades.push(String::from(\"\
    C+\".to_string()));\n        } else if grade < 5.0 {\n            letter_grades.push(String::from(\"\
    D\".to_string()));\n        } else if grade < 5.7 {\n            letter_grades.push(String::from(\"\
    D+\".to_string()));\n        } else if grade < 6.0 {\n            letter_grades.push(String::from(\"\
    D-\".to_string()));\n        } else if grade < 6.7 {\n            letter_grades.push(String::from(\"\
    E\".to_string()));\n        } else {\n            letter_grades.push(String::from(\"\
    F\".to_string()));\n        }\n    }\n    letter_grades", "    if grades.len()\
    \ < 2 {\n        return vec![];\n    }\n    let mut numerical_grade: Vec<String>\
    \ = vec![];\n    let mut total_gpa: f64 = grades[0] + grades[1];\n    for i in\
    \ 2..grades.len() {\n        total_gpa += grades[i] - grades[i - 1];\n       \
    \ numerical_grade.push((if total_gpa >= 0.5 { \"A+\" } else { \"A-\" })\n    \
    \        + (if total_gpa >= 0.3 { \"B+\" } else { \"B-\" })\n            + (if\
    \ total_gpa >= 0.1 { \"C+\" } else { \"C-\" })\n            + (if total_gpa >=\
    \ 0.07 { \"D+\" } else { \"D-\" })\n            + (if total_gpa >= 0.03 { \"E+\"\
    \ } else { \"E-\" }));\n        total_gpa = grades[i] - grades[i - 1];\n    }\n\
    \    numerical_grade.push((if total_gpa >= 0.5 { \"A+\" } else { \"A-\" })\n \
    \       + (if total_gpa >= 0.3 { \"B+\" } else { \"B-\" })\n        + (if total_gpa\
    \ >= 0.1 { \"C+\" } else { \"C-\" })\n        + (if total_gpa >= 0.07 { \"D+\"\
    \ } else { \"D-\" })\n        + (if total_gpa >= 0.03 { \"E+\" } else { \"E-\"\
    \ }));\n    numerical_grade", "    let gpa_sum = grades.iter().fold(0.0, |acc,\
    \ x| acc + x);\n    let gpa_average = if gpa_sum > 0.0 {gpa_sum / grades.len()\
    \ as f64} else {0.0};\n    let letter_grades = grades.iter()\n        .map(|x|\
    \ {\n            let gpa_difference = x - gpa_average;\n            let gpa_percent\
    \ = if gpa_difference > 0.0 {(gpa_average - x) / (gpa_average as f64).sqrt()}\
    \ else {0.0};\n            match gpa_percent {\n                |-7.0 => format!(\"\
    {}\", String::from(\"C\")),\n                -6 => format!(\"{}\", String::from(\"\
    B\")),\n                -5 => format!(\"{}\", String::from(\"A-\")),\n       \
    \         -4 => format!(\"{}\", String::from(\"A-\")),\n                -3 =>\
    \ format!(\"{}\", String::from(\"A-\")),\n                -2 => format!(\"{}\"\
    , String::from(\"A-\")),\n                -1 => format!(\"{}\", String::from(\"\
    A\")),\n                0 => format!(\"{}\", String::from(\"A\")),\n         \
    \       1 => format!(\"{}\", String::from(\"A+\")),\n                2 => format!(\"\
    {}\", String::from(\"A+\")),\n                3 => format!(\"{}\", String::from(\"\
    A+\")),\n                4 => format!(\"{}\", String::from(\"A-\")),\n       \
    \         5 => format!(\"{}\", String::from(\"A-\")),\n                6 => format!(\"\
    {}\", String::from(\"A-\")),\n                7 => format!(\"{}\", String::from(\"\
    A-\")),\n                8 => format!(\"{}\", String::from(\"A-\")),\n       \
    \         9 => format!(\"{}\", String::from(\"B+\")),\n                10 => format!(\"\
    {}\", String::from(\"B+\")),\n                11 => format!(\"{}\", String::from(\"\
    B+\")),\n                12 => format!(\"{}\", String::from(\"B-\")),\n      \
    \          13 => format!(\"{}\", String::from(\"B-\")),\n                14 =>\
    \ format!(\"{}\", String::from(\"B-\")),\n                15 => format!(\"{}\"\
    , String::from(\"B-\")),\n                16 => format!(\"{}\", String::from(\"\
    B-\")),\n                17 => format!(\"{}\", String::from(\"B-\")),\n      \
    \          18 => format!(\"{}\", String::from(\"B-", "    let mut grades_copy\
    \ = grades.clone();\n\n    // Sorts the array\n    grades_copy.sort();\n\n   \
    \ let mut letter_grades = Vec::new();\n\n    // Loop through all grades and check\n\
    \    for grade in grades_copy {\n        let mut i = 0;\n        // Loop through\
    \ the letters and check if there are any grades left\n        for letter in \"\
    ABCDEFGHI\".chars() {\n            if grade < i {\n                letter_grades.push('D-'[i\
    \ - grade]);\n            } else if grade < i + 1 {\n                letter_grades.push('C'[i\
    \ - grade - 1]);\n            } else if grade < i + 2 {\n                letter_grades.push('B'[i\
    \ - grade - 2]);\n            } else if grade < i + 3 {\n                letter_grades.push('A'[i\
    \ - grade - 3]);\n            } else if grade < i + 4 {\n                letter_grades.push('A+'[i\
    \ - grade - 4]);\n            } else {\n                letter_grades.push('E'[i\
    \ - grade]);\n            }\n            i += 1;\n        }\n    }\n\n    // Returns\
    \ the grades sorted\n    letter_grades", "    let grades_without_zeros = grades.iter().filter(|x|\
    \ x > 0).collect();\n    let grades_plus_zeros = grades.iter().filter(|x| x >\
    \ 0.0).collect();\n    let grades_minus_zeros = grades.iter().filter(|x| x < 0.0).collect();\n\
    \    let grades_plus_ones = grades.iter().filter(|x| x >= 1.0).collect();\n  \
    \  let grades_minus_ones = grades.iter().filter(|x| x <= -1.0).collect();\n  \
    \  let grades_plus_twos = grades.iter().filter(|x| x >= 2.0 && x <= 3.0).collect();\n\
    \    let grades_minus_twos = grades.iter().filter(|x| x <= -2.0 && x >= -3.0).collect();\n\
    \    let grades_plus_threes = grades.iter().filter(|x| x >= 3.0 && x <= 4.0).collect();\n\
    \    let grades_minus_threes = grades.iter().filter(|x| x <= -3.0 && x >= -4.0).collect();\n\
    \    let grades_plus_fours = grades.iter().filter(|x| x >= 4.0 && x <= 5.0).collect();\n\
    \    let grades_minus_fours = grades.iter().filter(|x| x <= -4.0 && x >= -5.0).collect();\n\
    \    let grades_plus_fives = grades.iter().filter(|x| x >= 5.0 && x <= 6.0).collect();\n\
    \    let grades_minus_fives = grades.iter().filter(|x| x <= -5.0 && x >= -6.0).collect();\n\
    \    let grades_plus_sixes = grades.iter().filter(|x| x >= 6.0 && x <= 7.0).collect();\n\
    \    let grades_minus_sixes = grades.iter().filter(|x| x <= -6.0 && x >= -7.0).collect();\n\
    \    let grades_plus_sevnes = grades.iter().filter(|x| x >= 7.0 && x <= 8.0).collect();\n\
    \    let grades_minus_sevnes = grades.iter().filter(|x| x <= -7.0 && x >= -8.0).collect();\n\
    \    let grades_plus_nines = grades.iter().filter(|x| x >= 8.0 && x <= 9.0).collect();\n\
    \    let grades_minus_nines = grades.iter().filter(|x| x <= -8.0 && x >= -9.0).collect();\n\
    \    let grades_plus_tens = grades.iter().filter(|x| x >= 9.0 && x <= 10.0).collect();\n\
    \    let grades_minus_tens = grades.iter().filter(|x| x <= -9.0 && x >= -10.0).collect();\n\
    \    let grades_plus_elevens = grades.iter().filter(|x| x >= 10.", "    let mut\
    \ grades_copy = grades.clone();\n    grades_copy.sort_unstable();\n    let mut\
    \ grade_index = 0;\n    let mut grades_sum = 0.0;\n    let mut letter_grades =\
    \ Vec::new();\n    while grade_index < grades_copy.len() {\n        let gpa =\
    \ grades_copy[grade_index];\n        if gpa > 0.0 {\n            grades_sum +=\
    \ gpa;\n        }\n        // Grade by GPA\n        if grades_sum > 4.0 {\n  \
    \          letter_grades.push(\n                String::from(\n              \
    \      match grade_index % 5 {\n                        0 => \"A+\".to_string(),\n\
    \                        1 => \"A\".to_string(),\n                        2 =>\
    \ \"A\".to_string(),\n                        3 => \"A\".to_string(),\n      \
    \                  4 => \"A\".to_string(),\n                        5 => \"A\"\
    .to_string(),\n                        _ => \"A\".to_string(),\n             \
    \       },\n                )\n            );\n            grades_sum -= 4.0;\n\
    \            grade_index += 1;\n        } else {\n            letter_grades.push(\n\
    \                String::from(\n                    match grade_index % 5 {\n\
    \                        0 => \"B+\".to_string(),\n                        1 =>\
    \ \"B\".to_string(),\n                        2 => \"B\".to_string(),\n      \
    \                  3 => \"B\".to_string(),\n                        4 => \"B\"\
    .to_string(),\n                        5 => \"B\".to_string(),\n             \
    \           _ => \"B\".to_string(),\n                    },\n                )\n\
    \            );\n            grades_sum -= 3.7;\n            grade_index += 1;\n\
    \        }\n    }\n    letter_grades", "    if grades.len() == 0 {\n        return\
    \ vec![];\n    }\n    \n    let mut grades_sorted = grades.sort_unstable();\n\
    \    let mut letter_grades: Vec<String> = vec![];\n    \n    grades_sorted.reverse();\n\
    \    \n    let mut previous_grade: f64 = grades_sorted[0];\n    for i in 1..grades_sorted.len()\
    \ {\n        let grade = grades_sorted[i];\n        if grade < previous_grade\
    \ {\n            let letter = grade_to_letter(grade);\n            letter_grades.push(letter);\n\
    \        }\n        \n        previous_grade = grade;\n    }\n    \n    letter_grades",
  "    let grade = grades[0];\n    let grades_count = grades.len();\n    let mut letter_grades:\
    \ Vec<String> = vec![\"\".to_string();];\n    let mut max_grade: f64 = grade -\
    \ 1.0;\n    let mut min_grade: f64 = grade + 1.0;\n    // Find the maximum and\
    \ minimum grade in the list \n    for i in 1..grades_count {\n        let grade_1\
    \ = grades[i];\n        if max_grade > grade_1 {\n            max_grade = grade_1;\n\
    \        }\n        if min_grade < grade_1 {\n            min_grade = grade_1;\n\
    \        }\n    }\n    for i in 0..grades_count {\n        let grade_1 = grades[i];\n\
    \        let grade_2 = grades[i + 1];\n        // If the grade is outside the\
    \ range of two grades then use the middle one.\n        if grade_1 < min_grade\
    \ || grade_2 < min_grade {\n            letter_grades.push(\"\");\n        }\n\
    \        // If the grade is between max and min grade then use the max grade.\n\
    \        else if grade_1 > max_grade && grade_2 > max_grade {\n            letter_grades.push(max_grade.to_string());\n\
    \        }\n        // If both grades are the same then use middle grade\n   \
    \     else if grade_1 == grade_2 {\n            letter_grades.push(\n        \
    \        ((grade_1 + grade_2) / 2.0).to_string(),\n            );\n        }\n\
    \        // Use max and min grade if the grades are outside those ranges\n   \
    \     else {\n            letter_grades.push(\n                (max_grade + min_grade)\
    \ / 2.0,\n            );\n        }\n    }\n    letter_grades", "    grades\n\
    \        .iter()\n        .enumerate()\n        .filter_map(|(i, grade)| {\n \
    \           let grade_div = grade / 4.0\n            Some((grade - grade_div).abs()\
    \ > 1.25 ? Some('C') : Some(grade_div))\n        })\n        .collect::<Vec<_>>()",
  "    let mut grades_iter = grades.clone().into_iter();\n    let mut letter_grades\
    \ = Vec::new();\n\n    let mut first_grade: f64 = 0.0;\n    let mut first_grade_index\
    \ = 0;\n    let mut second_grade: f64 = 0.0;\n    let mut second_grade_index =\
    \ 0;\n    let mut third_grade: f64 = 0.0;\n    let mut third_grade_index = 0;\n\
    \    let mut fourth_grade: f64 = 0.0;\n    let mut fourth_grade_index = 0;\n \
    \   let mut fifth_grade: f64 = 0.0;\n    let mut fifth_grade_index = 0;\n    let\
    \ mut sixth_grade: f64 = 0.0;\n    let mut sixth_grade_index = 0;\n\n    while\
    \ grades_iter.next().is_some() {\n        let grade = grades_iter.next().unwrap();\n\
    \n        if grade < 4.0 {\n            letter_grades.push(String::from(\"A+\"\
    ));\n        }\n\n        if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        }\n\n        if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        }\n\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        }\n\n        if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        }\n\n        if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        }\n\n        if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        }\n\n        if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        }\n\n        if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        }\n\n        if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        }\n\n        if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        }\n\n        if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        }\n\n        if grade == 0.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        }\n\n        if grade < 4.0 {\n            fourth_grade += grade;\n\
    \            fourth_grade_index += 1;\n        }\n\n        if grade > 3.7 {\n\
    \            fifth_grade += grade;\n            fifth_grade_index += 1;\n    \
    \    }\n\n        if grade > 3.3 {\n            sixth_grade += grade;\n      \
    \      sixth_grade_index += 1;\n        }\n\n        if gra", "    grades.iter().map(|x|\
    \ {\n        let mut sum = 0.0;\n        if x > 3.0 { sum += 2.0; }\n        if\
    \ x > 2.7 { sum += 1.0; }\n        if x > 2.3 { sum += 0.8; }\n        if x >\
    \ 2.0 { sum += 0.6; }\n        if x > 1.7 { sum += 0.5; }\n        if x > 1.3\
    \ { sum += 0.4; }\n        if x > 1.0 { sum += 0.3; }\n        if x > 0.7 { sum\
    \ += 0.2; }\n        if x > 0.3 { sum += 0.1; }\n        if x > 0.0 { sum += 0.0;\
    \ }\n        let mut letter = \"\";\n        if sum < 0.0 {\n            letter\
    \ = \"E\";\n        } else {\n            letter = match sum {\n             \
    \   0 => \"D-\",\n                1 => \"D\",\n                2 => \"D+\",\n\
    \                3 => \"D\",\n                4 => \"C+\",\n                5\
    \ => \"C\",\n                6 => \"C-\",\n                7 => \"C\",\n     \
    \           8 => \"B+\",\n                9 => \"B\",\n                10 => \"\
    B-\",\n                11 => \"B\",\n                12 => \"A-\",\n         \
    \       13 => \"A\",\n                14 => \"A+\",\n                _ => \"E\"\
    ,\n            }\n        }\n        letter\n    }).collect()", "    let mut letter_grades:\
    \ Vec<String> = Vec::new();\n    let gpa: Vec<f64> = grades.iter().cloned().collect();\n\
    \n    for value in grade {\n        if value < gpa.iter().min() {\n          \
    \  letter_grades.push(\"\");\n        } else if value < gpa.iter().max() {\n \
    \           let letter_grade: String = match value {\n                0...gpa.iter().min()\
    \ => &\"D-\".to_string(),\n                gpa.iter().max()..gpa.iter().min()\
    \ => &\"D+\".to_string(),\n                gpa.iter().min()..gpa.iter().max()\
    \ => &\"C\".to_string(),\n                gpa.iter().max()..gpa.iter().max() =>\
    \ &\"C+\".to_string(),\n                gpa.iter().min()..gpa.iter().max() =>\
    \ &\"B\".to_string(),\n                gpa.iter().max()..gpa.iter().max() => &\"\
    B+\".to_string(),\n                gpa.iter().min()..gpa.iter().max() => &\"A\"\
    .to_string(),\n                gpa.iter().max()..gpa.iter().max() => &\"A+\".to_string(),\n\
    \                gpa.iter().min()..gpa.iter().max() => &\"A\".to_string(),\n \
    \               _ => \"\".to_string(),\n            };\n            letter_grades.push(letter_grade);\n\
    \        } else {\n            let letter_grade: String = match value {\n    \
    \            0...gpa.iter().min() => &\"E\".to_string(),\n                gpa.iter().max()..gpa.iter().min()\
    \ => &\"D\".to_string(),\n                gpa.iter().min()..gpa.iter().max() =>\
    \ &\"D+\".to_string(),\n                gpa.iter().min()..gpa.iter().max() =>\
    \ &\"C\".to_string(),\n                gpa.iter().max()..gpa.iter().max() => &\"\
    C+\".to_string(),\n                gpa.iter().min()..gpa.iter().max() => &\"B\"\
    .to_string(),\n                gpa.iter().max()..gpa.iter().max() => &\"B+\".to_string(),\n\
    \                gpa.iter().min()..gpa.iter().max() => &\"A\".to_string(),\n \
    \               gpa.iter().max()..gpa.iter().max() => &\"A+\".to_string(),\n \
    \               gpa.iter().min()..gpa.iter().max() => &\"A\".to_string(),\n  \
    \              _ => \"\".to_string(),\n            };\n            letter_grades.push(letter_grade);\n\
    \        }\n    }\n    return ", "    let mut grades_vec: Vec<String> = Vec::new();\n\
    \    grades.iter().for_each(|x| {\n        if x <= 3.5 {\n            grades_vec.push(\"\
    A+\".to_string());\n        } else if x <= 3.0 {\n            grades_vec.push(\"\
    A\".to_string());\n        } else if x <= 2.7 {\n            grades_vec.push(\"\
    B+\".to_string());\n        } else if x <= 2.3 {\n            grades_vec.push(\"\
    B\".to_string());\n        } else if x <= 2.0 {\n            grades_vec.push(\"\
    B-\".to_string());\n        } else if x <= 1.7 {\n            grades_vec.push(\"\
    C+\".to_string());\n        } else if x <= 1.3 {\n            grades_vec.push(\"\
    C\".to_string());\n        } else if x <= 1.0 {\n            grades_vec.push(\"\
    C-\".to_string());\n        } else if x <= 0.7 {\n            grades_vec.push(\"\
    D+\".to_string());\n        } else if x <= 0.3 {\n            grades_vec.push(\"\
    D\".to_string());\n        } else if x <= 0.0 {\n            grades_vec.push(\"\
    D-\".to_string());\n        } else {\n            grades_vec.push(\"E\".to_string());\n\
    \        }\n    });\n    return grades_vec;", "    let mut grades_copy = grades.clone();\n\
    \    grades_copy.sort();\n    let mut letter_grades: Vec<String> = vec![];\n\n\
    \    let mut prev_gpa = -1.0_f64;\n    let mut gpa = -1.0_f64;\n    let mut letter_grade\
    \ = \"A+\"; // default letter grade\n    let mut count = 0;\n\n    // iterate\
    \ through grades\n    for grade in grades_copy {\n        // if current gpa =\
    \ 0\n        if gpa <= 0.0_f64 {\n            prev_gpa = grade;\n            gpa\
    \ = 0.0;\n        } else {\n            // else if current gpa > 0 but < current\
    \ gpa\n            if gpa > 0.0_f64 && gpa < prev_gpa {\n                // check\
    \ if current gpa is more than previous gpa\n                if gpa > prev_gpa\
    \ {\n                    // if gpa > previous gpa, add '+'\n                 \
    \   letter_grade = \"A+\".to_string();\n                } else {\n           \
    \         // else add '-' since gpa < previous gpa\n                    letter_grade\
    \ = \"A-\".to_string();\n                }\n            } else {\n           \
    \     // else add '-' since gpa < previous gpa\n                letter_grade =\
    \ \"B-\".to_string();\n            }\n        }\n\n        // add grade\n    \
    \    letter_grades.push(letter_grade);\n        // reset letter grade\n      \
    \  letter_grade = \"A+\".to_string();\n        // increment count\n        count\
    \ += 1;\n\n        // update gpa and previous gpa\n        gpa += grade;\n   \
    \     prev_gpa = grade;\n    }\n\n    // if grades array was empty\n    if count\
    \ == 0 {\n        // add letter grade\n        letter_grades.push(letter_grade);\n\
    \    }\n\n    // return list of letter grades\n    letter_grades", "    let mut\
    \ grades_str = Vec::new();\n    grades.iter().for_each(|grade| {\n        grades_str.push(\n\
    \            match grade {\n                4.0  => \"A+\".to_string(),\n    \
    \            3.7  => \"A\".to_string(),\n                3.3  => \"A\".to_string(),\n\
    \                3.0  => \"B+\".to_string(),\n                2.7  => \"B\".to_string(),\n\
    \                2.3  => \"B\".to_string(),\n                2.0  => \"C+\".to_string(),\n\
    \                1.7  => \"C\".to_string(),\n                1.3  => \"C\".to_string(),\n\
    \                1.0  => \"D+\".to_string(),\n                0.7  => \"D\".to_string(),\n\
    \                0.0  => \"D-\".to_string(),\n                0.0  => \"E\".to_string(),\n\
    \                _ => \"\".to_string(),\n            }\n        );\n    });\n\
    \    grades_str", "    let mut total_gpa = grades.sum();\n    let mut letter_grades\
    \ = vec![\"\"; grade_limit];\n    for i in 0..grade_limit {\n        let mut grade_point\
    \ = grades.len() as f64 * i / grade_limit;\n        while grade_point < total_gpa{\n\
    \            grade_point += grades.len() as f64;\n        }\n        letter_grades[i]\
    \ = grade_point.to_string();\n    }\n    letter_grades", "    let mut grades_map\
    \ = HashMap::new();\n\n    // add all the grades in `grades` to a map where the\
    \ key is the grade and the value \n    // is the numerical grade\n    for grade\
    \ in grades.iter() {\n        grades_map.insert(grade, grade - f64::from(grade));\n\
    \    }\n\n    // convert the map to a vector\n    let mut grades_vector = Vec::new();\n\
    \    grades_map.iter().for_each(|(_, value)| {\n        grades_vector.push(value);\n\
    \    });\n\n    // calculate the final grade for each student\n    let mut result\
    \ = Vec::new();\n    for grade in grades_vector {\n        let mut final_grade\
    \ = String::new();\n\n        // the grade is negative if the grade is below 3.0;\
    \ \n        // the grade is negative if the grade is between 2.9 and 3.0\n   \
    \     let negative = grade < f64::from(3.0);\n\n        // the grade is greater\
    \ than 2.0 and the grade is less or equal to 3.0\n        let negative_between\
    \ = grade > f64::from(2.9)\n                             && grade <= f64::from(3.0);\n\
    \n        // if the grade is between 2.9 and 3.0 and the grade is greater than\
    \ 2.0, \n        // then we output B+ if the grade is less than 3.0 then we output\
    \ B- \n        // otherwise, output the letter grade\n        if negative_between\
    \ {\n            final_grade.push_str(\"B+\");\n        } else if negative {\n\
    \            final_grade.push_str(\"B-\");\n        } else {\n            final_grade.push_str(\"\
    B\");\n        }\n\n        result.push(final_grade);\n    }\n\n    result", " \
    \   let mut grades_copy = grades;\n    for i in 0..grades_copy.len() {\n     \
    \   let value = grades_copy[i];\n        let gpa = grades_copy[..i].iter().sum();\n\
    \        let letter;\n        if gpa < 4.0 {\n            letter = \"E\";\n  \
    \      } else if gpa < 3.7 {\n            letter = \"A\";\n        } else if gpa\
    \ < 3.3 {\n            letter = \"A-\";\n        } else if gpa < 3.0 {\n     \
    \       letter = \"B+\";\n        } else if gpa < 2.7 {\n            letter =\
    \ \"B\";\n        } else if gpa < 2.3 {\n            letter = \"B-\";\n      \
    \  } else if gpa < 2.0 {\n            letter = \"C+\";\n        } else if gpa\
    \ < 1.7 {\n            letter = \"C\";\n        } else if gpa < 1.3 {\n      \
    \      letter = \"C-\";\n        } else if gpa < 1.0 {\n            letter = \"\
    D+\";\n        } else if gpa < 0.7 {\n            letter = \"D\";\n        } else\
    \ {\n            letter = \"D-\";\n        }\n        grades_copy.swap(i, grades_copy.len()\
    \ - 1, &letter);\n    }\n    grades_copy", "    \n    // Initialization\n    let\
    \ mut grades_str = \"\".to_vec();\n    let mut letter_grade = \"\".to_vec();\n\
    \    let mut gps = vec![4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0];\n \
    \   \n    // Loop through the grades and calculate the letter grade\n    for grade\
    \ in grades {\n        if gps.iter().all(|item| grade >= item) {\n           \
    \ // Grade is greater than all the gpas in the list\n            letter_grade\
    \ += \"A+\";\n            gps.retain(|item| grade >= item);\n        } else {\n\
    \            // Grade is not greater than all the gpas in the list\n         \
    \   letter_grade += \"A-\";\n            gps.retain(|item| grade <= item);\n \
    \       }\n    }\n\n    grades_str.append(&letter_grade);\n    grades_str", " \
    \   grades\n    .iter()\n    .enumerate()\n    .map(|(idx, grade)| {\n       \
    \ match grade {\n            0.0 => match idx {\n                0 => \"E\",\n\
    \                _ => \"D-\",\n            },\n            _ => match idx {\n\
    \                0 => \"D+\",\n                _ => \"B-\",\n            },\n\
    \            1 => match idx {\n                0 => \"C+\",\n                _\
    \ => \"B-\",\n            },\n            2 => match idx {\n                0\
    \ => \"B+\",\n                _ => \"B-\",\n            },\n            3 => match\
    \ idx {\n                0 => \"B-\",\n                _ => \"B-\",\n        \
    \    },\n            4 => match idx {\n                0 => \"B-\",\n        \
    \        _ => \"B\",\n            },\n            5 => match idx {\n         \
    \       0 => \"B\",\n                _ => \"B-\",\n            },\n          \
    \  6 => match idx {\n                0 => \"B\",\n                _ => \"B\",\n\
    \            },\n            7 => match idx {\n                0 => \"B\",\n \
    \               _ => \"B+\",\n            },\n            8 => match idx {\n \
    \               0 => \"B+\",\n                _ => \"B\",\n            },\n  \
    \          9 => match idx {\n                0 => \"B\",\n                _ =>\
    \ \"B+\",\n            },\n            _ => \"A+\",\n        }\n    })\n    .collect()",
  "    let grades_min = grades.min();\n    let grades_max = grades.max();\n    let\
    \ mut letter_grades: Vec<String> = vec![];\n    if grades_min < 4.0 {\n      \
    \  letter_grades.push(\"A+\");\n    } else if grades_min < 3.7 {\n        letter_grades.push(\"\
    A\");\n    } else if grades_min < 3.3 {\n        letter_grades.push(\"A-\");\n\
    \    } else if grades_min < 3.0 {\n        letter_grades.push(\"B+\");\n    }\
    \ else if grades_min < 2.7 {\n        letter_grades.push(\"B\");\n    } else if\
    \ grades_min < 2.3 {\n        letter_grades.push(\"B-\");\n    } else if grades_min\
    \ < 2.0 {\n        letter_grades.push(\"C+\");\n    } else if grades_min < 1.7\
    \ {\n        letter_grades.push(\"C\");\n    } else if grades_min < 1.3 {\n  \
    \      letter_grades.push(\"C-\");\n    } else if grades_min < 1.0 {\n       \
    \ letter_grades.push(\"D+\");\n    } else if grades_min < 0.7 {\n        letter_grades.push(\"\
    D\");\n    } else if grades_min < 0.0 {\n        letter_grades.push(\"D-\");\n\
    \    } else {\n        letter_grades.push(\"E\");\n    }\n    for i in (0..grades.len()\
    \ - 1).rev() {\n        let grade = grades[i];\n        if grade < 4.0 {\n   \
    \         letter_grades.push(\"A+\");\n        } else if grade < 3.7 {\n     \
    \       letter_grades.push(\"A\");\n        } else if grade < 3.3 {\n        \
    \    letter_grades.push(\"A-\");\n        } else if grade < 3.0 {\n          \
    \  letter_grades.push(\"B+\");\n        } else if grade < 2.7 {\n            letter_grades.push(\"\
    B\");\n        } else if grade < 2.3 {\n            letter_grades.push(\"B-\"\
    );\n        } else if grade < 2.0 {\n            letter_grades.push(\"C+\");\n\
    \        } else if grade < 1.7 {\n            letter_grades.push(\"C\");\n   \
    \     } else if grade < 1.3 {\n            letter_grades.push(\"C-\");\n     \
    \   } else if grade < 1.0 {\n            letter_grades.push(\"D+\");\n       \
    \ } else if grade < 0.7 {\n            letter_grades.push(\"D\");\n        } else\
    \ if grade < 0.0 {\n            letter_grades.push(\"D-\");\n        } else {\n\
    \            letter_grades.push(\"E\");\n        }\n    }\n    letter_grades",
  "    grades.iter().map(|grade| {\n        let gpa = grade as f64;\n        match\
    \ gpa {\n            4.0 => \"+\",\n            3.7 => \"+\",\n            3.3\
    \ => \"+\",\n            3.0 => \"-\",\n            2.7 => \"-\",\n          \
    \  2.3 => \"-\",\n            2.0 => \"-\",\n            1.7 => \"C\",\n     \
    \       1.3 => \"C\",\n            1.0 => \"D\",\n            0.7 => \"D\",\n\
    \            0.0 => \"E\",\n            _ => \"\".to_string(),\n        }\n  \
    \  }).collect()", "    let mut letter_grades = Vec::new();\n    let max_grade_point\
    \ = grades.iter().max();\n    for grade in grades {\n        if grade <= max_grade_point\
    \ {\n            letter_grades.push(format!(\"{}+\", grade));\n        } else\
    \ {\n            letter_grades.push(format!(\"{}\", grade));\n        }\n    }\n\
    \    letter_grades", "    let mut grade_letters = Vec::new();\n    for grade in\
    \ grades {\n        match grade {\n            0..=3 => grade_letters.push(\"\
    E\"),\n            4..=6 => grade_letters.push(\"A+\"),\n            7..=9 =>\
    \ grade_letters.push(\"A\"),\n            10..=12 => grade_letters.push(\"A-\"\
    ),\n            13..=16 => grade_letters.push(\"B+\"),\n            17..=19 =>\
    \ grade_letters.push(\"B\"),\n            20..=24 => grade_letters.push(\"B-\"\
    ),\n            25..=29 => grade_letters.push(\"C+\"),\n            30..=34 =>\
    \ grade_letters.push(\"C\"),\n            35..=39 => grade_letters.push(\"C-\"\
    ),\n            40..=44 => grade_letters.push(\"D+\"),\n            45..=49 =>\
    \ grade_letters.push(\"D\"),\n            50..=54 => grade_letters.push(\"D-\"\
    ),\n            _ => grade_letters.push(\"F\"),\n        }\n    }\n    grade_letters",
  "    let mut grades_letters = Vec::new();\n    let gpa: f64 = grades.sum();\n  \
    \  let mut grade: f64 = grades.len();\n    while grade != 0 {\n        if grade\
    \ % 3.0 == 0 {\n            grades_letters.push('a');\n            grade /= 3.0;\n\
    \        } else if grade % 3.0 == 1.0 && grade > 1.0 {\n            grades_letters.push('a');\n\
    \            grade /= 3.0;\n        } else if grade % 3.0 == 1.0 && grade < 1.0\
    \ {\n            grades_letters.push('b');\n            grade /= 3.0;\n      \
    \  } else if grade % 3.0 == 2.0 && grade > 1.0 {\n            grades_letters.push('b');\n\
    \            grade /= 3.0;\n        } else if grade % 3.0 == 2.0 && grade < 1.0\
    \ {\n            grades_letters.push('c');\n            grade /= 3.0;\n      \
    \  } else if grade % 3.0 == 3.0 && grade > 1.0 {\n            grades_letters.push('c');\n\
    \            grade /= 3.0;\n        } else if grade % 3.0 == 3.0 && grade < 1.0\
    \ {\n            grades_letters.push('d');\n            grade /= 3.0;\n      \
    \  } else {\n            grades_letters.push('e');\n            grade /= 3.0;\n\
    \        }\n    }\n    grades_letters.push(format!(\"{:?}\", gpa));\n    grades_letters",
  "    let mut grades_vec: Vec<String> = vec![];\n    \n    if grades.len() != 5 {\n\
    \        return grades_vec;\n    }\n    \n    // Create a HashMap using key as\
    \ GPA value and value as letter grade\n    let mut letter_grade_map: HashMap<f64,\
    \ &str> = HashMap::new();\n    letter_grade_map.insert(0.0, \"E\");\n    \n  \
    \  // Create empty array to store grades\n    let mut temp_array: Vec<f64> = vec![];\n\
    \    \n    for gpa: f64 in grades.iter() {\n        // Check if the current GPA\
    \ is smaller than the smallest GPA \n        // we have. If not then the grade\
    \ is E\n        if gpa > min(&mut temp_array.iter().min().unwrap()) {\n      \
    \      letter_grade_map.insert(gpa, \"E\");\n        }\n        \n        // Check\
    \ if the GPA is in the map using the get_value method and \n        // if its\
    \ value is not E then add the GPA and its value to the array\n        if !letter_grade_map.contains_key(&gpa)\
    \ {\n            letter_grade_map.insert(gpa, get_value(gpa));\n        }\n  \
    \  }\n    \n    // For each GPA in the HashMap sort the GPA from smallest to largest\n\
    \    // and print out the letter grade associated with that GPA\n    for (key,\
    \ value) in letter_grade_map.iter() {\n        temp_array.push(key);\n    }\n\
    \    temp_array.sort_unstable();\n    \n    for val in temp_array {\n        grades_vec.push(letter_grade_map.get(val).unwrap());\n\
    \    }\n    \n    return grades_vec;", "    let mut letter_grades: Vec<String>\
    \ = Vec::new();\n    let mut current_grade: f64 = grades.first().unwrap();\n\n\
    \    for grade in grades {\n        if grade < current_grade {\n            letter_grades.push(format!(\"\
    {}-\", current_grade));\n            current_grade = grade;\n        }\n\n   \
    \     letter_grades.push(format!(\"{}+\", current_grade));\n        current_grade\
    \ = grade;\n    }\n\n    letter_grades.push(format!(\"{}\", current_grade));\n\
    \n    letter_grades", "    let mut grades_map = HashMap::new();\n    let mut total_grade:\
    \ f64 = 0.0;\n    let mut letter_grade: Vec<String> = Vec::new();\n\n    for grade\
    \ in grades {\n        total_grade += grade;\n        let grade = grades_map.entry(grade).or_insert(0.0);\n\
    \        grades_map.entry(grade).or_insert(grade);\n\n        if total_grade >=\
    \ 4.0 {\n            letter_grade.push(\"A+\");\n            total_grade -= 4.0;\n\
    \        } else if total_grade > 3.0 {\n            letter_grade.push(\"B+\");\n\
    \            total_grade -= 3.0;\n        } else if total_grade > 2.0 {\n    \
    \        letter_grade.push(\"C+\");\n            total_grade -= 2.0;\n       \
    \ } else if total_grade > 1.0 {\n            letter_grade.push(\"D+\");\n    \
    \        total_grade -= 1.0;\n        } else if total_grade > 0.0 {\n        \
    \    letter_grade.push(\"D-\");\n            total_grade -= 0.0;\n        } else\
    \ {\n            letter_grade.push(\"E\");\n            total_grade = 0.0;\n \
    \       }\n    }\n    return letter_grade;", "    grades\n        .iter()\n  \
    \      .enumerate()\n        .filter_map(|(i, grade)| {\n            let gpa =\
    \ grade;\n            let letter = match gpa {\n                0.0 <= gpa &&\
    \ gpa <= 3.0 => \"A+\",\n                3.0 <= gpa && gpa <= 4.0 => \"A\",\n\
    \                4.0 <= gpa && gpa <= 5.0 => \"A-\",\n                5.0 <= gpa\
    \ && gpa <= 6.0 => \"B+\",\n                6.0 <= gpa && gpa <= 7.0 => \"B\"\
    ,\n                7.0 <= gpa && gpa <= 8.0 => \"B-\",\n                8.0 <=\
    \ gpa && gpa <= 9.0 => \"C+\",\n                9.0 <= gpa && gpa <= 10.0 => \"\
    C\",\n                10.0 <= gpa && gpa <= 11.0 => \"C-\",\n                11.0\
    \ <= gpa && gpa <= 12.0 => \"D+\",\n                12.0 <= gpa && gpa <= 13.0\
    \ => \"D\",\n                13.0 <= gpa && gpa <= 14.0 => \"D-\",\n         \
    \       _ => \"E\",\n            };\n            (i, grade as f64, letter)\n \
    \       })\n        .collect::<Vec<_>>()", "    let mut letter_grades = vec![];\n\
    \    let mut gpa = grades.iter().sum();\n\n    for grade in grades.iter() {\n\
    \        if gpa >= grade {\n            letter_grades.push(&format!(\"{}+\", gpa));\n\
    \            gpa -= grade;\n        } else {\n            letter_grades.push(&format!(\"\
    {}\", grade));\n        }\n    }\n    letter_grades.push(&format!(\"{}\", gpa));\n\
    \    letter_grades", "    // Your code goes here\n    \n    return vec![\"\".to_string()]\
    \ + grades.iter().cloned().take(5).map(|x| {\n        match x {\n            0.0\
    \ => \"D\".to_string(),\n            0.1 => \"C-\".to_string(),\n            0.2\
    \ => \"B-\".to_string(),\n            0.3 => \"B-\".to_string(),\n           \
    \ 0.4 => \"B-\".to_string(),\n            0.5 => \"B-\".to_string(),\n       \
    \     0.6 => \"B-\".to_string(),\n            0.7 => \"B-\".to_string(),\n   \
    \         0.8 => \"B-\".to_string(),\n            0.9 => \"B-\".to_string(),\n\
    \            1.0 => \"B+\".to_string(),\n            1.1 => \"B+\".to_string(),\n\
    \            1.2 => \"B+\".to_string(),\n            1.3 => \"B+\".to_string(),\n\
    \            1.4 => \"B+\".to_string(),\n            1.5 => \"B+\".to_string(),\n\
    \            1.6 => \"B+\".to_string(),\n            1.7 => \"B+\".to_string(),\n\
    \            1.8 => \"B+\".to_string(),\n            1.9 => \"B+\".to_string(),\n\
    \            2.0 => \"C\".to_string(),\n            2.1 => \"C\".to_string(),\n\
    \            2.2 => \"C\".to_string(),\n            2.3 => \"C\".to_string(),\n\
    \            2.4 => \"C\".to_string(),\n            2.5 => \"C\".to_string(),\n\
    \            2.6 => \"C\".to_string(),\n            2.7 => \"C\".to_string(),\n\
    \            2.8 => \"C\".to_string(),\n            2.9 => \"C\".to_string(),\n\
    \            3.0 => \"C\".to_string(),\n            3.1 => \"C\".to_string(),\n\
    \            3.2 => \"C\".to_string(),\n            3.3 => \"C\".to_string(),\n\
    \            3.4 => \"C\".to_string(),\n            3.5 => \"C\".to_string(),\n\
    \            3.6 => \"C\".to_string(),\n            3.7 => \"C\".to_string(),\n\
    \            3.8 => \"C\".to_string(),\n            3.9 => \"C\".to_string(),\n\
    \            4.0 => \"C\".to_string(),\n            4.1 => \"C\".to_string(),\n\
    \            4.2 => \"C\".to_string(),\n            4.3 => \"C\".to_string(),\n\
    \            4.4 => \"C\".to_string(),\n            4.5 => \"C\".to_string(),\n\
    \            4.6 => \"C\".to_string(),\n            4.7 => \"C\".to_string(),\n\
    \            4.8 => \"C\".to_string(),\n            4.9 => \"C\".to_string(),\n\
    \            5.0 => \"C\".to_string(),\n            5.1 => \"C\".to_string(),",
  "    let mut grades_letters = Vec::new();\n    let mut grade_sum: f64 = 0.0;\n \
    \   let mut lowest_grade: f64 = grades.iter().min().unwrap();\n    let mut highest_grade:\
    \ f64 = grades.iter().max().unwrap();\n    let mut current_grade: f64 = grades.iter().next().unwrap();\n\
    \    let mut current_letter: &'static str = String::from(\"D\");\n    \n    for\
    \ grade in grades.iter() {\n        grade_sum += grade;\n        if grade_sum\
    \ > highest_grade {\n            grade_sum = highest_grade;\n            highest_grade\
    \ = grade;\n        }\n        if grade_sum < lowest_grade {\n            grade_sum\
    \ = lowest_grade;\n            lowest_grade = grade;\n        }\n    }\n    \n\
    \    for grade in grades.iter() {\n        if current_grade - grade > 0.0 && current_letter\
    \ != \"D\" {\n            current_letter = \"D\";\n        }\n        if current_grade\
    \ - grade <= 0.0 && current_letter != \"E\" {\n            current_letter = \"\
    E\";\n        }\n        if current_grade - grade > 0.0 && current_letter != \"\
    D\" && current_letter != \"E\" {\n            if grade - current_grade > 0.0 {\n\
    \                current_letter = String::from(\"C\");\n            }\n      \
    \      else if grade - current_grade <= 0.0 {\n                current_letter\
    \ = String::from(\"B\");\n            }\n            else {\n                current_letter\
    \ = String::from(\"A\");\n            }\n        }\n        current_grade -= grade;\n\
    \        grades_letters.push(current_letter);\n    }\n    grades_letters.reverse();\n\
    \    return grades_letters;", "    let mut grades_copy = grades.clone();\n   \
    \ grades_copy.pop();\n    let mut letter_grades = vec![];\n    let grades_len\
    \ = grades.len();\n    \n    // find the index for the max value in the given\
    \ vector\n    let max_index = get_max_index(grades_copy);\n    \n    grades_copy.sort_unstable();\n\
    \    \n    // if the max is 0, it has to be the last element\n    if max_index\
    \ == grades_len - 1 {\n        letter_grades.push(vec![\"E\"]);\n        return\
    \ letter_grades;\n    }\n    \n    let current_index = 0;\n    let mut current_grade\
    \ = grades_copy[current_index];\n    \n    let mut total_grade = current_grade;\n\
    \    \n    while current_index < grades_len - 1 {\n        if current_index ==\
    \ max_index {\n            letter_grades.push(vec![current_grade as char]);\n\
    \            break;\n        }\n        \n        current_grade += grades_copy[current_index\
    \ + 1];\n        \n        total_grade += grades_copy[current_index + 1];\n  \
    \      \n        current_index += 1;\n    }\n    \n    for grade in &mut total_grade\
    \ {\n        letter_grades.push(vec![grade as char]);\n    }\n    \n    letter_grades",
  "    \n    // Get the min and max of the given vector.\n    let max_grade = grades.iter().max().unwrap();\n\
    \    let min_grade = grades.iter().min().unwrap();\n\n    // If the vector's values\
    \ are the same, just return an empty vector.\n    if max_grade == min_grade {\n\
    \        return vec![];\n    }\n\n    // Set the length of the grade vector.\n\
    \    let len_grade = grades.len();\n\n    // Create an empty string.\n    let\
    \ mut letter_grades = vec![];\n\n    // Add \"E\" at the end of the string.\n\
    \    letter_grades.push('E');\n\n    // Iterate over each grade.\n    for grade\
    \ in grades {\n\n        // Iterate over each grade and each grade length.\n \
    \       for grade_len in 0..len_grade {\n\n            // Check if the grade is\
    \ greater than or equal to the given grade.\n            if grade >= grade_len\
    \ {\n\n                // Iterate over each grade and add letter grade for each\
    \ of the grade length.\n                for grade_num in 0..grade_len - grade\
    \ {\n                    letter_grades.push(format!(\"{:2.0f}\", grade_num + grade\
    \ + 1));\n                }\n\n                // Break the loop since we have\
    \ found the grade.\n                break;\n            }\n        }\n    }\n\n\
    \    // Return the letter grades vector.\n    letter_grades", "    let grades_sum\
    \ = grades.iter().sum();\n    if grades_sum < 0.5 {\n        vec![format!(\"E\"\
    )]\n    } else if grades_sum > 1.0 {\n        vec![format!(\"D-\")]\n    } else\
    \ if grades_sum == 0.0 {\n        vec![format!(\"D\")]\n    } else {\n       \
    \ let mut letter_grades = vec![];\n        for grade in grades {\n           \
    \ if grade > 1.0 {\n                break;\n            }\n            letter_grades.push(format!(\"\
    {}+\", grade + 0.5));\n        }\n        for grade in grades {\n            if\
    \ grade < 0.0 {\n                break;\n            }\n            letter_grades.push(format!(\"\
    {}\", grade - 0.5));\n        }\n        letter_grades\n    }", "    let mut letter_grade\
    \ = vec![];\n    for grade in grades {\n        letter_grade.push(match grade\
    \ {\n            0.0 => \"D-\",\n            0.1 => \"D\",\n            0.2 =>\
    \ \"D+\",\n            0.3 => \"D+\",\n            0.4 => \"D\",\n           \
    \ 0.5 => \"D-\",\n            0.6 => \"D+\",\n            0.7 => \"D+\",\n   \
    \         0.8 => \"D\",\n            0.9 => \"D+\",\n            1.0 => \"D\"\
    ,\n            _ => match grade {\n                0.1 <= grade <= 1.3 => \"B-\"\
    ,\n                1.3 <= grade <= 1.7 => \"B-\",\n                1.7 <= grade\
    \ <= 2.0 => \"B-\",\n                2.0 <= grade <= 2.3 => \"B-\",\n        \
    \        2.3 <= grade <= 2.7 => \"B-\",\n                2.7 <= grade <= 3.0 =>\
    \ \"B-\",\n                3.0 <= grade <= 3.3 => \"B-\",\n                3.3\
    \ <= grade <= 3.7 => \"B-\",\n                3.7 <= grade <= 4.0 => \"B-\",\n\
    \                4.0 <= grade <= 4.3 => \"B-\",\n                4.3 <= grade\
    \ => \"B-\",\n                _ => \"B-\",\n            },\n        });\n    }\n\
    \    letter_grade", "    let mut grades_string = Vec::new();\n    for grade in\
    \ grades.iter() {\n        if grade >= 4.0 { grades_string.push(\"A+\"); }\n \
    \       else if grade > 3.7 { grades_string.push(\"A\"); }\n        else if grade\
    \ > 3.3 { grades_string.push(\"A-\"); }\n        else if grade > 3.0 { grades_string.push(\"\
    B+\"); }\n        else if grade > 2.7 { grades_string.push(\"B\"); }\n       \
    \ else if grade > 2.3 { grades_string.push(\"B-\"); }\n        else if grade >\
    \ 2.0 { grades_string.push(\"C+\"); }\n        else if grade > 1.7 { grades_string.push(\"\
    C\"); }\n        else if grade > 1.3 { grades_string.push(\"C-\"); }\n       \
    \ else if grade > 1.0 { grades_string.push(\"D+\"); }\n        else if grade >\
    \ 0.7 { grades_string.push(\"D\"); }\n        else if grade > 0.0 { grades_string.push(\"\
    D-\"); }\n        else { grades_string.push(\"E\"); }\n    }\n    return grades_string;",
  "    \n    let mut grades_vec = Vec::new();\n    grades_vec.push(\"\");\n    \n\
    \    let mut prev_grade = -1.0f64;\n    let mut max_grade = -1.0f64;\n    for\
    \ grade in grades {\n        if grade < prev_grade {\n            grades_vec.push(\"\
    \");\n            prev_grade = grade;\n        } else if grade > max_grade {\n\
    \            max_grade = grade;\n        }\n        grades_vec.push(format!(\"\
    {:+}\", (grade - prev_grade) as f64 as String));\n        prev_grade = grade;\n\
    \    }\n    if max_grade > 0.0f64 {\n        grades_vec.push(format!(\"{:+}\"\
    , max_grade as f64 as String));\n    }\n    grades_vec", "    let mut grades_iter\
    \ = grades.iter();\n    let mut grades: Vec<String> = vec![];\n    let max_val\
    \ = grades.max();\n    while grades_iter.any() && grades_iter.next().unwrap()\
    \ >= max_val {\n        grades.push(String::from(\"D-\"));\n    }\n    if grades_iter.any()\
    \ && grades_iter.next().unwrap() < max_val {\n        grades.push(String::from(\"\
    E\"));\n    }\n    grades_iter.for_each(|x| {\n        if x <= 3.0 {\n       \
    \     grades.push(String::from(\"A+\"));\n        }\n        if x > 3.0 && x <=\
    \ 3.7 {\n            grades.push(String::from(\"A\"));\n        }\n        if\
    \ x > 3.7 && x <= 3.3 {\n            grades.push(String::from(\"A-\"));\n    \
    \    }\n        if x > 3.3 && x <= 3.0 {\n            grades.push(String::from(\"\
    B+\"));\n        }\n        if x > 3.0 && x <= 3.7 {\n            grades.push(String::from(\"\
    B\"));\n        }\n        if x > 3.7 && x <= 3.3 {\n            grades.push(String::from(\"\
    B-\"));\n        }\n        if x > 3.3 && x <= 3.0 {\n            grades.push(String::from(\"\
    C+\"));\n        }\n        if x > 3.0 && x <= 3.7 {\n            grades.push(String::from(\"\
    C\"));\n        }\n        if x > 3.7 && x <= 3.3 {\n            grades.push(String::from(\"\
    C-\"));\n        }\n        if x > 3.3 && x <= 3.0 {\n            grades.push(String::from(\"\
    D+\"));\n        }\n        if x > 3.0 && x <= 3.7 {\n            grades.push(String::from(\"\
    D\"));\n        }\n        if x > 3.7 && x <= 3.3 {\n            grades.push(String::from(\"\
    D-\"));\n        }\n    })\n    grades", "    let mut grades_strings = Vec::new();\n\
    \    for i in grades.iter() {\n        let i = i as f64;\n        grades_strings.push((\n\
    \            if((i % 4.0) == 0.0 && i != 0.0 || i >= 0.0 && (i % 3.0) == 0.0 &&\
    \ i != 0.0\n                || (i % 3.0) == 0.0 && i != 0.0 || (i % 2.0) == 0.0\
    \ && i != 0.0\n                || (i % 2.0) == 0.0 && i != 0.0 || (i % 1.0) ==\
    \ 0.0 && i != 0.0\n                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0)\
    \ == 0.0 && i != 0.0\n                || (i % 0.7) == 0.0 && i != 0.0 || (i %\
    \ 0.7) == 0.0 && i != 0.0\n                || (i % 1.0) == 0.0 && i != 0.0 ||\
    \ (i % 1.0) == 0.0 && i != 0.0\n                || (i % 1.0) == 0.0 && i != 0.0\
    \ || (i % 1.0) == 0.0 && i != 0.0\n                || (i % 1.0) == 0.0 && i !=\
    \ 0.0 || (i % 1.0) == 0.0 && i != 0.0\n                || (i % 1.0) == 0.0 &&\
    \ i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n                || (i % 1.0) == 0.0\
    \ && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n                || (i % 1.0) ==\
    \ 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n                || (i % 1.0)\
    \ == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n                || (i %\
    \ 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n                ||\
    \ (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n             \
    \   || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n        \
    \        || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n   \
    \             || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && i != 0.0 || (i % 1.0) == 0.0 && i != 0.0\n\
    \                || (i % 1.0) == 0.0 && ", "    let mut letter_grades = Vec::new();\n\
    \    for grade in grades {\n        letter_grades.push(match grade {\n       \
    \     4.0 => \"A+\".to_string(),\n            3.7 => \"A\".to_string(),\n    \
    \        3.3 => \"A- \".to_string(),\n            3.0 => \"B+\".to_string(),\n\
    \            2.7 => \"B\".to_string(),\n            2.3 => \"B-\".to_string(),\n\
    \            2.0 => \"C+\".to_string(),\n            1.7 => \"C\".to_string(),\n\
    \            1.3 => \"C-\".to_string(),\n            1.0 => \"D+\".to_string(),\n\
    \            0.7 => \"D\".to_string(),\n            0.0 => \"D-\".to_string(),\n\
    \            0.0 => \"E\".to_string(),\n            _ => \"E\".to_string()\n \
    \       });\n    }\n    letter_grades", "    grades\n        .iter()\n       \
    \ .map(|x| {\n            if x >= 4.0 {\n                \"A+\"\n            }\
    \ else if x >= 3.7 {\n                \"A\"\n            } else if x >= 3.3 {\n\
    \                \"A-\"\n            } else if x >= 3.0 {\n                \"\
    B+\"\n            } else if x >= 2.7 {\n                \"B\"\n            } else\
    \ if x >= 2.3 {\n                \"B-\"\n            } else if x >= 2.0 {\n  \
    \              \"C+\"\n            } else if x >= 1.7 {\n                \"C\"\
    \n            } else if x >= 1.3 {\n                \"C-\"\n            } else\
    \ if x >= 1.0 {\n                \"D+\"\n            } else if x >= 0.7 {\n  \
    \              \"D\"\n            } else if x >= 0.0 {\n                \"D-\"\
    \n            } else if x == 0.0 {\n                \"E\"\n            } else\
    \ {\n                \"\"\n            }\n        })\n        .collect()", " \
    \   let mut letter_grades = vec![String::new(); grades.len()];\n    let mut total_sum:\
    \ f64 = 0.0;\n    for grade in grades {\n        total_sum += grade;\n       \
    \ for index in range(grades.len()) {\n            if grade < grades[index] {\n\
    \                break;\n            }\n            letter_grades[index] += &str::from_utf8(&\"\
    FDCBA+\").unwrap();\n        }\n    }\n    for index in range(grades.len()) {\n\
    \        let grade = grades[index];\n        letter_grades[index] = &str::from_utf8(&letter_grades[index][..])\n\
    \            .unwrap().to_string();\n    }\n    for index in range(grades.len())\
    \ {\n        letter_grades[index] += &str::from_utf8(&\"FEDCBA-\").unwrap();\n\
    \    }\n    for index in range(grades.len()) {\n        letter_grades[index] +=\
    \ &str::from_utf8(&\"FEDCBA\").unwrap();\n    }\n    for index in range(grades.len())\
    \ {\n        letter_grades[index] += &str::from_utf8(&\"FEDCBA\").unwrap();\n\
    \    }\n    for index in range(grades.len()) {\n        letter_grades[index] +=\
    \ &str::from_utf8(&\"FEDCBA\").unwrap();\n    }\n    for index in range(grades.len())\
    \ {\n        letter_grades[index] += &str::from_utf8(&\"FEDCBA\").unwrap();\n\
    \    }\n    for index in range(grades.len()) {\n        letter_grades[index] +=\
    \ &str::from_utf8(&\"FEDCBA\").unwrap();\n    }\n    for index in range(grades.len())\
    \ {\n        letter_grades[index] += &str::from_utf8(&\"FEDCBA\").unwrap();\n\
    \    }\n    for index in range(grades.len()) {\n        letter_grades[index] +=\
    \ &str::from_utf8(&\"FEDCBA\").unwrap();\n    }\n    for index in range(grades.len())\
    \ {\n        letter_grades[index] += &str::from_utf8(&\"FEDCBA\").unwrap();\n\
    \    }\n    for index in range(grades.len()) {\n        letter_grades[index] +=\
    \ &str::from_utf8(&\"FEDCBA\").unwrap();\n    }\n    for index in range(grades.len())\
    \ {\n        letter_grades[index] += &str::from_utf8(&\"FEDCBA\").unwrap();\n\
    \    }\n    for index in range(grades.len()) {\n        letter_grades[index] +=\
    \ &str::from_utf8(&\"FEDCBA\").unwrap();\n    }\n    for index in range(grades.len())\
    \ {\n        letter_grades[index] += &str::from_utf8(&\"FEDCBA\").unwrap();",
  "    let mut grades_iter = grades.iter();\n    let mut letter_grades = Vec::new();\n\
    \    let mut prev_grade_letter = String::new();\n    let mut current_grade: f64\
    \ = grades.iter().sum();\n    if current_grade < 0.0 {\n        grades_iter =\
    \ grades.iter().rev();\n        current_grade = grades.iter().sum();\n    }\n\
    \    grades_iter.fold(\n        prev_grade_letter,\n        |prev_grade_letter,\
    \ grade| {\n            let letter = grade < 2.3 ? \"-\" : (grade >= 2.3 && grade\
    \ < 3.0 ? \"B+\" : (grade >= 3.0 && grade < 3.7 ? \"B\" : \"B-\"\n           \
    \                                                                            \
    \     ));\n            let new_letter = prev_grade_letter + letter;\n        \
    \    prev_grade_letter = new_letter;\n            letter_grades.push(new_letter);\n\
    \        });\n    letter_grades", "    if grades.len() != 5 {\n        return\
    \ vec![\"E\".to_string()];\n    }\n    let mut numerical_grade = grades.iter().sum();\n\
    \    let mut letter_grade: Vec<String> = vec![];\n    \n    for grade in grades\
    \ {\n        if grade < 3.0 {\n            numerical_grade += 0.1;\n        }\
    \ else if grade < 3.3 {\n            numerical_grade += 0.01;\n        } else\
    \ if grade < 3.7 {\n            numerical_grade += 0.001;\n        }\n       \
    \ if numerical_grade < 5.0 {\n            letter_grade.push(\"E\".to_string());\n\
    \            break;\n        }\n        let letter_grade = match numerical_grade\
    \ {\n            0 => \"D\".to_string(),\n            1 => \"C\".to_string(),\n\
    \            2 => \"B\".to_string(),\n            3 => \"B\".to_string(),\n  \
    \          4 => \"A\".to_string(),\n            _ => {\n                if grade\
    \ < 3.0 {\n                    numerical_grade += 0.1;\n                } else\
    \ if grade < 3.3 {\n                    numerical_grade += 0.01;\n           \
    \     } else if grade < 3.7 {\n                    numerical_grade += 0.001;\n\
    \                }\n                match numerical_grade {\n                \
    \    0 => \"D\".to_string(),\n                    1 => \"C\".to_string(),\n  \
    \                  2 => \"B\".to_string(),\n                    3 => \"B\".to_string(),\n\
    \                    4 => \"A\".to_string(),\n                    _ => \"E\".to_string()\n\
    \                }\n            }\n        };\n        \n        numerical_grade\
    \ -= 0.1;\n    }\n    letter_grade", "    let mut grades_copy: Vec<f64> = grades.clone();\n\
    \    let mut grades_copy_reversed: Vec<f64> = grades.clone();\n    grades_copy_reversed.reverse();\n\
    \    grades_copy.sort_unstable_by_key(|x| x.partial_cmp(x.unwrap()) as isize);\n\
    \    grades_copy_reversed.sort_unstable_by_key(|x| x.partial_cmp(x.unwrap()) as\
    \ isize);\n    let mut letter_grades: Vec<String> = vec![];\n    let mut gpa:\
    \ f64 = 0.0;\n    let mut gpa_reversed: f64 = 0.0;\n    let mut index = 0;\n \
    \   let mut is_grade = String::new();\n    loop {\n        gpa_reversed = grades_copy_reversed[index];\n\
    \        if grades_copy[index] == grades_copy_reversed[index] {\n            gpa\
    \ = grades_copy[index];\n            break;\n        } else {\n            gpa\
    \ = grades_copy[index];\n            index += 1;\n        }\n    }\n    loop {\n\
    \        gpa_reversed = grades_copy_reversed[index];\n        letter_grades.push(format!(\"\
    {:?}\", gpa_reversed).to_string());\n        if grades_copy[index] == grades_copy_reversed[index]\
    \ {\n            break;\n        } else {\n            index += 1;\n        }\n\
    \    }\n    letter_grades.sort_unstable_by_key(|x| x.partial_cmp(x.unwrap()) as\
    \ isize);\n    letter_grades", "    grades.iter().map(|x| x.to_string()).collect::<Vec<_>>().windows(4).map(|w|\
    \ {\n        w.iter().map(|x| x.to_string()).collect::<Vec<_>>().join(\"\").to_string()\n\
    \    }).collect::<Vec<_>>()", "    let mut grades_slice = grades.as_slice();\n\
    \n    // The first element is the letter grade for the first GPA, just make sure\n\
    \    // it's A+ since that's what our first GPA is.\n    grades_slice.insert(0,\
    \ 0.0);\n\n    // We subtract the first element from all the remaining elements\
    \ to get \n    // the difference between them.\n    for grade in grades_slice.iter().rev()\
    \ {\n        let grades_diff = grade - grades_slice[0];\n\n        // The GPA\
    \ difference is greater than zero so we can add a '+'\n        if grades_diff\
    \ > 0.0 {\n            grades_slice.insert(0, grades_diff + 1.0);\n        } else\
    \ {\n            // The GPA difference is less than zero so we can subtract a\
    \ '-'\n            if grades_diff < 0.0 {\n                grades_slice.insert(0,\
    \ grades_diff - 1.0);\n            }\n        }\n    }\n\n    // We return the\
    \ reversed slice.\n    grades_slice.iter().rev().collect()", '    // Your code
    goes here', "    let mut letter_grades: Vec<String> = vec![];\n\n    let mut prev_gpa\
    \ = grades.nth(1);\n    for i in 0..grades.len() {\n        let curr_gpa = grades[i];\n\
    \        if i == 0 {\n            let letter_grade = if curr_gpa >= 3.0 * prev_gpa\
    \ { \"+\" } else { \"-\" };\n            letter_grades.push(String::from(&letter_grade));\n\
    \        } else {\n            let letter_grade = if curr_gpa < prev_gpa { \"\
    +\" } else { if curr_gpa - prev_gpa > 1.0 { \"A+\" } else { \"A-\" } };\n    \
    \        letter_grades.push(String::from(&letter_grade));\n        }\n\n     \
    \   prev_gpa = curr_gpa;\n    }\n    letter_grades.push(String::from(\"E\"));\n\
    \n    letter_grades", "    let mut letter_grades: Vec<String> = vec![];\n    let\
    \ mut max_grade = grades.iter().max().unwrap();\n    max_grade = max_grade / 10.0;\n\
    \    for (grade, idx) in grades.iter().enumerate() {\n        if grade > max_grade\
    \ {\n            max_grade = grade;\n        }\n    }\n    let mut min_grade =\
    \ grades.iter().min().unwrap();\n    min_grade = min_grade / 10.0;\n    for (grade,\
    \ idx) in grades.iter().enumerate() {\n        if grade < min_grade {\n      \
    \      min_grade = grade;\n        }\n    }\n    for (grade, idx) in grades.iter().enumerate()\
    \ {\n        let grade_str = (grade as f32).to_string();\n        if idx < min_grade\
    \ || idx > max_grade {\n            letter_grades.push(grade_str);\n        }\
    \ else {\n            letter_grades.push(grade_str + \"+\");\n        }\n    }\n\
    \    return letter_grades;", "    let mut grades_as_string = String::new();\n\
    \    for i in grades.iter() {\n        let fraction = i as f64;\n        let grade_string\
    \ = grade_formula(fraction);\n        grades_as_string.push_str(grade_string);\n\
    \    }\n    grades_as_string.split_whitespace().collect::<Vec<String>>()", " \
    \   let mut grades_strings = Vec::new();\n    let mut max_gpa = grades.iter().max().unwrap();\n\
    \    max_gpa = max_gpa - 0.6;\n    let mut min_gpa = grades.iter().min().unwrap();\n\
    \    min_gpa = min_gpa - 0.6;\n    for grade in grades.iter() {\n        if grade\
    \ >= max_gpa {\n            grades_strings.push(\"A-\");\n        }\n        if\
    \ grade >= min_gpa {\n            grades_strings.push(\"B-\");\n        }\n  \
    \      if grade >= 3.0 {\n            grades_strings.push(\"C+\");\n        }\n\
    \        if grade >= 2.7 {\n            grades_strings.push(\"C\");\n        }\n\
    \        if grade >= 2.3 {\n            grades_strings.push(\"C-\");\n       \
    \ }\n        if grade >= 2.0 {\n            grades_strings.push(\"D+\");\n   \
    \     }\n        if grade >= 1.7 {\n            grades_strings.push(\"D\");\n\
    \        }\n        if grade >= 1.3 {\n            grades_strings.push(\"D-\"\
    );\n        }\n        if grade >= 1.0 {\n            grades_strings.push(\"E\"\
    );\n        }\n        if grade <= 0.7 {\n            grades_strings.push(\"D\"\
    );\n        }\n        if grade <= 0.3 {\n            grades_strings.push(\"B-\"\
    );\n        }\n        if grade <= 0.2 {\n            grades_strings.push(\"B-\"\
    );\n        }\n        if grade <= 0.1 {\n            grades_strings.push(\"B-\"\
    );\n        }\n        if grade <= 0.0{\n            grades_strings.push(\"B-\"\
    );\n        }\n        if grade == 0.0 {\n            grades_strings.push(\"B-\"\
    );\n        }\n    }\n    grades_strings", "    let mut grades_vec: Vec<String>\
    \ = Vec::new();\n    let mut grades_vec: Vec<String> = Vec::new();\n    let mut\
    \ grades_vec: Vec<String> = Vec::new();\n    let mut grades_vec: Vec<String> =\
    \ Vec::new();\n    let mut grades_vec: Vec<String> = Vec::new();\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n    grades_vec.push(\"\");\n\n    grades_vec.push(\"\");\n    grades_vec.push(\"\
    \");\n", "    let mut grades_chars = grades.into_iter().map(|grade| {\n      \
    \  let num = grade as f64;\n        match num {\n            > 3.0 => \"B+\".to_owned(),\n\
    \            > 2.7 => \"B\".to_owned(),\n            > 2.3 => \"B-\".to_owned(),\n\
    \            > 2.0 => \"C+\".to_owned(),\n            > 1.7 => \"C\".to_owned(),\n\
    \            > 1.3 => \"C-\".to_owned(),\n            > 1.0 => \"D+\".to_owned(),\n\
    \            > 0.7 => \"D\".to_owned(),\n            0.0 => \"D-\".to_owned(),\n\
    \            > 3.0 => \"A+\".to_owned(),\n            > 2.7 => \"A\".to_owned(),\n\
    \            > 2.3 => \"A-\".to_owned(),\n            > 2.0 => \"B+\".to_owned(),\n\
    \            > 1.7 => \"B\".to_owned(),\n            > 1.3 => \"B-\".to_owned(),\n\
    \            > 1.0 => \"C+\".to_owned(),\n            > 0.7 => \"C\".to_owned(),\n\
    \            0.0 => \"C-\".to_owned(),\n            > 3.0 => \"A+\".to_owned(),\n\
    \            > 3.7 => \"A\".to_owned(),\n            _ => \"E\".to_owned(),\n\
    \        }\n    }).collect();\n    let mut grades_len = grades.len();\n    grades_chars[grades_len\
    \ - 1].push('A');\n    grades_chars.reverse();\n    grades_chars", "    let len\
    \ = grades.len();\n    let mut letter_grades = Vec::with_capacity(len + 1);\n\
    \    for grade in grades {\n        if grade >= 3.0 {\n            letter_grades.push(format!(\"\
    C+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(format!(\"\
    C\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= 0.3 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= 0.1 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= -0.1 {\n            letter_grades.push(format!(\"\
    B\"));\n        } else if grade >= -0.3 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= -0.7 {\n            letter_grades.push(format!(\"\
    B\"));\n        } else if grade >= -1.0 {\n            letter_grades.push(format!(\"\
    B+\"));\n        } else if grade >= -1.7 {\n            letter_grades.push(format!(\"\
    C\"));\n        } else if grade >= -2.0 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade >= -3.0 {\n            letter_grades.push(format!(\"\
    B\"));\n        } else if grade >= -3.7 {\n            letter_grades.push(format!(\"\
    A\"));\n        } else if grade >= -4.0 {\n            letter_grades.push(format!(\"\
    A+\"));\n        } else if grade >= -4.7 {\n            letter_grades.push(format!(\"\
    A\"));\n        } else {\n            letter_grades.push(format!(\"A\"));\n  \
    \      }\n    }\n    letter_grades.truncate(letter_grades.len() - 1);\n    letter_grades",
  "    let mut letter = vec![];\n\n    for grade in grades {\n        if grade < 4.0\
    \ {\n            letter.push('A+');\n        } else if grade >= 3.0 && grade <\
    \ 3.7 {\n            letter.push('A');\n        } else if grade >= 3.7 && grade\
    \ < 3.3 {\n            letter.push('A-');\n        } else if grade >= 3.3 && grade\
    \ < 3.0 {\n            letter.push('B+');\n        } else if grade >= 3.0 && grade\
    \ < 2.7 {\n            letter.push('B');\n        } else if grade >= 2.7 && grade\
    \ < 2.3 {\n            letter.push('B-');\n        } else if grade >= 2.3 && grade\
    \ < 2.0 {\n            letter.push('C+');\n        } else if grade >= 2.0 && grade\
    \ < 1.7 {\n            letter.push('C');\n        } else if grade >= 1.7 && grade\
    \ < 1.3 {\n            letter.push('C-');\n        } else if grade >= 1.3 && grade\
    \ < 1.0 {\n            letter.push('D+');\n        } else if grade >= 1.0 && grade\
    \ < 0.7 {\n            letter.push('D');\n        } else if grade >= 0.7 && grade\
    \ < 0.0 {\n            letter.push('D-');\n        } else {\n            letter.push('E');\n\
    \        }\n    }\n    letter", "    let mut result: Vec<String> = vec![];\n \
    \   grades.sort_unstable_by(|a, b| b.partial_cmp(a).unwrap());\n    for i in grades.iter()\
    \ {\n        let letter = match i {\n            0 => \"E\",\n            i if\
    \ i > 5.0 => \"D-\",\n            i if i > 3.0 => \"C-\",\n            i if i\
    \ > 2.0 => \"B-\",\n            i if i > 1.7 => \"B-\",\n            i if i >\
    \ 1.3 => \"B-\",\n            i if i > 1.0 => \"B-\",\n            i if i > 0.7\
    \ => \"B-\",\n            i if i > 0.3 => \"B-\",\n            i if i > 0.2 =>\
    \ \"B-\",\n            i if i > 0.1 => \"B-\",\n            i if i > 0.0 => \"\
    B-\",\n            i if i > -1.0 => \"B-\",\n            i if i > -2.0 => \"B-\"\
    ,\n            i if i > -3.0 => \"B-\",\n            i if i > -4.0 => \"B-\",\n\
    \            i if i > -5.0 => \"B-\",\n            i if i > -6.0 => \"B-\",\n\
    \            i if i > -7.0 => \"B-\",\n            i if i > -8.0 => \"B-\",\n\
    \            i if i > -9.0 => \"B-\",\n            i if i > -10.0 => \"B-\",\n\
    \            i if i > -11.0 => \"B-\",\n            i if i > -12.0 => \"B-\",\n\
    \            i if i > -13.0 => \"B-\",\n            i if i > -14.0 => \"B-\",\n\
    \            i if i > -15.0 => \"B-\",\n            i if i > -16.0 => \"B-\",\n\
    \            i if i > -17.0 => \"B-\",\n            i if i > -18.0 => \"B-\",\n\
    \            i if i > -19.0 => \"B-\",\n            i if i > -20.0 => \"B-\",\n\
    \            i if i > -21.0 => \"B-\",\n            i if i > -22.0 => \"B-\",\n\
    \            i if i > -23.0 => \"B-\",\n            i if i > -24.0 => \"B-\",\n\
    \            i if i > -25.0 => \"B-\",\n            i if i > -26.0 => \"B-\",\n\
    \            i if i > -27.0 => \"B-\",\n            i if i > -28.0 => \"B-\",\n\
    \            i if i > -29.0 => \"B-\",\n            i if i > -30.0 => \"B-\",\n\
    \            i if i > -31.0 => \"B-\",\n            i if i > -32.0 => \"B-\",\n\
    \            i if i > -33.0 => \"B-\",\n            i ", "    let mut grades_copy\
    \ = grades.clone();\n    let grades_len = grades_copy.len();\n\n    if grades_len\
    \ == 0 {\n        grades_copy = vec![0.0f64];\n    }\n\n    if grades_len % 2\
    \ == 0 {\n        grades_copy = grades_copy.to_owned();\n    }\n\n    let mut\
    \ letter_grades = vec![];\n\n    for grade in grades_copy {\n        let mut min_grade\
    \ = grade;\n        let mut max_grade = grade;\n\n        for _ in 0..(grades_len\
    \ / 2) {\n            match min_grade {\n                Some(min_grade) => {\
    \ min_grade = Some(min_grade + 1.0); },\n                None => { min_grade =\
    \ None; },\n            };\n\n            match max_grade {\n                Some(max_grade)\
    \ => { max_grade = Some(max_grade - 1.0); },\n                None => { max_grade\
    \ = None; },\n            };\n        }\n\n        if min_grade < 0.0 || max_grade\
    \ < 0.0 || min_grade > max_grade {\n            letter_grades.push(String::from(\"\
    E\"));\n        } else {\n            match min_grade {\n                Some(min_grade)\
    \ => { letter_grades.push(String::from(\"D+\")); },\n                None => {\
    \ letter_grades.push(String::from(\"D-\")); },\n            };\n\n           \
    \ match max_grade {\n                Some(max_grade) => { letter_grades.push(String::from(\"\
    D+\")); },\n                None => { letter_grades.push(String::from(\"D-\"));\
    \ },\n            };\n\n            match min_grade {\n                Some(min_grade)\
    \ => { letter_grades.push(String::from(\"C+\")); },\n                None => {\
    \ letter_grades.push(String::from(\"C\")); },\n            };\n\n            match\
    \ max_grade {\n                Some(max_grade) => { letter_grades.push(String::from(\"\
    C-\")); },\n                None => { letter_grades.push(String::from(\"C\"));\
    \ },\n            };\n\n            match min_grade {\n                Some(min_grade)\
    \ => { letter_grades.push(String::from(\"B+\")); },\n                None => {\
    \ letter_grades.push(String::from(\"B\")); },\n            };\n\n            match\
    \ max_grade {\n                Some(max_grade) => { letter_grades.push(String::from(\"\
    B-\")); },\n                None => { letter_grades.push(String::from(\"B\"));\
    \ },\n            };\n\n            match min_grade {\n                Some(min_grade)\
    \ => { letter_grades.push(String::from(\"A", "    let mut letter_grades = Vec::new();\n\
    \    for grade in grades {\n        let mut i = 0;\n        while i < grade.len()\
    \ {\n            let mut min_gpa = grade[0];\n            for i in 1..grade.len()\
    \ {\n                let mut gpa = grade[i];\n                if gpa < min_gpa\
    \ {\n                    min_gpa = gpa;\n                }\n            }\n  \
    \          letter_grades.push(min_gpa + \"+\");\n            if min_gpa > grade[0]\
    \ {\n                letter_grades.push(min_gpa - \"-\");\n            }\n   \
    \         i += 1;\n        }\n    }\n    letter_grades", "    let mut grades_vec\
    \ = vec![\"E\"];\n    for grade in grades {\n        let mut grades_vec_temp =\
    \ vec![];\n        for gp in (0..=grade).step_by(4) {\n            let mut grades_vec_temp2\
    \ = vec![];\n            match gp%4{\n                0 => grades_vec_temp2.push(String::from(\"\
    D-\")),\n                1 => grades_vec_temp2.push(String::from(\"D+\")),\n \
    \               2 => grades_vec_temp2.push(String::from(\"D\")),\n           \
    \     3 => grades_vec_temp2.push(String::from(\"C\")),\n                _ => grades_vec_temp2.push(String::from(\"\
    B\")),\n            }\n            match gp/4{\n                0 => grades_vec_temp2.push(String::from(\"\
    B+\")),\n                1 => grades_vec_temp2.push(String::from(\"B\")),\n  \
    \              2 => grades_vec_temp2.push(String::from(\"B-\")),\n           \
    \     3 => grades_vec_temp2.push(String::from(\"B-\")),\n            }\n     \
    \       match gp/4+2{\n                0 => grades_vec_temp2.push(String::from(\"\
    A-\")),\n                1 => grades_vec_temp2.push(String::from(\"A+\")),\n \
    \               2 => grades_vec_temp2.push(String::from(\"A\")),\n           \
    \     3 => grades_vec_temp2.push(String::from(\"A\")),\n            }\n      \
    \      grades_vec_temp.push(grades_vec_temp2.join(\"\"));\n        }\n       \
    \ grades_vec.push(grades_vec_temp.join(\"\"));\n    }\n    grades_vec", "    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n    for i in 0..grades.len() {\n  \
    \      if grades[i] != 0.0f64 {\n            grades_vec.push(numerical_letter_grade(grades.subvec(i).unwrap()));\n\
    \        }\n    }\n    grades_vec", "    let mut gpas = grades.iter().map(|x|\
    \ x / 4.0f64).collect::<Vec<f64>>();\n    gpas = gpas.iter().cloned().collect::<Vec<f64>>();\n\
    \    gpas.sort();\n    let mut letter_grade = vec![];\n    for i in 0..gpas.len()\
    \ {\n        if i > 0 {\n            if gpas[i] > gpas[i-1] {\n              \
    \  letter_grade.push(i);\n            }\n        }\n    }\n    for _ in 0..gpas.len()\
    \ {\n        letter_grade.push(\"E\");\n    }\n    letter_grade", "    let gpa:\
    \ f64 = grades.sum();\n    let mut grades: Vec<String> = vec![];\n    let mut\
    \ prev: f64;\n    let mut next: f64;\n    let mut count: u32 = 0;\n    for grade\
    \ in grades.iter() {\n        if prev != grade {\n            if let Ok(mut prev)\
    \ = prev {\n                if grade >= prev {\n                    grades.push(format!(\"\
    {}+\", count));\n                } else {\n                    grades.push(format!(\"\
    {}-\", count));\n                }\n            } else {\n                grades.push(format!(\"\
    {}\", count));\n            }\n            prev = grade;\n            count =\
    \ 1;\n        } else if grade >= prev {\n            count += 1;\n        }\n\
    \        next = grade;\n    }\n    if let Ok(mut prev) = prev {\n        if grade\
    \ >= prev {\n            grades.push(format!(\"{}+\", count));\n        } else\
    \ {\n            grades.push(format!(\"{}-\", count));\n        }\n    } else\
    \ {\n        grades.push(format!(\"{}\", count));\n    }\n    grades", "    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut min_grade: f64 = grades.iter().min().unwrap();\n\
    \    let mut max_grade: f64 = grades.iter().max().unwrap();\n    \n    if min_grade\
    \ == 0.0 {\n        // the min_grade is 0.0 that means no grade\n        // So\
    \ just return empty vector\n        return grades_vec;\n    }\n    \n    // to\
    \ find the number of students she will grade for each grade\n    let mut count_of_students:\
    \ f64 = min_grade;\n    let mut count_of_students_half: f64 = count_of_students\
    \ / 2;\n    let mut count_of_students_quarter: f64 = count_of_students / 4;\n\
    \    let mut count_of_students_half_quarter: f64 = count_of_students_half / 2;\n\
    \n    // to store the letter grade for each student\n    let mut letter_grade:\
    \ Vec<String> = vec![];\n    for grade in grades {\n        if count_of_students\
    \ > 0 {\n            if count_of_students_half > 0 {\n                // to find\
    \ grade for each quarter\n                if count_of_students_quarter > 0 {\n\
    \                    let grade = grade - min_grade + count_of_students_quarter;\n\
    \                    if grade < 0.0 {\n                        grade = grade +\
    \ 10.0;\n                    }\n                    letter_grade.push(\"A+\");\n\
    \                    if grade < 3.0 {\n                        letter_grade.push(\"\
    A\");\n                    } else if grade < 3.7 {\n                        letter_grade.push(\"\
    A-\");\n                    } else if grade < 4.0 {\n                        letter_grade.push(\"\
    B+\");\n                    } else if grade < 4.3 {\n                        letter_grade.push(\"\
    B\");\n                    } else if grade < 4.6 {\n                        letter_grade.push(\"\
    B-\");\n                    } else if grade < 5.0 {\n                        letter_grade.push(\"\
    C+\");\n                    } else if grade < 5.3 {\n                        letter_grade.push(\"\
    C\");\n                    } else if grade < 5.6 {\n                        letter_grade.push(\"\
    C-\");\n                    } else if grade < 6.0 {\n                        letter_grade.push(\"\
    D+\");\n                    } else if grade < 6.3 {\n                        letter_grade.push(\"\
    D\");\n                    } else if grade < 6.6 {\n                        letter_grade.push(\"\
    D-\");\n                    } else {\n                        letter_grade.push(\"\
    E\");\n                    }\n                    count_of_students = count_of_student",
  "    let mut grades_sorted = grades.iter().sorted();\n    let mut letter_grades\
    \ = Vec::new();\n    \n    let mut previous_grade: f64 = 0.0;\n    let mut current_grade:\
    \ f64 = 0.0;\n    \n    for grade in grades_sorted {\n        if current_grade\
    \ == 0.0 { // first grade of the semester\n            letter_grades.push(format!(\"\
    {}\", grade));\n            current_grade = grade;\n            continue;\n  \
    \      }\n        \n        if grade > previous_grade { // continuing current\
    \ grade\n            letter_grades.push(format!(\"{}+\", current_grade));\n  \
    \          current_grade = grade;\n        } else { // beginning a new grade\n\
    \            letter_grades.push(format!(\"{}\", current_grade));\n           \
    \ current_grade = grade;\n        }\n        \n        previous_grade = grade;\n\
    \    }\n    \n    // last letter grade\n    letter_grades.push(format!(\"{}\"\
    , current_grade));\n    \n    letter_grades", "    let mut grades_letter = vec![];\n\
    \    for grade in grades {\n        if grade >= 3.0 {\n            grades_letter.append(format!(\"\
    A+\", grade));\n        } else if grade >= 2.0 {\n            grades_letter.append(format!(\"\
    B+\", grade));\n        } else if grade >= 1.4 {\n            grades_letter.append(format!(\"\
    B-\", grade));\n        } else if grade >= 1.0 {\n            grades_letter.append(format!(\"\
    C+\", grade));\n        } else if grade >= 0.7 { \n            grades_letter.append(format!(\"\
    C\", grade));\n        } else if grade >= 0.0 { \n            grades_letter.append(format!(\"\
    D-\", grade));\n        } else {\n            grades_letter.append(format!(\"\
    D\", grade));\n        }\n    }\n    return grades_letter;", "    let grades =\
    \ grades.iter().cloned();\n    let mut grades_iter = grades.peekable();\n    let\
    \ mut letter_grades = Vec::new();\n    grades_iter.try_fold(0.0, |mut previous_grade,\
    \ current_grade| {\n        let letter_grade = if current_grade >= 4.0\n     \
    \                       && previous_grade <= 3.7 \n                          \
    \      { 0 }\n                            else if current_grade >= 3.7\n     \
    \                       && previous_grade <= 3.3\n                           \
    \     { 1 }\n                            else if current_grade >= 3.3 \n     \
    \                       && previous_grade <= 3.0\n                           \
    \     { 2 }\n                            else if current_grade >= 3.0\n      \
    \                      && previous_grade <= 2.7 \n                           \
    \     { 3 }\n                            else if current_grade >= 2.7\n      \
    \                      && previous_grade <= 2.3\n                            \
    \    { 4 }\n                            else if current_grade >= 2.3\n       \
    \                     && previous_grade <= 2.0\n                             \
    \   { 5 }\n                            else if current_grade >= 2.0\n        \
    \                    && previous_grade <= 1.7 \n                             \
    \   { 6 }\n                            else if current_grade >= 1.7\n        \
    \                    && previous_grade <= 1.3\n                              \
    \  { 7 }\n                            else if current_grade >= 1.3\n         \
    \                   && previous_grade <= 1.0\n                               \
    \ { 8 }\n                            else { 9}; \n        letter_grades.push(&letter_grade\
    \ as char);\n        previous_grade\n    }).map(|x| x.to_string());\n    letter_grades",
  "    let mut letter_grades = vec![];\n    let mut highest_grade = grades[0];\n \
    \   for grade in grades.iter() {\n        if grade > highest_grade {\n       \
    \     highest_grade = grade;\n        }\n    }\n    for grade in grades.iter()\
    \ {\n        if grade > highest_grade {\n            highest_grade = grade;\n\
    \        }\n    }\n    let mut letter_grade_level = highest_grade / 4.0;\n   \
    \ highest_grade -= (letter_grade_level * 4.0);\n    while letter_grade_level <\
    \ highest_grade {\n        letter_grade_level += 3.0;\n    }\n    if letter_grade_level\
    \ >= highest_grade {\n        letter_grade_level -= 3.0;\n    }\n    for grade\
    \ in grades.iter() {\n        if grade > letter_grade_level {\n            letter_grades.push(format!(\"\
    {}-\", grade - letter_grade_level));\n        }\n        if grade > letter_grade_level\
    \ {\n            letter_grades.push(format!(\"+{}\", grade - letter_grade_level));\n\
    \        }\n    }\n    letter_grades", "    grades\n        .iter()\n        .filter_map(|x|\
    \ if x <= 3.0 { \"A+\" } else if x >= 3.3 { \"A-\" } else { \"B+\" } else if x\
    \ >= 2.7 { \"B\" } else if x >= 2.3 { \"B-\" } else if x >= 1.7 { \"C\" } else\
    \ if x >= 1.3 { \"C-\" } else if x >= 1.0 { \"D+\" } else if x >= 0.7 { \"D\"\
    \ } else { \"D-\" } else { \"E\" } else { \"E+\" })\n        .collect()", "  \
    \  let mut letter_grade = vec![];\n    for grade in grades {\n        let mut\
    \ letter_grade_result = vec![];\n        let mut total_grades = 0;\n        let\
    \ mut previous_grade = 0;\n        let mut total_grades_result = 0;\n        for\
    \ grade_num in 0..grade.len() {\n            previous_grade = grades[grade_num];\n\
    \            total_grades += grades[grade_num];\n            total_grades_result\
    \ += grades[grade_num] * grades[grade_num];\n            if grade_num != grade.len()\
    \ - 1 {\n                letter_grade_result.push(\"A+\");\n            } else\
    \ {\n                letter_grade_result.push(\"E\");\n            }\n       \
    \ }\n        letter_grade.push(total_grades_result.to_string());\n        for\
    \ grade_num in 0..grade.len() {\n            let total_grades = grades[grade_num];\n\
    \            let total_grades_result = total_grades * total_grades;\n        \
    \    if grade_num != grade.len() - 1 {\n                if total_grades == 0 {\n\
    \                    let letter_grade = String::from(\"D+\");\n              \
    \      letter_grade.to_lowercase();\n                    letter_grade.push(previous_grade.to_string());\n\
    \                    letter_grade.push(total_grades_result.to_string());\n   \
    \                 letter_grade.push(\"D-\");\n                } else {\n     \
    \               let letter_grade = String::from(\"D-\");\n                   \
    \ letter_grade.push(previous_grade.to_string());\n                    letter_grade.push(total_grades_result.to_string());\n\
    \                    letter_grade.push(\"D+\");\n                }\n         \
    \   } else {\n                if total_grades == 0 {\n                    let\
    \ letter_grade = String::from(\"D-\");\n                    letter_grade.to_lowercase();\n\
    \                    letter_grade.push(previous_grade.to_string());\n        \
    \            letter_grade.push(\"D+\");\n                } else {\n          \
    \          let letter_grade = String::from(\"D+\");\n                    letter_grade.push(previous_grade.to_string());\n\
    \                    letter_grade.push(\"D-\");\n                }\n         \
    \   }\n        }\n    }\n    letter_grade", "    let mut output: Vec<String> =\
    \ vec![];\n    let mut max_grade = grades.max();\n    let mut min_grade = grades.min();\n\
    \    \n    let mut student_grades: Vec<f64> = grades;\n    student_grades.sort();\n\
    \    \n    let mut current_grade: f64 = grades[0];\n    \n    let mut student_grades_sum:\
    \ f64 = student_grades[0] + student_grades[1] + student_grades[2];\n    \n   \
    \ let mut max_grade_percent: f64 = grade_percentage(max_grade);\n    let mut min_grade_percent:\
    \ f64 = grade_percentage(min_grade);\n    \n    let mut current_grade_percent:\
    \ f64 = grade_percentage(current_grade);\n    \n    let mut current_grade_letter_grade:\
    \ f64 = current_grade;\n    \n    while current_grade_percent < 0.0 && student_grades_sum\
    \ < 1.0\n    {\n        current_grade_percent += current_grade_percent;\n    \
    \    current_grade_letter_grade += current_grade_letter_grade;\n        student_grades_sum\
    \ += student_grades[2] - student_grades[1] - student_grades[0];\n    }\n    \n\
    \    while student_grades_sum > 1.0 {\n        let mut student_grade_sum: f64\
    \ = student_grades[0] + student_grades[1] + student_grades[2];\n        \n   \
    \     let mut grade_percent: f64 = grade_percentage(student_grade_sum);\n    \
    \    \n        while grade_percent < 0.0 {\n            grade_percent += grade_percent;\n\
    \            \n            student_grade_sum += student_grades[2] - student_grades[1]\
    \ - student_grades[0];\n        }\n        \n        let mut grade_letter_grade:\
    \ f64 = grade_percentage(student_grade_sum);\n        \n        if grade_letter_grade\
    \ < current_grade_letter_grade {\n            current_grade_letter_grade = grade_letter_grade;\n\
    \        }\n        \n        student_grades_sum -= student_grade_sum;\n    }\n\
    \    \n    for i in 0..grades.len()\n    {\n        if student_grades[i] < 0.0\
    \ {\n            student_grades_sum += student_grades[i] - student_grades[i +\
    \ 1] - student_grades[i + 2];\n        }\n    }\n    \n    while student_grades_sum\
    \ > 0.0 {\n        let mut student_grade_sum: f64 = student_grade", "    let mut\
    \ result: Vec<String> = vec![];\n    let mut gpa_sum: f64 = 0.0;\n    for grade\
    \ in grades {\n        gpa_sum += grade;\n        if gpa_sum > 9.0 {\n       \
    \     result.push(\"A-\");\n            gpa_sum -= 9.0;\n        } else if gpa_sum\
    \ > 6.0 {\n            result.push(\"B-\");\n            gpa_sum -= 6.0;\n   \
    \     } else if gpa_sum > 3.0 {\n            result.push(\"B-\");\n          \
    \  gpa_sum -= 3.0;\n        } else if gpa_sum > 0.0 {\n            result.push(\"\
    B-\");\n            gpa_sum -= 0.0;\n        } else if gpa_sum < 0.3 {\n     \
    \       result.push(\"C-\");\n            gpa_sum += 0.3;\n        } else if gpa_sum\
    \ < 0.7 {\n            result.push(\"C+\");\n            gpa_sum += 0.7;\n   \
    \     } else if gpa_sum < 1.1 {\n            result.push(\"C-\");\n          \
    \  gpa_sum += 1.1;\n        } else if gpa_sum < 1.7 {\n            result.push(\"\
    C+\");\n            gpa_sum += 1.7;\n        } else if gpa_sum < 2.3 {\n     \
    \       result.push(\"B-\");\n            gpa_sum += 2.3;\n        } else if gpa_sum\
    \ < 2.7 {\n            result.push(\"B+\");\n            gpa_sum += 2.7;\n   \
    \     } else if gpa_sum < 3.0 {\n            result.push(\"B+\");\n          \
    \  gpa_sum += 3.0;\n        } else if gpa_sum < 3.3 {\n            result.push(\"\
    B+\");\n            gpa_sum += 3.3;\n        } else if gpa_sum < 3.7 {\n     \
    \       result.push(\"A+\");\n            gpa_sum += 3.7;\n        } else if gpa_sum\
    \ < 4.0 {\n            result.push(\"A+\");\n            gpa_sum += 4.0;\n   \
    \     } else if gpa_sum < 4.3 {\n            result.push(\"A+\");\n          \
    \  gpa_sum += 4.3;\n        } else if gpa_sum < 4.7 {\n            result.push(\"\
    A+\");\n            gpa_sum += 4.7;\n        } else if gpa_sum < 5.0 {\n     \
    \       result.push(\"A+\");\n            gpa_sum += 5.0;\n        } else if gpa_sum\
    \ < 5.3 {\n            result.push(\"A+\");\n            gpa_sum += 5.3;\n   \
    \     } else if gpa_sum < 5.7 {\n            result.push(\"A+\");\n          \
    \  gpa_sum += 5.7;\n        } else if gpa_sum < 6.0 {\n            result.push(\"\
    A+\");\n            gpa_sum += 6.0;\n        } else if gpa_sum < 6.3 {\n     \
    \       result.push(\"A", "    let mut grades = grades.clone();\n    let mut letter_grades\
    \ = vec![String::new(); grades.len()];\n    \n    let mut gpa = min(grades);\n\
    \    let mut a = gpa;\n    while a > 0.0 {\n        \n        if a >= 4.0 {\n\
    \            letter_grades[0] += \"+\";\n        }\n        \n        if a >=\
    \ 3.7 {\n            letter_grades[0] += \"A\";\n        }\n        \n       \
    \ if a >= 3.3 {\n            letter_grades[0] += \"A-\";\n        }\n        \n\
    \        if a >= 3.0 {\n            letter_grades[1] += \"B+\";\n        }\n \
    \       \n        if a >= 2.7 {\n            letter_grades[1] += \"B\";\n    \
    \    }\n        \n        if a >= 2.3 {\n            letter_grades[1] += \"B-\"\
    ;\n        }\n        \n        if a >= 2.0 {\n            letter_grades[2] +=\
    \ \"C+\";\n        }\n        \n        if a >= 1.7 {\n            letter_grades[2]\
    \ += \"C\";\n        }\n        \n        if a >= 1.3 {\n            letter_grades[3]\
    \ += \"C-\";\n        }\n        \n        if a >= 1.0 {\n            letter_grades[4]\
    \ += \"D+\";\n        }\n        \n        if a >= 0.7 {\n            letter_grades[4]\
    \ += \"D\";\n        }\n        \n        if a >= 0.0 {\n            letter_grades[4]\
    \ += \"D-\";\n        }\n        \n        a -= gpa;\n        gpa -= 1.0; // gpa\
    \ = gpa - 1;\n    }\n    \n    letter_grades", "    let mut grades_sorted = grades.iter().cloned().collect::<Vec<f64>>();\n\
    \    grades_sorted.sort_unstable();\n    let mut grades_sorted_str = grades_sorted.to_string();\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n    grades_sorted_str.push('+');\n\
    \    grades_sorted_str.", "    let mut letters = vec![\"\".to_string()];\n   \
    \ for grade in grades {\n        if grade < 3.0 {\n            letters.push(format!(\"\
    A+\", grade));\n        } else if grade < 3.3 {\n            letters.push(format!(\"\
    A\", grade));\n        } else if grade < 3.7 {\n            letters.push(format!(\"\
    A-\", grade));\n        } else if grade < 4.0 {\n            letters.push(format!(\"\
    B+\", grade));\n        } else if grade < 4.3 {\n            letters.push(format!(\"\
    B\", grade));\n        } else if grade < 4.7 {\n            letters.push(format!(\"\
    B-\", grade));\n        } else if grade < 5.0 {\n            letters.push(format!(\"\
    C+\", grade));\n        } else if grade < 5.3 {\n            letters.push(format!(\"\
    C\", grade));\n        } else if grade < 5.7 {\n            letters.push(format!(\"\
    C-\", grade));\n        } else if grade < 6.0 {\n            letters.push(format!(\"\
    D+\", grade));\n        } else if grade < 6.3 {\n            letters.push(format!(\"\
    D\", grade));\n        } else if grade < 6.7 {\n            letters.push(format!(\"\
    D-\", grade));\n        } else if grade < 7.0 {\n            letters.push(format!(\"\
    E\", grade));\n        } else {\n            letters.push(format!(\"F\", grade));\n\
    \        }\n    }\n    letters", "    let mut letter_grades: Vec<String> = vec![];\n\
    \    for grade in grades {\n        let mut grades_letter = vec![];\n        let\
    \ mut counter = 1;\n        for grade_char in \"AC+\"[grade as usize] {\n    \
    \        if grade > grade_char {\n                grade -= grade_char;\n     \
    \           grades_letter.push(\"D\");\n            } else {\n               \
    \ grades_letter.push(\"C\");\n                if counter == 1 { letter_grades.push(\"\
    E\"); }\n                counter = 0;\n            }\n        }\n        letter_grades.push(grade_letters);\n\
    \    }\n    return letter_grades;", "    let mut grades = grades.clone();\n  \
    \  \n    // Get the number of grades needed \n    let num_grades = grades.iter().filter(|&x|\
    \ x == x).count() + 1;\n    // Calculate the average of the grades\n    let avg_grade\
    \ = grades.iter().filter(|&x| x == x).sum() / num_grades;\n    \n    // Create\
    \ a Vec<String> and return the grade \n    grades.iter().filter(|&x| x == x).fold(\"\
    \".to_string(), |mut grade_str, &x| {\n        if x < avg_grade {\n          \
    \  grade_str += \"A\";\n        } else if x < avg_grade * 0.8 {\n            grade_str\
    \ += \"B\";\n        } else if x < avg_grade * 0.7 {\n            grade_str +=\
    \ \"C\";\n        } else if x < avg_grade * 0.6 {\n            grade_str += \"\
    D\";\n        } else if x < avg_grade * 0.5 {\n            grade_str += \"E\"\
    ;\n        } else {\n            grade_str += \"F\";\n        }\n        grade_str\n\
    \    });", "    let mut letter_grade = String::new();\n    for grade in grades\
    \ {\n        match grade {\n            0 => letter_grade.push(\"E\"),\n     \
    \       1 => letter_grade.push(\"F\"),\n            2 => letter_grade.push(\"\
    F\"),\n            3 | 4 => letter_grade.push(\"F\"),\n            5 => letter_grade.push(\"\
    F\"),\n            _ => {\n                let letter_grade = grade as char;\n\
    \                letter_grade.to_string().chars().for_each(|c| {\n           \
    \         match c {\n                        'A' => letter_grade.push(\"+\"),\n\
    \                        'B' => letter_grade.push(\"-\"),\n                  \
    \      'C' => letter_grade.push(\"+\"),\n                        'D' => letter_grade.push(\"\
    -\"),\n                        'E' => letter_grade.push(\"+\"),\n            \
    \            'F' => letter_grade.push(\"0\"),\n                        _ => unimplemented!()\n\
    \                    }\n                });\n            }\n        }\n    }\n\
    \    vec![letter_grade]", "    let mut letters: Vec<String> = Vec::new();\n\n\
    \    for grade in grades {\n        if grade < 4.0 {\n            letters.push(format!(\"\
    A+\", grade));\n        } else if grade < 3.7 {\n            letters.push(format!(\"\
    A\", grade));\n        } else if grade < 3.3 {\n            letters.push(format!(\"\
    A-\", grade));\n        } else if grade < 3.0 {\n            letters.push(format!(\"\
    B+\", grade));\n        } else if grade < 2.7 {\n            letters.push(format!(\"\
    B\", grade));\n        } else if grade < 2.3 {\n            letters.push(format!(\"\
    B-\", grade));\n        } else if grade < 2.0 {\n            letters.push(format!(\"\
    C+\", grade));\n        } else if grade < 1.7 {\n            letters.push(format!(\"\
    C\", grade));\n        } else if grade < 1.3 {\n            letters.push(format!(\"\
    C-\", grade));\n        } else if grade < 1.0 {\n            letters.push(format!(\"\
    D+\", grade));\n        } else if grade < 0.7 {\n            letters.push(format!(\"\
    D\", grade));\n        } else if grade < 0.0 {\n            letters.push(format!(\"\
    D-\", grade));\n        } else {\n            letters.push(format!(\"E\", grade));\n\
    \        }\n    }\n\n    return letters;", "    let mut grades_sorted = grades.iter().cloned().sorted();\n\
    \    let mut result = vec![];\n\n    let mut min_grade : Option<f64> = None;\n\
    \    let mut max_grade : Option<f64> = None;\n    let mut gpa_max = grades_sorted.last().unwrap();\n\
    \    let mut gpa_min = grades_sorted.first().unwrap();\n\n    for grade in grades_sorted\
    \ {\n        let mut temp_gpa = grade;\n        let mut temp_letter = \"\";\n\n\
    \        // Calculate the gpa.\n        if temp_grade > gpa_max {\n          \
    \  temp_gpa = gpa_max;\n        }\n\n        if temp_grade < gpa_min {\n     \
    \       temp_gpa = gpa_min;\n        }\n\n        // Calculate the letter grade.\n\
    \        if temp_grade > gpa_min {\n            temp_letter = \"A+\";\n      \
    \  } else if temp_grade < gpa_max {\n            temp_letter = \"A\";\n      \
    \  } else if temp_grade == gpa_max {\n            temp_letter = \"E\";\n     \
    \   } else {\n            temp_letter = \"D-\";\n        }\n\n        // Add grade\
    \ to result.\n        result.push(temp_letter);\n    }\n\n    result", "    let\
    \ mut letter_grades: Vec<String> = vec![];\n    for grade in grades {\n      \
    \  match grade {\n            4.0 => letter_grades.push(\"A+\".to_string()),\n\
    \            > 3.7 => letter_grades.push(\"A\".to_string()),\n            > 3.3\
    \ => letter_grades.push(\"A-\".to_string()),\n            > 3.0 => letter_grades.push(\"\
    B+\".to_string()),\n            > 2.7 => letter_grades.push(\"B\".to_string()),\n\
    \            > 2.3 => letter_grades.push(\"B-\".to_string()),\n            > 2.0\
    \ => letter_grades.push(\"C+\".to_string()),\n            > 1.7 => letter_grades.push(\"\
    C\".to_string()),\n            > 1.3 => letter_grades.push(\"C-\".to_string()),\n\
    \            > 1.0 => letter_grades.push(\"D+\".to_string()),\n            > 0.7\
    \ => letter_grades.push(\"D\".to_string()),\n            > 0.0 => letter_grades.push(\"\
    D-\".to_string()),\n            0.0 => letter_grades.push(\"E\".to_string()),\n\
    \            _ => panic!(\"Something went wrong...\"),\n        }\n    }\n   \
    \ return letter_grades;", "    let mut grades_vec: Vec<String> = grades.iter().map(|f|\
    \ \n        if f > 0.0 {\n            if f < 3.0 {\n                format!(\"\
    A+\", f)\n            } else if f < 3.3 {\n                format!(\"A\", f)\n\
    \            } else if f < 3.7 {\n                format!(\"A-\", f)\n       \
    \     } else if f < 4.0 {\n                format!(\"B+\", f)\n            } else\
    \ if f < 2.7 {\n                format!(\"B\", f)\n            } else if f < 2.3\
    \ {\n                format!(\"B-\", f)\n            } else if f < 2.0 {\n   \
    \             format!(\"C+\", f)\n            } else if f < 1.7 {\n          \
    \      format!(\"C\", f)\n            } else if f < 1.3 {\n                format!(\"\
    C-\", f)\n            } else if f < 1.0 {\n                format!(\"D+\", f)\n\
    \            } else if f < 0.7 {\n                format!(\"D\", f)\n        \
    \    } else {\n                format!(\"D-\", f)\n            }\n        } else\
    \ {\n            format!(\"E\", f)\n        }\n    ).collect();\n    grades_vec.pop();\n\
    \    grades_vec", "    let len = grades.len();\n    let mut grades = grades.iter().cloned();\n\
    \    grades.sort();\n    grades.reverse();\n\n    let mut letter_grades = Vec::new();\n\
    \    let mut gpas = Vec::new();\n\n    // We need to get gpas and letter_grades\n\
    \    // For this we are using an auxiliary array for both gpas and letter_grades\n\
    \    let mut grades_sum = 0;\n    let mut gpa_sum = 0.0;\n\n    for grade in grades\
    \ {\n        grades_sum += grade;\n        gpa_sum += grade * grade;\n    }\n\n\
    \    for grade in grades {\n        if grades_sum != 0.0 {\n            gpas.push(grade\
    \ / grades_sum);\n            letter_grades.push(match grade {\n             \
    \   0 => \"D\",\n                1 => \"D\",\n                2 => \"D\",\n  \
    \              3 => \"D-\", \n                4 => \"D-\", \n                5\
    \ => \"D-\", \n                6 => \"D-\", \n                7 => \"D-\", \n\
    \                8 => \"D-\", \n                9 => \"D-\", \n              \
    \  10 => \"D-\", \n                11 => \"D-\", \n                12 => \"D-\"\
    , \n                13 => \"D-\", \n                14 => \"D-\", \n         \
    \       15 => \"D-\", \n                16 => \"D-\", \n                17 =>\
    \ \"D-\", \n                18 => \"D-\", \n                19 => \"D-\", \n \
    \               20 => \"D-\", \n                21 => \"D-\", \n             \
    \   22 => \"D-\", \n                23 => \"D-\", \n                24 => \"D-\"\
    , \n                25 => \"D-\", \n                26 => \"D-\", \n         \
    \       27 => \"D-\", \n                28 => \"D-\", \n                29 =>\
    \ \"D-\", \n                30 => \"D-\", \n                31 => \"D-\", \n \
    \               32 => \"D-\", \n                33 => \"D-\", \n             \
    \   34 => \"D-\", \n                35 => \"D-\", \n                36 => \"D-\"\
    , \n                37 => \"D-\", \n                38 => \"D-\", \n         \
    \       39 => \"D-\", \n                40 => \"D-\", \n                41 =>\
    \ \"D-\", \n                42 => \"D-\", \n                43 => \"D-\", \n \
    \               44 => \"D-\", \n                45 => \"D-\", \n             \
    \   46 => \"D-\", \n                47 => \"D-\", \n                48 => \"D-\"\
    , \n                49 ", "    let gpa = grades.iter().map(|x| *x).sum();\n  \
    \  let mut letter_grades = vec![];\n    let mut i = 1;\n    while i < gpa.trunc()\
    \ + 1 {\n        letter_grades.push(format!(\"{}+\", i));\n        i += 1;\n \
    \   }\n    i = 1;\n    while i <= gpa.trunc() + 1 {\n        if i <= gpa {\n \
    \           letter_grades.push(format!(\"{}\", i));\n        }\n        i += 1;\n\
    \    }\n    letter_grades.push(format!(\"{}\", 0));\n    letter_grades", "   \
    \ let mut grades_string: Vec<String> = vec![\"\".to_string()];\n    let mut grades_num:\
    \ Vec<f64> = grades.clone();\n\n    // TODO: write your solution here\n    grades_string.push(\"\
    E\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0\".to_string());\n    grades_string.push(\"0\".to_string());\n    grades_string.push(\"\
    0", "    let mut grades_string = String::new();\n    for grade in grades.iter()\
    \ {\n        let grade = match grade {\n            4.0 => \"A+\",\n         \
    \   > 3.7 => \"A\",\n            > 3.3 => \"A-\",\n            > 3.0 => \"B+\"\
    ,\n            > 2.7 => \"B\",\n            > 2.3 => \"B-\",\n            > 2.0\
    \ => \"C+\",\n            > 1.7 => \"C\",\n            > 1.3 => \"C-\",\n    \
    \        > 1.0 => \"D+\",\n            > 0.7 => \"D\",\n            > 0.0 => \"\
    D-\",\n            0.0 => \"E\"\n        };\n        grades_string.push_str(&grade);\n\
    \    }\n    grades_string.chars().collect()", "    let mut total_grade = 0.0;\
    \ \n    let mut total_letter_grade = String::new(); \n\n    for grade in grades\
    \ {\n        if grade < 3.0 {\n            total_grade += grade as f64;\n    \
    \    }\n    }\n\n    if total_grade < 0.0 {\n        total_grade += 0.0;\n   \
    \ }\n\n    let mut current_grade = 0.0;\n\n    for grade in grades {\n       \
    \ current_grade += grade as f64;\n\n        if current_grade > total_grade {\n\
    \            let letter_grade = total_letter_grade + &\"-\";\n            total_grade\
    \ = current_grade;\n            total_letter_grade = letter_grade;\n        }\
    \ else {\n            let letter_grade = total_letter_grade + &\"+\";\n      \
    \      total_grade = current_grade;\n            total_letter_grade = letter_grade;\n\
    \        }\n    }\n\n    vec![total_letter_grade]", "    grades.iter().filter(|f|\
    \ f >= 0.0).step(1.0).map(|grade| {\n        match grade {\n            0..1.0\
    \ => String::from(\"D\"),\n            1.0 => String::from(\"C\"),\n         \
    \   2.0 => String::from(\"B\"),\n            3.0 => String::from(\"A\"),\n   \
    \         3.1 => String::from(\"A-\"),\n            3.2 => String::from(\"B+\"\
    ),\n            3.3 => String::from(\"B\"),\n            3.4 => String::from(\"\
    B-\"),\n            3.5 => String::from(\"C+\"),\n            3.6 => String::from(\"\
    C\"),\n            3.7 => String::from(\"C+\"),\n            3.8 => String::from(\"\
    C-\"),\n            3.9 => String::from(\"D+\"),\n            4.0 => String::from(\"\
    E\"),\n            _ => String::from(\"unknown\")\n        }\n    }).collect()",
  "    let mut letter_grades = Vec::new();\n    let gpas = grades.clone();\n\n   \
    \ // First we check for grade < 0 since it wouldn't make sense\n    if grade_is_negative(grades.clone())\
    \ {\n        gpas.push(0.0);\n    }\n\n    // Then we check if grade > 0 and if\
    \ so push letter grade\n    if grade_is_positive(gpas.clone()) {\n        let\
    \ mut first_letter = String::from(\"A\");\n        let mut last_letter = String::from(\"\
    A\");\n\n        // If the grade is between 3.0 and 3.7, we can use the letter\
    \ grade\n        // of the students\n        if grades.iter().any(|x| x >= 3.0\
    \ && x < 3.7) {\n            first_letter = match grades.iter().find(|x| x > 3.0\
    \ && x < 3.7) {\n                Some(x) => String::from(\"A\" + x.to_string()),\n\
    \                None => String::from(\"A\"),\n            };\n        }\n\n \
    \       // If the grade is between 3.3 to 3.7, we can use the letter grade\n \
    \       // of the students\n        if grades.iter().any(|x| x >= 3.3 && x < 3.7)\
    \ {\n            last_letter = match grades.iter().find(|x| x > 3.3 && x < 3.7)\
    \ {\n                Some(x) => String::from(\"A\" + x.to_string()),\n       \
    \         None => String::from(\"A\"),\n            };\n        }\n\n        //\
    \ If the grade is between 3.0 to 3.3, we can use the letter grade\n        //\
    \ of the students\n        if grades.iter().any(|x| x >= 3.0 && x < 3.3) {\n \
    \           first_letter = match grades.iter().find(|x| x > 3.0 && x < 3.3) {\n\
    \                Some(x) => String::from(\"B\" + x.to_string()),\n           \
    \     None => String::from(\"B\"),\n            };\n        }\n\n        // If\
    \ the grade is between 2.7 and 2.3, we can use the letter grade\n        // of\
    \ the students\n        if grades.iter().any(|x| x >= 2.7 && x < 2.3) {\n    \
    \        last_letter = match grades.iter().find(|x| x > 2.7 && x < 2.3) {\n  \
    \              Some(x) => String::from(\"B\" + x.to_string()),\n             \
    \   None => String::from(\"B\"),\n            };\n        }\n\n        // If the\
    \ grade is between 2.3 to 2.0, we can use the letter grade\n        // of the\
    \ students\n        if grades.iter().any(|x| x >= 2.3 && x < 2.7) {\n        \
    \    first_letter = match grades.iter().find(|x| x > 2.3 && x < 2.7) {", "   \
    \ let mut letter_grades: Vec<String> = vec![];\n    let mut gpas = grades.iter().map(|f|\
    \ f * 4.0).collect::<Vec<f64>>();\n    let mut i = 0;\n    loop {\n        let\
    \ index = gpas.len() - i;\n        if index < 0 {\n            break;\n      \
    \  }\n        let mut gpa = gpas[index].abs();\n        if gpa < 3.0 {\n     \
    \       gpa += 4.0;\n        }\n        let letter_grade = match gpa {\n     \
    \       2.7 => \"A+\".to_string(),\n            2.3 => \"A-\".to_string(),\n \
    \           2.0 => \"B+\".to_string(),\n            2.7 => \"B\".to_string(),\n\
    \            2.3 => \"B-\".to_string(),\n            2.0 => \"C+\".to_string(),\n\
    \            1.7 => \"C\".to_string(),\n            1.3 => \"C-\".to_string(),\n\
    \            1.0 => \"D+\".to_string(),\n            0.7 => \"D\".to_string(),\n\
    \            0.0 => \"D-\".to_string(),\n            _ => \"E\".to_string(),\n\
    \        };\n        letter_grades.push(letter_grade);\n        i += 1;\n    }\n\
    \    letter_grades", '    // Write your code here', "    let mut letter_grades\
    \ = Vec::new();\n    let mut temp_grade = grades.clone();\n    let mut cur_gpa\
    \ : f64 = grades.iter().sum();\n    \n    let mut cur_letter_grade : String;\n\
    \    \n    // Iterate over all the grades\n    for cur_grade in grades {\n   \
    \     // Get the current GPA\n        cur_gpa /= cur_grade;\n\n        // The\
    \ current letter grade is based on the GPA\n        let cur_letter_grade = match\
    \ cur_grade {\n            0 => \"E\",\n            1 => \"D-\", // Falls through\n\
    \            2 => \"D\",\n            3 => \"C-\", // Falls through\n        \
    \    4 => \"C\",\n            5 => \"B-\", // Falls through\n            6 =>\
    \ \"B\",\n            7 => \"A-\", // Falls through\n            8 => \"A\",\n\
    \            9 => \"A+\", // Falls through\n            10 => \"A\",\n       \
    \     11 => \"A+\", // Falls through\n            12 => \"A\",\n            13\
    \ => \"A+\", // Falls through\n            14 => \"A\",\n            15 => \"\
    A+\", // Falls through\n            16 => \"A\",\n            17 => \"A+\", //\
    \ Falls through\n            18 => \"A\",\n            19 => \"A+\", // Falls\
    \ through\n            20 => \"A\",\n            21 => \"A+\", // Falls through\n\
    \            22 => \"A\",\n            23 => \"A+\", // Falls through\n      \
    \      24 => \"A\",\n            25 => \"A+\", // Falls through\n            26\
    \ => \"A\",\n            _ => \"A\",\n        };\n\n        // If the current\
    \ GPA is greater than the previous one\n        // the letter grade for the current\
    \ GPA is appended to the\n        // letter_grades vector\n        if cur_gpa\
    \ > temp_grade.iter().sum() {\n            temp_grade.pop();\n            letter_grades.push(cur_letter_grade);\n\
    \        }\n\n        // If the current GPA is less than the previous one\n  \
    \      // the letter grade for the current GPA is appended to the\n        //\
    \ letter_grades vector\n        if cur_gpa < temp_grade.iter().sum() {\n     \
    \       temp_grade.pop();\n            letter_grades.push(cur_letter_grade);\n\
    \        }\n\n        // Append the current GPA to the temp_grade\n        temp_grade.push(cur_gpa);\n\
    \    }\n\n    return letter_grades;", "    let mut grades_string = Vec::new();\n\
    \    let mut grades_counter = Vec::new();\n    let mut gpa_index = 0;\n    let\
    \ mut letter_grade_index = 0;\n    for grade in grades {\n        grades_string.push(\"\
    E\");\n        grades_counter.push(0);\n        if gpa_index <= grades_string.len()\
    \ {\n            grades_counter[gpa_index] += 1;\n        }\n        gpa_index\
    \ += 1;\n    }\n    let mut counter = 1;\n    let mut letter_grade_index = 0;\n\
    \    let mut letter_grade = vec![\"E\"];\n    for grade in grades {\n        while\
    \ grades_counter[letter_grade_index] >= counter {\n            letter_grade.push(\"\
    +\");\n            counter += 1;\n        }\n        if letter_grade_index < letter_grade.len()\
    \ {\n            letter_grade[letter_grade_index] += grade;\n            counter\
    \ += 1;\n            letter_grade_index += 1;\n        }\n    }\n    letter_grade",
  "    let mut grade = grades.first();\n    let mut result = Vec::new();\n    loop\
    \ {\n        if grade == 0.0 {\n            result.push(\"E\");\n            break;\n\
    \        }\n        let grade = grade - grades.first();\n        if grade >= 0.5\
    \ {\n            result.push(\"B-\");\n        } else if grade >= 0.3 {\n    \
    \        result.push(\"B-\");\n        } else if grade >= 0.1 {\n            result.push(\"\
    B-\");\n        } else if grade >= 0.02 {\n            result.push(\"B-\");\n\
    \        } else if grade >= 0.005 {\n            result.push(\"B-\");\n      \
    \  } else if grade >= 0.001 {\n            result.push(\"B-\");\n        } else\
    \ if grade >= 0.0005 {\n            result.push(\"B-\");\n        } else if grade\
    \ >= 0.0001 {\n            result.push(\"B-\");\n        } else if grade >= 0.00005\
    \ {\n            result.push(\"B-\");\n        } else if grade >= 0.00001 {\n\
    \            result.push(\"B-\");\n        } else {\n            result.push(\"\
    B-\");\n        }\n        grade += 0.5;\n    }\n    result", "    let mut letter_grades\
    \ = Vec::new();\n    for i in 0..grades.len() {\n        let x = grades[i];\n\
    \        let mut y = x;\n        for j in 0..2 {\n            let z = j / 2;\n\
    \            let w = (x - z * x) / y;\n            if w*w > 0.000000001 {\n  \
    \              y = z;\n            } else {\n                break;\n        \
    \    }\n        }\n        if y != x {\n            letter_grades.push(String::from(format!(\"\
    {}+\", i)));\n        } else {\n            letter_grades.push(String::from(format!(\"\
    {}\", i)));\n        }\n    }\n    letter_grades", "    let mut grades_string\
    \ = String::new();\n    for i in 0..grades.len()-1 {\n        if grades[i] > 0.0\
    \ {\n            let grade = grades[i];\n            let grade_string = grade.to_string();\n\
    \            grades_string.push_str(grade_string);\n        } else {\n       \
    \     grades_string.push_str(\"E\");\n        }\n    }\n    return grades_string.split_whitespace().collect();",
  "    if grades.len() == 0 {\n        return vec![\"E\"];\n    }\n    let mut grades:\
    \ Vec<String> = vec![\"E\"];\n    let mut grade = grades[0] as f64;\n    let mut\
    \ temp_grade = grade;\n    for grade in grades {\n        if grade > temp_grade\
    \ {\n            temp_grade = grade;\n        }\n    }\n    for grade in grades\
    \ {\n        if grade > temp_grade {\n            grades.push(format!(\"{}+\"\
    , grade / temp_grade));\n        }\n    }\n    grades", "    let mut grades_string\
    \ = String::new();\n    let mut current_letter = \"\";\n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            grades_string.push_str(\"D+\");\n \
    \       } else {\n            if grade > 2.0 {\n                grades_string.push_str(\"\
    D\");\n            } else {\n                if grade > 1.2 {\n              \
    \      grades_string.push_str(\"C-\");\n                } else {\n           \
    \         if grade > 1.0 {\n                        grades_string.push_str(\"\
    C\");\n                    } else {\n                        if grade > 0.7 {\n\
    \                            grades_string.push_str(\"B-\");\n               \
    \         } else {\n                            if grade > 0.4 {\n           \
    \                     grades_string.push_str(\"B\");\n                       \
    \     } else {\n                                if grade > 0.3 {\n           \
    \                         grades_string.push_str(\"B-\");\n                  \
    \              } else {\n                                    if grade > 0.2 {\n\
    \                                        grades_string.push_str(\"B+\");\n   \
    \                                 } else {\n                                 \
    \       grades_string.push_str(\"A\");\n                                    }\n\
    \                                }\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n    }\n    grades_string.to_string().trim_end();", "    grades\n   \
    \     .iter()\n        .enumerate()\n        .filter_map(|(i, grade_) -> grade_\
    \ >= 2.0 || grade_ < 0.0 || grade_ > 3.0)\n        .filter(|grade_| grade_ >=\
    \ 0.0 || grade_ < 1.0)\n        .collect()", "    grades\n        .iter()\n  \
    \      .map(|grade| {\n            if grade < 3.0 {\n                return \"\
    A+\" as String;\n            }\n            if grade < 3.3 {\n               \
    \ return \"A\" as String;\n            }\n            if grade < 3.7 {\n     \
    \           return \"A-\" as String;\n            }\n            if grade < 4.0\
    \ {\n                return \"B+\" as String;\n            }\n            if grade\
    \ < 4.3 {\n                return \"B\" as String;\n            }\n          \
    \  if grade < 4.7 {\n                return \"B-\" as String;\n            }\n\
    \            if grade < 5.0 {\n                return \"C+\" as String;\n    \
    \        }\n            if grade < 5.3 {\n                return \"C\" as String;\n\
    \            }\n            if grade < 5.7 {\n                return \"C-\" as\
    \ String;\n            }\n            if grade < 6.0 {\n                return\
    \ \"D+\" as String;\n            }\n            if grade < 6.3 {\n           \
    \     return \"D\" as String;\n            }\n            if grade < 6.7 {\n \
    \               return \"D-\" as String;\n            }\n            if grade\
    \ < 7.0 {\n                return \"E\" as String;\n            }\n        })\n\
    \        .collect()", "    let mut grades_sorted: Vec<f64> = grades.into_iter().sorted().collect();\n\
    \    \n    let mut counter = 0;\n    let mut letter_grade = String::new();\n \
    \   for i in grades_sorted {\n        if i >= 4.0 && counter <= grades.len() -\
    \ 1 {\n            letter_grade += \"+\";\n            counter++;\n        }\n\
    \        if i >= 3.7 && counter <= grades.len() - 1 {\n            letter_grade\
    \ += \"A\";\n            counter++;\n        }\n        if i >= 3.3 && counter\
    \ <= grades.len() - 1 {\n            letter_grade += \"A-\";\n            counter++;\n\
    \        }\n        if i >= 3.0 && counter <= grades.len() - 1 {\n           \
    \ letter_grade += \"B+\";\n            counter++;\n        }\n        if i >=\
    \ 2.7 && counter <= grades.len() - 1 {\n            letter_grade += \"B\";\n \
    \           counter++;\n        }\n        if i >= 2.3 && counter <= grades.len()\
    \ - 1 {\n            letter_grade += \"B-\";\n            counter++;\n       \
    \ }\n        if i >= 2.0 && counter <= grades.len() - 1 {\n            letter_grade\
    \ += \"C+\";\n            counter++;\n        }\n        if i >= 1.7 && counter\
    \ <= grades.len() - 1 {\n            letter_grade += \"C\";\n            counter++;\n\
    \        }\n        if i >= 1.3 && counter <= grades.len() - 1 {\n           \
    \ letter_grade += \"C-\";\n            counter++;\n        }\n        if i >=\
    \ 1.0 && counter <= grades.len() - 1 {\n            letter_grade += \"D+\";\n\
    \            counter++;\n        }\n        if i >= 0.7 && counter <= grades.len()\
    \ - 1 {\n            letter_grade += \"D\";\n            counter++;\n        }\n\
    \        if i >= 0.0 && counter <= grades.len() - 1 {\n            letter_grade\
    \ += \"D-\";\n            counter++;\n        }\n        if i >= 0.0 {\n     \
    \       letter_grade += \"E\";\n            counter = 0;\n        }\n    }\n \
    \   return vec![letter_grade];", "    let mut grades_str = vec![];\n    for grade\
    \ in grades.iter() {\n        if grade < 3.0 { grades_str.push(\"E\".to_string());\
    \ }\n        if grade < 2.0 { grades_str.push(\"B-\".to_string()); }\n       \
    \ if grade < 1.7 {\n            if grade < 1.3 { grades_str.push(\"A-\".to_string());\
    \ }\n            if grade < 1.0 { grades_str.push(\"A-\".to_string()); }\n   \
    \         if grade < 0.7 { grades_str.push(\"B-\".to_string()); }\n          \
    \  if grade < 0.3 { grades_str.push(\"C-\".to_string()); }\n            if grade\
    \ < 0.0 { grades_str.push(\"C-\".to_string()); }\n            if grade < 0.1 {\
    \ grades_str.push(\"D-\".to_string()); }\n            if grade < 0.7 { grades_str.push(\"\
    D+\".to_string()); }\n        }\n        if grade < 1.7 { grades_str.push(\"B+\"\
    .to_string()); }\n        if grade < 2.0 { grades_str.push(\"B\".to_string());\
    \ }\n        if grade < 3.0 { grades_str.push(\"C\".to_string()); }\n        if\
    \ grade < 4.0 { grades_str.push(\"A+\".to_string()); }\n    }\n    grades_str",
  "    let max_grade = grades.max();\n    let min_grade = grades.min();\n    let grades_range\
    \ = max_grade - min_grade as f64;\n    grades\n        .iter()\n        .enumerate()\n\
    \        .map(|(index, grade)| {\n            let diff = grade - min_grade;\n\
    \            diff\n                .abs()\n                .checked_mul(grades_range\
    \ as f64)\n                .unwrap_or(0.0f64)\n        })\n        .filter(|grade|\
    \ grade > 0.0f64)\n        .collect::<Vec<String>>()", "    let mut result: Vec<String>\
    \ = vec![];\n    let grade = grades.min();\n    let mut index = 0;\n    while\
    \ index < grades.len() {\n        let mut new_grade: Vec<String> = vec![];\n \
    \       let mut max_grade: usize = 0;\n        for grade in grades {\n       \
    \     if grade > grade {\n                new_grade.push('-');\n            }\
    \ else if grade > max_grade {\n                max_grade = grade;\n          \
    \  }\n        }\n        new_grade.push('C');\n        new_grade.push('C');\n\
    \        new_grade.push(numerical_letter_grade(grades)[index].clone());\n    \
    \    let mut min_index: usize = 0;\n        for grade in grades {\n          \
    \  if grade < grade {\n                new_grade.push('-');\n            } else\
    \ if grade < min_index {\n                min_index = grade;\n            }\n\
    \        }\n        let mut min_grade: usize = grades[min_index];\n        for\
    \ grade in grades {\n            if grade < grade && grade != min_grade {\n  \
    \              new_grade.push('-');\n            } else if grade < min_grade &&\
    \ grade != min_index {\n                new_grade.push('-');\n            }\n\
    \        }\n        result .= new_grade;\n        index++;\n    }\n    result",
  "    let mut grades_string: Vec<String> = Vec::new();\n    grades.iter().enumerate().for_each(|(index,\
    \ grade)| {\n        if grade < 4.0 {\n            grades_string.push(format!(\"\
    A+\"));\n        }\n        else if grade >= 4.0 && grade < 3.7 {\n          \
    \  grades_string.push(format!(\"A\"));\n        }\n        else if grade >= 3.7\
    \ && grade < 3.3 {\n            grades_string.push(format!(\"A-\"));\n       \
    \ }\n        else if grade >= 3.3 && grade < 3.0 {\n            grades_string.push(format!(\"\
    B+\"));\n        }\n        else if grade >= 3.0 && grade < 2.7 {\n          \
    \  grades_string.push(format!(\"B\"));\n        }\n        else if grade >= 2.7\
    \ && grade < 2.3 {\n            grades_string.push(format!(\"B-\"));\n       \
    \ }\n        else if grade >= 2.3 && grade < 2.0 {\n            grades_string.push(format!(\"\
    C+\"));\n        }\n        else if grade >= 2.0 && grade < 1.7 {\n          \
    \  grades_string.push(format!(\"C\"));\n        }\n        else if grade >= 1.7\
    \ && grade < 1.3 {\n            grades_string.push(format!(\"C-\"));\n       \
    \ }\n        else if grade >= 1.3 && grade < 1.0 {\n            grades_string.push(format!(\"\
    D+\"));\n        }\n        else if grade >= 1.0 && grade < 0.7 {\n          \
    \  grades_string.push(format!(\"D\"));\n        }\n        else {\n          \
    \  grades_string.push(format!(\"D-\"));\n        }\n    });\n    grades_string.push(\"\
    E\");\n    grades_string", "    let mut letter_grades: Vec<String> = Vec::new();\n\
    \n    // Find the highest grade in the array\n    let mut max_grade: f64 = grades.iter().max().unwrap();\n\
    \    // If the array has only one grade, return an empty vector\n    if grades.len()\
    \ == 1 {\n        return Vec::new();\n    }\n    // If the array has multiple\
    \ grades find the smallest grade\n    if grades.len() > 1 {\n        let mut min_grade:\
    \ f64 = grades.iter().min().unwrap();\n        // If the smallest grade is less\
    \ than the highest grade, set max_grade to the highest grade\n        if min_grade\
    \ < max_grade {\n            max_grade = min_grade;\n        }\n    }\n    \n\
    \    // Iterate over the grades and apply the letter grade formulas\n    for (index,\
    \ grade) in grades.iter().enumerate() {\n        if grade < max_grade {\n    \
    \        // Grade is less than max_grade, apply A-\n            letter_grades.push(format!(\"\
    A-\", index));\n        }\n        \n        if grade >= max_grade {\n       \
    \     // Grade is greater than max_grade, apply B+ \n            letter_grades.push(format!(\"\
    B+\", index));\n        }\n\n        if grade < min_grade {\n            // Grade\
    \ is less than min_grade, apply C- \n            letter_grades.push(format!(\"\
    C-\", index));\n        }\n\n        if grade >= min_grade {\n            // Grade\
    \ is greater than min_grade, apply C\n            letter_grades.push(format!(\"\
    C\", index));\n        }\n\n        if grade == 0.0 {\n            // Grade is\
    \ 0.0, apply D- \n            letter_grades.push(format!(\"D-\", index));\n  \
    \      }\n\n        if grade > 0.0 {\n            // Grade is greater than 0.0,\
    \ apply D\n            letter_grades.push(format!(\"D\", index));\n        }\n\
    \n        if grade == min_grade {\n            // Grade is equal to min_grade,\
    \ apply E\n            letter_grades.push(format!(\"E\", index));\n        }\n\
    \    }\n    \n    return letter_grades;", "    if grades.len() == 0 {\n      \
    \  return Vec::new();\n    }\n    let mut ret: Vec<String> = Vec::new();\n   \
    \ \n    for i in grades.iter() {\n        if i > 1.0 {\n            ret.push(\"\
    D+\");\n            break;\n        } else if i > 0.7 {\n            ret.push(\"\
    D\");\n            break;\n        } else if i > 0.3 {\n            ret.push(\"\
    C-\");\n            break;\n        } else if i > 0.1 {\n            ret.push(\"\
    C\");\n            break;\n        } else if i > 0.0 {\n            ret.push(\"\
    B-\");\n            break;\n        } else if i > -0.7 {\n            ret.push(\"\
    B\");\n            break;\n        } else if i > -0.3 {\n            ret.push(\"\
    B-\");\n            break;\n        } else if i > -0.1 {\n            ret.push(\"\
    B\");\n            break;\n        } else if i > -0.0 {\n            ret.push(\"\
    A+\");\n            break;\n        } else if i < -0.7 {\n            ret.push(\"\
    A\");\n            break;\n        } else if i < -0.3 {\n            ret.push(\"\
    A-\");\n            break;\n        } else if i < -0.1 {\n            ret.push(\"\
    A\");\n            break;\n        } else if i < -0.0 {\n            ret.push(\"\
    E\");\n            break;\n        } else {\n            ret.push(\"A\");\n  \
    \          break;\n        }\n    }\n    \n    ret", "    let mut grades_copy\
    \ = grades.clone();\n    grades_copy.sort_unstable();\n    let mut letter_grades\
    \ = vec![];\n    let mut grade = grades_copy.first().unwrap();\n    for grade\
    \ in grades_copy {\n        if grade > grade {\n            let mut i = 0;\n \
    \           while grade - grade * grade >= grade {\n                i += 1;\n\
    \                grade -= grade * grade;\n            }\n            letter_grades.push(format!(\"\
    {}-\", i));\n        } else {\n            letter_grades.push(format!(\"+{}\"\
    , grade));\n        }\n    }\n    return letter_grades;", "    let mut letter_grade\
    \ = vec![];\n\n    for grade in grades {\n        let mut gpa = grade as f64;\n\
    \n        // If the GPA is lower than 3.0 it is considered \"A\"\n        // If\
    \ the GPA is between 4.0 and 3.7 it is considered \"A+\"\n        // If the GPA\
    \ is between 3.3 and 3.0 it is considered \"A-\"\n        // If the GPA is between\
    \ 2.7 and 2.3 it is considered \"B+\"\n        // If the GPA is between 2.3 and\
    \ 2.0 it is considered \"B\"\n        // If the GPA is between 1.7 and 1.3 it\
    \ is considered \"B-\"\n        // If the GPA is between 1.0 and 0.7 it is considered\
    \ \"C+\"\n        // If the GPA is between 0.7 and 1.0 it is considered \"C\"\n\
    \        // If the GPA is higher than 1.0 it is considered \"C-\"\n        //\
    \ If the GPA is between 0.0 (not included) and 0.7 it is considered \"D+\"\n \
    \       // If the GPA is higher than 0.7 it is considered \"D\"\n        // If\
    \ the GPA is higher than 1.0 it is considered \"D-\"\n        // If the GPA is\
    \ 0.0 it is considered \"E\"\n\n        // A + -> 4, A -> 3, 4 - -> 2, B + ->\
    \ 3, B -> 2, B - -> 1\n        // C+ -> 4, C -> 3, C- -> 2, D+ -> 3, D -> 2, D-\
    \ -> 1\n        // D+ -> 4, D -> 3, D- -> 2, E\n        // E\n\n        let mut\
    \ letter_grade_base = (gpa - 3.0).ceil() as usize;\n\n        // A -> A+\n   \
    \     // B -> B+\n        // C -> C+\n        // D -> D+\n        // D+ -> D\n\
    \        // E -> E\n        for index in 0..letter_grade_base {\n            let\
    \ letter = match index {\n                0 => \"A\",\n                1 => \"\
    A+\",\n                2 => \"A-\",\n                3 => \"B+\",\n          \
    \      4 => \"B\",\n                5 => \"B-\",\n                6 => \"C+\"\
    ,\n                7 => \"C\",\n                8 => \"C-\",\n               \
    \ 9 => \"D+\",\n                10 => \"D\",\n                11 => \"D-\",\n\
    \                _ => \"E\",\n            };\n            letter_grade.push(letter);\n\
    \        }\n    }\n\n    letter_grade", "    grades.iter()\n        .enumerate()\n\
    \        .filter(|(_, x)| x > 3.0)\n        .map(|(_, x)| {\n            match\
    \ x {\n                4.0 => \"A+\",\n                > 3.0 => \"A\",\n     \
    \           > 3.7 => \"A-\",\n                > 3.3 => \"B+\",\n             \
    \   > 2.7 => \"B\",\n                > 2.3 => \"B-\",\n                > 2.0 =>\
    \ \"C+\",\n                > 1.7 => \"C\",\n                > 1.3 => \"C-\",\n\
    \                > 1.0 => \"D+\",\n                > 0.7 => \"D\",\n         \
    \       _ => \"D-\",\n                0.0 => \"E\",\n            }\n        })\n\
    \        .collect()", "    let mut grades_iter = grades.iter();\n    let mut letter_grades\
    \ = vec![];\n    \n    if grades.len() == 0 {\n        return vec![];\n    }\n\
    \    \n    // TODO: Implement a more efficient algorithm\n    grades_iter.next();\n\
    \    grades_iter.next();\n    grades_iter.next();\n    grades_iter.next();\n \
    \   grades_iter.next();\n    grades_iter.next();\n    grades_iter.next();\n  \
    \  grades_iter.next();\n    \n    grades_iter.fold(0.0, |acc, grade| {\n     \
    \   let gpa = grade - acc;\n        let letter_grade = if gpa < 0.0 {\n      \
    \      \"D-\"\n        } else {\n            match gpa % 1.0 {\n             \
    \   0.0 <= gpa/1.0 => {\n                    let grade = gpa - gpa/1.0 + 5.0;\n\
    \                    match gpa / 10.0 {\n                        0.0 <= gpa/10.0\
    \ => {\n                            if let (Some(a), Some(b), Some(c), Some(d),\
    \ Some(e)) = \n                                grades.windows_partition() {\n\
    \                                a <= grade &&\n                             \
    \   (b > grade || b == grade && e > grade) &&\n                              \
    \  b <= c &&\n                                c <= d &&\n                    \
    \            d <= e &&\n                                a < grade &&\n       \
    \                         grade > 0.0 && \n                                e >\
    \ 0.0 =>\n                                Some(b as f64 + d as f64 - b as f64\
    \ + e as f64 + 0.2)\n                                \n                      \
    \          _ => None\n                            }\n                        }\
    \ \n                        _ => None\n                    }\n               \
    \     \n                    \n                }\n                _ => {\n    \
    \                if gpa/10.0 > 0.0 {\n                        let grade = gpa\
    \ - gpa/10.0 + 5.0;\n                        \n                        match gpa\
    \ / 10.0 {\n                            0.0 <= gpa/10.0 => {\n               \
    \                 if let (Some(a), Some(b), Some(c), Some(d), Some(e)) = \n  \
    \                                  grades.windows_partition() {\n            \
    \                        a <= grade &&\n                                    (b\
    \ > grade || b == grade && e > grade) &&\n                                   \
    \ b <= c &&\n                                    c <= d &&\n                 \
    \                   d <= e &&\n                                    a < grade &&\n\
    \                                    grade > 0.0 && \n                       \
    \             e > 0.0 =>\n                                    Some(b as f64 +\
    \ d as f64 - b as f64 + e as f64 + 0.2)\n                                    \n\
    \                                    _ => None\n                             \
    \   }\n                            } \n                            _ => None\n\
    \                        }\n                        \n                       \
    \ \n                    }\n                    ", "    let mut letter_grades:\
    \ Vec<String> = vec![];\n    let mut total_grade = grades.iter().sum();\n    let\
    \ mut grade_divisor: f64 = 2.0;\n\n    for i in grades {\n        let grade: f64\
    \ = i / grade_divisor;\n        if grade > 4.0\n            || (i > 3.0\n    \
    \            && grade < 3.7)\n            || (i > 2.0\n                && grade\
    \ < 2.7)\n            || (i > 1.0\n                && grade < 1.7)\n         \
    \   || (i > 0.0\n                && grade < 0.7)) {\n            grade_divisor\
    \ -= 0.1;\n        } else {\n            letter_grades.push(format!(\"{}\", grade\
    \ - 0.4).to_string());\n        }\n    }\n    letter_grades.push(format!(\"{}\"\
    , total_grade).to_string());\n    return letter_grades;", "    let mut grades_array\
    \ = vec![0.0; grades.len()];\n    let mut total_gpa = 0.0;\n    for grade in grades\
    \ {\n        if grade > 4.0 {\n            grades_array[0] += 1.0;\n         \
    \   total_gpa = grade - 4.0;\n        } else if grade < 3.7 {\n            grades_array[1]\
    \ += 1.0;\n            total_gpa = 4.0 - grade;\n        } else if grade < 3.3\
    \ {\n            grades_array[2] += 1.0;\n            total_gpa = 3.0 - grade;\n\
    \        } else if grade < 3.0 {\n            grades_array[3] += 1.0;\n      \
    \      total_gpa = 3.0 - grade;\n        } else if grade < 2.7 {\n           \
    \ grades_array[4] += 1.0;\n            total_gpa = 2.0 - grade;\n        } else\
    \ if grade < 2.3 {\n            grades_array[5] += 1.0;\n            total_gpa\
    \ = 2.0 - grade;\n        } else if grade < 2.0 {\n            grades_array[6]\
    \ += 1.0;\n            total_gpa = 2.0 - grade;\n        } else if grade < 1.7\
    \ {\n            grades_array[7] += 1.0;\n            total_gpa = 1.0 - grade;\n\
    \        } else if grade < 1.3 {\n            grades_array[8] += 1.0;\n      \
    \      total_gpa = 1.0 - grade;\n        } else if grade < 1.0 {\n           \
    \ grades_array[9] += 1.0;\n            total_gpa = 1.0 - grade;\n        } else\
    \ {\n            grades_array[10] += 1.0;\n            total_gpa = 1.0 - grade;\n\
    \        }\n    }\n    let mut grades_array2 = vec![0.0; grades.len()];\n    let\
    \ mut total_gpa2 = 0.0;\n    for grade in grades {\n        if grade > 4.0 {\n\
    \            grades_array2[0] += 1.0;\n            total_gpa2 = grade - 4.0;\n\
    \        } else if grade < 3.7 {\n            grades_array2[1] += 1.0;\n     \
    \       total_gpa2 = 4.0 - grade;\n        } else if grade < 3.3 {\n         \
    \   grades_array2[2] += 1.0;\n            total_gpa2 = 3.0 - grade;\n        }\
    \ else if grade < 3.0 {\n            grades_array2[3] += 1.0;\n            total_gpa2\
    \ = 3.0 - grade;\n        } else if grade < 2.7 {\n            grades_array2[4]\
    \ += 1.0;\n            total_gpa2 = 2.0 - grade;\n        } else if grade < 2.3\
    \ {\n            grades_array2", "    grades.iter().fold(Vec::new(), |v, grade|\
    \ {\n        v.push((grade as f64 - 1.0).floor() as String);\n        v.push(\"\
    +\");\n        if grade > 3.5 {\n            v.push(\"A\");\n        } else if\
    \ grade > 2.3 {\n            v.push(\"A-\");\n        } else if grade > 1.7 {\n\
    \            v.push(\"B+\");\n        } else if grade > 1.3 {\n            v.push(\"\
    B\");\n        } else if grade > 0.7 {\n            v.push(\"B-\");\n        }\
    \ else if grade > 0.3 {\n            v.push(\"C+\");\n        } else if grade\
    \ > 0.07 {\n            v.push(\"C\");\n        } else if grade > 0.03 {\n   \
    \         v.push(\"C-\");\n        } else if grade > 0.01 {\n            v.push(\"\
    D+\");\n        } else if grade > 0.007 {\n            v.push(\"D\");\n      \
    \  } else if grade > 0.003 {\n            v.push(\"D-\");\n        } else if grade\
    \ > 0.001 {\n            v.push(\"E\");\n        } else {\n            v.push(\"\
    F\");\n        }\n        v.push(\"\\n\");\n        v\n    });", "    let mut\
    \ letter_grades: Vec<String> = vec![];\n    for grade in grades {\n        match\
    \ grade {\n            0.0     => letter_grades.push(String::from(\"E\")),\n \
    \           1.0     => letter_grades.push(String::from(\"D+\")),\n           \
    \ 2.0     => letter_grades.push(String::from(\"D-\")),\n            3.0     =>\
    \ letter_grades.push(String::from(\"C+\")),\n            4.0     => letter_grades.push(String::from(\"\
    C-\")),\n            5.0     => letter_grades.push(String::from(\"B+\")),\n  \
    \          6.0     => letter_grades.push(String::from(\"B-\")),\n            7.0\
    \     => letter_grades.push(String::from(\"A+\")),\n            8.0     => letter_grades.push(String::from(\"\
    A\")),\n            9.0     => letter_grades.push(String::from(\"A- \")),\n  \
    \          10.0    => letter_grades.push(String::from(\"B+\")),\n            11.0\
    \    => letter_grades.push(String::from(\"B\")),\n            12.0    => letter_grades.push(String::from(\"\
    B-\")),\n            13.0    => letter_grades.push(String::from(\"C+\")),\n  \
    \          14.0    => letter_grades.push(String::from(\"C\")),\n            15.0\
    \    => letter_grades.push(String::from(\"C-\")),\n            16.0    => letter_grades.push(String::from(\"\
    D+\")),\n            17.0    => letter_grades.push(String::from(\"D\")),\n   \
    \         18.0    => letter_grades.push(String::from(\"D-\")),\n            19.0\
    \    => letter_grades.push(String::from(\"E\")),\n            _ => { \n      \
    \          let x = grade as f64;\n                let letter_grade = if x > 4.0\
    \ { String::from(\"A+\") } else if x > 3.7 { String::from(\"A\") } else if x >\
    \ 3.3 { String::from(\"A-\") } else if x > 3.0 { String::from(\"B+\") } else if\
    \ x > 2.7 { String::from(\"B\") } else if x > 2.3 { String::from(\"B-\") } else\
    \ if x > 2.0 { String::from(\"C+\") } else if x > 1.7 { String::from(\"C\") }\
    \ else if x > 1.3 { String::from(\"C-\") } else { String::from(\"D+\") } else\
    \ if x > 1.0 { String::from(\"D\") } else if x > 0.7 { String::from(\"D-\") }\
    \ else { String::from(\"E\") };\n                letter_grades.push(letter_grade);\n\
    \            }\n        }\n", '    // Your code here', "    let mut letter_grades:\
    \ Vec<String> = vec![];\n    for (i, grade) in grades.iter().enumerate() {\n \
    \       let mut grade_decimal: f64 = grade as f64;\n        match grade {\n  \
    \          > 3.7 => grade_decimal = grade_decimal - 1;\n            > 3.3 => grade_decimal\
    \ = grade_decimal + 1;\n            > 3.0 => grade_decimal = grade_decimal - 1;\n\
    \            > 2.7 => grade_decimal = grade_decimal - 1;\n            > 2.3 =>\
    \ grade_decimal = grade_decimal + 1;\n            > 2.0 => grade_decimal = grade_decimal\
    \ + 1;\n            > 1.7 => grade_decimal = grade_decimal + 1;\n            >\
    \ 1.3 => grade_decimal = grade_decimal + 1;\n            > 1.0 => grade_decimal\
    \ = grade_decimal - 1;\n            > 0.7 => grade_decimal = grade_decimal + 1;\n\
    \            > 0.0 => grade_decimal = grade_decimal + 1;\n            _ => {}\n\
    \        }\n        letter_grades.push(format!(\"{:.1}\", grade_decimal).to_string());\n\
    \    }\n    return letter_grades;", "    let mut grades_grade = grades.iter().cloned();\n\
    \    for grade& in grades_grade {\n        let mut numerator = grade as f64;\n\
    \        let mut denominator = 1;\n        let mut remainder = 0;\n        while\
    \ numerator > remainder {\n            let remainder = numerator % remainder;\n\
    \            numerator /= remainder;\n            denominator += 1;\n        }\n\
    \        if denominator > 1 {\n            grades_grade.filter_map(|x| if x <\
    \ 0.95 { Some(x.to_string()) } else { None }).collect();\n        } else {\n \
    \           grades_grade.filter_map(|x| if x < 3.0 { Some(x.to_string()) } else\
    \ { None }).collect();\n        }\n    }\n    grades_grade.filter_map(|x| if x\
    \ <= 0.5 { Some(x.to_string()) } else { None }).collect();", "    // Your code\
    \ goes here\n    let mut total_grade = grades.iter().sum(); // Find the total\
    \ of the grades\n    if total_grade < 4.0\n        || (total_grade - 4.0) * 10\
    \ >= grades.iter().count()\n    {\n        return vec![\"\"];\n    }\n    let\
    \ mut letter_grade = vec![];\n    for i in 0..grades.len() - 1 {\n        if total_grade\
    \ - grades[i] >= 3.0 {\n            letter_grade.push(\"B+\");\n            total_grade\
    \ -= 3.0;\n        }\n        if total_grade - grades[i] >= 2.7 {\n          \
    \  letter_grade.push(\"B\");\n            total_grade -= 2.7;\n        }\n   \
    \     if total_grade - grades[i] >= 2.3 {\n            letter_grade.push(\"B-\"\
    );\n            total_grade -= 2.3;\n        }\n        if total_grade - grades[i]\
    \ >= 2.0 {\n            letter_grade.push(\"C+\");\n            total_grade -=\
    \ 2.0;\n        }\n        if total_grade - grades[i] >= 1.7 {\n            letter_grade.push(\"\
    C\");\n            total_grade -= 1.7;\n        }\n        if total_grade - grades[i]\
    \ >= 1.3{\n            letter_grade.push(\"C-\");\n            total_grade -=\
    \ 1.3;\n        }\n        if total_grade - grades[i] >= 1.0{\n            letter_grade.push(\"\
    D+\");\n            total_grade -= 1.0;\n        }\n        if total_grade - grades[i]\
    \ >= 0.7{\n            letter_grade.push(\"D\");\n            total_grade -= 0.7;\n\
    \        }\n        if total_grade - grades[i] >= 0.0{\n            letter_grade.push(\"\
    D-\");\n            total_grade -= 0.0;\n        }\n        if total_grade - grades[i]\
    \ > -3.0 {\n            letter_grade.push(\"E\");\n            total_grade -=\
    \ -3.0;\n        }\n    }\n    letter_grade.reverse();\n    letter_grade", " \
    \   let grades_sum = grades.iter().sum();\n    let mut letter_grades: Vec<String>\
    \ = vec![];\n    for i in 0..grades.len() {\n        if grades[i] > 0.0 && grades_sum\
    \ - grades[i] < 5.0 {\n            letter_grades.push(format!(\"{}+\", grades[i]));\n\
    \        } else {\n            letter_grades.push(format!(\"{}\", grades[i]));\n\
    \        }\n    }\n    letter_grades", "    let mut grades = grades.clone();\n\
    \    grades.pop();\n    let mut total: f64 = 0.0;\n    for grade in grades {\n\
    \        total += grade;\n    }\n    let grades_length = grades.len();\n    let\
    \ mut letters: Vec<String> = vec![\"\".to_string(); grades_length];\n    for grade\
    \ in grades {\n        if grade > 0.0 {\n            letters[grades_length - grade\
    \ - 1] = format!(\"{}+\", grade);\n        } else {\n            letters[grades_length\
    \ - grade - 1] = format!(\"{}\", grade);\n        }\n    }\n    for grade in grades\
    \ {\n        if grade <= 0.0 {\n            letters[grades_length - grade - 1]\
    \ = format!(\"{}\", grade);\n        }\n    }\n    letters.reverse();\n    letters",
  "    grades.iter().map(|x| {\n        match x {\n            0.0 => String::new(),\n\
    \            _ => match x {\n                4.0 => \"A+\".to_string(),\n    \
    \            _ => \"A-\".to_string(),\n                3.7 => \"A\".to_string(),\n\
    \                3.3 => \"A-\".to_string(),\n                3.0 => \"B+\".to_string(),\n\
    \                _ => \"B-\".to_string(),\n                2.7 => \"B\".to_string(),\n\
    \                2.3 => \"B-\".to_string(),\n                2.0 => \"C+\".to_string(),\n\
    \                _ => \"C-\".to_string(),\n                1.7 => \"C\".to_string(),\n\
    \                1.3 => \"C-\".to_string(),\n                1.0 => \"D+\".to_string(),\n\
    \                _ => \"D-\".to_string(),\n                0.7 => \"D\".to_string(),\n\
    \                0.0 => \"D-\".to_string(),\n                _ => \"E\".to_string(),\n\
    \            },\n        }\n    }).collect()", "    let mut letter_grades = vec![];\n\
    \    for grade in grades {\n        let letter = match grade {\n            4.0\
    \ => \"A+\",\n            3.7 => \"A\",\n            3.3 => \"A-\",\n        \
    \    3.0 => \"B+\",\n            2.7 => \"B\",\n            2.3 => \"B-\",\n \
    \           2.0 => \"C+\",\n            1.7 => \"C\",\n            1.3 => \"C-\"\
    ,\n            1.0 => \"D+\",\n            0.7 => \"D\",\n            _ => \"\
    D-\",\n            0.0 => \"E\",\n        };\n        letter_grades.push(letter);\n\
    \    }\n    letter_grades", "    grades.iter().filter(|x| *x > 0f64).map(|x| {\n\
    \        match x {\n            0...2.7 => \"D-\",\n            2.7...3.7 => \"\
    D\",\n            3.7...3.3 => \"D+ \",\n            3.3...3.0 => \"D\",\n   \
    \         3.0...2.7 => \"D+ \",\n            2.7...2.3 => \"D- \",\n         \
    \   2.3...2.0 => \"D+ \",\n            2.0...1.7 => \"C\",\n            1.7...1.3\
    \ => \"C- \",\n            1.3...1.0 => \"C+ \",\n            1.0...0.7 => \"\
    C \",\n            0.7...0.0 => \"D-\",\n            0.0f64 => \"E\",\n      \
    \      _ => \"\"\n        }\n    }).collect()", "    grades\n        .iter()\n\
    \        .enumerate()\n        .filter_map(|(i, grade)| {\n            if grade\
    \ <= 3.0 {\n                Some(grade as usize)\n            } else {\n     \
    \           None\n            }\n        })\n        .fold(vec![], |mut grades,\
    \ (i, grade)| {\n            grades\n                .push((grade as usize).to_string())\n\
    \                .append(i)\n                .join()\n        });", "    let mut\
    \ letter_grades = Vec::new();\n    for i in 0..grades.len() {\n        if grades[i]\
    \ > 0.0 {\n            letter_grades.push((grades[i] / 4.0) as char);\n      \
    \  } else if grades[i] < 0.0 {\n            letter_grades.push((-(grades[i] /\
    \ 4.0) as char));\n        } else {\n            letter_grades.push(0);\n    \
    \    }\n    }\n    letter_grades", "    let mut grades_result = Vec::new();\n\
    \    let mut grades_sorted = grades.clone();\n    grades_sorted.sort();\n\n  \
    \  let mut sum_grade_result = 0;\n    for grade in grades_sorted {\n        let\
    \ grade = grades.iter().rev().find(|&grade| grade == grade).unwrap();\n      \
    \  let grades_result = grade - &grades_sorted[0];\n        grades_result.to_string().push(\"\
    +\");\n        grades_result += &grade;\n        grades_result += &grades_sorted[0];\n\
    \        grades_result += \"+\";\n        grades_result.push(\"E\");\n       \
    \ grades_result.push(\"\");\n\n        grades_result.push(grades_result.chars().collect::<Vec<_>>().as_slice().to_string());\n\
    \        sum_grade_result += &grades_result;\n    }\n    grades_result.push(\"\
    D-\");\n    grades_result.push(\"\");\n    grades_result.push(&sum_grade_result.to_string());\n\
    \n    return grades_result;", "    let mut grades_string: Vec<String> = Vec::new();\n\
    \    let mut total_gpa = grades.sum();\n    let mut gpa: f64 = grades.sum();\n\
    \    \n    while total_gpa >= 0.0 {\n        if gpa > 9.0 {\n            grades_string.push(\"\
    A-\");\n            gpa -= 9.0;\n            \n        } else if gpa > 8.0 {\n\
    \            grades_string.push(\"B-\");\n            gpa -= 8.0;\n          \
    \  \n        } else if gpa > 7.0 {\n            grades_string.push(\"C-\");\n\
    \            gpa -= 7.0;\n            \n        } else if gpa > 6.0 {\n      \
    \      grades_string.push(\"D-\");\n            gpa -= 6.0;\n            \n  \
    \      } else if gpa > 5.0 {\n            grades_string.push(\"D+\");\n      \
    \      gpa -= 5.0;\n            \n        } else if gpa > 4.0 {\n            grades_string.push(\"\
    D\");\n            gpa -= 4.0;\n            \n        } else if gpa > 3.0 {\n\
    \            grades_string.push(\"E\");\n            gpa -= 3.0;\n           \
    \ \n        } else if gpa > 2.0 {\n            grades_string.push(\"F\");\n  \
    \          gpa -= 2.0;\n            \n        } else {\n            grades_string.push(\"\
    F\");\n        }\n        total_gpa -= gpa;\n    }\n    grades_string.push(\"\
    D\");\n    grades_string", "    let mut grades_slice: Vec<f64> = grades.iter().cloned().collect();\n\
    \    let mut letter_grades_vec: Vec<String> = vec![];\n    while grades_slice.len()\
    \ > 0 {\n        let grade = grades_slice.pop().unwrap();\n        if grade <\
    \ 4.0 {\n            letter_grades_vec.push(\"A+\");\n        } else if grade\
    \ < 4.3 {\n            letter_grades_vec.push(\"A\");\n        } else if grade\
    \ < 4.6 {\n            letter_grades_vec.push(\"A-\");\n        } else if grade\
    \ < 5.0 {\n            letter_grades_vec.push(\"B+\");\n        } else if grade\
    \ < 5.3 {\n            letter_grades_vec.push(\"B\");\n        } else if grade\
    \ < 5.6 {\n            letter_grades_vec.push(\"B-\");\n        } else if grade\
    \ < 6.0 {\n            letter_grades_vec.push(\"C+\");\n        } else if grade\
    \ < 6.3 {\n            letter_grades_vec.push(\"C\");\n        } else if grade\
    \ < 6.6 {\n            letter_grades_vec.push(\"C-\");\n        } else if grade\
    \ < 7.0 {\n            letter_grades_vec.push(\"D+\");\n        } else if grade\
    \ < 7.3 {\n            letter_grades_vec.push(\"D\");\n        } else if grade\
    \ < 7.6 {\n            letter_grades_vec.push(\"D-\");\n        } else {\n   \
    \         letter_grades_vec.push(\"E\");\n        }\n    }\n    letter_grades_vec",
  "    let grades_with_zero = grades.iter().cloned().map(|x| if x==0.0 { 0.0 } else\
    \ { x }).collect();\n    grades_with_zero.sort();\n    let mut grades = vec![];\n\
    \    grades_with_zero.iter().take(8).for_each(|grade| {\n        if grade == 0.0\
    \ {\n            grades.push(\"E\");\n            return;\n        }\n       \
    \ let mut current_grade = vec![];\n        let mut current_gpa = vec![];\n   \
    \     current_gpa.push(grade / 4.0);\n        current_grade.push(current_gpa.last().unwrap().to_ascii().to_string());\n\
    \        let mut index = grades_with_zero.iter().position(|x| x == grade).unwrap();\n\
    \        if index > 0 {\n            let mut previous_gpa = vec![];\n        \
    \    let mut previous_gpa = grades_with_zero[index - 3].to_ascii_string();\n \
    \           current_gpa.push(previous_gpa - previous_gpa.chars().nth(1).unwrap());\n\
    \            current_gpa.push(current_gpa[0] + \"-\".to_string());\n         \
    \   current_grade.push(current_gpa.join(\"\"));\n        }\n        grades.push(current_grade.join(\"\
    \"));\n    });\n    grades", "    let mut grades = grades.to_owned();\n    grades.sort_unstable_by_key(|a|\
    \ a.partial_cmp(&a));\n    let mut letter_grade = String::new();\n    for i in\
    \ grades.iter() {\n        if i > 0.0 {\n            letter_grade += i.to_string();\n\
    \            if i.partial_cmp(&grades.last()) == 0 {\n                break;\n\
    \            }\n        }\n    }\n    letter_grade.split(' ')\n        .filter_map(|s|\
    \ s.parse::<i32>().ok())\n        .collect::<Vec<String>>()", "    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut last_gp: f64 = grades.last().unwrap();\n\
    \    let mut counter = 0;\n    let mut total_gp: f64 = 0.0;\n    while counter\
    \ < grades.len() {\n        if grades[counter] >= last_gp {\n            grades_vec.push(format!(\"\
    {}+\", &(grades[counter] - last_gp).abs()));\n            last_gp = grades[counter];\n\
    \            total_gp += grades[counter];\n        }\n        counter += 1;\n\
    \    }\n    if total_gp >= 0.0 && total_gp < last_gp {\n        grades_vec.push(format!(\"\
    {}\", &(total_gp - last_gp).abs()));\n    }\n    grades_vec", "    let mut result:\
    \ Vec<String> = Vec::new();\n\n    for grade in grades {\n        if grade > 4.0\
    \ {\n            result.push(String::from(\"A+\"));\n        } else if grade >\
    \ 3.7 {\n            result.push(String::from(\"A\"));\n        } else if grade\
    \ > 3.3 {\n            result.push(String::from(\"A-\"));\n        } else if grade\
    \ > 3.0 {\n            result.push(String::from(\"B+\"));\n        } else if grade\
    \ > 2.7 {\n            result.push(String::from(\"B\"));\n        } else if grade\
    \ > 2.3 {\n            result.push(String::from(\"B-\"));\n        } else if grade\
    \ > 2.0 {\n            result.push(String::from(\"C+\"));\n        } else if grade\
    \ > 1.7 {\n            result.push(String::from(\"C\"));\n        } else if grade\
    \ > 1.3 {\n            result.push(String::from(\"C-\"));\n        } else if grade\
    \ > 1.0 {\n            result.push(String::from(\"D+\"));\n        } else if grade\
    \ > 0.7 {\n            result.push(String::from(\"D\"));\n        } else if grade\
    \ > 0.0 {\n            result.push(String::from(\"D-\"));\n        } else {\n\
    \            result.push(String::from(\"E\"));\n        }\n    }\n\n    result",
  "    if grades.len() <= 2 {\n        grades\n            .iter()\n            .enumerate()\n\
    \            .map(|(i, grade)| (grade >= 3.0 && grade <= 4.0) || (grade >= 2.0\
    \ && grade <= 3.7))\n            .filter(|b| b)\n            .cloned()\n     \
    \       .collect()\n    } else {\n        grades\n            .iter()\n      \
    \      .enumerate()\n            .map(|(i, grade)| (grade >= 3.0 && grade <= 3.7)\
    \ || (grade >= 2.0 && grade <= 2.3))\n            .filter(|b| b)\n           \
    \ .cloned()\n            .collect()\n    }", "    let mut letter_grades = vec![];\n\
    \    let mut temp = 0.0;\n    for i in grades.iter() {\n        let numerical_grade\
    \ = numerical(i);\n        if numerical_grade > temp {\n            temp = numerical_grade;\n\
    \        }\n    }\n    for i in grades.iter() {\n        let numerical_grade =\
    \ numerical(i);\n        if numerical_grade == temp {\n            if numerical_grade\
    \ < 3.0 {\n                letter_grades.push(\"A+\");\n            } else {\n\
    \                if numerical_grade < 4.0 {\n                    letter_grades.push(\"\
    A\");\n                } else {\n                    if numerical_grade < 4.6\
    \ {\n                        letter_grades.push(\"A-\");\n                   \
    \ } else {\n                        if numerical_grade < 5.0 {\n             \
    \               letter_grades.push(\"B+\");\n                        } else {\n\
    \                            if numerical_grade < 5.6 {\n                    \
    \            letter_grades.push(\"B\");\n                            } else {\n\
    \                                if numerical_grade < 6.0 {\n                \
    \                    letter_grades.push(\"B-\");\n                           \
    \     } else {\n                                    if numerical_grade < 6.6 {\n\
    \                                        letter_grades.push(\"C+\");\n       \
    \                             } else {\n                                     \
    \   if numerical_grade < 7.0 {\n                                            letter_grades.push(\"\
    C\");\n                                        } else {\n                    \
    \                        if numerical_grade < 7.6 {\n                        \
    \                        letter_grades.push(\"C-\");\n                       \
    \                     } else {\n                                             \
    \   if numerical_grade < 8.0 {\n                                             \
    \       letter_grades.push(\"D+\");\n                                        \
    \        } else {\n                                                    if numerical_grade\
    \ < 8.6 {\n                                                        letter_grades.push(\"\
    D\");\n                                                    } else {\n        \
    \                                                if numerical_grade < 9.0 {\n\
    \                                                            letter_grades.push(\"\
    D-\");\n                                                        } else {\n   \
    \                                                         letter_grades.push(\"\
    E\");\n                                                        }\n           \
    \                                         }\n                                \
    \                }\n                                            }\n          \
    \                              }\n                                    }\n    \
    \                            }\n                            }\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n    }\n    letter_grades", "    let grades: Vec<f64> = grades.into_iter().map(|x|\
    \ x.ln()).collect();\n    let mut output: Vec<String> = Vec::new();\n    let mut\
    \ prev_grade_letter: Vec<f64> = Vec::new();\n    let mut prev_grade_number: Vec<f64>\
    \ = Vec::new();\n    let mut current_grade_letter: Vec<f64> = Vec::new();\n  \
    \  let mut current_grade_number: Vec<f64> = Vec::new();\n    for i in 0..grades.len()\
    \ - 1 {\n        let mut current_grade_letter: Vec<f64> = Vec::new();\n      \
    \  let mut current_grade_number: Vec<f64> = Vec::new();\n        for j in 0..grades.len()\
    \ - 1 {\n            if i != j {\n                if grades[j].ln() == grades[i].ln()\
    \ || grades[j].ln() <= grades[i].ln() && grades[j].ln() >= grades[i].ln() - 1.0\
    \ {\n                    current_grade_letter.push(grades[j]);\n             \
    \       current_grade_number.push(grades[i].ln());\n                } else {\n\
    \                    current_grade_letter.push(grades[j]);\n                 \
    \   current_grade_number.push(grades[j].ln());\n                }\n          \
    \  }\n        }\n        for j in 0..current_grade_letter.len() {\n          \
    \  if current_grade_number[j] > prev_grade_number[j] {\n                let index\
    \ = current_grade_letter.iter().position(|&x| x == current_grade_letter[j]).unwrap();\n\
    \                output.push(format!(\"{}\", current_grade_letter[j]));\n    \
    \            if index != 0 {\n                    output.push(\"+\");\n      \
    \          }\n                output.push(format!(\"{}\", current_grade_number[j]));\n\
    \            } else {\n                output.push(\"-\");\n                if\
    \ index != 0 {\n                    output.push(\"+\");\n                }\n \
    \               output.push(format!(\"{}\", current_grade_number[j]));\n     \
    \       }\n        }\n        prev_grade_number = current_grade_number;\n    \
    \    prev_grade_letter = current_grade_letter;\n    }\n    output", "    let mut\
    \ letter_grades = vec![];\n    for grade in grades {\n        if grade < 4.0 {\n\
    \            letter_grades.push(\"A+\");\n        } else if grade < 3.7 {\n  \
    \          letter_grades.push(\"A\");\n        } else if grade < 3.3 {\n     \
    \       letter_grades.push(\"A-\");\n        } else if grade < 3.0 {\n       \
    \     letter_grades.push(\"B+\");\n        } else if grade < 2.7 {\n         \
    \   letter_grades.push(\"B\");\n        } else if grade < 2.3 {\n            letter_grades.push(\"\
    B-\");\n        } else if grade < 2.0 {\n            letter_grades.push(\"C+\"\
    );\n        } else if grade < 1.7 {\n            letter_grades.push(\"C\");\n\
    \        } else if grade < 1.3 {\n            letter_grades.push(\"C-\");\n  \
    \      } else if grade < 1.0 {\n            letter_grades.push(\"D+\");\n    \
    \    } else if grade < 0.7 {\n            letter_grades.push(\"D\");\n       \
    \ } else if grade < 0.0 {\n            letter_grades.push(\"D-\");\n        }\
    \ else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return\
    \ letter_grades;", "    let mut letter_grades = vec![];\n    for grade in grades.iter()\
    \ {\n        if grade > 3.0 { \n            letter_grades.push(&format!(\"A+\"\
    ));\n        } else if grade > 2.7 { \n            letter_grades.push(&format!(\"\
    B+\"));\n        } else if grade > 2.3 { \n            letter_grades.push(&format!(\"\
    B-\"));\n        } else if grade > 2.0 { \n            letter_grades.push(&format!(\"\
    C+\"));\n        } else if grade > 1.7 { \n            letter_grades.push(&format!(\"\
    C\"));\n        } else if grade > 1.3 { \n            letter_grades.push(&format!(\"\
    C-\"));\n        } else if grade > 1.0 { \n            letter_grades.push(&format!(\"\
    D+\"));\n        } else if grade > 0.7 { \n            letter_grades.push(&format!(\"\
    D\"));\n        } else { \n            letter_grades.push(&format!(\"D-\"));\n\
    \        }\n    }\n    letter_grades.push(&format!(\"E\"));\n    return letter_grades",
  "    let grades_array = grades.to_owned();\n\n    // Initialize variables\n    let\
    \ mut student_grades: Vec<String> = vec![];\n    let mut student_gpa: Vec<f64>\
    \ = vec![];\n    let mut student_avg_gpa: Vec<f64> = vec![];\n    let mut student_avg:\
    \ f64 = 0.0;\n    let mut student_gpa_sum: f64 = 0.0;\n    let mut student_grades_sum:\
    \ f64 = 0.0;\n    let mut student_grades_count: usize = 0;\n    let mut student_grade_percentage:\
    \ f64 = 0.0;\n    let mut student_gpa_count = 0.0;\n    let mut student_gpa_percentage\
    \ = 0.0;\n\n    // Calculate the average GPA\n    for i in 0..grades_array.len()\
    \ {\n        student_grade_percentage += grades_array[i];\n        student_grades_sum\
    \ += grades_array[i];\n        student_grades_count += 1;\n    }\n\n    if student_grades_count\
    \ > 0 {\n        student_grades_percentage = student_grades_sum / student_grades_count;\n\
    \    }\n\n    for i in 0..grades_array.len() {\n        student_avg_gpa.push(grades_array[i]);\n\
    \        student_gpa_sum += grades_array[i];\n        student_gpa_count += 1;\n\
    \    }\n\n    if student_gpa_count > 0 {\n        student_avg_gpa.sort();\n  \
    \      student_avg_gpa = student_avg_gpa.iter().map(|x| x as f64).collect::<Vec<f64>>();\n\
    \        student_avg_gpa = student_avg_gpa.pop();\n        student_gpa_percentage\
    \ = student_gpa_sum / student_gpa_count;\n    }\n\n    // Calculate the letter\
    \ for each GPA\n    for i in 0..grades_array.len() {\n        if grades_array[i]\
    \ < 4.0 {\n            student_grades.push(\"A+\");\n        } else if grades_array[i]\
    \ < 3.7 {\n            student_grades.push(\"A\");\n        } else if grades_array[i]\
    \ < 3.3 {\n            student_grades.push(\"A-\");\n        } else if grades_array[i]\
    \ < 3.0 {\n            student_grades.push(\"B+\");\n        } else if grades_array[i]\
    \ < 2.7 {\n            student_grades.push(\"B\");\n        } else if grades_array[i]\
    \ < 2.3 {\n            student_grades.push(\"B-\");\n        } else if grades_array[i]\
    \ < 2.0 {", "    grades.iter().map(|&grade| {\n        match grade {\n       \
    \     0.0    => \"E\",\n            5.0    => \"D\",\n            10.0   => \"\
    C-\",\n            15.0   => \"C\",\n            20.0   => \"B-\",\n         \
    \   25.0   => \"B\",\n            30.0   => \"A-\",\n            35.0   => \"\
    A\",\n            40.0   => \"A+\",\n            50.0   => \"B+\",\n         \
    \   60.0   => \"B-\",\n            70.0   => \"B\",\n            80.0   => \"\
    C+\",\n            90.0   => \"C\",\n            100.0  => \"C-\",\n         \
    \   _ => \"F\"\n        }\n    }).collect()", "    let mut grades_vec: Vec<String>\
    \ = Vec::new();\n    let mut min_value = grades.min();\n    let mut max_value\
    \ = grades.max();\n    for value in grades {\n        if value < min_value {\n\
    \            min_value = value;\n        }\n        if value > max_value {\n \
    \           max_value = value;\n        }\n    }\n    for value in grades {\n\
    \        let mut letter_grade: String = \"Z\";\n        if value < min_value {\n\
    \            letter_grade = \"C\";\n        } else if value <= min_value + 0.4\
    \ {\n            letter_grade = \"A\";\n        } else if value <= min_value +\
    \ 0.3 and value >= min_value + 0.2 {\n            letter_grade = \"B\";\n    \
    \    } else if value <= min_value + 0.2 and value >= min_value + 0.1 {\n     \
    \       letter_grade = \"A\";\n        } else if value <= min_value + 0.1 and\
    \ value >= min_value + 0.07 {\n            letter_grade = \"B\";\n        } else\
    \ if value <= min_value + 0.06 and value >= min_value + 0.05 {\n            letter_grade\
    \ = \"C\";\n        } else if value <= min_value + 0.05 and value >= min_value\
    \ + 0.04 {\n            letter_grade = \"D\";\n        } else if value <= min_value\
    \ + 0.04 and value >= min_value + 0.03 {\n            letter_grade = \"C\";\n\
    \        } else if value <= min_value + 0.03 and value >= min_value + 0.02 {\n\
    \            letter_grade = \"D\";\n        } else if value <= min_value + 0.02\
    \ and value >= min_value + 0.01 {\n            letter_grade = \"E\";\n       \
    \ } else if value <= min_value + 0.01 and value >= min_value + 0.007 {\n     \
    \       letter_grade = \"D\";\n        } else if value <= min_value + 0.006 and\
    \ value >= min_value + 0.005 {\n            letter_grade = \"E\";\n        } else\
    \ if value <= min_value + 0.005 and value >= min_value + 0.004 {\n           \
    \ letter_grade = \"F\";\n        } else if value <= min_value + 0.004 and value\
    \ >= min_value + 0.003 {\n            letter_grade = \"F\";\n        } else if\
    \ value <= min_value + 0.003 and value >= min_value + 0.002 {\n            letter_grade\
    \ = \"F\";\n        } else if value <= min_value + 0.002 and value >= min_value\
    \ + 0.001 {\n            letter_grade = \"F\";\n        } else if value <= min_value\
    \ + 0.001 and value >= min_value + 0.0005 {\n            letter_grade = \"F\"\
    ;\n        } else if value <= min_value + 0.0005 and value >= ", "    grades\n\
    \        .iter()\n        .enumerate()\n        .map(|(idx, grade)| {\n      \
    \      match grade {\n                2.7 => \"B+\",\n                2.3 => \"\
    B\",\n                2.0 => \"C+\",\n                1.7 => \"C\",\n        \
    \        1.3 => \"C-\",\n                1.0 => \"D+\",\n                0.7 =>\
    \ \"D\",\n                0.0 => \"D-\",\n                _ => \"E\",\n      \
    \      }\n        })\n        .collect()", "    let mut grades_letter = vec![];\n\
    \    for grade in grades {\n        match grade {\n            0..2 => {\n   \
    \             grades_letter.push(\"+\");\n            }\n            3..4 => grades_letter.push(\"\
    A\");\n            5..6 => grades_letter.push(\"B+\");\n            7..8 => grades_letter.push(\"\
    B\");\n            9..10 => grades_letter.push(\"B-\");\n            11..12 =>\
    \ grades_letter.push(\"C\");\n            13..14 => grades_letter.push(\"C+\"\
    );\n            15..16 => grades_letter.push(\"D\");\n            17..18 => grades_letter.push(\"\
    D+\");\n            19..20 => grades_letter.push(\"D-\");\n            _ => {\n\
    \                grades_letter.push(\"E\");\n            }\n        }\n    }\n\
    \    grades_letter", "    let grades_sum = grades.iter().sum(); // sum of all\
    \ the GPA\n    let grades_div = grades_sum / 5; // divide each GPA by 5 to get\
    \ the average GPA\n    let mut letter_grades = Vec::new(); // empty vector of\
    \ strings\n    for grade in grades {\n        if grade < grades_div {\n      \
    \      letter_grades.push('C+');\n        } else if grade >= grades_div && grade\
    \ < grades_sum {\n            letter_grades.push('B+');\n        } else if grade\
    \ >= grades_sum && grade < grades_div * 2 {\n            letter_grades.push('B');\n\
    \        } else if grade >= grades_div * 2 && grade < grades_div * 3 {\n     \
    \       letter_grades.push('A+');\n        } else if grade >= grades_div * 3 &&\
    \ grade < grades_div * 4 {\n            letter_grades.push('A');\n        } else\
    \ if grade >= grades_div * 4 && grade < grades_div * 5 {\n            letter_grades.push('A-\
    \ ');\n        } else if grade >= grades_div * 5 && grade < grades_sum {\n   \
    \         letter_grades.push('B-');\n        } else if grade >= grades_sum {\n\
    \            letter_grades.push('F');\n        } else {\n            letter_grades.push('E');\n\
    \        }\n    }\n    letter_grades", "    let mut grades = grades.clone(); //\
    \ We want to modify this vector\n    // This section will do the actual grades.\
    \ We'll make a temporary vector of\n    // the grades which we'll manipulate as\
    \ we go. We'll iterate over the \n    // original vector, grabbing the grades\
    \ one at a time, making \n    // the necessary changes to grades and adding them\
    \ to a new vector which will\n    // contain the grades we're about to output.\
    \ \n    let mut grades_vec = grades.clone();\n    grades_vec.sort();\n    let\
    \ mut letter_grades = vec![];\n    for grade in grades_vec {\n        let letter_grade\
    \ = match grade {\n            4.0 => 'A+',\n            > 3.7 => 'A',\n     \
    \       > 3.3 => 'A-',\n            > 3.0 => 'B+',\n            > 2.7 => 'B',\n\
    \            > 2.3 => 'B-',\n            > 2.0 => 'C+',\n            > 1.7 =>\
    \ 'C',\n            > 1.3 => 'C-',\n            > 1.0 => 'D+',\n            >\
    \ 0.7 => 'D',\n            > 0.0 => 'D-',\n            0.0 => 'E',\n        };\n\
    \        letter_grades.push(letter_grade);\n    }\n    return letter_grades;",
  "    let mut grades_strings = vec![];\n\n    for grade in grades.iter() {\n    \
    \    if grade >= 4.0 {\n            grades_strings.push(format!(\"A+\"));\n  \
    \      } else if grade >= 3.7 {\n            grades_strings.push(format!(\"A\"\
    ));\n        } else if grade >= 3.3 {\n            grades_strings.push(format!(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            grades_strings.push(format!(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            grades_strings.push(format!(\"\
    B\"));\n        } else if grade >= 2.3 {\n            grades_strings.push(format!(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            grades_strings.push(format!(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            grades_strings.push(format!(\"\
    C\"));\n        } else if grade >= 1.3 {\n            grades_strings.push(format!(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            grades_strings.push(format!(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            grades_strings.push(format!(\"\
    D\"));\n        } else {\n            grades_strings.push(format!(\"D-\"));\n\
    \        }\n    }\n\n    grades_strings", "    let grades_copy = grades.clone();\n\
    \    let mut grades_copy2 = grades_copy;\n    let mut result = vec![];\n\n   \
    \ for i in grades_copy.iter() {\n        let grade_num = i as f64;\n        let\
    \ mut letter = String::new();\n        let mut grade_num = grade_num as f64;\n\
    \n        if grade_num > 3.0 {\n            grade_num = grade_num - 3.0;\n   \
    \         letter = \"B-\";\n        } else if grade_num > 2.7 {\n            grade_num\
    \ = grade_num - 2.7;\n            letter = \"B-\";\n        } else if grade_num\
    \ > 2.3 {\n            grade_num = grade_num - 2.3;\n            letter = \"B-\"\
    ;\n        } else if grade_num > 1.7 {\n            grade_num = grade_num - 1.7;\n\
    \            letter = \"C+\";\n        } else if grade_num > 1.3 {\n         \
    \   grade_num = grade_num - 1.3;\n            letter = \"C+\";\n        } else\
    \ if grade_num > 0.7 {\n            grade_num = grade_num - 0.7;\n           \
    \ letter = \"C+\";\n        } else if grade_num > 0.0 {\n            grade_num\
    \ = grade_num - 0.0;\n            letter = \"C+\";\n        } else if grade_num\
    \ > -1.0 {\n            grade_num = grade_num - -1.0;\n            letter = \"\
    D+\";\n        } else if grade_num > -2.7 {\n            grade_num = grade_num\
    \ - -2.7;\n            letter = \"D+\";\n        } else if grade_num > -3.0 {\n\
    \            grade_num = grade_num - -3.0;\n            letter = \"D+\";\n   \
    \     } else if grade_num > -3.7 {\n            grade_num = grade_num - -3.7;\n\
    \            letter = \"D+\";\n        } else if grade_num > -4.0 {\n        \
    \    grade_num = grade_num - -4.0;\n            letter = \"D+\";\n        } else\
    \ if grade_num > -4.7 {\n            grade_num = grade_num - -4.7;\n         \
    \   letter = \"D+\";\n        } else if grade_num > -5.0 {\n            grade_num\
    \ = grade_num - -5.0;\n            letter = \"D+\";\n        } else if grade_num\
    \ > -5.7 {\n            grade_num = grade_num - -5.7;\n            letter = \"\
    D+\";\n        } else if grade_num > -6.0 {\n            grade_num = grade_num\
    \ - -6.0;\n            letter", "    let mut letter_grades = vec![];\n    for\
    \ grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(format!(\"\
    A+\"));\n        } else if grade > 3.0 && grade < 4.0 {\n            letter_grades.push(format!(\"\
    A\"));\n        } else if grade > 3.0 && grade > 2.0 && grade < 3.0 {\n      \
    \      letter_grades.push(format!(\"A-\"));\n        } else if grade > 2.0 &&\
    \ grade < 3.0 {\n            letter_grades.push(format!(\"B+\"));\n        } else\
    \ if grade > 2.0 && grade < 2.0 {\n            letter_grades.push(format!(\"B\"\
    ));\n        } else if grade > 1.7 && grade < 2.0 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if grade > 1.7 && grade < 1.0 {\n            letter_grades.push(format!(\"\
    C+\"));\n        } else if grade > 1.3 && grade < 1.7 {\n            letter_grades.push(format!(\"\
    C\"));\n        } else if grade > 1.3 && grade > 1.0 {\n            letter_grades.push(format!(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(format!(\"\
    D+\"));\n        } else if grade > 0.7 && grade < 1.0 {\n            letter_grades.push(format!(\"\
    D\"));\n        } else if grade > 0.0 && grade < 0.7 {\n            letter_grades.push(format!(\"\
    D-\"));\n        } else {\n            letter_grades.push(format!(\"E\"));\n \
    \       }\n    }\n    letter_grades", "    let mut letter_grades = vec![];\n \
    \   for grade in grades.iter() {\n        if grade > 0 && grade < 4 {\n      \
    \      letter_grades.push(format!(\"A+\", grade));\n        } else if grade >\
    \ 4 && grade < 7 {\n            letter_grades.push(format!(\"A\", grade));\n \
    \       } else if grade > 7 && grade < 10 {\n            letter_grades.push(format!(\"\
    B+\", grade));\n        } else if grade > 10 && grade < 13 {\n            letter_grades.push(format!(\"\
    B\", grade));\n        } else if grade > 13 && grade < 16 {\n            letter_grades.push(format!(\"\
    B-\", grade));\n        } else if grade > 16 && grade < 20 {\n            letter_grades.push(format!(\"\
    C+\", grade));\n        } else if grade > 20 && grade < 24 {\n            letter_grades.push(format!(\"\
    C\", grade));\n        } else if grade > 24 && grade < 28 {\n            letter_grades.push(format!(\"\
    C-\", grade));\n        } else if grade > 28 && grade < 32 {\n            letter_grades.push(format!(\"\
    D+\", grade));\n        } else if grade > 32 && grade < 37 {\n            letter_grades.push(format!(\"\
    D\", grade));\n        } else if grade > 37 && grade < 42 {\n            letter_grades.push(format!(\"\
    D-\", grade));\n        } else if grade > 42 && grade < 47 {\n            letter_grades.push(format!(\"\
    E\", grade));\n        }\n    }\n    letter_grades", "    let mut grades_as_string\
    \ = Vec::new();\n    for grade in grades {\n        if grade < 3 {\n         \
    \   grades_as_string.push(\"E\");\n        } else if grade < 6 {\n           \
    \ grades_as_string.push(\"D-\");\n        } else if grade < 9 {\n            grades_as_string.push(\"\
    C-\");\n        } else if grade < 12 {\n            grades_as_string.push(\"B-\"\
    );\n        } else if grade < 15 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 18 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 21 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 24 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 27 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 30 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 33 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 36 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 39 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 42 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 45 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 48 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 51 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 54 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 57 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 60 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 63 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 66 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 69 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 72 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 75 {\n            grades_as_string.push(\"B-\");\n\
    \        } else if grade < 78 {\n            grades_as_string.push(\"B-\");\n\
    \        ", "    let mut grades_vec: Vec<String> = grades.into_iter().map(|x|\
    \ format!(\"{:.2}\", x).to_string()).collect();\n    if grades_vec.len() == 0\
    \ {\n        grades_vec.push(\"E\");\n    }\n    grades_vec[0] += \"-\";\n   \
    \ grades_vec[grades_vec.len() - 1] += \"+\"\n    let mut i = 0;\n    let mut current_grade\
    \ = 0;\n    while i < grades_vec.len() - 1 {\n        if current_grade > grades_vec[i\
    \ + 1] {\n            current_grade -= grades_vec[i + 1];\n        } else {\n\
    \            current_grade += grades_vec[i + 1];\n        }\n        i += 1;\n\
    \    }\n    grades_vec[i] = format!(\"{:.2}\", current_grade).to_string();\n \
    \   grades_vec", "    let mut letter_grades = Vec::new();\n    let mut gpas_sum\
    \ = 0;\n    for grade in grades {\n        let gpas_this_grade = grade as f64;\n\
    \        let sum = gpas_sum + gpas_this_grade;\n        if sum < 3.3 {\n     \
    \       letter_grades.push('A+');\n        } else if sum < 3.7 {\n           \
    \ letter_grades.push('A');\n        } else if sum < 4.0 {\n            letter_grades.push('A-');\n\
    \        } else if sum < 3.0 {\n            letter_grades.push('B+');\n      \
    \  } else if sum < 2.7 {\n            letter_grades.push('B');\n        } else\
    \ if sum < 2.3 {\n            letter_grades.push('B-');\n        } else if sum\
    \ < 2.0 {\n            letter_grades.push('C+');\n        } else if sum < 1.7\
    \ {\n            letter_grades.push('C');\n        } else if sum < 1.3 {\n   \
    \         letter_grades.push('C-');\n        } else if sum < 1.0 {\n         \
    \   letter_grades.push('D+');\n        } else if sum < 0.7 {\n            letter_grades.push('D');\n\
    \        } else {\n            letter_grades.push('D-');\n        }\n        gpas_sum\
    \ = sum;\n    }\n    return letter_grades;", "    let mut ret: Vec<String> = vec![];\n\
    \    for i in grades {\n        let grade = String::from(numerical_grade(i - 4.0));\n\
    \        \n        if grade.chars().all(|&c| c.is_digit()) {\n            if let\
    \ Some(idx) = grades.iter().position(|&i| i < &i) {\n                ret.push(*grades[idx].to_string().to_string()\
    \ + grade);\n            }\n        } else {\n            ret.push(*grade.to_string()\
    \ + grade);\n        }\n    }\n    ret", "    let num_grades = grades.len();\n\
    \    if num_grades == 0 { return Vec::new(); };\n    let mut letter_grade = String::new();\n\
    \    let mut current_gpa : f64 = grades[0];\n    let mut temp : f64 = grades[0];\n\
    \    for i in 1..num_grades {\n        current_gpa += grades[i-1];\n        if\
    \ current_gpa > 3.0 { temp_grade = \"B+\";  current_gpa = temp; };\n        if\
    \ current_gpa > 2.7 { temp_grade = \"B\";   current_gpa = temp; };\n        if\
    \ current_gpa > 2.0 { temp_grade = \"B-\";  current_gpa = temp; };\n        if\
    \ current_gpa > 1.7 { temp_grade = \"C+\";  current_gpa = temp; };\n        if\
    \ current_gpa > 1.0 { temp_grade = \"C\";   current_gpa = temp; };\n        if\
    \ current_gpa > 0.7 { temp_grade = \"C-\";  current_gpa = temp; };\n        if\
    \ current_gpa > 0.3 { temp_grade = \"D+\";  current_gpa = temp; };\n        if\
    \ current_gpa > 0.0 { temp_grade = \"D\";   current_gpa = temp; };\n        if\
    \ current_gpa < 0.0 { temp_grade = \"D-\";  current_gpa = temp; };\n        if\
    \ current_gpa < 0.3 { temp_grade = \"F\";   current_gpa = temp; };\n        letter_grade\
    \ += temp_grade;\n        temp += grades[i-1];\n    };\n    letter_grade.chars().collect();",
  "    let mut letter_grades = vec![\"E\"];\n    let mut last_gpa : f64 = 0.0;\n\n\
    \    for grade in grades {\n        let gpa = grade as f64;\n\n        if last_gpa\
    \ < gpa {\n            letter_grades.push((gpa - last_gpa).to_string());\n   \
    \     }\n\n        last_gpa = gpa as f64;\n    }\n\n    letter_grades", '    ',
  '    grades.iter().map(|x| x.to_string()).collect()', "    let mut grades_copy:\
    \ Vec<f64> = grades.clone();\n    let mut letter_grades: Vec<String> = Vec::new();\n\
    \    let mut current_grade: f64 = grades_copy[0];\n    let mut current_index =\
    \ 0;\n    let mut current_grade_index = 0;\n    \n    while current_grade != 0\
    \ {\n        current_grade_index += 1;\n        if current_grade_index > grades_copy.len()\
    \ {\n            break;\n        }\n        current_grade = grades_copy[current_grade_index];\n\
    \        let index = grades.iter().position(|&grade| grade > current_grade).unwrap();\n\
    \        let letter_grade = grades[index] + '+';\n        letter_grades.push(letter_grade);\n\
    \        grades_copy.remove(&grades[index]);\n    }\n    \n    letter_grades",
  "    if grades.len() > 0 {\n        let mut letter_grades = Vec::new();\n      \
    \  let mut min_gpa = grades.iter().min().unwrap();\n        let mut max_gpa =\
    \ grades.iter().max().unwrap();\n        let mut total_gpa = 0;\n        let mut\
    \ count_a = 0;\n        let mut count_b = 0;\n        let mut count_c = 0;\n \
    \       let mut count_d = 0;\n        let mut count_e = 0;\n        for i in grades\
    \ {\n            total_gpa += i;\n            if i == min_gpa {\n            \
    \    count_a++;\n            } else if i == max_gpa {\n                count_b++;\n\
    \            } else if i < min_gpa && i > max_gpa {\n                count_c++;\n\
    \            } else if i <= min_gpa && i >=  max_gpa {\n                count_d++;\n\
    \            } else {\n                count_e++;\n            }\n        }\n\
    \        for i in (0..count_a).rev() {\n            letter_grades.push(format!(\"\
    A+\", total_gpa));\n        }\n        for i in (0..count_b).rev() {\n       \
    \     letter_grades.push(format!(\"B\", total_gpa));\n        }\n        for i\
    \ in (0..count_c).rev() {\n            letter_grades.push(format!(\"C\", total_gpa));\n\
    \        }\n        for i in (0..count_d).rev() {\n            letter_grades.push(format!(\"\
    D\", total_gpa));\n        }\n        for i in (0..count_e).rev() {\n        \
    \    letter_grades.push(format!(\"D\", total_gpa));\n        }\n    }\n    letter_grades"]
stop_tokens:
- "\n}"
