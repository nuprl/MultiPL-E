name: HumanEval_102_choose_num
language: rust
prompt: "/// This function takes two positive numbers x and y and returns the\n///\
  \ biggest even integer number that is in the range [x, y] inclusive. If \n/// there's\
  \ no such number, then the function should return -1.\n/// For example:\n/// choose_num(12,\
  \ 15) = 14\n/// choose_num(13, 12) = -1\nfn choose_num(x: isize, y: isize) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
  \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
  \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
  \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
  \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
completions: ["    let mut current = x;\n    loop {\n        if current == y {\n \
    \           return -1;\n        }\n        if current % 2 == 0 {\n           \
    \ return current;\n        }\n        current += 1;\n    }", "    if x > y {\n\
    \        (x, y)\n    } else {\n        (x, y)\n            .iter()\n         \
    \   .max()\n            .filter(|&x| x % 2 == 0)\n            .take_while(|&x|\
    \ x < y)\n            .next()\n            .unwrap_or(-1) as isize\n    }", " \
    \   let mut n = x;\n    let mut m = y;\n\n    let mut m: isize = m;\n\n    //\
    \ TODO: Optimize the loop by changing the condition to \n    // \"while m != 1\
    \ && m%2 == 0\" to avoid checking \n    // m == 1 and m%2 == 0 twice.\n    while\
    \ m != 1 && m%2 == 0 {\n        if m % 2 == 0 {\n            m /= 2;\n       \
    \ } else {\n            m = m / 2;\n        }\n    }\n\n    if m != 1 {\n    \
    \    n = m;\n    }\n    \n    return n;", "    if y > x {\n        choose_num(y,\
    \ x)\n    } else {\n        if x % 2 == 0 {\n            x\n        } else {\n\
    \            choose_num(x + 1, y)\n        }\n    }", "    if x > y {\n      \
    \  (x, y) = (y, x);\n    }\n\n    let mut i = y;\n    loop {\n        if i > x\
    \ {\n            return -1;\n        }\n        if i % 2 == 0 {\n            return\
    \ i;\n        }\n        i += 2;\n    }", "    if x <= 0 || y <= 0 {\n       \
    \ -1\n    } else {\n        let mut low = x;\n        let mut high = y;\n    \
    \    \n        let mut num_found = false;\n        let mut cur_num = 1;\n    \
    \    let mut last_num = -1;\n        \n        while !num_found {\n          \
    \  \n            if low > high {\n                cur_num -= 1;\n            \
    \    \n                if cur_num == 0 {\n                    num_found = true;\n\
    \                } else {\n                    last_num = cur_num;\n         \
    \       }\n            } else if low == high {\n                cur_num += 1;\n\
    \                if cur_num == 2 {\n                    num_found = true;\n  \
    \              } else {\n                    last_num = cur_num;\n           \
    \     }\n            } else {\n                let mid = low + (high - low) /\
    \ 2;\n                let cur_num_2 = choose_num(low, mid);\n                let\
    \ cur_num_1 = choose_num(mid + 1, high);\n                \n                if\
    \ cur_num_2 > cur_num_1 {\n                    cur_num = cur_num_2;\n        \
    \        } else {\n                    cur_num = cur_num_1;\n                }\n\
    \            }\n            \n            if cur_num > 0 && cur_num <= last_num\
    \ {\n                low = mid;\n            } else if cur_num > last_num {\n\
    \                high = mid;\n            } else {\n                num_found\
    \ = true;\n            }\n        }\n        \n        high\n    }", '    if x
    > y { choose_num(y, x) } else { x }', "    if x > y {\n        (x, y) = (y, x)\n\
    \    }\n    \n    if y > x * 2 {\n        x\n    } else {\n        let mut res\
    \ = x;\n        while res > y {\n            res /= 2;\n        }\n        res\
    \ - 1\n    }", "    if y < x {\n        -1\n    } else {\n        let mut ans\
    \ = x;\n        while ans < y {\n            if ans % 2 == 0 {\n             \
    \   ans += 1;\n            } else {\n                ans -= 1;\n            }\n\
    \        }\n        ans\n    }", "    if x < y {\n        choose_num(y, x)\n \
    \   } else {\n        if x % 2 == 0 { x } else { x }\n    }", "    if y > x {\n\
    \        return -1;\n    }\n    if y == x {\n        return 0;\n    }\n    if\
    \ y % 2 == 0 {\n        return y;\n    }\n    let mut x = x;\n    let mut y =\
    \ y;\n    while x < y {\n        let z = x * x;\n        if z <= y {\n       \
    \     return z;\n        }\n        x = x + 1;\n        y = y + 1;\n    }\n  \
    \  return -1;", "    if x < y {\n        choose_num(y, x)\n    } else {\n    \
    \    choose_num(x, y)\n    }", "    if x < y {\n        let min: isize = x;\n\
    \        let max: isize = y;\n    } else {\n        let min: isize = y;\n    \
    \    let max: isize = x;\n    }\n    while min < max {\n        let mid = min\
    \ + ((max - min) / 2);\n        if ((mid + min) % 2 == 0) {\n            return\
    \ mid;\n        }\n        if mid < max {\n            max = mid;\n        } else\
    \ {\n            min = mid;\n        }\n    }\n    -1", "    use num::{Even, Greater};\n\
    \    let x_even = if x.is_even() { x } else { x - 2 };\n    let y_even = if y.is_even()\
    \ { y } else { y - 2 };\n    let bigger = if x_even.is_zero() && y_even.is_zero()\
    \ {\n        0\n    } else {\n        let x = match x_even.is_zero() {\n     \
    \       true => x_even,\n            _ => x_even.clone(),\n        };\n      \
    \  let y = match y_even.is_zero() {\n            true => y_even,\n           \
    \ _ => y_even.clone(),\n        };\n        if x > y {\n            x - 1\n  \
    \      } else {\n            y - 1\n        }\n    };\n    match bigger.is_zero()\
    \ {\n        true => -1,\n        false => bigger\n    }", "    while x < y {\n\
    \        if x <= (x + (y / 2)) % 2 && (x + y) % 2 == 0 {\n            return x;\n\
    \        }\n        x = x + y;\n    }\n    -1", "    if x > y {\n        let tmp\
    \ = x; x = y; y = tmp;\n    }\n\n    if x == y {\n        x\n    } else {\n  \
    \      let mut big = x;\n        while big < y {\n            if big_even(&big)\
    \ {\n                big += 2;\n            } else {\n                break;\n\
    \            }\n        }\n        big\n    }", "    if x < y {\n        if x\
    \ % 2 == 0 {\n            x\n        } else {\n            choose_num(y - 1, y)\n\
    \        }\n    } else if y < x {\n        if y % 2 == 0 {\n            y\n  \
    \      } else {\n            choose_num(x, y - 1)\n        }\n    } else {\n \
    \       x\n    }", "    // The largest even number that can be formed by x and\
    \ y.\n    let mut max_even = x;\n\n    // Loop from x to y-1\n    for &y in &[y,\
    \ y - 1..] {\n        // If even, increment x to make the next even number bigger.\n\
    \        if y % 2 == 0 {\n            x += 2;\n        }\n        // Else if x\
    \ is bigger than max_even, set max_even to x\n        // and increment x to make\
    \ the next even number bigger.\n        else {\n            max_even = x;\n  \
    \          x += 2;\n        }\n    }\n\n    // Return max_even\n    max_even",
  "    if x < y {\n        choose_num(y, x)\n    } else {\n        x\n    }", "  \
    \  let mut biggest = x;\n    let mut counter = 0;\n    let mut biggest_counter\
    \ = 0;\n\n    while biggest < y {\n        if biggest_counter > counter {\n  \
    \          biggest = biggest + 1;\n        } else {\n            biggest = biggest\
    \ + 2;\n        }\n\n        if biggest == y {\n            return biggest;\n\
    \        }\n\n        if biggest % 2 == 0 {\n            biggest_counter = biggest_counter\
    \ + 1;\n        } else {\n            counter = counter + 1;\n        }\n    }\n\
    \n    return biggest;", "    if x == y {\n        x\n    } else {\n        let\
    \ mut min = x;\n        let mut max = y;\n        while min < max {\n        \
    \    if min % 2 == 0 {\n                min = min + 1;\n            } else {\n\
    \                max = max - 1;\n            }\n        }\n        max\n    }",
  "    if y > x {\n        choose_num(y, x)\n    } else {\n        -1\n    }", " \
    \   if x <= y {\n        x\n    }\n    else {\n        y\n    }", "    if x <\
    \ y {\n        choose_num(y, x)\n    } else {\n        let mut x = x;\n      \
    \  let mut y = y;\n        while x > y {\n            x = x / 2;\n           \
    \ y = y / 2;\n        }\n        if x > y {\n            x - y\n        } else\
    \ {\n            -1\n        }\n    }", "    loop {\n        if x > y || y >=\
    \ x {\n            return -1;\n        }\n        let m = x % y;\n        if m\
    \ == 0 {\n            return x;\n        }\n        x = y;\n        y = m;\n \
    \   }", "    let mut biggest_num: isize = 0;\n    let mut current_num = x;\n\n\
    \    while current_num < y {\n        if current_num % 2 == 0 {\n            if\
    \ current_num > biggest_num {\n                biggest_num = current_num;\n  \
    \          }\n        }\n        current_num = current_num + 1;\n    }\n    if\
    \ current_num == y {\n        return biggest_num;\n    }\n    -1", "    while\
    \ y >= x {\n        let (res, c) = if y < x { (y, y) } else { (x, x) };\n    \
    \    if c % 2 == 0 {\n            return res;\n        }\n        x -= 1;\n  \
    \      y -= 1;\n    }\n    -1", "    if x >= y {\n        -1\n    } else {\n \
    \       let mut i = y;\n        while i <= x {\n            if i % 2 != 0 {\n\
    \                return i;\n            }\n            i += 1;\n        }\n  \
    \      -1\n    }", "    if x > y { return -1; }\n    if x == y { return x; }\n\
    \    if x <= y {\n        let mut min_num = x;\n        for num in &[x + 1, y\
    \ - 1] {\n            if *num < min_num {\n                min_num = *num;\n \
    \           }\n        }\n        if min_num % 2 == 1 {\n            -1\n    \
    \    } else {\n            min_num\n        }\n    } else {\n        -1\n    }",
  "    \n    // 1. Check the range.\n    if x < y {\n        loop {\n            let\
    \ tmp = x;\n            x = y;\n            y = tmp;\n            if y < x {\n\
    \                break;\n            }\n        }\n    }\n    \n    // 2. Calculate\
    \ the midpoint.\n    let mid = x / 2;\n    \n    // 3. Calculate the biggest even\
    \ number in range[mid, mid+1].\n    let mut n = mid;\n    loop {\n        if n\
    \ % 2 == 0 {\n            break;\n        }\n        n /= 2;\n    }\n    \n  \
    \  // 4. Return the biggest even number.\n    return n;", "    let mut min_num\
    \ = x;\n    let mut max_num = y;\n    if x < y {\n        let temp = min_num;\n\
    \        min_num = max_num;\n        max_num = temp;\n    }\n    \n    // TODO:\
    \ make it smarter. Maybe use binary search\n    while max_num - min_num > 1 {\n\
    \        let num = max_num + min_num / 2;\n        if num % 2 == 0 {\n       \
    \     min_num = num;\n        } else {\n            max_num = num;\n        }\n\
    \    }\n    min_num", "    let mut num = x;\n    let mut even = true;\n    loop\
    \ {\n        num = num * 2 + 1;\n        if num > y {\n            break;\n  \
    \      }\n        if even {\n            even = false;\n            num = num\
    \ - 1;\n        }\n    }\n    num", "    let mut max = x;\n    let mut min = y;\n\
    \    loop {\n        if max < min {\n            return -1;\n        }\n     \
    \   if max % 2 == 0 {\n            max += 1;\n        } else {\n            max\
    \ -= 1;\n        }\n    }", "    if x > y {\n        (x, y)\n    } else {\n  \
    \      (y, x)\n    }\n    .iter()\n    .find(|&x| x%2 == 0)\n    .expect(\"choose_num\"\
    )", "    match x <= y {\n        true => return x;\n        false => return y,\n\
    \    }", "    let mut choosen = 0;\n    let mut current = x;\n\n    for &y in\
    \ &[y as usize, y - 1, y - 2, y - 3] {\n        if current % 2 == 0 {\n      \
    \      choosen = y;\n            break;\n        }\n\n        current /= 2;\n\
    \    }\n\n    choosen", "    if x >= y {\n        -1\n    } else {\n        loop\
    \ {\n            if x % 2 == 0 {\n                return x\n            }\n  \
    \          let x = x / 2;\n            if y % 2 == 0 {\n                return\
    \ y\n            }\n            let y = y / 2;\n        }\n    }", "    while\
    \ x % 2 == 0 && y % 2 == 0 {\n        if x < y {\n            x = x + 1;\n   \
    \     } else {\n            y = y + 1;\n        }\n    }\n    if x < y {\n   \
    \     x\n    } else {\n        y\n    }", "    if x <= y {\n        (x, y)\n \
    \   } else {\n        (y, x)\n    }", "    if x != y {\n        if y > x {\n \
    \           choose_num(y, x)\n        } else {\n            choose_num(x, y)\n\
    \        }\n    } else {\n        x\n    }", "    if x >= y {\n        -1\n  \
    \  } else {\n        match x % 2 {\n            0 | 1 => x,\n            _ =>\
    \ choose_num(x + 1, y),\n        }\n    }", "    if x >= y {\n        -1\n   \
    \ } else {\n        if x % 2 == 0 {\n            if y % 2 == 0 {\n           \
    \     y * 2\n            } else {\n                -1\n            }\n       \
    \ } else {\n            if y % 2 == 0 {\n                -1\n            } else\
    \ {\n                y * 2\n            }\n        }\n    }", "    let min_number\
    \ = if x <= y { x } else { y };\n    let max_number = if x <= y { y } else { x\
    \ };\n    let mut num = min_number;\n    while num < max_number {\n        if\
    \ num % 2 == 0 {\n            break;\n        }\n        num +=2;\n    }\n   \
    \ num", "    let mut result = -1;\n    loop {\n        let even = if ((x % 2)\
    \ == 0 && y % 2 == 0) || ((x % 2) == 1 && y % 2 == 1) {\n            result +=\
    \ 1;\n            break;\n        } else {\n            break;\n        }\n  \
    \      x = x + 1;\n        y = y + 1;\n    }\n    result", "    if x <= y {\n\
    \        return x;\n    }\n    let mut v = y;\n    while v >= x {\n        v =\
    \ v % x;\n    }\n    v", "    if x <= y {\n        if x <= 2i32 && y <= 2i32 {\n\
    \            if x * y == 0 {\n                return -1\n            }\n     \
    \       return x + (y - x) / 2\n        }\n        return -1\n    }\n    if y\
    \ <= 2i32 {\n        if x < 2i32 && y <= 2i32 {\n            if x * y == 0 {\n\
    \                return -1\n            }\n            return x + (y - x) / 2\n\
    \        }\n        return -1\n    }\n    if x <= 2i32 {\n        if y < 2i32\
    \ && x <= 2i32 {\n            if x * y == 0 {\n                return -1\n   \
    \         }\n            return x + (y - x) / 2\n        }\n        return -1\n\
    \    }\n    if x < 2i32 && y < 2i32 {\n        if x * y == 0 {\n            return\
    \ -1\n        }\n        return x + (y - x) / 2\n    }\n    if x > 2i32 && y >\
    \ 2i32 {\n        if x * y == 0 {\n            return -1\n        }\n        return\
    \ x + (y - x) / 2\n    }\n    return -1", "    if x == y {\n        x\n    } else\
    \ {\n        if x % 2 != 0 {\n            -1\n        } else {\n            x\
    \ - (y % 2)\n        }\n    }", "    if x >= y {\n        return -1;\n    }\n\
    \    let mut x = x;\n    let mut y = y;\n    loop {\n        \n        if x %\
    \ 2 == 0 {\n            x = x / 2;\n        } else {\n            x = x * 3 +\
    \ 1; \n        }\n        \n        if y % 2 == 0 {\n            y = y / 2;\n\
    \        } else {\n            y = y * 3 + 1; \n        }\n        \n        if\
    \ x == y {\n            return x;\n        }\n        \n    }", "    while x <=\
    \ y {\n        if x % 2 == 0 {\n            return x;\n        }\n\n        x\
    \ += 1\n    }\n\n    if y % 2 == 0 {\n        return y;\n    }\n\n    return -1",
  "    loop {\n        if y >= x {\n            return x;\n        }\n\n        let\
    \ mut y = y + 1;\n        if y % 2 == 0 {\n            return y;\n        }\n\n\
    \        let mut x = x - 1;\n        if x % 2 == 0 {\n            return x;\n\
    \        }\n    }", '    x % 2 == 0 && y % 2 == 0 ? x : -1', "    if x < y {\n\
    \        choose_num(y, x)\n    } else if y > x {\n        choose_num(x, y)\n \
    \   } else {\n        x\n    }", "    while x > y {\n        if x % 2 == 0 {\n\
    \            return x;\n        }\n        else {\n            x = x + 1;\n  \
    \      }\n    }\n    while y > x {\n        if y % 2 == 0 {\n            return\
    \ y;\n        }\n        else {\n            y = y - 1;\n        }\n    }\n  \
    \  return -1;", "    let mut v = x;\n    let mut w = y;\n    while v < w {\n \
    \       match v % 2 {\n            0 => v += 1,\n            1 => w -= 1,\n  \
    \          _ => break,\n        }\n    }\n    if w == x {\n        v\n    } else\
    \ {\n        w\n    }", '    (x * y + 1).checked_add(1).ok_or(-1)', "    let mut\
    \ max = 0isize;\n    let mut pos = 0;\n    \n    while pos < y {\n        let\
    \ pos = max + (x / 2);\n        if pos > x {\n            max = pos;\n       \
    \ } else {\n            max = pos;\n        }\n        \n        if pos == x {\n\
    \            break;\n        }\n    }\n    \n    -1", "    if y <= x {\n     \
    \   -1\n    } else {\n        let mut max_num = y;\n        let mut max_pos =\
    \ 0;\n\n        for i in x..(y + 1) {\n            if max_num >= i {\n       \
    \         max_num = i;\n                max_pos = i;\n            }\n        }\n\
    \n        max_pos\n    }", "    let mut even: isize = 0;\n    let mut odd: isize\
    \ = 0;\n    let mut x: isize = x;\n    let mut y: isize = y;\n    loop {\n   \
    \     if x % 2 == 0 && y % 2 == 0 {\n            even = even * 2 + x;\n      \
    \      x = x / 2;\n            even = even / 2;\n            y = y / 2;\n    \
    \        odd = odd / 2;\n            if odd > even {\n                return even;\n\
    \            }\n        }\n        if x % 2 == 0 && y % 2 != 0 {\n           \
    \ even = even * 2 + x;\n            x = x / 2;\n            even = even / 2;\n\
    \            y = y / 2;\n            odd = odd / 2;\n            if odd > even\
    \ {\n                return even;\n            }\n        }\n        if x % 2\
    \ != 0 && y % 2 == 0 {\n            even = even * 2 + x;\n            x = x /\
    \ 2;\n            even = even / 2;\n            y = y / 2;\n            odd =\
    \ odd / 2;\n            if odd > even {\n                return even;\n      \
    \      }\n        }\n        if x % 2 != 0 && y % 2 != 0 {\n            even =\
    \ even * 2 + x;\n            x = x / 2;\n            even = even / 2;\n      \
    \      y = y / 2;\n            odd = odd / 2;\n            if odd > even {\n \
    \               return even;\n            }\n        }\n    }", "    if x >= y\
    \ {\n        -1\n    } else {\n        let mut xi = x;\n        let mut yi = y;\n\
    \        loop {\n            if xi % 2 == 0 {\n                yi /= 2;\n    \
    \        } else {\n                xi /= 2;\n            }\n            if xi\
    \ == yi {\n                return xi;\n            }\n        }\n    }", "   \
    \ match (x / 2, y % 2) {\n        (0 | 1, 0) => x,\n        (0 | 0, 1) => y,\n\
    \        _ => -1,\n    }", "    let xprime = x % 2;\n    let yprime = y % 2;\n\
    \    if xprime == yprime {\n        x\n    } else {\n        match xprime {\n\
    \            1 => y,\n            0 => x,\n            _ => -1\n        }\n  \
    \  }", '    (x + y) / 2 * 2 % 7', "    if x <= y {\n        choose_num(y, x)\n\
    \    } else if x == y {\n        x\n    } else {\n        choose_num(choose_num(x,\
    \ y-1), y)\n    }", "    // Your code goes here\n    if x >= y {\n        -1\n\
    \    } else if x < 0 {\n        0\n    } else {\n        if x <= y {\n       \
    \     let mut result = x;\n            let mut i = 0;\n            while i <=\
    \ y {\n                if result % 2 == 0 {\n                    i += 1;\n   \
    \             } else {\n                    result -= 2;\n                }\n\
    \            }\n            result\n        } else {\n            let mut result\
    \ = y;\n            let mut i = 0;\n            while i <= x {\n             \
    \   if result % 2 == 0 {\n                    i += 1;\n                } else\
    \ {\n                    result += 2;\n                }\n            }\n    \
    \        result\n        }\n    }", "    if y <= x {\n        return -1\n    }\n\
    \    \n    if x % 2 != 0 { // x is even\n        return choose_num(x + 1, y) //\
    \ try the next even number\n    }\n    \n    let mut cur = y\n    \n    while\
    \ cur != x {\n        cur = (cur * 10) + 1 // add 1 to current number\n      \
    \  if cur < x { // check that the number to be added is a lower one\n        \
    \    return -1\n        }\n    }\n    \n    return cur", "    let mut max_even\
    \ = x;\n    \n    for (i, &even) in x.iter().enumerate() {\n        if even >\
    \ y {\n            break;\n        }\n        max_even = i;\n    }\n    \n   \
    \ if max_even < x {\n        max_even = -1\n    }\n    \n    return max_even",
  "    if x <= y {\n        // x is the first number that needs to be checked\n  \
    \      if y % 2 == 1 {\n            x\n        } else {\n            y\n     \
    \   }\n    } else {\n        // y is the first number that needs to be checked\n\
    \        if x % 2 == 1 {\n            y\n        } else {\n            x\n   \
    \     }\n    }", "    if x < y {\n        choose_num(y, x)\n    } else {\n   \
    \     choose_num(x, y)\n    }", "    let mut big = x;\n    while big < y {\n \
    \       if big % 2 == 0 {\n            big += 1;\n        }\n        else {\n\
    \            big -= 1;\n        }\n    }\n    if big == x {\n        -1\n    }\n\
    \    else {\n        big\n    }", "    let mut i = x;\n    let mut j = y;\n  \
    \  while i <= j {\n        if i % 2 == 0 {\n            i += 1;\n        } else\
    \ {\n            j -= 1;\n        }\n    }\n    j", "    loop {\n        if x\
    \ >= y {\n            return -1;\n        }\n\n        if y > x {\n          \
    \  return x;\n        }\n\n        let a = x;\n        let b = y;\n\n        //\
    \ if a > b, then swap them\n        if a > b {\n            let tmp = a;\n   \
    \         a = b;\n            b = tmp;\n        }\n\n        // if the number\
    \ is even\n        if a % 2 == 0 {\n            return a;\n        }\n\n     \
    \   // if the number is odd\n        // if a = b - 1, then a can be even\n   \
    \     if a == b - 1 {\n            let tmp = a;\n            a = b;\n        \
    \    b = tmp;\n        }\n\n        // if b = a + 1, then b can be even\n    \
    \    if b == a + 1 {\n            let tmp = b;\n            a = b;\n         \
    \   b = tmp;\n        }\n\n        // if a = b + 1, then a can be odd\n      \
    \  if a == b + 1 {\n            let tmp = a;\n            a = b;\n           \
    \ b = tmp;\n        }\n    }", "    let mut x = x;\n    let mut y = y;\n    while\
    \ x < y {\n        if x % 2 == 0 && y % 2 != 0 {\n            x = x + 1;\n   \
    \         y = y - 1;\n        } else if x % 2 != 0 && y % 2 == 0 {\n         \
    \   y = y + 1;\n            x = x - 1;\n        } else if x % 2 != 0 && y % 2\
    \ != 0 {\n            x = x + 1;\n            y = y - 1;\n        } else {\n \
    \           x = x + 1;\n            y = y - 1;\n        }\n    }\n    if x ==\
    \ y {\n        x\n    } else {\n        -1\n    }", "    let mut i: isize = 1;\n\
    \    let mut j: isize = 1;\n    loop {\n        if j > y {\n            j = -1;\n\
    \            break;\n        }\n        if i % 2 == 0 {\n            if j >= x\
    \ {\n                i = i + 1;\n                j = j + 1;\n            } else\
    \ {\n                i = i + 1;\n            }\n        } else {\n           \
    \ if j >= x {\n                i = i + 1;\n                j = j + 1;\n      \
    \      } else {\n                j = j + 1;\n            }\n        }\n    }\n\
    \    i", "    if x >= y {\n        -1\n    } else {\n        let mut num = 1;\
    \ // The number will get bigger from here.\n        while x <= y {\n         \
    \   if x % 2 == 0 {\n                if num < y {\n                    num = x\
    \ + 1;\n                } else {\n                    num = x;\n             \
    \   }\n            }\n            x += 1;\n        }\n        num\n    }", " \
    \   if x >= y || x <= y {\n        return -1;\n    }\n    for i in 0..(x-y) {\n\
    \        if i % 2 == 0 {\n            return i;\n        }\n    }\n    -1", " \
    \   if x <= 0 || y <= 0 {\n        -1\n    } else {\n        let mut left = x;\n\
    \        let mut right = y;\n\n        loop {\n            if left > right {\n\
    \                return -1;\n            }\n\n            match even_integer(left,\
    \ right) {\n                None => return -1,\n                Some(x) => return\
    \ x,\n            }\n        }\n    }", "    match (x - y).cmp(&(x * y)) {\n \
    \       Ordering::Less => -1,\n        Ordering::Greater => (x + y - 2).ceil()\
    \ as isize,\n        Ordering::Equal => x,\n    }", "    if x >= y || x <= 0 ||\
    \ y <= 0 { return -1; }\n    let mut num: isize = (x + y);\n    let mut even:\
    \ isize = (x - y);\n    if even > num/2 { num = even; }\n    return num", "  \
    \  match x / y {\n        x % y == 0 => (x / y) * y,\n        _ => -1\n    }",
  "    if x >= y {\n        -1\n    } else {\n        let mut counter: usize = 0;\n\
    \        let mut num: isize = 1;\n        while num < y {\n            counter\
    \ += 1;\n            if num % 2 == 0 {\n                num += 1;\n          \
    \  } else {\n                num += 2;\n            }\n        }\n        counter\n\
    \    }", "    let mut x = x;\n    let mut y = y;\n    loop {\n        if x % 2\
    \ == 0 && y % 2 == 0 { break; }\n        x /= 2;\n        y /= 2;\n    }\n   \
    \ if x < y {\n        x\n    } else {\n        y\n    }", "    match x % 2 {\n\
    \        0 | 1 => x,\n        _ => {\n            let mut i = x;\n           \
    \ while i <= y {\n                i += 2;\n                if i == y { break;\
    \ }\n            }\n            i\n        }\n    }", "    // base case\n    if\
    \ x < y && x > 0 {\n        return -1\n    }\n\n    let mut even: usize = 0;\n\
    \    let mut odd: usize = 0;\n\n    // first and last even numbers\n    if x %\
    \ 2 == 0 {\n        even += 1;\n    }\n    if y % 2 == 0 {\n        even += 1;\n\
    \    }\n    let mut min_even = even;\n    let mut max_even = even;\n\n    // second\
    \ and last odd numbers\n    if x % 2 != 0 {\n        odd += 1;\n    }\n    if\
    \ y % 2 != 0 {\n        odd += 1;\n    }\n    let mut min_odd = odd;\n    let\
    \ mut max_odd = odd;\n\n    // now the main loop\n    while even < max_even &&\
    \ odd < max_odd {\n        // choose the even number\n        if x % 2 == 0 {\n\
    \            min_even += 1;\n            if x > max_even {\n                max_even\
    \ = x;\n            }\n        }\n\n        // choose the odd number\n       \
    \ if y % 2 == 0 {\n            min_odd += 1;\n            if y > max_odd {\n \
    \               max_odd = y;\n            }\n        }\n\n        x /= 2;\n  \
    \      y /= 2;\n    }\n\n    // if there's no even and odd number\n    if even\
    \ >= max_even + min_even {\n        return -1;\n    }\n\n    if odd >= max_odd\
    \ + min_odd {\n        return -1;\n    }\n\n    // return the biggest even number\n\
    \    return min_even;", "    use core::cmp::Ordering;\n    let mut big = x;\n\
    \    let mut small = y;\n    if big > small {\n        big = y\n    } else {\n\
    \        small = x\n    }\n    while big > 0 && big % 2 == 0 {\n        big =\
    \ big / 2;\n    }\n    big", "    if x <= y {\n        return x + 1;\n    }\n\
    \    if y <= x {\n        return y - 1;\n    }\n    let mut max_even = x;\n  \
    \  for i in 0..(y-1).min(y) {\n        max_even = max_even + 1;\n        max_even\
    \ %= y;\n    }\n    -1", "    let mut ans = x;\n    \n    for _ in 0..y {\n  \
    \      if ans % 2 == 0 {\n            ans /= 2;\n        } else {\n          \
    \  break;\n        }\n    }\n    \n    if ans > x {\n        ans - 1\n    } else\
    \ {\n        ans\n    }", "    let mut result = x;\n    while result < y {\n \
    \       if result % 2 != 0 {\n            return result;\n        }\n        result\
    \ += 1;\n    }\n    return -1;", "    while y > x {\n        if y % 2 == 0 {\n\
    \            return y;\n        }\n        y /= 2;\n    }\n    return -1;", " \
    \   if x >= y { return -1; }\n    for num in (x .. y).rev() {\n        if num\
    \ % 2 == 0 {\n            return num;\n        }\n    }\n    -1", "    if y <=\
    \ x {\n        return -1;\n    }\n    if y >= (x / 2) {\n        return x / 2;\n\
    \    }\n\n    let mut num = 0;\n    let mut x = x;\n    let mut y = y;\n    while\
    \ y > x {\n        num += 1;\n        if y % 2 == 0 {\n            y /= 2;\n \
    \       } else {\n            y *= 2;\n        }\n    }\n\n    num", "    let\
    \ max_num = if x <= y { x } else { y };\n    if max_num % 2 == 0 {\n        max_num\n\
    \    } else {\n        let mut min_num = max_num;\n        min_num -= 2;\n   \
    \     min_num\n    }", "    if x <= y {\n        (x, y)\n    } else {\n      \
    \  (y, x)\n    }\n    .iter()\n    .fold(\n        None,\n        |prev, (&mut\
    \ x, &mut y)| {\n            if prev.is_some() {\n                None\n     \
    \       } else if x % 2 == 0 {\n                Some(x + y)\n            } else\
    \ {\n                Some(x - y)\n            }\n        },\n    )\n    .unwrap()",
  "    if x >= y {\n        return -1;\n    }\n\n    match x % 2 {\n        0 => x,\n\
    \        _ => x,\n    }", "    if x < y {\n        let tmp = x;\n        x = y;\n\
    \        y = tmp;\n    }\n    if y == 0 {\n        return -1\n    }\n    if y\
    \ == 1 {\n        return x;\n    }\n    \n    let mut m = y / 2;\n    while m\
    \ != 0 {\n        if ((x % m) == 0) {\n            return x;\n        }\n    \
    \    \n        m *= 2;\n    }\n    \n    return -1;", "    if y < x {\n      \
    \  choose_num(y, x)\n    } else {\n        if x % 2 != 0 {\n            x\n  \
    \      } else {\n            choose_num(x + 1, y)\n        }\n    }", "    if\
    \ x == y {\n        x\n    } else if x > y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x = x;\n        while x > y {\n            x -= y;\n\
    \            x -= y;\n        }\n        x\n    }", "    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        x\n    }", "    let x: f64 = x.to_f64().unwrap();\n\
    \    let y: f64 = y.to_f64().unwrap();\n    let mut ans = 0;\n    for i in 1..y/2\
    \ {\n        let mut xi = x*i/(y-i);\n        if xi*i > y {\n            return\
    \ -1;\n        }\n        ans = if xi > ans {\n            xi\n        } else\
    \ {\n            ans\n        }\n    }\n    ans", "    let mut num_x = x;\n  \
    \  let mut num_y = y;\n    let mut new_num_x = num_x;\n    let mut new_num_y =\
    \ num_y;\n    let mut even_num_x = num_x;\n    let mut even_num_y = num_y;\n \
    \   if num_y == num_x {\n        even_num_y = num_y;\n        even_num_x = num_x;\n\
    \    }\n    loop {\n        if even_num_x % 2 == 0 && even_num_y % 2 == 0 {\n\
    \            even_num_x = even_num_x / 2;\n            even_num_y = even_num_y\
    \ / 2;\n            continue;\n        }\n        if even_num_y % 2 == 0 && even_num_x\
    \ % 2 == 0 {\n            even_num_x = even_num_x / 2;\n            even_num_y\
    \ = even_num_y / 2;\n            new_num_x = num_x;\n            new_num_y = num_y;\n\
    \            break;\n        }\n        if even_num_y % 2 == 0 {\n           \
    \ new_num_x = num_x;\n            new_num_y = num_y;\n            break;\n   \
    \     }\n        if even_num_x % 2 == 0 {\n            new_num_x = num_x;\n  \
    \          new_num_y = num_y;\n            even_num_x = num_x;\n            even_num_y\
    \ = num_y;\n            break;\n        }\n    }\n    if new_num_y >= y || new_num_x\
    \ >= x {\n        return -1;\n    }\n    new_num_x", "    let mut ans = 0;\n \
    \   while y >= x {\n        let mut mid = (x + y) / 2;\n        if mid % 2 ==\
    \ 1 {\n            x = mid - 1;\n        } else {\n            y = mid - 1;\n\
    \        }\n    }\n    return ans;", "    if x <= y {\n        return x;\n   \
    \ }\n    let x = x.checked_sub(1).unwrap();\n    if x < y {\n        return x.checked_div(2).unwrap();\n\
    \    }\n    y.checked_div(x).unwrap()", "    if x > y {\n        (x, y) = (y,\
    \ x)\n    }\n    for num in 1..(x+y)/2 {\n        if num % 2 == 0 {\n        \
    \    return num\n        }\n    }\n    -1", "    if x >= y {\n        -1\n   \
    \ } else if x % 2 == 0 {\n        x + (x % 3)\n    } else {\n        x + (x %\
    \ 3)\n    }", "    // Find a number in the range [x, y] inclusive.\n    let mut\
    \ i = x;\n    while i <= y {\n        if i % 2 == 0 {\n            // Found a\
    \ pair.\n            return i;\n        }\n        i += 1;\n    }\n    // If there\
    \ are no even numbers in [x, y], then return -1.\n    -1", "    if x < y {\n \
    \       choose_num(y, x)\n    } else {\n        choose_num(x, y)\n    }", "  \
    \  let x_even = x % 2 == 0;\n    let y_even = y % 2 == 0;\n    if x_even && y_even\
    \ {\n        -1\n    } else if x_even {\n        x\n    } else {\n        y\n\
    \    }", "    if x < y {\n        choose_num(y, x)\n    } else {\n        let\
    \ mut min_x = x;\n        let mut min_y = y;\n        while min_x < min_y {\n\
    \            let mut x = min_x;\n            let mut y = min_y;\n            min_x\
    \ = min_y;\n            min_y = x + (y - x) / 2;\n            if x * x + y * y\
    \ < x * min_y + y * min_x {\n                min_x = x;\n                min_y\
    \ = y;\n            }\n        }\n        min_x\n    }", "    use std::cmp::Ordering::{Greater,\
    \ Equal, Less};\n    (x - y).cmp(&Greater).cmp(&Equal).unwrap_or(-1)", "    if\
    \ x < y {\n        choose_num(y, x)\n    } else {\n        choose_num(x, y)\n\
    \    }", "    let mut a = x;\n    let mut b = y;\n    if a >= b {\n        return\
    \ a;\n    }\n\n    while a <= b {\n        if a % 2 == 0 && b % 2 == 0 {\n   \
    \         return a;\n        }\n        a += 1;\n        b -= 1;\n    }\n\n  \
    \  -1", "    let mut max_num: Option<isize> = None;\n    for num in 0..y {\n \
    \       let num_even = if num % 2 == 0 { Some(num) } else { None };\n        if\
    \ num_even.is_some() {\n            let num_even = num_even.take();\n        \
    \    if !max_num.is_some() || num_even.cmp(&max_num).is_larger () {\n        \
    \        max_num = num_even;\n            }\n        }\n    }\n    max_num.or(-1).unwrap()",
  "    let even = if x % 2 == 0 {\n        x // 2\n    } else {\n        (x-1) //\
    \ 2\n    };\n    let even_in_range = if y % 2 == 0 {\n        y // 2\n    } else\
    \ {\n        (y-1) // 2\n    };\n    let even_in_range = even_in_range - even;\n\
    \    if even_in_range >= 0 {\n        return even\n    } else {\n        return\
    \ -1\n    }", "    if x <= 0 || y <= 0 || x > y {\n        return -1;\n    }\n\
    \    let mut a = 1;\n    let mut b = y;\n    while b <= x {\n        a = a * b\
    \ + 1; \n        b += y;\n    }\n    a", "    match x {\n        y if y > x =>\
    \ -1,\n        y if y == x => x,\n        _ => if y % 2 == 0 {\n            x\n\
    \        } else {\n            choose_num(y, x + 1)\n        }\n    }", "    while\
    \ x < y {\n        let mid = x + y/2;\n        if mid % 2 == 0 {\n           \
    \ x = mid;\n        } else {\n            y = mid;\n        }\n    }\n    if x\
    \ <= y { -1 } else { x }", "    loop {\n        match x / y {\n            1 =>\
    \ return x,\n            x if x <= y => return x,\n            y if x <= y =>\
    \ return y,\n            _ => ()\n        }\n    }", '    if x > y { -1, -1 }
    else if x < y { 1, 1 } else { 0, y }', "    let num_list = &[&0; x];\n    let\
    \ mut i = y;\n    while num_list.len() > 0 {\n        let mut found = false;\n\
    \        while !found && i >= x {\n            i = i / 2;\n            match num_list.pop()\
    \ {\n                &0 => found = true\n                &i => false\n       \
    \     }\n        }\n        num_list.push(i);\n    }\n    num_list.last().unwrap()",
  "    if x < y {\n        choose_num(y, x)\n    } else {\n        choose_num(x, y)\n\
    \    }", "    if x >= y {\n        -1\n    }\n    else if x > y {\n        x\n\
    \    }\n    else {\n        y\n    }", "    if x <= y {\n        let mut num =\
    \ x;\n        while num < y {\n            num <<= 1;\n        }\n        num\
    \ >>= 1;\n        return num;\n    }\n    -1", "    let mut num = x;\n    while\
    \ num >= y {\n        num = num - y;\n    }\n    num", "    if x < y {\n     \
    \   choose_num(y, x)\n    } else if x == y {\n        x\n    } else {\n      \
    \  choose_num(x, y)\n    }", "    while y >= x {\n        let mid = (x + y) /\
    \ 2;\n        if mid % 2 == 0 {\n            x = mid;\n        } else {\n    \
    \        y = mid;\n        }\n    }\n    if x > y {\n        x\n    } else {\n\
    \        y\n    }", "    if y > x {\n        choose_num(y, x)\n    }\n    if y\
    \ > x * (y / x) || y == 1 {\n        y\n    }\n    else {\n        x * (x / y)\
    \ - 1\n    }", "    let mut result = x;\n    while result <= y {\n        let\
    \ result = result + 2;\n        if result % 2 == 0 {\n            return result;\n\
    \        }\n    }\n    -1", "    let mut nums = vec![];\n    let mut i = x;\n\
    \    while i <= y {\n        if i%2 == 0 {\n            nums.push(i);\n      \
    \  }\n        i += 1;\n    }\n\n    if nums.len() == 0 {\n        return -1;\n\
    \    }\n\n    nums.iter().rev().max().unwrap()", "    if x < y {\n        choose_num(y,\
    \ x)\n    }\n    else if x <= y {\n        choose_num(x, y)\n    }\n    else {\n\
    \        x\n    }", "    let mut x = x;\n    let mut y = y;\n    if x < y {\n\
    \        (x, y) = (y, x);\n    }\n    \n    while y < x {\n        (x, y) = (y,\
    \ x - y) as isize;\n    }\n    \n    (x..y)\n        .filter(|&i| i % 2 == 0)\n\
    \        .max()", "    while x <= y {\n        if x % 2 == 0 && y % 2 == 0 {\n\
    \            return x;\n        } else if x % 2 == 1 {\n            x /= 2;\n\
    \        } else {\n            y /= 2;\n        }\n    }\n\n    -1", "    while\
    \ x <= y {\n        if x % 2 == 0 && y % 2 == 0 {\n            return x;\n   \
    \     }\n        y -= 1;\n    }\n    -1", "    match x.checked_adding(y) {\n \
    \       Some(x) => if x > y {\n            x\n        } else {\n            y\n\
    \        },\n        None => -1,\n    }", "    if x <= y {\n        return -1;\n\
    \    }\n\n    let mut num: isize = (*x).pow(*y).floor();\n    let mut max_num:\
    \ isize = num;\n    loop {\n        if num % 2 == 0 {\n            return max_num;\n\
    \        }\n\n        num = num / 2;\n        max_num = max_num * 2;\n    }",
  "    if x <= 0 || y <= 0 {\n        -1\n    }\n    else {\n        if y == x {\n\
    \            x\n        }\n        else {\n            if x % 2 == 0 {\n     \
    \           x / 2\n            }\n            else {\n                (x * 3)\
    \ + 1\n            }\n        }\n    }", "    if x == y {\n        return -1;\n\
    \    }\n\n    if x > y {\n        choose_num(y, x).unwrap()\n    } else {\n  \
    \      let mut x: isize = 0;\n        let mut y: isize = y;\n\n        while x\
    \ < y {\n            if x * y == y {\n                return x;\n            }\n\
    \n            x += (x % 2) == 0 ? 1 : 0;\n            y -= (y % 2) == 0 ? 1 :\
    \ 0;\n        }\n\n        -1\n    }", "    while x <= y {\n        let mid =\
    \ x + (y - x)/2\n        if mid % 2 == 0 {\n            x = mid\n        } else\
    \ {\n            y = mid\n        }\n    }\n    if x == y {\n        -1\n    }\
    \ else {\n        x\n    }", "    if x >= y {\n        -1\n    } else if x < y\
    \ {\n        let diff: isize = x - y;\n        let result: isize = if diff < 0\
    \ {\n            -1\n        } else {\n            diff\n        };\n        result\
    \ + 1\n    } else {\n        x\n    }", "    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }", "    let num_range = |range:\
    \ &[isize], index: isize| {\n        if index == range.len() - 1 {\n         \
    \   range[index]\n        } else {\n            range[index] + num_range(range,\
    \ index + 1)\n        }\n    };\n\n    let evens = (0..x).filter(|x| *x % 2 ==\
    \ 0).take(y);\n    let odd = y.checked_sub(evens.iter().enumerate().map(|(i, x)|\
    \ (i, x)).collect::<Vec<_>>().max().unwrap().1);\n    if evens.len() == 0 {\n\
    \        odd\n    } else {\n        let mut result = odd;\n        for mut even\
    \ in evens {\n            if even > result {\n                result = even;\n\
    \            }\n        }\n        result\n    }", "    // Use binary search algorithm\
    \ to find first even number that is \n    // greater than x\n    let mut mid =\
    \ x.checked_add(y).unwrap();\n    while mid < y {\n        if mid.checked_add(1).is_none()\
    \ {\n            mid = mid.checked_add(1).unwrap();\n        }\n        else {\n\
    \            break;\n        }\n    }\n\n    if mid == y {\n        -1\n    }\n\
    \    else {\n        mid - 1\n    }", "    if y > x {\n        choose_num(y, x)\n\
    \    } else {\n        if x % 2 == 0 {\n            x\n        } else {\n    \
    \        choose_num(y - 1, (x - 1) / 2)\n        }\n    }", "    if x < y && x\
    \ >= 1 && y >= 1 {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x * y / 2\n        } else {\n            return -1\n        }\n    } else {\n\
    \        return -1\n    }", "    if x < 0 || y < 0 || x > y {\n        return\
    \ -1;\n    }\n\n    if y > x {\n        return -1;\n    }\n\n    let mut lower\
    \ = x;\n    let mut upper = y;\n\n    while lower <= upper {\n        let mut\
    \ even = true;\n        let mut num = 0;\n\n        while even && lower <= upper\
    \ {\n            num = lower % 2 + num;\n            even = lower % 2 != 0;\n\
    \            lower = lower / 2;\n        }\n\n        if num != 0 {\n        \
    \    return num;\n        }\n    }\n\n    -1", "    if x > y {\n        let z\
    \ = x;\n        x = y;\n        y = z;\n    }\n    while y > 0 && (y % 2) == 0\
    \ {\n        y /= 2;\n    }\n    while x > 0 && (x % 2) == 0 {\n        x /= 2;\n\
    \    }\n    if x == y {\n        x\n    } else {\n        -1\n    }", "    if\
    \ x < 0 || y <= x {\n        return -1;\n    }\n    let mut num_max = x;\n   \
    \ let mut counter = 1;\n    while num_max < y {\n        if num_max % 2 != 0 {\n\
    \            return num_max;\n        }\n        num_max += counter;\n       \
    \ counter += 1;\n    }\n    num_max", "    // If the input values are equal, return\
    \ -1\n    if x == y {\n        -1\n    }\n    \n    // If the input values are\
    \ equal, return the smaller number\n    if x < y {\n        choose_num(x, y)\n\
    \    } else if x == y {\n        x\n    } else {\n        choose_num(y, x)\n \
    \   }", "    let mut a = x;\n    let mut b = y;\n\n    while a % 2 == 0 {\n  \
    \      a /= 2;\n        b *= 2;\n    }\n\n    while b % 2 == 0 {\n        b /=\
    \ 2;\n        a *= 2;\n    }\n\n    a < b ? b : a", "    let mut num = 1;\n  \
    \  while num < y {\n        num = num * x + 1;\n    }\n    num", "    if x < y\
    \ {\n        choose_num(y, x).unwrap()\n    } else if x < 32 {\n        choose_num(32,\
    \ x).unwrap()\n    } else {\n        32\n    }", "    let evens: Vec<isize> =\
    \ vec![\n        if x >= y {\n            x + y - 1\n        } else {\n      \
    \      x + y\n        }\n        ];\n    evens.iter().fold(-1, |acc, i| if i %\
    \ 2 == 0 {\n        if acc > i {\n            acc\n        } else {\n        \
    \    i\n        }\n    } else {\n        acc\n    })", "    let mut n: isize =\
    \ 1;\n    while n <= y {\n        let c = n / 2;\n        if n % 2 == 0 {\n  \
    \          return c;\n        }\n        n = c;\n    }\n    -1", "    if x < y\
    \ {\n        let mut max = (*x).checked_sub(y.unwrap()).unwrap();\n        loop\
    \ {\n            if max % 2 == 0 {\n                break;\n            }\n  \
    \          max /= 2;\n        }\n        max\n    } else {\n        -1\n    }",
  "    if x <= y {\n        return x;\n    }\n    return y", "    if x < y {\n   \
    \     choose_num(y, x)\n    } else {\n        choose_num(x, y)\n    }", "    //\
    \ find first number that can't be divided evenly \n    let mut i = x;\n    while\
    \ i != y {\n        if y % i == 0 {\n            i -= 1;\n        } else {\n \
    \           i += 1;\n        }\n    }\n    if i == x {\n        return -1\n  \
    \  }\n    i", "    if x < y {\n        let mut x = x;\n        let mut y = y;\n\
    \        loop {\n            if x % 2 == 0 {\n                y /= 2;\n      \
    \      } else if y % 2 == 0 {\n                x /= 2;\n            } else {\n\
    \                return x;\n            }\n        }\n    } else {\n        -1\n\
    \    }", "    (1..x).any(|n| if n % 2 == 0 { n == y } else { n < y })\n      \
    \  ? x\n        : -1", "    let mut min_x = x;\n    let mut min_y = y;\n    let\
    \ mut min_even = -1;\n\n    while min_x >= min_y {\n        if min_even > 0 &&\
    \ min_even > min_x && min_even > min_y {\n            min_even = -1;\n       \
    \ }\n        let mut min_x = min_even + min_x % 2;\n        min_even += 1;\n \
    \   }\n\n    while min_y > min_x {\n        let mut min_y = min_even + min_y %\
    \ 2;\n        min_even += 1;\n    }\n\n    min_even", "    let mut x = x;\n  \
    \  let mut y = y;\n    loop {\n        if y <= x {\n            return -1;\n \
    \       }\n\n        if x % 2 == 0 {\n            x = x + 1;\n        }\n\n  \
    \      if y % 2 == 0 {\n            y = y + 1;\n        }\n\n        if x < y\
    \ {\n            x = x + 1;\n        }\n        if x > y {\n            y = y\
    \ + 1;\n        }\n    }", "    \n    let mut min_num = y;\n    let mut max_num\
    \ = x;\n    \n    // Loop while there are still numbers to check\n    loop {\n\
    \        // Check if this number is even\n        if min_num & 1 == 0 {\n    \
    \        return min_num;\n        }\n        // Check if this number is odd\n\
    \        if max_num & 1 == 1 {\n            return max_num;\n        }\n     \
    \   \n        // Check if this number is smaller than the smallest number\n  \
    \      if min_num < max_num {\n            // Update largest number\n        \
    \    max_num = max_num;\n        }\n        // Check if this number is bigger\
    \ than the largest number\n        if min_num > max_num {\n            // Update\
    \ smallest number\n            min_num = min_num;\n        }\n    }", "    match\
    \ y {\n        0 => x,\n        _ => match (x % y) {\n            0 => x,\n  \
    \          _ => x + 1,\n        }\n    }", "    let mut num: isize = (x as i32)\
    \ + (y as i32);\n    if num & 0x1 == 0 { // if the last digit is 0, then add one\n\
    \        num = num + 1\n    }\n    num", "    if x < y {\n        choose_num(y,\
    \ x)\n    } else if x > y {\n        choose_num(x, y)\n    } else {\n        x\n\
    \    }", "    if x < y {\n        (x, y)\n    } else {\n        (y, x)\n    }\n\
    \    .iter()\n    .find(|&i| {\n        if i == 0 {\n            return true;\n\
    \        }\n        i&1 == 0\n    })\n    .unwrap_or(-1)", "    (x..y).find(|num|\n\
    \        num % 2 == 0\n    ).unwrap_or(-1) as isize", "    let mut v = Vec::new();\n\
    \    for num in 0..(y as usize) {\n        if x % 2 == 0 && x % num == 0 {\n \
    \           v.push(num);\n        }\n    }\n    if v.len() == 0 {\n        return\
    \ -1;\n    }\n    let mut ans = -1;\n    let mut i = v.len() - 1;\n    while i\
    \ >= 0 && v[i] != 0 {\n        ans = v[i];\n        i--;\n    }\n    ans", " \
    \   let mut result = x;\n    let mut counter = 0;\n    loop {\n        if result\
    \ < y {\n            counter++;\n            if counter == 2 {\n             \
    \   return result;\n            }\n        }\n        result += (result << 1);\n\
    \    }", "    let mut result = x;\n    while result < y {\n        result *= 2;\n\
    \        if result > y {\n            result = -1;\n            break;\n     \
    \   }\n    }\n    result", "    let mut ans = 0;\n    while ans < x || ans < y\
    \ {\n        let mut m = x;\n        while m < y {\n            m += 2;\n    \
    \    }\n        if m == y {\n            return -1;\n        }\n        ans =\
    \ m;\n    }\n    ans", "    match x <= y {\n        true => x, y => {\n      \
    \      let max_x = x;\n            let max_y = y;\n            let mut max_even_num\
    \ = x;\n            loop {\n                max_even_num = max_even_num * 2 if\
    \ max_even_num % 2 == 0;\n                let y = max_y - max_even_num;\n    \
    \            if y == 0 {\n                    break;\n                }\n    \
    \            if y % 2 == 0 && max_x <= max_y {\n                    max_even_num\
    \ = max_x;\n                    break;\n                }\n                max_y\
    \ = y;\n                max_x = max_x + max_even_num;\n            }\n       \
    \     max_even_num\n        }\n        false => -1,\n    }", "    let z = if x\
    \ % 2 == 0 {\n        y\n    } else {\n        x\n    };\n\n    if z >= y {\n\
    \        z\n    } else {\n        -1\n    }", "    let mut ans = -1;\n    if x\
    \ < y {\n        let mid = std::cmp::min(y, x);\n        ans = std::cmp::max(y,\
    \ x);\n        for i in 0..mid {\n            ans = std::cmp::max(ans, (i + 1)\
    \ * i);\n        }\n    } else {\n        let mid = std::cmp::min(x, y);\n   \
    \     for i in 0..mid {\n            ans = std::cmp::max(ans, (i + 1) * i);\n\
    \        }\n    }\n    ans", "    let evens = (0..i).filter(|&i| i % 2 != 0);\n\
    \    if evens.iter().any(|&i| x < i && x > y) {\n        -1\n    } else {\n  \
    \      evens.iter().max_by(|&i| x % i as isize)\n            .unwrap_or_else(||\
    \ -1)\n    }", "    let mut num_1 = x;\n    let mut num_2 = y;\n    let mut ans\
    \ = -1;\n\n    while num_1 != 0 || num_2 != 0 {\n        let rem = num_1 % num_2;\n\
    \        num_1 = num_2;\n        num_2 = rem;\n\n        if rem == 0 {\n     \
    \       if num_1 < ans {\n                ans = num_1;\n            }\n      \
    \  }\n    }\n\n    ans", "    for i in (1..y) {\n        if x % i == 0 {\n   \
    \         return i;\n        }\n    }\n    return -1;", "    if x >= y {\n   \
    \     -1\n    } else {\n        let num = x * y;\n        let diff = x - y;\n\
    \        if diff % 2 == 0 {\n            -1\n        } else {\n            num\
    \ / 2\n        }\n    }", "    if x < 0 || y < 0 {\n        return -1;\n    }\n\
    \n    let x = x as isize;\n    let y = y as isize;\n\n    let mut max_num: isize\
    \ = (x as usize + y as usize) as isize;\n    max_num += 1;\n    let mut max_num\
    \ = max_num.saturating_add(1);\n    loop {\n        if max_num % 2 == 1 {\n  \
    \          return max_num;\n        }\n\n        let mut max_num = max_num.saturating_add(1);\n\
    \    }", "    let mut n = 1;\n    let mut m = y;\n    let mut temp = 1;\n    loop\
    \ {\n        if m > x {\n            return -1;\n        }\n        while m %\
    \ 2 == 0 {\n            m /= 2;\n        }\n        n += 1;\n        if n == m\
    \ {\n            return temp;\n        }\n        temp += 1;\n    }", "    match\
    \ &(x as isize..(y + 1) as isize).binary_search(0..=&(y + 1) as isize) {\n   \
    \     Some((i, _)) if i % 2 == 0 => i,\n        Some(_) => -1,\n        None =>\
    \ -1,\n    }", "    debug_assert!(x >= 0 && y >= 0);\n    let mut m = x * y;\n\
    \    for i in (1..x).rev() {\n        m += i as isize;\n        if m > y {\n \
    \           return i;\n        }\n    }\n    return -1;", "    let mut num = x;\n\
    \    while num < y {\n        if num % 2 == 0 {\n            return num;\n   \
    \     } else {\n            num += 1;\n        }\n    }\n    -1", "    let z =\
    \ ((x as usize) + ((y as usize) - 1) as usize) / 2;\n    if z == 0 || (x as usize\
    \ + z) == y || (y as usize + z) == x {\n        return -1\n    }\n    z", "  \
    \  let mut counter = 0;\n\n    // Find first even number between x and y\n   \
    \ loop {\n        if x % 2 != 0 { break; }\n        counter += 1;\n        x /=\
    \ 2;\n    }\n\n    // Check if that number is equal to or less than y\n    if\
    \ x == y {\n        -1\n    } else {\n        let mut new_x = x;\n        loop\
    \ {\n            // While x isn't equal to or greater than y\n            if new_x\
    \ != y {\n                if new_x % 2 == 0 {\n                    // Check if\
    \ the current even number is greater than the \n                    // given number\
    \ which would be the max number in our range\n                    if counter >\
    \ y {\n                        -1\n                    } else {\n            \
    \            counter\n                    }\n                } else {\n      \
    \              // If none of the even numbers are greater than given \n      \
    \              // number, then return the next even number which is less than\
    \ \n                    // the given number\n                    if counter >\
    \ y {\n                        new_x /= 2;\n                        counter\n\
    \                    } else {\n                        -1\n                  \
    \  }\n                }\n            } else {\n                // If x is equal\
    \ to y, then return the next even number which is \n                // less than\
    \ the given number\n                counter\n            }\n        }\n    }",
  "    if x <= y {\n        return -1\n    }\n    \n    let mut max_num = x;\n   \
    \ for i in 1..y {\n        if max_num % i == 0 {\n            max_num = i;\n \
    \       }\n    }\n    \n    max_num", "    if x < y {\n        -1\n    }\n   \
    \ else {\n        x + y + ((x+y)&1)\n    }", "    let mut result = -1;\n    let\
    \ mut current_x = x;\n    let mut current_y = y;\n    loop {\n        if current_x\
    \ % 2 == 0 {\n            if current_y % 2 == 0 {\n                result = current_x;\n\
    \                current_y = current_y - 1;\n            }\n            else\n\
    \            {\n                result = current_x;\n                current_x\
    \ = current_x - 1;\n            }\n        }\n        else\n        {\n      \
    \      if current_y % 2 == 0 {\n                result = current_y;\n        \
    \        current_x = current_x + 1;\n                current_y = current_y - 1;\n\
    \            }\n            else\n            {\n                result = current_y;\n\
    \                current_x = current_x + 1;\n            }\n        }\n      \
    \  if current_x >= current_y {\n            return result;\n        }\n    }",
  "    match x < y {\n        true  => x,\n        false => y,\n    }", "    if x\
    \ <= y {\n        std::cmp::max(x, y)\n    } else {\n        std::cmp::min(x,\
    \ y)\n    }", "    // 1. find the biggest even number in the range\n    let max_even\
    \ = if x <= y { x } else { y };\n    let mut max_odd = 1;\n\n    // 2. loop over\
    \ all numbers until we find one that is evenly divisible\n    while max_even %\
    \ 2 == 0 {\n        max_even += 1;\n        max_odd *= 2;\n    }\n\n    // 3.\
    \ return -1 if we have not yet found a number that's evenly divisible\n    max_even\
    \ % 2 != 0 ? -1 : max_odd", "    let mut max = x;\n    let mut min = y;\n    while\
    \ min > max {\n        let mid = min + (max - min) / 2;\n        if mid & 1 ==\
    \ 0 {\n            max = mid;\n        } else {\n            min = mid;\n    \
    \    }\n    }\n    max - 1", "    if x > y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x > 0 && y > 0 && x % 2 == 0 && y % 2 == 0 {\n          \
    \  if x >= y {\n                return x - y\n            } else {\n         \
    \       return y - x\n            }\n        } else {\n            return -1\n\
    \        }\n    }", "    let mut a = x;\n    let mut b = y;\n\n    // If x is\
    \ greater than y, swap them.\n    while a > b {\n        let c = a;\n        a\
    \ = b;\n        b = c;\n    }\n\n    // If x is smaller than y, swap them again.\n\
    \    while a < b {\n        let c = a;\n        a = b;\n        b = c;\n    }\n\
    \n    // A must be bigger than b.\n    // Return b if it equals a.\n    if a ==\
    \ b {\n        a\n    } else {\n        b\n    }", "    let mut min = x as usize;\n\
    \    let mut max = y as usize;\n    let mut result = -1;\n    while max - min\
    \ > 1 {\n        let mut num = min as usize + 1;\n        while num < max {\n\
    \            if num % 2 == 0 {\n                result += num;\n             \
    \   break;\n            }\n            num += 1\n        }\n        if result\
    \ != -1 {\n            break;\n        }\n        min = num as usize + 1;\n  \
    \  }\n    result", "    (x, y)\n        .iter()\n        .max_by(|a, b| {\n  \
    \          if a % 2 == 0 && b % 2 == 0 {\n                let mut c = a + b;\n\
    \                c /= 2;\n                c\n            } else {\n          \
    \      a < b\n            }\n        })\n        .unwrap_or(-1)", "    if x <\
    \ y {\n        choose_num(y, x)\n    } else {\n        if y % 2 == 0 {\n     \
    \       -1\n        } else {\n            choose_num(y, (x * 3) + 2)\n       \
    \ }\n    }", "    if x > y {\n        (x, y) = (y, x)\n    }\n\n    let mut xs\
    \ = vec![];\n    let mut ys = vec![];\n\n    for i in 0..(y-x) {\n        if x\
    \ > y {\n            let k = i+1;\n            let l = (i+1)..y;\n           \
    \ \n            // fill xs array\n            for j in l.iter().rev() {\n    \
    \            if j == i {\n                    continue;\n                }\n \
    \               xs.push(i);\n            }\n\n            // fill ys array\n \
    \           for j in k.iter().rev() {\n                if j == i {\n         \
    \           continue;\n                }\n                ys.push(j);\n      \
    \      }\n        }\n\n        // fill xs array\n        for j in i.iter().rev()\
    \ {\n            xs.push(i);\n        }\n\n        // fill ys array\n        for\
    \ j in i+1.iter().rev() {\n            ys.push(j);\n        }\n    }\n\n    if\
    \ ys.len() == 0 {\n        return -1;\n    }\n\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    \n    while i < xs.len() {\n        if ys[i] == x {\n\
    \            result.push(xs[i]);\n            i += 1;\n        } else {\n    \
    \        i += 1;\n        }\n    }\n    \n    result.len() > 0 ? result.front()\
    \ : -1", "    if x <= y {\n        x\n    } else {\n        y\n    }", "    (0..y).max()\n\
    \        .filter(|&i| i.is_even())\n        .find(|&i| i < (x as usize) && i >\
    \ (y as usize))\n        .unwrap_or(-1)", "    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        let mut num: isize = 0;\n        let mut i: usize\
    \ = 0;\n        while i < y {\n            if num % 2 == 0 {\n               \
    \ i += 1;\n                num += 1;\n            } else {\n                if\
    \ x == num {\n                    return x;\n                }\n             \
    \   i += 1;\n                num += 1;\n            }\n        }\n        -1\n\
    \    }", "    if x > y {\n        (x, y)\n    } else {\n        (y, x)\n    }\n\
    \    .iter()\n    .find(|&x| *x % 2 == 0)\n    .unwrap_or(-1)"]
stop_tokens:
- "\n}"
