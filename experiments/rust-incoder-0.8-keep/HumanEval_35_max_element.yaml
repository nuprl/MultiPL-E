name: HumanEval_35_max_element
language: rust
prompt: "/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
  /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\nfn\
  \ max_element(l: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
  \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),\
  \ 124);\n}\n"
completions: ['    l.iter().max().unwrap()', '    l.iter().max().unwrap()', '    l.iter().max_by_key(|v|
    v).unwrap()', '    l.iter().max().unwrap_or(0)', "    let mut max: Option<isize>\
    \ = None;\n    for i in l.iter() {\n        if let Some(max) = max.filter(|&b|\
    \ b < i) { max = Some(i); }\n    }\n    max.unwrap_or(l.iter().max().unwrap())",
  "    if l.is_empty() {\n        l.len()\n    } else {\n        let mut max = l.iter().fold(0,\
    \ |a, b| a.cmp(b).max());\n        l.iter().skip(max - 1).fold(max, |a, b| a.cmp(b).max())\n\
    \    }", "    if l.len() == 0 {\n        l.len()\n    } else {\n        let mut\
    \ max = l.iter().max().unwrap();\n        let mut i = 0;\n        while i <= l.len()\
    \ {\n            if l[i] > max {\n                max = l[i];\n            }\n\
    \            i += 1;\n        }\n        max\n    }", "    if l.is_empty() {\n\
    \        return std::isize::MAX;\n    }\n\n    let mut largest = l[0];\n    for\
    \ i in 1..l.len() {\n        let v = l[i];\n        if largest < v {\n       \
    \     largest = v;\n        }\n    }\n    largest", '    l.iter().max().unwrap_or(0)',
  '    l.iter().max().unwrap_or(l.len())', '    l.iter().max().unwrap()', "    let\
    \ mut max = 0;\n    let mut max_idx = -1;\n    for i in 0..l.len() {\n       \
    \ if l[i] > max {\n            max = l[i];\n            max_idx = i;\n       \
    \ }\n    }\n    return max;", '    l.iter().max_unchecked().unwrap_or(isize::max_value())',
  '    l.iter().max().unwrap()', "    let mut max = l.iter().cloned().max().unwrap();\n\
    \    for i in l {\n        if i > max {\n            max = i;\n        }\n   \
    \ }\n    max", "    if l.len() == 0 {\n        return std::isize::MAX;\n    }\n\
    \n    let mut max = std::isize::MAX;\n    for &x in l {\n        if x > max {\n\
    \            max = x;\n        }\n    }\n\n    max", "    l.rev().fold(\n    \
    \    || l.iter().max().unwrap(),\n        || l.iter().rev().max().unwrap(),\n\
    \    )", '    l.iter().max_by_key(|e| e).unwrap()', '    l.iter().max()', '    l.iter().max().unwrap_or(std::i32::MAX)',
  "    let mut largest = l[0];\n    for i in l.iter().rev() {\n        if i > largest\
    \ {\n            largest = i;\n        }\n    }\n    largest", '    l.iter().max().unwrap()',
  "    let mut max_v = std::ptr::null::<isize>::to_isize();\n\n    for (i, e) in l.iter().enumerate()\
    \ {\n        if *e > max_v {\n            max_v = *e;\n        }\n    }\n\n  \
    \  max_v", '    l.iter().max().unwrap_or(l.iter().next().unwrap())', "    let\
    \ mut max_val = l[0];\n    for x in l {\n        if x > max_val {\n          \
    \  max_val = x;\n        }\n    }\n    max_val", "    let mut max = l[0];\n  \
    \  for &e in &l[1..] {\n        if e > max {\n            max = e;\n        }\n\
    \    }\n    max", "    let mut max = l[0];\n    for i in l.iter().rev() {\n  \
    \      if *i > max {\n            max = *i;\n        }\n    }\n    max", "   \
    \ let mut max = l.iter().max().unwrap();\n    let mut i = 0;\n    while i < l.len()\
    \ && max > l[i] {\n        max = l[i];\n        i += 1;\n    }\n    max", "  \
    \  let mut it = l.iter().cloned().rfind(\".\").unwrap();\n    let mut max = it.unwrap_or(-1);\n\
    \    loop {\n        it.next();\n        let v = *it.peek().unwrap();\n      \
    \  if v > max {\n            max = v;\n        }\n        if it.peek().is_none()\
    \ {\n            return max;\n        }\n    }", "    if l.len() < 1 {\n     \
    \   panic!(\"Cannot get maximum element of empty list\");\n    }\n    l.iter().max_by_key(|&x|\
    \ x).unwrap()", "    let mut max = 0;\n    for i in l {\n        if i > max {\n\
    \            max = i;\n        }\n    }\n    max", "    let mut min = l.iter().min().unwrap_or(0);\n\
    \    let mut max = l.iter().max().unwrap_or(0);\n    while max > 0 && min < l.len()\
    \ {\n        if l[min] > l[max] {\n            max = min + 1;\n        } else\
    \ {\n            min = max + 1;\n        }\n    }\n    max", "    let mut max\
    \ = l[0];\n    for i in l.iter().rev() {\n        if i > max {\n            max\
    \ = i;\n        }\n    }\n    max", '    l.iter().max().unwrap_or(0)', "    let\
    \ mut max = l[0];\n    for i in l.iter().rev() {\n        if i > max {\n     \
    \       max = i;\n        }\n    }\n    max", '    l.iter().max_unstable().unwrap()',
  "    let mut max = l[0];\n    for i in l {\n        if i > max {\n            max\
    \ = i;\n        }\n    }\n    max", "    let mut max = l[0];\n    for i in 1..l.len()\
    \ {\n        if max < l[i] {\n            max = l[i];\n        }\n    }\n    max",
  '    l.iter().max_by_ref().unwrap()', "    if l.len() == 0 {\n        0\n    } else\
    \ {\n        l.iter().max().unwrap()\n    }", "    if l.len() == 0 {\n       \
    \ return 0;\n    }\n\n    let mut max_el = l[0];\n    for el in l {\n        if\
    \ el > max_el {\n            max_el = el;\n        }\n    }\n\n    max_el", '    l.iter().max().unwrap_or(0)',
  '    l.iter().max().unwrap_or(0)', "    let mut max = l[0];\n    for i in 1..l.len()\
    \ {\n        if max < l[i] {\n            max = l[i];\n        }\n    }\n    max",
  '    l.iter().max_by_key(|&x| x).unwrap()', "    let mut largest = l.iter().max().unwrap();\n\
    \    let mut pos = 0;\n\n    for n in l.iter() {\n        if n < largest {\n \
    \           largest = n;\n        }\n        if n == largest {\n            break;\n\
    \        }\n        pos += 1;\n    }\n\n    largest", "    let mut max = l.iter().max().unwrap();\n\
    \    let mut i = 0;\n    while max != 0 && i < l.len() {\n        if l[i] > max\
    \ {\n            max = l[i];\n        }\n        i += 1;\n    }\n    max", " \
    \   let mut max_element = l[0];\n    for i in l.iter().rev() {\n        if i >\
    \ max_element {\n            max_element = i;\n        }\n    }\n    max_element",
  '    l.iter().max_by_key(|&x| x).unwrap()', '    l.iter().max_by_key(|x| x).unwrap()',
  "    let mut max = l[0];\n    for i in l.iter() {\n        if i > max {\n      \
    \      max = i;\n        }\n    }\n    max", '    l.iter().max_unwrap_or(0)',
  '    l.iter().max_by_key(|&x| x).unwrap()', '    l.iter().max_unwrap_or(-1)', " \
    \   let mut max = l.iter().max().unwrap();\n    for i in l.iter().rev() {\n  \
    \      if *i > max {\n            max = i;\n        }\n    }\n    max", "    let\
    \ mut max_elem = *l.iter().max().unwrap_or(*l.len()) as isize;\n    for ele in\
    \ &l {\n        if ele > max_elem {\n            max_elem = ele;\n        }\n\
    \    }\n    return max_elem;", '    l.iter().max().unwrap_or(l.len())', "    let\
    \ mut res = l.iter().max().unwrap();\n    match l {\n        [] => res,\n    \
    \    _ => {\n            if res < l.iter().min().unwrap() {\n                res\
    \ = l.iter().min().unwrap();\n            }\n            res\n        }\n    }",
  '    l.iter().max().unwrap_or(-1)', "    let mut min_element = 0;\n    let mut max_element\
    \ = 0;\n    for &n in l {\n        let n_abs = n.abs();\n        if n_abs < max_element\
    \ {\n            max_element = n_abs;\n        }\n        if n_abs > min_element\
    \ {\n            min_element = n_abs;\n        }\n    }\n    min_element", " \
    \   let mut it = l.iter().cloned();\n    it.max_by(|x, y| y.cmp(x));\n    it.next().unwrap()",
  "    let mut max_el = l.first().unwrap();\n    for el in l.iter().skip(1) {\n  \
    \      if *el > max_el {\n            max_el = el;\n        }\n    }\n    max_el",
  "    let mut max: isize = 0;\n    for i in l.iter() {\n        if max < i {\n  \
    \          max = i;\n        }\n    }\n    max", '    l.iter().max_by_key(|&x|
    x).unwrap_or(l.iter().rev().max_by_key(|&x| x).unwrap_or(0))', '    l.iter().max().unwrap_or(-1)',
  '    l.iter().max().unwrap()', "    let mut max: isize = 0;\n    let mut i = 0;\n\
    \    for v in l {\n        if v > max {\n            max = v;\n        }\n   \
    \     i += 1;\n    }\n    i", "    if l.len() == 1 {\n        return l[0];\n \
    \   }\n    let mut max_val = l[0];\n    let mut max_pos = 0;\n    for &i in l\
    \ {\n        if i > max_val {\n            max_val = i;\n            max_pos =\
    \ 0;\n        }\n        if i == max_val {\n            max_pos++;\n        }\n\
    \    }\n    max_pos", "    let mut iter = l.iter();\n    iter.rev().cloned().max().unwrap()",
  "    if l.len() == 0 {\n        return 0;\n    }\n    if l.len() == 1 {\n      \
    \  return l[0];\n    }\n    let mut max_element = l[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1 .. l.len() {\n        if l[i] > max_element {\n         \
    \   max_element = l[i];\n            max_idx = i;\n        }\n    }\n    max_idx",
  '    l.iter().max().unwrap_or(0)', '    l.iter().max().unwrap_or(l.len() - 1)',
  "    if l.len() <= 1 {\n        l.iter().max().unwrap()\n    } else {\n        l.iter().fold((0,\
    \ 0), |(_max, _element), n| {\n            (*_max, *_element) < (*n, *n)\n   \
    \     }).1\n    }", '    l.iter().max().unwrap_or(0)', '    l.iter().max_by(|a,
    b| a.cmp(&b)).unwrap()', "    let mut min_value = vec![l.iter().min().unwrap_or(0)];\n\
    \    for v in l {\n        if v < min_value[0] {\n            min_value[0] = v;\n\
    \        }\n    }\n    min_value[0]", "    let mut max = l[0];\n    for elt in\
    \ l.iter().skip(1) {\n        if elt > max {\n            max = elt;\n       \
    \ }\n    }\n    max", "    let mut max = l[0];\n    for i in 1..l.len() {\n  \
    \      if l[i] > max {\n            max = l[i];\n        }\n    }\n    max", " \
    \   if l.is_empty() {\n        0\n    } else {\n        let mut i = l.iter().rposition(|&a|\
    \ a > 0).unwrap();\n        l.swap(0, i);\n        l.swap(i, l.iter().rposition(|&a|\
    \ a < 0).unwrap());\n        l.iter().max().unwrap()\n    }", "    let mut max:\
    \ isize = 0;\n    for &i in l {\n        if i >= max {\n            max = i;\n\
    \        }\n    }\n    max", "    let mut max_index = l;\n    let mut max_value\
    \ = l[0];\n\n    for i in l.iter_mut() {\n        if *i > max_value {\n      \
    \      max_value = *i;\n            max_index = i;\n        }\n    }\n\n    max_index",
  '    l.iter().max().unwrap()', "    let mut max_value = l.iter().max().unwrap();\n\
    \    let mut max_value = *max_value;\n    for value in l {\n        if value ==\
    \ max_value {\n            continue;\n        }\n        max_value = value;\n\
    \    }\n    max_value", "    let mut min = i32::MAX;\n    let mut max = i32::MIN;\n\
    \    for i in l.iter() {\n        if i < min {\n            min = i;\n       \
    \ }\n        if i > max {\n            max = i;\n        }\n    }\n    max", " \
    \   if l.len() == 0 {\n        0\n    } else {\n        l.iter().max_by_key(|&x|\
    \ x).unwrap()\n    }", '    l.iter().max_by(|a, b| b.cmp(a)).unwrap_or(l.len())',
  "    let mut max = l[0];\n    for i in l {\n        if i > max {\n            max\
    \ = i;\n        }\n    }\n    max", '    l.iter().max_unwrap_or(0)', '    l.iter().max().unwrap_or(0)',
  '    l.iter().max().unwrap()', "    let mut max = l.iter().max();\n    l.iter().for_each(|&x|\
    \ {\n        if x > max {\n            max = x;\n        }\n    });\n    max",
  '    l.iter().max().unwrap()', "    let mut max_val = l.iter().max().unwrap();\n\
    \    if let Some(pos) = l.iter().position(|&x| x == max_val) {\n        max_val\
    \ = pos;\n    }\n    max_val", "    let mut result = *l.iter().max().unwrap();\n\
    \    for i in l {\n        result = if result > i {\n            result\n    \
    \    } else {\n            i\n        };\n    }\n    result", '    l.iter().max_by(|a,
    b| a.cmp(b)).unwrap()', "    let mut it = l.iter().max().unwrap_or(-1);\n    let\
    \ mut max_element = it.clone();\n    while let Some(candidate) = it.clone() {\n\
    \        if candidate > max_element {\n            max_element = candidate;\n\
    \        }\n        it.next();\n    }\n    max_element", '    l.iter().max().unwrap_or(l[0].clone())',
  "    if l.len() == 0 {\n        std::i32::MAX\n    } else {\n        l.iter().max().unwrap_or(0)\n\
    \    }", "    l\n        .iter()\n        .position(|&x| x >= *l.iter().rev().next().unwrap())\n\
    \        .unwrap_or(l.len() - 1)", "    let mut elem = l.first().unwrap();\n \
    \   for i in l.iter().rev() {\n        if i > elem {\n            elem = i;\n\
    \        }\n    }\n    elem", "    let mut max = 0 as isize;\n    for x in l {\n\
    \        if x > max {\n            max = x;\n        }\n    }\n    max", '    l.iter().max().unwrap_or(-1)',
  "    let mut max = l.iter().max().unwrap();\n    for i in l.iter_mut() {\n     \
    \   if *i == max {\n            *i = 1;\n        } else {\n            *i = *i\
    \ + 1;\n        }\n        if *i == *l.len() {\n            *i = 1;\n        }\n\
    \    }\n    max", "    if l.len() <= 1 {\n        0\n    } else {\n        let\
    \ mut max = l[0];\n        for i in 1..l.len() {\n            if l[i] > max {\n\
    \                max = l[i];\n            }\n        }\n        max\n    }", '    l.rev().iter().max().unwrap_or(0)',
  "    let mut max = l[0];\n    for e in l {\n        if *e > max {\n            max\
    \ = *e;\n        }\n    }\n    max", "    let mut max_val = l[0];\n    for &el\
    \ in l {\n        if el > &max_val {\n            max_val = el;\n        }\n \
    \   }\n    max_val", '    l.iter().max().unwrap()', '    l.iter().max().unwrap_or(0)',
  '    l.iter().max().unwrap_or(0)', "    let mut max_value = l[0];\n    for i in\
    \ 1..l.len() {\n        let value = l[i];\n        if value > max_value {\n  \
    \          max_value = value;\n        }\n    }\n    max_value", '    l.iter().max().unwrap_or(-1)',
  "    let mut max = l[0];\n    for &x in l {\n        if &x > max {\n           \
    \ max = x;\n        }\n    }\n    max", '    l.iter().max().unwrap_or(0)', " \
    \   let mut max: isize = 0;\n    for (i, e) in l.iter().enumerate() {\n      \
    \  if *e > max {\n            max = *e;\n        }\n    }\n    max", "    l\n\
    \        .iter()\n        .max_by_key(|x| x.clone())\n        .expect(\"list must\
    \ have at least one element\")", "    let mut min_value = l[0];\n    for i in\
    \ l {\n        if i > min_value {\n            min_value = i;\n        }\n   \
    \ }\n    min_value", "    if l.is_empty() {\n        l.last()\n    } else {\n\
    \        l.iter().fold(l.first(), |a, b| if b > a { b } else { a })\n    }", '    l.iter().max_by_key(|x|
    x).unwrap()', "    let mut max = l.len();\n    l.iter().fold(0, |x, y| if x <\
    \ y { max = x } else { max = y });\n    max", '    l.iter().max_or_else(|| i32::MAX).unwrap()',
  '    l.iter().max().unwrap_or(0)', '    l.iter().max().unwrap()', "    let mut m\
    \ = l;\n    let mut max_elem = l[0];\n    for (i, e) in l.iter().enumerate() {\n\
    \        if e > max_elem {\n            m = l.to_vec();\n            max_elem\
    \ = e;\n        }\n    }\n    max_elem", "    let mut max_element = l.iter().max().unwrap();\n\
    \    for i in l {\n        if i > max_element {\n            max_element = i;\n\
    \        }\n    }\n    max_element", '    l.iter().max_unstable().unwrap_or(l.len())',
  "    let mut max_value = l[0];\n    let mut max_idx = 1;\n    for i in l.iter().rev()\
    \ {\n        if i > max_value {\n            max_value = i;\n            max_idx\
    \ = i;\n        }\n    }\n    max_idx", "    let mut min = std::i32::MAX;\n  \
    \  let mut max = std::i32::MIN;\n    let mut max_val = std::i32::MAX;\n    let\
    \ mut idx = 0;\n    let mut cmp_result = 0;\n    for i in l.iter() {\n       \
    \ if cmp_result > 0 {\n            if cmp_result > max_val {\n               \
    \ idx = i;\n                max_val = cmp_result;\n            }\n        } else\
    \ {\n            if cmp_result < min {\n                idx = i;\n           \
    \     min = cmp_result;\n            }\n        }\n        cmp_result = cmp_result.checked_add(1).unwrap();\n\
    \    }\n    if cmp_result > 0 {\n        idx = i;\n        max_val = cmp_result;\n\
    \    }\n    idx", "    let mut max: isize = std::i32::MIN;\n\n    for el in l\
    \ {\n        if max < el {\n            max = el;\n        }\n    }\n\n    max",
  "    let mut max = l[0];\n    for &x in &l {\n        if x > max {\n           \
    \ max = x;\n        }\n    }\n    max", "    let mut max_value = l;\n    max_value\
    \ = max_value.iter().max().unwrap();\n    max_value", "    let mut max_value =\
    \ l[0];\n    let mut max_index = -1;\n    for i in l {\n        if i > max_value\
    \ {\n            max_value = i;\n            max_index = i;\n        }\n    }\n\
    \    max_index", "    let mut max = l[0];\n    for i in l.iter().rev() {\n   \
    \     if max < i {\n            max = i;\n        }\n    }\n    max", "    let\
    \ mut max = l;\n    loop {\n        max = max[0];\n        if max > 0 {\n    \
    \        break;\n        }\n        let mut imax = l.iter().cloned().collect::<Vec<_>>().len();\n\
    \        for v in l.iter().cloned().rev().skip(imax).take(1).collect::<Vec<_>>()\
    \ {\n            if v > max {\n                max = v;\n                imax\
    \ = l.iter().cloned().collect::<Vec<_>>().len();\n            }\n        }\n \
    \   }\n    max", '    l.iter().max().unwrap_or(-1)', "    if l.len() == 0 {\n\
    \        panic!(\"Empty list!\");\n    }\n    if l.len() == 1 {\n        return\
    \ l[0];\n    }\n    l.iter().max_by(|a, b| a < b).unwrap()", "    let mut max\
    \ = l[0];\n    for &x in l {\n        if x > max {\n            max = x;\n   \
    \     }\n    }\n    max", "    if l.len() == 0 {\n        0\n    } else {\n  \
    \      let mut max = l[0];\n        for el in l {\n            if el > max {\n\
    \                max = el;\n            }\n        }\n        max\n    }", '    l.iter().max().unwrap_or(0)',
  "    let mut max_ele = isize::max_value();\n    l.iter().for_each(|v| *v = if v\
    \ > max_ele { max_ele = v });\n    max_ele", "    if l.len() == 0 {\n        return\
    \ 0;\n    }\n    let mut it = l.iter().rev().enumerate().skip(1).next();\n   \
    \ loop {\n        match it.next() {\n            None => return 0,\n         \
    \   Some((idx, _)) => if *idx > 0 { return it.index() },\n        }\n    }", " \
    \   let mut max = l.iter().max_unstable();\n    if max < l.iter().rev().min().unwrap()\
    \ {\n        max = l.iter().rev().min().unwrap();\n    }\n    max", "    let mut\
    \ max = l[0];\n    for i in 1 .. *l.len() {\n        if max < l[i] {\n       \
    \     max = l[i];\n        }\n    }\n    max", "    let mut max = l[0];\n    for\
    \ i in l.iter().rev() {\n        if i > max {\n            max = i;\n        }\n\
    \    }\n    max", '    l.iter().max().unwrap()', '    l.iter().max_unwrap_or_else(||
    || 0) as isize', "    let mut max = l[0];\n    for &x in l {\n        if x >=\
    \ max {\n            max = x;\n        }\n    }\n    max", "    let mut max_element\
    \ = l[0];\n    for i in l {\n        if i > max_element {\n            max_element\
    \ = i;\n        }\n    }\n    max_element", '    l.iter().max().unwrap_or(l.len())',
  '    l.iter().max().unwrap_or(l.len())', "    let mut max_elem = l[0];\n    for\
    \ e in l.iter().rev() {\n        if e > &mut max_elem {\n            max_elem\
    \ = e;\n        }\n    }\n    max_elem", '    l.iter().max_by(|a, b| a.cmp(b)).unwrap()',
  "    let mut max = l[0];\n    for i in l {\n        if i > max {\n            max\
    \ = i;\n        }\n    }\n    max", '    l.iter().max().unwrap()', "    let mut\
    \ max_elem = l;\n    let mut max_elem_idx = l.len();\n    loop {\n        if *max_elem\
    \ > *max_elem_idx {\n            max_elem = &mut max_elem[*max_elem_idx - 1];\n\
    \        }\n        if *max_elem_idx > l.len() {\n            break;\n       \
    \ }\n        *max_elem_idx--\n    }\n    *max_elem", '    l.iter().max()', '    l.iter().max().unwrap_or(0)',
  '    l.iter().max().unwrap()', '    l.iter().max().unwrap()', '    l.iter().max_by_key(|i|
    i).unwrap()', "    let mut max = l[0];\n    for i in l.iter().rev() {\n      \
    \  if i > max {\n            max = i;\n        }\n    }\n    max", "    let mut\
    \ max = l.iter().max();\n    loop {\n        let mut is_max = false;\n       \
    \ let mut max_idx = -1;\n        let mut max_value = -1;\n        for (idx, value)\
    \ in l.iter().enumerate() {\n            if value > max {\n                is_max\
    \ = true;\n                max = value;\n                max_idx = idx;\n    \
    \            max_value = value;\n            }\n        }\n        if is_max {\n\
    \            break;\n        }\n        l.swap(max_idx, 0);\n    }\n    max",
  "    let mut max_value: isize = 0;\n    for v in l.iter() {\n        if *v > max_value\
    \ {\n            max_value = *v;\n        }\n    }\n    max_value", '    l.iter().max().unwrap_or(0)',
  '    l.iter().max_by_key(|x| x).unwrap()', "    let mut max = l[0];\n    let mut\
    \ max_pos = 0;\n    let mut i = 0;\n    for v in l {\n        if v > max {\n \
    \           max = v;\n            max_pos = i;\n        }\n        i += 1;\n \
    \   }\n    max_pos", "    let mut max = l[0];\n    for ele in l {\n        if\
    \ ele > max {\n            max = ele;\n        }\n    }\n    max", "    if l.is_empty()\
    \ {\n        0\n    } else {\n        let mut res = l[0];\n        for v in l\
    \ {\n            if v > res {\n                res = v;\n            }\n     \
    \   }\n        res\n    }", '    l.iter().max().unwrap_or(0)', "    let mut max\
    \ = l.iter().max_by_key(|&x| x).unwrap();\n    if max < l.len() {\n        max\
    \ = l.len();\n    }\n    max", '    l.iter().max_by_key(|e| *e).unwrap()', " \
    \   let mut max: isize = 0;\n    let mut i: usize = 0;\n    while i < l.len()\
    \ {\n        if l[i] > max {\n            max = l[i];\n        }\n        i +=\
    \ 1;\n    }\n    max", '    l.iter().max().unwrap()', '    l.iter().max().unwrap_or(0)',
  '    l.iter().max().unwrap_or(l.len())', '    l.iter().max_or_else(|| std::isize::MAX)',
  "    if l.len() == 0 {\n        return 0;\n    }\n\n    let mut largest = l[0];\n\
    \    for &elt in l.iter().skip(1) {\n        if elt > largest {\n            largest\
    \ = elt;\n        }\n    }\n    largest", "    if l.len() == 0 {\n        return\
    \ 0;\n    }\n\n    let mut max_val = l[0];\n    for &v in l {\n        if v >\
    \ max_val {\n            max_val = v;\n        }\n    }\n    return max_val;",
  '    l.iter().max().unwrap()', "    let mut max_idx = l.iter().rposition(|&e| e\
    \ > l[0]).map(|i| i as usize).max();\n    let mut max_e = l[0];\n    for i in\
    \ 1..l.len() {\n        if l[i] > max_e {\n            max_e = l[i];\n       \
    \     max_idx = i;\n        }\n    }\n    max_e", "    let mut max_value = l[0];\n\
    \    for i in l.iter_mut().rev() {\n        if *i > max_value {\n            max_value\
    \ = *i;\n        }\n    }\n    max_value", '    l.iter().max().unwrap_or(0)',
  '    l.iter().max_by_key(|&x| x).unwrap_or(-isize::MAX as isize)', "    let mut\
    \ max_value = l[0];\n    let mut max_idx = 1;\n\n    for &i in l {\n        if\
    \ i > max_value {\n            max_value = i;\n            max_idx = 1;\n    \
    \    }\n\n        if i > max_value {\n            max_value = i;\n        }\n\n\
    \        max_idx += 1;\n    }\n\n    max_idx", '    l.iter().max_by(|a, b| cmp::min(std::cmp::min(a,
    b), std::cmp::max(a, b)))', "    let mut max_i = l.len();\n    let mut max_so_far\
    \ = &l[0];\n    for i in l.iter().rev() {\n        if *i < max_so_far {\n    \
    \        max_so_far = i;\n            max_i = l.len() - 1;\n        }\n    }\n\
    \    *max_i", '    l.iter().max().unwrap_or(0)', "    let mut min_val = std::i32::MAX;\n\
    \    for v in l {\n        if *v > min_val {\n            min_val = *v;\n    \
    \    }\n    }\n    min_val", "    l\n        .iter()\n        .max_by_key(|&x|\
    \ x.clone())\n        .unwrap()", "    l\n        .iter()\n        .max_by_key(|&x|\
    \ x)\n        .unwrap_or(l.iter().max().unwrap())", '    l.iter().max_by_key(|x|
    x).unwrap_or(l.iter().max())', "    let mut max = l[0];\n    for i in 1 .. l.len()\
    \ {\n        if l[i] > max {\n            max = l[i];\n        }\n    }\n    max",
  "    if l.len() == 0 {\n        return -1;\n    }\n    let mut max_val = l.iter().max().unwrap();\n\
    \    for &x in l {\n        if x > max_val {\n            max_val = x;\n     \
    \   }\n    }\n    max_val", "    let mut i = 0;\n    let mut max = l[0];\n   \
    \ for (i, elt) in l.iter().enumerate() {\n        if elt > max {\n           \
    \ max = elt;\n        }\n    }\n    max", "    if l.len() == 1 {\n        return\
    \ l[0];\n    }\n\n    let mut max = l[0];\n    for &i in &l[1..] {\n        if\
    \ i > max {\n            max = i;\n        }\n    }\n\n    max", '    l.iter().max_unwrap_or(l.len())',
  "    let mut max = l.iter().max().unwrap_or(l.len());\n    for v in l {\n      \
    \  if v > max {\n            max = v;\n        }\n    }\n    max", '    l.iter().max().unwrap_or(l.len())',
  "    let mut max_so_far = l.iter().max_by_key(|&x| x).unwrap();\n    for i in l.iter().rev()\
    \ {\n        if *i > max_so_far {\n            max_so_far = *i;\n        }\n \
    \   }\n    max_so_far", "    let mut max: isize = l[0];\n    for v in l.iter()\
    \ {\n        if *v > max {\n            max = *v;\n        }\n    }\n    max"]
stop_tokens:
- "\n}"
