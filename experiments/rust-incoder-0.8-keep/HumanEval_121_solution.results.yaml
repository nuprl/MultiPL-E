name: HumanEval_121_solution
language: rust
results:
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, value) in lst.iter().enumerate() {\n        if i % 2 == 1 {\n          \
    \  sum += value;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `12`', /tmp/tmpve8vjx9a.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens_sum = 0isize;\n\
    \    for num in lst.iter() {\n        if num % 2 == 0 {\n            evens_sum\
    \ += num;\n        }\n    }\n    evens_sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpzv2b9k4e.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = lst[0];\n\n\
    \    for value in lst.iter().skip(1) {\n        if value.is_odd() {\n        \
    \    sum += value;\n        }\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmpj1z5q3d2.rs:10:18\n   |\n10 |         if value.is_odd()\
    \ {\n   |                  ^^^^^^ method not found in `&isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    let\
    \ mut odd = 1;\n    for i in lst.iter() {\n        even = if i % 2 == 0 { even\
    \ + i } else { even * 2 };\n        odd = if i % 2 != 0 { odd + 1 } else { odd\
    \ * 2 };\n    }\n    odd\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `12`', /tmp/tmpdy9ri335.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    // Write your code here.\n\
    \    let mut sum = 0;\n    for i in lst[1..] {\n        if i % 2 != 0 {\n    \
    \        sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n --> /tmp/tmp78uhqa_g.rs:9:14\n  |\n9 |     for i in lst[1..]\
    \ {\n  |              ^^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \  |\n  = note: the trait bound `[isize]: IntoIterator` is not satisfied\n  =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `[isize]`\nhelp: consider borrowing here\n  |\n9 |     for i in &lst[1..] {\n\
    \  |              +\n9 |     for i in &mut lst[1..] {\n  |              ++++\n\
    \nerror[E0277]: `[isize]` is not an iterator\n --> /tmp/tmp78uhqa_g.rs:9:14\n\
    \  |\n9 |     for i in lst[1..] {\n  |              ^^^^^^^^ expected an implementor\
    \ of trait `IntoIterator`\n  |\n  = note: the trait bound `[isize]: IntoIterator`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n  |\n9 |   \
    \  for i in &lst[1..] {\n  |              +\n9 |     for i in &mut lst[1..] {\n\
    \  |              ++++\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    // your code\n    let mut\
    \ sum = 0isize;\n    for &item in lst.iter().skip(1) {\n        if item % 2 ==\
    \ 0 {\n            sum += item;\n        }\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp3_3_e2a3.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut total: isize = 0;\n\
    \    for num in lst {\n        if num % 2 == 1 {\n            total += num;\n\
    \        }\n    }\n    total\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpmsa5v5yu.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 1 {\n            sum += i;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi7tmfeah.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odds = 0;\n    for\
    \ (i, num) in lst.iter().enumerate() {\n        if i % 2 == 0 {\n            odds\
    \ += num;\n        }\n    }\n    odds\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmppypgvf6d.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut res = 0;\n    let\
    \ mut i = 0;\n    let len = lst.len();\n    for x in lst {\n        if i % 2 ==\
    \ 0 {\n            i += 1;\n            res += x;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpis3v3ksp.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = lst[0];\n\n\
    \    for i in 1 .. lst.len() {\n        if lst[i] % 2 == 0 {\n            sum\
    \ += lst[i];\n        }\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp43dnn04s.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    for &i in lst {\n        if i % 2 == 0 {\n            evens.push(i);\n  \
    \      }\n    }\n\n    let mut sum = evens.len() * evens.last().unwrap() + evens.len()\
    \ * evens.last().unwrap();\n    for &i in lst {\n        if i % 2 != 0 {\n   \
    \         sum += i;\n        }\n    }\n\n    return sum;\n}\n\nfn main() {\n \
    \   let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpto3_7xhn.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpto3_7xhn.rs:15:9\n   |\n15 |     for &i in lst {\n   |        \
    \ ^^    --- this expression has type `Option<isize>`\n   |         |\n   |   \
    \      expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpto3_7xhn.rs:21:12\n\
    \   |\n6  | fn solution(lst: Vec<isize>) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n...\n21 |     return\
    \ sum;\n   |            ^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n21 |     return sum.try_into().unwrap();\n   |               ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.is_empty() {\n   \
    \     0\n    } else {\n        let len = lst.len();\n        let mut total = 0;\n\
    \        for i in 0..(len / 2) {\n            if lst[i] % 2 != 0 {\n         \
    \       total += lst[i];\n            }\n        }\n        total\n    }\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `12`', /tmp/tmp1h54xljs.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0isize;\n \
    \   for i in lst.iter().skip(1) {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpv4lgc__2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().fold(0, |acc,\
    \ x| acc + 2 * x % 2 + 1)\n}\n\nfn main() {\n    let candidate = solution;\n \
    \   assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `12`', /tmp/tmp5x8mx4dc.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x\
    \ % 2 == 1).sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpobbini_4.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut result = isize::MAX;\n\
    \    for n in lst {\n        if n % 2 == 0 {\n            result += n;\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpn5ski29g.rs:10:13\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp3mxacfcx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odd_sum = 0;\n  \
    \  for x in lst {\n        if x % 2 != 0 {\n            odd_sum += x;\n      \
    \  }\n    }\n    odd_sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpxzf8_d90.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum: isize = 0;\n\
    \    sum.iter().enumerate().filter(|(&i1, &i2)| i1 % 2 == 0).for_each(|(_, item)|\
    \ sum += item);\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n --> /tmp/tmprspyixnh.rs:8:9\n  |\n8 |     sum.iter().enumerate().filter(|(&i1,\
    \ &i2)| i1 % 2 == 0).for_each(|(_, item)| sum += item);\n  |         ^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    let\
    \ mut index = 0;\n    while index < lst.len() {\n        if ((index % 2) != 0)\
    \ {\n            sum += lst[index];\n        }\n        index += 1;\n    }\n \
    \   sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `12`', /tmp/tmpkhps3xpg.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even = even::new(lst);\n\
    \    let mut odd = odd::new(lst);\n    let mut res = 0;\n    for e in even.iter()\
    \ {\n        if odd != even.iter() {\n            let even = even.next().unwrap();\n\
    \            let odd = odd.next().unwrap();\n            res += if e % 2 == 0\
    \ {odd} else {even};\n        } else {\n            break;\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `even`\n\
    \ --> /tmp/tmpuazw3j6a.rs:7:20\n  |\n7 |     let mut even = even::new(lst);\n\
    \  |                    ^^^^ use of undeclared crate or module `even`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `odd`\n --> /tmp/tmpuazw3j6a.rs:8:19\n\
    \  |\n8 |     let mut odd = odd::new(lst);\n  |                   ^^^ use of undeclared\
    \ crate or module `odd`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    solution_helper(\n      \
    \  &lst,\n        vec![],\n        |i: isize, c: char| c != '0',\n        |i|\
    \ {\n            if i == 0 || lst[i - 1] % 2 == 0 {\n                lst[i] +\
    \ i\n            } else {\n                i\n            }\n        },\n    )\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `solution_helper` in this scope\n -->\
    \ /tmp/tmpmyaf7xb3.rs:7:5\n  |\n7 |     solution_helper(\n  |     ^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    let\
    \ mut odd = 1;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n         \
    \   even += i;\n        } else {\n            odd += i;\n        }\n    }\n  \
    \  odd - even\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `12`', /tmp/tmp7nzw81u1.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n  \
    \      .map(|x| if x % 2 == 1 { x + 1 } else { x })\n        .fold(0, |x, y| x\
    \ + y)\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp9l18w8k7.rs:9:49\n\
    \  |\n9 |         .map(|x| if x % 2 == 1 { x + 1 } else { x })\n  |          \
    \                        -----          ^ expected `isize`, found `&isize`\n \
    \ |                                  |\n  |                                  expected\
    \ because of this\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |    \
    \     .map(|x| if x % 2 == 1 { x + 1 } else { *x })\n  |                     \
    \                            +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &x in lst.iter().rev() {\n        if x % 2 != 0 {\n            sum += x;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n \
    \   assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpvbtbkwfx.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = lst.iter().filter(|&n|\
    \ n % 2 == 0).collect::<Vec<_>>();\n    evens.iter().fold(0, |a, b| a + b)\n}\n\
    \nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `&&isize` to `isize`\n --> /tmp/tmprf6uvlzi.rs:8:35\n\
    \  |\n8 |     evens.iter().fold(0, |a, b| a + b)\n  |                        \
    \           ^ no implementation for `isize + &&isize`\n  |\n  = help: the trait\
    \ `Add<&&isize>` is not implemented for `isize`\n  = help: the following other\
    \ types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n     \
    \       <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n         \
    \   <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a\
    \ i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as\
    \ Add<isize>>\n          and 48 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.is_empty() {\n   \
    \     return 0;\n    }\n    let mut even = lst[0];\n    let mut odd = lst[0];\n\
    \    for el in lst.iter().skip(1) {\n        if el % 2 == 0 {\n            even\
    \ += el;\n        } else {\n            odd += el;\n        }\n    }\n    even\
    \ - odd\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmp49i4saik.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ e in lst {\n        if e % 2 == 0 {\n            sum += e;\n        }\n    }\n\
    \    return sum;\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpzqzial_t.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let even = lst.iter().filter(|e|\
    \ e % 2 == 0).filter(|e| e > 0);\n    let odd = lst.iter().filter(|e| e % 2 !=\
    \ 0);\n    let mut even_cnt = 0;\n    let mut odd_cnt = 0;\n    for e in even\
    \ {\n        if odd.contains(&e) {\n            odd_cnt += 1;\n        } else\
    \ {\n            even_cnt += 1;\n        }\n    }\n    even_cnt + odd_cnt\n}\n\
    \nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp_dckn6mq.rs:7:40\n\
    \  |\n7 |     let even = lst.iter().filter(|e| e % 2 == 0).filter(|e| e > 0);\n\
    \  |                                      - ^ - {integer}\n  |               \
    \                       |\n  |                                      &&isize\n\
    \  |\nhelp: `%` can be used on `isize`, you can dereference `e`\n  |\n7 |    \
    \ let even = lst.iter().filter(|e| *e % 2 == 0).filter(|e| e > 0);\n  |      \
    \                                +\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_dckn6mq.rs:7:65\n\
    \  |\n7 |     let even = lst.iter().filter(|e| e % 2 == 0).filter(|e| e > 0);\n\
    \  |                                                                 ^ expected\
    \ `&&isize`, found integer\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \ --> /tmp/tmp_dckn6mq.rs:8:39\n  |\n8 |     let odd = lst.iter().filter(|e| e\
    \ % 2 != 0);\n  |                                     - ^ - {integer}\n  |   \
    \                                  |\n  |                                    \
    \ &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference `e`\n  |\n\
    8 |     let odd = lst.iter().filter(|e| *e % 2 != 0);\n  |                   \
    \                  +\n\nerror[E0599]: no method named `contains` found for struct\
    \ `Filter` in the current scope\n  --> /tmp/tmp_dckn6mq.rs:12:16\n   |\n12 | \
    \        if odd.contains(&e) {\n   |                ^^^^^^^^ method not found\
    \ in `Filter<std::slice::Iter<'_, isize>, [closure@/tmp/tmp_dckn6mq.rs:8:33: 8:47]>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even = lst.filter(|&x|\
    \ x % 2 == 0).sum();\n    lst.filter(|&x| x % 2 != 0).for_each(|&x| even += x);\n\
    \    even\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpcuhokb7_.rs:7:24\n\
    \    |\n7   |       let mut even = lst.filter(|&x| x % 2 == 0).sum();\n    | \
    \                         ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    =\
    \ note: the following trait bounds were not satisfied:\n            `Vec<isize>:\
    \ Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n  \
    \          `[isize]: Iterator`\n            which is required by `&mut [isize]:\
    \ Iterator`\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpcuhokb7_.rs:8:9\n\
    \    |\n8   |       lst.filter(|&x| x % 2 != 0).for_each(|&x| even += x);\n  \
    \  |           ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n\
    \            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    // Return the sum of all\
    \ the odd integers that have a position which is even.\n    let mut even = lst[0];\n\
    \    for ele in lst.iter().cloned() {\n        if ele % 2 == 0 {\n           \
    \ even += ele;\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp34_n0w5_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len() == 0 {\n   \
    \     return 0;\n    }\n\n    // Calculate the evens and odds separately and combine\
    \ them.\n    let mut evens = lst.iter().filter(|&x| x % 2 == 0).sum();\n    let\
    \ mut odds = lst.iter().filter(|&x| x % 2 != 0).sum();\n\n    // Combine the even\
    \ and odd elements together.\n    evens += odds;\n\n    return evens;\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp71be3_sq.rs:13:9\n\
    \   |\n13 |     let mut odds = lst.iter().filter(|&x| x % 2 != 0).sum();\n   |\
    \         ^^^^^^^^ consider giving `odds` a type\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpsxgvmv31.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut total = 0;\n\n  \
    \  for index in lst.iter().position(|x| *x % 2 != 0) {\n        total += index\
    \ as isize;\n    }\n    total\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpgenazjy6.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = lst.into_iter().filter(|x|\
    \ *x % 2 == 0).collect::<Vec<isize>>();\n    let mut odds = lst.into_iter().filter(|x|\
    \ *x % 2 != 0).collect::<Vec<isize>>();\n    for x in evens.iter().filter(|x|\
    \ x % 2 == 1).cloned() {\n        odds.remove(x);\n    }\n    odds.iter().sum().unwrap()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp9emsfp8x.rs:9:40\n\
    \  |\n9 |     for x in evens.iter().filter(|x| x % 2 == 1).cloned() {\n  |   \
    \                                   - ^ - {integer}\n  |                     \
    \                 |\n  |                                      &&isize\n  |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n  |\n9 |     for x in evens.iter().filter(|x|\
    \ *x % 2 == 1).cloned() {\n  |                                      +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9emsfp8x.rs:10:21\n   |\n10 |         odds.remove(x);\n\
    \   |                     ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n10 |         odds.remove(x.try_into().unwrap());\n   |                \
    \      ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut result = Vec::new();\n\
    \    for i in 1..lst.len() {\n        if i % 2 == 0 {\n            result.push(*lst[i\
    \ - 1]);\n        }\n    }\n    result.sum() % 10\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpsaxf1hcg.rs:10:25\n\
    \   |\n10 |             result.push(*lst[i - 1]);\n   |                      \
    \   ^^^^^^^^^^^\n\nerror[E0599]: `Vec<_>` is not an iterator\n   --> /tmp/tmpsaxf1hcg.rs:13:12\n\
    \    |\n13  |       result.sum() % 10\n    |              ^^^ `Vec<_>` is not\
    \ an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<_>: Iterator`\n            which is required by `&mut Vec<_>:\
    \ Iterator`\n            `[_]: Iterator`\n            which is required by `&mut\
    \ [_]: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0599, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum_of_odds: isize\
    \ = 0;\n    let mut max_odd_idx = 0;\n    let mut min_odd_idx = lst.len();\n \
    \   while max_odd_idx < min_odd_idx {\n        let mut min_odd_idx = max_odd_idx;\n\
    \        sum_of_odds += lst[max_odd_idx];\n        while max_odd_idx + 1 < min_odd_idx\
    \ && lst[max_odd_idx] > lst[max_odd_idx + 1] {\n            sum_of_odds += lst[max_odd_idx];\n\
    \            max_odd_idx += 1;\n        }\n        while min_odd_idx > max_odd_idx\
    \ && lst[min_odd_idx] > lst[min_odd_idx - 1] {\n            min_odd_idx -= 1;\n\
    \        }\n        if max_odd_idx < min_odd_idx {\n            return sum_of_odds;\n\
    \        }\n    }\n    return sum_of_odds;\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter()\n        .enumerate()\n\
    \        .filter(|(i, _)| i % 2 == 1)\n        .map(|(_, v)| v * 2)\n        .sum();\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnbik6bco.rs:6:33\n   |\n\
    6  | fn solution(lst: Vec<isize>) -> isize {\n   |    --------               \
    \      ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n...\n11 |         .sum();\n\
    \   |               - help: remove this semicolon\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even = lst\n    \
    \    .iter()\n        .filter(|x| *x % 2 == 0)\n        .map(|x| *x / 2)\n   \
    \     .collect::<Vec<isize>>();\n    even.iter().find(|x| *x % 2 == 1).unwrap()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsk6_619f.rs:12:5\n   |\n\
    6  | fn solution(lst: Vec<isize>) -> isize {\n   |                           \
    \      ----- expected `isize` because of return type\n...\n12 |     even.iter().find(|x|\
    \ *x % 2 == 1).unwrap()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |     *even.iter().find(|x| *x % 2 == 1).unwrap()\n   |     +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum: isize = 0;\n\
    \    for x in lst {\n        if x % 2 != 0 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmptwlkcb6s.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().fold(0, |memo,\
    \ num| memo + num % 2 != 0 ? num : 0)\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `num`\n\
    \ --> /tmp/tmpuzf2byaq.rs:7:58\n  |\n7 |     lst.iter().fold(0, |memo, num| memo\
    \ + num % 2 != 0 ? num : 0)\n  |                                             \
    \             ^^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror:\
    \ expected one of `!`, `&&`, `&`, `(`, `)`, `*`, `...`, `.`, `;`, `<`, `?`, `[`,\
    \ `_`, `async`, `const`, `dyn`, `extern`, `fn`, `for`, `impl`, `unsafe`, `}`,\
    \ `~`, an operator, lifetime, or path, found `0`\n --> /tmp/tmpuzf2byaq.rs:7:64\n\
    \  |\n7 |     lst.iter().fold(0, |memo, num| memo + num % 2 != 0 ? num : 0)\n\
    \  |                                                                ^ expected\
    \ one of 26 possible tokens\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    use std::cmp::Ordering;\n\
    \    Ordering::Less => {\n        let mut sum = 0;\n        for el in lst {\n\
    \            if el % 2 == 0 {\n                sum += el;\n            }\n   \
    \     }\n        sum\n    }\n    Ordering::Greater => {\n        let mut sum =\
    \ 0;\n        for el in lst {\n            if el % 2 == 1 {\n                sum\
    \ += el;\n            }\n        }\n        sum\n    }\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found `=>`\n --> /tmp/tmpx51nf9wn.rs:8:20\n  |\n8 |     Ordering::Less => {\n\
    \  |                    ^^ expected one of 8 possible tokens\n\nwarning: unused\
    \ import: `std::cmp::Ordering`\n --> /tmp/tmpx51nf9wn.rs:7:9\n  |\n7 |     use\
    \ std::cmp::Ordering;\n  |         ^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]`\
    \ on by default\n\nerror: aborting due to previous error; 1 warning emitted\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odds: Vec<isize>\
    \ = Vec::new();\n    let mut evens: Vec<isize> = Vec::new();\n\n    for el in\
    \ lst {\n        if el % 2 == 0 {\n            evens.push(el);\n        } else\
    \ {\n            odds.push(el);\n        }\n    }\n    odds + evens\n        .iter()\n\
    \        .zip(evens.iter().cloned())\n        .filter(|el| el.0 == el.1)\n   \
    \     .filter(|el| el.0 % 2 != 0)\n        .fold(0, |sum, el| sum + el);\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpybd6xmqz.rs:20:27\n\
    \   |\n20 |         .filter(|el| el.0 == el.1)\n   |                         \
    \  ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: cannot add `(&isize,\
    \ isize)` to `{integer}`\n  --> /tmp/tmpybd6xmqz.rs:22:32\n   |\n22 |        \
    \ .fold(0, |sum, el| sum + el);\n   |                                ^ no implementation\
    \ for `{integer} + (&isize, isize)`\n   |\n   = help: the trait `Add<(&isize,\
    \ isize)>` is not implemented for `{integer}`\n   = help: the following other\
    \ types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n    \
    \         <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n      \
    \       <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n          \
    \   <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a\
    \ isize as Add<isize>>\n           and 48 others\n\nerror[E0369]: cannot add `{integer}`\
    \ to `Vec<isize>`\n  --> /tmp/tmpybd6xmqz.rs:17:10\n   |\n17 |       odds + evens\n\
    \   |  _____----_^_-\n   | |     |\n   | |     Vec<isize>\n18 | |         .iter()\n\
    19 | |         .zip(evens.iter().cloned())\n20 | |         .filter(|el| el.0 ==\
    \ el.1)\n21 | |         .filter(|el| el.0 % 2 != 0)\n22 | |         .fold(0, |sum,\
    \ el| sum + el);\n   | |____________________________________- {integer}\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpybd6xmqz.rs:6:33\n  |\n6 | fn solution(lst: Vec<isize>)\
    \ -> isize {\n  |    --------                     ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0369.\nFor more information about an error, try\
    \ `rustc --explain "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even = lst\n    \
    \    .iter()\n        .filter(|x| *x % 2 == 0)\n        .cloned()\n        .collect::<Vec<_>>();\n\
    \    let mut odds = even.clone();\n    odds.remove(0);\n    even.iter().filter(|x|\
    \ *x % 2 != 0).cloned().fold(0, |sum, x| sum + x);\n    odds\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxmh7ufez.rs:15:5\n   |\n\
    6  | fn solution(lst: Vec<isize>) -> isize {\n   |                           \
    \      ----- expected `isize` because of return type\n...\n15 |     odds\n   |\
    \     ^^^^ expected `isize`, found struct `Vec`\n   |\n   = note: expected type\
    \ `isize`\n            found struct `Vec<isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even: Vec<isize>\
    \ = Vec::new();\n    let mut odd: Vec<isize> = Vec::new();\n\n    for &x in lst\
    \ {\n        if x % 2 == 0 {\n            even.push(x);\n        } else {\n  \
    \          odd.push(x);\n        }\n    }\n\n    let mut even: isize = 0;\n  \
    \  let mut odd: isize = 0;\n\n    for &x in even {\n        even += x;\n    }\n\
    \n    for &x in odd {\n        odd += x;\n    }\n\n    even\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprmsclyn_.rs:10:9\n   |\n\
    10 |     for &x in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0277]: `isize` is not\
    \ an iterator\n  --> /tmp/tmprmsclyn_.rs:21:15\n   |\n21 |     for &x in even\
    \ {\n   |               ^^^^ `isize` is not an iterator\n   |\n   = help: the\
    \ trait `Iterator` is not implemented for `isize`\n   = note: if you want to iterate\
    \ between `start` until a value `end`, use the exclusive range syntax `start..end`\
    \ or the inclusive range syntax `start..=end`\n   = note: required because of\
    \ the requirements on the impl of `IntoIterator` for `isize`\n\nerror[E0277]:\
    \ `isize` is not an iterator\n  --> /tmp/tmprmsclyn_.rs:25:15\n   |\n25 |    \
    \ for &x in odd {\n   |               ^^^ `isize` is not an iterator\n   |\n \
    \  = help: the trait `Iterator` is not implemented for `isize`\n   = note: if\
    \ you want to iterate between `start` until a value `end`, use the exclusive range\
    \ syntax `start..end` or the inclusive range syntax `start..=end`\n   = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    solution1(lst, 0, false)\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `solution1` in this scope\n --> /tmp/tmpao0xm_mg.rs:7:5\n\
    \  |\n7 |     solution1(lst, 0, false)\n  |     ^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ n in lst {\n        if n % 2 == 0 {\n            sum += n;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpv0b04zqd.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len() < 2 {\n    \
    \    return 0;\n    }\n\n    let mut sum = 0;\n    for (i, value) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            sum += value;\n        }\n    }\n\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp2ma1rv4u.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let evens = lst.iter().filter(|&x|\
    \ x % 2 == 0).count();\n    let odds = lst.iter().filter(|&x| x % 2 != 0).count();\n\
    \    evens + odds\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8b8uixvg.rs:9:5\n  |\n6 |\
    \ fn solution(lst: Vec<isize>) -> isize {\n  |                               \
    \  ----- expected `isize` because of return type\n...\n9 |     evens + odds\n\
    \  |     ^^^^^^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n  |\n\
    9 |     (evens + odds).try_into().unwrap()\n  |     +            +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x| x %\
    \ 2 == 1).sum() + (lst.iter().filter(|x| x % 2 == 0).sum() % 2)\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpgpp3fxoj.rs:7:29\n\
    \  |\n7 |     lst.iter().filter(|x| x % 2 == 1).sum() + (lst.iter().filter(|x|\
    \ x % 2 == 0).sum() % 2)\n  |                           - ^ - {integer}\n  | \
    \                          |\n  |                           &&isize\n  |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().filter(|x|\
    \ *x % 2 == 1).sum() + (lst.iter().filter(|x| x % 2 == 0).sum() % 2)\n  |    \
    \                       +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \ --> /tmp/tmpgpp3fxoj.rs:7:72\n  |\n7 |     lst.iter().filter(|x| x % 2 == 1).sum()\
    \ + (lst.iter().filter(|x| x % 2 == 0).sum() % 2)\n  |                       \
    \                                               - ^ - {integer}\n  |         \
    \                                                             |\n  |         \
    \                                                             &&isize\n  |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().filter(|x|\
    \ x % 2 == 1).sum() + (lst.iter().filter(|x| *x % 2 == 0).sum() % 2)\n  |    \
    \                                                                  +\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.is_empty() {\n   \
    \     return 0;\n    }\n\n    let mut result = lst[0];\n    for element in lst.iter().skip(1)\
    \ {\n        if element % 2 == 0 {\n            result += element;\n        }\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp9589hygo.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odds: isize = 0;\n\
    \    let mut evens: isize = 0;\n\n    for x in lst {\n        if x % 2 == 1 {\n\
    \            evens += x;\n        } else {\n            odds += x;\n        }\n\
    \    }\n    return evens + odds;\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `12`', /tmp/tmpvyvxx5yc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut acc = Solution::zero();\n\
    \n    for (index, val) in lst.iter().enumerate() {\n        if index % 2 == 0\
    \ {\n            acc += val;\n        }\n    }\n\n    acc\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Solution`\n -->\
    \ /tmp/tmp4bsanlz8.rs:7:19\n  |\n7 |     let mut acc = Solution::zero();\n  |\
    \                   ^^^^^^^^ use of undeclared type `Solution`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n  \
    \      .filter(|&i| i % 2 == 1)\n        .map(|&i| {\n            lst\n      \
    \          .iter()\n                .filter(|&j| j % 2 == 0)\n               \
    \ .filter(|&j| i != j)\n                .map(|&j| j + i)\n                .sum::<isize>()\n\
    \        })\n        .sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9axmrjg8.rs:14:35\n   |\n\
    14 |                 .filter(|&j| i != j)\n   |                              \
    \     ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n14 |                 .filter(|&j| i != *j)\n   |             \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut evens_sum = 0;\n    let mut odd = vec![];\n    for val in lst.iter()\
    \ {\n        if val % 2 == 0 {\n            evens.push(val);\n        } else {\n\
    \            odd.push(val);\n        }\n    }\n    for i in evens.iter() {\n \
    \       evens_sum += i;\n    }\n    for i in odd.iter() {\n        evens_sum +=\
    \ i;\n    }\n    evens_sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `&&isize` to `{integer}`\n  --> /tmp/tmph8z4gg8_.rs:18:19\n\
    \   |\n18 |         evens_sum += i;\n   |                   ^^ no implementation\
    \ for `{integer} += &&isize`\n   |\n   = help: the trait `AddAssign<&&isize>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `&&isize` to `{integer}`\n\
    \  --> /tmp/tmph8z4gg8_.rs:21:19\n   |\n21 |         evens_sum += i;\n   |   \
    \                ^^ no implementation for `{integer} += &&isize`\n   |\n   = help:\
    \ the trait `AddAssign<&&isize>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n  \
    \      .enumerate()\n        .filter_map(|(i, _)| if i % 2 == 1 { Some(i) } else\
    \ { None })\n        .fold(0, |acc, _| acc + _)\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error: in expressions, `_` can only be used on the left-hand side of an\
    \ assignment\n  --> /tmp/tmpjnnntjpw.rs:11:33\n   |\n11 |         .fold(0, |acc,\
    \ _| acc + _)\n   |                                 ^ `_` not allowed here\n\n\
    error: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x| x %\
    \ 2 == 1).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpcat2sybc.rs:7:29\n\
    \  |\n7 |     lst.iter().filter(|x| x % 2 == 1).sum::<isize>()\n  |          \
    \                 - ^ - {integer}\n  |                           |\n  |      \
    \                     &&isize\n  |\nhelp: `%` can be used on `isize`, you can\
    \ dereference `x`\n  |\n7 |     lst.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \  |                           +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter_map(|x|\
    \ if x % 2 == 1 { Some(x * 2) } else { None }).sum()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `12`', /tmp/tmpkrtsf9m9.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n   \
    \ }\n\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1slu2u1d.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = 0;\n    for\
    \ &i in lst.iter() {\n        if i % 2 == 0 {\n            evens += i;\n     \
    \   }\n    }\n    return evens\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpzirfnv6_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    // write your code here\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_469h4n_.rs:6:33\n  |\n6 |\
    \ fn solution(lst: Vec<isize>) -> isize {\n  |    --------                   \
    \  ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    // your code goes here\n\
    \    let mut evens = vec![];\n    let mut odds = vec![];\n\n    for x in lst {\n\
    \        match x % 2 {\n            true => {\n                evens.push(x);\n\
    \            }\n            false => {\n                odds.push(x);\n      \
    \      }\n        }\n    }\n    return evens.iter().filter(|&x| x % 2 == 1).sum()\
    \ + odds.iter().filter(|&x| x % 2 == 0).sum();\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8b76hw2l.rs:13:13\n   |\n\
    12 |         match x % 2 {\n   |               ----- this expression has type\
    \ `isize`\n13 |             true => {\n   |             ^^^^ expected `isize`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8b76hw2l.rs:16:13\n\
    \   |\n12 |         match x % 2 {\n   |               ----- this expression has\
    \ type `isize`\n...\n16 |             false => {\n   |             ^^^^^ expected\
    \ `isize`, found `bool`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    let\
    \ mut odd = 0;\n    for i in lst {\n        if i % 2 == 0 {\n            even\
    \ += i;\n        } else {\n            odd += i;\n        }\n    }\n    (even\
    \ + odd) as isize\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `12`', /tmp/tmp41zhsm7k.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n  \
    \      .filter(|&x| x % 2 == 0)\n        .filter(|&x| x % 2 != 0)\n        .filter(|&x|\
    \ x != 0)\n        .sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpqoud2_78.rs:11:24\n\
    \   |\n11 |         .filter(|&x| x != 0)\n   |                        ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&i| i\
    \ % 2 == 1).fold(0, |acc, &i| acc + i)\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpn5vzbp9o.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter()\n        .filter(|&i|\
    \ i % 2 != 0)\n        .filter(|&i| i < lst.len())\n        .fold(0, |a, b| a\
    \ + b)\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpguq8z7dh.rs:9:26\n  |\n9 |\
    \         .filter(|&i| i < lst.len())\n  |                          ^^^^^^^^^\
    \ expected `&isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|e| e %\
    \ 2 != 0).sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpybnbofpd.rs:7:29\n\
    \  |\n7 |     lst.iter().filter(|e| e % 2 != 0).sum()\n  |                   \
    \        - ^ - {integer}\n  |                           |\n  |               \
    \            &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `e`\n  |\n7 |     lst.iter().filter(|e| *e % 2 != 0).sum()\n  |            \
    \               +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len() < 2 {\n    \
    \    return 0;\n    }\n\n    let mut evens: Vec<isize> = Vec::new();\n    let\
    \ mut odds: Vec<isize> = Vec::new();\n    let mut evens_pos: Vec<usize> = Vec::new();\n\
    \    let mut odds_pos: Vec<usize> = Vec::new();\n\n    for i in lst.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            evens.push(i as isize);\n          \
    \  evens_pos.push(0);\n        } else {\n            odds.push(i as isize);\n\
    \            odds_pos.push(1);\n        }\n    }\n\n    for i in evens_pos.iter().rev()\
    \ {\n        if i as usize >= odds.len() {\n            return 0;\n        }\n\
    \    }\n\n    for i in odds_pos.iter().rev() {\n        if i as usize >= evens.len()\
    \ {\n            return 0;\n        }\n    }\n\n    return evens.iter().sum::<isize>()\
    \ + odds.iter().sum::<isize>();\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmp_qxc0ed4.rs:18:24\n\
    \   |\n18 |             evens.push(i as isize);\n   |                        -^^^^^^^^^\n\
    \   |                        |\n   |                        cannot cast `&isize`\
    \ as `isize`\n   |                        help: dereference the expression: `*i`\n\
    \nerror[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmp_qxc0ed4.rs:21:23\n\
    \   |\n21 |             odds.push(i as isize);\n   |                       -^^^^^^^^^\n\
    \   |                       |\n   |                       cannot cast `&isize`\
    \ as `isize`\n   |                       help: dereference the expression: `*i`\n\
    \nerror[E0606]: casting `&usize` as `usize` is invalid\n  --> /tmp/tmp_qxc0ed4.rs:27:12\n\
    \   |\n27 |         if i as usize >= odds.len() {\n   |            -^^^^^^^^^\n\
    \   |            |\n   |            cannot cast `&usize` as `usize`\n   |    \
    \        help: dereference the expression: `*i`\n\nerror[E0606]: casting `&usize`\
    \ as `usize` is invalid\n  --> /tmp/tmp_qxc0ed4.rs:33:12\n   |\n33 |         if\
    \ i as usize >= evens.len() {\n   |            -^^^^^^^^^\n   |            |\n\
    \   |            cannot cast `&usize` as `usize`\n   |            help: dereference\
    \ the expression: `*i`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0606`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    let\
    \ mut even = vec![false; lst.len()];\n    for i in lst.iter() {\n        if even[i\
    \ as usize] {\n            sum += i;\n        } else {\n            even[i as\
    \ usize] = true;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0606]: casting `&isize` as `usize` is invalid\n  --> /tmp/tmpoldukhnc.rs:10:17\n\
    \   |\n10 |         if even[i as usize] {\n   |                 -^^^^^^^^^\n \
    \  |                 |\n   |                 cannot cast `&isize` as `usize`\n\
    \   |                 help: dereference the expression: `*i`\n\nerror[E0606]:\
    \ casting `&isize` as `usize` is invalid\n  --> /tmp/tmpoldukhnc.rs:13:18\n  \
    \ |\n13 |             even[i as usize] = true;\n   |                  -^^^^^^^^^\n\
    \   |                  |\n   |                  cannot cast `&isize` as `usize`\n\
    \   |                  help: dereference the expression: `*i`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0606`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0isize;\n\n\
    \    for i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n \
    \       }\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp0s8u1tmq.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even: isize = 0;\n\
    \    let mut odd: isize = 0;\n    for i in lst {\n        if i % 2 == 0 {\n  \
    \          even += i;\n        } else {\n            odd += i;\n        }\n  \
    \  }\n    even + odd\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `12`', /tmp/tmpw3gmv2l2.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().rev() {\n        if i % 2 == 0 {\n            sum += i;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpcmgwl1z0.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len() <= 1 {\n   \
    \     return 0;\n    }\n\n    // Find the position of \"1\" in list\n    let position\
    \ = lst.iter().find(|&x| x == 1).unwrap();\n\n    // Sum all odd elements starting\
    \ from position to end of list\n    let mut sum: isize = position;\n\n    for\
    \ x in lst.iter().skip(position).take(lst.len() - position + 1) {\n        if\
    \ x % 2 == 1 {\n            sum += x;\n        }\n    }\n\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp0itmejv3.rs:12:43\n\
    \   |\n12 |     let position = lst.iter().find(|&x| x == 1).unwrap();\n   |  \
    \                                         ^^ no implementation for `&isize ==\
    \ {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0itmejv3.rs:15:26\n\
    \   |\n15 |     let mut sum: isize = position;\n   |                  -----  \
    \ ^^^^^^^^ expected `isize`, found `&isize`\n   |                  |\n   |   \
    \               expected due to this\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n15 |     let mut sum: isize = *position;\n   |                        \
    \  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0itmejv3.rs:17:30\n   |\n\
    17 |     for x in lst.iter().skip(position).take(lst.len() - position + 1) {\n\
    \   |                              ^^^^^^^^ expected `usize`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0itmejv3.rs:17:57\n   |\n17 |\
    \     for x in lst.iter().skip(position).take(lst.len() - position + 1) {\n  \
    \ |                                                         ^^^^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `&isize` from `usize`\n\
    \  --> /tmp/tmp0itmejv3.rs:17:55\n   |\n17 |     for x in lst.iter().skip(position).take(lst.len()\
    \ - position + 1) {\n   |                                                    \
    \   ^ no implementation for `usize - &isize`\n   |\n   = help: the trait `Sub<&isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    let\
    \ even = lst.iter().filter(|&x| x % 2 == 0).count();\n    for &i in lst {\n  \
    \      if i % 2 == 1 {\n            sum += i;\n        }\n        if even != 0\
    \ {\n            sum += i + 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcptka4x5.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x| x %\
    \ 2 == 1).sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpoz1jt025.rs:7:29\n\
    \  |\n7 |     lst.iter().filter(|x| x % 2 == 1).sum()\n  |                   \
    \        - ^ - {integer}\n  |                           |\n  |               \
    \            &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n  |\n7 |     lst.iter().filter(|x| *x % 2 == 1).sum()\n  |            \
    \               +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ e in lst.iter_mut() {\n        *e = *e % 2 != 0 && *e + 1 as isize;\n      \
    \  sum += *e;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpftijhmxk.rs:9:29\n  |\n9 |\
    \         *e = *e % 2 != 0 && *e + 1 as isize;\n  |                          \
    \   ^^^^^^^^^^^^^^^ expected `bool`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpftijhmxk.rs:9:14\n  |\n9 |         *e = *e % 2 != 0 && *e\
    \ + 1 as isize;\n  |         --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `bool`\n  |         |\n  |         expected due to the type of this binding\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = Vec::new();\n\
    \    let mut odds = Vec::new();\n    for i in lst {\n        if i % 2 == 0 {\n\
    \            evens.push(i);\n        } else {\n            odds.push(i);\n   \
    \     }\n    }\n    evens.into_iter().sum()\n        + odds.iter().filter(|&x|\
    \ x % 2 == 1).count()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0283]: type annotations needed\n    --> /tmp/tmpv9s6pl31.rs:16:23\n\
    \     |\n16   |     evens.into_iter().sum()\n     |                       ^^^\
    \ cannot infer type for type parameter `S` declared on the associated function\
    \ `sum`\n     |\n     = note: cannot satisfy `_: Sum<isize>`\nnote: required by\
    \ a bound in `std::iter::Iterator::sum`\nhelp: consider specifying the type argument\
    \ in the method call\n     |\n16   |     evens.into_iter().sum::<S>()\n     |\
    \                          +++++\nhelp: consider specifying the type argument\
    \ in the function call\n     |\n16   |     evens.into_iter().sum::<S>()\n    \
    \ |                          +++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0283`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even = 0 as isize;\n\
    \    let mut odd = 0;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n  \
    \          even += i;\n        } else {\n            odd += i;\n        }\n  \
    \  }\n    even + odd\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `12`', /tmp/tmp6ga6zrtx.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len() == 0 {\n   \
    \     return 0;\n    }\n\n    let mut even: isize = 0;\n    let mut odd: isize\
    \ = 0;\n    for i in lst {\n        if i % 2 == 0 {\n            even += i;\n\
    \        } else {\n            odd += i;\n        }\n    }\n    even + odd\n}\n\
    \nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `12`', /tmp/tmphjez8t50.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0isize;\
    \ lst.len()];\n    for (i, &x) in lst.iter().enumerate() {\n        evens[i] =\
    \ if x % 2 == 0 { x + 1 } else { 0 };\n    }\n    evens\n        .iter()\n   \
    \     .map(|&x| x % 2 == 1 ? x * x : 0)\n        .sum()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `x`\n\
    \  --> /tmp/tmphqoa1m8q.rs:13:32\n   |\n13 |         .map(|&x| x % 2 == 1 ? x\
    \ * x : 0)\n   |                                ^ expected one of `)`, `,`, `.`,\
    \ `?`, or an operator\n\nerror: expected one of `!`, `&&`, `&`, `(`, `)`, `*`,\
    \ `...`, `.`, `;`, `<`, `?`, `[`, `_`, `async`, `const`, `dyn`, `extern`, `fn`,\
    \ `for`, `impl`, `unsafe`, `}`, `~`, an operator, lifetime, or path, found `0`\n\
    \  --> /tmp/tmphqoa1m8q.rs:13:40\n   |\n13 |         .map(|&x| x % 2 == 1 ? x\
    \ * x : 0)\n   |                                        ^ expected one of 26 possible\
    \ tokens\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, val) in lst.iter().enumerate() {\n        if i % 2 == 0 {\n            sum\
    \ += val;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpe2ys7aj3.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0isize;\n \
    \   for &i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n \
    \   assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp7t6ytn3w.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    let\
    \ mut odd = 1;\n    for (i, v) in lst.iter().enumerate() {\n        if v % 2 ==\
    \ 1 {\n            sum += v * odd;\n        }\n        odd *= 2;\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `12`', /tmp/tmp05ii_7p9.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut counter: usize =\
    \ 0;\n\n    for n in lst {\n        if n % 2 == 0 {\n            counter += n;\n\
    \        }\n    }\n\n    counter\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyvmrpirl.rs:11:24\n   |\n\
    11 |             counter += n;\n   |                        ^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmpyvmrpirl.rs:11:21\n\
    \   |\n11 |             counter += n;\n   |                     ^^ no implementation\
    \ for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyvmrpirl.rs:15:5\n\
    \   |\n6  | fn solution(lst: Vec<isize>) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n...\n15 |     counter\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    15 |     counter.try_into().unwrap()\n   |            ++++++++++++++++++++\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.rev().fold((0, 0), (acc,\
    \ val) => {\n        (val % 2, acc + val).0 as isize\n    })\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n\
    \ --> /tmp/tmpvuj6rv3x.rs:7:39\n  |\n7 |     lst.rev().fold((0, 0), (acc, val)\
    \ => {\n  |                                       ^^ expected one of `)`, `,`,\
    \ `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    match lst.iter().position(|&i|\
    \ i % 2 == 1) {\n        Some(pos) => lst.iter().position(|&i| i % 2 == 1).unwrap()\
    \ - pos,\n        None => 0\n    }\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkfaqc2rd.rs:8:22\n  |\n6 |\
    \ fn solution(lst: Vec<isize>) -> isize {\n  |                               \
    \  ----- expected `isize` because of return type\n7 |     match lst.iter().position(|&i|\
    \ i % 2 == 1) {\n8 |         Some(pos) => lst.iter().position(|&i| i % 2 == 1).unwrap()\
    \ - pos,\n  |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n8 |         Some(pos)\
    \ => (lst.iter().position(|&i| i % 2 == 1).unwrap() - pos).try_into().unwrap(),\n\
    \  |                      +                                                  \
    \ +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let evens = lst.filter(|e|\
    \ e % 2 == 0).clone(); // clone to avoid mutating original list\n    evens.iter().filter(|e|\
    \ e % 2 != 0).sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpk1isqrmb.rs:7:21\n\
    \    |\n7   |       let evens = lst.filter(|e| e % 2 == 0).clone(); // clone to\
    \ avoid mutating original list\n    |                       ^^^^^^ `Vec<isize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .windows(2)\n\
    \        .filter(|w| w[0] & 1 != 0)\n        .sum::<usize>()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Sum<&[isize]>` is not satisfied\n\
    \    --> /tmp/tmpc82lx5xq.rs:10:10\n     |\n10   |         .sum::<usize>()\n \
    \    |          ^^^ the trait `Sum<&[isize]>` is not implemented for `usize`\n\
    \     |\n     = help: the following other types implement trait `Sum<A>`:\n  \
    \             <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n           \
    \    <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpc82lx5xq.rs:7:5\n   |\n6  |   fn solution(lst: Vec<isize>) -> isize\
    \ {\n   |                                   ----- expected `isize` because of\
    \ return type\n7  | /     lst\n8  | |         .windows(2)\n9  | |         .filter(|w|\
    \ w[0] & 1 != 0)\n10 | |         .sum::<usize>()\n   | |_______________________^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |         .sum::<usize>().try_into().unwrap()\n\
    \   |                        ++++++++++++++++++++\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n  \
    \      .enumerate()\n        .filter(|(_, x)| x % 2 == 1)\n        .fold(0, |sum,\
    \ (x, _)| sum + x)\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp9mws3zb9.rs:10:28\n\
    \   |\n10 |         .filter(|(_, x)| x % 2 == 1)\n   |                       \
    \   - ^ - {integer}\n   |                          |\n   |                   \
    \       &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n10 |         .filter(|(_, x)| *x % 2 == 1)\n   |                      \
    \    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9mws3zb9.rs:11:38\n  \
    \ |\n11 |         .fold(0, |sum, (x, _)| sum + x)\n   |                      \
    \                ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add\
    \ `usize` to `isize`\n  --> /tmp/tmp9mws3zb9.rs:11:36\n   |\n11 |         .fold(0,\
    \ |sum, (x, _)| sum + x)\n   |                                    ^ no implementation\
    \ for `isize + usize`\n   |\n   = help: the trait `Add<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0369.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.is_empty() {\n   \
    \     0\n    } else {\n        let mut sum = 0;\n        let mut cnt = 0;\n  \
    \      for v in lst {\n            if v % 2 == 0 {\n                sum += v;\n\
    \                cnt += 1;\n            }\n            if cnt > 1 {\n        \
    \        sum -= v;\n                cnt -= 1;\n            }\n        }\n    \
    \    sum\n    }\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpo92yr0cc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = Vec::new();\n\
    \    let mut odds = Vec::new();\n    for i in lst.iter_mut() {\n        if i %\
    \ 2 == 0 {\n            evens.push(i);\n        } else {\n            odds.push(i);\n\
    \        }\n    }\n    odds\n        .iter()\n        .filter(|x| !evens.contains(x))\n\
    \        .sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmpz52p05vc.rs:10:14\n\
    \   |\n10 |         if i % 2 == 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `i`\n   |\n10 |         if *i % 2 == 0 {\n   |         \
    \   +\n\nerror[E0277]: the trait bound `isize: Sum<&&mut isize>` is not satisfied\n\
    \    --> /tmp/tmpz52p05vc.rs:19:10\n     |\n19   |         .sum()\n     |    \
    \      ^^^ the trait `Sum<&&mut isize>` is not implemented for `isize`\n     |\n\
    \     = help: the following other types implement trait `Sum<A>`:\n          \
    \     <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64\
    \ as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a\
    \ i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n\
    \               <i16 as Sum>\n             and 20 others\nnote: required by a\
    \ bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter()\n        .filter_map(|x|\
    \ if x.is_odd() then Some(x) else None)\n        .sum()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `then`\n --> /tmp/tmpflgamqgs.rs:8:39\n  |\n\
    8 |         .filter_map(|x| if x.is_odd() then Some(x) else None)\n  |       \
    \                  --            ^^^^ expected `{`\n  |                      \
    \   |\n  |                         this `if` expression has a condition, but no\
    \ block\n  |\nhelp: try placing this code inside a block\n  |\n8 |         .filter_map(|x|\
    \ if x.is_odd() { then } Some(x) else None)\n  |                             \
    \          +      +\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even: isize = 0;\n\
    \    for x in lst {\n        if x % 2 == 0 {\n            even += x;\n       \
    \ }\n    }\n    even\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpkm6gqtzh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpn5z6oqtf.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = lst\n   \
    \     .iter()\n        .filter(|&i| i % 2 == 0)\n        .cloned()\n        .cloned()\n\
    \        .collect::<Vec<isize>>();\n    let mut evens_sum = evens.iter().sum();\n\
    \    evens = evens.iter().filter(|&i| i % 2 == 1).collect();\n    evens_sum +=\
    \ evens.iter().sum();\n    evens_sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<Filter<std::slice::Iter<'_, isize>,\
    \ [closure@/tmp/tmpm2bcvdx9.rs:9:17: 9:32]> as Iterator>::Item == &&_`\n    -->\
    \ /tmp/tmpm2bcvdx9.rs:11:10\n     |\n11   |         .cloned()\n     |        \
    \  ^^^^^^ expected reference, found `isize`\n     |\n     = note: expected reference\
    \ `&&_`\n                found reference `&isize`\n     = note: required because\
    \ of the requirements on the impl of `Iterator` for `Cloned<Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpm2bcvdx9.rs:9:17: 9:32]>>`\nnote: required by a bound\
    \ in `cloned`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<Cloned<Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpm2bcvdx9.rs:9:17: 9:32]>>>`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmpm2bcvdx9.rs:12:10\n   |\n12 |           .collect::<Vec<isize>>();\n\
    \   |            ^^^^^^^ method cannot be called on `Cloned<Cloned<Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpm2bcvdx9.rs:9:17: 9:32]>>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<Cloned<Filter<std::slice::Iter<'_, isize>, [closure@/tmp/tmpm2bcvdx9.rs:9:17:\
    \ 9:32]>> as Iterator>::Item = &_`\n           which is required by `Cloned<Cloned<Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpm2bcvdx9.rs:9:17: 9:32]>>>: Iterator`\n           `Cloned<Cloned<Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpm2bcvdx9.rs:9:17: 9:32]>>>: Iterator`\n           which\
    \ is required by `&mut Cloned<Cloned<Filter<std::slice::Iter<'_, isize>, [closure@/tmp/tmpm2bcvdx9.rs:9:17:\
    \ 9:32]>>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut total_odd = 0;\n\
    \    let mut even = 0;\n    for num in lst {\n        if num % 2 == 1 {\n    \
    \        total_odd += num;\n        }\n        even += num;\n    }\n    (total_odd\
    \ + even) / 2\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `12`', /tmp/tmpjron2j_k.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = lst\n   \
    \     .iter()\n        .cloned()\n        .enumerate()\n        .filter(|(_, x)|\
    \ *x % 2 == 0)\n        .map(|(_, x)| *x)\n        .collect::<Vec<isize>>();\n\
    \    let mut total = 0isize;\n    for num in evens {\n        if num > 0 {\n \
    \           total += num;\n        }\n    }\n    total\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpu5kkrimn.rs:12:23\n\
    \   |\n12 |         .map(|(_, x)| *x)\n   |                       ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n  \
    \      .map(|v| v % 2 == 0)\n        .filter(|v| v)\n        .sum::<bool>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiz2m6brl.rs:10:21\n   |\n\
    10 |         .filter(|v| v)\n   |                     ^ expected `bool`, found\
    \ `&bool`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |         .filter(|v|\
    \ *v)\n   |                     +\n\nerror[E0277]: the trait bound `bool: Sum`\
    \ is not satisfied\n    --> /tmp/tmpiz2m6brl.rs:11:10\n     |\n11   |        \
    \ .sum::<bool>()\n     |          ^^^ the trait `Sum` is not implemented for `bool`\n\
    \     |\n     = help: the following other types implement trait `Sum<A>`:\n  \
    \             <Duration as Sum<&'a Duration>>\n               <Duration as Sum>\n\
    \               <Option<T> as Sum<Option<U>>>\n               <Result<T, E> as\
    \ Sum<Result<U, E>>>\n               <Simd<f32, LANES> as Sum<&'a Simd<f32, LANES>>>\n\
    \               <Simd<f32, LANES> as Sum>\n               <Simd<f64, LANES> as\
    \ Sum<&'a Simd<f64, LANES>>>\n               <Simd<f64, LANES> as Sum>\n     \
    \        and 72 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpiz2m6brl.rs:7:5\n   |\n6  |  \
    \ fn solution(lst: Vec<isize>) -> isize {\n   |                              \
    \     ----- expected `isize` because of return type\n7  | /     lst\n8  | |  \
    \       .iter()\n9  | |         .map(|v| v % 2 == 0)\n10 | |         .filter(|v|\
    \ v)\n11 | |         .sum::<bool>()\n   | |______________________^ expected `isize`,\
    \ found `bool`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = Vec::new();\n\
    \    let mut total = 0;\n    for n in lst {\n        if n % 2 == 0 {\n       \
    \     evens.push(n);\n        }\n    }\n    for n in evens {\n        total +=\
    \ n;\n    }\n    total\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpdor023yi.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x\
    \ % 2 == 1).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpg0ehpy92.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum: usize = 0;\n\
    \n    for i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n\
    \        }\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3a2maz7q.rs:11:20\n   |\n\
    11 |             sum += i;\n   |                    ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot add-assign `&isize` to `usize`\n  --> /tmp/tmp3a2maz7q.rs:11:17\n\
    \   |\n11 |             sum += i;\n   |                 ^^ no implementation for\
    \ `usize += &isize`\n   |\n   = help: the trait `AddAssign<&isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3a2maz7q.rs:15:5\n\
    \   |\n6  | fn solution(lst: Vec<isize>) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n...\n15 |     sum\n\
    \   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n15 |     sum.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut res = 0;\n    for\
    \ i in lst {\n        if i % 2 == 1 {\n            res += i;\n        }\n    }\n\
    \    return res;\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpp3u38_t6.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even = 0 as isize;\n\
    \    let mut odd = 1isize as isize;\n    for i in lst.iter() {\n        if i %\
    \ 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    even * odd\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `112`,\n right: `12`', /tmp/tmprzbfamdf.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n  \
    \      .enumerate()\n        .filter(|(_, ix)| ix % 2 == 1)\n        .map(|(_,\
    \ ix)| ix)\n        .sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpqjjtc6dv.rs:10:30\n\
    \   |\n10 |         .filter(|(_, ix)| ix % 2 == 1)\n   |                     \
    \      -- ^ - {integer}\n   |                           |\n   |              \
    \             &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `ix`\n   |\n10 |         .filter(|(_, ix)| *ix % 2 == 1)\n   |             \
    \              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter_mut() {\n        if *i % 2 == 0 {\n            *i += 1;\n    \
    \    }\n        sum += *i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `lst` as mutable, as it is not declared as\
    \ mutable\n --> /tmp/tmphr6vdjtg.rs:8:14\n  |\n6 | fn solution(lst: Vec<isize>)\
    \ -> isize {\n  |             --- help: consider changing this to be mutable:\
    \ `mut lst`\n7 |     let mut sum = 0;\n8 |     for i in lst.iter_mut() {\n  |\
    \              ^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut counter: isize =\
    \ 0;\n    for element in lst {\n        if element % 2 == 1 {\n            counter\
    \ += element;\n        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpy7d89kx1.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    solution2(lst, |x| x%2 ==\
    \ 1)\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `solution2` in this scope\n --> /tmp/tmpv1w2h5j7.rs:7:5\n\
    \  |\n7 |     solution2(lst, |x| x%2 == 1)\n  |     ^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut res = 0;\n    for\
    \ (i, element) in lst.iter().enumerate() {\n        if i % 2 == 0 {\n        \
    \    res += element;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpmjp5t3oq.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ e in lst.iter().rev() {\n        if e % 2 == 0 {\n            sum += e;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpowvzab48.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut s: isize = 0;\n \
    \   for &i in &lst {\n        if i % 2 == 0 {\n            s += i;\n        }\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp06cye05z.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len() == 0 {\n   \
    \     0\n    } else {\n        let mut even = lst.iter().filter(|x| x % 2 == 0).count();\n\
    \        let mut odd = lst.iter().filter(|x| x % 2 == 1).count();\n\n        for\
    \ i in 0..even.saturating_sub(&odd) {\n            odd -= i;\n        }\n    \
    \    even\n    }\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmplp15chm1.rs:10:48\n\
    \   |\n10 |         let mut even = lst.iter().filter(|x| x % 2 == 0).count();\n\
    \   |                                              - ^ - {integer}\n   |     \
    \                                         |\n   |                            \
    \                  &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n   |\n10 |         let mut even = lst.iter().filter(|x| *x % 2 == 0).count();\n\
    \   |                                              +\n\nerror[E0369]: cannot mod\
    \ `&&isize` by `{integer}`\n  --> /tmp/tmplp15chm1.rs:11:47\n   |\n11 |      \
    \   let mut odd = lst.iter().filter(|x| x % 2 == 1).count();\n   |           \
    \                                  - ^ - {integer}\n   |                     \
    \                        |\n   |                                             &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n11 | \
    \        let mut odd = lst.iter().filter(|x| *x % 2 == 1).count();\n   |     \
    \                                        +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmplp15chm1.rs:13:41\n   |\n13 |         for i in 0..even.saturating_sub(&odd)\
    \ {\n   |                                         ^^^^ expected `usize`, found\
    \ `&usize`\n   |\nhelp: consider removing the borrow\n   |\n13 -         for i\
    \ in 0..even.saturating_sub(&odd) {\n13 +         for i in 0..even.saturating_sub(odd)\
    \ {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmplp15chm1.rs:16:9\n\
    \   |\n6  | fn solution(lst: Vec<isize>) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n...\n16 |       \
    \  even\n   |         ^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n16 |         even.try_into().unwrap()\n   |             ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n  \
    \      .filter(|&x| x % 2 == 1)\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp8ijwsxyy.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    return sum;\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpnox8vcs_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum_odd = 0;\n  \
    \  for i in lst {\n        if i % 2 == 0 {\n            sum_odd += i;\n      \
    \  }\n    }\n    sum_odd\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpp3s_1nbb.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len() == 0 || lst.len()\
    \ == 1 {\n        return 0\n    }\n\n    let mut sum = 0 as isize;\n    let mut\
    \ evens = vec![];\n    let mut odd = vec![];\n\n    for x in lst {\n        if\
    \ x % 2 == 0 {\n            evens.push(x);\n        } else {\n            odd.push(x);\n\
    \        }\n    }\n\n    odd.sort();\n\n    for x in odd {\n        if x % 2 !=\
    \ 0 {\n            sum += x;\n        }\n    }\n\n    for x in evens {\n     \
    \   if x % 2 == 0 {\n            sum += x;\n        }\n    }\n\n    return sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `12`', /tmp/tmp7p1x_zrv.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.is_empty() { return\
    \ 0; }\n\n    let mut evens = lst.iter().filter(|e| e % 2 == 0).count();\n   \
    \ if evens > 1 {\n        for e in lst.iter().skip(evens - 1) {\n            if\
    \ e % 2 != 0 {\n                evens += 1;\n            }\n        }\n    }\n\
    \    evens\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp3bqyxed8.rs:9:45\n\
    \  |\n9 |     let mut evens = lst.iter().filter(|e| e % 2 == 0).count();\n  |\
    \                                           - ^ - {integer}\n  |             \
    \                              |\n  |                                        \
    \   &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference `e`\n\
    \  |\n9 |     let mut evens = lst.iter().filter(|e| *e % 2 == 0).count();\n  |\
    \                                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3bqyxed8.rs:17:5\n   |\n6  | fn solution(lst: Vec<isize>) -> isize\
    \ {\n   |                                 ----- expected `isize` because of return\
    \ type\n...\n17 |     evens\n   |     ^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n17 |     evens.try_into().unwrap()\n   |          ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even: Vec<isize>\
    \ = vec![];\n    let mut odd: Vec<isize> = vec![];\n\n    for n in lst {\n   \
    \     if n % 2 == 0 {\n            even.push(n);\n        } else {\n         \
    \   odd.push(n);\n        }\n    }\n\n    even.iter().cloned().fold(0, |acc, x|\
    \ acc + x)\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpi859xw_k.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    return sum;\n}\n\nfn main() {\n    let candidate = solution;\n   \
    \ assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpbixsjkm6.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().cloned().enumerate().filter(|(_,\
    \ v)| v & 1).fold(0, |sum, (_, v)| sum + v)\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpckbny61m.rs:7:53\n  |\n7 |\
    \     lst.iter().cloned().enumerate().filter(|(_, v)| v & 1).fold(0, |sum, (_,\
    \ v)| sum + v)\n  |                                                     ^^^^^\
    \ expected `bool`, found `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len() <= 0 {\n   \
    \     0\n    } else {\n        let mut sum = 0isize;\n        for i in lst.iter().skip(1)\
    \ {\n            if i % 2 == 0 {\n                sum += i;\n            }\n \
    \       }\n        sum\n    }\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp2kqou5js.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum: isize = 0;\n\
    \    for i in lst.iter().enumerate().filter_map(|(i, item)| {\n        if i %\
    \ 2 == 0 {\n            sum += item;\n        }\n        Ok(item)\n    }) {\n\
    \        sum = sum + i.1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgdxm1prq.rs:12:9\n   |\n\
    12 |         Ok(item)\n   |         ^^^^^^^^ expected enum `Option`, found enum\
    \ `Result`\n   |\n   = note: expected enum `Option<_>`\n              found enum\
    \ `Result<&isize, _>`\nhelp: try wrapping the expression in `Some`\n   |\n12 |\
    \         Some(Ok(item))\n   |         +++++        +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum: isize = 0;\n\
    \    for i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    return sum;\n}\n\nfn main() {\n    let candidate = solution;\n   \
    \ assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpo_0cdodi.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    // Sort list first\n    lst.sort_unstable();\n\
    \    // Start with sum of first two elements\n    let mut sum1 = lst[0] + lst[1];\n\
    \    // If the third element is odd, add that to the first sum\n    if lst[2]\
    \ % 2 == 1 {\n        sum1 += lst[2];\n    }\n    // Loop through rest of list\
    \ adding them to sum\n    for i in lst[2..] {\n        // If i is odd, add it\
    \ to the sum\n        if i % 2 == 1 {\n            sum1 += i;\n        }\n   \
    \ }\n    sum1\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmpa1kivlin.rs:16:14\n   |\n16 |     for i in lst[2..]\
    \ {\n   |              ^^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \   |\n   = note: the trait bound `[isize]: IntoIterator` is not satisfied\n \
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `[isize]`\nhelp: consider borrowing here\n   |\n16 |     for i in &lst[2..]\
    \ {\n   |              +\n16 |     for i in &mut lst[2..] {\n   |            \
    \  ++++\n\nerror[E0277]: `[isize]` is not an iterator\n  --> /tmp/tmpa1kivlin.rs:16:14\n\
    \   |\n16 |     for i in lst[2..] {\n   |              ^^^^^^^^ expected an implementor\
    \ of trait `IntoIterator`\n   |\n   = note: the trait bound `[isize]: IntoIterator`\
    \ is not satisfied\n   = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n   |\n16 | \
    \    for i in &lst[2..] {\n   |              +\n16 |     for i in &mut lst[2..]\
    \ {\n   |              ++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even: usize = 0;\n\
    \    let mut odd: usize = 0;\n    for &x in lst {\n        if x % 2 == 0 {\n \
    \           even += x;\n        } else {\n            odd += x;\n        }\n \
    \   }\n    even + odd\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpng5ruo77.rs:9:9\n  |\n9 |\
    \     for &x in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpng5ruo77.rs:16:5\n   |\n6  | fn solution(lst: Vec<isize>) -> isize\
    \ {\n   |                                 ----- expected `isize` because of return\
    \ type\n...\n16 |     even + odd\n   |     ^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n16 |     (even + odd).try_into().unwrap()\n\
    \   |     +          +++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len() == 0 {\n   \
    \     0\n    } else {\n        let mut sum = 0isize;\n        let mut i = 0;\n\
    \        let mut x = lst[0];\n        while i < lst.len() {\n            if x\
    \ % 2 == 0 {\n                sum += x;\n                i += 1;\n           \
    \ } else {\n                x += lst[i];\n                i += 1;\n          \
    \  }\n        }\n        sum\n    }\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `30`,\n right: `12`', /tmp/tmpg_yqawf3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even: isize = 0;\n\
    \    for num in lst.iter().skip(1).filter(|&x| x % 2 == 0) {\n        even +=\
    \ num;\n    }\n    return even;\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmppk0idi2m.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = 0usize;\n\
    \    for e in lst {\n        if e % 2 == 0 {\n            evens += e;\n      \
    \  }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgm420pby.rs:10:22\n   |\n\
    10 |             evens += e;\n   |                      ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmpgm420pby.rs:10:19\n\
    \   |\n10 |             evens += e;\n   |                   ^^ no implementation\
    \ for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgm420pby.rs:13:5\n\
    \   |\n6  | fn solution(lst: Vec<isize>) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n...\n13 |     evens\n\
    \   |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a\
    \ `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n13\
    \ |     evens.try_into().unwrap()\n   |          ++++++++++++++++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![false;\
    \ lst.len() / 2];\n    for &x in lst {\n        if x&1 { evens[x] = true; }\n\
    \    }\n    let mut res = 0;\n    for i in 0..evens.len() {\n        if evens[i]\
    \ { res += lst.len() - i; }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmparwp_4aa.rs:8:9\n  |\n8 |\
    \     for &x in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmparwp_4aa.rs:15:5\n   |\n6  | fn solution(lst: Vec<isize>) -> isize\
    \ {\n   |                                 ----- expected `isize` because of return\
    \ type\n...\n15 |     res\n   |     ^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n15 |     res.try_into().unwrap()\n   |        ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter_map(|&x|\
    \ {\n        match x % 2 {\n            0 => Some(x),\n            1 => None,\n\
    \        }\n    }).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0004]: non-exhaustive patterns: `_` not covered\n --> /tmp/tmp_j4py1u4.rs:8:15\n\
    \  |\n8 |         match x % 2 {\n  |               ^^^^^ pattern `_` not covered\n\
    \  |\n  = note: the matched value is of type `isize`\n  = note: `isize` does not\
    \ have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n\
    help: ensure that all possible cases are being handled by adding a match arm with\
    \ a wildcard pattern or an explicit pattern as shown\n  |\n10~             1 =>\
    \ None,\n11~             _ => todo!(),\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0004`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.is_empty() {\n   \
    \     return 0;\n    }\n\n    let mut odd = 0;\n    let mut even = 0;\n    for\
    \ &i in lst {\n        if i % 2 == 0 {\n            even += i;\n        } else\
    \ {\n            odd += i;\n        }\n    }\n    return even + odd;\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2u6_675i.rs:13:9\n   |\n\
    13 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    // base case: empty list\n\
    \    let mut even = 0;\n    for element in lst {\n        if element % 2 == 0\
    \ {\n            even = even.wrapping_add(element);\n        } else {\n      \
    \      return even.wrapping_add(element);\n        }\n    }\n    return even;\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `wrapping_add` on ambiguous numeric type\
    \ `{integer}`\n  --> /tmp/tmpf64n96nu.rs:11:25\n   |\n11 |             even =\
    \ even.wrapping_add(element);\n   |                         ^^^^^^^^^^^^\n   |\n\
    help: you must specify a type for this binding, like `i32`\n   |\n8  |     let\
    \ mut even: i32 = 0;\n   |         ~~~~~~~~~~~~~\n\nerror[E0689]: can't call method\
    \ `wrapping_add` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpf64n96nu.rs:13:25\n\
    \   |\n13 |             return even.wrapping_add(element);\n   |             \
    \            ^^^^^^^^^^^^\n   |\nhelp: you must specify a type for this binding,\
    \ like `i32`\n   |\n8  |     let mut even: i32 = 0;\n   |         ~~~~~~~~~~~~~\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 1 {\n            sum += i;\n        }\n    }\n\
    \    return sum;\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp90c6d4qw.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().fold(0, |mut sum,\
    \ i| {\n        sum += i / 2;\n        if i % 2 == 1 {\n            sum += sum;\n\
    \        }\n        sum\n    })\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `44`,\n right: `12`', /tmp/tmpt9ubgerk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n\n    for\
    \ e in lst {\n        if e % 2 != 0 {\n            sum += e;\n        }\n    }\n\
    \n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp2vd6yq2v.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = Vec::new();\n\
    \    for i in lst {\n        if i % 2 == 0 {\n            evens.push(i);\n   \
    \     }\n    }\n    evens.iter().filter(|x| x % 2 == 1).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpo9cq_n0l.rs:13:31\n\
    \   |\n13 |     evens.iter().filter(|x| x % 2 == 1).sum()\n   |              \
    \               - ^ - {integer}\n   |                             |\n   |    \
    \                         &&isize\n   |\nhelp: `%` can be used on `isize`, you\
    \ can dereference `x`\n   |\n13 |     evens.iter().filter(|x| *x % 2 == 1).sum()\n\
    \   |                             +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n  \
    \      .filter(|&x| *x % 2 == 1)\n        .sum::<isize>()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpqb62ruu5.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n  \
    \      .filter(|&x| x % 2 == 0)\n        .filter(|&x| x % 2 == 1)\n        .sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmp86ma3evh.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut res = 0;\n    for\
    \ pos in lst.iter().rev() {\n        if pos == 0 {\n            continue;\n  \
    \      }\n        let sum = pos * 2;\n        res += sum;\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n --> /tmp/tmpapkl2kvb.rs:9:16\n\
    \  |\n9 |         if pos == 0 {\n  |                ^^ no implementation for `&isize\
    \ == {integer}`\n  |\n  = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x\
    \ % 2 == 1).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpd21fp7en.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n  \
    \      .enumerate()\n        .filter(|(idx, _)| idx % 2 == 1)\n        .fold(0,\
    \ |sum, (_, item)| sum + item)\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `12`', /tmp/tmpinu35pxt.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even = lst.iter().filter(|x|\
    \ *x % 2 == 0).count();\n    let mut odd = lst.iter().filter(|x| *x % 2 != 0).count();\n\
    \    let mut sum = (even + odd) * (even + odd);\n    sum += lst.iter().filter(|x|\
    \ *x % 2 != 0).count();\n    sum -= lst.iter().filter(|x| *x % 2 == 0).count();\n\
    \    return sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7tz_17ch.rs:12:12\n   |\n\
    6  | fn solution(lst: Vec<isize>) -> isize {\n   |                           \
    \      ----- expected `isize` because of return type\n...\n12 |     return sum\n\
    \   |            ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    12 |     return sum.try_into().unwrap()\n   |               ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ pos in lst.iter().filter(|&x| x % 2 == 1) {\n        sum += pos;\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmphruxi8ct.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut result = lst[0];\n\
    \    for value in lst {\n        if value % 2 == 0 && result % 2 == 1 {\n    \
    \        result += value;\n        }\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpf43h6178.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odd_num: isize =\
    \ 0;\n    for num in lst.iter().filter(|&n| n % 2 != 0) {\n        odd_num +=\
    \ num;\n    }\n    return odd_num;\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpmqif36jv.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut total = 0;\n    for\
    \ (i, &item) in lst.iter().enumerate() {\n        if i % 2 == 0 {\n          \
    \  total += item;\n        }\n    }\n    return total;\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpzi_n1kfm.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.is_empty() {\n   \
    \     return 0;\n    }\n    let mut even = 0;\n    let mut odd = lst.len() - 1;\n\
    \    let mut count = 0;\n    while count < lst.len() {\n        if odd > 0 {\n\
    \            if even == lst.len() / 2 {\n                return even;\n      \
    \      }\n            even += lst.len() - odd - 1;\n            odd = lst.len()\
    \ - 1;\n        }\n        let temp = lst.iter().filter(|&i| i % 2 == 0).sum();\n\
    \        if temp % 2 != 0 {\n            even += temp;\n        } else {\n   \
    \         odd -= 1;\n        }\n        count += 1;\n    }\n    return even;\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1x6ag6b1.rs:16:24\n   |\n\
    16 |                 return even;\n   |                        ^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |                 return even.try_into().unwrap();\n\
    \   |                            ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    solution_aux(lst)\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `solution_aux` in this scope\n --> /tmp/tmpt77dtupc.rs:7:5\n\
    \  |\n7 |     solution_aux(lst)\n  |     ^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n  \
    \      .enumerate()\n        .filter(|(i, _)| i % 2 == 1)\n        .sum()\n}\n\
    \nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `isize: Sum<(usize, &isize)>` is not satisfied\n\
    \    --> /tmp/tmpwa8h85k9.rs:11:10\n     |\n11   |         .sum()\n     |    \
    \      ^^^ the trait `Sum<(usize, &isize)>` is not implemented for `isize`\n \
    \    |\n     = help: the following other types implement trait `Sum<A>`:\n   \
    \            <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n            \
    \   <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128 as\
    \ Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even = vec![0; lst.len()];\n\
    \    let mut odd = vec![0; lst.len()];\n\n    for i in 0..lst.len() {\n      \
    \  if lst[i] % 2 == 0 {\n            even[i] = even[i] + lst[i];\n        } else\
    \ {\n            odd[i] = odd[i] + lst[i];\n        }\n    }\n    odd.iter().sum::<isize>()\
    \ + (even.iter().sum::<isize>() % 2) as isize\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmprxto3b0y.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum_odds = 0;\n \
    \   for x in lst {\n        if x % 2 == 0 {\n            sum_odds += x;\n    \
    \    }\n    }\n    sum_odds\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmphud196xn.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n  \
    \      .cloned()\n        .filter(|&x| x.is_odd())\n        .filter(|&x| x % 2\
    \ == 1)\n        .sum()\n}\n\nfn main() {\n    let candidate = solution;\n   \
    \ assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_odd` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpkjdd97wy.rs:10:24\n   |\n10 |         .filter(|&x| x.is_odd())\n\
    \   |                        ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odds: Vec<_> = Vec::new();\n\
    \    for n in lst {\n        if n % 2 == 0 {\n            odds.push(n);\n    \
    \    } else {\n            odds.remove(0);\n        }\n    }\n    if odds.is_empty()\
    \ {\n        return 0;\n    }\n    if odds.len() == 1 {\n        return odds[0];\n\
    \    }\n    let mut sum: isize = 0;\n    for n in odds {\n        sum += n;\n\
    \    }\n    return sum;\n}\n\nfn main() {\n    let candidate = solution;\n   \
    \ assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'removal index (is 0) should be < len (is 0)',\
    \ /tmp/tmp1okegcmy.rs:12:18\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    let\
    \ mut odd_sum = 0;\n    for x in lst.iter() {\n        if x % 2 != 0 {\n     \
    \       even += x;\n        } else {\n            odd_sum += x;\n        }\n \
    \   }\n    odd_sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpxixwtogi.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odd = lst[0];\n \
    \   for x in lst {\n        if odd % 2 != x % 2 {\n            odd += x;\n   \
    \     }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = solution;\n   \
    \ assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpjqk35bj1.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter()\n        .enumerate()\n\
    \        .filter(|(_, val)| val % 2 == 1)\n        .filter(|(_, val)| val % 2\
    \ != 0)\n        .sum()\n}\n\nfn main() {\n    let candidate = solution;\n   \
    \ assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpysfx9uab.rs:9:32\n\
    \  |\n9 |         .filter(|(_, val)| val % 2 == 1)\n  |                      \
    \      --- ^ - {integer}\n  |                            |\n  |              \
    \              &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `val`\n  |\n9 |         .filter(|(_, val)| *val % 2 == 1)\n  |             \
    \               +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  -->\
    \ /tmp/tmpysfx9uab.rs:10:32\n   |\n10 |         .filter(|(_, val)| val % 2 !=\
    \ 0)\n   |                            --- ^ - {integer}\n   |                \
    \            |\n   |                            &&isize\n   |\nhelp: `%` can be\
    \ used on `isize`, you can dereference `val`\n   |\n10 |         .filter(|(_,\
    \ val)| *val % 2 != 0)\n   |                            +\n\nerror[E0277]: the\
    \ trait bound `isize: Sum<(usize, &isize)>` is not satisfied\n    --> /tmp/tmpysfx9uab.rs:11:10\n\
    \     |\n11   |         .sum()\n     |          ^^^ the trait `Sum<(usize, &isize)>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut total: isize = 0;\n\
    \    for &i in lst {\n        if i % 2 != 0 {\n            total += i;\n     \
    \   }\n    }\n    return total;\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwmv0igoj.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in 0..=lst.len() {\n        if i % 2 == 0 {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 4 but the index\
    \ is 4', /tmp/tmp6wrj9hup.rs:10:20\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = lst.drain(..).filter(|&x|\
    \ x % 2 == 0).collect::<Vec<isize>>();\n    let mut result = evens.iter().sum();\n\
    \n    for (i, item) in evens.iter_mut().enumerate().cloned().skip(1).cloned().enumerate()\
    \ {\n        if ((i + 1) % 2 == 0) {\n            item += result;\n        }\n\
    \        result += item;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4tvzi16m.rs:11:12\n\
    \   |\n11 |         if ((i + 1) % 2 == 0) {\n   |            ^               \
    \ ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these\
    \ parentheses\n   |\n11 -         if ((i + 1) % 2 == 0) {\n11 +         if (i\
    \ + 1) % 2 == 0 {\n   | \n\nerror[E0271]: type mismatch resolving `<Enumerate<std::slice::IterMut<'_,\
    \ isize>> as Iterator>::Item == &_`\n    --> /tmp/tmp4tvzi16m.rs:10:51\n     |\n\
    10   |     for (i, item) in evens.iter_mut().enumerate().cloned().skip(1).cloned().enumerate()\
    \ {\n     |                                                   ^^^^^^ expected\
    \ reference, found tuple\n     |\n     = note: expected reference `&_`\n     \
    \               found tuple `(usize, &mut isize)`\nnote: required by a bound in\
    \ `cloned`\n\nerror[E0599]: the method `skip` exists for struct `Cloned<Enumerate<std::slice::IterMut<'_,\
    \ isize>>>`, but its trait bounds were not satisfied\n  --> /tmp/tmp4tvzi16m.rs:10:60\n\
    \   |\n10 |        for (i, item) in evens.iter_mut().enumerate().cloned().skip(1).cloned().enumerate()\
    \ {\n   |                                                               ^^^^ method\
    \ cannot be called on `Cloned<Enumerate<std::slice::IterMut<'_, isize>>>` due\
    \ to unsatisfied trait bounds\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `<Enumerate<std::slice::IterMut<'_, isize>> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<Enumerate<std::slice::IterMut<'_,\
    \ isize>>>: Iterator`\n           `Cloned<Enumerate<std::slice::IterMut<'_, isize>>>:\
    \ Iterator`\n           which is required by `&mut Cloned<Enumerate<std::slice::IterMut<'_,\
    \ isize>>>: Iterator`\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\
    \nSome errors have detailed explanations: E0271, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n  \
    \      .cloned()\n        .filter_map(|&x| {\n            if x % 2 == 0 {\n  \
    \              Some(x)\n            } else {\n                None\n         \
    \   }\n        })\n        .sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ujkt8bm.rs:10:22\n   |\n\
    10 |         .filter_map(|&x| {\n   |                      ^--\n   |         \
    \             ||\n   |                      |expected due to this\n   |      \
    \                expected `isize`, found reference\n   |                     \
    \ help: did you mean `x`: `&isize`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpztuxp8j3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = 0.0;\n  \
    \  for i in lst {\n        if i % 2 == 0 {\n            evens += i;\n        }\n\
    \    }\n    evens\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmprv27ufky.rs:10:19\n\
    \   |\n10 |             evens += i;\n   |                   ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprv27ufky.rs:13:5\n\
    \   |\n6  | fn solution(lst: Vec<isize>) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n...\n13 |     evens\n\
    \   |     ^^^^^ expected `isize`, found floating-point number\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n  \
    \      .map(|&x| x % 2)\n        .filter(|x| x != 0)\n        .sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp1bhzanqm.rs:10:23\n\
    \   |\n10 |         .filter(|x| x != 0)\n   |                       ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = 0;\n    let\
    \ mut odds = 0;\n    for el in lst {\n        if el % 2 == 0 {\n            evens\
    \ += el;\n        } else {\n            odds += el;\n        }\n    }\n    evens\
    \ + odds\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `12`', /tmp/tmpz0xml7ua.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = Vec::new();\n\
    \    let mut odds = Vec::new();\n\n    for n in lst {\n        if n % 2 == 0 {\n\
    \            evens.push(n);\n        } else {\n            odds.push(n);\n   \
    \     }\n    }\n\n    odds.iter().cloned().filter(|x| x % 2 != 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpn_z41aqp.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut result = vec![0];\n\
    \n    for &x in lst {\n        if x % 2 != 0 {\n            result += x;\n   \
    \     }\n    }\n\n    result.iter().sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8mtyl1v0.rs:9:9\n  |\n9 |\
    \     for &x in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `Vec<{integer}>`\n  --> /tmp/tmp8mtyl1v0.rs:11:13\n\
    \   |\n11 |             result += x;\n   |             ------^^^^^\n   |     \
    \        |\n   |             cannot use `+=` on type `Vec<{integer}>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 1 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp0aj5b9d_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut res = 0;\n    for\
    \ i in lst.iter().rev().skip(1).filter(|&x| {\n        *x % 2 == 1\n    }) {\n\
    \        res+=*i;\n    }\n    res\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `9`', /tmp/tmpbkuxqvnk.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum_even = lst[0];\n\
    \    for i in 1..lst.len() {\n        sum_even += lst[i];\n        if lst[i] %\
    \ 2 == 1 {\n            sum_even += lst[i as usize];\n        }\n    }\n    sum_even\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `29`,\n right: `12`', /tmp/tmptae3o7q6.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even: isize = 0;\n\
    \    let mut odd: isize = 0;\n    let mut total_odd: isize = 0;\n    let mut total_even:\
    \ isize = 0;\n\n    for n in lst {\n        if n % 2 == 0 {\n            total_even\
    \ += n;\n        } else {\n            total_odd += n;\n        }\n    }\n   \
    \ for n in lst {\n        if n % 2 == 0 {\n            even += n;\n        }\n\
    \    }\n    return total_even + total_odd - (even * odd);\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpg_m0dizp.rs:8:9\n\
    \  |\n8 |     let mut odd: isize = 0;\n  |         ----^^^\n  |         |\n  |\
    \         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by\
    \ default\n\nerror[E0382]: use of moved value: `lst`\n   --> /tmp/tmpg_m0dizp.rs:19:14\n\
    \    |\n6   | fn solution(lst: Vec<isize>) -> isize {\n    |             --- move\
    \ occurs because `lst` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n...\n12  |     for n in lst {\n    |              --- `lst` moved due\
    \ to this implicit call to `.into_iter()`\n...\n19  |     for n in lst {\n   \
    \ |              ^^^ value used here after move\n    |\nnote: this function takes\
    \ ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n12  |     for n in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut res = 0;\n    for\
    \ i in lst.iter().filter(|&i| i % 2 != 0) {\n        res += i;\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp5bbt5no8.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![0; lst.len()];\n\
    \    let mut odds = vec![0; lst.len()];\n    for i in 0..lst.len() {\n       \
    \ if lst[i] % 2 == 0 {\n            evens[i] += 1;\n        } else {\n       \
    \     odds[i] += 1;\n        }\n    }\n    for i in 0..lst.len() {\n        if\
    \ evens[i] % 2 == 0 {\n            evens[i] -= 1;\n        } else {\n        \
    \    odds[i] -= 1;\n        }\n    }\n    if evens.iter().any(|x| x == 0) {\n\
    \        return 0\n    } else {\n        return evens.iter().filter(|x| x == 1).sum()\
    \ - odds.iter().filter(|x| x == 1).sum()\n    }\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&{integer}` with `{integer}`\n  --> /tmp/tmpc4_i599i.rs:23:31\n\
    \   |\n23 |     if evens.iter().any(|x| x == 0) {\n   |                      \
    \         ^^ no implementation for `&{integer} == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&{integer}`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0277]: can't compare `&&{integer}` with `{integer}`\n  --> /tmp/tmpc4_i599i.rs:26:42\n\
    \   |\n26 |         return evens.iter().filter(|x| x == 1).sum() - odds.iter().filter(|x|\
    \ x == 1).sum()\n   |                                          ^^ no implementation\
    \ for `&&{integer} == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&&{integer}`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: can't compare `&&{integer}`\
    \ with `{integer}`\n  --> /tmp/tmpc4_i599i.rs:26:81\n   |\n26 |         return\
    \ evens.iter().filter(|x| x == 1).sum() - odds.iter().filter(|x| x == 1).sum()\n\
    \   |                                                                        \
    \         ^^ no implementation for `&&{integer} == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&&{integer}`\n   =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \     f32\n             f64\n             i128\n             i16\n           \
    \  i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut\
    \ total = 0;\n    while i < lst.len() {\n        if i % 2 == 0 {\n           \
    \ total += lst[i];\n            i += 1;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    return total;\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpbn49c3n7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len() < 2 {\n    \
    \    return 0;\n    }\n\n    // Sort the list, then iterate through, keeping track\
    \ of the sum\n    let mut evens = 0;\n    let mut odds = 0;\n    let mut evens_idx\
    \ = 1;\n    let mut odds_idx = 1;\n\n    for &item in lst.iter().rev() {\n   \
    \     if item % 2 == 0 {\n            evens += item as isize;\n            odds_idx\
    \ += 1;\n        } else {\n            evens_idx -= 1;\n            odds += item\
    \ as isize;\n        }\n        if odds_idx == evens_idx {\n            evens\
    \ += item as isize;\n            odds_idx += 1;\n        }\n    }\n\n    evens\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpx039s1ty.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    loop\
    \ {\n        if lst.len() == 0 {\n            return sum;\n        }\n       \
    \ sum += lst.last().unwrap();\n        lst.retain(|x| x % 2 != 0);\n    }\n}\n\
    \nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `lst` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmpagz784py.rs:13:9\n   |\n6  | fn solution(lst: Vec<isize>)\
    \ -> isize {\n   |             --- help: consider changing this to be mutable:\
    \ `mut lst`\n...\n13 |         lst.retain(|x| x % 2 != 0);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.rev()\n        .iter()\n\
    \        .fold(0, |acc, x| if x % 2 == 1 {\n            *acc + x\n        } else\
    \ {\n            x\n        })\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpdsni1s4m.rs:7:9\n\
    \    |\n7   |       lst.rev()\n    |           ^^^ `Vec<isize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut res = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            res += i;\n        }\n    }\n\
    \    return res;\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpqwvdaq3m.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    // Your code here\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9o5wnz1_.rs:6:33\n  |\n6 |\
    \ fn solution(lst: Vec<isize>) -> isize {\n  |    --------                   \
    \  ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even_count = 0;\n\
    \    let mut odd_count = 0;\n    let mut sum = 0;\n    for el in lst.iter() {\n\
    \        if el % 2 == 0 {\n            sum += el;\n            odd_count++;\n\
    \        } else {\n            even_count++;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpa18a6zp4.rs:13:22\n\
    \   |\n13 |             odd_count++;\n   |                      ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n13 |             { let\
    \ tmp = odd_count; odd_count += 1; tmp };\n   |             +++++++++++      \
    \    ~~~~~~~~~~~~~~~~~~~~~~~\n13 -             odd_count++;\n13 +            \
    \ odd_count += 1;\n   | \n\nerror: Rust has no postfix increment operator\n  -->\
    \ /tmp/tmpa18a6zp4.rs:15:23\n   |\n15 |             even_count++;\n   |      \
    \                 ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n\
    \   |\n15 |             { let tmp = even_count; even_count += 1; tmp };\n   |\
    \             +++++++++++           ~~~~~~~~~~~~~~~~~~~~~~~~\n15 -           \
    \  even_count++;\n15 +             even_count += 1;\n   | \n\nerror: aborting\
    \ due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n  \
    \      .enumerate()\n        .filter(|(i, x)| i % 2 == 0)\n        .map(|(_, x)|\
    \ x)\n        .sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpci1jg61k.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmppn0v8qh8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odds = vec![];\n    for v in lst {\n        if v % 2 == 0 {\n   \
    \         evens.push(v);\n        } else {\n            odds.push(v);\n      \
    \  }\n    }\n    evens.into_iter().fold(0, |s, e| s + e)\n}\n\nfn main() {\n \
    \   let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpwkagle49.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ &n in lst {\n        if n % 2 != 0 {\n            sum += n;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpknz9_prc.rs:8:9\n  |\n8 |\
    \     for &n in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `n`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens: Vec<isize>\
    \ = vec![];\n    let mut odd: isize = 0;\n    for i in lst {\n        if i %2\
    \ == 0 {\n            evens.push(i);\n        } else {\n            odd += i;\n\
    \        }\n    }\n    return odd;\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpewk7ez4v.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n\
    \    let mut odd = vec![];\n    for &i in lst {\n        if i % 2 == 0 {\n   \
    \         evens.push(i);\n        } else {\n            odd.push(i);\n       \
    \ }\n    }\n    let sum: isize = evens.iter().fold(0, |sum, i| sum + i);\n   \
    \ return sum + odd.iter().fold(0, |sum, i| sum + i);\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnzjgykiy.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.into_iter().filter(|&x|\
    \ {\n        if x % 2 == 0 {\n            x\n        } else {\n            1\n\
    \        }\n    }).sum()\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxlt8nkgq.rs:9:13\n  |\n9 |\
    \             x\n  |             ^ expected `bool`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxlt8nkgq.rs:11:13\n   |\n11 |             1\n\
    \   |             ^ expected `bool`, found integer\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len() < 2 {\n    \
    \    return 0;\n    }\n    if lst[1] == 0 || lst[0]%2 == 0 {\n        return lst[1];\n\
    \    }\n\n    let mut sum = 0;\n    for x in lst {\n        if x%2 == 1 {\n  \
    \          sum += x;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmplkc9ry9i.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x| x%2\
    \ == 1).sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpsjrhd1t2.rs:7:28\n\
    \  |\n7 |     lst.iter().filter(|x| x%2 == 1).sum()\n  |                     \
    \      -^- {integer}\n  |                           |\n  |                   \
    \        &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \  |\n7 |     lst.iter().filter(|x| *x%2 == 1).sum()\n  |                    \
    \       +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    \n\
    \    for (index, value) in lst.iter().enumerate() {\n        if index%2 == 0 {\n\
    \            sum += value;\n        }\n    }\n    \n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp6t57_5bc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n  \
    \      .map(|x| *x)\n        .filter(|x| x % 2 == 1)\n        .filter(|x| x %\
    \ 2 != 0)\n        .sum()\n}\n\nfn main() {\n    let candidate = solution;\n \
    \   assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp7yq5eh5_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let even = lst.filter(|x|\
    \ *x % 2 == 0).count();\n    let odd = lst.filter(|x| *x % 2 != 0).count();\n\
    \    (even + odd) / 2.0\n}\n\nfn main() {\n    let candidate = solution;\n   \
    \ assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpay7n_oe3.rs:7:20\n\
    \    |\n7   |       let even = lst.filter(|x| *x % 2 == 0).count();\n    |   \
    \                   ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n\
    \            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0599]:\
    \ `Vec<isize>` is not an iterator\n   --> /tmp/tmpay7n_oe3.rs:8:19\n    |\n8 \
    \  |       let odd = lst.filter(|x| *x % 2 != 0).count();\n    |             \
    \        ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n     \
    \       which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().filter(|&i| i % 2 == 0) {\n        sum += i;\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmphcfneaz6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odd_sum: isize =\
    \ 0;\n    for val in lst {\n        if val % 2 != 0 {\n            odd_sum +=\
    \ val;\n        }\n    }\n    odd_sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpa_fhk4pl.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n\n    for\
    \ num in lst {\n        if num % 2 == 0 {\n            sum += num;\n        }\n\
    \    }\n\n    return sum;\n}\n\nfn main() {\n    let candidate = solution;\n \
    \   assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmphu1wqfhr.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    let\
    \ mut size = lst.len();\n    for i in 0..size {\n        if i % 2 == 1 {\n   \
    \         sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `12`', /tmp/tmp3x9j5dqp.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter().rev() {\n        if i % 2 == 1 {\n            sum += i;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpd9qaadcp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    solution0(lst)\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `solution0` in this scope\n --> /tmp/tmp7eb98b9i.rs:7:5\n\
    \  |\n7 |     solution0(lst)\n  |     ^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst.iter() {\n        if i % 2 == 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpm62ia14w.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x| x %\
    \ 2 == 1).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmppyo842d_.rs:7:29\n\
    \  |\n7 |     lst.iter().filter(|x| x % 2 == 1).sum::<isize>()\n  |          \
    \                 - ^ - {integer}\n  |                           |\n  |      \
    \                     &&isize\n  |\nhelp: `%` can be used on `isize`, you can\
    \ dereference `x`\n  |\n7 |     lst.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \  |                           +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp7sun4oif.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
