name: HumanEval_26_remove_duplicates
language: rust
results:
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut new_numbers = Vec::new();\n\n    for n in numbers {\n       \
    \ if new_numbers.contains(&n) {\n            continue;\n        }\n\n        new_numbers.push(n);\n\
    \    }\n\n    new_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpz2jlfw2y.rs:23:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.iter().filter(|&x| numbers.iter().count(|&y| *x == *y)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed for `&_`\n --> /tmp/tmpk964b2rd.rs:6:54\n\
    \  |\n6 |     numbers.iter().filter(|&x| numbers.iter().count(|&y| *x == *y)).collect()\n\
    \  |                                                      ^^ consider giving this\
    \ closure parameter the explicit type `&_`, with the type parameters specified\n\
    \  |\n  = note: type must be known at this point\n\nerror[E0061]: this function\
    \ takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpk964b2rd.rs:6:47\n\
    \    |\n6   |     numbers.iter().filter(|&x| numbers.iter().count(|&y| *x == *y)).collect()\n\
    \    |                                               ^^^^^ ------------- supplied\
    \ 1 argument\n    |                                               |\n    |   \
    \                                            expected 0 arguments\n    |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismatched types\n --> /tmp/tmpk964b2rd.rs:6:32\n\
    \  |\n6 |     numbers.iter().filter(|&x| numbers.iter().count(|&y| *x == *y)).collect()\n\
    \  |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `bool`, found `usize`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpk964b2rd.rs:6:69\n\
    \     |\n6    |     numbers.iter().filter(|&x| numbers.iter().count(|&y| *x ==\
    \ *y)).collect()\n     |                                                     \
    \                ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0277, E0282, E0308.\nFor more\
    \ information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    for n in numbers {\n        if seen.contains(&n)\
    \ {\n            continue;\n        }\n        seen.insert(n);\n        numbers\n\
    \    }\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpv24j_foa.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpv24j_foa.rs:12:9\n   |\n12 |         numbers\n   |    \
    \     ^^^^^^^ expected `()`, found struct `Vec`\n   |\n   = note: expected unit\
    \ type `()`\n                 found struct `Vec<isize>`\nhelp: you might have\
    \ meant to return this value\n   |\n12 |         return numbers;\n   |       \
    \  ++++++        +\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    numbers.dedup();\n    seen.into_iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp9qczuu1l.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    for n in numbers {\n        if seen.contains(&n)\
    \ {\n            continue;\n        }\n        seen.insert(n);\n        numbers.push(n\
    \ as isize);\n    }\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp5vidiznz.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    for n in numbers {\n        if !seen.insert(n).unwrap()\
    \ {\n            numbers.remove(n);\n        }\n    }\n    numbers\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpdasxsr5x.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpdasxsr5x.rs:9:28\n  |\n9 |             numbers.remove(n);\n\
    \  |                            ^ expected `usize`, found `isize`\n  |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n  |\n9 |             numbers.remove(n.try_into().unwrap());\n  |      \
    \                       ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers = numbers;\n    let mut i = 1;\n    while numbers.len()\
    \ > i {\n        if numbers.contains(&i) {\n            numbers.remove(&i);\n\
    \        }\n        i += 1;\n    }\n    numbers\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqu4r7hot.rs:9:29\n  |\n9 |\
    \         if numbers.contains(&i) {\n  |                             ^^ expected\
    \ `isize`, found `usize`\n  |\n  = note: expected reference `&isize`\n       \
    \      found reference `&usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqu4r7hot.rs:10:28\n\
    \   |\n10 |             numbers.remove(&i);\n   |                            ^^\
    \ expected `usize`, found `&usize`\n   |\nhelp: consider removing the borrow\n\
    \   |\n10 -             numbers.remove(&i);\n10 +             numbers.remove(i);\n\
    \   | \n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashMap<isize, bool> = HashMap::new();\n    let mut output\
    \ = Vec::new();\n    for n in numbers {\n        if seen.get(&n).is_some() {\n\
    \            continue;\n        }\n        output.push(n);\n        seen.insert(n,\
    \ true);\n    }\n    output\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpy0yfzlw3.rs:6:19\n\
    \  |\n6 |     let mut seen: HashMap<isize, bool> = HashMap::new();\n  |      \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpy0yfzlw3.rs:6:42\n\
    \  |\n6 |     let mut seen: HashMap<isize, bool> = HashMap::new();\n  |      \
    \                                    ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // use HashMap to deduplicate\n    let mut numbers: HashMap<isize, isize>\
    \ = HashMap::new();\n    for n in numbers {\n        if numbers.contains_key(&n)\
    \ {\n            numbers.remove(&n);\n        } else {\n            numbers.insert(n,\
    \ n);\n        }\n    }\n    let mut unique: Vec<isize> = Vec::new();\n    for\
    \ n in numbers.values() {\n        unique.push(n);\n    }\n    unique\n}\n\nfn\
    \ main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpzgi6_f3w.rs:7:22\n\
    \  |\n7 |     let mut numbers: HashMap<isize, isize> = HashMap::new();\n  |  \
    \                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpzgi6_f3w.rs:7:46\n\
    \  |\n7 |     let mut numbers: HashMap<isize, isize> = HashMap::new();\n  |  \
    \                                            ^^^^^^^ not found in this scope\n\
    \  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers = numbers.to_vec();\n    numbers.dedup();\n    numbers\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpleb9jvc9.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .iter()\n        .cloned()\n        .filter(|&num| !numbers.iter().any(|&x|\
    \ *x == num))\n        .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpzpnrz4va.rs:9:49\n\
    \  |\n9 |         .filter(|&num| !numbers.iter().any(|&x| *x == num))\n  |   \
    \                                              ^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut counter = HashSet::new();\n    numbers.iter().for_each(|num|\
    \ {\n        if !counter.contains(num) {\n            counter.insert(num);\n \
    \           true\n        } else {\n            false\n        }\n    });\n  \
    \  numbers.iter().filter(|&num| !counter.contains(num)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpfrorurl0.rs:6:23\n  |\n6 |     let mut counter = HashSet::new();\n \
    \ |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfrorurl0.rs:10:13\n   |\n8  | /         if !counter.contains(num)\
    \ {\n9  | |             counter.insert(num);\n10 | |             true\n   | |\
    \             ^^^^ expected `()`, found `bool`\n11 | |         } else {\n12 |\
    \ |             false\n13 | |         }\n   | |_________- expected this to be\
    \ `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfrorurl0.rs:12:13\n  \
    \ |\n8  | /         if !counter.contains(num) {\n9  | |             counter.insert(num);\n\
    10 | |             true\n11 | |         } else {\n12 | |             false\n \
    \  | |             ^^^^^ expected `()`, found `bool`\n13 | |         }\n   | |_________-\
    \ expected this to be `()`\n\nerror[E0277]: a value of type `Vec<isize>` cannot\
    \ be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpfrorurl0.rs:15:58\n\
    \     |\n15   |     numbers.iter().filter(|&num| !counter.contains(num)).collect()\n\
    \     |                                                          ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.iter().filter(|&x| numbers.iter().count(|&y| x == y)).cloned()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpgh6z_mn7.rs:6:47\n    |\n6   |     numbers.iter().filter(|&x|\
    \ numbers.iter().count(|&y| x == y)).cloned()\n    |                         \
    \                      ^^^^^ ----------- supplied 1 argument\n    |          \
    \                                     |\n    |                               \
    \                expected 0 arguments\n    |\nnote: associated function defined\
    \ here\n\nerror[E0308]: mismatched types\n --> /tmp/tmpgh6z_mn7.rs:6:32\n  |\n\
    6 |     numbers.iter().filter(|&x| numbers.iter().count(|&y| x == y)).cloned()\n\
    \  |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `bool`, found `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpgh6z_mn7.rs:6:5\n\
    \  |\n5 | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  |     \
    \                                         ---------- expected `Vec<isize>` because\
    \ of return type\n6 |     numbers.iter().filter(|&x| numbers.iter().count(|&y|\
    \ x == y)).cloned()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Cloned`\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n             found struct `Cloned<Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpgh6z_mn7.rs:6:27: 6:65]>>`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.dedup_by()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmp6xze5_q4.rs:6:13\n     |\n6    |     numbers.dedup_by()\n   \
    \  |             ^^^^^^^^- supplied 0 arguments\n     |             |\n     |\
    \             expected 1 argument\n     |\nnote: associated function defined here\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp6xze5_q4.rs:6:5\n  |\n5 | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n  |                                           \
    \   ---------- expected `Vec<isize>` because of return type\n6 |     numbers.dedup_by()\n\
    \  |     ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n          found unit type `()`\nnote: method `dedup_by`\
    \ modifies its receiver in-place\n --> /tmp/tmp6xze5_q4.rs:6:13\n  |\n6 |    \
    \ numbers.dedup_by()\n  |     ------- ^^^^^^^^ this call modifies `numbers` in-place\n\
    \  |     |\n  |     you probably want to use this value after calling the method...\n\
    \  = note: ...instead of the `()` output of method `dedup_by`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut hashset = HashSet::<isize>::new();\n    numbers.dedup().filter(|&x|\
    \ hashset.insert(x)).collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpylz87egw.rs:6:23\n  |\n6 |     let mut hashset = HashSet::<isize>::new();\n\
    \  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0599]:\
    \ `()` is not an iterator\n --> /tmp/tmpylz87egw.rs:7:21\n  |\n7 |     numbers.dedup().filter(|&x|\
    \ hashset.insert(x)).collect()\n  |                     ^^^^^^ `()` is not an\
    \ iterator\n  |\n  = note: the following trait bounds were not satisfied:\n  \
    \        `(): Iterator`\n          which is required by `&mut (): Iterator`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // Create a new vector with the result\n    let mut new_vec = vec![];\n\
    \n    // For each number in the input vector\n    for &num in numbers {\n    \
    \    // If the number hasn't already been added to the new vector\n        if\
    \ !new_vec.contains(&num) {\n            // Add it to the new vector\n       \
    \     new_vec.push(num);\n        }\n    }\n\n    // Return the new vector\n \
    \   return new_vec;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjk2lf51j.rs:10:9\n   |\n\
    10 |     for &num in numbers {\n   |         ^^^^    ------- this expression has\
    \ type `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `num`\n   |\n\
    \   = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    for x in numbers {\n        if seen.insert(x).is_some()\
    \ {\n            numbers.remove(&x);\n        }\n    }\n    numbers\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpmtm3vlci.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpmtm3vlci.rs:9:28\n  |\n9 |             numbers.remove(&x);\n\
    \  |                            ^^ expected `usize`, found `&isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut seen = HashSet::new();\n    for\
    \ n in numbers {\n        if !seen.insert(n).unwrap() {\n            result.push(n);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpctnxncop.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.iter().filter(|&n| numbers.iter().filter(|&n2| n == n2) == Some(&n)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: binary operation `==` cannot be applied to type `Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpdjoaeen4.rs:6:54: 6:67]>`\n --> /tmp/tmpdjoaeen4.rs:6:69\n\
    \  |\n6 |     numbers.iter().filter(|&n| numbers.iter().filter(|&n2| n == n2)\
    \ == Some(&n)).collect()\n  |                                ------------------------------------\
    \ ^^ -------- Option<&&isize>\n  |                                |\n  |     \
    \                           Filter<std::slice::Iter<'_, isize>, [closure@/tmp/tmpdjoaeen4.rs:6:54:\
    \ 6:67]>\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from an\
    \ iterator over elements of type `&isize`\n    --> /tmp/tmpdjoaeen4.rs:6:82\n\
    \     |\n6    |     numbers.iter().filter(|&n| numbers.iter().filter(|&n2| n ==\
    \ n2) == Some(&n)).collect()\n     |                                         \
    \                                         ^^^^^^^ value of type `Vec<isize>` cannot\
    \ be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait\
    \ `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0369.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut duplicates: Vec<bool> = Vec::new();\n    numbers.dedup_into(duplicates);\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup_into` found for struct `Vec<isize>`\
    \ in the current scope\n --> /tmp/tmppn7hmc7h.rs:7:13\n  |\n7 |     numbers.dedup_into(duplicates);\n\
    \  |             ^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `dedup`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .iter()\n        .cloned()\n        .filter(|&x| numbers.iter().filter(|&y|\
    \ x == y).count() == 1).collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpslw7yufy.rs:9:54\n  |\n9 |\
    \         .filter(|&x| numbers.iter().filter(|&y| x == y).count() == 1).collect()\n\
    \  |                                                      ^ expected `isize`,\
    \ found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |     \
    \    .filter(|&x| numbers.iter().filter(|&y| x == *y).count() == 1).collect()\n\
    \  |                                                      +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.dedup().collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmp6la7t8ug.rs:6:21\n\
    \  |\n6 |     numbers.dedup().collect()\n  |                     ^^^^^^^ `()`\
    \ is not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `(): Iterator`\n          which is required by `&mut (): Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    numbers.dedup_by(|a, b| {\n     \
    \   if seen.contains(&a) {\n            a\n        } else {\n            seen.insert(a);\n\
    \            a\n        }\n    });\n    seen\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp6w0n0kdv.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp6w0n0kdv.rs:9:13\n  |\n9 |             a\n  |          \
    \   ^ expected `bool`, found `&mut isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6w0n0kdv.rs:12:13\n   |\n12 |             a\n   |             ^\
    \ expected `bool`, found `&mut isize`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n\n    numbers.dedup();\n\
    \    numbers.filter(|x| seen.insert(x));\n\n    numbers\n}\n\nfn main() {\n  \
    \  let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpz4nvh_4f.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpz4nvh_4f.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0599]: `Vec<isize>`\
    \ is not an iterator\n   --> /tmp/tmpz4nvh_4f.rs:9:13\n    |\n9   |       numbers.filter(|x|\
    \ seen.insert(x));\n    |               ^^^^^^ `Vec<isize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0412, E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .into_iter()\n        .filter(|&x| numbers.iter().count(|&y|\
    \ y == x))\n        .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpcz2rbtqn.rs:8:37\n    |\n8   |         .filter(|&x| numbers.iter().count(|&y|\
    \ y == x))\n    |                                     ^^^^^ ----------- supplied\
    \ 1 argument\n    |                                     |\n    |             \
    \                        expected 0 arguments\n    |\nnote: associated function\
    \ defined here\n\nerror[E0308]: mismatched types\n --> /tmp/tmpcz2rbtqn.rs:8:22\n\
    \  |\n8 |         .filter(|&x| numbers.iter().count(|&y| y == x))\n  |       \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `usize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.iter().fold(Vec::new(), |mut vec, n| {\n        if vec.contains(&n)\
    \ {\n            vec\n        } else {\n            vec.push(n)\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1mr7xwtv.rs:10:22\n   |\n\
    10 |             vec.push(n)\n   |                      ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |        \
    \     vec.push(*n)\n   |                      +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp1mr7xwtv.rs:10:13\n   |\n10 |             vec.push(n)\n   |   \
    \          ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\nnote: method `push` modifies\
    \ its receiver in-place\n  --> /tmp/tmp1mr7xwtv.rs:10:17\n   |\n10 |         \
    \    vec.push(n)\n   |             --- ^^^^ this call modifies `vec` in-place\n\
    \   |             |\n   |             you probably want to use this value after\
    \ calling the method...\n   = note: ...instead of the `()` output of method `push`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique = Vec::new();\n    let mut seen = HashSet::new();\n  \
    \  for (i, element) in numbers.iter().enumerate() {\n        if seen.contains(&element)\
    \ {\n            continue;\n        }\n        unique.push(element);\n       \
    \ seen.insert(element);\n    }\n    unique\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp2g3wr6s1.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2g3wr6s1.rs:15:5\n   |\n5  | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \    ---------- expected `Vec<isize>` because of return type\n...\n15 |     unique\n\
    \   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique: Vec<isize> = vec![];\n    for n in numbers {\n      \
    \  if !unique.contains(&n) {\n            unique.push(n);\n        }\n    }\n\
    \    unique\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpk4pxbai6.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut i = 0;\n    while i < numbers.len() {\n        if numbers.len()\
    \ > i && numbers[i] != numbers[i - 1] {\n            numbers.remove(i - 1);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    numbers\n}\n\nfn\
    \ main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `numbers` as mutable, as it is not declared\
    \ as mutable\n --> /tmp/tmps_d2q6yf.rs:9:13\n  |\n5 | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n  |                      ------- help: consider\
    \ changing this to be mutable: `mut numbers`\n...\n9 |             numbers.remove(i\
    \ - 1);\n  |             ^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n  \
    \  for num in numbers {\n        if !seen.contains(&num) {\n            result.push(num);\n\
    \            seen.insert(num);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpo_hj8xuq.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ret: Vec<isize> = Vec::new();\n    for number in numbers.iter()\
    \ {\n        if let Some(index) = get_index(ret, number) {\n            *ret.swap(index,\
    \ index + 1);\n        } else {\n            *ret.push(number);\n        }\n \
    \   }\n    ret\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_index` in this scope\n --> /tmp/tmp2d8s70ce.rs:8:30\n\
    \  |\n8 |         if let Some(index) = get_index(ret, number) {\n  |         \
    \                     ^^^^^^^^^ not found in this scope\n\nerror[E0614]: type\
    \ `()` cannot be dereferenced\n --> /tmp/tmp2d8s70ce.rs:9:13\n  |\n9 |       \
    \      *ret.swap(index, index + 1);\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2d8s70ce.rs:11:23\n   |\n11 |\
    \             *ret.push(number);\n   |                       ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n11 |  \
    \           *ret.push(*number);\n   |                       +\n\nerror[E0614]:\
    \ type `()` cannot be dereferenced\n  --> /tmp/tmp2d8s70ce.rs:11:13\n   |\n11\
    \ |             *ret.push(number);\n   |             ^^^^^^^^^^^^^^^^^\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425, E0614.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    if numbers.is_empty() {\n        return vec![];\n    }\n    let mut seen:\
    \ HashMap<isize, bool> = HashMap::new();\n    for i in numbers {\n        if !seen.contains_key(i)\
    \ {\n            seen.insert(i, true);\n        }\n    }\n    seen.into_iter().filter(|&(_,\
    \ v)| !v).collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp1c50kudy.rs:9:19\n\
    \  |\n9 |     let mut seen: HashMap<isize, bool> = HashMap::new();\n  |      \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp1c50kudy.rs:9:42\n\
    \  |\n9 |     let mut seen: HashMap<isize, bool> = HashMap::new();\n  |      \
    \                                    ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    numbers.iter().cloned().filter(|&num|\
    \ seen.insert(num).unwrap_or(false)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpmeuf6jbp.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpmeuf6jbp.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // use .iter() instead of .cloned() for more efficient iteration\n  \
    \  for n in numbers.iter().cloned() {\n        // ignore duplicate values\n  \
    \      if numbers.iter().any(|&x| x == n) {\n            continue;\n        }\n\
    \        numbers.push(n);\n    }\n    numbers\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `numbers` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmppkt_317j.rs:12:9\n   |\n5  | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                      ------- help: consider\
    \ changing this to be mutable: `mut numbers`\n...\n12 |         numbers.push(n);\n\
    \   |         ^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.dedup().collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmpfbnlw_9j.rs:6:21\n\
    \  |\n6 |     numbers.dedup().collect()\n  |                     ^^^^^^^ `()`\
    \ is not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `(): Iterator`\n          which is required by `&mut (): Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut set = HashSet::new();\n    for x in numbers {\n        if !set.add(x)\
    \ {\n            set.insert(x);\n        }\n    }\n    set.into_iter().map(|x|\
    \ x).collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpibzv3shw.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 1;\n    for\
    \ element in numbers {\n        if *number == i {\n            continue;\n   \
    \     }\n\n        result.push(element);\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `number` in this scope\n --> /tmp/tmpcttx3bxy.rs:9:13\n\
    \  |\n9 |         if *number == i {\n  |             ^^^^^^ help: a local variable\
    \ with a similar name exists: `numbers`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .iter()\n        .cloned()\n        .dedup()\n     \
    \   .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpisbrk56z.rs:9:10\n  |\n9 |         .dedup()\n  |\
    \          ^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .into_iter()\n        .filter_map(|number| {\n     \
    \       numbers.iter().position(|x| x == number).unwrap_or(0)\n        })\n  \
    \      .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n --> /tmp/tmprcczaft9.rs:9:43\n\
    \  |\n9 |             numbers.iter().position(|x| x == number).unwrap_or(0)\n\
    \  |                                           ^^ no implementation for `&isize\
    \ == isize`\n  |\n  = help: the trait `PartialEq<isize>` is not implemented for\
    \ `&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror[E0308]: mismatched types\n --> /tmp/tmprcczaft9.rs:9:13\n  |\n\
    9 |             numbers.iter().position(|x| x == number).unwrap_or(0)\n  |   \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<_>`\n        \
    \     found type `usize`\nhelp: try wrapping the expression in `Some`\n  |\n9\
    \ |             Some(numbers.iter().position(|x| x == number).unwrap_or(0))\n\
    \  |             +++++                                                     +\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .iter()\n        .dedup()\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmp4qt7gkfc.rs:8:10\n  |\n8 |         .dedup()\n\
    \  |          ^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.iter().filter(|x| numbers.iter().filter(|y| x == y).count() ==\
    \ 1).collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpjqcmpt0e.rs:6:79\n     |\n6\
    \    |     numbers.iter().filter(|x| numbers.iter().filter(|y| x == y).count()\
    \ == 1).collect()\n     |                                                    \
    \                           ^^^^^^^ value of type `Vec<isize>` cannot be built\
    \ from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    numbers.sort_unstable();\n\
    \    for number in numbers {\n        if seen.insert(number).is_none() {\n   \
    \         seen.insert(number);\n        }\n    }\n    seen.values()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpetcs6say.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpetcs6say.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // O(n^2) in worst case, unoptimized case\n    let mut new_numbers =\
    \ Vec::new();\n    for n in numbers {\n        if new_numbers.iter().filter(|&num|\
    \ *num == *n).count() == 1 {\n            continue;\n        }\n        new_numbers.push(*n);\n\
    \    }\n    new_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp3oxgkodn.rs:9:53\n\
    \  |\n9 |         if new_numbers.iter().filter(|&num| *num == *n).count() == 1\
    \ {\n  |                                                     ^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmp3oxgkodn.rs:12:26\n   |\n\
    12 |         new_numbers.push(*n);\n   |                          ^^\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashMap::new();\n\n    numbers.dedup();\n    for elem\
    \ in numbers.iter() {\n        if seen.contains_key(elem) {\n            seen.entry(elem).remove();\n\
    \        } else {\n            seen.insert(elem);\n        }\n    }\n    seen.drain().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpckd094qo.rs:6:20\n  |\n6 |     let mut seen = HashMap::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n  \
    \  for num in numbers {\n        if seen.contains(&num) {\n            continue;\n\
    \        }\n        seen.insert(num);\n        result.push(num);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp4zciibhi.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // Sort from smallest to greatest to avoid duplicate checks\n    numbers.sort_unstable();\n\
    \    // Remove all duplicates\n    numbers.dedup();\n    numbers\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `numbers` as mutable, as it is not declared\
    \ as mutable\n --> /tmp/tmpko75pbfm.rs:7:5\n  |\n5 | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n  |                      ------- help: consider\
    \ changing this to be mutable: `mut numbers`\n6 |     // Sort from smallest to\
    \ greatest to avoid duplicate checks\n7 |     numbers.sort_unstable();\n  |  \
    \   ^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow\
    \ `numbers` as mutable, as it is not declared as mutable\n --> /tmp/tmpko75pbfm.rs:9:5\n\
    \  |\n5 | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  |     \
    \                 ------- help: consider changing this to be mutable: `mut numbers`\n\
    ...\n9 |     numbers.dedup();\n  |     ^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = numbers;\n    for v in &mut result {\n        match\
    \ result.iter().skip(1).find(|&x| x == v) {\n            Some(_) => result.iter().skip(1).for_each(|x|\
    \ { *x }),\n            None => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphgc2o1xf.rs:9:61\n   |\n\
    8  | /         match result.iter().skip(1).find(|&x| x == v) {\n9  | |       \
    \      Some(_) => result.iter().skip(1).for_each(|x| { *x }),\n   | |        \
    \                                                     ^^ expected `()`, found\
    \ `isize`\n10 | |             None => (),\n11 | |         }\n   | |_________-\
    \ expected this to be `()`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = numbers;\n    for number in numbers {\n        if !result.contains(&number)\
    \ {\n            result.push(number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n --> /tmp/tmpwd1zwlr3.rs:7:19\n\
    \  |\n5 | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  |     \
    \                 ------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n6 |     let mut result = numbers;\n\
    \  |                      ------- value moved here\n7 |     for number in numbers\
    \ {\n  |                   ^^^^^^^ value used here after move\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n\n\
    \    for n in numbers.iter() {\n        if seen.insert(n).is_some() {\n      \
    \      result.push(n);\n        }\n    }\n\n    result\n}\n\nfn main() {\n   \
    \ let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpqb0fmiof.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqb0fmiof.rs:15:5\n   |\n5  | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \    ---------- expected `Vec<isize>` because of return type\n...\n15 |     result\n\
    \   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    numbers.dedup_by(|x| {\n        if\
    \ seen.insert(x).is_none() {\n            x\n        } else {\n            None\n\
    \        }\n    });\n    seen.into_iter().collect()\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpbpaj28gj.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0593]: closure\
    \ is expected to take 2 arguments, but it takes 1 argument\n --> /tmp/tmpbpaj28gj.rs:7:13\n\
    \  |\n7 |     numbers.dedup_by(|x| {\n  |             ^^^^^^^^ --- takes 1 argument\n\
    \  |             |\n  |             expected closure that takes 2 arguments\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0593.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers_set = HashSet::new();\n    for number in numbers {\n\
    \        if numbers_set.insert(number).is_some() {\n            *numbers_set.entry(number).or_insert(0)\n\
    \        } else {\n            *numbers_set.entry(number).and_modify(|x| *x +=\
    \ 1).or_insert(0)\n        }\n    }\n    numbers\n        .into_iter()\n     \
    \   .filter(|&number| *number != 0)\n        .collect()\n}\n\nfn main() {\n  \
    \  let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpauci2uos.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpauci2uos.rs:16:27\n   |\n\
    16 |         .filter(|&number| *number != 0)\n   |                           ^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0614.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers = Vec::new();\n    for number in numbers.iter() {\n \
    \       if numbers.iter().any(|x| x == number) {\n            numbers.remove(number);\n\
    \        }\n    }\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuu7p2gwc.rs:9:28\n  |\n9 |\
    \             numbers.remove(number);\n  |                            ^^^^^^ expected\
    \ `usize`, found reference\n  |\n  = note:   expected type `usize`\n         \
    \ found reference `&_`\nhelp: consider dereferencing the borrow\n  |\n9 |    \
    \         numbers.remove(*number);\n  |                            +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers_set = HashSet::new();\n    for num in numbers {\n   \
    \     if numbers_set.insert(num).is_ok() {\n            numbers_set.insert(num);\n\
    \        } else {\n            numbers_set.into_iter().filter(|&i| i == num).collect()\n\
    \        }\n    }\n    numbers_set.into_iter().collect()\n}\n\nfn main() {\n \
    \   let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmps7ik543r.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut duplicates: Vec<isize> = Vec::new();\n\n    for element in numbers.iter()\
    \ {\n        if duplicates.contains(&element) {\n            duplicates.push(element);\n\
    \        }\n    }\n\n    duplicates\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoq8o7f93.rs:10:29\n   |\n\
    10 |             duplicates.push(element);\n   |                             ^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n10 |             duplicates.push(*element);\n   |                     \
    \        +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut last = numbers[0];\n    let mut current = 1;\n    for x in numbers\
    \ {\n        if last != x {\n            current += 1;\n            last = x;\n\
    \        } else {\n            current += 1;\n        }\n    }\n    numbers.drain(..).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "warning: variable `current` is assigned to, but never used\n --> /tmp/tmpp5m866f3.rs:7:13\n\
    \  |\n7 |     let mut current = 1;\n  |             ^^^^^^^\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n  = note: consider using `_current` instead\n\nerror[E0596]:\
    \ cannot borrow `numbers` as mutable, as it is not declared as mutable\n  -->\
    \ /tmp/tmpp5m866f3.rs:16:5\n   |\n5  | fn remove_duplicates(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                      ------- help: consider changing this\
    \ to be mutable: `mut numbers`\n...\n16 |     numbers.drain(..).collect::<Vec<_>>()\n\
    \   |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0382]: borrow of\
    \ moved value: `numbers`\n   --> /tmp/tmpp5m866f3.rs:16:5\n    |\n5   | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n    |                      ------- move occurs\
    \ because `numbers` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n...\n8   |     for x in numbers {\n    |              ------- `numbers`\
    \ moved due to this implicit call to `.into_iter()`\n...\n16  |     numbers.drain(..).collect::<Vec<_>>()\n\
    \    |     ^^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `numbers`\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n8   |     for x in &numbers {\n    |           \
    \   +\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nSome errors\
    \ have detailed explanations: E0382, E0596.\nFor more information about an error,\
    \ try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    if numbers.is_empty() {\n        return numbers;\n    }\n\n    let mut\
    \ last = numbers[0];\n    let mut result = Vec::new();\n\n    for n in &numbers\
    \ {\n        if n == last {\n            continue;\n        }\n\n        result.push(n);\n\
    \        last = n;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate =\
    \ remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp0dqnqqlx.rs:14:14\n\
    \   |\n14 |         if n == last {\n   |              ^^ no implementation for\
    \ `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0dqnqqlx.rs:19:16\n\
    \   |\n10 |     let mut last = numbers[0];\n   |                    ----------\
    \ expected due to this value\n...\n19 |         last = n;\n   |              \
    \  ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n19 |         last = *n;\n   |                +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0dqnqqlx.rs:22:5\n   |\n5  | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \    ---------- expected `Vec<isize>` because of return type\n...\n22 |     result\n\
    \   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::<isize>::with_capacity(numbers.size());\n    let\
    \ mut seen = HashSet::new();\n    for num in numbers {\n        if seen.insert(num).is_none()\
    \ {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp7dq927qe.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0599]: no\
    \ method named `size` found for struct `Vec<isize>` in the current scope\n -->\
    \ /tmp/tmp7dq927qe.rs:6:58\n  |\n6 |     let mut result = Vec::<isize>::with_capacity(numbers.size());\n\
    \  |                                                          ^^^^ help: there\
    \ is an associated function with a similar name: `resize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    numbers.dedup().filter(|n|\
    \ seen.insert(n).is_some()).collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp9e5t3ffq.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp9e5t3ffq.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0599]: `()`\
    \ is not an iterator\n --> /tmp/tmp9e5t3ffq.rs:7:21\n  |\n7 |     numbers.dedup().filter(|n|\
    \ seen.insert(n).is_some()).collect()\n  |                     ^^^^^^ `()` is\
    \ not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `(): Iterator`\n          which is required by `&mut (): Iterator`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n  \
    \  for n in numbers {\n        if !seen.insert(n).unwrap() {\n            result.push(n);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp10wfh05l.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // Create a set of the numbers, which is an efficient data structure\
    \ for\n    // de-duplication\n    let mut numbers_set = HashSet::new();\n    for\
    \ number in numbers.iter() {\n        if !numbers_set.insert(number).is_ok() {\n\
    \            // This element has been seen before, remove it\n            numbers.remove(number);\n\
    \        }\n    }\n\n    // Now go through the list and add back any numbers that\
    \ were not\n    // duplicated\n    let mut numbers_iter = numbers.iter();\n  \
    \  let mut numbers_output: Vec<isize> = vec![];\n    while numbers_iter.next()\
    \ {\n        numbers_output.push(numbers_iter.current());\n    }\n    numbers_output\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp9d4hrm7y.rs:8:27\n  |\n8 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9d4hrm7y.rs:12:28\n   |\n12 |             numbers.remove(number);\n\
    \   |                            ^^^^^^ expected `usize`, found `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9d4hrm7y.rs:20:11\n   |\n20 |     while numbers_iter.next()\
    \ {\n   |           ^^^^^^^^^^^^^^^^^^^ expected `bool`, found enum `Option`\n\
    \   |\n   = note: expected type `bool`\n              found enum `Option<&isize>`\n\
    \nerror[E0599]: no method named `current` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp9d4hrm7y.rs:21:42\n   |\n21 |         numbers_output.push(numbers_iter.current());\n\
    \   |                                          ^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0433, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    if numbers.is_empty() {\n        return Vec::new();\n    }\n\n    let\
    \ mut seen: HashSet<_> = HashSet::new();\n    let mut numbers_copy = numbers.clone();\n\
    \n    numbers_copy.sort_unstable();\n    for i in numbers_copy.iter() {\n    \
    \    if seen.insert(*i).is_some() {\n            numbers_copy.retain(|&i| i !=\
    \ *i);\n        }\n    }\n\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpbhcbjmt0.rs:10:19\n\
    \   |\n10 |     let mut seen: HashSet<_> = HashSet::new();\n   |             \
    \      ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpbhcbjmt0.rs:10:32\n   |\n10\
    \ |     let mut seen: HashSet<_> = HashSet::new();\n   |                     \
    \           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n  --> /tmp/tmpbhcbjmt0.rs:16:43\n   |\n16 |\
    \             numbers_copy.retain(|&i| i != *i);\n   |                       \
    \                    ^^\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0412, E0433, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut seen = HashMap::new();\n  \
    \  for number in numbers {\n        if !seen.contains_key(number) {\n        \
    \    seen.insert(number, true);\n            result.push(number);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpklg58npd.rs:7:20\n  |\n7 |     let mut seen = HashMap::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    numbers.dedup_by(|a, b| {\n     \
    \   if seen.contains(&b) {\n            false\n        } else {\n            seen.insert(b);\n\
    \            a == b\n        }\n    });\n    seen.remove(0);\n    seen\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp3iu_d1af.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique = Vec::new();\n    for num in numbers {\n        unique.push(num);\n\
    \    }\n    unique.dedup();\n    unique\n}\n\nfn main() {\n    let candidate =\
    \ remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpwygvnhlj.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .iter()\n        .filter(|&x| numbers.iter().filter(|&y|\
    \ y != x).count() == 1)\n        .cloned()\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpqy89hp6o.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.dedup().collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmpe2xg2_e5.rs:6:21\n\
    \  |\n6 |     numbers.dedup().collect()\n  |                     ^^^^^^^ `()`\
    \ is not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `(): Iterator`\n          which is required by `&mut (): Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = numbers;\n    for n in numbers.iter() {\n        if\
    \ result.iter().all(|&n| *n == n) {\n            result.remove(n);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp7b18owo4.rs:8:35\n\
    \  |\n8 |         if result.iter().all(|&n| *n == n) {\n  |                  \
    \                 ^^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7b18owo4.rs:9:27\n\
    \  |\n9 |             result.remove(n);\n  |                           ^ expected\
    \ `usize`, found `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    numbers.cloned().filter_indices(|index|\
    \ *seen.add((numbers.get(index), index)))\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmplwgu_t0p.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmplwgu_t0p.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0599]: `Vec<isize>`\
    \ is not an iterator\n   --> /tmp/tmplwgu_t0p.rs:7:13\n    |\n7   |       numbers.cloned().filter_indices(|index|\
    \ *seen.add((numbers.get(index), index)))\n    |               ^^^^^^ `Vec<isize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0412, E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<usize> = HashSet::new();\n    numbers.dedup_by(|a,\
    \ b| {\n        if seen.contains(b) {\n            false\n        } else {\n \
    \           seen.insert(*b);\n            true\n        }\n    });\n    numbers.into_iter()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmptauk6dz1.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<usize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmptauk6dz1.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<usize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptauk6dz1.rs:15:5\n   |\n5  | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \    ---------- expected `Vec<isize>` because of return type\n...\n15 |     numbers.into_iter()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found struct `std::vec::IntoIter`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0412, E0433.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.dedup()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzwxqpx8k.rs:6:5\n  |\n5 |\
    \ fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  |             \
    \                                 ---------- expected `Vec<isize>` because of\
    \ return type\n6 |     numbers.dedup()\n  |     ^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |\n  = note: expected struct `Vec<isize>`\n          found\
    \ unit type `()`\nnote: method `dedup` modifies its receiver in-place\n --> /tmp/tmpzwxqpx8k.rs:6:13\n\
    \  |\n6 |     numbers.dedup()\n  |     ------- ^^^^^ this call modifies `numbers`\
    \ in-place\n  |     |\n  |     you probably want to use this value after calling\
    \ the method...\n  = note: ...instead of the `()` output of method `dedup`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers_set = HashSet::new();\n\n    for number in numbers {\n\
    \        if !numbers_set.insert(number).unwrap() {\n            numbers_set.insert(number);\n\
    \        }\n    }\n\n    numbers_set.into_iter().cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmplc6nx_lc.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut counter = Vec::with_capacity(numbers.len());\n    for number\
    \ in numbers {\n        if let Some(count) = counter.binary_search(number) {\n\
    \            counter[count] += 1;\n        } else {\n            counter.push(number);\n\
    \        }\n    }\n    counter.into_iter().filter_map(|&count| (*count) as usize\
    \ + 1).collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2jc9vmzi.rs:8:52\n  |\n8 |\
    \         if let Some(count) = counter.binary_search(number) {\n  |          \
    \                                          ^^^^^^\n  |                       \
    \                             |\n  |                                         \
    \           expected reference, found `isize`\n  |                           \
    \                         help: consider borrowing here: `&number`\n  |\n  = note:\
    \ expected reference `&_`\n                  found type `isize`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp2jc9vmzi.rs:8:16\n  |\n8 |         if let Some(count)\
    \ = counter.binary_search(number) {\n  |                ^^^^^^^^^^^   -----------------------------\
    \ this expression has type `Result<usize, usize>`\n  |                |\n  | \
    \               expected enum `Result`, found enum `Option`\n  |\n  = note: expected\
    \ enum `Result<usize, usize>`\n             found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2jc9vmzi.rs:14:37\n   |\n14 |     counter.into_iter().filter_map(|&count|\
    \ (*count) as usize + 1).collect()\n   |                                     ^------\n\
    \   |                                     ||\n   |                           \
    \          |expected due to this\n   |                                     expected\
    \ `isize`, found reference\n   |                                     help: did\
    \ you mean `count`: `&isize`\n   |\n   = note:   expected type `isize`\n     \
    \      found reference `&_`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    if numbers.is_empty() {\n        return numbers;\n    }\n    numbers.iter().dedup_by(|a,\
    \ b| a.cmp(&b)).collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup_by` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpjk8vum2u.rs:9:20\n  |\n9 |     numbers.iter().dedup_by(|a,\
    \ b| a.cmp(&b)).collect()\n  |                    ^^^^^^^^ method not found in\
    \ `std::slice::Iter<'_, isize>`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique_nums = Vec::new();\n    for num in numbers {\n       \
    \ if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n     \
    \   }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph2e2x68a.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.dedup()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprl7a8hpl.rs:6:5\n  |\n5 |\
    \ fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  |             \
    \                                 ---------- expected `Vec<isize>` because of\
    \ return type\n6 |     numbers.dedup()\n  |     ^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |\n  = note: expected struct `Vec<isize>`\n          found\
    \ unit type `()`\nnote: method `dedup` modifies its receiver in-place\n --> /tmp/tmprl7a8hpl.rs:6:13\n\
    \  |\n6 |     numbers.dedup()\n  |     ------- ^^^^^ this call modifies `numbers`\
    \ in-place\n  |     |\n  |     you probably want to use this value after calling\
    \ the method...\n  = note: ...instead of the `()` output of method `dedup`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashMap::new();\n    for i in numbers {\n        if seen.contains_key(i)\
    \ {\n            continue;\n        }\n        seen.insert(i, 1);\n    }\n   \
    \ let mut result = vec![];\n    for number in seen.keys() {\n        result.push(number);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpj_6izfbz.rs:6:20\n  |\n6 |     let mut seen = HashMap::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\n    let mut\
    \ i = 0;\n    let mut out = vec![];\n    while i < numbers.len() {\n        let\
    \ j = i + 1;\n        while j < numbers.len() {\n            if numbers[i] ==\
    \ numbers[j] {\n                j = numbers.len();\n            } else {\n   \
    \             break;\n            }\n        }\n        out.push(numbers[i]);\n\
    \        i = j;\n    }\n\n    out\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmp8ik7pjog.rs:16:17\n\
    \   |\n13 |         let j = i + 1;\n   |             -\n   |             |\n \
    \  |             first assignment to `j`\n   |             help: consider making\
    \ this binding mutable: `mut j`\n...\n16 |                 j = numbers.len();\n\
    \   |                 ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    numbers.dedup();\n    seen.retain(|&n|\
    \ n == n);\n    seen.into()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpvfsjf9ev.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.dedup_by(|a, b| a == b).collect()\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmpr_zkg23v.rs:6:37\n\
    \  |\n6 |     numbers.dedup_by(|a, b| a == b).collect()\n  |                 \
    \                    ^^^^^^^ `()` is not an iterator\n  |\n  = note: the following\
    \ trait bounds were not satisfied:\n          `(): Iterator`\n          which\
    \ is required by `&mut (): Iterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .iter()\n        .fold(Vec::new(), |mut acc, x| {\n\
    \            if let Some(i) = acc.iter().position(|x| *x == x) {\n           \
    \     acc.swap(i, acc.len() - 1);\n            }\n            acc + [x]\n    \
    \    })\n        .clone()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `[&isize; 1]` to `Vec<_>`\n  --> /tmp/tmpgqdepiv1.rs:12:17\n\
    \   |\n12 |             acc + [x]\n   |             --- ^ --- [&isize; 1]\n  \
    \ |             |\n   |             Vec<_>\n\nerror[E0277]: can't compare `isize`\
    \ with `&isize`\n --> /tmp/tmpgqdepiv1.rs:9:57\n  |\n9 |             if let Some(i)\
    \ = acc.iter().position(|x| *x == x) {\n  |                                  \
    \                       ^^ no implementation for `isize == &isize`\n  |\n  = help:\
    \ the trait `PartialEq<&isize>` is not implemented for `isize`\n  = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n            f32\n \
    \           f64\n            i128\n            i16\n            i32\n        \
    \    i64\n            i8\n            isize\n          and 6 others\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for i in numbers {\n        if !res.contains(&i)\
    \ {\n            match res.iter().position(|&x| x == i) {\n                Some(pos)\
    \ => res.insert(pos, i),\n                None => res.push(i),\n            }\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpm97e51di.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::with_capacity(numbers.len());\n    for number in numbers\
    \ {\n        res.push(*number);\n    }\n    let mut seen = HashSet::new();\n \
    \   for number in numbers {\n        if seen.insert(*number).is_some() {\n   \
    \         continue;\n        }\n        res.push(number);\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpc8zeiwax.rs:10:20\n   |\n10 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n --> /tmp/tmpc8zeiwax.rs:8:18\n  |\n8 |\
    \         res.push(*number);\n  |                  ^^^^^^^\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n  --> /tmp/tmpc8zeiwax.rs:12:24\n   |\n12 |\
    \         if seen.insert(*number).is_some() {\n   |                        ^^^^^^^\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0614.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.dedup_by(|a, b| a == b)\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9lv_32ar.rs:6:5\n  |\n5 |\
    \ fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  |             \
    \                                 ---------- expected `Vec<isize>` because of\
    \ return type\n6 |     numbers.dedup_by(|a, b| a == b)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \          found unit type `()`\nnote: method `dedup_by` modifies its receiver\
    \ in-place\n --> /tmp/tmp9lv_32ar.rs:6:13\n  |\n6 |     numbers.dedup_by(|a, b|\
    \ a == b)\n  |     ------- ^^^^^^^^ this call modifies `numbers` in-place\n  |\
    \     |\n  |     you probably want to use this value after calling the method...\n\
    \  = note: ...instead of the `()` output of method `dedup_by`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    for &num in numbers {\n        if\
    \ !seen.insert(num) {\n            numbers.remove(&num);\n        }\n    }\n \
    \   numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpusdza5_7.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpusdza5_7.rs:7:9\n  |\n7 |     for &num in numbers {\n  |\
    \         ^^^^    ------- this expression has type `Option<isize>`\n  |      \
    \   |\n  |         expected `isize`, found reference\n  |         help: you can\
    \ probably remove the explicit borrow: `num`\n  |\n  = note:   expected type `isize`\n\
    \          found reference `&_`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpusdza5_7.rs:9:28\n\
    \  |\n9 |             numbers.remove(&num);\n  |                            ^^^^\
    \ expected `usize`, found reference\n  |\n  = note:   expected type `usize`\n\
    \          found reference `&_`\nhelp: consider removing the borrow\n  |\n9 -\
    \             numbers.remove(&num);\n9 +             numbers.remove(num);\n  |\
    \ \n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    numbers\n        .iter()\n      \
    \  .filter(|number| seen.insert(number).is_none())\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp5kntcpm7.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0277]: a\
    \ value of type `Vec<isize>` cannot be built from an iterator over elements of\
    \ type `&isize`\n    --> /tmp/tmp5kntcpm7.rs:10:10\n     |\n10   |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: Vec<bool> = vec![false; numbers.len()];\n    \n    for\
    \ num in numbers.iter() {\n        if seen[num as usize] {\n            continue;\n\
    \        }\n        seen[num as usize] = true;\n        numbers.remove(num);\n\
    \    }\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_imrqnd7.rs:13:24\n   |\n\
    13 |         numbers.remove(num);\n   |                        ^^^ expected `usize`,\
    \ found `&isize`\n\nerror[E0606]: casting `&isize` as `usize` is invalid\n -->\
    \ /tmp/tmp_imrqnd7.rs:9:17\n  |\n9 |         if seen[num as usize] {\n  |    \
    \             ---^^^^^^^^^\n  |                 |\n  |                 cannot\
    \ cast `&isize` as `usize`\n  |                 help: dereference the expression:\
    \ `*num`\n\nerror[E0606]: casting `&isize` as `usize` is invalid\n  --> /tmp/tmp_imrqnd7.rs:12:14\n\
    \   |\n12 |         seen[num as usize] = true;\n   |              ---^^^^^^^^^\n\
    \   |              |\n   |              cannot cast `&isize` as `usize`\n   |\
    \              help: dereference the expression: `*num`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0606.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers_set = HashSet::new();\n    let mut numbers_len = numbers.len();\n\
    \    for number in numbers {\n        if !numbers_set.insert(number) {\n     \
    \       numbers_set.insert(number);\n            numbers_len -= 1;\n        }\n\
    \    }\n    if numbers_len != numbers.len() {\n        numbers_set.iter().copied().collect()\n\
    \    } else {\n        numbers\n    }\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpkccgg9jk.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers_clone = numbers.clone();\n    numbers_clone.sort();\n\
    \    let mut numbers_clone = numbers_clone.clone();\n    let mut duplicates: Vec<isize>\
    \ = Vec::new();\n    let mut duplicates_clone: Vec<isize> = duplicates.clone();\n\
    \    let mut index = 0;\n    while index < numbers_clone.len() {\n        if numbers_clone[index]\
    \ == numbers_clone[index + 1] {\n            duplicates_clone.push(numbers_clone[index]);\n\
    \            duplicates_clone.sort();\n            duplicates.append(numbers_clone[index\
    \ + 1], 1);\n            index += 2;\n        } else {\n            duplicates_clone.push(numbers_clone[index]);\n\
    \            duplicates_clone.sort();\n            duplicates.append(numbers_clone[index]);\n\
    \            index += 1;\n        }\n    }\n    duplicates_clone\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpfkj1njd9.rs:16:24\n     |\n16   |             duplicates.append(numbers_clone[index\
    \ + 1], 1);\n     |                        ^^^^^^ ------------------------  -\
    \ supplied 2 arguments\n     |                        |\n     |              \
    \          expected 1 argument\n     |\nnote: associated function defined here\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfkj1njd9.rs:21:31\n   |\n21 |\
    \             duplicates.append(numbers_clone[index]);\n   |                 \
    \              ^^^^^^^^^^^^^^^^^^^^ expected `&mut Vec<isize>`, found `isize`\n\
    \   |\n   = note: expected mutable reference `&mut Vec<isize>`\n             \
    \              found type `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut new_numbers = Vec::new();\n    for (number, count) in numbers.iter().partition(|&x|\
    \ x == x) {\n        if count > 1 {\n            new_numbers.push(number);\n \
    \       }\n    }\n    new_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: `(_, _)` is not an iterator\n --> /tmp/tmpy3gh8h3m.rs:7:28\n\
    \  |\n7 |     for (number, count) in numbers.iter().partition(|&x| x == x) {\n\
    \  |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(_, _)`\
    \ is not an iterator\n  |\n  = help: the trait `Iterator` is not implemented for\
    \ `(_, _)`\n  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `(_, _)`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.dedup()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1xx1hkkg.rs:6:5\n  |\n5 |\
    \ fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  |             \
    \                                 ---------- expected `Vec<isize>` because of\
    \ return type\n6 |     numbers.dedup()\n  |     ^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |\n  = note: expected struct `Vec<isize>`\n          found\
    \ unit type `()`\nnote: method `dedup` modifies its receiver in-place\n --> /tmp/tmp1xx1hkkg.rs:6:13\n\
    \  |\n6 |     numbers.dedup()\n  |     ------- ^^^^^ this call modifies `numbers`\
    \ in-place\n  |     |\n  |     you probably want to use this value after calling\
    \ the method...\n  = note: ...instead of the `()` output of method `dedup`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // The trick here is to build a HashSet of numbers so we can quickly\
    \ find duplicates\n    // then filter out the duplicates.\n    let number_set\
    \ = HashSet::new();\n    for n in numbers {\n        if number_set.contains(&n)\
    \ {\n            numbers.remove(n);\n        }\n        number_set.insert(n);\n\
    \    }\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpnzld8lya.rs:8:22\n  |\n8 |     let number_set = HashSet::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnzld8lya.rs:11:28\n   |\n11 |             numbers.remove(n);\n\
    \   |                            ^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |             numbers.remove(n.try_into().unwrap());\n   |   \
    \                          ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers = numbers.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut seen = HashSet::new();\n    numbers.retain(|x| {\n        if let Some(pos)\
    \ = seen.insert(x) {\n            Some(pos)\n        } else {\n            None\n\
    \        }\n    });\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp5e7x_ad9.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5e7x_ad9.rs:10:13\n   |\n10 |             Some(pos)\n \
    \  |             ^^^^^^^^^ expected `bool`, found enum `Option`\n   |\n   = note:\
    \ expected type `bool`\n              found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5e7x_ad9.rs:12:13\n   |\n12 |             None\n\
    \   |             ^^^^ expected `bool`, found enum `Option`\n   |\n   = note:\
    \ expected type `bool`\n              found enum `Option<_>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .iter()\n        .cloned()\n        .filter(|x| *x ==\
    \ x)\n        .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_gv6qzoh.rs:9:27\n  |\n9 |\
    \         .filter(|x| *x == x)\n  |                           ^ expected `isize`,\
    \ found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |     \
    \    .filter(|x| *x == *x)\n  |                           +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    if numbers.is_empty() {\n        return Vec::new();\n    }\n\n    let\
    \ mut seen: HashSet<isize> = HashSet::new();\n    let mut result = Vec::new();\n\
    \n    for n in numbers.iter().cloned() {\n        if seen.contains(&n) {\n   \
    \         continue;\n        }\n\n        result.push(n);\n        seen.insert(n);\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpsios6r0o.rs:10:19\n\
    \   |\n10 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpsios6r0o.rs:10:36\n\
    \   |\n10 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .into_iter()\n        .group_by()\n        .keys()\n\
    \        .filter_map(|k| k.len().filter(|&x| x == 1).collect::<Vec<_>>().into_iter())\n\
    \        .collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `group_by` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmpfm3qqk5s.rs:8:10\n  |\n8 |         .group_by()\n\
    \  |          ^^^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut duplicates = Vec::new();\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut current_number = numbers_iter.next();\n    while let Some(number)\
    \ = (numbers_iter.next(), current_number) {\n        if numbers.iter().any(|&number|\
    \ number == number) {\n            duplicates.push(number);\n            current_number\
    \ = number;\n        }\n    }\n    duplicates\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp08in0f_8.rs:9:15\n  |\n9 |\
    \     while let Some(number) = (numbers_iter.next(), current_number) {\n  |  \
    \             ^^^^^^^^^^^^   ------------------------------------- this expression\
    \ has type `(Option<&isize>, Option<&isize>)`\n  |               |\n  |      \
    \         expected tuple, found enum `Option`\n  |\n  = note: expected tuple `(Option<&isize>,\
    \ Option<&isize>)`\n              found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp08in0f_8.rs:15:5\n   |\n5  | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \    ---------- expected `Vec<isize>` because of return type\n...\n15 |     duplicates\n\
    \   |     ^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<Option<&isize>>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = Vec::new();\n    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n    for n in numbers.iter() {\n        if seen.insert(n)\
    \ {\n            result.push(n);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpvntca9s8.rs:7:19\n\
    \  |\n7 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpvntca9s8.rs:7:36\n  |\n7 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvntca9s8.rs:10:25\n   |\n10 |             result.push(n);\n\
    \   |                         ^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n10 |             result.push(*n);\n\
    \   |                         +\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for i in numbers.iter().cloned() {\n\
    \        if !result.contains(&i) {\n            result.push(i);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpzd89axej.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.dedup()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplkccut1z.rs:6:5\n  |\n5 |\
    \ fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  |             \
    \                                 ---------- expected `Vec<isize>` because of\
    \ return type\n6 |     numbers.dedup()\n  |     ^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n  |\n  = note: expected struct `Vec<isize>`\n          found\
    \ unit type `()`\nnote: method `dedup` modifies its receiver in-place\n --> /tmp/tmplkccut1z.rs:6:13\n\
    \  |\n6 |     numbers.dedup()\n  |     ------- ^^^^^ this call modifies `numbers`\
    \ in-place\n  |     |\n  |     you probably want to use this value after calling\
    \ the method...\n  = note: ...instead of the `()` output of method `dedup`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::with_capacity(numbers.len());\n    let mut i =\
    \ 0;\n    let mut j = 1;\n    while i <= numbers.len() - 1 {\n        let element\
    \ = numbers[i];\n        while j < numbers.len() && numbers[j] == element + 1\
    \ {\n            j += 1\n        }\n        if j < numbers.len() {\n         \
    \   result.push(numbers[i]);\n            i += 1;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp0_ghfv4l.rs:9:16\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.iter().cloned().filter(|&x| numbers.iter().any(|y| x != y))\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo86zgjve.rs:6:69\n  |\n6 |\
    \     numbers.iter().cloned().filter(|&x| numbers.iter().any(|y| x != y))\n  |\
    \                                                                     ^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    6 |     numbers.iter().cloned().filter(|&x| numbers.iter().any(|y| x != *y))\n\
    \  |                                                                     +\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpo86zgjve.rs:6:5\n  |\n5 | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n  |                                           \
    \   ---------- expected `Vec<isize>` because of return type\n6 |     numbers.iter().cloned().filter(|&x|\
    \ numbers.iter().any(|y| x != y))\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Filter`\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n             found struct `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpo86zgjve.rs:6:36: 6:71]>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    if numbers.is_empty() {\n        return numbers;\n    }\n    let mut\
    \ count = HashMap::new();\n    let mut result = Vec::with_capacity(numbers.len());\n\
    \n    for i in numbers {\n        count.entry(i).or_insert(0usize) = 1;\n    }\n\
    \n    for e in count.keys().iter() {\n        let count = count[e];\n        if\
    \ count > 1 {\n            result.push(e);\n            count.saturating_sub(1);\
    \ // Remove from count\n        }\n    }\n\n    result\n}\n\nfn main() {\n   \
    \ let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpvtk8fw91.rs:9:21\n  |\n9 |     let mut count = HashMap::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0070]: invalid\
    \ left-hand side of assignment\n  --> /tmp/tmpvtk8fw91.rs:13:42\n   |\n13 |  \
    \       count.entry(i).or_insert(0usize) = 1;\n   |         --------------------------------\
    \ ^\n   |         |\n   |         cannot assign to this expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0070, E0433.\n\
    For more information about an error, try `rustc --explain E0070`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\n    let mut\
    \ numbers_set = HashSet::new();\n    for number in numbers {\n        if !numbers_set.insert(number).unwrap()\
    \ {\n            numbers_set.remove(number);\n        }\n    }\n\n    let mut\
    \ number_list = Vec::new();\n    numbers_set.into_iter().for_each(|number| {\n\
    \        number_list.push(number);\n    });\n\n    number_list\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpz2l1__8p.rs:10:27\n   |\n10 |     let mut numbers_set = HashSet::new();\n\
    \   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut set = HashSet::new();\n    set.insert(numbers.iter().cloned().collect::<Vec<_>>());\n\
    \    let mut numbers_copy = numbers;\n    numbers_copy.truncate(numbers.iter().filter(|x|\
    \ !set.contains(&x).unwrap_or(false)).count());\n    numbers_copy\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpc79s5b09.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n  \
    \  numbers.iter().cloned().filter(|&x| {\n        if seen.insert(x).is_some()\
    \ {\n            result.push(x);\n        }\n        true\n    }).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpbflaxshk.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0271]: type\
    \ mismatch resolving `<std::slice::Iter<'_, isize> as Iterator>::Item == &&_`\n\
    \  --> /tmp/tmpbflaxshk.rs:13:8\n   |\n13 |     }).cloned().collect()\n   |  \
    \      ^^^^^^ expected reference, found `isize`\n   |\n   = note: expected reference\
    \ `&&_`\n              found reference `&isize`\n   = note: required because of\
    \ the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n   = note: 1 redundant requirement hidden\n   = note: required because\
    \ of the requirements on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpbflaxshk.rs:8:36: 13:6]>`\n\nerror[E0631]: type mismatch\
    \ in closure arguments\n  --> /tmp/tmpbflaxshk.rs:13:8\n   |\n8  |     numbers.iter().cloned().filter(|&x|\
    \ {\n   |                                    ---- found signature of `for<'r>\
    \ fn(&'r isize) -> _`\n...\n13 |     }).cloned().collect()\n   |        ^^^^^^\
    \ expected signature of `for<'r> fn(&'r &_) -> _`\n   |\n   = note: required because\
    \ of the requirements on the impl of `Iterator` for `Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpbflaxshk.rs:8:36: 13:6]>`\n\nerror[E0599]: the method\
    \ `collect` exists for struct `Cloned<Filter<Cloned<std::slice::Iter<'_, isize>>,\
    \ [closure@/tmp/tmpbflaxshk.rs:8:36: 13:6]>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmpbflaxshk.rs:13:17\n   |\n13 |        }).cloned().collect()\n  \
    \ |                    ^^^^^^^ method cannot be called on `Cloned<Filter<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpbflaxshk.rs:8:36: 13:6]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<Filter<Cloned<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpbflaxshk.rs:8:36:\
    \ 13:6]> as Iterator>::Item = &_`\n           whic"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    for n in numbers\
    \ {\n        if seen.insert(n).is_some() {\n            continue;\n        }\n\
    \n        seen.insert(n);\n        numbers.remove(n);\n    }\n\n    numbers\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3ung39no.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp3ung39no.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3ung39no.rs:13:24\n   |\n13 |         numbers.remove(n);\n\
    \   |                        ^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n13 |         numbers.remove(n.try_into().unwrap());\n   |       \
    \                  ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut i = 0;\n    while i < numbers.len() {\n        let first = numbers[i];\n\
    \        i += 1;\n        while i < numbers.len() {\n            if numbers[i]\
    \ == first {\n                numbers.remove(&i);\n            } else {\n    \
    \            i += 1;\n            }\n        }\n    }\n    numbers\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm1no1ohr.rs:12:32\n   |\n\
    12 |                 numbers.remove(&i);\n   |                               \
    \ ^^ expected `usize`, found `&usize`\n   |\nhelp: consider removing the borrow\n\
    \   |\n12 -                 numbers.remove(&i);\n12 +                 numbers.remove(i);\n\
    \   | \n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .iter()\n        .group_by(|x| x)\n        .filter_map(|x|\
    \ x.last)\n        .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `group_by` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmp_m1dwece.rs:8:10\n  |\n8 |         .group_by(|x|\
    \ x)\n  |          ^^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique_numbers = Vec::new();\n    for (i, number) in numbers.into_iter().enumerate()\
    \ {\n        if !unique_numbers.contains(&number) {\n            unique_numbers.push(number);\n\
    \        }\n    }\n    unique_numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmptsyo4it3.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    if numbers.is_empty() {\n        return numbers;\n    }\n    let mut\
    \ numbers_set = HashSet::new();\n    for number in numbers.iter() {\n        if\
    \ numbers_set.contains(&number) {\n            numbers_set.remove(&number);\n\
    \        }\n        numbers_set.insert(number);\n    }\n    numbers_set.iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp7d9uor19.rs:9:27\n  |\n9 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    numbers.dedup();\n\
    \    let mut result = Vec::with_capacity(numbers.len());\n    for n in numbers\
    \ {\n        if !seen.insert(n).unwrap_or(false) {\n            result.push(n);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp2sfc1xhn.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp2sfc1xhn.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers_set = numbers;\n    numbers_set.sort();\n    numbers_set.dedup();\n\
    \    numbers_set\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp_t_icox6.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    numbers.dedup().filter(|&x| seen.insert(x)).collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpy__4tkh0.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0599]: `()`\
    \ is not an iterator\n --> /tmp/tmpy__4tkh0.rs:7:21\n  |\n7 |     numbers.dedup().filter(|&x|\
    \ seen.insert(x)).collect()\n  |                     ^^^^^^ `()` is not an iterator\n\
    \  |\n  = note: the following trait bounds were not satisfied:\n          `():\
    \ Iterator`\n          which is required by `&mut (): Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut duplicates = Vec::new();\n    for n in numbers {\n        if\
    \ numbers.iter().any(|&b| b == n) {\n            duplicates.push(n);\n       \
    \ }\n    }\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmpviqjtoy_.rs:8:12\n\
    \    |\n5   | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n    |\
    \                      ------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n6   |     let mut duplicates = Vec::new();\n\
    7   |     for n in numbers {\n    |              ------- `numbers` moved due to\
    \ this implicit call to `.into_iter()`\n8   |         if numbers.iter().any(|&b|\
    \ b == n) {\n    |            ^^^^^^^^^^^^^^ value borrowed here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `numbers`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n7   |     for n in &numbers {\n    |           \
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.iter().dedup().collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpx6hjr6hy.rs:6:20\n  |\n6 |     numbers.iter().dedup().collect()\n\
    \  |                    ^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .iter()\n        .filter(|&x| numbers.iter().count(|&_|\
    \ x == x) == 1)\n        .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpfl40bxah.rs:8:37\n    |\n8   |         .filter(|&x| numbers.iter().count(|&_|\
    \ x == x) == 1)\n    |                                     ^^^^^ ----------- supplied\
    \ 1 argument\n    |                                     |\n    |             \
    \                        expected 0 arguments\n    |\nnote: associated function\
    \ defined here\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n    --> /tmp/tmpfl40bxah.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0061, E0277.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // Get indices that indicate a duplicate element.\n    let mut duplicates\
    \ = Vec::new();\n    for number in numbers {\n        // Get index of first occurrence\
    \ of number in numbers.\n        let index = numbers.iter().position(|&x| x ==\
    \ number).unwrap();\n\n        // Set number to be 0 if index == i\n        if\
    \ index == numbers.len() {\n            duplicates.push(0);\n        } else {\n\
    \            // If index != i, set number to be 1 and add it to duplicates.\n\
    \            duplicates.push(1);\n            duplicates.extend(&numbers[index..]);\n\
    \        }\n    }\n\n    // Filter out indices that are equal to 0.\n    duplicates.retain(|&x|\
    \ x == 0);\n\n    // Return duplicate elements as they should be in the same order\
    \ as they were in the input.\n    duplicates\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmpwbybr372.rs:10:21\n\
    \    |\n5   | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n    |\
    \                      ------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n...\n8   |     for number in numbers\
    \ {\n    |                   ------- `numbers` moved due to this implicit call\
    \ to `.into_iter()`\n9   |         // Get index of first occurrence of number\
    \ in numbers.\n10  |         let index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \    |                     ^^^^^^^^^^^^^^ value borrowed here after move\n   \
    \ |\nnote: this function takes ownership of the receiver `self`, which moves `numbers`\n\
    \    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n8   |     for number in &numbers {\n    |               \
    \    +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers_set = HashSet::new();\n    for number in numbers {\n\
    \        if !numbers_set.insert(number) {\n            numbers_set.insert(number);\n\
    \        }\n    }\n    numbers_set.iter().collect()\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpdljwb0qy.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = vec![false; numbers.len()];\n    numbers.dedup();\n  \
    \  for i in numbers.iter() {\n        if seen[i] {\n            continue;\n  \
    \      }\n        seen[i] = true;\n        numbers.retain(|&x| x == i);\n    }\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `&isize`\n --> /tmp/tmpvenczro5.rs:9:12\n\
    \  |\n9 |         if seen[i] {\n  |            ^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `&isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be indexed by `&isize`\n\
    \  --> /tmp/tmpvenczro5.rs:12:9\n   |\n12 |         seen[i] = true;\n   |    \
    \     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n \
    \  = help: the trait `SliceIndex<[bool]>` is not implemented for `&isize`\n  \
    \ = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<bool>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpvenczro5.rs:13:34\n   |\n13 |\
    \         numbers.retain(|&x| x == i);\n   |                                 \
    \ ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n13 |         numbers.retain(|&x| x == *i);\n   |                      \
    \            +\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.dedup_by()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpmylvt4el.rs:6:13\n     |\n6    |     numbers.dedup_by()\n   \
    \  |             ^^^^^^^^- supplied 0 arguments\n     |             |\n     |\
    \             expected 1 argument\n     |\nnote: associated function defined here\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpmylvt4el.rs:6:5\n  |\n5 | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n  |                                           \
    \   ---------- expected `Vec<isize>` because of return type\n6 |     numbers.dedup_by()\n\
    \  |     ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n          found unit type `()`\nnote: method `dedup_by`\
    \ modifies its receiver in-place\n --> /tmp/tmpmylvt4el.rs:6:13\n  |\n6 |    \
    \ numbers.dedup_by()\n  |     ------- ^^^^^^^^ this call modifies `numbers` in-place\n\
    \  |     |\n  |     you probably want to use this value after calling the method...\n\
    \  = note: ...instead of the `()` output of method `dedup_by`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut new_set = HashSet::<isize>::new();\n    for n in numbers {\n\
    \        if !new_set.insert(n) {\n            new_set.delete(n);\n        }\n\
    \    }\n\n    new_set.into_iter().collect::<Vec<_>>()\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpl4oe9ktn.rs:6:23\n  |\n6 |     let mut new_set = HashSet::<isize>::new();\n\
    \  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    for n in numbers {\n        if seen.insert(n).is_none()\
    \ {\n            seen.insert(n);\n            numbers.remove(n);\n        }\n\
    \    }\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpxc5uafei.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxc5uafei.rs:10:28\n   |\n10 |             numbers.remove(n);\n\
    \   |                            ^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n10 |             numbers.remove(n.try_into().unwrap());\n   |   \
    \                          ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut hashmap = HashMap::new();\n    numbers.sort_unstable();\n   \
    \ for number in numbers {\n        if !hashmap.contains_key(&number) {\n     \
    \       hashmap.insert(number, number);\n        }\n    }\n    numbers.iter().filter(|number|\
    \ !hashmap.contains_key(&number)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmppxv8ubnn.rs:6:23\n  |\n6 |     let mut hashmap = HashMap::new();\n \
    \ |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmppxv8ubnn.rs:13:68\n     |\n13   |     numbers.iter().filter(|number|\
    \ !hashmap.contains_key(&number)).collect()\n     |                          \
    \                                          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .iter()\n        .cloned()\n        .filter_map(|x|\
    \ numbers.iter().filter(|y| y != x).count())\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&&isize` with `isize`\n --> /tmp/tmpnu5rr2ch.rs:9:53\n\
    \  |\n9 |         .filter_map(|x| numbers.iter().filter(|y| y != x).count())\n\
    \  |                                                     ^^ no implementation\
    \ for `&&isize == isize`\n  |\n  = help: the trait `PartialEq<isize>` is not implemented\
    \ for `&&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror[E0308]: mismatched types\n --> /tmp/tmpnu5rr2ch.rs:9:25\n  |\n\
    9 |         .filter_map(|x| numbers.iter().filter(|y| y != x).count())\n  |  \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `usize`\n  |\n  = note: expected enum `Option<_>`\n        \
    \     found type `usize`\nhelp: try wrapping the expression in `Some`\n  |\n9\
    \ |         .filter_map(|x| Some(numbers.iter().filter(|y| y != x).count()))\n\
    \  |                         +++++                                         +\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    if numbers.is_empty() {\n        return vec![];\n    }\n    let mut seen\
    \ = HashSet::new();\n    for element in &numbers {\n        if seen.insert(element).is_some()\
    \ {\n            numbers.remove(element);\n        }\n    }\n    numbers\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp55hdtwpe.rs:9:20\n  |\n9 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp55hdtwpe.rs:12:28\n   |\n12 |             numbers.remove(element);\n\
    \   |                            ^^^^^^^ expected `usize`, found `&isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers_set = HashSet::new();\n    for n in numbers {\n     \
    \   if !numbers_set.insert(n).inserted {\n            numbers_set.delete(n);\n\
    \        }\n    }\n    numbers_set.values().cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpeqpullcq.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.dedup_by(|&n, _| n)\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp70kme3nw.rs:6:23\n  |\n6 |\
    \     numbers.dedup_by(|&n, _| n)\n  |                       ^--\n  |        \
    \               ||\n  |                       |expected due to this\n  |     \
    \                  types differ in mutability\n  |                       help:\
    \ did you mean `n`: `&&mut isize`\n  |\n  = note: expected mutable reference `&mut\
    \ isize`\n                     found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp70kme3nw.rs:6:5\n  |\n5 | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n  |                                           \
    \   ---------- expected `Vec<isize>` because of return type\n6 |     numbers.dedup_by(|&n,\
    \ _| n)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    note: method `dedup_by` modifies its receiver in-place\n --> /tmp/tmp70kme3nw.rs:6:13\n\
    \  |\n6 |     numbers.dedup_by(|&n, _| n)\n  |     ------- ^^^^^^^^ this call\
    \ modifies `numbers` in-place\n  |     |\n  |     you probably want to use this\
    \ value after calling the method...\n  = note: ...instead of the `()` output of\
    \ method `dedup_by`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers = numbers.clone();\n    numbers.sort_unstable();\n  \
    \  let mut result = Vec::new();\n    let mut seen = HashSet::new();\n\n    for\
    \ number in numbers {\n        if !seen.contains(number) {\n            seen.insert(number);\n\
    \            result.push(number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpra0zmzky.rs:9:20\n  |\n9 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.iter().cloned().dedup_by(|a, b| a == b).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup_by` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmptl9mkq7m.rs:6:29\n  |\n6 |     numbers.iter().cloned().dedup_by(|a,\
    \ b| a == b).collect()\n  |                             ^^^^^^^^ method not found\
    \ in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut output = Vec::new();\n    let mut seen = HashSet::new();\n\n\
    \    for n in numbers.iter() {\n        if seen.insert(n).is_err() {\n       \
    \     seen.insert(n);\n            continue;\n        }\n\n        output.push(n);\n\
    \    }\n\n    output\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp26l2nyfo.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp26l2nyfo.rs:18:5\n   |\n5  | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \    ---------- expected `Vec<isize>` because of return type\n...\n18 |     output\n\
    \   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n\n    for n in numbers {\n        if\
    \ seen.insert(n).is_none() {\n            seen.insert(n - 1);\n        }\n   \
    \ }\n\n    let mut result = vec![];\n\n    for n in numbers {\n        if seen.contains(&n)\
    \ {\n            result.push(n);\n        }\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpptjnqpox.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .iter()\n        .cloned()\n        .filter(|&x| numbers.iter().filter(|&y|\
    \ x != y).count() == 1)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyadgsqgi.rs:9:54\n  |\n9 |\
    \         .filter(|&x| numbers.iter().filter(|&y| x != y).count() == 1)\n  | \
    \                                                     ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |         .filter(|&x|\
    \ numbers.iter().filter(|&y| x != *y).count() == 1)\n  |                     \
    \                                 +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .iter()\n        .filter(|&x| numbers.iter().count(|&y|\
    \ *y != *x))\n        .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed for `&_`\n --> /tmp/tmp5e0kdj66.rs:8:44\n\
    \  |\n8 |         .filter(|&x| numbers.iter().count(|&y| *y != *x))\n  |     \
    \                                       ^^ consider giving this closure parameter\
    \ the explicit type `&_`, with the type parameters specified\n  |\n  = note: type\
    \ must be known at this point\n\nerror[E0061]: this function takes 0 arguments\
    \ but 1 argument was supplied\n   --> /tmp/tmp5e0kdj66.rs:8:37\n    |\n8   | \
    \        .filter(|&x| numbers.iter().count(|&y| *y != *x))\n    |            \
    \                         ^^^^^ ------------- supplied 1 argument\n    |     \
    \                                |\n    |                                    \
    \ expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp5e0kdj66.rs:8:22\n  |\n8 |         .filter(|&x|\
    \ numbers.iter().count(|&y| *y != *x))\n  |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp5e0kdj66.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0061, E0277, E0282, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers_set = HashSet::new();\n    for number in numbers {\n\
    \        if numbers_set.insert(number).is_some() {\n            numbers_set.delete(number);\n\
    \        }\n    }\n    numbers_set.into_iter().cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpmg9dvu41.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n\n\
    \    for n in numbers {\n        if seen.insert(n).is_some() {\n            result.push(n);\n\
    \        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpqe2tzm_n.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n  \
    \  for n in numbers {\n        if seen.insert(n).is_some() {\n            result.push(n);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp738mr128.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut set = numbers;\n    let mut result = vec![];\n    let mut counter\
    \ = vec![];\n\n    for n in set {\n        if counter.contains(&n) {\n       \
    \     // If we've seen this number before, remove it.\n            result.remove(n);\n\
    \        } else {\n            // Otherwise, add the number to the set.\n    \
    \        result.push(n);\n            counter.push(n);\n        }\n    }\n\n \
    \   result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpirxz7apf.rs:13:27\n   |\n\
    13 |             result.remove(n);\n   |                           ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |             result.remove(n.try_into().unwrap());\n\
    \   |                            ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    numbers.dedup().collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpt8yvauyd.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0599]: `()`\
    \ is not an iterator\n --> /tmp/tmpt8yvauyd.rs:7:21\n  |\n7 |     numbers.dedup().collect::<Vec<_>>()\n\
    \  |                     ^^^^^^^ `()` is not an iterator\n  |\n  = note: the following\
    \ trait bounds were not satisfied:\n          `(): Iterator`\n          which\
    \ is required by `&mut (): Iterator`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.iter().cloned().dedup_by(|&x, &y| x).collect()\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup_by` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpmihf62b1.rs:6:29\n  |\n6 |     numbers.iter().cloned().dedup_by(|&x,\
    \ &y| x).collect()\n  |                             ^^^^^^^^ method not found\
    \ in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut uniques = Vec::new();\n    for num in numbers {\n        if !uniques.contains(&num)\
    \ {\n            uniques.push(num);\n        }\n    }\n    uniques\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp5v3ie23m.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut set = HashSet::new();\n    for n in numbers {\n        set.insert(n);\n\
    \    }\n    set.into_iter().map(|n| n as isize).collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpcoyrl3go.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n  \
    \  for n in numbers.iter() {\n        if seen.insert(n).is_ok() {\n          \
    \  result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpgrbdz3hr.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgrbdz3hr.rs:13:5\n   |\n5  | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \    ---------- expected `Vec<isize>` because of return type\n...\n13 |     result\n\
    \   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers = numbers;\n    numbers.sort_unstable();\n    let mut\
    \ current_set = vec![];\n    for i in numbers {\n        if i not in current_set\
    \ {\n            current_set.append(i);\n        } else {\n            numbers.remove(i);\n\
    \        }\n    }\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `not`\n  --> /tmp/tmpdldwh1pl.rs:10:14\n   |\n\
    10 |         if i not in current_set {\n   |         --   ^^^ expected `{`\n \
    \  |         |\n   |         this `if` expression has a condition, but no block\n\
    \   |\nhelp: try placing this code inside a block\n   |\n10 |         if i { not\
    \ } in current_set {\n   |              +     +\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut new_numbers = Vec::new();\n    let mut seen_numbers = Vec::new();\n\
    \    for number in numbers {\n        if seen_numbers.iter().all(|&x| x == number)\
    \ {\n            continue;\n        }\n        seen_numbers.push(number);\n  \
    \      new_numbers.push(number);\n    }\n    new_numbers\n}\n\nfn main() {\n \
    \   let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp7yradi1j.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    for number in numbers\
    \ {\n        if seen.insert(number).is_none() {\n            number.to_owned()\n\
    \        } else {\n            continue;\n        }\n    }\n    numbers.iter().filter(|&n|\
    \ seen.insert(n).is_some()).collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp8isryu8r.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp8isryu8r.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8isryu8r.rs:9:13\n   |\n8  | /         if seen.insert(number).is_none()\
    \ {\n9  | |             number.to_owned()\n   | |             ^^^^^^^^^^^^^^^^^\
    \ expected `()`, found `isize`\n10 | |         } else {\n11 | |             continue;\n\
    12 | |         }\n   | |_________- expected this to be `()`\n   |\nhelp: consider\
    \ using a semicolon here\n   |\n9  |             number.to_owned();\n   |    \
    \                          +\nhelp: consider using a semicolon here\n   |\n12\
    \ |         };\n   |          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8isryu8r.rs:14:5\n\
    \   |\n5  | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   |  \
    \                                            ---------- expected `Vec<isize>`\
    \ because of return type\n...\n14 |     numbers.iter().filter(|&n| seen.insert(n).is_some()).collect::<Vec<_>>()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0412, E0433.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers[..numbers.iter().filter(|&n| numbers.iter().count(|&x| x == n)\
    \ > 1).cloned().collect()].clone()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpagfvba2i.rs:6:57\n    |\n6   |     numbers[..numbers.iter().filter(|&n|\
    \ numbers.iter().count(|&x| x == n) > 1).cloned().collect()].clone()\n    |  \
    \                                                       ^^^^^ ----------- supplied\
    \ 1 argument\n    |                                                         |\n\
    \    |                                                         expected 0 arguments\n\
    \    |\nnote: associated function defined here\n\nerror[E0277]: a value of type\
    \ `usize` cannot be built from an iterator over elements of type `isize`\n   \
    \ --> /tmp/tmpagfvba2i.rs:6:90\n     |\n6    |     numbers[..numbers.iter().filter(|&n|\
    \ numbers.iter().count(|&x| x == n) > 1).cloned().collect()].clone()\n     | \
    \                                                                            \
    \             ^^^^^^^ value of type `usize` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `usize`\n\
    note: required by a bound in `collect`\n\nerror[E0599]: no method named `clone`\
    \ found for slice `[isize]` in the current scope\n --> /tmp/tmpagfvba2i.rs:6:101\n\
    \  |\n6 |     numbers[..numbers.iter().filter(|&n| numbers.iter().count(|&x| x\
    \ == n) > 1).cloned().collect()].clone()\n  |                                \
    \                                                                     ^^^^^ method\
    \ not found in `[isize]`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    for n in numbers {\n        if seen.insert(n).is_some()\
    \ {\n            continue;\n        }\n        seen.insert(n);\n        numbers.push(n);\n\
    \    }\n    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpbbzt6ytr.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ret: Vec<isize> = numbers.clone();\n    let mut seen: HashSet<_>\
    \ = HashSet::new();\n\n    for num in numbers {\n        if seen.insert(num).is_some()\
    \ {\n            ret.remove(num);\n        }\n    }\n\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp4w85pw0t.rs:7:19\n\
    \  |\n7 |     let mut seen: HashSet<_> = HashSet::new();\n  |                \
    \   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp4w85pw0t.rs:7:32\n  |\n7 |  \
    \   let mut seen: HashSet<_> = HashSet::new();\n  |                          \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4w85pw0t.rs:11:24\n   |\n11 |             ret.remove(num);\n  \
    \ |                        ^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |             ret.remove(num.try_into().unwrap());\n   |     \
    \                      ++++++++++++++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0412, E0433.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::<isize>::with_capacity(numbers.len());\n    let\
    \ mut last_seen = Vec::<isize>::with_capacity(numbers.len());\n    let mut seen\
    \ = Vec::<isize>::with_capacity(numbers.len());\n    for (number, index) in numbers.iter().enumerate()\
    \ {\n        if number != last_seen[index] {\n            result.push(number);\n\
    \            seen.push(number);\n        } else {\n            last_seen[index]\
    \ = number;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpydg2rcyf.rs:10:22\n\
    \   |\n10 |         if number != last_seen[index] {\n   |                    \
    \  ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpydg2rcyf.rs:11:25\n   |\n11 |\
    \             result.push(number);\n   |                         ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |             result.push(number.try_into().unwrap());\n\
    \   |                               ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpydg2rcyf.rs:12:23\n   |\n12 |             seen.push(number);\n\
    \   |                       ^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |             seen.push(number.try_into().unwrap());\n   |   \
    \                          ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `&isize`\n  --> /tmp/tmpydg2rcyf.rs:14:13\n   |\n14 | \
    \            last_seen[index] = number;\n   |             ^^^^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\n    // Sort\
    \ the input first to get the order right.\n    let mut sorted = numbers.iter().cloned().sorted();\n\
    \n    // The first and last elements are duplicates of each other\n    let mut\
    \ first = sorted[0];\n    let mut last = sorted[0];\n\n    for i in 1..=sorted.len()\
    \ {\n        let current = sorted[i];\n\n        if current == last {\n      \
    \      sorted = sorted.into_iter().skip(i).collect();\n            continue;\n\
    \        }\n\n        // If the current element is the same as the previous one,\n\
    \        // we remove it and keep the same order. Otherwise we keep it.\n    \
    \    if current == first {\n            sorted = sorted.into_iter().skip(i).collect();\n\
    \        } else {\n            first = current;\n            last = current;\n\
    \        }\n    }\n\n    return sorted;\n}\n\nfn main() {\n    let candidate =\
    \ remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmp3tmvme1b.rs:11:46\n   |\n11 |     let mut sorted\
    \ = numbers.iter().cloned().sorted();\n   |                                  \
    \            ^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique: Vec<isize> = Vec::new();\n    for n in numbers {\n  \
    \      if unique.iter().any(|&x| x == n) {\n            continue;\n        }\n\
    \        unique.push(n);\n    }\n    unique\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp5_2z32nu.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n\n    numbers.dedup();\n\
    \n    numbers.iter().filter_map(|x| if seen.insert(x).is_some() { Some(x) else\
    \ None })\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword\
    \ `else`\n  --> /tmp/tmp20k1pdw2.rs:10:73\n   |\n10 |     numbers.iter().filter_map(|x|\
    \ if seen.insert(x).is_some() { Some(x) else None })\n   |                   \
    \                                                      ^^^^ expected one of `.`,\
    \ `;`, `?`, `}`, or an operator\n\nerror[E0412]: cannot find type `HashSet` in\
    \ this scope\n --> /tmp/tmp20k1pdw2.rs:6:19\n  |\n6 |     let mut seen: HashSet<isize>\
    \ = HashSet::new();\n  |                   ^^^^^^^ not found in this scope\n \
    \ |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp20k1pdw2.rs:6:36\n  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n\
    \  |                                    ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp20k1pdw2.rs:10:5\n   |\n\
    5  | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   |         \
    \                                     ---------- expected `Vec<isize>` because\
    \ of return type\n...\n10 |     numbers.iter().filter_map(|x| if seen.insert(x).is_some()\
    \ { Some(x) else None })\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `FilterMap`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `FilterMap<std::slice::Iter<'_, isize>,\
    \ [closure@/tmp/tmp20k1pdw2.rs:10:31: 10:84]>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0412, E0433.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::with_capacity(numbers.len());\n\n    for i in numbers.iter()\
    \ {\n        if !result.contains(&i) {\n            result.push(i);\n        }\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpge2lb02j.rs:14:5\n   |\n\
    5  | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   |         \
    \                                     ---------- expected `Vec<isize>` because\
    \ of return type\n...\n14 |     result\n   |     ^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique = Vec::new();\n    for number in numbers.clone() {\n \
    \       if !unique.contains(&number) {\n            unique.push(number);\n   \
    \     }\n    }\n    unique\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpwxxg1xj2.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.iter().fold(vec![], |mut acc| {\n        if acc.len() > 1 {\n\
    \            acc.dedup();\n        }\n        acc.push(0);\n        acc\n    })\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n\
    \ --> /tmp/tmpx5eivjjz.rs:6:20\n  |\n6 |     numbers.iter().fold(vec![], |mut\
    \ acc| {\n  |                    ^^^^         --------- takes 1 argument\n  |\
    \                    |\n  |                    expected closure that takes 2 arguments\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0593`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n  \
    \  for n in numbers {\n        if !seen.contains(&n) {\n            result.push(n);\n\
    \            seen.insert(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpm429ahk_.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers_set = std::collections::HashSet::new();\n    for n in\
    \ numbers {\n        if numbers_set.insert(n).is_some() {\n            numbers_set.remove(n);\n\
    \        }\n    }\n    numbers_set.into_iter().collect()\n}\n\nfn main() {\n \
    \   let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_some` found for type `bool` in the current\
    \ scope\n --> /tmp/tmp2xxor5bu.rs:8:34\n  |\n8 |         if numbers_set.insert(n).is_some()\
    \ {\n  |                                  ^^^^^^^ method not found in `bool`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp2xxor5bu.rs:9:32\n  |\n9 |    \
    \         numbers_set.remove(n);\n  |                                ^\n  |  \
    \                              |\n  |                                expected\
    \ `&isize`, found `isize`\n  |                                help: consider borrowing\
    \ here: `&n`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.iter().cloned().dedup().collect()\n}\n\nfn main() {\n    let\
    \ candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmpca7m0mwz.rs:6:29\n  |\n6 |     numbers.iter().cloned().dedup().collect()\n\
    \  |                             ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashMap::new();\n    numbers.dedup_by(|a, b| {\n     \
    \   let key = &a;\n        if seen.contains_key(key) {\n            seen[key].unwrap().0\n\
    \        } else {\n            seen.insert(key, (0.0, a));\n            a.0\n\
    \        }\n    });\n    seen.values().into_iter().map(|n| n.1).collect()\n}\n\
    \nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp3aj_sz3f.rs:6:20\n  |\n6 |     let mut seen = HashMap::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0609]: no\
    \ field `0` on type `&mut isize`\n  --> /tmp/tmp3aj_sz3f.rs:13:15\n   |\n13 |\
    \             a.0\n   |               ^\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0433, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashMap<isize, bool> = HashMap::new();\n    for num in\
    \ numbers {\n        if seen.contains_key(num) {\n            // already seen\n\
    \            continue;\n        }\n\n        // we haven't seen this number yet,\
    \ add it to our seen hashmap\n        seen.insert(num, true);\n    }\n\n    //\
    \ now go through our hashmap and collect all of the keys that are still marked\
    \ as seen\n    let mut seen_copy: Vec<_> = seen.iter().collect();\n    seen_copy.sort();\n\
    \    seen_copy.dedup();\n\n    // finally return a vector of all unique elements\
    \ left in our hashmap\n    seen_copy\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpqg6ja97p.rs:6:19\n\
    \  |\n6 |     let mut seen: HashMap<isize, bool> = HashMap::new();\n  |      \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpqg6ja97p.rs:6:42\n\
    \  |\n6 |     let mut seen: HashMap<isize, bool> = HashMap::new();\n  |      \
    \                                    ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.dedup_by(|a, b| a == b).cloned()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmpdjc81wn3.rs:6:37\n\
    \  |\n6 |     numbers.dedup_by(|a, b| a == b).cloned()\n  |                  \
    \                   ^^^^^^ `()` is not an iterator\n  |\n  = note: the following\
    \ trait bounds were not satisfied:\n          `(): Iterator`\n          which\
    \ is required by `&mut (): Iterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    numbers.dedup_by(|a, b| {\n     \
    \   if let Some(i) = seen.find(&b) {\n            a\n        } else {\n      \
    \      seen.insert(b)\n        }\n    });\n    seen.values().collect()\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmphqweyf5w.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmphqweyf5w.rs:9:13\n  |\n9 |             a\n  |          \
    \   ^ expected `bool`, found `&mut isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    numbers.dedup_by(|n| {\n        if\
    \ seen.contains(&n) {\n            true\n        } else {\n            seen.insert(n);\n\
    \            false\n        }\n    });\n    seen.into_iter().collect()\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmper04k96g.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0593]: closure\
    \ is expected to take 2 arguments, but it takes 1 argument\n --> /tmp/tmper04k96g.rs:7:13\n\
    \  |\n7 |     numbers.dedup_by(|n| {\n  |             ^^^^^^^^ --- takes 1 argument\n\
    \  |             |\n  |             expected closure that takes 2 arguments\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0593.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    numbers.dedup();\n\
    \    numbers.drain(..numbers.len());\n    seen.remove(&0);\n    numbers\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp5g7s_3y9.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp5g7s_3y9.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .iter()\n        .dedup()\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `dedup` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpuv6p_s6z.rs:8:10\n  |\n8 |         .dedup()\n\
    \  |          ^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers[numbers[numbers.size() - 1]..numbers.size() - 1].clone()\n}\n\
    \nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<isize>` in the\
    \ current scope\n --> /tmp/tmprcbyq904.rs:6:29\n  |\n6 |     numbers[numbers[numbers.size()\
    \ - 1]..numbers.size() - 1].clone()\n  |                             ^^^^ help:\
    \ there is an associated function with a similar name: `resize`\n\nerror[E0599]:\
    \ no method named `size` found for struct `Vec<isize>` in the current scope\n\
    \ --> /tmp/tmprcbyq904.rs:6:50\n  |\n6 |     numbers[numbers[numbers.size() -\
    \ 1]..numbers.size() - 1].clone()\n  |                                       \
    \           ^^^^ help: there is an associated function with a similar name: `resize`\n\
    \nerror[E0599]: no method named `clone` found for slice `[isize]` in the current\
    \ scope\n --> /tmp/tmprcbyq904.rs:6:62\n  |\n6 |     numbers[numbers[numbers.size()\
    \ - 1]..numbers.size() - 1].clone()\n  |                                     \
    \                         ^^^^^ method not found in `[isize]`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    let mut result = Vec::new();\n  \
    \  for number in numbers {\n        if seen.contains(&number) {\n            continue;\n\
    \        }\n        result.push(number);\n        seen.insert(number);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmph550it7i.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    numbers.dedup();\n\
    \    numbers\n        .iter()\n        .filter(|number| seen.insert(number))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpcgv2etqe.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpcgv2etqe.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0277]: a\
    \ value of type `Vec<isize>` cannot be built from an iterator over elements of\
    \ type `&isize`\n    --> /tmp/tmpcgv2etqe.rs:11:10\n     |\n11   |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut output = vec![];\n    let mut seen = HashSet::new();\n    for\
    \ number in numbers.iter() {\n        if seen.contains(number) {\n           \
    \ continue;\n        }\n        seen.insert(number);\n        output.push(number);\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpx88pqknw.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpx88pqknw.rs:15:5\n   |\n5  | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \    ---------- expected `Vec<isize>` because of return type\n...\n15 |     output\n\
    \   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut uniques = Vec::new();\n    let mut duplicates = Vec::new();\n\
    \    for i in 0..numbers.len() {\n        if numbers.iter().filter(|&x| x == i).count()\
    \ > 1 {\n            duplicates.push(i);\n        } else {\n            uniques.push(i);\n\
    \        }\n    }\n    let mut last = uniques.len();\n    for idx in 0..uniques.len()\
    \ {\n        uniques[idx] = last;\n        last--;\n    }\n    for idx in 0..duplicates.len()\
    \ {\n        uniques.push(duplicates[idx]);\n    }\n    uniques\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpms_77q9a.rs:18:15\n\
    \   |\n18 |         last--;\n   |               ^ expected expression\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpms_77q9a.rs:9:44\n  |\n9 |         if numbers.iter().filter(|&x|\
    \ x == i).count() > 1 {\n  |                                            ^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: can't compare `&isize` with `usize`\n\
    \ --> /tmp/tmpms_77q9a.rs:9:41\n  |\n9 |         if numbers.iter().filter(|&x|\
    \ x == i).count() > 1 {\n  |                                         ^^ no implementation\
    \ for `&isize == usize`\n  |\n  = help: the trait `PartialEq<usize>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpms_77q9a.rs:23:5\n \
    \  |\n5  | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   |   \
    \                                           ---------- expected `Vec<isize>` because\
    \ of return type\n...\n23 |     uniques\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<usize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut output = Vec::new();\n    let mut seen = HashSet::new();\n  \
    \  for n in numbers {\n        if seen.insert(n).is_none() {\n            output.push(n);\n\
    \        }\n    }\n    output\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpjb64z2xr.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<isize> = HashSet::new();\n    for n in numbers\
    \ {\n        if !seen.insert(n) {\n            seen.insert(n); // prevent duplicates\n\
    \        }\n    }\n    seen.into_iter().cloned().collect()\n}\n\nfn main() {\n\
    \    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpbxkqgmtd.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpbxkqgmtd.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique = Vec::new();\n    for num in numbers {\n        if unique.contains(&num)\
    \ {\n            continue;\n        }\n        unique.push(num);\n    }\n    unique\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpbpcb6aam.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n  \
    \  for (i, number) in numbers.iter().enumerate() {\n        if seen.contains(&number)\
    \ {\n            continue;\n        }\n        seen.insert(number);\n        result.push(number);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmplfrfe26x.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplfrfe26x.rs:15:5\n   |\n5  | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \    ---------- expected `Vec<isize>` because of return type\n...\n15 |     result\n\
    \   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    numbers.iter().cloned().filter(|x|\
    \ seen.insert(x).unwrap_or(false)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpnvmgjov6.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen = HashSet::new();\n    numbers.dedup_by().filter(|i| seen.insert(*i).unwrap_or(false));\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp7cnfnj7w.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0061]: this\
    \ function takes 1 argument but 0 arguments were supplied\n    --> /tmp/tmp7cnfnj7w.rs:7:13\n\
    \     |\n7    |     numbers.dedup_by().filter(|i| seen.insert(*i).unwrap_or(false));\n\
    \     |             ^^^^^^^^- supplied 0 arguments\n     |             |\n   \
    \  |             expected 1 argument\n     |\nnote: associated function defined\
    \ here\n\nerror[E0599]: `()` is not an iterator\n --> /tmp/tmp7cnfnj7w.rs:7:24\n\
    \  |\n7 |     numbers.dedup_by().filter(|i| seen.insert(*i).unwrap_or(false));\n\
    \  |                        ^^^^^^ `()` is not an iterator\n  |\n  = note: the\
    \ following trait bounds were not satisfied:\n          `(): Iterator`\n     \
    \     which is required by `&mut (): Iterator`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0433, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut duplicates: Vec<bool> = Vec::new();\n    numbers.iter().for_each(|n|\
    \ {\n        if !duplicates.contains(&n) {\n            duplicates.push(false);\n\
    \        }\n        numbers.remove(&n);\n    });\n    numbers\n}\n\nfn main()\
    \ {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpurdxi55d.rs:8:33\n  |\n8 |\
    \         if !duplicates.contains(&n) {\n  |                                 ^^\
    \ expected `bool`, found `&isize`\n  |\n  = note: expected reference `&bool`\n\
    \             found reference `&&isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpurdxi55d.rs:11:24\n   |\n11 |         numbers.remove(&n);\n   |    \
    \                    ^^ expected `usize`, found `&&isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut set = HashSet::new();\n    set.insert(numbers.clone());\n   \
    \ numbers.dedup();\n    let mut numbers_without_dup = Vec::with_capacity(numbers.len());\n\
    \    for number in numbers {\n        if !set.contains(&number) {\n          \
    \  numbers_without_dup.push(number);\n        }\n        set.insert(number);\n\
    \    }\n    numbers_without_dup\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpuhd771b_.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers = numbers.clone();\n    numbers.sort_unstable();\n  \
    \  let mut to_remove = Vec::new();\n    let mut current_value = numbers.first();\n\
    \    for value in numbers.iter() {\n        if value < *current_value {\n    \
    \        to_remove.push(value);\n        } else {\n            current_value =\
    \ value;\n        }\n    }\n    to_remove.sort_unstable();\n    to_remove.dedup();\n\
    \    to_remove.into_iter().collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `Option<&isize>` cannot be dereferenced\n  --> /tmp/tmpq5220nky.rs:11:20\n\
    \   |\n11 |         if value < *current_value {\n   |                    ^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpq5220nky.rs:14:29\n   |\n9  |\
    \     let mut current_value = numbers.first();\n   |                         \
    \    --------------- expected due to this value\n...\n14 |             current_value\
    \ = value;\n   |                             ^^^^^ expected enum `Option`, found\
    \ `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n           found\
    \ reference `&isize`\nhelp: try wrapping the expression in `Some`\n   |\n14 |\
    \             current_value = Some(value);\n   |                             +++++\
    \     +\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from an\
    \ iterator over elements of type `&isize`\n    --> /tmp/tmpq5220nky.rs:19:27\n\
    \     |\n19   |     to_remove.into_iter().collect()\n     |                  \
    \         ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .iter()\n        .filter(|&num| numbers.iter().count(|&num2|\
    \ num2 != num) == 1)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpf6yowini.rs:8:39\n    |\n8   |         .filter(|&num| numbers.iter().count(|&num2|\
    \ num2 != num) == 1)\n    |                                       ^^^^^ -------------------\
    \ supplied 1 argument\n    |                                       |\n    |  \
    \                                     expected 0 arguments\n    |\nnote: associated\
    \ function defined here\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpf6yowini.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0061, E0277.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers = numbers.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut counts = HashMap::new();\n    loop {\n        if let Some(next_one)\
    \ = numbers.iter().next_back() {\n            if counts.contains_key(&next_one)\
    \ {\n                numbers.remove(&next_one);\n            } else {\n      \
    \          counts.insert(next_one, 0);\n            }\n        } else {\n    \
    \        break;\n        }\n    }\n    numbers\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp_q4acys4.rs:7:22\n  |\n7 |     let mut counts = HashMap::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0271]: type\
    \ mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item == &_`\n \
    \   --> /tmp/tmp_q4acys4.rs:6:43\n     |\n6    |     let mut numbers = numbers.into_iter().cloned().collect::<Vec<_>>();\n\
    \     |                                           ^^^^^^ expected reference, found\
    \ `isize`\n     |\n     = note: expected reference `&_`\n                    \
    \ found type `isize`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the\
    \ method `collect` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but\
    \ its trait bounds were not satisfied\n  --> /tmp/tmp_q4acys4.rs:6:52\n   |\n\
    6  |       let mut numbers = numbers.into_iter().cloned().collect::<Vec<_>>();\n\
    \   |                                                      ^^^^^^^ method cannot\
    \ be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n      \
    \     which is required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0433, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut current_number = numbers.first();\n    let mut rest = numbers[1..].to_vec();\n\
    \    while current_number != 0 {\n        if rest.contains(&current_number) {\n\
    \            let idx = rest.iter().position(|x| x == current_number).unwrap();\n\
    \            rest.remove_idx(idx);\n        } else {\n            rest.insert(0,\
    \ current_number);\n        }\n        current_number -= 1;\n    }\n    rest\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5f2h0_vp.rs:8:29\n  |\n8 |\
    \     while current_number != 0 {\n  |                             ^ expected\
    \ enum `Option`, found integer\n  |\n  = note: expected enum `Option<&isize>`\n\
    \             found type `{integer}`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5f2h0_vp.rs:9:26\n\
    \  |\n9 |         if rest.contains(&current_number) {\n  |                   \
    \       ^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n  |\n  = note:\
    \ expected reference `&isize`\n             found reference `&Option<&isize>`\n\
    \nerror[E0277]: can't compare `&isize` with `Option<&isize>`\n  --> /tmp/tmp5f2h0_vp.rs:10:50\n\
    \   |\n10 |             let idx = rest.iter().position(|x| x == current_number).unwrap();\n\
    \   |                                                  ^^ no implementation for\
    \ `&isize == Option<&isize>`\n   |\n   = help: the trait `PartialEq<Option<&isize>>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0599]: no method named `remove_idx`\
    \ found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp5f2h0_vp.rs:11:18\n\
    \   |\n11 |             rest.remove_idx(idx);\n   |                  ^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `remove`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5f2h0_vp.rs:13:28\n   |\n13 |             rest.insert(0,\
    \ current_number);\n   |                            ^^^^^^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<&isize>`\n\nerror[E0368]: binary assignment operation `-=` cannot\
    \ be applied to type `Option<&isize>`\n  --> /tmp/tmp5f2h0_vp.rs:15:9\n   |\n\
    15 |         current_number -= 1;\n   |         --------------^^^^^\n   |    \
    \     |\n   |         cannot use `-=` on type `Option<&isize>`\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have detailed explanations: E0"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // The HashSet type has only unique elements.\n    let numbers_set =\
    \ std::collections::HashSet::from_iter(numbers);\n    let mut numbers = Vec::new();\n\
    \    for (index, number) in numbers_set.iter().enumerate() {\n        if index\
    \ > 0 {\n            if *number != numbers[index - 1] {\n                numbers.push(number);\n\
    \            }\n        }\n    }\n    numbers\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `from_iter` found for\
    \ struct `HashSet` in the current scope\n --> /tmp/tmpa1u64w22.rs:7:50\n  |\n\
    7 |     let numbers_set = std::collections::HashSet::from_iter(numbers);\n  |\
    \                                                  ^^^^^^^^^ function or associated\
    \ item not found in `HashSet<_, _>`\n  |\n  = help: items from traits can only\
    \ be used if the trait is in scope\nhelp: the following trait is implemented but\
    \ not in scope; perhaps add a `use` for it:\n  |\n1 | use std::iter::FromIterator;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    if numbers.is_empty() {\n        return numbers;\n    }\n    let mut\
    \ number = numbers.iter().cloned().collect::<Vec<isize>>();\n    let mut last_seen\
    \ = number.last_mut().unwrap();\n    let mut i = 0;\n    let mut last_seen = number.last();\n\
    \    while i < number.len() {\n        if numbers[i] != last_seen {\n        \
    \    last_seen = numbers[i];\n            i += 1;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    number\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphxly8ypr.rs:14:26\n   |\n\
    14 |         if numbers[i] != last_seen {\n   |                          ^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphxly8ypr.rs:15:25\n   |\n12 |     let mut last_seen = number.last();\n\
    \   |                         ------------- expected due to this value\n...\n\
    15 |             last_seen = numbers[i];\n   |                         ^^^^^^^^^^\
    \ expected enum `Option`, found `isize`\n   |\n   = note: expected enum `Option<&isize>`\n\
    \              found type `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut new_vec = Vec::new();\n    for &x in numbers {\n        if new_vec.contains(&x)\
    \ {\n            continue;\n        }\n        new_vec.push(x);\n    }\n    new_vec\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc4z10t34.rs:7:9\n  |\n7 |\
    \     for &x in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `x`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut seen: HashSet<_> = HashSet::new();\n\n    for n in numbers {\n\
    \        if seen.insert(n).is_none() {\n            seen.insert(n);\n        }\
    \ else {\n            numbers.remove(&n);\n        }\n    }\n    numbers\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpl0kcrbyp.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<_> = HashSet::new();\n  |                \
    \   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpl0kcrbyp.rs:6:32\n  |\n6 |  \
    \   let mut seen: HashSet<_> = HashSet::new();\n  |                          \
    \      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl0kcrbyp.rs:12:28\n   |\n12 |             numbers.remove(&n);\n\
    \   |                            ^^ expected `usize`, found `&isize`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0412, E0433.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers_set = HashSet::new();\n    let mut numbers_clone = numbers.clone();\n\
    \    for num in numbers_clone {\n        if !numbers_set.insert(num) {\n     \
    \       numbers_clone.remove(num);\n        }\n    }\n    numbers_clone\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp9asifsps.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9asifsps.rs:10:34\n   |\n10 |             numbers_clone.remove(num);\n\
    \   |                                  ^^^ expected `usize`, found `isize`\n \
    \  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n10 |             numbers_clone.remove(num.try_into().unwrap());\n\
    \   |                                     ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut current = HashMap::new();\n    for number in numbers.iter() {\n\
    \        *current.entry(number).or_insert(0) += 1;\n    }\n    \n    let mut result\
    \ = Vec::new();\n    for (number, count) in current.iter() {\n        if count\
    \ > 1 {\n            result.push(number);\n        }\n    }\n    \n    result\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp8f5wen4f.rs:6:23\n  |\n6 |     let mut current = HashMap::new();\n \
    \ |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.iter().filter(|&x| numbers.iter().filter(|&y| x == y).count()\
    \ == 1).cloned().collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut seen = HashSet::new();\n    for\
    \ number in numbers.iter() {\n        if seen.insert(number) {\n            result.push(number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmprh_xb75u.rs:7:20\n  |\n7 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprh_xb75u.rs:13:5\n   |\n5  | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \    ---------- expected `Vec<isize>` because of return type\n...\n13 |     result\n\
    \   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .into_iter()\n        .filter(|x| *numbers.iter().filter(|y|\
    \ *x == *y).count() == 1)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn1e6u7o_.rs:8:54\n  |\n8 |\
    \         .filter(|x| *numbers.iter().filter(|y| *x == *y).count() == 1)\n  |\
    \                                                      ^^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n8 |         .filter(|x|\
    \ *numbers.iter().filter(|y| *x == **y).count() == 1)\n  |                   \
    \                                   +\n\nerror[E0614]: type `usize` cannot be\
    \ dereferenced\n --> /tmp/tmpn1e6u7o_.rs:8:21\n  |\n8 |         .filter(|x| *numbers.iter().filter(|y|\
    \ *x == *y).count() == 1)\n  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    // Create a Set from the input.\n    let mut set_numbers = HashSet::from_iter(numbers);\n\
    \    // Now remove from input numbers that are contained in the set.\n    // We\
    \ copy the set because iterating a set mutates it.\n    for n in set_numbers.iter()\
    \ {\n        set_numbers.remove(n);\n    }\n    set_numbers.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpgbl16ir7.rs:7:27\n  |\n7 |     let mut set_numbers = HashSet::from_iter(numbers);\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique_numbers = Vec::with_capacity(numbers.size());\n    for\
    \ &num in numbers {\n        if !unique_numbers.contains(&num) {\n           \
    \ unique_numbers.insert(0, num);\n        }\n    }\n    unique_numbers\n}\n\n\
    fn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `size` found for struct `Vec<isize>` in the\
    \ current scope\n --> /tmp/tmp1o_70fr2.rs:6:57\n  |\n6 |     let mut unique_numbers\
    \ = Vec::with_capacity(numbers.size());\n  |                                 \
    \                        ^^^^ help: there is an associated function with a similar\
    \ name: `resize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1o_70fr2.rs:7:9\n\
    \  |\n7 |     for &num in numbers {\n  |         ^^^^    ------- this expression\
    \ has type `Option<isize>`\n  |         |\n  |         expected `isize`, found\
    \ reference\n  |         help: you can probably remove the explicit borrow: `num`\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers_set = HashSet::new();\n    numbers_set.insert::<isize>(1);\n\
    \    numbers_set.insert::<isize>(2);\n    numbers_set.insert::<isize>(3);\n  \
    \  numbers_set.insert::<isize>(2);\n    numbers_set.insert::<isize>(4);\n    numbers_set.insert::<isize>(1);\n\
    \    numbers_set.insert::<isize>(2);\n    numbers_set.insert::<isize>(4);\n  \
    \  numbers_set.insert::<isize>(4);\n    numbers_set.insert::<isize>(4);\n    numbers_set.insert::<isize>(5);\n\
    \n    numbers\n        .iter()\n        .filter(|n| numbers_set.contains(&n))\n\
    \        .cloned()\n        .collect()\n}\n\nfn main() {\n    let candidate =\
    \ remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpz3m36wcp.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for (index, number) in numbers.iter().enumerate()\
    \ {\n        if number != index {\n            result.push(number);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9u7qwsgw.rs:8:22\n  |\n8 |\
    \         if number != index {\n  |                      ^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: can't compare `&isize` with `usize`\n --> /tmp/tmp9u7qwsgw.rs:8:19\n\
    \  |\n8 |         if number != index {\n  |                   ^^ no implementation\
    \ for `&isize == usize`\n  |\n  = help: the trait `PartialEq<usize>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9u7qwsgw.rs:12:5\n \
    \  |\n5  | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   |   \
    \                                           ---------- expected `Vec<isize>` because\
    \ of return type\n...\n12 |     result\n   |     ^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<&isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut numbers_set = HashSet::new();\n    numbers.dedup_by(|&x| numbers_set.insert(x));\n\
    \    numbers_set.into_iter().map(|x| x as isize)\n}\n\nfn main() {\n    let candidate\
    \ = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp40okhki1.rs:6:27\n  |\n6 |     let mut numbers_set = HashSet::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0593]:\
    \ closure is expected to take 2 arguments, but it takes 1 argument\n --> /tmp/tmp40okhki1.rs:7:13\n\
    \  |\n7 |     numbers.dedup_by(|&x| numbers_set.insert(x));\n  |             ^^^^^^^^\
    \ ---- takes 1 argument\n  |             |\n  |             expected closure that\
    \ takes 2 arguments\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0433, E0593.\nFor more information about an error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique_numbers = Vec::new();\n    for number in numbers {\n \
    \       if unique_numbers.iter().any(|&x| *x == number) {\n            continue;\n\
    \        }\n        unique_numbers.push(number);\n    }\n    unique_numbers\n\
    }\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed for `&T`\n --> /tmp/tmpwn2zcax0.rs:8:39\n\
    \  |\n8 |         if unique_numbers.iter().any(|&x| *x == number) {\n  |     \
    \                                  ^^ consider giving this closure parameter the\
    \ explicit type `&T`, with the type parameters specified\n  |\n  = note: type\
    \ must be known at this point\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers.dedup();\n    numbers\n}\n\nfn main() {\n    let candidate =\
    \ remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `numbers` as mutable, as it is not declared\
    \ as mutable\n --> /tmp/tmpi4a011bz.rs:6:5\n  |\n5 | fn remove_duplicates(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n  |                      ------- help: consider\
    \ changing this to be mutable: `mut numbers`\n6 |     numbers.dedup();\n  |  \
    \   ^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for number in numbers {\n        if\
    \ !result.contains(&number) {\n            result.push(number);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp_qj_gou0.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize>\
    \ {\n    numbers\n        .into_iter()\n        .filter_map(|number| {\n     \
    \       if numbers.iter().any(|n| *n == number) {\n                None\n    \
    \        } else {\n                Some(number)\n            }\n        })\n \
    \       .collect()\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4,\
    \ 3, 5]), vec![1, 4, 5]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmpjuxqeetz.rs:8:21\n\
    \    |\n5   | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n    |\
    \                      ------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n6   |     numbers\n7   |        \
    \ .into_iter()\n    |          ----------- `numbers` moved due to this method\
    \ call\n8   |         .filter_map(|number| {\n    |                     ^^^^^^^^\
    \ value borrowed here after move\n9   |             if numbers.iter().any(|n|\
    \ *n == number) {\n    |                ------- borrow occurs due to use in closure\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `numbers`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
