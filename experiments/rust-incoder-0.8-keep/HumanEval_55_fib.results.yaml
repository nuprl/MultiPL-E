name: HumanEval_55_fib
language: rust
results:
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    fib(n-1).add(fib(n-2))\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `add` found for type `isize` in the current\
    \ scope\n   --> /tmp/tmp0mxonzzy.rs:15:14\n    |\n15  |     fib(n-1).add(fib(n-2))\n\
    \    |              ^^^ method not found in `isize`\n    |\n    = help: items\
    \ from traits can only be used if the trait is in scope\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n    |\n1   | use\
    \ std::ops::Add;\n    |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 0;\n\
    \    let mut b = 1;\n    while n > 0 {\n        n -= 1;\n        a += b;\n   \
    \     b = a;\n    }\n    a\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpg3f_0r9s.rs:12:9\n\
    \   |\n8  | fn fib(n: isize) -> isize {\n   |        - help: consider making this\
    \ binding mutable: `mut n`\n...\n12 |         n -= 1;\n   |         ^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut n1 = 0,\
    \ n2 = 1, next_n = (n1 + n2) as isize;\n    while next_n <= n {\n        (&mut\
    \ n1, &mut n2) = (n2, n1 + n2);\n        next_n = (n1 + n2) as isize;\n    }\n\
    \    return n2;\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmpcyaj0ca3.rs:9:19\n  |\n9 |     let mut n1 = 0, n2 = 1, next_n =\
    \ (n1 + n2) as isize;\n  |                   ^ expected one of `.`, `;`, `?`,\
    \ `else`, or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut f = 0;\n\
    \    let mut a = 0;\n    let mut b = 1;\n    for _ in 0..n {\n        let c =\
    \ a + b;\n        a = b;\n        b = c;\n    }\n    b\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmpvdsr2le0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 1;\n\
    \    let mut b = 1;\n    for _ in 0..n {\n        (a, b) = (b, a + b);\n    }\n\
    \    b\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `55`', /tmp/tmpbbamm07z.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    use std::mem::size_of;\n\
    \n    if n < 2 { return n }\n    fib(n + 1) if n % 2 == 0 { fib(n - 1) }\n   \
    \ fib(n + 2) if n % 2 == 1 { fib(n - 2) }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword\
    \ `if`\n  --> /tmp/tmp73emgy01.rs:12:16\n   |\n12 |     fib(n + 1) if n % 2 ==\
    \ 0 { fib(n - 1) }\n   |                ^^ expected one of `.`, `;`, `?`, `}`,\
    \ or an operator\n\nwarning: unused import: `std::mem::size_of`\n --> /tmp/tmp73emgy01.rs:9:9\n\
    \  |\n9 |     use std::mem::size_of;\n  |         ^^^^^^^^^^^^^^^^^\n  |\n  =\
    \ note: `#[warn(unused_imports)]` on by default\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fn rec(acc: isize,\
    \ n: isize) -> isize {\n        if n == 0 {\n            acc\n        } else {\n\
    \            rec(acc + fib(n - 1), n - 2)\n        }\n    }\n    rec(0, n)\n}\n\
    \nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 { return\
    \ 1 }\n    if n == 1 { return 0 }\n    fib(n-1) + fib(n-2)\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `34`,\n right: `55`', /tmp/tmp8s44g3gz.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut cache:\
    \ Vec<isize> = vec![0; 2];\n    cache[1] = cache[0] = 0;\n    for i in 1..n {\n\
    \        let sum = cache[2*i] + cache[2*i+1];\n        cache[i] = sum;\n    }\n\
    \    cache[n]\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfqhpxu45.rs:10:16\n   |\n\
    10 |     cache[1] = cache[0] = 0;\n   |     --------   ^^^^^^^^^^^^ expected `isize`,\
    \ found `()`\n   |     |\n   |     expected due to the type of this binding\n\n\
    error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfqhpxu45.rs:12:19\n\
    \   |\n12 |         let sum = cache[2*i] + cache[2*i+1];\n   |               \
    \    ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfqhpxu45.rs:12:32\n\
    \   |\n12 |         let sum = cache[2*i] + cache[2*i+1];\n   |               \
    \                 ^^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpfqhpxu45.rs:13:9\n   |\n13 |         cache[i] = sum;\n   |    \
    \     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfqhpxu45.rs:15:5\n\
    \   |\n15 |     cache[n]\n   |     ^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    use std::mem;\n\
    \n    let mut a = 0;\n    let mut b = 1;\n\n    while n != 0 {\n        let c\
    \ = mem::replace(&mut a, b);\n        b = mem::replace(&mut b, a + b);\n     \
    \   a = mem::replace(&mut a, c);\n        n -= 1;\n    }\n\n    a\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0503]: cannot use `b` because it was mutably borrowed\n  --> /tmp/tmphz6kfxhe.rs:16:38\n\
    \   |\n16 |         b = mem::replace(&mut b, a + b);\n   |             ------------\
    \ ------      ^ use of borrowed `b`\n   |             |            |\n   |   \
    \          |            borrow of `b` occurs here\n   |             borrow later\
    \ used by call\n\nerror[E0384]: cannot assign to immutable argument `n`\n  -->\
    \ /tmp/tmphz6kfxhe.rs:18:9\n   |\n8  | fn fib(n: isize) -> isize {\n   |     \
    \   - help: consider making this binding mutable: `mut n`\n...\n18 |         n\
    \ -= 1;\n   |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0384, E0503.\n\
    For more information about an error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return 1;\n    }\n\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmpcpophimf.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n\n    fib(n + 1) + fib(n + 2)\n}\n\nfn main() {\n  \
    \  let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n\n    return fib(n-1) + fib(n-2);\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    // Base case.\n\
    \    if n < 2 {\n        return n;\n    }\n    // Recursive case.\n    fib_rec(n\
    \ - 1, n - 2);\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib_rec` in this scope\n  --> /tmp/tmp6ng93tiv.rs:14:5\n\
    \   |\n14 |     fib_rec(n - 1, n - 2);\n   |     ^^^^^^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp6ng93tiv.rs:8:21\n  |\n8 | fn fib(n:\
    \ isize) -> isize {\n  |    ---              ^^^^^ expected `isize`, found `()`\n\
    \  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2)\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n\n    let mut a = 1usize;\n    let mut b = 2usize;\n\
    \    for i in 0..n - 1 {\n        let tmp_a = a;\n        let tmp_b = b;\n   \
    \     a = b;\n        b = tmp_a + tmp_b;\n    }\n\n    a\n}\n\nfn main() {\n \
    \   let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0jr2zwnw.rs:22:5\n   |\n\
    8  | fn fib(n: isize) -> isize {\n   |                     ----- expected `isize`\
    \ because of return type\n...\n22 |     a\n   |     ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n22 |     a.try_into().unwrap()\n   |    \
    \  ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return n;\n    }\n\n    fib(n + 1)\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n    fib(n + 1)\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 { return\
    \ n }\n    fib(n-1) + fib(n-2)\n}\n\nfn main() {\n    let candidate = fib;\n \
    \   assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmp_4xxpyq3.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let a = 1;\n \
    \   let b = 1;\n    while n > 2 {\n        let t = a;\n        a = b;\n      \
    \  b = t + a;\n        n -= 1;\n    }\n    return a;\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `a`\n  --> /tmp/tmprzsvw1jc.rs:13:9\n\
    \   |\n9  |     let a = 1;\n   |         -\n   |         |\n   |         first\
    \ assignment to `a`\n   |         help: consider making this binding mutable:\
    \ `mut a`\n...\n13 |         a = b;\n   |         ^^^^^ cannot assign twice to\
    \ immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable\
    \ `b`\n  --> /tmp/tmprzsvw1jc.rs:14:9\n   |\n10 |     let b = 1;\n   |       \
    \  -\n   |         |\n   |         first assignment to `b`\n   |         help:\
    \ consider making this binding mutable: `mut b`\n...\n14 |         b = t + a;\n\
    \   |         ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]:\
    \ cannot assign to immutable argument `n`\n  --> /tmp/tmprzsvw1jc.rs:15:9\n  \
    \ |\n8  | fn fib(n: isize) -> isize {\n   |        - help: consider making this\
    \ binding mutable: `mut n`\n...\n15 |         n -= 1;\n   |         ^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 0 {\n\
    \        0\n    } else {\n        fib(n - 2) + fib(n - 1)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `55`', /tmp/tmpfmumgyg8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fn fib_i(i: usize)\
    \ -> isize {\n        if i <= 1 {\n            i\n        } else {\n         \
    \   fib_i(i-1) + fib_i(i-2)\n        }\n    }\n\n    match n {\n        0 => 1,\n\
    \        1 => 1,\n        _ => fib_i(n),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcduu6qks.rs:20:20\n   |\n\
    20 |         _ => fib_i(n),\n   |                    ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |         _ => fib_i(n.try_into().unwrap()),\n\
    \   |                     ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcduu6qks.rs:11:13\n   |\n9  |     fn fib_i(i: usize) -> isize {\n\
    \   |                           ----- expected `isize` because of return type\n\
    10 |         if i <= 1 {\n11 |             i\n   |             ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n11 |             i.try_into().unwrap()\n\
    \   |              ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    // use std::mem::swap;\n\
    \    // use std::cmp::PartialOrd;\n    let mut mem = Vec::new();\n    if n <=\
    \ 0 {\n        mem[0] = 0;\n        mem[1] = 1;\n        return 1;\n    }\n  \
    \  if n == 2 {\n        mem[0] = 2;\n        mem[1] = 1;\n        return 2;\n\
    \    }\n    for _ in 1..n {\n        mem.push(0);\n        mem.push(1);\n    }\n\
    \    mem.swap(1);\n    if n == 2 {\n        mem[0] = 2;\n        mem[1] = 1;\n\
    \        return 2;\n    }\n    for ii in 2..n {\n        mem[ii] += mem[ii-1];\n\
    \    }\n    mem[0] += mem[1];\n    mem[1] += mem[0];\n    return mem[1];\n}\n\n\
    fn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n  \
    \  assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpdn3jion3.rs:26:9\n    |\n26  |     mem.swap(1);\n    |       \
    \  ^^^^ - supplied 1 argument\n    |         |\n    |         expected 2 arguments\n\
    \    |\nnote: associated function defined here\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpdn3jion3.rs:33:9\n   |\n33 |   \
    \      mem[ii] += mem[ii-1];\n   |         ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpdn3jion3.rs:33:20\n   |\n33 |  \
    \       mem[ii] += mem[ii-1];\n   |                    ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0277.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        1\n    } else {\n        fib(n-1) + fib(n-2)\n    }\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmpdx8vt854.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    use std::mem;\n\
    \    if n < 2 {\n        return n;\n    }\n\n    let mut prev: isize = 0;\n  \
    \  let mut curr = 1;\n    for _ in 0..n {\n        curr = curr + prev;\n     \
    \   prev = curr - prev;\n    }\n    mem::forget(prev);\n\n    curr\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmpw194jhev.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 0 {\n \
    \       panic!(\"Invalid fib{}\", n);\n    }\n    if n == 2 || n == 0 {\n    \
    \    return n;\n    }\n    fib_rec(n - 1, n - 2)\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib_rec` in this scope\n  --> /tmp/tmpudpbe2df.rs:15:5\n\
    \   |\n15 |     fib_rec(n - 1, n - 2)\n   |     ^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut current\
    \ = 1;\n    let mut previous = 0;\n    while n > 1 {\n        current += previous;\n\
    \        previous = current;\n        n -= 1;\n    }\n    current\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpy4qzi9by.rs:14:9\n\
    \   |\n8  | fn fib(n: isize) -> isize {\n   |        - help: consider making this\
    \ binding mutable: `mut n`\n...\n14 |         n -= 1;\n   |         ^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return 1;\n    }\n\n    let mut result = fib(n - 2) + fib(n - 1);\n  \
    \  result\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmph4ue6dse.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fib::memoize_inner\
    \ {\n        let mut fib: isize = 0;\n        let mut a: isize = 0;\n        for\
    \ _ in 0..n {\n            fib += a;\n            a = fib;\n        }\n      \
    \  fib\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found keyword `let`\n  --> /tmp/tmp4ck25h03.rs:10:9\n\
    \   |\n9  |     fib::memoize_inner {\n   |     ------------------ while parsing\
    \ this struct\n10 |         let mut fib: isize = 0;\n   |         ^^^ expected\
    \ identifier, found keyword\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `fib`\n --> /tmp/tmp4ck25h03.rs:9:5\n  |\n9 |     fib::memoize_inner\
    \ {\n  |     ^^^ use of undeclared crate or module `fib`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 0 {\n \
    \       0\n    } else {\n        if n == 0 || n == 1 {\n            return 1;\n\
    \        }\n        let mut a = 1;\n        let mut b = 1;\n        for _ in 0..n\
    \ {\n            let c = a + b;\n            a = b;\n            b = c;\n    \
    \    }\n        b\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `55`', /tmp/tmpg960c_lh.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return 1;\n    }\n    let mut f1 = 1;\n    let mut f2 = 1;\n    let mut\
    \ c = 1;\n    while n > 0 {\n        (c, f) = (c + f1, f + f2);\n        n -=\
    \ 1;\n    }\n    c\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `f` in this scope\n  --> /tmp/tmp9sxwl4d9.rs:16:13\n\
    \   |\n16 |         (c, f) = (c + f1, f + f2);\n   |             ^ help: a local\
    \ variable with a similar name exists: `c`\n\nerror[E0425]: cannot find value\
    \ `f` in this scope\n  --> /tmp/tmp9sxwl4d9.rs:16:27\n   |\n16 |         (c, f)\
    \ = (c + f1, f + f2);\n   |                           ^ help: a local variable\
    \ with a similar name exists: `c`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    debug_assert!(n\
    \ >= 0);\n    if n == 0 {\n        return 1;\n    }\n    fib(n-1)+fib(n-2)\n}\n\
    \nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: n >= 0', /tmp/tmp9u2y705o.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return 1;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    let mut f1 = 1;\n    let mut f2 = 1;\n\
    \    for i in 3..n {\n        let tmp = f2;\n        f2 = f1;\n        f1 = tmp\
    \ + f1;\n    }\n    f1\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `34`,\n right: `55`', /tmp/tmpaknqeuzs.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    use std::io;\n\
    \    let mut fib = Vec::new();\n    fn aux(n: isize) -> isize {\n        if n\
    \ == 0 {\n            0;\n        } else if n == 1 {\n            1;\n       \
    \ } else {\n            fib[n] = aux(n - 1) + aux(n - 2);\n        }\n       \
    \ fib[n]\n    }\n    fib.push(aux(n));\n    fib.push(aux(n - 1));\n    fib.as_slice()\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmp_1qeady4.rs:17:13\n\
    \   |\n17 |             fib[n] = aux(n - 1) + aux(n - 2);\n   |             ^^^\n\
    \   |\n   = help: use the `|| { ... }` closure form instead\n\nerror[E0434]: can't\
    \ capture dynamic environment in a fn item\n  --> /tmp/tmp_1qeady4.rs:19:9\n \
    \  |\n19 |         fib[n]\n   |         ^^^\n   |\n   = help: use the `|| { ...\
    \ }` closure form instead\n\nwarning: unused import: `std::io`\n --> /tmp/tmp_1qeady4.rs:9:9\n\
    \  |\n9 |     use std::io;\n  |         ^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]`\
    \ on by default\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1qeady4.rs:23:5\n\
    \   |\n8  | fn fib(n: isize) -> isize {\n   |                     ----- expected\
    \ `isize` because of return type\n...\n23 |     fib.as_slice()\n   |     ^^^^^^^^^^^^^^\
    \ expected `isize`, found `&[isize]`\n\nerror: aborting due to 3 previous errors;\
    \ 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0434.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    // check if n\
    \ > 0\n    if n <= 0 {\n        return 1;\n    }\n\n    fib(n-1) + fib(n-2)\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `55`', /tmp/tmphpoc72eq.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    (1..n).fold(0,\
    \ |a, i| a + fib(i - 1))\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `55`', /tmp/tmpdit2_a51.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    (1..=n).fold(0,\
    \ |a, b| a + b)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36`,\n right: `21`', /tmp/tmpupcwqiap.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fn iter() -> isize\
    \ {\n        // Initialisations\n        let mut a = 1usize;\n        let mut\
    \ b = 2usize;\n        let mut c = 3usize;\n        // Infinite loop\n       \
    \ while c < n {\n            // Fibonacci numbers are consecutive integers starting\
    \ from 1.\n            a = b;\n            b = c + a;\n            c = a + b;\n\
    \        }\n        c\n    }\n\n    iter()\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: "error[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmp3rmil_o1.rs:15:19\n\
    \   |\n15 |         while c < n {\n   |                   ^\n   |\n   = help:\
    \ use the `|| { ... }` closure form instead\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3rmil_o1.rs:21:9\n   |\n9  |     fn iter() -> isize {\n   |   \
    \               ----- expected `isize` because of return type\n...\n21 |     \
    \    c\n   |         ^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    21 |         c.try_into().unwrap()\n   |          ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0434.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 0 {\n \
    \       0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       1\n    } else {\n        fib(n-1) + fib(n-2)\n    }\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmpbt8g6v0h.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fn fib_recur(\n\
    \        a: isize,\n        b: isize,\n        res: isize,\n        mut next:\
    \ Option<isize>\n    ) -> isize {\n        match *next {\n            None =>\
    \ a + b,\n            Some(v) => fib_recur(a, v, Some(b), None),\n        }\n\
    \    }\n\n    fib_recur(0, 1, None, Some(n))\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu6k7ffem.rs:21:21\n   |\n\
    21 |     fib_recur(0, 1, None, Some(n))\n   |                     ^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<_>`\n\nerror[E0614]: type `Option<isize>` cannot\
    \ be dereferenced\n  --> /tmp/tmpu6k7ffem.rs:15:15\n   |\n15 |         match *next\
    \ {\n   |               ^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu6k7ffem.rs:17:40\n\
    \   |\n17 |             Some(v) => fib_recur(a, v, Some(b), None),\n   |     \
    \                                   ^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return n;\n    }\n\n    fib(n-1) + fib(n-2)\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmpbhemj0dn.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fn fib_impl(n:\
    \ isize) -> isize {\n        if n < 2 {\n            return n\n        }\n   \
    \     fib_impl(n - 1) + fib_impl(n - 2)\n    }\n\n    fib_impl(n)\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 | 1 | 2 => n,\n        _ => fib(n-1) + fib(n-2),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmpt6fehgsi.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    use std::mem::swap;\n\
    \n    let mut a = 0;\n    let mut b = 1;\n    for i in 0..n {\n        swap(&mut\
    \ a, &mut b);\n    }\n    b\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `55`', /tmp/tmpreg3nvas.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 1;\n\
    \    let mut b = 1;\n    if n > 0 {\n        let mut c = 1;\n        while n !=\
    \ 0 {\n            let t = a;\n            a = b;\n            b = c;\n      \
    \      c = t;\n            n -= 1;\n        }\n    }\n    b\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpxziwiz__.rs:18:13\n\
    \   |\n8  | fn fib(n: isize) -> isize {\n   |        - help: consider making this\
    \ binding mutable: `mut n`\n...\n18 |             n -= 1;\n   |             ^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 0;\n\
    \    let mut b = 1;\n    while n > 0 {\n        (a, b) = (b, a + b);\n       \
    \ n -= 1;\n    }\n    b\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp9ezplk64.rs:13:9\n\
    \   |\n8  | fn fib(n: isize) -> isize {\n   |        - help: consider making this\
    \ binding mutable: `mut n`\n...\n13 |         n -= 1;\n   |         ^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fn fibo(mut fib:\
    \ isize, f: isize, s: isize) -> isize {\n        if f < 0 { return fib; }\n  \
    \      if s == 0 { return f; }\n        return fibo(fib, f - 1, s - 1) + fibo(fib,\
    \ f - 1, s);\n    }\n\n    fibo(1, 1, n)\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `55`', /tmp/tmp56ttvtft.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    // Simplify the\
    \ expressions ...\n    // (n + 2) / 3\n    // n + (n / 3)\n    let mut x = 1;\n\
    \    let mut y = 1;\n    for i in 0..n {\n        (x, y) = (x + y, x);\n    }\n\
    \    x\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `55`', /tmp/tmpnkkmkava.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    // Amortized O(1)\n\
    \    if n < 2 {\n        return 1;\n    }\n\n    let mut fibs = [0, 1];\n    for\
    \ (i, &fib) in fibs.iter_mut().enumerate() {\n        *fib = *fib + fibs[i - 1];\n\
    \    }\n\n    fibs[n]\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv2v6bg9h.rs:15:13\n   |\n\
    15 |     for (i, &fib) in fibs.iter_mut().enumerate() {\n   |             ^^^^\
    \     --------------------------- this expression has type `Option<(usize, &mut\
    \ {integer})>`\n   |             |\n   |             types differ in mutability\n\
    \   |             help: you can probably remove the explicit borrow: `fib`\n \
    \  |\n   = note: expected mutable reference `&mut {integer}`\n               \
    \       found reference `&_`\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpv2v6bg9h.rs:19:5\n   |\n19 |     fibs[n]\n\
    \   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 || n\
    \ == 1 {\n        return n;\n    }\n\n    fib(n-1) + fib(n-2)\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    fn fib_tail(n: isize, acc: isize) -> isize {\n\
    \        if n == 1 {\n            return acc;\n        }\n        return fib_tail(n\
    \ - 1, acc + n);\n    }\n    return fib_tail(n, 0);\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `55`', /tmp/tmp_6ftesh6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut fib_cache:\
    \ [isize, isize; 3] = [1, 0, 1];\n    let mut prev = 0;\n    let mut curr = 1;\n\
    \    while n > 2 {\n        fib_cache[0] = prev;\n        fib_cache[1] = curr;\n\
    \        let tmp = fib_cache[1];\n        prev = curr;\n        curr = tmp + fib_cache[0]\
    \ + fib_cache[2];\n        n -= 1;\n    }\n    fib_cache[2]\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `]`, `{`, or an operator,\
    \ found `;`\n --> /tmp/tmpfvhetdrv.rs:9:37\n  |\n9 |     let mut fib_cache: [isize,\
    \ isize; 3] = [1, 0, 1];\n  |                                     ^\n  |     \
    \                                |\n  |                                     expected\
    \ one of 8 possible tokens\n  |                                     help: missing\
    \ `,`\n\nerror: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `]`, found `,`\n\
    \ --> /tmp/tmpfvhetdrv.rs:9:30\n  |\n9 |     let mut fib_cache: [isize, isize;\
    \ 3] = [1, 0, 1];\n  |         --------------       ^ expected one of 7 possible\
    \ tokens\n  |         |            |\n  |         |            help: use `=` if\
    \ you meant to assign\n  |         while parsing the type for `mut fib_cache`\n\
    \nerror[E0423]: expected value, found builtin type `isize`\n --> /tmp/tmpfvhetdrv.rs:9:25\n\
    \  |\n9 |     let mut fib_cache: [isize, isize; 3] = [1, 0, 1];\n  |         \
    \                ^^^^^ not a value\n\nerror[E0423]: expected value, found builtin\
    \ type `isize`\n --> /tmp/tmpfvhetdrv.rs:9:32\n  |\n9 |     let mut fib_cache:\
    \ [isize, isize; 3] = [1, 0, 1];\n  |                                ^^^^^ not\
    \ a value\n\nerror[E0070]: invalid left-hand side of assignment\n --> /tmp/tmpfvhetdrv.rs:9:42\n\
    \  |\n9 |     let mut fib_cache: [isize, isize; 3] = [1, 0, 1];\n  |         \
    \                              -  ^\n  |                                     \
    \  |\n  |                                       cannot assign to this expression\n\
    \nerror[E0608]: cannot index into a value of type `()`\n  --> /tmp/tmpfvhetdrv.rs:13:9\n\
    \   |\n13 |         fib_cache[0] = prev;\n   |         ^^^^^^^^^^^^ help: to access\
    \ tuple elements, use: `fib_cache.0`\n\nerror[E0608]: cannot index into a value\
    \ of type `()`\n  --> /tmp/tmpfvhetdrv.rs:14:9\n   |\n14 |         fib_cache[1]\
    \ = curr;\n   |         ^^^^^^^^^^^^ help: to access tuple elements, use: `fib_cache.1`\n\
    \nerror[E0608]: cannot index into a value of type `()`\n  --> /tmp/tmpfvhetdrv.rs:15:19\n\
    \   |\n15 |         let tmp = fib_cache[1];\n   |                   ^^^^^^^^^^^^\
    \ he"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a: i32\
    \ = 0;\n    let mut b: i32 = 1;\n    while n != 0 {\n        let tmp = &mut a;\n\
    \        a = b;\n        b = tmp + b;\n        n = n - 1;\n    }\n    b\n}\n\n\
    fn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n  \
    \  assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `i32` to `&mut i32`\n  --> /tmp/tmp6v_fo303.rs:14:17\n\
    \   |\n14 |         b = tmp + b;\n   |             --- ^ - i32\n   |         \
    \    |\n   |             &mut i32\n   |\nhelp: `+` can be used on `i32`, you can\
    \ dereference `tmp`\n   |\n14 |         b = *tmp + b;\n   |             +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp6v_fo303.rs:17:5\n   |\n8  | fn\
    \ fib(n: isize) -> isize {\n   |                     ----- expected `isize` because\
    \ of return type\n...\n17 |     b\n   |     ^ expected `isize`, found `i32`\n\
    \   |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n17 |     b.try_into().unwrap()\n   |      ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    use std::mem::replace;\n\
    \    if n < 0 {\n        panic!(\"Fibonacci number index out of range\")\n   \
    \ }\n    if n < 2 {\n        return 1;\n    }\n    let mut fib1 = 1;\n    let\
    \ mut fib2 = 1;\n    for i in 1..n {\n        fib1 = fib2;\n        fib2 = replace(fib2,\
    \ fib1 + fib2);\n    }\n    fib2\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcip66ep5.rs:20:24\n   |\n\
    20 |         fib2 = replace(fib2, fib1 + fib2);\n   |                        ^^^^\n\
    \   |                        |\n   |                        expected `&mut {integer}`,\
    \ found integer\n   |                        help: consider mutably borrowing\
    \ here: `&mut fib2`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fn fib_rec(_:\
    \ isize, a: isize, b: isize) -> isize {\n        a + b\n    }\n\n    fib_rec(n\
    \ - 2, 0, 1)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `55`', /tmp/tmpbc3pne32.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return n;\n    }\n\n    fib(n + 1).unwrap()\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp5egp1gpe.rs:13:16\n   |\n13 |     fib(n + 1).unwrap()\n\
    \   |                ^^^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fn fib(n: isize)\
    \ -> (isize, isize) {\n        if n < 2 {\n            (n, n)\n        } else\
    \ {\n            fib(n - 1) + fib(n - 2)\n        }\n    }\n\n    fib(n).0\n}\n\
    \nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `(isize, isize)` to `(isize, isize)`\n  --> /tmp/tmp7d5ugzcz.rs:13:24\n\
    \   |\n13 |             fib(n - 1) + fib(n - 2)\n   |             ---------- ^\
    \ ---------- (isize, isize)\n   |             |\n   |             (isize, isize)\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        1\n    } else {\n        fib(n-1) + fib(n-2)\n    }\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fn fib_iter(a:\
    \ isize, mut b: isize) -> isize {\n        while b < 2 {\n            (a, b) =\
    \ (b, a + b);\n        }\n        (b, b)\n    }\n    if n < 0 {\n        panic!(\"\
    fib({}): negative number\", n);\n    }\n    if n <= 1 {\n        return n;\n \
    \   }\n    if n == 2 {\n        return 1;\n    }\n    fib_iter(1, 0)\n       \
    \ .take_while(|&x| x <= n)\n        .next_back()\n        .map(|&x| x * fib_iter(n\
    \ - x, x))\n        .collect()\n}\n\nfn main() {\n    let candidate = fib;\n \
    \   assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: `isize` is not an iterator\n  --> /tmp/tmp6uwnbpv5.rs:25:10\n\
    \   |\n25 |         .take_while(|&x| x <= n)\n   |          ^^^^^^^^^^ `isize`\
    \ is not an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `isize: Iterator`\n           which is required by `&mut isize: Iterator`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6uwnbpv5.rs:13:9\n   |\n9  | \
    \    fn fib_iter(a: isize, mut b: isize) -> isize {\n   |                    \
    \                        ----- expected `isize` because of return type\n...\n\
    13 |         (b, b)\n   |         ^^^^^^ expected `isize`, found tuple\n   |\n\
    \   = note: expected type `isize`\n             found tuple `(isize, isize)`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    fib_rec(n - 1, fib_rec(n - 2, n))\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib_rec` in this scope\n  --> /tmp/tmp67tb6258.rs:12:5\n\
    \   |\n12 |     fib_rec(n - 1, fib_rec(n - 2, n))\n   |     ^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `fib_rec` in this scope\n\
    \  --> /tmp/tmp67tb6258.rs:12:20\n   |\n12 |     fib_rec(n - 1, fib_rec(n - 2,\
    \ n))\n   |                    ^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n\n    fib(n-1)+fib(n-2)\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fn fibonacci(n:\
    \ isize) -> isize {\n        if n < 2 {\n            n\n        } else {\n   \
    \         fibonacci(n-1) + fibonacci(n-2)\n        }\n    }\n    fibonacci(n)\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut f1 = 1;\n\
    \    let mut f2 = 1;\n    for i in 1..n {\n        let sum = &f1 + &f2;\n    \
    \    f1 = f2;\n        f2 = sum;\n    }\n    &f2\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbbj0_ymf.rs:16:5\n   |\n\
    8  | fn fib(n: isize) -> isize {\n   |                     ----- expected `isize`\
    \ because of return type\n...\n16 |     &f2\n   |     ^^^ expected `isize`, found\
    \ `&{integer}`\n   |\nhelp: consider removing the borrow\n   |\n16 -     &f2\n\
    16 +     f2\n   | \n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if (n == 0) {\n\
    \        return 0;\n    }\n\n    if (n == 1) {\n        return 1;\n    }\n\n \
    \   return fib(n-1) + fib(n-2);\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1\n    }\n    else {\n        return fib(n-1) + fib(n-2)\n   \
    \ }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n\n    let mut n1 = 1;\n    let mut n2 = 1;\n\n    while\
    \ n2 < n {\n        n1 = n2;\n        n2 = n1 + n2;\n    }\n\n    n1\n}\n\nfn\
    \ main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n   \
    \ assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `55`', /tmp/tmpdm9hv3_y.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n    fib(n + 1).clone()\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2),\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return n;\n    }\n    return fib(n-2) + fib(n-1);\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmpnzfdlui0.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    use std::cmp::Ordering;\n\
    \    use std::cmp::PartialOrd;\n    use std::ops::Add;\n    let mut a = 1;\n \
    \   let mut b = 1;\n    let mut i = 2;\n    while i < n {\n        let y = a +\
    \ b;\n        a = b;\n        b = y;\n        i += 1;\n    }\n    b\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fn fib(num: isize)\
    \ -> isize {\n        if num == 0 {\n            return 0;\n        }\n      \
    \  if num == 1 {\n            return 1;\n        }\n        return fib(num - 1)\
    \ + fib(num - 2);\n    }\n    fib(n as isize)\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n    let mut first = 1;\n    let mut second = 1;\n  \
    \  for i in 2..=n {\n        let tmp = first;\n        first = second;\n     \
    \   second = tmp + second;\n    }\n    first\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fn fib_aux(n:\
    \ isize) -> isize {\n        if n <= 1 {\n            return n;\n        }\n \
    \       fib_aux(n-1) + fib_aux(n-2)\n    }\n    fib_aux(n)\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut f1 = 1;\n\
    \    let mut f2 = 1;\n\n    if n < 2 {\n        return n;\n    }\n\n    for _\
    \ in 0..(n-2) {\n        let tmp = &f1;\n        f1 = &f2;\n        f2 = tmp +\
    \ &f2;\n    }\n\n    f2\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsyok6h98.rs:18:14\n   |\n\
    9  |     let mut f1 = 1;\n   |                  - expected due to this value\n\
    ...\n18 |         f1 = &f2;\n   |              ^^^ expected integer, found `&{integer}`\n\
    \   |\nhelp: consider removing the borrow\n   |\n18 -         f1 = &f2;\n18 +\
    \         f1 = f2;\n   | \n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 || n\
    \ == 1 {\n        return n;\n    }\n    let mut a: isize = 0;\n    let mut b:\
    \ isize = 1;\n    let mut c: isize = 0;\n    for i in 0..n {\n        let tmp\
    \ = c;\n        c = a + b;\n        a = b;\n        b = tmp;\n    }\n    return\
    \ c;\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `55`', /tmp/tmpvdig00x8.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2)\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 1;\n\
    \    let mut b = 1;\n    loop {\n        let mut c = a + b;\n        a = b;\n\
    \        b = c;\n        if n == 0 {\n            break;\n        }\n        n\
    \ -= 1;\n    }\n    b\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpvxqesgvv.rs:12:13\n\
    \   |\n12 |         let mut c = a + b;\n   |             ----^\n   |         \
    \    |\n   |             help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0384]: cannot assign to immutable argument `n`\n  -->\
    \ /tmp/tmpvxqesgvv.rs:18:9\n   |\n8  | fn fib(n: isize) -> isize {\n   |     \
    \   - help: consider making this binding mutable: `mut n`\n...\n18 |         n\
    \ -= 1;\n   |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    }\n\n    let\
    \ mut a = 1;\n    let mut b = 1;\n    for _ in 0..n {\n        let c = a + b;\n\
    \        a = b;\n        b = c;\n    }\n    b\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `55`', /tmp/tmpv1u237tp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    return fib(n - 2) + fib(n - 1);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fn fib(n: isize)\
    \ -> isize {\n        if n < 2 { n }\n        else {\n            fib(n-1) + fib(n-2)\n\
    \        }\n    }\n    fib(n)\n}\n\nfn main() {\n    let candidate = fib;\n  \
    \  assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n    return fib(n - 2) + fib(n - 1);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 | 1 => n,\n        n if n <= 2 => n,\n        _ => fib(n - 2) + fib(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmp22q2bc0r.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    // base case\n\
    \    if n == 0 || n == 1 {\n        return n;\n    }\n\n    // recursion step\n\
    \    let result = fib(n - 2) + fib(n - 1);\n    \n    // base case\n    if result\
    \ >= n {\n        return result;\n    }\n\n    // recursion step\n    let result\
    \ = fib(n - 1) + fib(n - 2);\n\n    // base case\n    if result >= n {\n     \
    \   return result;\n    }\n\n    // recursion step\n    let result = fib(n - 1)\
    \ + fib(n - 2);\n\n    // base case\n    if result >= n {\n        return result;\n\
    \    }\n\n    // recursion step\n    let result = fib(n - 1) + fib(n - 2);\n\n\
    \    // base case\n    if result >= n {\n        return result;\n    }\n\n   \
    \ // recursion step\n    let result = fib(n - 1) + fib(n - 2);\n\n    // base\
    \ case\n    if result >= n {\n        return result;\n    }\n\n    // recursion\
    \ step\n    let result = fib(n - 1) + fib(n - 2);\n\n    // base case\n    if\
    \ result >= n {\n        return result;\n    }\n\n    // recursion step\n    let\
    \ result = fib(n - 1) + fib(n - 2);\n\n    // base case\n    if result >= n {\n\
    \        return result;\n    }\n\n    // recursion step\n    let result = fib(n\
    \ - 1) + fib(n - 2);\n\n    // base case\n    if result >= n {\n        return\
    \ result;\n    }\n\n    // recursion step\n    let result = fib(n - 1) + fib(n\
    \ - 2);\n\n    // base case\n    if result >= n {\n        return result;\n  \
    \  }\n\n    // recursion step\n    let result = fib(n - 1) + fib(n - 2);\n\n \
    \   // base case\n    if result >= n {\n        return result;\n    }\n\n    //\
    \ recursion step\n    let result = fib(n - 1) + fib(n - 2);\n\n    // base case\n\
    \    if result >= n {\n        return result;\n    }\n\n    // recursion step\n\
    \    let result = fib(n - 1) + fib(n - 2);\n\n    // base case\n    if result\
    \ >= n {\n        return result;\n    }\n\n    // recursion step\n    let result\
    \ = fib(n - 1) + fib(n - 2);\n\n    // base case\n    if result >= n {\n     \
    \   return result;\n    }\n\n    // recursion step\n    let result = fib(n - 1)\
    \ + fib(n - 2);\n\n    // base case\n    if result >= n {\n        return result;\n\
    \    }\n\n    // recursion step\n    let result = fib(n - 1) + fib(n - 2);\n\n\
    \    // base case\n    if result >= n {\n        return result;\n    }\n\n   \
    \ // recursion step\n    let result = fib(n - 1) + fib(n - 2);\n\n    // base\
    \ case\n    if result >= n {\n        return result;\n    }\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0317]: `if` may be missing an `else` clause\n   --> /tmp/tmpx0l8c96h.rs:138:5\n\
    \    |\n8   |   fn fib(n: isize) -> isize {\n    |                       -----\
    \ expected `isize` because of this return type\n...\n138 | /     if result >=\
    \ n {\n139 | |         return result;\n140 | |     }\n    | |_____^ expected `isize`,\
    \ found `()`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n\
    \    = help: consider adding an `else` block that evaluates to the expected type\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0317`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fn fib_tail(a:\
    \ isize, mut b: isize) -> isize {\n        b += a;\n        a + b\n    }\n\n \
    \   if n < 2 {\n        return n;\n    }\n\n    if n > 2 {\n        fib_tail(fib(n\
    \ - 1), fib(n - 2))\n    } else {\n        fib_tail(0, 1) // unreachable\n   \
    \ }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1393`,\n right: `55`', /tmp/tmpo1odwmy3.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    assert!(n > 0);\n\
    \    if n < 2 { return n }\n\n    let mut a = 1;\n    let mut b = 1;\n\n    for\
    \ _ in 0..n {\n        (a, b) = (b, a + b);\n    }\n\n    a\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmpnq1h06bn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 || n\
    \ == 1 {\n        return n;\n    }\n\n    return fib(n-1) + fib(n-2);\n}\n\nfn\
    \ main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n   \
    \ assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1;\n    }\n    fib(n).wrapping_add(fib(n - 1))\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return n;\n    }\n    fib(n + 1).clone()\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       1\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmpj2y3teci.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return n;\n    }\n    fib2(n - 1, n - 2);\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib2` in this scope\n  --> /tmp/tmpp6bab06r.rs:12:5\n\
    \   |\n12 |     fib2(n - 1, n - 2);\n   |     ^^^^ not found in this scope\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpp6bab06r.rs:8:21\n  |\n8 | fn fib(n:\
    \ isize) -> isize {\n  |    ---              ^^^^^ expected `isize`, found `()`\n\
    \  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return n;\n    }\n\n    let mut a = fib(n-1);\n    let mut b = fib(n-2);\n\
    \    while a < b {\n        if a < b {\n            a *= 2;\n        } else {\n\
    \            b *= 3;\n        }\n    }\n    return b;\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `55`', /tmp/tmppx21dbme.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 0 {\n\
    \        return 0;\n    }\n    fn fib_aux(a: isize, mut b: isize) -> isize {\n\
    \        let mut res = a;\n        if b <= 2 {\n            res = b;\n       \
    \ }\n        else {\n            *a += b;\n            fib_aux(a, *b);\n     \
    \   }\n        res\n    }\n    fib_aux(0, 1);\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmuhuo8zk.rs:8:21\n   |\n\
    8  | fn fib(n: isize) -> isize {\n   |    ---              ^^^^^ expected `isize`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n...\n23 |     fib_aux(0, 1);\n   |                 \
    \ - help: remove this semicolon\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpmuhuo8zk.rs:18:13\n   |\n18 |             *a += b;\n   |      \
    \       ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmuhuo8zk.rs:19:24\n\
    \   |\n19 |             fib_aux(a, *b);\n   |                        ^^\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 1;\n\
    \    let mut b = 1;\n    for _ in 0..n {\n        let c = a + b;\n        a =\
    \ b;\n        b = c;\n    }\n    b\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `55`', /tmp/tmpaelll7ug.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut n2: isize\
    \ = 1;\n    let mut n3: isize = 2;\n\n    for _ in 0..(n-2) {\n        n2 += n3;\n\
    \        n3 = n2;\n    }\n\n    n2\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `384`,\n right: `55`', /tmp/tmpab8qjvnr.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    fib(n-1) + fib(n-2)\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfn main() {\n  \
    \  let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       1\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmppf86tpzt.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 { return\
    \ n; }\n    fib(n-1)+fib(n-2)\n}\n\nfn main() {\n    let candidate = fib;\n  \
    \  assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n    fib(n-1)+fib(n-2)\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       n\n    } else {\n        fib(n-1) + fib(n-2)\n    }\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return n;\n    }\n\n    let mut a = 1;\n    let mut b = 1;\n    let mut\
    \ c = 1;\n\n    for i in 2..n {\n        let tmp = a;\n        a = b;\n      \
    \  b = c;\n        c = tmp + b;\n    }\n\n    return c;\n}\n\nfn main() {\n  \
    \  let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `55`', /tmp/tmpxnldm3mw.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let a = 1;\n \
    \   let b = 1;\n\n    for i in 1..n {\n        let c = a + b;\n        a = b;\n\
    \        b = c;\n    }\n\n    b\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: "warning: unused variable: `i`\n  --> /tmp/tmpvuexm9s9.rs:12:9\n   |\n12\
    \ |     for i in 1..n {\n   |         ^ help: if this is intentional, prefix it\
    \ with an underscore: `_i`\n   |\n   = note: `#[warn(unused_variables)]` on by\
    \ default\n\nerror[E0384]: cannot assign twice to immutable variable `a`\n  -->\
    \ /tmp/tmpvuexm9s9.rs:14:9\n   |\n9  |     let a = 1;\n   |         -\n   |  \
    \       |\n   |         first assignment to `a`\n   |         help: consider making\
    \ this binding mutable: `mut a`\n...\n14 |         a = b;\n   |         ^^^^^\
    \ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice\
    \ to immutable variable `b`\n  --> /tmp/tmpvuexm9s9.rs:15:9\n   |\n10 |     let\
    \ b = 1;\n   |         -\n   |         |\n   |         first assignment to `b`\n\
    \   |         help: consider making this binding mutable: `mut b`\n...\n15 | \
    \        b = c;\n   |         ^^^^^ cannot assign twice to immutable variable\n\
    \nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return n;\n    }\n\n    fib(n + 1) + fib(n + 2)\n}\n\nfn main() {\n \
    \   let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n\n    let mut a = 1;\n    let mut b = 1;\n    for _\
    \ in 0..n {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n \
    \   b\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `55`', /tmp/tmpgcinlzk7.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n    fib_rec(n - 1, n - 2)\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib_rec` in this scope\n  --> /tmp/tmpegf3vp_z.rs:12:5\n\
    \   |\n12 |     fib_rec(n - 1, n - 2)\n   |     ^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fn fib_impl(_n:\
    \ usize) -> isize {\n        if _n == 0 {\n            return 1;\n        }\n\
    \        if _n == 1 {\n            return 1;\n        }\n        let a = fib_impl(_n\
    \ - 1);\n        let b = fib_impl(_n - 2);\n        a * a + b * b\n    }\n   \
    \ fib_impl(n).unwrap()\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsk3o29xf.rs:20:14\n   |\n\
    20 |     fib_impl(n).unwrap()\n   |              ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n20 |     fib_impl(n.try_into().unwrap()).unwrap()\n\
    \   |               ++++++++++++++++++++\n\nerror[E0599]: no method named `unwrap`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpsk3o29xf.rs:20:17\n\
    \   |\n20 |     fib_impl(n).unwrap()\n   |                 ^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a: isize\
    \ = 0, b: isize = 1;\n    for _ in 0..n {\n        (a, b) = (b, a + b);\n    }\n\
    \    b\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmpwkhm_kxd.rs:9:25\n  |\n9 |     let mut a: isize = 0, b: isize =\
    \ 1;\n  |                         ^ expected one of `.`, `;`, `?`, `else`, or\
    \ an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    }\n    fib(n-1).add(fib(n-2))\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `add` found for type `isize` in the current\
    \ scope\n   --> /tmp/tmpwttj9a8v.rs:14:14\n    |\n14  |     fib(n-1).add(fib(n-2))\n\
    \    |              ^^^ method not found in `isize`\n    |\n    = help: items\
    \ from traits can only be used if the trait is in scope\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n    |\n1   | use\
    \ std::ops::Add;\n    |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 0;\n\
    \    let mut b = 1;\n    while n > 1 {\n        let tmp = a + b;\n        a =\
    \ b;\n        b = tmp;\n        n -= 1;\n    }\n    a\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp92_60vo9.rs:15:9\n\
    \   |\n8  | fn fib(n: isize) -> isize {\n   |        - help: consider making this\
    \ binding mutable: `mut n`\n...\n15 |         n -= 1;\n   |         ^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        2 => 1,\n        _ => fib(n - 2) + fib(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 1;\n\
    \    let mut b = 1;\n    for i in 1..n {\n        let tmp_a = a;\n        let\
    \ tmp_b = b;\n        a = b;\n        b = tmp_a + tmp_b;\n    }\n    a\n}\n\n\
    fn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n  \
    \  assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 { return\
    \ 1 }\n    fib(n-2) + fib(n-1)\n}\n\nfn main() {\n    let candidate = fib;\n \
    \   assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    (0..n).fold(1,\
    \ |a, b| a + b)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `46`,\n right: `55`', /tmp/tmpq_7hp4en.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       n\n    } else {\n        fib(n-1) + fib(n-2)\n    }\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n    let mut a = 1;\n    let mut b = 1;\n    for i in\
    \ 1..n {\n        let tmp = a;\n        a = b;\n        b = tmp + b;\n    }\n\
    \    a\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n    fib(n + 1).partial_cmp(&fib(n))\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpidx4r2za.rs:12:5\n   |\n\
    8  | fn fib(n: isize) -> isize {\n   |                     ----- expected `isize`\
    \ because of return type\n...\n12 |     fib(n + 1).partial_cmp(&fib(n))\n   |\
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<std::cmp::Ordering>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return n;\n    }\n    let mut a: isize = 0;\n    let mut b: isize = 1;\n\
    \    for _ in 0..n {\n        let tmp = a;\n        a = b;\n        b = tmp +\
    \ b;\n    }\n    a\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    fib(n * 2 + 1).try_into().unwrap()\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `try_into` found for type `isize` in the\
    \ current scope\n   --> /tmp/tmpow90y5dl.rs:12:20\n    |\n12  |     fib(n * 2\
    \ + 1).try_into().unwrap()\n    |                    ^^^^^^^^ method not found\
    \ in `isize`\n    |\n    = help: items from traits can only be used if the trait\
    \ is in scope\n    = note: 'std::convert::TryInto' is included in the prelude\
    \ starting in Edition 2021\nhelp: the following trait is implemented but not in\
    \ scope; perhaps add a `use` for it:\n    |\n1   | use std::convert::TryInto;\n\
    \    |\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    use std::mem;\n\
    \    mem::swap(mem::replace(mem::replace(mem::replace::<isize>(fib_0(), fib_1()),\
    \ fib_2()), fib_3()), fib_4());\n    let mut sum = 1;\n    for _ in 0..(n + 1)\
    \ {\n        sum = fib_5(sum);\n    }\n    mem::swap(fib_6(), fib_7());\n    sum\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib_0` in this scope\n  --> /tmp/tmpq2l2nfvh.rs:10:63\n\
    \   |\n10 |     mem::swap(mem::replace(mem::replace(mem::replace::<isize>(fib_0(),\
    \ fib_1()), fib_2()), fib_3()), fib_4());\n   |                              \
    \                                 ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `fib_1` in this scope\n  --> /tmp/tmpq2l2nfvh.rs:10:72\n\
    \   |\n10 |     mem::swap(mem::replace(mem::replace(mem::replace::<isize>(fib_0(),\
    \ fib_1()), fib_2()), fib_3()), fib_4());\n   |                              \
    \                                          ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `fib_2` in this scope\n  --> /tmp/tmpq2l2nfvh.rs:10:82\n\
    \   |\n10 |     mem::swap(mem::replace(mem::replace(mem::replace::<isize>(fib_0(),\
    \ fib_1()), fib_2()), fib_3()), fib_4());\n   |                              \
    \                                                    ^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `fib_3` in this scope\n  --> /tmp/tmpq2l2nfvh.rs:10:92\n\
    \   |\n10 |     mem::swap(mem::replace(mem::replace(mem::replace::<isize>(fib_0(),\
    \ fib_1()), fib_2()), fib_3()), fib_4());\n   |                              \
    \                                                              ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `fib_4` in this scope\n\
    \  --> /tmp/tmpq2l2nfvh.rs:10:102\n   |\n10 |     mem::swap(mem::replace(mem::replace(mem::replace::<isize>(fib_0(),\
    \ fib_1()), fib_2()), fib_3()), fib_4());\n   |                              \
    \                                                                        ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `fib_5` in this\
    \ scope\n  --> /tmp/tmpq2l2nfvh.rs:13:15\n   |\n13 |         sum = fib_5(sum);\n\
    \   |               ^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `fib_6` in this scope\n  --> /tmp/tmpq2l2nfvh.rs:15:15\n   |\n15 |\
    \     mem::swap(fib_6(), fib_7());\n   |               ^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `fib_7` in this sco"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    use std::cmp::min;\n\
    \n    if n <= 0 {\n        return 0;\n    }\n\n    let mut result = fib(n - 2)\
    \ + fib(n - 1);\n    if n % 2 == 0 {\n        result = result / 2;\n    }\n\n\
    \    result\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `55`', /tmp/tmp83txc03v.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n    let mut a = 1;\n    let mut b = 1;\n    for i in\
    \ 2..n {\n        let mut tmp_a = a;\n        let mut tmp_b = b;\n        a =\
    \ b;\n        b = tmp_a + tmp_b;\n    }\n    b\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 || n\
    \ == 1 {\n        return n;\n    }\n    fib(n-1) + fib(n-2)\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return n;\n    }\n\n    fib(n-1)+fib(n-2)\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmpdvvab29t.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    (n <= 1) ? 1 :\
    \ fib(n-1) + fib(n-2)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1`\n\
    \ --> /tmp/tmp8zhiq8yd.rs:9:16\n  |\n9 |     (n <= 1) ? 1 : fib(n-1) + fib(n-2)\n\
    \  |                ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror:\
    \ aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    fib(n - 1) + fib(n - 2)\n}\n\nfn main() {\n   \
    \ let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match (&n)\n \
    \   {\n        (isize::MAX,) => {\n            assert!(n == 0);\n            return\
    \ 1;\n        }\n        (0,) => 1,\n        (n, _) => fib(n - 1) + fib(n - 2),\n\
    \    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around `match` scrutinee expression\n\
    \ --> /tmp/tmp9gg03x20.rs:9:11\n  |\n9 |     match (&n)\n  |           ^  ^\n\
    \  |\n  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \  |\n9 -     match (&n)\n9 +     match &n\n  | \n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9gg03x20.rs:11:9\n   |\n9  |     match (&n)\n   |           ----\
    \ this expression has type `&isize`\n10 |     {\n11 |         (isize::MAX,) =>\
    \ {\n   |         ^^^^^^^^^^^^^ expected `isize`, found tuple\n   |\n   = note:\
    \ expected type `isize`\n             found tuple `(_,)`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9gg03x20.rs:15:9\n   |\n9  |     match (&n)\n   |     \
    \      ---- this expression has type `&isize`\n...\n15 |         (0,) => 1,\n\
    \   |         ^^^^ expected `isize`, found tuple\n   |\n   = note: expected type\
    \ `isize`\n             found tuple `(_,)`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9gg03x20.rs:16:9\n   |\n9  |     match (&n)\n   |           ----\
    \ this expression has type `&isize`\n...\n16 |         (n, _) => fib(n - 1) +\
    \ fib(n - 2),\n   |         ^^^^^^ expected `isize`, found tuple\n   |\n   = note:\
    \ expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting\
    \ due to 3 previous errors; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return 1\n    }\n    return fib(n - 2) + fib(n - 1)\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        1\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n    fib(n + 1) + (fib(n) + fib(n + 2))\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 || n\
    \ == 1 {\n        return n;\n    }\n    fib(n-2) + fib(n-1)\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return 1;\n    }\n    fib(n-1).add(fib(n-2))\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `add` found for type `isize` in the current\
    \ scope\n   --> /tmp/tmpntish5x4.rs:12:14\n    |\n12  |     fib(n-1).add(fib(n-2))\n\
    \    |              ^^^ method not found in `isize`\n    |\n    = help: items\
    \ from traits can only be used if the trait is in scope\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n    |\n1   | use\
    \ std::ops::Add;\n    |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    // http://programmingpraxis.com/2009/02/12/fibonacci-number-program-in-ocaml/\n\
    \    let mut n1, n2, n3, n4, n5, n6, n7, n8, n9;\n    n1 = n2 = n3 = n4 = n5 =\
    \ n6 = n7 = n8 = n9 = n;\n    while n9 > 0 {\n        let mut c = n1;\n      \
    \  n1 += n2;\n        n2 += n3;\n        n3 += n4;\n        n4 += n5;\n      \
    \  n5 += n6;\n        n6 += n7;\n        n7 += n8;\n        n8 += n9;\n      \
    \  n9 -= c;\n    }\n    n9\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error: unexpected `,` in pattern\n  --> /tmp/tmpm16x_s93.rs:10:15\n   |\n\
    10 |     let mut n1, n2, n3, n4, n5, n6, n7, n8, n9;\n   |               ^\n \
    \  |\nhelp: try adding parentheses to match on a tuple\n   |\n10 |     let (mut\
    \ n1, n2, n3, n4, n5, n6, n7, n8, n9);\n   |         +                       \
    \               +\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n\n    return fib(n-1) + fib(n-2);\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    \n    fn fib1(n: isize) -> isize {\n        if n\
    \ == 0 {\n            return 1\n        }\n        fib1(n - 1) + fib1(n - 2)\n\
    \    }\n    \n    return fib1(n - 1) + fib1(n - 2)\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    use std::cmp::Ordering;\n\
    \    let mut a = 1;\n    let mut b = 1;\n    let mut i = 0;\n\n    while i < n\
    \ {\n        let tmp = a + b;\n        a = b;\n        b = tmp;\n        i +=\
    \ 1;\n    }\n\n    return b;\n}\n\nfn main() {\n    let candidate = fib;\n   \
    \ assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `55`', /tmp/tmpc7u2qyxh.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fn fib_recursive(n:\
    \ isize) -> isize {\n        if n == 0 || n == 1 {\n            return 1;\n  \
    \      }\n\n        return fib_recursive(n - 1) + fib_recursive(n - 2);\n    }\n\
    \    fib_recursive(n)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmpbaa1va7y.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    assert!(n >= 0);\n\
    \n    if n < 2 {\n        return n;\n    }\n\n    if n == 2 {\n        return\
    \ 1;\n    }\n\n    let mut sum = 0;\n    let mut cur = 2;\n    while cur < n {\n\
    \        sum += cur;\n        cur += 1;\n    }\n\n    sum\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `44`,\n right: `55`', /tmp/tmpt5g6conl.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 || n\
    \ == 1 {\n        return n;\n    }\n    fib(n-1) + fib(n-2)\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n\n    fib(n-1).clone()\n        + fib(n - 2).clone()\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    assert!(n > 0\
    \ && n <= 20, \"Invalid number for Fibonacci sequence\");\n    fn fib_aux(x: isize)\
    \ -> isize {\n        if x == 0 {\n            return 1;\n        }\n        if\
    \ x == 1 {\n            return x;\n        }\n        let y = fib_aux(x - 1) +\
    \ fib_aux(x - 2);\n        y.0\n    }\n    fib_aux(n)\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0610]: `isize` is a primitive type and therefore doesn't have fields\n\
    \  --> /tmp/tmpyxpo_hl1.rs:18:11\n   |\n18 |         y.0\n   |           ^\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0610`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    use std::cmp::Ordering;\n\
    \    let mut current = 1;\n    let mut next = 2;\n\n    loop {\n        current\
    \ += next;\n        next += current;\n\n        if next > n {\n            break;\n\
    \        }\n    }\n\n    current\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `55`', /tmp/tmplcdi7j4b.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 0,\
    \ b = 1;\n    for _ in 0..n {\n        let tmp = a;\n        a = b;\n        b\
    \ = tmp + b;\n    }\n    a\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmp2f1y37ax.rs:9:18\n  |\n9 |     let mut a = 0, b = 1;\n  |      \
    \            ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror:\
    \ aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n\n    return fib(n-1) + fib(n-2);\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    assert!(n >= 0,\
    \ \"Invalid Fibonacci number: negative numbers are not allowed\");\n    assert!(n\
    \ <= 4, \"Invalid Fibonacci number: number must be <= 4\");\n    match n {\n \
    \       1 => 1,\n        2 => 1,\n        3 => 2,\n        _ => fib(n - 1) + fib(n\
    \ - 2)\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'Invalid Fibonacci number: number must be <=\
    \ 4', /tmp/tmp_uy1bxcu.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    use std::mem;\n\
    \    mem::transmute((*const fn +)(n)).0\n}\n\nfn main() {\n    let candidate =\
    \ fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found keyword `const`\n  --> /tmp/tmp4wy616cm.rs:10:22\n\
    \   |\n10 |     mem::transmute((*const fn +)(n)).0\n   |                     \
    \ ^^^^^ expected expression\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match (n - 2).checked_add(n\
    \ - 1) { // O(n)\n        // Base cases: n == 0 || n == 1\n        0 | 1 => 0,\n\
    \        // Recursive cases: n > 0\n        n => fib(n - 1) + fib(n - 2)\n   \
    \ }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2sac1ick.rs:11:9\n   |\n\
    9  |     match (n - 2).checked_add(n - 1) { // O(n)\n   |           --------------------------\
    \ this expression has type `Option<isize>`\n10 |         // Base cases: n == 0\
    \ || n == 1\n11 |         0 | 1 => 0,\n   |         ^ expected enum `Option`,\
    \ found integer\n   |\n   = note: expected enum `Option<isize>`\n            \
    \  found type `{integer}`\nhelp: try wrapping the pattern in `Some`\n   |\n11\
    \ |         Some(0) | 1 => 0,\n   |         +++++ +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2sac1ick.rs:11:13\n   |\n9  |     match (n - 2).checked_add(n\
    \ - 1) { // O(n)\n   |           -------------------------- this expression has\
    \ type `Option<isize>`\n10 |         // Base cases: n == 0 || n == 1\n11 |   \
    \      0 | 1 => 0,\n   |             ^ expected enum `Option`, found integer\n\
    \   |\n   = note: expected enum `Option<isize>`\n              found type `{integer}`\n\
    help: try wrapping the pattern in `Some`\n   |\n11 |         0 | Some(1) => 0,\n\
    \   |             +++++ +\n\nerror[E0369]: cannot subtract `{integer}` from `Option<isize>`\n\
    \  --> /tmp/tmp2sac1ick.rs:13:20\n   |\n13 |         n => fib(n - 1) + fib(n -\
    \ 2)\n   |                  - ^ - {integer}\n   |                  |\n   |   \
    \               Option<isize>\n\nerror[E0369]: cannot subtract `{integer}` from\
    \ `Option<isize>`\n  --> /tmp/tmp2sac1ick.rs:13:33\n   |\n13 |         n => fib(n\
    \ - 1) + fib(n - 2)\n   |                               - ^ - {integer}\n   |\
    \                               |\n   |                               Option<isize>\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 || n\
    \ == 1 {\n        return n;\n    }\n    fib(n + 1).clone() + fib(n).clone()\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n    fib(n + 1) + fib(n + 2)\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n\n    let mut a = 1;\n    let mut b = 1;\n    for i\
    \ in 0..n {\n        let tmp = a + b;\n        a = b;\n        b = tmp;\n    }\n\
    \    b\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `55`', /tmp/tmp207x3qsq.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut n1: isize\
    \ = n.checked_add((n - 1) / 2) as isize;\n    let mut n2: isize = n.checked_add((n\
    \ - 2) / 2) as isize;\n    loop {\n        if n1 < 2 {\n            n1 += 1;\n\
    \        } else {\n            n2 += 1;\n        }\n        if n2 < 2 {\n    \
    \        n2 += 1;\n        }\n        if n1 == n2 {\n            break;\n    \
    \    }\n    }\n    n1\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0605]: non-primitive cast: `Option<isize>` as `isize`\n --> /tmp/tmp0ivu3vua.rs:9:25\n\
    \  |\n9 |     let mut n1: isize = n.checked_add((n - 1) / 2) as isize;\n  |  \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression\
    \ can only be used to convert between primitive types or to coerce to a specific\
    \ trait object\n\nerror[E0605]: non-primitive cast: `Option<isize>` as `isize`\n\
    \  --> /tmp/tmp0ivu3vua.rs:10:25\n   |\n10 |     let mut n2: isize = n.checked_add((n\
    \ - 2) / 2) as isize;\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0605`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n\n    fib(n + 1) + fib(n + 2)\n}\n\nfn main() {\n  \
    \  let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut n1: isize\
    \ = 0;\n    let mut n2: isize = 1;\n\n    for _ in 0..n {\n        if n1 < n2\
    \ {\n            n1 += 1;\n        }\n        else {\n            n2 += 1;\n \
    \       }\n    }\n\n    n2\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `55`', /tmp/tmp5mz_ql75.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n\n    }\n\n    fib(n-1) + fib(n-2)\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return n;\n    }\n\n    if n > 2 {\n        return fib(n - 1) + fib(n\
    \ - 2);\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0317]: `if` may be missing an `else` clause\n  --> /tmp/tmpg_2su5w4.rs:13:5\n\
    \   |\n8  |   fn fib(n: isize) -> isize {\n   |                       ----- expected\
    \ `isize` because of this return type\n...\n13 | /     if n > 2 {\n14 | |    \
    \     return fib(n - 1) + fib(n - 2);\n15 | |     }\n   | |_____^ expected `isize`,\
    \ found `()`\n   |\n   = note: `if` expressions without `else` evaluate to `()`\n\
    \   = help: consider adding an `else` block that evaluates to the expected type\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0317`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    n <= 2 ? 1 : (fib(n\
    \ - 2) + fib(n - 1))\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1`\n\
    \ --> /tmp/tmp6bbdht_o.rs:9:14\n  |\n9 |     n <= 2 ? 1 : (fib(n - 2) + fib(n\
    \ - 1))\n  |              ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut f0 = 1;\n\
    \    let mut f1 = 1;\n    let mut f2 = 1;\n    if n > 2 {\n        f0 = 0;\n \
    \       f1 = 1;\n        f2 = 1;\n        for _ in 0..n - 2 {\n            let\
    \ f = f0 + f1;\n            f1 = f2;\n            f2 = f;\n        }\n    }\n\
    \    f2\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `55`', /tmp/tmp9dt9_g00.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return 1;\n    }\n\n    // If n is odd, multiply by fib(n - 2) + fib(n\
    \ - 1).\n    // Else return fib(n - 1) + fib(n - 2).\n    let result = (n - 2)\
    \ * fib(n - 1) + fib(n - 2);\n    if n % 2 == 1 {\n        result\n    } else\
    \ {\n        result\n    }\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `137861`,\n right: `55`', /tmp/tmpsm8vnjoc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 0;\n\
    \    let mut b = 1;\n    for i in 0..n {\n        let temp = a;\n        a = b;\n\
    \        b = temp + b;\n    }\n    b\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmp9tq4sjbu.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 || n\
    \ == 1 {\n        return n;\n    }\n\n    fib(n) + fib(n - 1)\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n\n    }\n\n    fib(n-1) + fib(n-2)\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return n;\n    }\n    fib_rec(n - 1, n - 2);\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib_rec` in this scope\n  --> /tmp/tmpg_5f3zs4.rs:12:5\n\
    \   |\n12 |     fib_rec(n - 1, n - 2);\n   |     ^^^^^^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpg_5f3zs4.rs:8:21\n  |\n8 | fn fib(n:\
    \ isize) -> isize {\n  |    ---              ^^^^^ expected `isize`, found `()`\n\
    \  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    // Special case\
    \ for n = 0 --> 0 fib\n    if n == 0 {\n        return 0;\n    }\n\n    // Special\
    \ case for n = 1 --> 1 fib\n    if n == 1 {\n        return 1;\n    }\n\n    //\
    \ Use recursion to calculate fibonacci number\n    // when n is greater than 2\n\
    \    return fib_recur(n);\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fib_recur` in this scope\n  --> /tmp/tmpjfx0jvz6.rs:21:12\n\
    \   |\n21 |     return fib_recur(n);\n   |            ^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n    fib(n + 1).clone()\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    use std::cmp::Ordering;\n\
    \    if n <= 2 {\n        return n;\n    }\n\n    fn compute(mut n: isize) ->\
    \ isize {\n        if n < 2 {\n            return n;\n        }\n\n        n -=\
    \ 1;\n        compute(n - 2) + compute(n - 1);\n    }\n\n    compute(n);\n}\n\n\
    fn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n  \
    \  assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering`\n --> /tmp/tmpzm8ow2y0.rs:9:9\n\
    \  |\n9 |     use std::cmp::Ordering;\n  |         ^^^^^^^^^^^^^^^^^^\n  |\n \
    \ = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzm8ow2y0.rs:8:21\n   |\n8  | fn fib(n: isize) -> isize\
    \ {\n   |    ---              ^^^^^ expected `isize`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    ...\n23 |     compute(n);\n   |               - help: remove this semicolon\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpzm8ow2y0.rs:14:33\n   |\n14 |  \
    \   fn compute(mut n: isize) -> isize {\n   |        -------                 \
    \ ^^^^^ expected `isize`, found `()`\n   |        |\n   |        implicitly returns\
    \ `()` as its body has no tail or `return` expression\n...\n20 |         compute(n\
    \ - 2) + compute(n - 1);\n   |                                        - help:\
    \ remove this semicolon\n\nerror: aborting due to 2 previous errors; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fib(n, 1).0\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \ --> /tmp/tmpkbm03cwg.rs:9:5\n  |\n9 |     fib(n, 1).0\n  |     ^^^ -  - supplied\
    \ 2 arguments\n  |     |\n  |     expected 1 argument\n  |\nnote: function defined\
    \ here\n --> /tmp/tmpkbm03cwg.rs:8:4\n  |\n8 | fn fib(n: isize) -> isize {\n \
    \ |    ^^^ --------\n\nerror[E0610]: `isize` is a primitive type and therefore\
    \ doesn't have fields\n --> /tmp/tmpkbm03cwg.rs:9:15\n  |\n9 |     fib(n, 1).0\n\
    \  |               ^\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0610.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 || n\
    \ == 1 {\n        return n;\n    }\n    return fib(n-2) + fib(n-1);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    debug_assert!(n\
    \ > 0);\n    if n <= 1 {\n        return n;\n    }\n    fib(n + 1).call(0)\n}\n\
    \nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `call` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp3v7olrzy.rs:13:16\n   |\n13 |     fib(n + 1).call(0)\n\
    \   |                ^^^^ method not found in `isize`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    assert!(n >= 0);\n\
    \    assert!(n <= 31);\n\n    let mut a = 0;\n    let mut b = 1;\n    let mut\
    \ fib: isize = 0;\n\n    for i in 0..n {\n        fib += a;\n        (a, b) =\
    \ (b, a + b);\n    }\n    fib\n}\n\nfn main() {\n    let candidate = fib;\n  \
    \  assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `88`,\n right: `55`', /tmp/tmpjnxov_0f.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    fn next() -> (isize,\
    \ isize) {\n        let (a, b) = (2, 1);\n        if n == 0 { 0 }\n        else\
    \ if n < 2 { b }\n        else { let (a, b) = (b, a + b) }\n    }\n    loop {\n\
    \        match next() {\n            (0, 0) => break,\n            (mut a, b)\
    \ => a,\n        }\n    }\n    a\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpzfeyuu63.rs:13:40\n   |\n13 |         else { let (a, b) = (b, a\
    \ + b) }\n   |                                        ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror[E0434]: can't capture dynamic environment\
    \ in a fn item\n  --> /tmp/tmpzfeyuu63.rs:11:12\n   |\n11 |         if n == 0\
    \ { 0 }\n   |            ^\n   |\n   = help: use the `|| { ... }` closure form\
    \ instead\n\nerror[E0434]: can't capture dynamic environment in a fn item\n  -->\
    \ /tmp/tmpzfeyuu63.rs:12:17\n   |\n12 |         else if n < 2 { b }\n   |    \
    \             ^\n   |\n   = help: use the `|| { ... }` closure form instead\n\n\
    error[E0425]: cannot find value `a` in this scope\n  --> /tmp/tmpzfeyuu63.rs:21:5\n\
    \   |\n21 |     a\n   |     ^ help: a local variable with a similar name exists:\
    \ `n`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzfeyuu63.rs:18:27\n   |\n\
    18 |             (mut a, b) => a,\n   |                           ^ expected `()`,\
    \ found `isize`\n   |\nhelp: consider using a semicolon here\n   |\n19 |     \
    \    };\n   |          +\nhelp: you might have meant to return this value\n  \
    \ |\n16 ~         return match next() {\n17 |             (0, 0) => break,\n18\
    \ |             (mut a, b) => a,\n19 ~         };\n   |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzfeyuu63.rs:11:21\n   |\n9  |     fn next() -> (isize,\
    \ isize) {\n   |                  -------------- expected `(isize, isize)` because\
    \ of return type\n10 |         let (a, b) = (2, 1);\n11 |         if n == 0 {\
    \ 0 }\n   |                     ^ expected tuple, found integer\n   |\n   = note:\
    \ expected tuple `(isize, isize)`\n               found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzfeyuu63.rs:12:25\n   |\n9  |     fn next()\
    \ -> (isize, isize) {\n   |                  -------------- expected `(isize,\
    \ isize)` because of return type\n...\n12 |         else if n < 2 { b }\n   |\
    \                         ^ expected tuple, found integer\n   |\n   = note: expected\
    \ tuple `(isize, isize)`\n               found type `{integer}`\n\nerror: abor"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    assert!(n >= 0\
    \ && n < 100000);\n    if n==0 || n==1 {\n        return n;\n    }\n    fib(n-1)\
    \ + fib(n-2)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    // use std::cmp::min;\n\
    \    let mut f0 = 1;\n    let mut f1 = 1;\n    for i in 0..n {\n        let new_f0\
    \ = f0;\n        let new_f1 = f1;\n        f0 = new_f1;\n        f1 = new_f0 +\
    \ new_f1;\n    }\n    f0\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `89`,\n right: `55`', /tmp/tmpj34uoxpk.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 0 {\n\
    \        return 0;\n    }\n    fib(n-1) + fib(n-2)\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `55`', /tmp/tmpmkzxrw6l.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    (1..n).fold(0,\
    \ |a, b| a + b)\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `45`,\n right: `55`', /tmp/tmp1hdbry_v.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        _ => fib(n - 1) + fib(n - 2)\n    }\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    // special cases\n\
    \    if n < 2 {\n        return n;\n    }\n\n    if n == 2 {\n        return 1;\n\
    \    }\n\n    let mut a = 0;\n    let mut b = 1;\n    while n > 2 {\n        let\
    \ c = a + b;\n        a = b;\n        b = c;\n        n -= 1;\n    }\n    b\n\
    }\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpugbvx704.rs:24:9\n\
    \   |\n8  | fn fib(n: isize) -> isize {\n   |        - help: consider making this\
    \ binding mutable: `mut n`\n...\n24 |         n -= 1;\n   |         ^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if (n < 2) =>\
    \ 1\n    else => fib(n-1) + fib(n-2)\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: "error: expected `{`, found `=>`\n --> /tmp/tmpcwtn09h1.rs:9:16\n  |\n9\
    \ |     if (n < 2) => 1\n  |     --         ^^ expected `{`\n  |     |\n  |  \
    \   this `if` expression has a condition, but no block\n\nerror: aborting due\
    \ to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\nfn main() {\n\
    \    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    // use 'return'\
    \ statement instead of 'return' to avoid return value optimization on ARM processors\n\
    \    if n == 0 {\n        return 0;\n    }\n    if n == 1 || n == 2 {\n      \
    \  return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nfn main() {\n \
    \   let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n == 0 || n\
    \ == 1 {\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    assert!(n > 0);\n\
    \n    let mut f1 = 1;\n    let mut f2 = 1;\n\n    for _ in 0..n {\n        let\
    \ f3 = f1 + f2;\n        f1 = f2;\n        f2 = f3;\n    }\n\n    f2\n}\n\nfn\
    \ main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n   \
    \ assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `144`,\n right: `55`', /tmp/tmp9nws20ov.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    fib(n + 1) + fib(n-1)\n}\n\nfn main() {\n    let\
    \ candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    use std::mem;\n\
    \n    fn cache() -> isize {\n        let mut value = mem::uninitialized();\n \
    \       let mut cache = [0, 1];\n        for _ in 0..n {\n            value =\
    \ cache[0 % 2];\n            cache[1 %= 2] = value;\n        }\n        value\n\
    \    }\n\n    cache() * cache() + 1\n}\n\nfn main() {\n    let candidate = fib;\n\
    \    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8),\
    \ 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n\
    }\n"
  stdout: ''
  stderr: "error[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmp7fc2cogd.rs:14:21\n\
    \   |\n14 |         for _ in 0..n {\n   |                     ^\n   |\n   = help:\
    \ use the `|| { ... }` closure form instead\n\nwarning: use of deprecated function\
    \ `std::mem::uninitialized`: use `mem::MaybeUninit` instead\n  --> /tmp/tmp7fc2cogd.rs:12:30\n\
    \   |\n12 |         let mut value = mem::uninitialized();\n   |              \
    \                ^^^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]` on by default\n\
    \nerror[E0067]: invalid left-hand side of assignment\n  --> /tmp/tmp7fc2cogd.rs:16:21\n\
    \   |\n16 |             cache[1 %= 2] = value;\n   |                   - ^^\n\
    \   |                   |\n   |                   cannot assign to this expression\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `()`\n  --> /tmp/tmp7fc2cogd.rs:16:13\n\
    \   |\n16 |             cache[1 %= 2] = value;\n   |             ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `()`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `(Bound<usize>, Bound<usize>)`\n\
    \   = note: required because of the requirements on the impl of `Index<()>` for\
    \ `[{integer}]`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\
    \nSome errors have detailed explanations: E0067, E0277, E0434.\nFor more information\
    \ about an error, try `rustc --explain E0067`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut f1 = 1;\n\
    \    let mut f2 = 1;\n    let mut c = 1;\n    while n > 2 {\n        let p = f1;\n\
    \        let q = f2;\n        f1 = f2;\n        f2 = p;\n        c = p + q + c;\n\
    \        n = n - 1;\n    }\n    return c;\n}\n\nfn main() {\n    let candidate\
    \ = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12),\
    \ 144);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpgrqkj5z3.rs:18:9\n\
    \   |\n8  | fn fib(n: isize) -> isize {\n   |        - help: consider making this\
    \ binding mutable: `mut n`\n...\n18 |         n = n - 1;\n   |         ^^^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       return n;\n    }\n    let mut first = 0;\n    let mut second = 1;\n  \
    \  let mut fib_sum = first;\n    for i in 1..n {\n        fib_sum += second;\n\
    \        first = second;\n        second = fib_sum;\n    }\n    fib_sum\n}\n\n\
    fn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n  \
    \  assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `256`,\n right: `55`', /tmp/tmpttl68q1u.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n < 2 {\n \
    \       n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return n;\n    }\n\n    fib(n * 2 + 1) as isize\n}\n\nfn main() {\n \
    \   let candidate = fib;\n    assert_eq!(candidate(10), 55);\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11), 89);\n\
    \    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to multiply with overflow', /tmp/tmp55zmtzl8.rs:13:9\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a1 = 1;\n\
    \    let mut a2 = 1;\n    for i in 0..n {\n        a1 = a1 + a2;\n        a2 =\
    \ a1;\n    }\n    a1\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1024`,\n right: `55`', /tmp/tmpvzpgw9nv.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    match n {\n  \
    \      0 => 0,\n        1 => 1,\n        _ => fib(n-1) + fib(n-2),\n    }\n}\n\
    \nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10), 55);\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n    assert_eq!(candidate(11),\
    \ 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
    /// 1\n/// >>> fib(8)\n/// 21\nfn fib(n: isize) -> isize {\n    let mut a = 1;\n\
    \    let mut b = 1;\n    for i in 1..n {\n        (a, b) = (b, a+b);\n    }\n\
    \    a\n}\n\nfn main() {\n    let candidate = fib;\n    assert_eq!(candidate(10),\
    \ 55);\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(8), 21);\n\
    \    assert_eq!(candidate(11), 89);\n    assert_eq!(candidate(12), 144);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
