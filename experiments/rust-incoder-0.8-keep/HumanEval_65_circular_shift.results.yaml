name: HumanEval_65_circular_shift
language: rust
results:
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift < 0 { return \"-\" + &circular_shift(x, -shift) }\n\
    \    let mut s = String::new();\n    let mut shift = shift;\n    while shift !=\
    \ 0 {\n        s += &x.to_string()[shift..];\n        shift -= 1;\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `&String` to `&str`\n --> /tmp/tmpzgjll2cc.rs:9:31\n\
    \  |\n9 |     if shift < 0 { return \"-\" + &circular_shift(x, -shift) }\n  |\
    \                           --- ^ -------------------------- &String\n  |    \
    \                       |   |\n  |                           |   `+` cannot be\
    \ used to concatenate two `&str` strings\n  |                           &str\n\
    \  |\n  = note: string concatenation requires an owned `String` on the left\n\
    help: create an owned `String` from a string reference\n  |\n9 |     if shift\
    \ < 0 { return \"-\".to_owned() + &circular_shift(x, -shift) }\n  |          \
    \                    +++++++++++\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `RangeFrom<isize>`\n  --> /tmp/tmpzgjll2cc.rs:13:15\n   |\n13 | \
    \        s += &x.to_string()[shift..];\n   |               ^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n   |\n   = help: the trait\
    \ `Index<RangeFrom<isize>>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::with_capacity(x.checked_mul(10).unwrap_or(10));\n\
    \    let mut i = x.checked_mul(10).unwrap_or(10);\n    while i >= 0 {\n      \
    \  if shift > 0 {\n            s.push(*i % 10);\n        }\n        i /= 10;\n\
    \        shift -= 1;\n    }\n    &s[..].reverse()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl9h0leo_.rs:9:39\n  |\n9 |\
    \     let mut s = String::with_capacity(x.checked_mul(10).unwrap_or(10));\n  |\
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut s = String::with_capacity(x.checked_mul(10).unwrap_or(10).try_into().unwrap());\n\
    \  |                                                                      ++++++++++++++++++++\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpl9h0leo_.rs:13:20\n\
    \   |\n13 |             s.push(*i % 10);\n   |                    ^^\n\nerror[E0599]:\
    \ no method named `reverse` found for type `str` in the current scope\n  --> /tmp/tmpl9h0leo_.rs:18:12\n\
    \   |\n18 |     &s[..].reverse()\n   |            ^^^^^^^ method not found in\
    \ `str`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        let mut digits = x.to_string(10);\n\
    \        digits.reverse();\n        return digits;\n    }\n    let mut digits\
    \ = x.to_string(10);\n    for i in 0..(x.len() - shift) {\n        digits[shift\
    \ as usize] = digits[(shift as usize) - i];\n    }\n    return digits;\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp02zdfxs2.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0061]: this function\
    \ takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmp02zdfxs2.rs:10:28\n\
    \     |\n10   |         let mut digits = x.to_string(10);\n     |            \
    \                ^^^^^^^^^ -- supplied 1 argument\n     |                    \
    \        |\n     |                            expected 0 arguments\n     |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp02zdfxs2.rs:11:16\n\
    \   |\n11 |         digits.reverse();\n   |                ^^^^^^^ help: there\
    \ is an associated function with a similar name: `reserve`\n\nerror[E0061]: this\
    \ function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmp02zdfxs2.rs:14:24\n\
    \     |\n14   |     let mut digits = x.to_string(10);\n     |                \
    \        ^^^^^^^^^ -- supplied 1 argument\n     |                        |\n \
    \    |                        expected 0 arguments\n     |\nnote: associated function\
    \ defined here\n\nerror[E0599]: no method named `len` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmp02zdfxs2.rs:15:20\n   |\n15 |     for i in\
    \ 0..(x.len() - shift) {\n   |                    ^^^ method not found in `isize`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp02zdfxs2.rs:16:9\n\
    \   |\n16 |         digits[shift as usize] = digits[(shift as usize) - i];\n \
    \  |         ^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n  \
    \ |\n   = help: the trait `Index<usize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std:"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits: Vec<usize> = x.to_string().chars().collect();\n\
    \    let len = digits.length();\n    if shift == 0 {\n        return digits.to_ascii_string();\n\
    \    }\n    for i in 0..shift {\n        let digit = digits[len - 1 - i];\n  \
    \      digits[i] = digits[len - 1 - shift - i];\n        digits[len - 1 - shift\
    \ - i] = digit;\n    }\n    digits.to_ascii_string()\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `length` found for struct `Vec<usize>` in\
    \ the current scope\n  --> /tmp/tmpbvay856f.rs:10:22\n   |\n10 |     let len =\
    \ digits.length();\n   |                      ^^^^^^ help: there is an associated\
    \ function with a similar name: `len`\n\nerror[E0277]: a value of type `Vec<usize>`\
    \ cannot be built from an iterator over elements of type `char`\n    --> /tmp/tmpbvay856f.rs:9:56\n\
    \     |\n9    |     let mut digits: Vec<usize> = x.to_string().chars().collect();\n\
    \     |                                                        ^^^^^^^ value of\
    \ type `Vec<usize>` cannot be built from `std::iter::Iterator<Item=char>`\n  \
    \   |\n     = help: the trait `FromIterator<char>` is not implemented for `Vec<usize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0599]: no method named `to_ascii_string` found\
    \ for struct `Vec<usize>` in the current scope\n  --> /tmp/tmpbvay856f.rs:12:23\n\
    \   |\n12 |         return digits.to_ascii_string();\n   |                   \
    \    ^^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `to_vec_in`\n\nerror[E0277]: the type `[usize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpbvay856f.rs:16:9\n   |\n16 |         digits[i] = digits[len - 1\
    \ - shift - i];\n   |         ^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[usize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<usize>`\n\nerror[E0599]: no method named `to_ascii_string` found for\
    \ struct `Vec<usize>` in the current scope\n  --> /tmp/tmpbvay856f.rs:19:12\n\
    \   |\n19 |     digits.to_ascii_string()\n   |            ^^^^^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `to_vec_in`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::with_capacity(x.to_string().len());\n \
    \   let mut v = x;\n    match shift {\n        0 => ()\n        _ => loop {\n\
    \            s.push_str(&format!(\"{}\", v % 10));\n            v /= 10;\n   \
    \         s.push_str(&format!(\"{}\", v % 10));\n            v /= 10;\n      \
    \      s.push_str(&format!(\"{}\", v % 10));\n            v /= 10;\n         \
    \   s.push_str(&format!(\"{}\", v % 10));\n            v /= 10;\n            s.push_str(&format!(\"\
    {}\", v % 10));\n            v /= 10;\n            s.push_str(&format!(\"{}\"\
    , v % 10));\n            v /= 10;\n            s.push_str(&format!(\"{}\", v %\
    \ 10));\n            v /= 10;\n            s.push_str(&format!(\"{}\", v % 10));\n\
    \            v /= 10;\n            s.push_str(&format!(\"{}\", v % 10));\n   \
    \         v /= 10;\n            s.push_str(&format!(\"{}\", v % 10));\n      \
    \      v /= 10;\n            s.push_str(&format!(\"{}\", v % 10));\n         \
    \   v /= 10;\n            s.push_str(&format!(\"{}\", v % 10));\n            v\
    \ /= 10;\n            s.push_str(&format!(\"{}\", v % 10));\n            v /=\
    \ 10;\n            s.push_str(&format!(\"{}\", v % 10));\n            v /= 10;\n\
    \            s.push_str(&format!(\"{}\", v % 10));\n            v /= 10;\n   \
    \         s.push_str(&format!(\"{}\", v % 10));\n            v /= 10;\n      \
    \      s.push_str(&format!(\"{}\", v % 10));\n            v /= 10;\n         \
    \   s.push_str(&format!(\"{}\", v % 10));\n            v /= 10;\n            s.push_str(&format!(\"\
    {}\", v % 10));\n            v /= 10;\n            s.push_str(&format!(\"{}\"\
    , v % 10));\n            v /= 10;\n            s.push_str(&format!(\"{}\", v %\
    \ 10));\n            v /= 10;\n            s.push_str(&format!(\"{}\", v % 10));\n\
    \            v /= 10;\n            s.push_str(&format!(\"{}\", v % 10));\n   \
    \         v /= 10;\n            s.push_str(&format!(\"{}\", v % 10));\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpocik8x1z.rs:70:3\n\
    \   |\n8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \                                               - unclosed delimiter\n...\n11\
    \ |     match shift {\n   |                 - unclosed delimiter\n12 |       \
    \  0 => ()\n13 |         _ => loop {\n   |                   - this delimiter\
    \ might not be properly closed...\n...\n61 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n70 | }\n   |   ^\n\nerror: expected one of\
    \ `,`, `.`, `?`, `}`, or an operator, found reserved identifier `_`\n  --> /tmp/tmpocik8x1z.rs:8:53\n\
    \   |\n8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \                                               ^ unclosed delimiter\n...\n12\
    \ |         0 => ()\n   |           --   -\n   |           |    |\n   |      \
    \     |    expected one of `,`, `.`, `?`, `}`, or an operator\n   |          \
    \ |    help: `}` may belong here\n   |           while parsing the `match` arm\
    \ starting here\n13 |         _ => loop {\n   |         ^ unexpected token\n\n\
    error: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    String::from_utf8(x.to_string()).rotate_left(shift).to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptirobjno.rs:9:23\n  |\n9 |\
    \     String::from_utf8(x.to_string()).rotate_left(shift).to_string()\n  |   \
    \                    ^^^^^^^^^^^^^ expected struct `Vec`, found struct `String`\n\
    \  |\n  = note: expected struct `Vec<u8>`\n             found struct `String`\n\
    \nerror[E0599]: no method named `rotate_left` found for enum `Result` in the current\
    \ scope\n --> /tmp/tmptirobjno.rs:9:38\n  |\n9 |     String::from_utf8(x.to_string()).rotate_left(shift).to_string()\n\
    \  |                                      ^^^^^^^^^^^ method not found in `Result<String,\
    \ FromUtf8Error>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut res = String::new();\n    if shift > x.len() {\n  \
    \      res.reverse();\n    }\n\n    for i in 1..shift {\n        res.insert(0,\
    \ x%10);\n        x /= 10;\n    }\n    res.insert(0, x);\n    res\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp2_7a9gbq.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp2_7a9gbq.rs:11:13\n\
    \   |\n11 |         res.reverse();\n   |             ^^^^^^^ help: there is an\
    \ associated function with a similar name: `reserve`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2_7a9gbq.rs:15:23\n   |\n15 |         res.insert(0, x%10);\n\
    \   |                       ^^^^ expected `char`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2_7a9gbq.rs:18:19\n   |\n18 |     res.insert(0,\
    \ x);\n   |                   ^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    for i in 0..shift {\n\
    \        if digits.len() < shift {\n            digits.insert(digits.len() - i,\
    \ 0);\n        } else {\n            digits = &digits[digits.len() - i - 1..];\n\
    \        }\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt_q73mfm.rs:11:27\n   |\n\
    11 |         if digits.len() < shift {\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |         if digits.len()\
    \ < shift.try_into().unwrap() {\n   |                                ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpt_q73mfm.rs:12:42\n   |\n12 |\
    \             digits.insert(digits.len() - i, 0);\n   |                      \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpt_q73mfm.rs:12:45\n   |\n12 |             digits.insert(digits.len()\
    \ - i, 0);\n   |                                             ^ expected `char`,\
    \ found `u8`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpt_q73mfm.rs:12:40\n\
    \   |\n12 |             digits.insert(digits.len() - i, 0);\n   |            \
    \                            ^ no implementation for `usize - isize`\n   |\n \
    \  = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpt_q73mfm.rs:14:45\n   |\n14 |             digits = &digits[digits.len()\
    \ - i - 1..];\n   |                                             ^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpt_q73mfm.rs:14:43\n\
    \   |\n14 |             digits = &digits[digits.len() - i - 1..];\n   |      \
    \                                     ^ no implementation for `usize - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let digits = x.to_string();\n    let mut result = String::new();\n\
    \    let mut pos = 0;\n    let mut carry = 0;\n    while shift > 0 {\n       \
    \ if carry == 0 {\n            result.push(digits[pos]);\n            pos += 1;\n\
    \        } else {\n            carry = digits[pos].chars().nth(1).unwrap() as\
    \ u32 * 10 + (digits[pos].chars().nth(2).unwrap() as u32 * 10 + digits[pos].chars().nth(3).unwrap()\
    \ as u32 * 10 + digits[pos].chars().nth(4).unwrap() as u32) * 10 + (digits[pos].chars().nth(5).unwrap()\
    \ as u32 * 10 + digits[pos].chars().nth(6).unwrap() as u32 * 10 + digits[pos].chars().nth(7).unwrap()\
    \ as u32) * 10;\n            pos += 1;\n        }\n        shift -= 1;\n    }\n\
    \    if shift != 0 {\n        result.push(digits[pos]);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmpsm4nfggs.rs:15:25\n   |\n15 |             result.push(digits[pos]);\n\
    \   |                         ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n\
    \   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n\
    \  --> /tmp/tmpsm4nfggs.rs:18:21\n   |\n18 | ...   carry = digits[pos].chars().nth(1).unwrap()\
    \ as u32 * 10 + (digits[pos].chars().nth(2).unwrap() as u32 * 10 + digits[pos].chars().nt...\n\
    \   |               ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n  \
    \ |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n\
    \  --> /tmp/tmpsm4nfggs.rs:18:72\n   |\n18 | ...   carry = digits[pos].chars().nth(1).unwrap()\
    \ as u32 * 10 + (digits[pos].chars().nth(2).unwrap() as u32 * 10 + digits[pos].chars().nt...\n\
    \   |                                                                  ^^^^^^^^^^^\
    \ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as I"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for &c in x.to_string().chars().take(shift\
    \ as usize) {\n        s.push_str(&c.to_string());\n    }\n    if s.len() > shift\
    \ {\n        s.trim_left_matches('0');\n        s[shift..].to_string()\n    }\
    \ else {\n        s.reverse()\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgbc7k5mo.rs:10:9\n   |\n\
    10 |     for &c in x.to_string().chars().take(shift as usize) {\n   |        \
    \ ^^    ------------------------------------------ this expression has type `Option<char>`\n\
    \   |         |\n   |         expected `char`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `c`\n   |\n   = note:   expected\
    \ type `char`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpgbc7k5mo.rs:13:18\n   |\n13 |     if s.len() > shift {\n   |  \
    \                ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    13 |     if s.len() > shift.try_into().unwrap() {\n   |                      \
    \ ++++++++++++++++++++\n\nwarning: use of deprecated associated function `core::str::<impl\
    \ str>::trim_left_matches`: superseded by `trim_start_matches`\n  --> /tmp/tmpgbc7k5mo.rs:14:11\n\
    \   |\n14 |         s.trim_left_matches('0');\n   |           ^^^^^^^^^^^^^^^^^\
    \ help: replace the use of the deprecated associated function: `trim_start_matches`\n\
    \   |\n   = note: `#[warn(deprecated)]` on by default\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmpgbc7k5mo.rs:15:9\n\
    \   |\n15 |         s[shift..].to_string()\n   |         ^^^^^^^^^^ `String` cannot\
    \ be indexed by `RangeFrom<isize>`\n   |\n   = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpgbc7k5mo.rs:17:11\n   |\n17 |         s.reverse()\n\
    \   |           ^^^^^^^ help: there"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::with_capacity(x.to_digits().len());\n\
    \    let mut x = x;\n    let mut shift = shift;\n\n    // while x >= shift\n \
    \   while x >= shift {\n        // shift right by one digit\n        x >>= 1;\n\
    \        // add current digit to result and decrement shift\n        result +=\
    \ x.to_string();\n        shift -= 1;\n    }\n\n    if shift < x.to_digits().len()\
    \ {\n        // add remainder to result\n        result += x.to_string();\n  \
    \  }\n\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmp88pyp9lm.rs:9:46\n  |\n9 |     let mut result =\
    \ String::with_capacity(x.to_digits().len());\n  |                           \
    \                   ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp88pyp9lm.rs:18:19\n   |\n18 |         result += x.to_string();\n\
    \   |                   ^^^^^^^^^^^^^\n   |                   |\n   |        \
    \           expected `&str`, found struct `String`\n   |                   help:\
    \ consider borrowing here: `&x.to_string()`\n\nerror[E0599]: no method named `to_digits`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmp88pyp9lm.rs:22:18\n\
    \   |\n22 |     if shift < x.to_digits().len() {\n   |                  ^^^^^^^^^\
    \ method not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp88pyp9lm.rs:24:19\n\
    \   |\n24 |         result += x.to_string();\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&str`, found struct\
    \ `String`\n   |                   help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    format!(\"{}\", x.to_digits(shift).rev()[shift..]).to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpp8jwl4fp.rs:9:21\n  |\n9 |     format!(\"{}\", x.to_digits(shift).rev()[shift..]).to_string()\n\
    \  |                     ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    let mut result = String::new();\n\
    \    while digits.len() > shift {\n        result.push(digits[digits.len() - shift..digits.len()\
    \ - 1].reverse());\n        digits = &digits[digits.len() - shift..digits.len()\
    \ - 1];\n    }\n    result.push(&digits[0..digits.len() - shift]);\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw7a85eda.rs:11:26\n   |\n\
    11 |     while digits.len() > shift {\n   |                          ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     while digits.len()\
    \ > shift.try_into().unwrap() {\n   |                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpw7a85eda.rs:12:43\n   |\n12 |\
    \         result.push(digits[digits.len() - shift..digits.len() - 1].reverse());\n\
    \   |                                           ^^^^^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpw7a85eda.rs:12:41\n\
    \   |\n12 |         result.push(digits[digits.len() - shift..digits.len() - 1].reverse());\n\
    \   |                                         ^ no implementation for `usize -\
    \ isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0599]:\
    \ no method named `reverse` found for type `str` in the current scope\n  --> /tmp/tmpw7a85eda.rs:12:68\n\
    \   |\n12 |         result.push(digits[digits.len() - shift..digits.len() - 1].reverse());\n\
    \   |                                                                    ^^^^^^^\
    \ method not found in `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw7a85eda.rs:13:41\n\
    \   |\n13 |         digits = &digits[digits.len() - shift..digits.len() - 1];\n\
    \   |                                         ^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpw7a85eda.rs:13:39\n\
    \   |\n13 |         digits = &digits[digits.len() - shift..digits.len() - 1];\n\
    \   |                      "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift == 0 {\n        return String::from(x);\n    }\n \
    \   let mut res = String::new();\n    while x >= 10 {\n        res.push_str(&x.to_digit(10).unwrap().to_string());\n\
    \        res.push_back(' ');\n        x /= 10;\n    }\n    res.push_str(x.to_digit(10).unwrap().to_string());\n\
    \    res.push_str(&x[..shift].to_string());\n    res.to_string()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `String: From<isize>` is not satisfied\n\
    \  --> /tmp/tmp4e5ap2nw.rs:10:16\n   |\n10 |         return String::from(x);\n\
    \   |                ^^^^^^^^^^^^ the trait `From<isize>` is not implemented for\
    \ `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror[E0599]: no method named `to_digit` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp4e5ap2nw.rs:14:25\n   |\n14 |         res.push_str(&x.to_digit(10).unwrap().to_string());\n\
    \   |                         ^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `push_back` found for struct `String` in the current scope\n\
    \  --> /tmp/tmp4e5ap2nw.rs:15:13\n   |\n15 |         res.push_back(' ');\n   |\
    \             ^^^^^^^^^ method not found in `String`\n\nerror[E0599]: no method\
    \ named `to_digit` found for type `isize` in the current scope\n  --> /tmp/tmp4e5ap2nw.rs:18:20\n\
    \   |\n18 |     res.push_str(x.to_digit(10).unwrap().to_string());\n   |     \
    \               ^^^^^^^^ method not found in `isize`\n\nerror[E0608]: cannot index\
    \ into a value of type `isize`\n  --> /tmp/tmp4e5ap2nw.rs:19:19\n   |\n19 |  \
    \   res.push_str(&x[..shift].to_string());\n   |                   ^^^^^^^^^^\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599, E0608.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift < 0 {\n        x.to_string().parse::<isize>().unwrap().to_string().reverse()\n\
    \    } else {\n        x.to_string().parse::<isize>().unwrap().to_string().chars().enumerate().rev()\n\
    \            .filter(|(_, i)| i % shift != 0).fold(String::new(), |mut acc, (_,\
    \ i)| {\n                acc.push_str(&i.to_string());\n                acc\n\
    \            })\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpgz26qh0j.rs:10:61\n   |\n10 |         x.to_string().parse::<isize>().unwrap().to_string().reverse()\n\
    \   |                                                             ^^^^^^^ help:\
    \ there is an associated function with a similar name: `reserve`\n\nerror[E0277]:\
    \ the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n    --> /tmp/tmpgz26qh0j.rs:12:81\n\
    \     |\n12   |         x.to_string().parse::<isize>().unwrap().to_string().chars().enumerate().rev()\n\
    \     |                                                                      \
    \           ^^^ the trait `ExactSizeIterator` is not implemented for `Chars<'_>`\n\
    \     |\n     = help: the following other types implement trait `ExactSizeIterator`:\n\
    \               &mut I\n               Args\n               ArgsOs\n         \
    \      ArrayChunks<'_, T, N>\n               ArrayChunksMut<'_, T, N>\n      \
    \         ArrayWindows<'_, T, N>\n               Box<I, A>\n               Chunks<'_,\
    \ T>\n             and 109 others\n     = note: required because of the requirements\
    \ on the impl of `DoubleEndedIterator` for `Enumerate<Chars<'_>>`\nnote: required\
    \ by a bound in `rev`\n\nerror[E0599]: the method `filter` exists for struct `Rev<Enumerate<Chars<'_>>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpgz26qh0j.rs:13:14\n \
    \  |\n13 |               .filter(|(_, i)| i % shift != 0).fold(String::new(),\
    \ |mut acc, (_, i)| {\n   |                ^^^^^^ method cannot be called on `Rev<Enumerate<Chars<'_>>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `Enumerate<Chars<'_>>: DoubleEndedIterator`\n\
    \           which is required by `Rev<Enumerate<Chars<'_>>>: Iterator`\n     \
    \      `Rev<Enumerate<Chars<'_>>>: Iterator`\n           which is required by\
    \ `&mut Rev<Enumerate<Chars<'_>>>: Iterator`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    // If the shifted number is zero, return the integer as is\n\
    \    if shift <= 0 {\n        return x.to_string();\n    }\n    let mut rv = x.to_string();\n\
    \    while shift > rv.len() {\n        rv.push(rv.pop().to_string());\n      \
    \  shift -= rv.len();\n    }\n    rv.insert(shift, rv.len() - shift, '0');\n \
    \   rv\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6isufafu.rs:14:19\n   |\n\
    14 |     while shift > rv.len() {\n   |                   ^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     while shift > rv.len().try_into().unwrap()\
    \ {\n   |                           ++++++++++++++++++++\n\nerror[E0599]: `Option<char>`\
    \ doesn't implement `std::fmt::Display`\n   --> /tmp/tmp6isufafu.rs:15:26\n  \
    \  |\n15  |           rv.push(rv.pop().to_string());\n    |                  \
    \          ^^^^^^^^^ `Option<char>` cannot be formatted with the default formatter\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<char>: std::fmt::Display`\n            which is required by `Option<char>:\
    \ ToString`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6isufafu.rs:16:18\n\
    \   |\n16 |         shift -= rv.len();\n   |                  ^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot subtract-assign `usize` from\
    \ `isize`\n  --> /tmp/tmp6isufafu.rs:16:15\n   |\n16 |         shift -= rv.len();\n\
    \   |               ^^ no implementation for `isize -= usize`\n   |\n   = help:\
    \ the trait `SubAssign<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `SubAssign<Rhs>`:\n             <f32 as\
    \ SubAssign<&f32>>\n             <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n\
    \             <f64 as SubAssign>\n             <i128 as SubAssign<&i128>>\n  \
    \           <i128 as SubAssign>\n             <i16 as SubAssign<&i16>>\n     \
    \        <i16 as SubAssign>\n           and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6isufafu.rs:18:33\n   |\n18 |     rv.insert(shift, rv.len()\
    \ - shift, '0');\n   |                                 ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp6isufafu.rs:18:31\n\
    \   |\n18 |     rv.insert(shift, rv.len() - shift, '0');\n   |               \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::with_capacity(x.to_string().len()\
    \ + shift as usize);\n    for i in 1..shift {\n        result = result.insert(i,\
    \ x.to_string()[i]);\n    }\n    result.reverse();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp94ta4ryz.rs:11:32\n   |\n\
    11 |         result = result.insert(i, x.to_string()[i]);\n   |              \
    \                  ^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    11 |         result = result.insert(i.try_into().unwrap(), x.to_string()[i]);\n\
    \   |                                 ++++++++++++++++++++\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `isize`\n  --> /tmp/tmp94ta4ryz.rs:11:35\n\
    \   |\n11 |         result = result.insert(i, x.to_string()[i]);\n   |       \
    \                            ^^^^^^^^^^^^^^^^ `String` cannot be indexed by `isize`\n\
    \   |\n   = help: the trait `Index<isize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp94ta4ryz.rs:11:18\n\
    \   |\n9  |     let mut result = String::with_capacity(x.to_string().len() + shift\
    \ as usize);\n   |                      -----------------------------------------------------------\
    \ expected due to this value\n10 |     for i in 1..shift {\n11 |         result\
    \ = result.insert(i, x.to_string()[i]);\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `()`\n   |\nnote: method `insert` modifies its\
    \ receiver in-place\n  --> /tmp/tmp94ta4ryz.rs:11:25\n   |\n11 |         result\
    \ = result.insert(i, x.to_string()[i]);\n   |                  ------ ^^^^^^ this\
    \ call modifies `result` in-place\n   |                  |\n   |             \
    \     you probably want to use this value after calling the method...\n   = note:\
    \ ...instead of the `()` output of method `insert`\n\nerror[E0599]: no method\
    \ named `reverse` fou"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n\n    for i in 0..shift {\n\
    \        result.push(*('0' as char) + x % 10);\n        x = x / 10\n    }\n\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpst0aiq4r.rs:12:21\n\
    \   |\n12 |         result.push(*('0' as char) + x % 10);\n   |              \
    \       ^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    x.to_string().chars().enumerate().map(|(_, x)| {\n        let\
    \ n = x - shift + 1;\n        if n > 0 {\n            n as char\n        } else\
    \ {\n            '0' as char\n        }\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `isize` from `char`\n  --> /tmp/tmpgu8_e21i.rs:10:19\n\
    \   |\n10 |         let n = x - shift + 1;\n   |                 - ^ ----- isize\n\
    \   |                 |\n   |                 char\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = vec![0u8; x.checked_mul(10).unwrap_or(10)];\
    \ // 10 == max number of digits\n    for digit in digits.rev() {\n        *digit\
    \ %= 10;\n    }\n\n    if digits.len() < shift {\n        for _ in 0..shift -\
    \ digits.len() {\n            digits.push(0);\n        }\n    }\n\n    let mut\
    \ s = String::new();\n    for d in &digits {\n        *s += d as char;\n    }\n\
    \n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj21y162h.rs:9:32\n  |\n9 |\
    \     let mut digits = vec![0u8; x.checked_mul(10).unwrap_or(10)]; // 10 == max\
    \ number of digits\n  |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut digits\
    \ = vec![0u8; x.checked_mul(10).unwrap_or(10).try_into().unwrap()]; // 10 == max\
    \ number of digits\n  |                                                      \
    \         ++++++++++++++++++++\n\nerror[E0599]: `Vec<u8>` is not an iterator\n\
    \   --> /tmp/tmpj21y162h.rs:10:25\n    |\n10  |       for digit in digits.rev()\
    \ {\n    |                           ^^^ `Vec<u8>` is not an iterator\n    |\n\
    \    = note: the following trait bounds were not satisfied:\n            `Vec<u8>:\
    \ Iterator`\n            which is required by `&mut Vec<u8>: Iterator`\n     \
    \       `[u8]: Iterator`\n            which is required by `&mut [u8]: Iterator`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpj21y162h.rs:14:23\n   |\n14 |\
    \     if digits.len() < shift {\n   |                       ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     if digits.len() < shift.try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj21y162h.rs:15:29\n   |\n15 |         for _ in 0..shift\
    \ - digits.len() {\n   |                             ^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot subtract `usize` from `isize`\n  --> /tmp/tmpj21y162h.rs:15:27\n\
    \   |\n15 |         for _ in 0..shift - digits.len() {\n   |                 \
    \          ^ no implementation for `isize - usize`\n   |\n   = help: the trait\
    \ `Sub<usize>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n    \
    \         <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n      \
    \       <&'a i16 as Sub<i"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    loop {\n        let digit\
    \ = x % 10;\n        x /= 10;\n        if x > 0 {\n            result += &digit\
    \ + &digit + &digit + &digit;\n        } else {\n            result += &digit\
    \ + &digit;\n        }\n        if shift == 0 {\n            break;\n        }\n\
    \        shift -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptxn90l21.rs:14:23\n   |\n\
    14 |             result += &digit + &digit + &digit + &digit;\n   |          \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptxn90l21.rs:16:23\n   |\n16 |\
    \             result += &digit + &digit;\n   |                       ^^^^^^^^^^^^^^^\
    \ expected `&str`, found `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    for &i in &digits {\n        *s = if i >= shift {\n            *s + \"0\"\
    \n        } else {\n            *s + \"1\"\n        };\n        s = s.to_owned();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5up20u0p.rs:12:22\n   |\n\
    12 |         *s = if i >= shift {\n   |                      ^^^^^ expected `char`,\
    \ found `isize`\n\nerror[E0369]: cannot add `&str` to `str`\n  --> /tmp/tmp5up20u0p.rs:13:16\n\
    \   |\n13 |             *s + \"0\"\n   |             -- ^ --- &str\n   |     \
    \        |\n   |             str\n\nerror[E0369]: cannot add `&str` to `str`\n\
    \  --> /tmp/tmp5up20u0p.rs:15:16\n   |\n15 |             *s + \"1\"\n   |    \
    \         -- ^ --- &str\n   |             |\n   |             str\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmp5up20u0p.rs:12:9\n   |\n12 |         *s = if i >= shift {\n   |    \
    \     ^^ doesn't have a size known at compile-time\n   |\n   = help: the trait\
    \ `Sized` is not implemented for `str`\n   = note: the left-hand-side of an assignment\
    \ must have a statically known size\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = 0;\n    for\
    \ d in x >> shift {\n        if carry > 0 {\n            s.push('0');\n      \
    \      carry = 0;\n        }\n        if d > 0 {\n            s.push('1');\n \
    \           carry += 1;\n        }\n    }\n    if carry > 0 {\n        s.push('1');\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `isize` is not an iterator\n  --> /tmp/tmpmy3_g7v4.rs:11:14\n\
    \   |\n11 |     for d in x >> shift {\n   |              ^^^^^^^^^^ `isize` is\
    \ not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for\
    \ `isize`\n   = note: if you want to iterate between `start` until a value `end`,\
    \ use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    // Calculate the number of digits to shift\n    let mut digits\
    \ = x.trailing_zeros();\n\n    // Shift the digits right\n    for _ in 0..shift\
    \ {\n        digits = digits.rotate_right(1);\n    }\n\n    // Reverse the digits\
    \ if the shift was greater than the number of digits\n    let digits_reversed\
    \ = if shift > digits {\n        digits.rev()\n    } else {\n        digits\n\
    \    };\n\n    // Return the digits as a string with the requested number of digits\n\
    \    String::from_utf8_lossy(&digits_reversed)\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy0vehrlw.rs:18:38\n   |\n\
    18 |     let digits_reversed = if shift > digits {\n   |                     \
    \                 ^^^^^^ expected `isize`, found `u32`\n   |\nhelp: you can convert\
    \ a `u32` to an `isize` and panic if the converted value doesn't fit\n   |\n18\
    \ |     let digits_reversed = if shift > digits.try_into().unwrap() {\n   |  \
    \                                          ++++++++++++++++++++\n\nerror[E0599]:\
    \ `u32` is not an iterator\n  --> /tmp/tmpy0vehrlw.rs:19:16\n   |\n19 |      \
    \   digits.rev()\n   |                ^^^ `u32` is not an iterator\n   |\n   =\
    \ note: the following trait bounds were not satisfied:\n           `u32: Iterator`\n\
    \           which is required by `&mut u32: Iterator`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpy0vehrlw.rs:25:5\n   |\n8  | fn circular_shift(x: isize,\
    \ shift: isize) -> String {\n   |                                            \
    \  ------ expected `String` because of return type\n...\n25 |     String::from_utf8_lossy(&digits_reversed)\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |     |\n   |     expected struct `String`, found\
    \ enum `Cow`\n   |\n   = note: expected struct `String`\n                found\
    \ enum `Cow<'_, str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = String::new();\n    let mut remainder = x;\
    \ // keep a copy of the original value\n\n    for i in 0..shift {\n        digits.push(format!(\"\
    {}\", remainder % 10));\n        remainder = remainder / 10;\n    }\n    if remainder\
    \ > 0 {\n        digits.push(format!(\"{}\", remainder));\n    }\n\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpltrw8npx.rs:13:21\n   |\n\
    13 |         digits.push(format!(\"{}\", remainder % 10));\n   |             \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \   |\n   = note: this error originates in the macro `format` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpltrw8npx.rs:17:21\n   |\n17 |         digits.push(format!(\"{}\"\
    , remainder));\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`,\
    \ found struct `String`\n   |\n   = note: this error originates in the macro `format`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        return x.to_string();\n    }\n\
    \    x.to_string().chars().enumerate().map(|(_, c)| *c + (shift % x.len())).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp9nlfo9wj.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0614]: type `char`\
    \ cannot be dereferenced\n  --> /tmp/tmp9nlfo9wj.rs:12:52\n   |\n12 |     x.to_string().chars().enumerate().map(|(_,\
    \ c)| *c + (shift % x.len())).collect()\n   |                                \
    \                    ^^\n\nerror[E0599]: no method named `len` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmp9nlfo9wj.rs:12:68\n   |\n12 |  \
    \   x.to_string().chars().enumerate().map(|(_, c)| *c + (shift % x.len())).collect()\n\
    \   |                                                                    ^^^ method\
    \ not found in `isize`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0599, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    x.to_string().chars()\n        .iter()\n        .enumerate()\n\
    \        .map(|(i, _)| {\n            if i < shift {\n                char::from_digit(x[i\
    \ - shift].to_digit(10), 10)\n            } else {\n                char::from_digit(x[i\
    \ + shift..].to_digit(10), 10)\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `Chars` in the current\
    \ scope\n  --> /tmp/tmp16sacbvr.rs:10:10\n   |\n10 |         .iter()\n   |   \
    \       ^^^^ private field, not a method\n\nerror[E0608]: cannot index into a\
    \ value of type `isize`\n  --> /tmp/tmp16sacbvr.rs:14:34\n   |\n14 |         \
    \        char::from_digit(x[i - shift].to_digit(10), 10)\n   |               \
    \                   ^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of\
    \ type `isize`\n  --> /tmp/tmp16sacbvr.rs:16:34\n   |\n16 |                 char::from_digit(x[i\
    \ + shift..].to_digit(10), 10)\n   |                                  ^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    s.push_str(x.to_string());\n\
    \    for i in 0..shift {\n        s = s.rjust(s.len() + i, ' ').to_string();\n\
    \    }\n    s.to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk9uod36u.rs:10:16\n   |\n\
    10 |     s.push_str(x.to_string());\n   |                ^^^^^^^^^^^^^\n   | \
    \               |\n   |                expected `&str`, found struct `String`\n\
    \   |                help: consider borrowing here: `&x.to_string()`\n\nerror[E0599]:\
    \ no method named `rjust` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpk9uod36u.rs:12:15\n   |\n12 |         s = s.rjust(s.len() + i, ' ').to_string();\n\
    \   |               ^^^^^ method not found in `String`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk9uod36u.rs:12:31\n   |\n12 |         s = s.rjust(s.len()\
    \ + i, ' ').to_string();\n   |                               ^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpk9uod36u.rs:12:29\n\
    \   |\n12 |         s = s.rjust(s.len() + i, ' ').to_string();\n   |         \
    \                    ^ no implementation for `usize + isize`\n   |\n   = help:\
    \ the trait `Add<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut carry = false;\n  \
    \  for d in x.digits() + [shift] {\n        if carry {\n            s.push('-');\n\
    \        }\n        carry = d > 10;\n        s.push((d - 10).to_string());\n \
    \   }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpkpl4rokd.rs:11:16\n   |\n11 |     for d in x.digits() +\
    \ [shift] {\n   |                ^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let digits = x.to_string();\n    let mut r = digits.chars().nth(shift);\n\
    \    r.reverse();\n    String::from_str(&r).unwrap()\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphyxotevd.rs:10:36\n   |\n\
    10 |     let mut r = digits.chars().nth(shift);\n   |                        \
    \            ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    10 |     let mut r = digits.chars().nth(shift.try_into().unwrap());\n   |    \
    \                                     ++++++++++++++++++++\n\nerror[E0599]: no\
    \ method named `reverse` found for enum `Option` in the current scope\n  --> /tmp/tmphyxotevd.rs:11:7\n\
    \   |\n11 |     r.reverse();\n   |       ^^^^^^^ method not found in `Option<char>`\n\
    \nerror[E0599]: no function or associated item named `from_str` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmphyxotevd.rs:12:13\n   |\n12 | \
    \    String::from_str(&r).unwrap()\n   |             ^^^^^^^^ function or associated\
    \ item not found in `String`\n   |\n   = help: items from traits can only be used\
    \ if the trait is in scope\nhelp: the following trait is implemented but not in\
    \ scope; perhaps add a `use` for it:\n   |\n1  | use std::str::FromStr;\n   |\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    if shift > digits.len()\
    \ {\n        digits = digits.chars().cloned()\n            .skip_while(|&b| b\
    \ < '0')\n            .take(shift)\n            .collect::<String>()\n       \
    \     .reverse();\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprrcy34u0.rs:10:16\n   |\n\
    10 |     if shift > digits.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |     if shift > digits.len().try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0271]: type\
    \ mismatch resolving `<Chars<'_> as Iterator>::Item == &_`\n    --> /tmp/tmprrcy34u0.rs:11:33\n\
    \     |\n11   |         digits = digits.chars().cloned()\n     |             \
    \                    ^^^^^^ expected reference, found `char`\n     |\n     = note:\
    \ expected reference `&_`\n                     found type `char`\nnote: required\
    \ by a bound in `cloned`\n\nerror[E0599]: the method `skip_while` exists for struct\
    \ `Cloned<Chars<'_>>`, but its trait bounds were not satisfied\n  --> /tmp/tmprrcy34u0.rs:12:14\n\
    \   |\n12 |               .skip_while(|&b| b < '0')\n   |                ^^^^^^^^^^\
    \ method cannot be called on `Cloned<Chars<'_>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<Chars<'_>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<Chars<'_>>:\
    \ Iterator`\n           `Cloned<Chars<'_>>: Iterator`\n           which is required\
    \ by `&mut Cloned<Chars<'_>>: Iterator`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0271, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    // Handle special case\n    if x == 0 {\n        return String::from(\"\
    \");\n    }\n    if shift > x.len() {\n        shift %= x.len();\n    }\n    let\
    \ mut result = String::from(\"\");\n    for i in 0..shift {\n        result =\
    \ x.chars().skip(1).take(i).collect::<String>().to_string() + result;\n    }\n\
    \    let mut reversed = x.chars().take(shift).collect::<String>();\n    for i\
    \ in 0..(shift - 1) { reversed = result + reversed; }\n    reversed\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpg7j0r3d9.rs:13:18\n   |\n13 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpg7j0r3d9.rs:14:20\n\
    \   |\n14 |         shift %= x.len();\n   |                    ^^^ method not\
    \ found in `isize`\n\nerror[E0599]: no method named `chars` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpg7j0r3d9.rs:18:20\n   |\n18 |         result\
    \ = x.chars().skip(1).take(i).collect::<String>().to_string() + result;\n   |\
    \                    ^^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `chars` found for type `isize` in the current scope\n  --> /tmp/tmpg7j0r3d9.rs:20:26\n\
    \   |\n20 |     let mut reversed = x.chars().take(shift).collect::<String>();\n\
    \   |                          ^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg7j0r3d9.rs:21:42\n   |\n20 |     let mut reversed\
    \ = x.chars().take(shift).collect::<String>();\n   |                        -----------------------------------------\
    \ expected due to this value\n21 |     for i in 0..(shift - 1) { reversed = result\
    \ + reversed; }\n   |                                          ^^^^^^^^^^^^^^^^^\n\
    \   |                                          |\n   |                       \
    \                   expected `&str`, found struct `String`\n   |             \
    \                             help: consider borrowing here: `&(result + reversed)`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpg7j0r3d9.rs:22:5\n   |\n8  | fn\
    \ circular_shift(x: isize, shift: isize) -> String {\n   |                   \
    \                           ------ expected `String` because of return type\n\
    ...\n22 |     reversed\n   |     ^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |     |\n   |     expected struct `String`, found `&str`\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `ru"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    if shift == 0 {\n    \
    \    return result;\n    }\n    let mut remaining = x;\n    while remaining >\
    \ 0 {\n        remaining -= shift;\n        result.push(*remaining.digits().unwrap());\n\
    \    }\n    result.rev()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpj992jgv4.rs:16:32\n   |\n16 |         result.push(*remaining.digits().unwrap());\n\
    \   |                                ^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ `String` is not an iterator\n   --> /tmp/tmpj992jgv4.rs:18:12\n    |\n18  |\
    \       result.rev()\n    |              ^^^ `String` is not an iterator; try\
    \ calling `.chars()` or `.bytes()`\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `String: Iterator`\n            which is required\
    \ by `&mut String: Iterator`\n            `str: Iterator`\n            which is\
    \ required by `&mut str: Iterator`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n\n    for i in 0..shift {\n\
    \        result.push_str(&format!(\"{:0>{width}b}\", x, width=i));\n    }\n\n\
    \    result.chars().chain(result.chars().enumerate()).for_each(|(i, c)| {\n  \
    \      result.swap(c.to_string(), i);\n    });\n\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error: invalid format string: expected `'}'`, found `'{'`\n  --> /tmp/tmpsdm9s600.rs:12:39\n\
    \   |\n12 |         result.push_str(&format!(\"{:0>{width}b}\", x, width=i));\n\
    \   |                                   -   ^ expected `}` in format string\n\
    \   |                                   |\n   |                              \
    \     because of this opening brace\n   |\n   = note: if you intended to print\
    \ `{`, you can escape it using `{{`\n\nerror[E0271]: type mismatch resolving `<Enumerate<Chars<'_>>\
    \ as IntoIterator>::Item == char`\n   --> /tmp/tmpsdm9s600.rs:15:20\n    |\n15\
    \  |     result.chars().chain(result.chars().enumerate()).for_each(|(i, c)| {\n\
    \    |                    ^^^^^ expected `char`, found tuple\n    |\n    = note:\
    \ expected type `char`\n              found tuple `(usize, char)`\nnote: required\
    \ by a bound in `std::iter::Iterator::chain`\n\nerror[E0599]: the method `for_each`\
    \ exists for struct `std::iter::Chain<Chars<'_>, Enumerate<Chars<'_>>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpsdm9s600.rs:15:54\n   |\n15 |\
    \       result.chars().chain(result.chars().enumerate()).for_each(|(i, c)| {\n\
    \   |                                                        ^^^^^^^^ method cannot\
    \ be called on `std::iter::Chain<Chars<'_>, Enumerate<Chars<'_>>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<Enumerate<Chars<'_>> as Iterator>::Item = char`\n           which\
    \ is required by `std::iter::Chain<Chars<'_>, Enumerate<Chars<'_>>>: Iterator`\n\
    \           `std::iter::Chain<Chars<'_>, Enumerate<Chars<'_>>>: Iterator`\n  \
    \         which is required by `&mut std::iter::Chain<Chars<'_>, Enumerate<Chars<'_>>>:\
    \ Iterator`\n\nerror[E0599]: no method named `swap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpsdm9s600.rs:16:16\n   |\n16 |         result.swap(c.to_string(),\
    \ i);\n   |                ^^^^ method not found in `String`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E02"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for c in x.to_digits().rev()\
    \ {\n        let d = c % 10;\n        s.push(d);\n        c /= 10;\n        if\
    \ c == 0 {\n            if shift > s.len() {\n                s.reverse();\n \
    \           } else {\n                s.truncate(shift);\n            }\n    \
    \        break;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpr7yvsd_j.rs:10:16\n   |\n10 |     for c in x.to_digits().rev()\
    \ {\n   |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr7yvsd_j.rs:15:24\n   |\n15 |             if\
    \ shift > s.len() {\n   |                        ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n15 |             if shift > s.len().try_into().unwrap()\
    \ {\n   |                               ++++++++++++++++++++\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpr7yvsd_j.rs:16:19\n   |\n16 |                 s.reverse();\n   |\
    \                   ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr7yvsd_j.rs:18:28\n\
    \   |\n18 |                 s.truncate(shift);\n   |                         \
    \   ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n18 |      \
    \           s.truncate(shift.try_into().unwrap());\n   |                     \
    \            ++++++++++++++++++++\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    match x {\n        x if x <\
    \ 0 => panic!(\"Invalid value: {}\", x),\n        x if x % 2 == 0 => s.push_str(&format!(\"\
    {}{}\", x >> shift, x & 1));\n        _ => {\n            let mut m = x >> shift;\n\
    \            while m > 0 {\n                s.push_str(&format!(\"{}\", m & 1));\n\
    \                m >>= 1;\n            }\n        }\n    };\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error: `match` arm body without braces\n  --> /tmp/tmp1hox5dcf.rs:12:28\n\
    \   |\n12 |         x if x % 2 == 0 => s.push_str(&format!(\"{}{}\", x >> shift,\
    \ x & 1));\n   |                         -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: use a comma to end a `match` arm expression: `,`\n   |               \
    \          |  |\n   |                         |  this statement is not surrounded\
    \ by a body\n   |                         while parsing the `match` arm starting\
    \ here\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        x.reverse();\n    }\n    format!(\"\
    {}{}\", x.to_string(), x[shift..])\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpozfw507b.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `reverse` found for type `isize` in the current scope\n  --> /tmp/tmpozfw507b.rs:10:11\n\
    \   |\n10 |         x.reverse();\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reverse_bits`\n\nerror[E0608]: cannot index into\
    \ a value of type `isize`\n  --> /tmp/tmpozfw507b.rs:12:36\n   |\n12 |     format!(\"\
    {}{}\", x.to_string(), x[shift..])\n   |                                    ^^^^^^^^^^\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = x.to_string();\n    for i in 0..shift {\n\
    \        result = result.chars().nth(i + shift).unwrap().to_string().to_owned();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5qa5eb58.rs:11:37\n   |\n\
    11 |         result = result.chars().nth(i + shift).unwrap().to_string().to_owned();\n\
    \   |                                     ^^^^^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |         result = result.chars().nth((i + shift).try_into().unwrap()).unwrap().to_string().to_owned();\n\
    \   |                                     +         +++++++++++++++++++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    x.to_string().chars().enumerate().map(|(i, c)| {\n        if\
    \ i == shift {\n            char::from_digit(c + 1, 10).unwrap()\n        } else\
    \ {\n            char::from_digit(c, 1)\n        }\n    }).collect()\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf2u9l97z.rs:10:17\n   |\n\
    10 |         if i == shift {\n   |                 ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n10 |         if i == shift.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0369]: cannot add\
    \ `{integer}` to `char`\n  --> /tmp/tmpf2u9l97z.rs:11:32\n   |\n11 |         \
    \    char::from_digit(c + 1, 10).unwrap()\n   |                              -\
    \ ^ - {integer}\n   |                              |\n   |                   \
    \           char\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf2u9l97z.rs:13:30\n\
    \   |\n13 |             char::from_digit(c, 1)\n   |                         \
    \     ^ expected `u32`, found `char`\n   |\nhelp: you can cast a `char` to a `u32`,\
    \ since a `char` always occupies 4 bytes\n   |\n13 |             char::from_digit(c\
    \ as u32, 1)\n   |                                ++++++\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift == 0 {\n        String::new()\n    } else {\n    \
    \    let mut digits = vec![x.to_digit(10)]; // convert x to array of digits\n\
    \        for _ in 0..shift {\n            digits.insert(0, digits.shift());\n\
    \        }\n        String::from_utf8_lossy(&digits[..])\n    }\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digit` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpwxmr7p6m.rs:12:33\n   |\n12 |         let mut digits\
    \ = vec![x.to_digit(10)]; // convert x to array of digits\n   |              \
    \                   ^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `shift` found for struct `Vec<_, _>` in the current scope\n  --> /tmp/tmpwxmr7p6m.rs:14:37\n\
    \   |\n14 |             digits.insert(0, digits.shift());\n   |              \
    \                       ^^^^^ method not found in `Vec<_, _>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwxmr7p6m.rs:16:9\n   |\n8  | fn circular_shift(x:\
    \ isize, shift: isize) -> String {\n   |                                     \
    \         ------ expected `String` because of return type\n...\n16 |         String::from_utf8_lossy(&digits[..])\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |         |\n   |         expected struct `String`,\
    \ found enum `Cow`\n   |\n   = note: expected struct `String`\n              \
    \  found enum `Cow<'_, str>`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = vec![0; shift as usize + 1];\n    digits[shift\
    \ as usize] = 1;\n    while x.is_positive() {\n        let result = ((x % 10)\
    \ * digits[shift as usize]).to_string();\n        digits[shift as usize] /= 10;\n\
    \        digits[shift as usize] += 1;\n        x = x / 10;\n        if digits[shift\
    \ as usize].is_integer() {\n            digits[shift as usize] = 0;\n        }\
    \ else {\n            digits[shift as usize] -= 1;\n        }\n        result\
    \ += digits.as_slice();\n    }\n    digits.reverse();\n    result.to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `result` in this scope\n  --> /tmp/tmptn6z9999.rs:24:5\n\
    \   |\n24 |     result.to_string()\n   |     ^^^^^^ not found in this scope\n\n\
    error[E0599]: no method named `is_integer` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmptn6z9999.rs:16:35\n   |\n16 |         if digits[shift as\
    \ usize].is_integer() {\n   |                                   ^^^^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptn6z9999.rs:21:19\n\
    \   |\n21 |         result += digits.as_slice();\n   |                   ^^^^^^^^^^^^^^^^^\
    \ expected `str`, found slice `[isize]`\n   |\n   = note: expected reference `&str`\n\
    \              found reference `&[isize]`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let len = x.abs();\n    let shift = shift as usize;\n    if\
    \ len < shift {\n        return x.to_string();\n    }\n    let mut res = String::with_capacity(len\
    \ as usize);\n    for i in (len - 1..(len + shift..len)) {\n        res.push_str(&format!(\"\
    {:0{}}\", x[i], i));\n    }\n    if len < shift {\n        let mut i = shift..len;\n\
    \        res.push_str(&format!(\"{:0{}}\", x[i], i));\n    }\n    res.to_owned()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error: invalid format string: expected `'}'`, found `'{'`\n  --> /tmp/tmpg893olfk.rs:16:35\n\
    \   |\n16 |         res.push_str(&format!(\"{:0{}}\", x[i], i));\n   |       \
    \                         -  ^ expected `}` in format string\n   |           \
    \                     |\n   |                                because of this opening\
    \ brace\n   |\n   = note: if you intended to print `{`, you can escape it using\
    \ `{{`\n\nerror: invalid format string: expected `'}'`, found `'{'`\n  --> /tmp/tmpg893olfk.rs:20:35\n\
    \   |\n20 |         res.push_str(&format!(\"{:0{}}\", x[i], i));\n   |       \
    \                         -  ^ expected `}` in format string\n   |           \
    \                     |\n   |                                because of this opening\
    \ brace\n   |\n   = note: if you intended to print `{`, you can escape it using\
    \ `{{`\n\nwarning: unnecessary parentheses around `for` iterator expression\n\
    \  --> /tmp/tmpg893olfk.rs:15:14\n   |\n15 |     for i in (len - 1..(len + shift..len))\
    \ {\n   |              ^                           ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n15 -     for i in (len\
    \ - 1..(len + shift..len)) {\n15 +     for i in len - 1..(len + shift..len) {\n\
    \   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg893olfk.rs:11:14\n  \
    \ |\n11 |     if len < shift {\n   |              ^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n11 |     if len < shift.try_into().unwrap()\
    \ {\n   |                   ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpg893olfk.rs:15:31\n   |\n15 |     for i in (len - 1..(len + shift..len))\
    \ {\n   |                               ^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot add `usize` to `isize`\n  --> /tmp/tmpg893olfk.rs:15:29\n\
    \   |\n15 |     for i in (len - 1..(len + shift..len)) {\n   |               \
    \              ^ no implementation for `isize + usize`\n   |\n   = help: the trait\
    \ `Add<usize>` is not implemented for `isize`\n   = help: the following other\
    \ types im"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    use std::cmp::min;\n\n    let mut digits = String::with_capacity(x.to_digits().len());\n\
    \    let mut i = x.abs() - (shift % x.abs()) as isize;\n    while i >= 0 {\n \
    \       digits.push((i % 10).to_string());\n        i /= 10;\n    }\n    digits.push((x\
    \ % 10).to_string());\n    digits.reverse();\n    digits\n}\n\nfn main() {\n \
    \   let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::min`\n --> /tmp/tmp80f9v_2v.rs:9:9\n\
    \  |\n9 |     use std::cmp::min;\n  |         ^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]`\
    \ on by default\n\nerror[E0599]: no method named `to_digits` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmp80f9v_2v.rs:11:46\n   |\n11 |     let mut\
    \ digits = String::with_capacity(x.to_digits().len());\n   |                 \
    \                             ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp80f9v_2v.rs:14:21\n   |\n14 |         digits.push((i\
    \ % 10).to_string());\n   |                     ^^^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp80f9v_2v.rs:17:17\n\
    \   |\n17 |     digits.push((x % 10).to_string());\n   |                 ^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp80f9v_2v.rs:18:12\n\
    \   |\n18 |     digits.reverse();\n   |            ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 4 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    match x.checked_sub(shift as usize) {\n        Some(0) => return\
    \ x.to_string(),\n        _ => match x.checked_add(shift as usize) {\n       \
    \     Some(x) => x.to_string(),\n            _ => format!(\"{}{}\", x, circular_shift(x,\
    \ shift - 1)),\n        },\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpax33a5bw.rs:9:25\n  |\n9 |\
    \     match x.checked_sub(shift as usize) {\n  |                         ^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     match x.checked_sub((shift\
    \ as usize).try_into().unwrap()) {\n  |                         +            \
    \  +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpax33a5bw.rs:11:34\n\
    \   |\n11 |         _ => match x.checked_add(shift as usize) {\n   |         \
    \                         ^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n11 |         _ => match x.checked_add((shift as usize).try_into().unwrap())\
    \ {\n   |                                  +              +++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    match shift {\n        0 => String::from(\"0\"),\n        1\
    \ => String::from(\"1\"),\n        _ => unimplemented!(),\n    }\n    let mut\
    \ result = String::new();\n    while x >= shift {\n        result.push_str(&format!(\"\
    {}{}\", x.remainder(shift), shift));\n        x = x >> shift;\n    }\n    result.push_str(&format!(\"\
    {}\", x));\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplgvs2os5.rs:9:5\n   |\n9\
    \  | /     match shift {\n10 | |         0 => String::from(\"0\"),\n11 | |   \
    \      1 => String::from(\"1\"),\n12 | |         _ => unimplemented!(),\n13 |\
    \ |     }\n   | |     ^- help: consider using a semicolon here\n   | |_____|\n\
    \   |       expected `()`, found struct `String`\n\nerror[E0599]: no method named\
    \ `remainder` found for type `isize` in the current scope\n  --> /tmp/tmplgvs2os5.rs:16:44\n\
    \   |\n16 |         result.push_str(&format!(\"{}{}\", x.remainder(shift), shift));\n\
    \   |                                            ^^^^^^^^^ method not found in\
    \ `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = String::new();\n\n    loop {\n        if shift\
    \ < 0 {\n            digits.reverse();\n            return digits;\n        }\n\
    \        let digit = x % 10;\n        x /= 10;\n        digits.insert(shift, digit);\n\
    \        shift -= 1;\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp6s7nl_f7.rs:13:20\n   |\n13 |             digits.reverse();\n\
    \   |                    ^^^^^^^ help: there is an associated function with a\
    \ similar name: `reserve`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6s7nl_f7.rs:18:23\n\
    \   |\n18 |         digits.insert(shift, digit);\n   |                       ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n18 |         digits.insert(shift.try_into().unwrap(),\
    \ digit);\n   |                            ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6s7nl_f7.rs:18:30\n   |\n18 |         digits.insert(shift,\
    \ digit);\n   |                              ^^^^^ expected `char`, found `isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut remainder = x;\n\
    \    loop {\n        let d = remainder % 10;\n        result.push(d);\n      \
    \  remainder /= 10;\n        if remainder > 0 {\n            break;\n        }\n\
    \        remainder *= 10;\n    }\n    while shift > 0 {\n        let d = remainder\
    \ % 10;\n        result += \"0\".to_string()\n            .as_str()\n        \
    \    .into_iter()\n            .chain(vec![d])\n            .collect();\n    \
    \    remainder /= 10;\n        shift -= 1;\n    }\n    result.reverse();\n   \
    \ result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9598w3h9.rs:13:21\n   |\n\
    13 |         result.push(d);\n   |                     ^ expected `char`, found\
    \ `isize`\n\nerror[E0599]: the method `into_iter` exists for reference `&str`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp9598w3h9.rs:24:14\n \
    \  |\n24 |             .into_iter()\n   |              ^^^^^^^^^ method cannot\
    \ be called on `&str` due to unsatisfied trait bounds\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `&str: Iterator`\n           which\
    \ is required by `&str: IntoIterator`\n           `&&str: Iterator`\n        \
    \   which is required by `&&str: IntoIterator`\n           `&mut &str: Iterator`\n\
    \           which is required by `&mut &str: IntoIterator`\n           `str: Sized`\n\
    \           which is required by `str: IntoIterator`\n           `str: Iterator`\n\
    \           which is required by `str: IntoIterator`\n           `&mut str: Iterator`\n\
    \           which is required by `&mut str: IntoIterator`\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp9598w3h9.rs:30:12\n   |\n30 |     result.reverse();\n   |          \
    \  ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if x < 0 {\n        x.to_string()[..-(shift as usize)].reverse().to_string()\n\
    \    } else {\n        x.to_string()[..(shift as usize)].reverse().to_string()\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0600]: cannot apply unary operator `-` to type `usize`\n  --> /tmp/tmpi23w3ckz.rs:10:25\n\
    \   |\n10 |         x.to_string()[..-(shift as usize)].reverse().to_string()\n\
    \   |                         ^^^^^^^^^^^^^^^^^ cannot apply unary operator `-`\n\
    \   |\n   = note: unsigned values cannot be negated\n\nerror[E0599]: no method\
    \ named `reverse` found for type `str` in the current scope\n  --> /tmp/tmpi23w3ckz.rs:10:44\n\
    \   |\n10 |         x.to_string()[..-(shift as usize)].reverse().to_string()\n\
    \   |                                            ^^^^^^^ method not found in `str`\n\
    \nerror[E0599]: no method named `reverse` found for type `str` in the current\
    \ scope\n  --> /tmp/tmpi23w3ckz.rs:12:43\n   |\n12 |         x.to_string()[..(shift\
    \ as usize)].reverse().to_string()\n   |                                     \
    \      ^^^^^^^ method not found in `str`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0599, E0600.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s: String = String::new();\n    for &d in x.to_string().chars().chain(vec![])\
    \ {\n        s.push(d);\n        if shift > s.len() {\n            s.reverse();\n\
    \        }\n        shift -= s.len();\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy71g28q4.rs:10:9\n   |\n\
    10 |     for &d in x.to_string().chars().chain(vec![]) {\n   |         ^^    -----------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `d`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy71g28q4.rs:12:20\n  \
    \ |\n12 |         if shift > s.len() {\n   |                    ^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |         if shift >\
    \ s.len().try_into().unwrap() {\n   |                           ++++++++++++++++++++\n\
    \nerror[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpy71g28q4.rs:13:15\n   |\n13 |             s.reverse();\n\
    \   |               ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy71g28q4.rs:15:18\n\
    \   |\n15 |         shift -= s.len();\n   |                  ^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot subtract-assign `usize` from\
    \ `isize`\n  --> /tmp/tmpy71g28q4.rs:15:15\n   |\n15 |         shift -= s.len();\n\
    \   |               ^^ no implementation for `isize -= usize`\n   |\n   = help:\
    \ the trait `SubAssign<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `SubAssign<Rhs>`:\n             <f32 as\
    \ SubAssign<&f32>>\n             <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n\
    \             <f64 as SubAssign>\n             <i128 as SubAssign<&i128>>\n  \
    \           <i128 as SubAssign>\n             <i16 as SubAssign<&i16>>\n     \
    \        <i16 as SubAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::with_capacity(x.to_string().len()\
    \ * 2 + shift as usize);\n    for digit in x.to_string().rev() {\n        result.push_str(digit.to_string()\
    \ + digit.to_string() + digit.to_string());\n        result.push('_');\n    }\n\
    \    if shift > result.len() {\n        result.rev(shift);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp8p2kq7_l.rs:10:32\n\
    \    |\n10  |       for digit in x.to_string().rev() {\n    |                \
    \                  ^^^ `String` is not an iterator; try calling `.chars()` or\
    \ `.bytes()`\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `String: Iterator`\n            which is required by `&mut String:\
    \ Iterator`\n            `str: Iterator`\n            which is required by `&mut\
    \ str: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8p2kq7_l.rs:14:16\n\
    \   |\n14 |     if shift > result.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n14 |     if shift > result.len().try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0599]: `String`\
    \ is not an iterator\n   --> /tmp/tmp8p2kq7_l.rs:15:16\n    |\n15  |         \
    \  result.rev(shift);\n    |                  ^^^ `String` is not an iterator;\
    \ try calling `.chars()` or `.bytes()`\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    // Reverse the sign if negative\n    if x < 0 {\n        x\
    \ = -x;\n        shift = (shift - 1) % 4;\n    }\n    let mut str: String = \"\
    \";\n    let mut digits: Vec<isize> = vec![x, 0, 0, 0];\n    let mut carry = 0;\n\
    \    for &mut c in digits.iter_mut() {\n        // Move the digits by shift\n\
    \        let digit = c / 10;\n        c -= digit * 10;\n\n        // Add the digit\
    \ if there was any\n        if c > 0 {\n            if carry == 0 {\n        \
    \        str += String::from(digit as char);\n                carry = 1;\n   \
    \         } else {\n                str += &String::from(\"1\" as char) + String::from(digit\
    \ as char);\n                carry = 0;\n            }\n        } else {\n   \
    \         str += &String::from(\"0\" as char) + String::from(digit as char);\n\
    \            carry = 1;\n        }\n    }\n    if carry > 0 {\n        str +=\
    \ &String::from(\"1\" as char) + String::from(carry as char);\n    }\n    str.reverse()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuq1b46pf.rs:14:27\n   |\n\
    14 |     let mut str: String = \"\";\n   |                  ------   ^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                  |     \
    \   |\n   |                  |        expected struct `String`, found `&str`\n\
    \   |                  expected due to this\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuq1b46pf.rs:25:24\n   |\n25 |                 str += String::from(digit\
    \ as char);\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |   \
    \                     |\n   |                        expected `&str`, found struct\
    \ `String`\n   |                        help: consider borrowing here: `&String::from(digit\
    \ as char)`\n\nerror[E0369]: cannot add `String` to `&String`\n  --> /tmp/tmpuq1b46pf.rs:28:51\n\
    \   |\n28 |                 str += &String::from(\"1\" as char) + String::from(digit\
    \ as char);\n   |                        -------------------------- ^ ---------------------------\
    \ String\n   |                        |                          |\n   |     \
    \                   |                          `+` cannot be used to concatenate\
    \ a `&str` with a `String`\n   |                        &String\n   |\nhelp: remove\
    \ the borrow on the left and add one on the right\n   |\n28 -                \
    \ str += &String::from(\"1\" as char) + String::from(digit as char);\n28 +   \
    \              str += String::from(\"1\" as char) + &String::from(digit as char);\n\
    \   | \n\nerror[E0369]: cannot add `String` to `&String`\n  --> /tmp/tmpuq1b46pf.rs:32:47\n\
    \   |\n32 |             str += &String::from(\"0\" as char) + String::from(digit\
    \ as char);\n   |                    -------------------------- ^ ---------------------------\
    \ String\n   |                    |                          |\n   |         \
    \           |                          `+` cannot be used to concatenate a `&str`\
    \ with a `String`\n   |                    &String\n   |\nhelp: remove the borrow\
    \ on the left and add one on the right\n   |\n32 -             str += &String::from(\"\
    0\" as char) + String::from(digit as char);\n32 +             str "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let num_digits = x.checked_mul(10).unwrap();\n    let mut xs\
    \ = x.to_string();\n    xs.rotate_left(shift).to_string()\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `rotate_left` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmpjl2z668a.rs:11:8\n   |\n11 |     xs.rotate_left(shift).to_string()\n\
    \   |        ^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for d in x.checked_div(10).unwrap().digits(10)\
    \ {\n        s.push(d.to_string());\n    }\n    if s.len() > shift {\n       \
    \ s.reverse();\n    }\n    String::from(s)\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpma2k3z4a.rs:10:41\n   |\n10 |     for d in x.checked_div(10).unwrap().digits(10)\
    \ {\n   |                                         ^^^^^^ method not found in `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpma2k3z4a.rs:13:18\n   |\n13 |\
    \     if s.len() > shift {\n   |                  ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n13 |     if s.len() > shift.try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpma2k3z4a.rs:14:11\n\
    \   |\n14 |         s.reverse();\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    for i in 0..(x.abs() >>\
    \ shift) {\n        result = result.to_owned() + x.to_string()[..(i + 1)].to_owned();\n\
    \    }\n    for i in x.abs() << shift - 1..(x.abs() >> shift) {\n        result\
    \ = result.to_owned() + x.to_string()[..(i + 2)].to_owned();\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpj_i9vnxy.rs:11:38\n   |\n11 |         result = result.to_owned()\
    \ + x.to_string()[..(i + 1)].to_owned();\n   |                               \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpj_i9vnxy.rs:14:38\n   |\n14 |         result = result.to_owned()\
    \ + x.to_string()[..(i + 2)].to_owned();\n   |                               \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if x == 0 {\n        \"\".to_string()\n    } else {\n     \
    \   let len = x.to_string().len();\n        let mut result = String::from(\"\"\
    );\n        for (i, &c) in x.to_string().chars().enumerate() {\n            result.push(c);\n\
    \            if i >= (len + shift - 1) {\n                result = result.to_string()\
    \ + result.chars().rev().collect();\n                break;\n            }\n \
    \           result.push(c);\n        }\n        result\n    }\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeo5g00jj.rs:14:17\n   |\n\
    14 |         for (i, &c) in x.to_string().chars().enumerate() {\n   |        \
    \         ^^     --------------------------------- this expression has type `Option<(usize,\
    \ char)>`\n   |                 |\n   |                 expected `char`, found\
    \ reference\n   |                 help: you can probably remove the explicit borrow:\
    \ `c`\n   |\n   = note:   expected type `char`\n           found reference `&_`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpeo5g00jj.rs:16:28\n   |\n16 |\
    \             if i >= (len + shift - 1) {\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n\
    \  --> /tmp/tmpeo5g00jj.rs:16:26\n   |\n16 |             if i >= (len + shift\
    \ - 1) {\n   |                          ^ no implementation for `usize + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Add<Rhs>`:\n             <&'a\
    \ f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128\
    \ as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as\
    \ Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ a value of type `&str` cannot be built from an iterator over elements of type\
    \ `char`\n    --> /tmp/tmpeo5g00jj.rs:17:68\n     |\n17   |                 result\
    \ = result.to_string() + result.chars().rev().collect();\n     |             \
    \                                                       ^^^^^^^ value of type\
    \ `&str` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n     =\
    \ help: the trait `FromIterator<char>` is not implemented for `&str`\n     = help:\
    \ the following other types implement trait `FromIterator<A>`:\n             \
    \  <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    x.to_string().chars().enumerate().filter(|&(i, _)| shift >\
    \ i).map(|(_, i)| x.digit(i + shift)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppw6fvmzp.rs:9:64\n  |\n9 |\
    \     x.to_string().chars().enumerate().filter(|&(i, _)| shift > i).map(|(_, i)|\
    \ x.digit(i + shift)).collect()\n  |                                         \
    \                       ^ expected `isize`, found `usize`\n  |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \  |\n9 |     x.to_string().chars().enumerate().filter(|&(i, _)| shift > i.try_into().unwrap()).map(|(_,\
    \ i)| x.digit(i + shift)).collect()\n  |                                     \
    \                            ++++++++++++++++++++\n\nerror[E0599]: no method named\
    \ `digit` found for type `isize` in the current scope\n --> /tmp/tmppw6fvmzp.rs:9:82\n\
    \  |\n9 |     x.to_string().chars().enumerate().filter(|&(i, _)| shift > i).map(|(_,\
    \ i)| x.digit(i + shift)).collect()\n  |                                     \
    \                                             ^^^^^ method not found in `isize`\n\
    \nerror[E0369]: cannot add `isize` to `char`\n --> /tmp/tmppw6fvmzp.rs:9:90\n\
    \  |\n9 |     x.to_string().chars().enumerate().filter(|&(i, _)| shift > i).map(|(_,\
    \ i)| x.digit(i + shift)).collect()\n  |                                     \
    \                                                   - ^ ----- isize\n  |     \
    \                                                                            \
    \       |\n  |                                                               \
    \                         char\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0369, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = String::with_capacity(x.to_string().len());\n\
    \    digits.push(0);\n    for i in (0..shift).rev() {\n        digits.push(x.to_digits(i,\
    \ |d| d + digits[i - 1].to_digits(0, |d| d + d)));\n    }\n    digits[digits.len()\
    \ - shift..].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoil88gwi.rs:10:17\n   |\n\
    10 |     digits.push(0);\n   |                 ^ expected `char`, found `u8`\n\
    \nerror[E0599]: no method named `to_digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpoil88gwi.rs:12:23\n   |\n12 |         digits.push(x.to_digits(i,\
    \ |d| d + digits[i - 1].to_digits(0, |d| d + d)));\n   |                     \
    \  ^^^^^^^^^ method not found in `isize`\n\nerror[E0277]: the type `String` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpoil88gwi.rs:12:44\n   |\n12 |         digits.push(x.to_digits(i,\
    \ |d| d + digits[i - 1].to_digits(0, |d| d + d)));\n   |                     \
    \                       ^^^^^^^^^^^^^ `String` cannot be indexed by `isize`\n\
    \   |\n   = help: the trait `Index<isize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoil88gwi.rs:14:27\n\
    \   |\n14 |     digits[digits.len() - shift..].to_string()\n   |             \
    \              ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpoil88gwi.rs:14:25\n   |\n14 |     digits[digits.len()\
    \ - shift..].to_string()\n   |                         ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror: aborting due"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   if i >= x.len() {\n            break;\n        }\n        s.push(x[i]);\n\
    \    }\n    for c in s.chars() {\n        x = x << 1 as isize;\n        x = x\
    \ + (c as isize) + x;\n        x = x - x % 10;\n    }\n    s.reverse();\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpr3o5ibkd.rs:11:19\n   |\n11 |         if i >= x.len() {\n\
    \   |                   ^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmpr3o5ibkd.rs:14:16\n   |\n\
    14 |         s.push(x[i]);\n   |                ^^^^\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpr3o5ibkd.rs:21:7\n\
    \   |\n21 |     s.reverse();\n   |       ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    use std::cmp::Ordering;\n    if x.abs() < 1000 {\n        let\
    \ mut s = x.to_string();\n        for _ in 0..shift {\n            s = s.chars().next().unwrap().to_string()\
    \ + s;\n        }\n        String::from(s)\n    } else {\n        let mut s =\
    \ x.to_string();\n        std::mem::swap(s, s.chars().next().unwrap());\n    \
    \    let mut rest = Vec::new();\n        for c in s.chars() {\n            if\
    \ c < '0' || c > '9' {\n                rest = &rest.push(c);\n            } else\
    \ {\n                break;\n            }\n        }\n        rest.insert(0,\
    \ &s[rest.len()..]);\n        let mut rest = rest\n            .iter()\n     \
    \       .map(|c| c as isize)\n            .collect::<Vec<_>>()\n            .sort();\n\
    \        let mut s = String::new();\n        let mut curr = Vec::new();\n    \
    \    for i in 0..shift {\n            let j = i + 1;\n            if j < shift.len()\
    \ {\n                curr.push(&s[rest.len()..rest.len() + j]);\n            }\
    \ else {\n                curr.push(&s[rest.len()..rest.len() + j + 1]);\n   \
    \         }\n            s.push_str(&curr);\n            curr.clear();\n     \
    \   }\n        String::from(s)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering`\n --> /tmp/tmpgpzfioar.rs:9:9\n\
    \  |\n9 |     use std::cmp::Ordering;\n  |         ^^^^^^^^^^^^^^^^^^\n  |\n \
    \ = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgpzfioar.rs:13:57\n   |\n13 |             s = s.chars().next().unwrap().to_string()\
    \ + s;\n   |                                                         ^\n   | \
    \                                                        |\n   |             \
    \                                            expected `&str`, found struct `String`\n\
    \   |                                                         help: consider borrowing\
    \ here: `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgpzfioar.rs:18:24\n\
    \   |\n18 |         std::mem::swap(s, s.chars().next().unwrap());\n   |      \
    \                  ^\n   |                        |\n   |                    \
    \    expected `&mut _`, found struct `String`\n   |                        help:\
    \ consider mutably borrowing here: `&mut s`\n   |\n   = note: expected mutable\
    \ reference `&mut _`\n                         found struct `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgpzfioar.rs:18:27\n   |\n18 |         std::mem::swap(s,\
    \ s.chars().next().unwrap());\n   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                           |\n   |                           expected `&mut\
    \ _`, found `char`\n   |                           help: consider mutably borrowing\
    \ here: `&mut s.chars().next().unwrap()`\n   |\n   = note: expected mutable reference\
    \ `&mut _`\n                           found type `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgpzfioar.rs:22:24\n   |\n19 |         let mut rest = Vec::new();\n\
    \   |                        ---------- expected due to this value\n...\n22 |\
    \                 rest = &rest.push(c);\n   |                        ^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `&()`\n   |\n   = note: expected struct `Vec<char>`\n\
    \           found reference `&()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgpzfioar.rs:27:24\n\
    \   |\n27 |         rest.insert(0, &s[rest.len"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        x.reverse();\n    }\n    let\
    \ mut s = String::new();\n    for i in x.chars().rev() {\n        s += char::from(x[i]).to_string()\
    \ + char::from(x[x.len() - i - 1]).to_string();\n    }\n    if shift > s.len()\
    \ {\n        s.append(&mut char::from(x[x.len() - shift]));\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmprbbq_axi.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `reverse` found for type `isize` in the current scope\n  --> /tmp/tmprbbq_axi.rs:10:11\n\
    \   |\n10 |         x.reverse();\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reverse_bits`\n\nerror[E0599]: no method named\
    \ `chars` found for type `isize` in the current scope\n  --> /tmp/tmprbbq_axi.rs:13:16\n\
    \   |\n13 |     for i in x.chars().rev() {\n   |                ^^^^^ method not\
    \ found in `isize`\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmprbbq_axi.rs:14:25\n   |\n14 |         s += char::from(x[i]).to_string()\
    \ + char::from(x[x.len() - i - 1]).to_string();\n   |                        \
    \ ^^^^\n\nerror[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmprbbq_axi.rs:14:60\n   |\n14 |         s += char::from(x[i]).to_string()\
    \ + char::from(x[x.len() - i - 1]).to_string();\n   |                        \
    \                                    ^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprbbq_axi.rs:14:45\n   |\n14 |         s += char::from(x[i]).to_string()\
    \ + char::from(x[x.len() - i - 1]).to_string();\n   |                        \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |       \
    \                                      |\n   |                               \
    \              expected `&str`, found struct `String`\n   |                  \
    \                           help: consider borrowing here: `&char::from(x[x.len()\
    \ - i - 1]).to_string()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprbbq_axi.rs:14:14\n\
    \   |\n14 |         s += char::from(x[i]).to_string() + char::from(x[x.len() -\
    \ i - 1]).to_string();\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              h"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    use std::cmp::Ordering::{Equal, Less};\n\n    x.checked_shl(shift).unwrap().to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "warning: unused imports: `Equal`, `Less`\n --> /tmp/tmpbp9xtny9.rs:9:30\n\
    \  |\n9 |     use std::cmp::Ordering::{Equal, Less};\n  |                    \
    \          ^^^^^  ^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbp9xtny9.rs:11:19\n   |\n11 |\
    \     x.checked_shl(shift).unwrap().to_string()\n   |                   ^^^^^\
    \ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     x.checked_shl(shift.try_into().unwrap()).unwrap().to_string()\n\
    \   |                        ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    for i in 1..shift {\n\
    \        digits = &digits[..(i + digits.len() - i)];\n    }\n    digits\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn6q2f6u9.rs:11:33\n   |\n\
    11 |         digits = &digits[..(i + digits.len() - i)];\n   |               \
    \                  ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot add `usize` to `isize`\n  --> /tmp/tmpn6q2f6u9.rs:11:31\n   |\n11 | \
    \        digits = &digits[..(i + digits.len() - i)];\n   |                   \
    \            ^ no implementation for `isize + usize`\n   |\n   = help: the trait\
    \ `Add<usize>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n    \
    \         <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n      \
    \       <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n          \
    \   <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a\
    \ isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmpn6q2f6u9.rs:11:19\n   |\n\
    11 |         digits = &digits[..(i + digits.len() - i)];\n   |               \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn6q2f6u9.rs:11:18\n\
    \   |\n9  |     let mut digits = x.to_string();\n   |                      -------------\
    \ expected due to this value\n10 |     for i in 1..shift {\n11 |         digits\
    \ = &digits[..(i + digits.len() - i)];\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found reference\n   |\n   = note: expected struct\
    \ `String`\n           found reference `&_"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if x < 10 {\n        format!(\"{}\", x)\n    } else if shift\
    \ > x.len() {\n        String::from(x.to_digits().collect::<Vec<_>>().reverse())\n\
    \    } else {\n        let mut result = x.to_string();\n        for digit in 0..shift\
    \ {\n            let digit = match result.len() {\n                0 => result.chars().nth(digit).unwrap(),\n\
    \                i => result.chars().nth(digit - 1).unwrap(),\n            };\n\
    \            result = result.replace(digit, digit.clone());\n        }\n     \
    \   result\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n   \
    \ assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpviplkipm.rs:11:25\n   |\n11 |     } else if shift > x.len()\
    \ {\n   |                         ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `to_digits` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpviplkipm.rs:12:24\n   |\n12 |         String::from(x.to_digits().collect::<Vec<_>>().reverse())\n\
    \   |                        ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpviplkipm.rs:17:41\n   |\n17 |              \
    \   0 => result.chars().nth(digit).unwrap(),\n   |                           \
    \              ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    17 |                 0 => result.chars().nth(digit.try_into().unwrap()).unwrap(),\n\
    \   |                                              ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpviplkipm.rs:18:41\n   |\n18 |              \
    \   i => result.chars().nth(digit - 1).unwrap(),\n   |                       \
    \                  ^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |                 i => result.chars().nth((digit - 1).try_into().unwrap()).unwrap(),\n\
    \   |                                         +         +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpviplkipm.rs:20:44\n   |\n20 |\
    \             result = result.replace(digit, digit.clone());\n   |           \
    \                                 ^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    while digits.len() <=\
    \ shift {\n        digits = &\"0\" + digits;\n    }\n    if shift > digits.len()\
    \ {\n        digits = &digits[..shift];\n    } else {\n        digits = &digits[..(digits.len()\
    \ - shift)];\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpouxldttz.rs:10:27\n   |\n\
    10 |     while digits.len() <= shift {\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |     while digits.len()\
    \ <= shift.try_into().unwrap() {\n   |                                ++++++++++++++++++++\n\
    \nerror[E0369]: cannot add `String` to `&&str`\n  --> /tmp/tmpouxldttz.rs:11:23\n\
    \   |\n11 |         digits = &\"0\" + digits;\n   |                  ---- ^ ------\
    \ String\n   |                  |\n   |                  &&str\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpouxldttz.rs:13:16\n   |\n13 |     if shift >\
    \ digits.len() {\n   |                ^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |     if shift > digits.len().try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmpouxldttz.rs:14:19\n\
    \   |\n14 |         digits = &digits[..shift];\n   |                   ^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeTo<isize>`\n   |\n   = help: the trait `Index<RangeTo<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpouxldttz.rs:14:18\n\
    \   |\n9  |     let mut digits = x.to_string();\n   |                      -------------\
    \ expected due to this value\n...\n14 |         digits = &digits[..shift];\n \
    \  |                  ^^^^^^^^^^^^^^^^ expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n  "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        let mut tmp = x;\n        for\
    \ i in 0..shift - 1 {\n            tmp = tmp / 10;\n        }\n        return\
    \ format!(\"{}\", tmp);\n    }\n    let mut tmp = x;\n    for i in 0..shift {\n\
    \        tmp = tmp * 10;\n    }\n    return format!(\"{}\", tmp);\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpuoa_m21s.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for ch in x.to_str_radix(10).chars()\
    \ {\n        s.push((*ch + 0x20).to_string());\n    }\n    if shift > s.len()\
    \ {\n        for ch in s.rchars().cloned() {\n            *ch = *ch + 0x20;\n\
    \        }\n    } else {\n        for ch in s.chars().cloned() {\n           \
    \ *ch = *ch - 0x20;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_str_radix` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmp86h4yhdh.rs:10:17\n   |\n10 |     for ch in\
    \ x.to_str_radix(10).chars() {\n   |                 ^^^^^^^^^^^^ method not found\
    \ in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp86h4yhdh.rs:13:16\n\
    \   |\n13 |     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0599]: no method\
    \ named `rchars` found for struct `String` in the current scope\n  --> /tmp/tmp86h4yhdh.rs:14:21\n\
    \   |\n14 |         for ch in s.rchars().cloned() {\n   |                    \
    \ ^^^^^^ help: there is an associated function with a similar name: `chars`\n\n\
    error[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item == &_`\n\
    \    --> /tmp/tmp86h4yhdh.rs:18:29\n     |\n18   |         for ch in s.chars().cloned()\
    \ {\n     |                             ^^^^^^ expected reference, found `char`\n\
    \     |\n     = note: expected reference `&_`\n                     found type\
    \ `char`\nnote: required by a bound in `cloned`\n\nerror[E0271]: type mismatch\
    \ resolving `<Chars<'_> as Iterator>::Item == &_`\n  --> /tmp/tmp86h4yhdh.rs:18:19\n\
    \   |\n18 |         for ch in s.chars().cloned() {\n   |                   ^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found reference\n   |\n   = note:   expected type `char`\n\
    \           found reference `&_`\n   = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<Chars<'_>>`\n   = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `Cloned<Chars<'_>>`\n\n\
    error[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item == &_`\n\
    \  --> /tmp/tmp86h4yhdh.rs:18:19\n   |\n18 |         for ch in s.chars().cloned()\
    \ {\n   |                   ^^^^^^^^^^^^^^^^^^ expected `char`, found reference\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\n  \
    \ = note: require"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut m = x.checked_shl(shift).unwrap();\n\
    \    while m > 0 {\n        *s.last_mut().unwrap() = (m % 10) as char;\n     \
    \   m /= 10;\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8n2my5z3.rs:10:31\n   |\n\
    10 |     let mut m = x.checked_shl(shift).unwrap();\n   |                    \
    \           ^^^^^ expected `u32`, found `isize`\n   |\nhelp: you can convert an\
    \ `isize` to a `u32` and panic if the converted value doesn't fit\n   |\n10 |\
    \     let mut m = x.checked_shl(shift.try_into().unwrap()).unwrap();\n   |   \
    \                                 ++++++++++++++++++++\n\nerror[E0599]: no method\
    \ named `last_mut` found for struct `String` in the current scope\n  --> /tmp/tmp8n2my5z3.rs:12:12\n\
    \   |\n12 |         *s.last_mut().unwrap() = (m % 10) as char;\n   |         \
    \   ^^^^^^^^ method not found in `String`\n\nerror[E0604]: only `u8` can be cast\
    \ as `char`, not `isize`\n  --> /tmp/tmp8n2my5z3.rs:12:34\n   |\n12 |        \
    \ *s.last_mut().unwrap() = (m % 10) as char;\n   |                           \
    \       ^^^^^^^^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32` instead\
    \ (via a `u32`)\n  --> /tmp/tmp8n2my5z3.rs:12:34\n   |\n12 |         *s.last_mut().unwrap()\
    \ = (m % 10) as char;\n   |                                  ^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599, E0604.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        x.to_digits().reverse()\n   \
    \ } else {\n        x.to_digits().shift(shift)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpto8q6zga.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `to_digits` found for type `isize` in the current scope\n  --> /tmp/tmpto8q6zga.rs:10:11\n\
    \   |\n10 |         x.to_digits().reverse()\n   |           ^^^^^^^^^ method not\
    \ found in `isize`\n\nerror[E0599]: no method named `to_digits` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpto8q6zga.rs:12:11\n   |\n12 |  \
    \       x.to_digits().shift(shift)\n   |           ^^^^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut buffer = String::new();\n\n    for i in 0..shift {\n\
    \        buffer.push(x%10);\n        x /= 10;\n    }\n\n    for i in 0..shift\
    \ {\n        buffer.push(x%10);\n        x /= 10;\n    }\n\n    buffer\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpltezskqe.rs:12:21\n   |\n\
    12 |         buffer.push(x%10);\n   |                     ^^^^ expected `char`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpltezskqe.rs:17:21\n\
    \   |\n17 |         buffer.push(x%10);\n   |                     ^^^^ expected\
    \ `char`, found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    use std::cmp::min;\n    use std::cmp::max;\n    use std::str::FromStr;\n\
    \n    fn num(mut x: isize, mut i: isize) -> isize {\n        if i >= shift {\n\
    \            x = x * 10 + x * (i + 1) + (x % 10);\n            i += 1;\n     \
    \   }\n        x\n    }\n\n    let mut x = x;\n    let mut i = 1;\n    let mut\
    \ res = String::new();\n    while i > 0 {\n        res.push_str(x.to_digits());\n\
    \        x %= 10;\n        i -= 1;\n    }\n    let r = res.chars().rev();\n  \
    \  let mut last = r.clone().unwrap_or_else(|| String::new());\n    while last\
    \ < 10 {\n        last.push((r.pop() as char).to_digit());\n    }\n    last\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmpmd_kq015.rs:14:17\n\
    \   |\n14 |         if i >= shift {\n   |                 ^^^^^\n   |\n   = help:\
    \ use the `|| { ... }` closure form instead\n\nwarning: unused import: `std::cmp::min`\n\
    \ --> /tmp/tmpmd_kq015.rs:9:9\n  |\n9 |     use std::cmp::min;\n  |         ^^^^^^^^^^^^^\n\
    \  |\n  = note: `#[warn(unused_imports)]` on by default\n\nwarning: unused import:\
    \ `std::cmp::max`\n  --> /tmp/tmpmd_kq015.rs:10:9\n   |\n10 |     use std::cmp::max;\n\
    \   |         ^^^^^^^^^^^^^\n\nwarning: unused import: `std::str::FromStr`\n \
    \ --> /tmp/tmpmd_kq015.rs:11:9\n   |\n11 |     use std::str::FromStr;\n   |  \
    \       ^^^^^^^^^^^^^^^^^\n\nerror[E0599]: no method named `to_digits` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmpmd_kq015.rs:25:24\n   |\n25\
    \ |         res.push_str(x.to_digits());\n   |                        ^^^^^^^^^\
    \ method not found in `isize`\n\nerror[E0599]: no method named `unwrap_or_else`\
    \ found for struct `Rev` in the current scope\n  --> /tmp/tmpmd_kq015.rs:30:30\n\
    \   |\n30 |     let mut last = r.clone().unwrap_or_else(|| String::new());\n \
    \  |                              ^^^^^^^^^^^^^^ method not found in `Rev<Chars<'_>>`\n\
    \nerror[E0599]: no method named `pop` found for struct `Rev` in the current scope\n\
    \  --> /tmp/tmpmd_kq015.rs:32:22\n   |\n32 |         last.push((r.pop() as char).to_digit());\n\
    \   |                      ^^^ method not found in `Rev<Chars<'_>>`\n\nerror:\
    \ aborting due to 4 previous errors; 3 warnings emitted\n\nSome errors have detailed\
    \ explanations: E0434, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0434`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if x < shift {\n        String::from_utf8_lossy(&x.to_radix_string()\
    \ + &(x.to_radix_string().len() - shift))\n    } else {\n        String::from_utf8_lossy(&x.to_radix_string()[x.to_radix_string().len()\
    \ - shift..])\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_radix_string` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmphrrljknq.rs:10:36\n   |\n10 |         String::from_utf8_lossy(&x.to_radix_string()\
    \ + &(x.to_radix_string().len() - shift))\n   |                              \
    \      ^^^^^^^^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `to_radix_string` found for type `isize` in the current scope\n  --> /tmp/tmphrrljknq.rs:10:60\n\
    \   |\n10 |         String::from_utf8_lossy(&x.to_radix_string() + &(x.to_radix_string().len()\
    \ - shift))\n   |                                                            ^^^^^^^^^^^^^^^\
    \ method not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphrrljknq.rs:10:9\n\
    \   |\n8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \                                        ------ expected `String` because of return\
    \ type\n9  |     if x < shift {\n10 |         String::from_utf8_lossy(&x.to_radix_string()\
    \ + &(x.to_radix_string().len() - shift))\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |         |\n   |  \
    \       expected struct `String`, found enum `Cow`\n   |\n   = note: expected\
    \ struct `String`\n                found enum `Cow<'_, str>`\n\nerror[E0599]:\
    \ no method named `to_radix_string` found for type `isize` in the current scope\n\
    \  --> /tmp/tmphrrljknq.rs:12:36\n   |\n12 |         String::from_utf8_lossy(&x.to_radix_string()[x.to_radix_string().len()\
    \ - shift..])\n   |                                    ^^^^^^^^^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `to_radix_string` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmphrrljknq.rs:12:56\n   |\n\
    12 |         String::from_utf8_lossy(&x.to_radix_string()[x.to_radix_string().len()\
    \ - shift..])\n   |                                                        ^^^^^^^^^^^^^^^\
    \ method not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphrrljknq.rs:12:9\n\
    \   |\n8  | fn circular_shift(x: isize, shift: i"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    use core::cmp::Ordering;\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    for i in (0..shift).rev() {\n        digits[i..].rotate_left(1).collect();\n\
    \    }\n    digits.reverse().collect::<Vec<_>>().join(\"\").to_string()\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: maybe a missing crate `core`?\n --> /tmp/tmpezu097is.rs:9:9\n\
    \  |\n9 |     use core::cmp::Ordering;\n  |         ^^^^ maybe a missing crate\
    \ `core`?\n\nerror[E0277]: the type `[char]` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmpezu097is.rs:12:9\n   |\n12 |         digits[i..].rotate_left(1).collect();\n\
    \   |         ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[char]>` is not implemented for `RangeFrom<isize>`\n\
    \   = help: the following other types implement trait `SliceIndex<T>`:\n     \
    \        <RangeFrom<usize> as SliceIndex<[T]>>\n             <RangeFrom<usize>\
    \ as SliceIndex<str>>\n   = note: required because of the requirements on the\
    \ impl of `Index<RangeFrom<isize>>` for `Vec<char>`\n\nerror[E0599]: `()` is not\
    \ an iterator\n  --> /tmp/tmpezu097is.rs:14:22\n   |\n14 |     digits.reverse().collect::<Vec<_>>().join(\"\
    \").to_string()\n   |                      ^^^^^^^ `()` is not an iterator\n \
    \  |\n   = note: the following trait bounds were not satisfied:\n           `():\
    \ Iterator`\n           which is required by `&mut (): Iterator`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0433,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    use std::cmp::min;\n\n    // Shift right to account for carry\n\
    \    match shift {\n        0 | 1 => x,\n        _ => {\n            let shift\
    \ = min(shift, x.len() - 1);\n            let mut x = x.checked_shl(shift).unwrap();\n\
    \            x -= ((1 << shift) - 1);\n            x.to_string()\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpfwh4sknm.rs:17:18\n\
    \   |\n17 |             x -= ((1 << shift) - 1);\n   |                  ^    \
    \            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n17 -             x -= ((1 << shift) - 1);\n\
    17 +             x -= (1 << shift) - 1;\n   | \n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfwh4sknm.rs:13:18\n   |\n8  | fn circular_shift(x: isize, shift:\
    \ isize) -> String {\n   |                                              ------\
    \ expected `String` because of return type\n...\n13 |         0 | 1 => x,\n  \
    \ |                  ^- help: try using a conversion method: `.to_string()`\n\
    \   |                  |\n   |                  expected struct `String`, found\
    \ `isize`\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpfwh4sknm.rs:15:38\n   |\n15 |             let shift\
    \ = min(shift, x.len() - 1);\n   |                                      ^^^ method\
    \ not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfwh4sknm.rs:16:39\n\
    \   |\n16 |             let mut x = x.checked_shl(shift).unwrap();\n   |     \
    \                                  ^^^^^ expected `u32`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `u32` and panic if the converted value doesn't\
    \ fit\n   |\n16 |             let mut x = x.checked_shl(shift.try_into().unwrap()).unwrap();\n\
    \   |                                            ++++++++++++++++++++\n\nerror:\
    \ aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s.push(x%10);\n        x /= 10;\n    }\n    if shift > x.len() {\n       \
    \ for (i, v) in x.iter().enumerate() {\n            s.push(v);\n            x\
    \ /= 10;\n            if i > 0 {\n                s.insert(0, v);\n          \
    \      break;\n            }\n        }\n    } else {\n        for (i, v) in x.iter().enumerate()\
    \ {\n            s.push(v);\n            x /= 10;\n        }\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp46lfrwhg.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0599]: no method named `len` found for type `isize` in the current scope\n\
    \  --> /tmp/tmp46lfrwhg.rs:14:18\n   |\n14 |     if shift > x.len() {\n   |  \
    \                ^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `iter` found for type `isize` in the current scope\n  --> /tmp/tmp46lfrwhg.rs:15:25\n\
    \   |\n15 |         for (i, v) in x.iter().enumerate() {\n   |               \
    \          ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `iter`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmp46lfrwhg.rs:24:25\n\
    \   |\n24 |         for (i, v) in x.iter().enumerate() {\n   |               \
    \          ^^^^ method not found in `isize`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    match shift {\n        0 => String::from(x),\n        _ =>\
    \ if x <= 0 {\n            String::from(\"\")\n        } else {\n            format!(\"\
    {}{}\", circular_shift(x % 10, shift), x % 10)\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `String: From<isize>` is not satisfied\n\
    \  --> /tmp/tmp9kj7sbtj.rs:10:14\n   |\n10 |         0 => String::from(x),\n \
    \  |              ^^^^^^^^^^^^ the trait `From<isize>` is not implemented for\
    \ `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = String::new();\n    for _ in 0..shift {\n\
    \        digits.push(x.remainder(10).unwrap());\n        x = x.quotient(10);\n\
    \    }\n    digits.push(x.unwrap());\n    digits\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `remainder` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp5rodvye4.rs:11:23\n   |\n11 |         digits.push(x.remainder(10).unwrap());\n\
    \   |                       ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `quotient` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmp5rodvye4.rs:12:15\n   |\n12 |         x = x.quotient(10);\n   |    \
    \           ^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `unwrap` found for type `isize` in the current scope\n  --> /tmp/tmp5rodvye4.rs:14:19\n\
    \   |\n14 |     digits.push(x.unwrap());\n   |                   ^^^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    x.to_string().chars().enumerate().filter_map(|(i, _)| {\n \
    \       if i < shift {\n            Some(x.to_string().chars().nth(i + shift))\n\
    \        } else {\n            None\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpojn1e34z.rs:10:16\n   |\n\
    10 |         if i < shift {\n   |                ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n10 |         if i < shift.try_into().unwrap()\
    \ {\n   |                     ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpojn1e34z.rs:11:48\n   |\n11 |             Some(x.to_string().chars().nth(i\
    \ + shift))\n   |                                                ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmpojn1e34z.rs:11:46\n   |\n11 |             Some(x.to_string().chars().nth(i\
    \ + shift))\n   |                                              ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: a value of type `String` cannot be built from an\
    \ iterator over elements of type `Option<char>`\n    --> /tmp/tmpojn1e34z.rs:15:8\n\
    \     |\n15   |     }).collect()\n     |        ^^^^^^^ value of type `String`\
    \ cannot be built from `std::iter::Iterator<Item=Option<char>>`\n     |\n    \
    \ = help: the trait `FromIterator<Option<char>>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due t"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s.push(x%10);\n        x /= 10;\n    }\n    s.reverse();\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpty314k_b.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpty314k_b.rs:14:7\n   |\n14 |     s.reverse();\n   |   \
    \    ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift >= x.len() {\n        x.to_string()\n    } else {\n\
    \        let mut i = x.len();\n        for _ in 0..shift {\n            i -= 1;\n\
    \            x /= 10;\n        }\n        x.to_string()[..i].reverse()\n    }\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpg1wtjqdj.rs:9:19\n  |\n9 |     if shift >= x.len() {\n \
    \ |                   ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpg1wtjqdj.rs:12:23\n\
    \   |\n12 |         let mut i = x.len();\n   |                       ^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `reverse` found for type\
    \ `str` in the current scope\n  --> /tmp/tmpg1wtjqdj.rs:17:28\n   |\n17 |    \
    \     x.to_string()[..i].reverse()\n   |                            ^^^^^^^ method\
    \ not found in `str`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    use std::cmp::Ordering;\n\n    // Number of digits of x\n \
    \   let mut n_digits = x.log10().unwrap_or(0);\n\n    // Shift the digits right\n\
    \    for i in (0..n_digits).rev() {\n        x >>= shift;\n    }\n\n    // Reverse\
    \ the digits\n    for i in (0..n_digits).rev() {\n        x <<= shift;\n    }\n\
    \n    format!(\"{:0>{}}\", x, n_digits)\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error: invalid format string: expected `'}'`, found `'{'`\n  --> /tmp/tmplohrxl8h.rs:24:18\n\
    \   |\n24 |     format!(\"{:0>{}}\", x, n_digits)\n   |              -   ^ expected\
    \ `}` in format string\n   |              |\n   |              because of this\
    \ opening brace\n   |\n   = note: if you intended to print `{`, you can escape\
    \ it using `{{`\n\nwarning: unused import: `std::cmp::Ordering`\n --> /tmp/tmplohrxl8h.rs:9:9\n\
    \  |\n9 |     use std::cmp::Ordering;\n  |         ^^^^^^^^^^^^^^^^^^\n  |\n \
    \ = note: `#[warn(unused_imports)]` on by default\n\nerror[E0658]: use of unstable\
    \ library feature 'int_log'\n  --> /tmp/tmplohrxl8h.rs:12:26\n   |\n12 |     let\
    \ mut n_digits = x.log10().unwrap_or(0);\n   |                          ^^^^^\n\
    \   |\n   = note: see issue #70887 <https://github.com/rust-lang/rust/issues/70887>\
    \ for more information\n\nerror[E0599]: no method named `unwrap_or` found for\
    \ type `u32` in the current scope\n  --> /tmp/tmplohrxl8h.rs:12:34\n   |\n12 |\
    \     let mut n_digits = x.log10().unwrap_or(0);\n   |                       \
    \           ^^^^^^^^^ method not found in `u32`\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0599,\
    \ E0658.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = String::new();\n    for d in x.to_string().chars().take(shift\
    \ as usize) {\n        digits.push(d.to_ascii_uppercase());\n    }\n    digits.reverse()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp0jnhxa9a.rs:13:12\n   |\n13 |     digits.reverse()\n\
    \   |            ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut n = 0;\n    let mut result = String::new();\n    while\
    \ n > shift {\n        result = String::from_utf8(&x[n % x.len()..n % x.len()+shift]);\n\
    \        n = n / x.len();\n    }\n    result = String::from_utf8(&x[n % x.len()..n\
    \ % x.len()+shift]);\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp_bmm7qi3.rs:12:45\n   |\n12 |         result = String::from_utf8(&x[n\
    \ % x.len()..n % x.len()+shift]);\n   |                                      \
    \       ^^^ method not found in `isize`\n\nerror[E0599]: no method named `len`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmp_bmm7qi3.rs:12:58\n\
    \   |\n12 |         result = String::from_utf8(&x[n % x.len()..n % x.len()+shift]);\n\
    \   |                                                          ^^^ method not\
    \ found in `isize`\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmp_bmm7qi3.rs:12:37\n   |\n12 |         result = String::from_utf8(&x[n\
    \ % x.len()..n % x.len()+shift]);\n   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_bmm7qi3.rs:12:18\n   |\n10 |\
    \     let mut result = String::new();\n   |                      -------------\
    \ expected due to this value\n11 |     while n > shift {\n12 |         result\
    \ = String::from_utf8(&x[n % x.len()..n % x.len()+shift]);\n   |             \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found enum `Result`\n   |\n   = note: expected struct `String`\n           \
    \     found enum `Result<String, FromUtf8Error>`\n\nerror[E0599]: no method named\
    \ `len` found for type `isize` in the current scope\n  --> /tmp/tmp_bmm7qi3.rs:13:19\n\
    \   |\n13 |         n = n / x.len();\n   |                   ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `len` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmp_bmm7qi3.rs:15:41\n   |\n15 |     result =\
    \ String::from_utf8(&x[n % x.len()..n % x.len()+shift]);\n   |               \
    \                          ^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `len` found for type `isize` in the current scope\n  --> /tmp/tmp_bmm7qi3.rs:15:54\n\
    \   |\n15 |     result = String::from_utf8(&x[n % x.len()..n % x.len()+shift]);\n\
    \   |                                                      ^^^ method not "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        let mut res = String::new();\n\
    \        res.push_str(\"[..]\");\n        res.push_str(&x[x.len() - shift as usize..]);\n\
    \        res\n    } else {\n        let mut res = String::new();\n        res.push_str(&x[shift..]);\n\
    \        res.push_str(&x[0..shift]);\n        res\n    }\n}\n\nfn main() {\n \
    \   let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp2mgcb2ng.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmp2mgcb2ng.rs:12:27\n\
    \   |\n12 |         res.push_str(&x[x.len() - shift as usize..]);\n   |      \
    \                     ^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmp2mgcb2ng.rs:12:23\n   |\n\
    12 |         res.push_str(&x[x.len() - shift as usize..]);\n   |             \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a\
    \ value of type `isize`\n  --> /tmp/tmp2mgcb2ng.rs:16:23\n   |\n16 |         res.push_str(&x[shift..]);\n\
    \   |                       ^^^^^^^^^^\n\nerror[E0608]: cannot index into a value\
    \ of type `isize`\n  --> /tmp/tmp2mgcb2ng.rs:17:23\n   |\n17 |         res.push_str(&x[0..shift]);\n\
    \   |                       ^^^^^^^^^^^\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap()).collect::<Vec<_>>();\n\
    \    digits.rotate_left(shift).collect::<Vec<_>>().reverse().join(\"\")\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprsl82kpi.rs:10:24\n   |\n\
    10 |     digits.rotate_left(shift).collect::<Vec<_>>().reverse().join(\"\")\n\
    \   |                        ^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n10 |     digits.rotate_left(shift.try_into().unwrap()).collect::<Vec<_>>().reverse().join(\"\
    \")\n   |                             ++++++++++++++++++++\n\nerror[E0599]: `()`\
    \ is not an iterator\n  --> /tmp/tmprsl82kpi.rs:10:31\n   |\n10 |     digits.rotate_left(shift).collect::<Vec<_>>().reverse().join(\"\
    \")\n   |                               ^^^^^^^ `()` is not an iterator\n   |\n\
    \   = note: the following trait bounds were not satisfied:\n           `(): Iterator`\n\
    \           which is required by `&mut (): Iterator`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut num = x;\n    let mut remain = x;\n    while remain\
    \ != 0 {\n        num = num / 10;\n        remain = num % 10;\n        *num %=\
    \ 10;\n    }\n    let mut num_digits = num;\n    while num_digits > shift {\n\
    \        num_digits /= 10;\n    }\n    let mut result = String::new();\n    while\
    \ num_digits > 0 {\n        result.push(*num_digits % 10);\n        num_digits\
    \ /= 10;\n    }\n    result.push((num_digits % 10) as char);\n    result.reverse();\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpf2j_8r8z.rs:14:9\n\
    \   |\n14 |         *num %= 10;\n   |         ^^^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmpf2j_8r8z.rs:22:21\n   |\n22 |        \
    \ result.push(*num_digits % 10);\n   |                     ^^^^^^^^^^^\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpf2j_8r8z.rs:26:12\n   |\n26 |     result.reverse();\n   |      \
    \      ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n  --> /tmp/tmpf2j_8r8z.rs:25:17\n\
    \   |\n25 |     result.push((num_digits % 10) as char);\n   |                \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32` instead\
    \ (via a `u32`)\n  --> /tmp/tmpf2j_8r8z.rs:25:17\n   |\n25 |     result.push((num_digits\
    \ % 10) as char);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0599, E0604,\
    \ E0614.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    for c in x.to_string().chars().enumerate().rev()\
    \ {\n        let digit = if *c.1 == 0 { 1 } else { 0 };\n        let digit = *c.1\
    \ >> shift & digit;\n        result.push(digit.to_string());\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n\
    \    --> /tmp/tmp2rnov8vy.rs:10:48\n     |\n10   |     for c in x.to_string().chars().enumerate().rev()\
    \ {\n     |                                                ^^^ the trait `ExactSizeIterator`\
    \ is not implemented for `Chars<'_>`\n     |\n     = help: the following other\
    \ types implement trait `ExactSizeIterator`:\n               &mut I\n        \
    \       Args\n               ArgsOs\n               ArrayChunks<'_, T, N>\n  \
    \             ArrayChunksMut<'_, T, N>\n               ArrayWindows<'_, T, N>\n\
    \               Box<I, A>\n               Chunks<'_, T>\n             and 109\
    \ others\n     = note: required because of the requirements on the impl of `DoubleEndedIterator`\
    \ for `Enumerate<Chars<'_>>`\nnote: required by a bound in `rev`\n\nerror[E0277]:\
    \ the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n  --> /tmp/tmp2rnov8vy.rs:10:14\n\
    \   |\n10 |     for c in x.to_string().chars().enumerate().rev() {\n   |     \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `ExactSizeIterator`\
    \ is not implemented for `Chars<'_>`\n   |\n   = help: the following other types\
    \ implement trait `ExactSizeIterator`:\n             &mut I\n             Args\n\
    \             ArgsOs\n             ArrayChunks<'_, T, N>\n             ArrayChunksMut<'_,\
    \ T, N>\n             ArrayWindows<'_, T, N>\n             Box<I, A>\n       \
    \      Chunks<'_, T>\n           and 109 others\n   = note: required because of\
    \ the requirements on the impl of `DoubleEndedIterator` for `Enumerate<Chars<'_>>`\n\
    \   = note: required because of the requirements on the impl of `Iterator` for\
    \ `Rev<Enumerate<Chars<'_>>>`\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `Rev<Enumerate<Chars<'_>>>`\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n  --> /tmp/tmp2rnov8vy.rs:11:24\n   |\n\
    11 |         let digit = if *c.1 == 0 { 1 } else { 0 };\n   |                \
    \        ^^^^\n\nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp2rnov8vy.rs:12:21\n\
    \   |\n12 |         let digit = *c.1 >> shift "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        let tmp = x;\n        x = shift;\n\
    \        shift = tmp;\n    }\n\n    let mut s = String::new();\n    while shift\
    \ > 0 {\n        let digit = x % 10;\n        s.push((digit as char).to_string());\n\
    \        x = x / 10;\n        shift -= 1;\n    }\n    if x != 0 {\n        let\
    \ digit = x % 10;\n        s.push((digit as char).to_string());\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp2kynil59.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2kynil59.rs:18:16\n   |\n18 |         s.push((digit as\
    \ char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2kynil59.rs:24:16\n\
    \   |\n24 |         s.push((digit as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0604]:\
    \ only `u8` can be cast as `char`, not `isize`\n  --> /tmp/tmp2kynil59.rs:18:16\n\
    \   |\n18 |         s.push((digit as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32` instead (via\
    \ a `u32`)\n  --> /tmp/tmp2kynil59.rs:18:16\n   |\n18 |         s.push((digit\
    \ as char).to_string());\n   |                ^^^^^^^^^^^^^^^\n\nerror[E0604]:\
    \ only `u8` can be cast as `char`, not `isize`\n  --> /tmp/tmp2kynil59.rs:24:16\n\
    \   |\n24 |         s.push((digit as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32` instead (via\
    \ a `u32`)\n  --> /tmp/tmp2kynil59.rs:24:16\n   |\n24 |         s.push((digit\
    \ as char).to_string());\n   |                ^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599,\
    \ E0604.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::with_capacity(x.to_string().len());\n\
    \    for digit in x.to_string().chars() {\n        if digit > 0 {\n          \
    \  result += digit as char;\n            if shift > 0 {\n                result\
    \ += '0';\n                shift -= 1;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi5ug9gyh.rs:11:20\n   |\n\
    11 |         if digit > 0 {\n   |                    ^ expected `char`, found\
    \ `u8`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi5ug9gyh.rs:12:23\n  \
    \ |\n12 |             result += digit as char;\n   |                       ^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi5ug9gyh.rs:14:27\n\
    \   |\n14 |                 result += '0';\n   |                           ^^^\
    \ expected `&str`, found `char`\n   |\nhelp: if you meant to write a `str` literal,\
    \ use double quotes\n   |\n14 |                 result += \"0\";\n   |       \
    \                    ~~~\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        let mut result = String::new();\n\
    \        for &c in &x[..] {\n            result.push(c).unwrap();\n        }\n\
    \        result.reverse();\n        return result\n    }\n    x.to_string().to_owned()[..(x.len()\
    \ - shift)].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpz4dj5gfl.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0608]: cannot index\
    \ into a value of type `isize`\n  --> /tmp/tmpz4dj5gfl.rs:11:20\n   |\n11 |  \
    \       for &c in &x[..] {\n   |                    ^^^^^\n\nerror[E0599]: no\
    \ method named `unwrap` found for unit type `()` in the current scope\n  --> /tmp/tmpz4dj5gfl.rs:12:28\n\
    \   |\n12 |             result.push(c).unwrap();\n   |                       \
    \     ^^^^^^ method not found in `()`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpz4dj5gfl.rs:14:16\n\
    \   |\n14 |         result.reverse();\n   |                ^^^^^^^ help: there\
    \ is an associated function with a similar name: `reserve`\n\nerror[E0599]: no\
    \ method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpz4dj5gfl.rs:17:35\n\
    \   |\n17 |     x.to_string().to_owned()[..(x.len() - shift)].to_string()\n  \
    \ |                                   ^^^ method not found in `isize`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = String::new();\n    if shift > x.len() {\n\
    \        digits = x.to_string().rev();\n    } else {\n        digits = x.to_string();\n\
    \    }\n    (digits.len() - shift).reverse().for_each(|d| digits.push(*d));\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpk0pb5ej0.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0599]: `String`\
    \ is not an iterator\n   --> /tmp/tmpk0pb5ej0.rs:11:32\n    |\n11  |         \
    \  digits = x.to_string().rev();\n    |                                  ^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk0pb5ej0.rs:15:21\n   |\n15 |     (digits.len() - shift).reverse().for_each(|d|\
    \ digits.push(*d));\n   |                     ^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0599]: no method named `reverse` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmpk0pb5ej0.rs:15:28\n   |\n15 |     (digits.len() - shift).reverse().for_each(|d|\
    \ digits.push(*d));\n   |                            ^^^^^^^ help: there is an\
    \ associated function with a similar name: `reverse_bits`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpk0pb5ej0.rs:15:19\n   |\n15 | \
    \    (digits.len() - shift).reverse().for_each(|d| digits.push(*d));\n   |   \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    // use std::mem::swap\n    let mut s = String::new();\n   \
    \ s.push_str(&to_string(x).as_str());\n    s.push_str(&to_string(shift).as_str());\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `to_string` in this scope\n  --> /tmp/tmpp69ey09m.rs:11:17\n\
    \   |\n11 |     s.push_str(&to_string(x).as_str());\n   |                 ^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `to_string` in\
    \ this scope\n  --> /tmp/tmpp69ey09m.rs:12:17\n   |\n12 |     s.push_str(&to_string(shift).as_str());\n\
    \   |                 ^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if x < 10 {\n        match shift {\n            0 => \"0\"\
    .to_string(),\n            1 => x.to_string(),\n            _ => x.to_string().chars().enumerate().filter(|(_,\
    \ i)| i < shift).flat_map(|(_, i)| i.to_digit(16).to_string()).collect::<String>(),\n\
    \        }\n    } else {\n        match shift {\n            0 => \"0\".to_string(),\n\
    \            1 => \"1\".to_string(),\n            _ => x.to_string().chars().enumerate().filter(|(_,\
    \ i)| i < shift).flat_map(|(_, i)| i.to_digit(16).to_string()).collect::<String>().rev(),\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n   \
    \ assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7of16hqa.rs:13:72\n   |\n\
    13 | ...   _ => x.to_string().chars().enumerate().filter(|(_, i)| i < shift).flat_map(|(_,\
    \ i)| i.to_digit(16).to_string()).collect::<String>(),\n   |                 \
    \                                                 ^^^^^ expected `&char`, found\
    \ `isize`\n\nerror[E0599]: `Option<u32>` doesn't implement `std::fmt::Display`\n\
    \   --> /tmp/tmp7of16hqa.rs:13:112\n    |\n13  |   ...lat_map(|(_, i)| i.to_digit(16).to_string()).collect::<String>(),\n\
    \    |                                      ^^^^^^^^^ `Option<u32>` cannot be\
    \ formatted with the default formatter\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `Option<u32>: std::fmt::Display`\n \
    \           which is required by `Option<u32>: ToString`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7of16hqa.rs:19:72\n   |\n19 | ...   _ => x.to_string().chars().enumerate().filter(|(_,\
    \ i)| i < shift).flat_map(|(_, i)| i.to_digit(16).to_string()).collect::<String>()...\n\
    \   |                                                                  ^^^^^ expected\
    \ `&char`, found `isize`\n\nerror[E0599]: `Option<u32>` doesn't implement `std::fmt::Display`\n\
    \   --> /tmp/tmp7of16hqa.rs:19:112\n    |\n19  |   ...lat_map(|(_, i)| i.to_digit(16).to_string()).collect::<String>().rev(),\n\
    \    |                                      ^^^^^^^^^ `Option<u32>` cannot be\
    \ formatted with the default formatter\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `Option<u32>: std::fmt::Display`\n \
    \           which is required by `Option<u32>: ToString`\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let digits: Vec<usize> = x.to_string().chars().enumerate().map(|(i,\
    \ digit)| (digit, i + shift)).collect();\n    digits.reverse()\n        .to_string()\n\
    \        .chars()\n        .iter()\n        .cloned()\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyikxbg8_.rs:9:93\n  |\n9 |\
    \     let digits: Vec<usize> = x.to_string().chars().enumerate().map(|(i, digit)|\
    \ (digit, i + shift)).collect();\n  |                                        \
    \                                                     ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n --> /tmp/tmpyikxbg8_.rs:9:91\n\
    \  |\n9 |     let digits: Vec<usize> = x.to_string().chars().enumerate().map(|(i,\
    \ digit)| (digit, i + shift)).collect();\n  |                                \
    \                                                           ^ no implementation\
    \ for `usize + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Add<Rhs>`:\n\
    \            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n      \
    \      <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n          \
    \  <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a\
    \ i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\
    \nerror[E0277]: a value of type `Vec<usize>` cannot be built from an iterator\
    \ over elements of type `(char, usize)`\n    --> /tmp/tmpyikxbg8_.rs:9:101\n \
    \    |\n9    |     let digits: Vec<usize> = x.to_string().chars().enumerate().map(|(i,\
    \ digit)| (digit, i + shift)).collect();\n     |                             \
    \                                                                        ^^^^^^^\
    \ value of type `Vec<usize>` cannot be built from `std::iter::Iterator<Item=(char,\
    \ usize)>`\n     |\n     = help: the trait `FromIterator<(char, usize)>` is not\
    \ implemented for `Vec<usize>`\n     = help: the trait `FromIterator<T>` is implemented\
    \ for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0599]: `()` doesn't\
    \ implement `std::fmt::Display`\n  --> /tmp/tmpyikxbg8_.rs:11:10\n   |\n11 | \
    \        .to_string()\n   |          ^^^^^^^^^ `()` cannot be formatted with the\
    \ default formatter\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `(): std::fmt::Displ"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        x.to_string()\n    } else {\n\
    \        let mut digits = String::new();\n        for i in 0..shift {\n      \
    \      digits.push_str(&format!(\"{}{}\", x.str() + i, \"\"));\n        }\n  \
    \      digits.reverse()\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpwrr4e6sn.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `str` found for type `isize` in the current scope\n  --> /tmp/tmpwrr4e6sn.rs:14:48\n\
    \   |\n14 |             digits.push_str(&format!(\"{}{}\", x.str() + i, \"\"));\n\
    \   |                                                ^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpwrr4e6sn.rs:16:16\n   |\n16 |         digits.reverse()\n\
    \   |                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut n = x;\n    let mut digits = String::new();\n    for\
    \ i in 1..shift {\n        digits = format!(\"{}{}\", digits, n.to_string());\n\
    \        n >>= 1;\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpm4arvfo9.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result: String = format!(\"{}\", x);\n    if shift\
    \ > result.len() {\n        result = result.reverse();\n    }\n    if shift >\
    \ 0 {\n        let mut cur = 0;\n        while cur < shift {\n            result.swap(0,\
    \ cur, 1);\n            cur += 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8vlo82_p.rs:10:16\n   |\n\
    10 |     if shift > result.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |     if shift > result.len().try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp8vlo82_p.rs:11:25\n   |\n11 |         result = result.reverse();\n \
    \  |                         ^^^^^^^ help: there is an associated function with\
    \ a similar name: `reserve`\n\nerror[E0599]: no method named `swap` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmp8vlo82_p.rs:16:20\n   |\n\
    16 |             result.swap(0, cur, 1);\n   |                    ^^^^ method\
    \ not found in `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        x.to_string()[..shift]\n    }\
    \ else {\n        x.to_string()[..(x.len() - shift)].to_string()\n    }\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpmcffjbjm.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmpmcffjbjm.rs:10:9\n   |\n\
    10 |         x.to_string()[..shift]\n   |         ^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `RangeTo<isize>`\n   |\n   = help: the trait `Index<RangeTo<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpmcffjbjm.rs:12:28\n   |\n12 |         x.to_string()[..(x.len()\
    \ - shift)].to_string()\n   |                            ^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n\n    let mut n = x;\n   \
    \ let mut shift_cnt = 0;\n\n    while n > 0 {\n        match shift_cnt {\n   \
    \         0 => result.push((n % 10 + '0') as char),\n            1 => (result.push(n\
    \ % 10 + '0') as char),\n            2 => {\n                let n = ((n % 10)\
    \ as char + '0');\n                result.push(n as char);\n                shift_cnt\
    \ += 1;\n            }\n            3 => {\n                let n = ((n % 10)\
    \ as char + '0');\n                let _ = (n % 10 + '0') as char;\n         \
    \       result.push((n as char));\n                shift_cnt += 1;\n         \
    \   }\n            _ => unreachable!(),\n        }\n        n /= 10;\n    }\n\n\
    \    result.reverse();\n\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmp9b263soy.rs:19:25\n\
    \   |\n19 |                 let n = ((n % 10) as char + '0');\n   |          \
    \               ^                      ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n19 -                 let\
    \ n = ((n % 10) as char + '0');\n19 +                 let n = (n % 10) as char\
    \ + '0';\n   | \n\nwarning: unnecessary parentheses around assigned value\n  -->\
    \ /tmp/tmp9b263soy.rs:24:25\n   |\n24 |                 let n = ((n % 10) as char\
    \ + '0');\n   |                         ^                      ^\n   |\nhelp:\
    \ remove these parentheses\n   |\n24 -                 let n = ((n % 10) as char\
    \ + '0');\n24 +                 let n = (n % 10) as char + '0';\n   | \n\nwarning:\
    \ unnecessary parentheses around method argument\n  --> /tmp/tmp9b263soy.rs:26:29\n\
    \   |\n26 |                 result.push((n as char));\n   |                  \
    \           ^         ^\n   |\nhelp: remove these parentheses\n   |\n26 -    \
    \             result.push((n as char));\n26 +                 result.push(n as\
    \ char);\n   | \n\nerror[E0277]: cannot add `char` to `isize`\n  --> /tmp/tmp9b263soy.rs:16:38\n\
    \   |\n16 |             0 => result.push((n % 10 + '0') as char),\n   |      \
    \                                ^ no implementation for `isize + char`\n   |\n\
    \   = help: the trait `Add<char>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Add<Rhs>`:\n             <&'a f32 as\
    \ Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n\
    \             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n    \
    \         <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n          \
    \   <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ add `char` to `isize`\n  --> /tmp/tmp9b263soy.rs:17:38\n   |\n17 |         \
    \    1 => (result.push(n % 10 + '0') as char),\n   |                         \
    \             ^ no implementation for `isize + char`\n   |\n   = help: the trait\
    \ `Add<char>` is not implemented for `isize`\n   = h"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string().chars().skip(shift).take(shift);\n\
    \    let mut rev = digits[0..0];\n    rev.reverse();\n    let rev_str = rev.collect::<String>();\n\
    \    if rev_str.len() == shift {\n        rev_str\n    } else {\n        rev_str.clone()\
    \ + rev_str.rjust(rev_str.len() - shift, ' ')\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcrpvj8wy.rs:9:49\n  |\n9 |\
    \     let mut digits = x.to_string().chars().skip(shift).take(shift);\n  |   \
    \                                              ^^^^^ expected `usize`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n  |\n9 |     let mut digits = x.to_string().chars().skip(shift.try_into().unwrap()).take(shift);\n\
    \  |                                                      ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpcrpvj8wy.rs:9:61\n  |\n9 |    \
    \ let mut digits = x.to_string().chars().skip(shift).take(shift);\n  |       \
    \                                                      ^^^^^ expected `usize`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n  |\n9 |     let mut digits = x.to_string().chars().skip(shift).take(shift.try_into().unwrap());\n\
    \  |                                                                  ++++++++++++++++++++\n\
    \nerror[E0608]: cannot index into a value of type `std::iter::Take<Skip<Chars<'_>>>`\n\
    \  --> /tmp/tmpcrpvj8wy.rs:10:19\n   |\n10 |     let mut rev = digits[0..0];\n\
    \   |                   ^^^^^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for &d in &x[0..shift] {\n\
    \        s += &d;\n    }\n    let mut i = shift;\n    for &d in &x[shift..] {\n\
    \        s += &d[i&1];\n        i /= 2;\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpbn22yvt0.rs:10:16\n\
    \   |\n10 |     for &d in &x[0..shift] {\n   |                ^^^^^^^^^^^\n\n\
    error[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n  --> /tmp/tmpbn22yvt0.rs:10:10\n   |\n10 |     for &d in &x[0..shift]\
    \ {\n   |          ^ doesn't have a size known at compile-time\n   |\n   = help:\
    \ the trait `Sized` is not implemented for `str`\n   = note: all local variables\
    \ must have a statically known size\n   = help: unsized locals are gated as an\
    \ unstable feature\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmpbn22yvt0.rs:14:16\n   |\n14 |     for &d in &x[shift..] {\n   |\
    \                ^^^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0608.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        let len = x.len() - shift;\n\
    \        (x.rev()).slice_to(len).collect::<String>()\n    } else {\n        let\
    \ len = x.len() - shift;\n        (x.iter().rev()).slice_to(len).collect::<String>()\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmprgwiafy7.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmprgwiafy7.rs:10:21\n\
    \   |\n10 |         let len = x.len() - shift;\n   |                     ^^^ method\
    \ not found in `isize`\n\nerror[E0599]: `isize` is not an iterator\n  --> /tmp/tmprgwiafy7.rs:11:12\n\
    \   |\n11 |         (x.rev()).slice_to(len).collect::<String>()\n   |        \
    \    ^^^ `isize` is not an iterator\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `isize: Iterator`\n           which is required\
    \ by `&mut isize: Iterator`\n\nerror[E0599]: no method named `len` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmprgwiafy7.rs:13:21\n   |\n13 |  \
    \       let len = x.len() - shift;\n   |                     ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `iter` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmprgwiafy7.rs:14:12\n   |\n14 |         (x.iter().rev()).slice_to(len).collect::<String>()\n\
    \   |            ^^^^ method not found in `isize`\n\nerror: aborting due to 5\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    // Get the last digit of the number x\n    let mut last_digit\
    \ = x.mod_rem(u8::MAX as u64);\n    if last_digit < shift {\n        let mut tmp\
    \ = x;\n        tmp.div_mod_pow(2, shift - last_digit);\n        return String::from_utf8(&tmp).unwrap();\n\
    \    }\n\n    // Get the first digit of the number x\n    let mut first_digit\
    \ = x.mod_rem(u8::MAX as u64);\n    let mut tmp = x;\n    tmp.div_mod_pow(2, shift);\n\
    \n    // Shift all digits right by shift\n    while first_digit < shift {\n  \
    \      tmp.div_mod_pow(2, shift - first_digit);\n        first_digit += 1;\n \
    \   }\n\n    String::from_utf8(&tmp).unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `mod_rem` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpvdhw31s4.rs:10:28\n   |\n10 |     let mut last_digit =\
    \ x.mod_rem(u8::MAX as u64);\n   |                            ^^^^^^^ method not\
    \ found in `isize`\n\nerror[E0599]: no method named `div_mod_pow` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpvdhw31s4.rs:13:13\n   |\n13 |  \
    \       tmp.div_mod_pow(2, shift - last_digit);\n   |             ^^^^^^^^^^^\
    \ method not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvdhw31s4.rs:14:34\n\
    \   |\n14 |         return String::from_utf8(&tmp).unwrap();\n   |           \
    \                       ^^^^ expected struct `Vec`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<u8>`\n           found reference `&isize`\n\nerror[E0599]:\
    \ no method named `mod_rem` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpvdhw31s4.rs:18:29\n   |\n18 |     let mut first_digit = x.mod_rem(u8::MAX\
    \ as u64);\n   |                             ^^^^^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `div_mod_pow` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpvdhw31s4.rs:20:9\n   |\n20 |     tmp.div_mod_pow(2, shift);\n\
    \   |         ^^^^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `div_mod_pow` found for type `isize` in the current scope\n  --> /tmp/tmpvdhw31s4.rs:24:13\n\
    \   |\n24 |         tmp.div_mod_pow(2, shift - first_digit);\n   |           \
    \  ^^^^^^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpvdhw31s4.rs:28:23\n   |\n28 |     String::from_utf8(&tmp).unwrap()\n\
    \   |                       ^^^^ expected struct `Vec`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<u8>`\n           found reference `&isize`\n\n\
    error: aborting due to 7 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits.rotate_left(shift);\n\
    \    digits[0..shift].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `rotate_left` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmp2myvj7ao.rs:10:12\n   |\n10 |     digits.rotate_left(shift);\n\
    \   |            ^^^^^^^^^^^ method not found in `String`\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmp2myvj7ao.rs:11:5\n\
    \   |\n11 |     digits[0..shift].to_string()\n   |     ^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `std::ops::Range<isize>`\n   |\n   = help: the trait `Index<std::ops::Range<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    while x > 0 {\n        s +=\
    \ *x % 10;\n        x = (x / 10) - 1;\n    }\n\n    if x < 0 {\n        for i\
    \ in 0..shift {\n            s += '0';\n        }\n        s += '1';\n    } else\
    \ {\n        for i in 0..shift {\n            s += '9';\n        }\n    }\n  \
    \  s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpu36lfylp.rs:11:14\n\
    \   |\n11 |         s += *x % 10;\n   |              ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpu36lfylp.rs:17:18\n   |\n17 |             s += '0';\n \
    \  |                  ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n   |\n17 |             s += \"\
    0\";\n   |                  ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu36lfylp.rs:19:14\n\
    \   |\n19 |         s += '1';\n   |              ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    19 |         s += \"1\";\n   |              ~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpu36lfylp.rs:22:18\n   |\n22 |             s += '9';\n   |     \
    \             ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant to write\
    \ a `str` literal, use double quotes\n   |\n22 |             s += \"9\";\n   |\
    \                  ~~~\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut xs = x.to_string();\n    if shift > xs.len() {\n  \
    \      xs.reverse();\n    }\n    xs.chars()\n        .skip_while(|c| c >= '0'\
    \ && c <= '9')\n        .take(shift)\n        .collect()\n}\n\nfn main() {\n \
    \   let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpay4tblut.rs:10:16\n   |\n\
    10 |     if shift > xs.len() {\n   |                ^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n10 |     if shift > xs.len().try_into().unwrap()\
    \ {\n   |                        ++++++++++++++++++++\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpay4tblut.rs:11:12\n\
    \   |\n11 |         xs.reverse();\n   |            ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpay4tblut.rs:14:30\n   |\n14 |         .skip_while(|c| c >= '0'\
    \ && c <= '9')\n   |                              ^^^\n   |                  \
    \            |\n   |                              expected `&char`, found `char`\n\
    \   |                              help: consider borrowing here: `&'0'`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpay4tblut.rs:14:42\n   |\n14 |         .skip_while(|c|\
    \ c >= '0' && c <= '9')\n   |                                          ^^^\n \
    \  |                                          |\n   |                        \
    \                  expected `&char`, found `char`\n   |                      \
    \                    help: consider borrowing here: `&'9'`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpay4tblut.rs:15:15\n   |\n15 |         .take(shift)\n  \
    \ |               ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    15 |         .take(shift.try_into().unwrap())\n   |                    ++++++++++++++++++++\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    match shift {\n        0 => String::from(x),\n        1 =>\
    \ String::from(x),\n        _ => x.to_string().to_chars().cycle().take(shift).collect::<String>().reverse(),\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `String: From<isize>` is not satisfied\n\
    \  --> /tmp/tmpx9ng6siz.rs:10:14\n   |\n10 |         0 => String::from(x),\n \
    \  |              ^^^^^^^^^^^^ the trait `From<isize>` is not implemented for\
    \ `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror[E0277]: the trait bound `String: From<isize>` is not satisfied\n  -->\
    \ /tmp/tmpx9ng6siz.rs:11:14\n   |\n11 |         1 => String::from(x),\n   |  \
    \            ^^^^^^^^^^^^ the trait `From<isize>` is not implemented for `String`\n\
    \   |\n   = help: the following other types implement trait `From<T>`:\n     \
    \        <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror[E0599]: no method named `to_chars` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpx9ng6siz.rs:12:28\n   |\n12 |         _ => x.to_string().to_chars().cycle().take(shift).collect::<String>().reverse(),\n\
    \   |                            ^^^^^^^^ help: there is an associated function\
    \ with a similar name: `chars`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let len = x.abs();\n    let mut result = String::new();\n \
    \   let mut n = 0;\n    while n > 0 {\n        result.push_str(&x.to_string()[n\
    \ as usize - len].to_string());\n        n = (n as usize) >> shift;\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu6y6amzg.rs:13:53\n   |\n\
    13 |         result.push_str(&x.to_string()[n as usize - len].to_string());\n\
    \   |                                                     ^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpu6y6amzg.rs:13:51\n\
    \   |\n13 |         result.push_str(&x.to_string()[n as usize - len].to_string());\n\
    \   |                                                   ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpu6y6amzg.rs:13:26\n   |\n13 |         result.push_str(&x.to_string()[n\
    \ as usize - len].to_string());\n   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string().chars().enumerate();\n\
    \    if shift < digits.len() {\n        digits.reverse();\n    }\n    for i in\
    \ 0..shift {\n        s += &digits[i].to_string();\n    }\n    s + &digits[shift..].to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `len` exists for struct `Enumerate<Chars<'_>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp70s7vq2q.rs:11:23\n \
    \  |\n11 |       if shift < digits.len() {\n   |                         ^^^ method\
    \ cannot be called on `Enumerate<Chars<'_>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `Chars<'_>:\
    \ ExactSizeIterator`\n           which is required by `Enumerate<Chars<'_>>: ExactSizeIterator`\n\
    \nerror[E0599]: no method named `reverse` found for struct `Enumerate` in the\
    \ current scope\n  --> /tmp/tmp70s7vq2q.rs:12:16\n   |\n12 |         digits.reverse();\n\
    \   |                ^^^^^^^ method not found in `Enumerate<Chars<'_>>`\n\nerror[E0608]:\
    \ cannot index into a value of type `Enumerate<Chars<'_>>`\n  --> /tmp/tmp70s7vq2q.rs:15:15\n\
    \   |\n15 |         s += &digits[i].to_string();\n   |               ^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `Enumerate<Chars<'_>>`\n  -->\
    \ /tmp/tmp70s7vq2q.rs:17:10\n   |\n17 |     s + &digits[shift..].to_string()\n\
    \   |          ^^^^^^^^^^^^^^^\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0599, E0608.\nFor more information about\
    \ an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut res = String::new();\n    while x != 0 {\n        res.push_str(String::from(&x\
    \ % 10).unwrap());\n        x /= 10;\n        shift -= 1;\n    }\n    if shift\
    \ < 0 {\n        res.reverse();\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `String: From<isize>` is not satisfied\n\
    \  --> /tmp/tmpvf0fyys7.rs:11:22\n   |\n11 |         res.push_str(String::from(&x\
    \ % 10).unwrap());\n   |                      ^^^^^^^^^^^^ the trait `From<isize>`\
    \ is not implemented for `String`\n   |\n   = help: the following other types\
    \ implement trait `From<T>`:\n             <String as From<&String>>\n       \
    \      <String as From<&mut str>>\n             <String as From<&str>>\n     \
    \        <String as From<Box<str>>>\n             <String as From<Cow<'a, str>>>\n\
    \             <String as From<char>>\n\nerror[E0599]: no method named `unwrap`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpvf0fyys7.rs:11:44\n\
    \   |\n11 |         res.push_str(String::from(&x % 10).unwrap());\n   |      \
    \                                      ^^^^^^ method not found in `String`\n\n\
    error[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpvf0fyys7.rs:16:13\n   |\n16 |         res.reverse();\n\
    \   |             ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut buffer = String::with_capacity(x.saturating_sub(shift).clone());\n\
    \    let mut digits = x;\n    let mut carry = 0;\n    for _ in 0..shift {\n  \
    \      if digits <= 0 {\n            break;\n        }\n        buffer.push_str(&format!(\"\
    {}\", digits).to_string());\n        digits -= 1;\n    }\n    if carry > 0 {\n\
    \        buffer.push_str(&format!(\"{}\", carry).to_string());\n    }\n    buffer.into()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpybp0gkqa.rs:9:44\n  |\n9 |\
    \     let mut buffer = String::with_capacity(x.saturating_sub(shift).clone());\n\
    \  |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut buffer\
    \ = String::with_capacity(x.saturating_sub(shift).clone().try_into().unwrap());\n\
    \  |                                                                         \
    \  ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        x.iter().rev().map(|c| c.to_string()).collect()\n\
    \    } else {\n        let mut s = x.to_string();\n        for _ in 0..shift {\n\
    \            let index = s.len() - 1;\n            s = &s[..index] + &s[..(index\
    \ - 1)];\n        }\n        s\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpp910lr6p.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpp910lr6p.rs:10:11\n\
    \   |\n10 |         x.iter().rev().map(|c| c.to_string()).collect()\n   |    \
    \       ^^^^ method not found in `isize`\n\nerror[E0369]: cannot add `&str` to\
    \ `&str`\n  --> /tmp/tmpp910lr6p.rs:15:29\n   |\n15 |             s = &s[..index]\
    \ + &s[..(index - 1)];\n   |                 ----------- ^ ----------------- &str\n\
    \   |                 |           |\n   |                 |           `+` cannot\
    \ be used to concatenate two `&str` strings\n   |                 &str\n   |\n\
    \   = note: string concatenation requires an owned `String` on the left\nhelp:\
    \ remove the borrow to obtain an owned `String`\n   |\n15 -             s = &s[..index]\
    \ + &s[..(index - 1)];\n15 +             s = s[..index] + &s[..(index - 1)];\n\
    \   | \n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0369, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let digits = &x.to_string();\n    if shift == 0 {\n       \
    \ return digits[0];\n    }\n\n    let mut digits = String::from(\"\");\n    let\
    \ mut carry = digits[digits.len() - 1];\n\n    for &d in digits.iter().rev() {\n\
    \        let res = d + carry;\n        if res < 10 {\n            carry = res\
    \ % 10;\n        } else {\n            carry = 0;\n            digits.push((res\
    \ % 10) as u8);\n        }\n    }\n    if carry > 0 {\n        digits.push(carry\
    \ as u8);\n    }\n    digits[digits.len() - shift..].to_string()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmp8dx74fdq.rs:11:16\n   |\n11 |         return digits[0];\n   |      \
    \          ^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help:\
    \ the trait `Index<{integer}>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp8dx74fdq.rs:15:21\n\
    \   |\n15 |     let mut carry = digits[digits.len() - 1];\n   |              \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]:\
    \ no method named `iter` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp8dx74fdq.rs:17:22\n   |\n17 |     for &d in digits.iter().rev() {\n\
    \   |                      ^^^^ method not found in `String`\n   |\nhelp: because\
    \ of the in-memory representation of `&str`, to obtain an `Iterator` over each\
    \ of its codepoint use method `chars`\n   |\n17 |     for &d in digits.chars().rev()\
    \ {\n   |                      ~~~~~\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8dx74fdq.rs:23:25\n   |\n23 |             digits.push((res % 10) as\
    \ u8);\n   |                         ^^^^^^^^^^^^^^^^ expected `char`, found `u8`\n\
    \nerror[E0308]: mismatched ty"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   if i < x.chars().count() {\n            s.push(x[x.chars().count() - i - 1]);\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `chars` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp39o57x6w.rs:11:18\n   |\n11 |         if i < x.chars().count()\
    \ {\n   |                  ^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `chars` found for type `isize` in the current scope\n  --> /tmp/tmp39o57x6w.rs:12:24\n\
    \   |\n12 |             s.push(x[x.chars().count() - i - 1]);\n   |          \
    \              ^^^^^ method not found in `isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    x.to_string().chars().enumerate().filter_map(|(i, _)| {\n \
    \       if i >= shift {\n            Some(x.to_string()[i..(x.to_string().len()\
    \ - i)].to_string())\n        } else {\n            None\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqkbjfimj.rs:10:17\n   |\n\
    10 |         if i >= shift {\n   |                 ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n10 |         if i >= shift.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = String::new();\n    for i in 0..shift {\n\
    \        digits.push(x.mod(10).unwrap());\n        x = x / 10;\n    }\n    for\
    \ i in 0..shift {\n        digits.push(x.unwrap());\n        x = x / 10;\n   \
    \ }\n    digits.reverse()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found keyword `mod`\n  --> /tmp/tmp346bi2dp.rs:11:23\n\
    \   |\n11 |         digits.push(x.mod(10).unwrap());\n   |                   \
    \    ^^^ expected identifier, found keyword\n   |\nhelp: escape `mod` to use it\
    \ as an identifier\n   |\n11 |         digits.push(x.r#mod(10).unwrap());\n  \
    \ |                       ++\n\nerror[E0599]: no method named `r#mod` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmp346bi2dp.rs:11:23\n   |\n11\
    \ |         digits.push(x.mod(10).unwrap());\n   |                       ^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `unwrap` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmp346bi2dp.rs:15:23\n   |\n15 |  \
    \       digits.push(x.unwrap());\n   |                       ^^^^^^ method not\
    \ found in `isize`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmp346bi2dp.rs:18:12\n   |\n18 | \
    \    digits.reverse()\n   |            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = String::new();\n    let mut i = x;\n    while\
    \ i > 0 {\n        digits.push(i % 10);\n        i /= 10;\n    }\n    for d in\
    \ digits.chars().rev() {\n        if shift > 0 {\n            *d = *d.clone()\
    \ + (*d >> shift);\n        }\n        shift -= 1;\n    }\n    digits\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkfiy9z9b.rs:12:21\n   |\n\
    12 |         digits.push(i % 10);\n   |                     ^^^^^^ expected `char`,\
    \ found `isize`\n\nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpkfiy9z9b.rs:17:13\n\
    \   |\n17 |             *d = *d.clone() + (*d >> shift);\n   |             ^^\n\
    \nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpkfiy9z9b.rs:17:18\n\
    \   |\n17 |             *d = *d.clone() + (*d >> shift);\n   |               \
    \   ^^^^^^^^^^\n\nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpkfiy9z9b.rs:17:32\n\
    \   |\n17 |             *d = *d.clone() + (*d >> shift);\n   |               \
    \                 ^^\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    assert!(shift > 0 && shift < 10);\n    let mut s = String::new();\n\
    \    if shift == 0 {\n        s.push_str(&format!(\"{}\", x));\n    } else {\n\
    \        let mut r = x;\n        for _ in 0..shift {\n            r = r / 10;\n\
    \            s.push(r % 10 + '0');\n        }\n        s.push_str(&format!(\"\
    {}\", r));\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add `char` to `isize`\n  --> /tmp/tmpya68uctv.rs:17:27\n\
    \   |\n17 |             s.push(r % 10 + '0');\n   |                          \
    \ ^ no implementation for `isize + char`\n   |\n   = help: the trait `Add<char>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    x.to_string().chars()\n        .map(|c| match c.to_digit(10)\
    \ {\n            Some(d) => if shift > d {\n                c - d\n          \
    \  } else {\n                c - d\n            }\n            None => c,\n  \
    \      })\n        .collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdvqq9mvk.rs:11:35\n   |\n\
    11 |             Some(d) => if shift > d {\n   |                             \
    \      ^ expected `isize`, found `u32`\n   |\nhelp: you can convert a `u32` to\
    \ an `isize` and panic if the converted value doesn't fit\n   |\n11 |        \
    \     Some(d) => if shift > d.try_into().unwrap() {\n   |                    \
    \                ++++++++++++++++++++\n\nerror[E0369]: cannot subtract `u32` from\
    \ `char`\n  --> /tmp/tmpdvqq9mvk.rs:12:19\n   |\n12 |                 c - d\n\
    \   |                 - ^ - u32\n   |                 |\n   |                \
    \ char\n\nerror[E0369]: cannot subtract `u32` from `char`\n  --> /tmp/tmpdvqq9mvk.rs:14:19\n\
    \   |\n14 |                 c - d\n   |                 - ^ - u32\n   |      \
    \           |\n   |                 char\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        let mut s = String::with_capacity(x.len()\
    \ + shift);\n        s.push_str(&x.to_ascii_lowercase());\n        for i in 1..shift\
    \ {\n            s.push_str(&s[i - 1]);\n        }\n        return s\n    } else\
    \ {\n        let mut s = String::with_capacity(x.len() + shift);\n        s.push_str(&x.to_ascii_lowercase());\n\
    \        for _ in 0..shift {\n            s.push_str(&s[x.len() - 1]);\n     \
    \   }\n        return s\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpdpt22mdk.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpdpt22mdk.rs:10:45\n\
    \   |\n10 |         let mut s = String::with_capacity(x.len() + shift);\n   |\
    \                                             ^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `to_ascii_lowercase` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpdpt22mdk.rs:11:23\n   |\n11 |         s.push_str(&x.to_ascii_lowercase());\n\
    \   |                       ^^^^^^^^^^^^^^^^^^ method not found in `isize`\n\n\
    error[E0277]: the type `String` cannot be indexed by `isize`\n  --> /tmp/tmpdpt22mdk.rs:13:25\n\
    \   |\n13 |             s.push_str(&s[i - 1]);\n   |                         ^^^^^^^^\
    \ `String` cannot be indexed by `isize`\n   |\n   = help: the trait `Index<isize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpdpt22mdk.rs:17:45\n   |\n17 |         let mut s\
    \ = String::with_capacity(x.len() + shift);\n   |                            \
    \                 ^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `to_ascii_lowercase` found for type `isize` in the current scope\n  --> /tmp/tmpdpt22mdk.rs:18:23\n\
    \   |\n18 |         s.push_str(&x.to_ascii_lowercase());\n   |               \
    \        ^^^^^^^^^^^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpdpt22mdk.rs:20:29\n\
    \   |\n20 "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut x = x.to_string();\n    (0..shift).step(|i| {\n   \
    \     x += \"0\".to_string();\n        x += \"1\".to_string();\n    })\n    .unwrap();\n\
    \    x\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `step` found for struct `std::ops::Range`\
    \ in the current scope\n  --> /tmp/tmp7gw86_h5.rs:10:16\n   |\n10 |     (0..shift).step(|i|\
    \ {\n   |                ^^^^ method not found in `std::ops::Range<isize>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp7gw86_h5.rs:11:14\n   |\n11 |  \
    \       x += \"0\".to_string();\n   |              ^^^^^^^^^^^^^^^\n   |     \
    \         |\n   |              expected `&str`, found struct `String`\n   |  \
    \            help: consider borrowing here: `&\"0\".to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7gw86_h5.rs:12:14\n   |\n12 |         x += \"\
    1\".to_string();\n   |              ^^^^^^^^^^^^^^^\n   |              |\n   |\
    \              expected `&str`, found struct `String`\n   |              help:\
    \ consider borrowing here: `&\"1\".to_string()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    fn int_to_digits(i: isize) -> Vec<isize> {\n        let mut\
    \ digits = vec![];\n        let mut r = i;\n        while r > 0 {\n          \
    \  digits.push(r % 10);\n            r = r / 10;\n        }\n        digits\n\
    \    }\n\n    let mut digits = int_to_digits(x);\n    for i in 0..shift {\n  \
    \      digits.pop();\n    }\n    digits.reverse()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbijhjuri.rs:23:5\n   |\n\
    8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |             \
    \                                 ------ expected `String` because of return type\n\
    ...\n23 |     digits.reverse()\n   |     ^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `()`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits.rev();\n    digits.append(&[digits[shift..shift].iter().cloned().collect::<Vec<_>>()]);\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpfcgxr2g1.rs:10:12\n\
    \    |\n10  |       digits.rev();\n    |              ^^^ `String` is not an iterator;\
    \ try calling `.chars()` or `.bytes()`\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror[E0599]: no method named\
    \ `append` found for struct `String` in the current scope\n  --> /tmp/tmpfcgxr2g1.rs:11:12\n\
    \   |\n11 |     digits.append(&[digits[shift..shift].iter().cloned().collect::<Vec<_>>()]);\n\
    \   |            ^^^^^^ method not found in `String`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmpfcgxr2g1.rs:11:21\n\
    \   |\n11 |     digits.append(&[digits[shift..shift].iter().cloned().collect::<Vec<_>>()]);\n\
    \   |                     ^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut d = x;\n    for i in\
    \ 0..shift {\n        s.push(d%10);\n        d /= 10;\n    }\n    s.push(d);\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph4nbnvnk.rs:12:16\n   |\n\
    12 |         s.push(d%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmph4nbnvnk.rs:15:12\n   |\n15 |\
    \     s.push(d);\n   |            ^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut shift = shift % x.digits().len();\n\
    \    for i in 0..shift {\n        s += &x.digits()[x.digits().len() - shift -\
    \ i];\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n \
    \   assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpuyn8ys01.rs:10:31\n   |\n10 |     let mut shift = shift\
    \ % x.digits().len();\n   |                               ^^^^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `digits` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpuyn8ys01.rs:12:17\n   |\n12 |         s\
    \ += &x.digits()[x.digits().len() - shift - i];\n   |                 ^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `digits` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpuyn8ys01.rs:12:28\n   |\n12 |  \
    \       s += &x.digits()[x.digits().len() - shift - i];\n   |                \
    \            ^^^^^^ method not found in `isize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift == 0 {\n        return x.to_string();\n    }\n   \
    \ if x == 0 {\n        return String::from(\"0\");\n    }\n    format!(\"{:0>{}}\"\
    , x >> shift, shift)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error: invalid format string: expected `'}'`, found `'{'`\n  --> /tmp/tmpbysdzj25.rs:15:18\n\
    \   |\n15 |     format!(\"{:0>{}}\", x >> shift, shift)\n   |              - \
    \  ^ expected `}` in format string\n   |              |\n   |              because\
    \ of this opening brace\n   |\n   = note: if you intended to print `{`, you can\
    \ escape it using `{{`\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut current_digit\
    \ = x; // first digit is the least significant digit in x >> shift\n    let mut\
    \ shift_digit = shift; // next shift is most significant digit in x >> shift\n\
    \n    while current_digit > 0 {\n        let next_digit = current_digit % 10;\n\
    \        result += &(next_digit as char);\n        current_digit = current_digit\
    \ / 10;\n    }\n\n    // reverse the string\n    while shift_digit > 0 {\n   \
    \     result = &result[..(result.len() - 1)] + &result[(result.len() - 1)..];\n\
    \        shift_digit -= 1;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_v4ei9tx.rs:15:19\n   |\n\
    15 |         result += &(next_digit as char);\n   |                   ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `str`, found `char`\n   |\n   = note: expected reference `&str`\n \
    \             found reference `&char`\n\nerror[E0369]: cannot add `&str` to `&str`\n\
    \  --> /tmp/tmp_v4ei9tx.rs:21:48\n   |\n21 |         result = &result[..(result.len()\
    \ - 1)] + &result[(result.len() - 1)..];\n   |                  -----------------------------\
    \ ^ ----------------------------- &str\n   |                  |              \
    \               |\n   |                  |                             `+` cannot\
    \ be used to concatenate two `&str` strings\n   |                  &str\n   |\n\
    \   = note: string concatenation requires an owned `String` on the left\nhelp:\
    \ remove the borrow to obtain an owned `String`\n   |\n21 -         result = &result[..(result.len()\
    \ - 1)] + &result[(result.len() - 1)..];\n21 +         result = result[..(result.len()\
    \ - 1)] + &result[(result.len() - 1)..];\n   | \n\nerror[E0604]: only `u8` can\
    \ be cast as `char`, not `isize`\n  --> /tmp/tmp_v4ei9tx.rs:15:20\n   |\n15 |\
    \         result += &(next_digit as char);\n   |                    ^^^^^^^^^^^^^^^^^^^^\
    \ invalid cast\n   |\nhelp: try `char::from_u32` instead (via a `u32`)\n  -->\
    \ /tmp/tmp_v4ei9tx.rs:15:20\n   |\n15 |         result += &(next_digit as char);\n\
    \   |                    ^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369, E0604.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        x.to_string().rev()\n    } else\
    \ {\n        x.to_string().rev().append(&mut [0; shift]);\n    }\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpogo1le9e.rs:12:45\n   |\n8  | fn circular_shift(x: isize, shift: isize)\
    \ -> String {\n   |                             ----- this would need to be a\
    \ `const`\n...\n12 |         x.to_string().rev().append(&mut [0; shift]);\n  \
    \ |                                             ^^^^^\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n --> /tmp/tmpogo1le9e.rs:9:18\n\
    \  |\n9 |     if shift > x.len() {\n  |                  ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: `String` is not an iterator\n   --> /tmp/tmpogo1le9e.rs:10:23\n\
    \    |\n10  |           x.to_string().rev()\n    |                         ^^^\
    \ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n \
    \   = note: the following trait bounds were not satisfied:\n            `String:\
    \ Iterator`\n            which is required by `&mut String: Iterator`\n      \
    \      `str: Iterator`\n            which is required by `&mut str: Iterator`\n\
    \nerror[E0599]: `String` is not an iterator\n   --> /tmp/tmpogo1le9e.rs:12:23\n\
    \    |\n12  |           x.to_string().rev().append(&mut [0; shift]);\n    |  \
    \                       ^^^ `String` is not an iterator; try calling `.chars()`\
    \ or `.bytes()`\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `String: Iterator`\n            which is required by `&mut String:\
    \ Iterator`\n            `str: Iterator`\n            which is required by `&mut\
    \ str: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpogo1le9e.rs:11:12\n\
    \   |\n11 |       } else {\n   |  ____________^\n12 | |         x.to_string().rev().append(&mut\
    \ [0; shift]);\n13 | |     }\n   | |_____^ expected struct `String`, found `()`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0435, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   if i >= x.len() {\n            continue;\n        }\n        s += &x[x.len()\
    \ - 1 - i];\n    }\n    if shift > x.len() {\n        for i in x.len() - shift..x.len()\
    \ {\n            s += &x[i];\n        }\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpaxq_rkah.rs:11:19\n   |\n11 |         if i >= x.len() {\n\
    \   |                   ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpaxq_rkah.rs:14:19\n\
    \   |\n14 |         s += &x[x.len() - 1 - i];\n   |                   ^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `len` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpaxq_rkah.rs:16:18\n   |\n16 |     if shift\
    \ > x.len() {\n   |                  ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpaxq_rkah.rs:17:20\n\
    \   |\n17 |         for i in x.len() - shift..x.len() {\n   |                \
    \    ^^^ method not found in `isize`\n\nerror[E0599]: no method named `len` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpaxq_rkah.rs:17:37\n   |\n\
    17 |         for i in x.len() - shift..x.len() {\n   |                       \
    \              ^^^ method not found in `isize`\n\nerror[E0608]: cannot index into\
    \ a value of type `isize`\n  --> /tmp/tmpaxq_rkah.rs:18:19\n   |\n18 |       \
    \      s += &x[i];\n   |                   ^^^^\n\nerror: aborting due to 6 previous\
    \ errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits.rotate_left(shift).to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `rotate_left` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmpea92wu3n.rs:10:12\n   |\n10 |     digits.rotate_left(shift).to_string()\n\
    \   |            ^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    while x >= shift {\n      \
    \  x = x % shift;\n        s += char::from(x) as char;\n    }\n    s += char::from(x);\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `char: From<isize>` is not satisfied\n  -->\
    \ /tmp/tmp_b32ovkm.rs:12:14\n   |\n12 |         s += char::from(x) as char;\n\
    \   |              ^^^^^^^^^^ the trait `From<isize>` is not implemented for `char`\n\
    \   |\n   = help: the trait `From<u8>` is implemented for `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_b32ovkm.rs:12:14\n   |\n12 |         s += char::from(x)\
    \ as char;\n   |              ^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0277]: the trait bound `char: From<isize>` is not satisfied\n  --> /tmp/tmp_b32ovkm.rs:14:10\n\
    \   |\n14 |     s += char::from(x);\n   |          ^^^^^^^^^^ the trait `From<isize>`\
    \ is not implemented for `char`\n   |\n   = help: the trait `From<u8>` is implemented\
    \ for `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_b32ovkm.rs:14:10\n\
    \   |\n14 |     s += char::from(x);\n   |          ^^^^^^^^^^^^^ expected `&str`,\
    \ found `char`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        let mut digits = Vec::new();\n\
    \        for &i in x.iter().rev() {\n            digits.push(i);\n        }\n\
    \        digits.reverse();\n        format!(\"{}\", digits)\n    } else {\n  \
    \      let mut digits = vec![0; shift];\n        let mut carry = 0;\n        for\
    \ i in 0..shift {\n            let digit = x.chars().nth(i).unwrap();\n      \
    \      if i >= shift {\n                digits.insert(i, digit + carry);\n   \
    \         } else {\n                digits.insert(i, digit);\n            }\n\
    \            carry = (carry << 1) | (digit & 1);\n        }\n        format!(\"\
    {}\", digits)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp3heph6_6.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `iter` found for type `isize` in the current scope\n  --> /tmp/tmp3heph6_6.rs:11:21\n\
    \   |\n11 |         for &i in x.iter().rev() {\n   |                     ^^^^\
    \ method not found in `isize`\n\nerror[E0277]: `Vec<_>` doesn't implement `std::fmt::Display`\n\
    \  --> /tmp/tmp3heph6_6.rs:15:23\n   |\n15 |         format!(\"{}\", digits)\n\
    \   |                       ^^^^^^ `Vec<_>` cannot be formatted with the default\
    \ formatter\n   |\n   = help: the trait `std::fmt::Display` is not implemented\
    \ for `Vec<_>`\n   = note: in format strings you may be able to use `{:?}` (or\
    \ {:#?} for pretty-print) instead\n   = note: this error originates in the macro\
    \ `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3heph6_6.rs:17:34\n\
    \   |\n17 |         let mut digits = vec![0; shift];\n   |                   \
    \               ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    17 |         let mut digits = vec![0; shift.try_into().unwrap()];\n   |      \
    \                                 ++++++++++++++++++++\n\nerror[E0599]: no method\
    \ named `chars` found for type `isize` in the current scope\n  --> /tmp/tmp3heph6_6.rs:20:27\n\
    \   |\n20 |             let digit = x.chars().nth(i).unwrap();\n   |         \
    \                  ^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3heph6_6.rs:22:31\n   |\n22 |                 digits.insert(i,\
    \ digit + carry);\n   |                               ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n22 |                 digits.insert(i.try_into().unwrap(),\
    \ digit + carry);\n   |                                ++++++++++++++++++++\n\n\
    error[E03"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string().chars();\n    let mut result\
    \ = String::new();\n    loop {\n        if shift == 0 {\n            break;\n\
    \        }\n        result.push_str(&digits.next());\n        shift -= 1;\n  \
    \  }\n    result.reverse();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq6sik6yw.rs:15:25\n   |\n\
    15 |         result.push_str(&digits.next());\n   |                         ^^^^^^^^^^^^^^\
    \ expected `str`, found enum `Option`\n   |\n   = note: expected reference `&str`\n\
    \              found reference `&Option<char>`\n\nerror[E0599]: no method named\
    \ `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpq6sik6yw.rs:18:12\n\
    \   |\n18 |     result.reverse();\n   |            ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    x.to_string().chars()\n        .enumerate()\n        .filter_map(|(i,\
    \ _)| {\n            if i < shift {\n                Some((i, x.to_string().chars().nth(i).unwrap().to_digit(10).unwrap()))\n\
    \            } else {\n                None\n            }\n        })\n     \
    \   .fold(String::new(), |mut acc, (i, digit)| {\n            acc.push(*digit\
    \ + acc.chars().nth(i - shift).unwrap().to_digit(10).unwrap());\n            acc\n\
    \        })\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdcpgb4ix.rs:12:20\n   |\n\
    12 |             if i < shift {\n   |                    ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |             if i < shift.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror[E0614]: type `u32`\
    \ cannot be dereferenced\n  --> /tmp/tmpdcpgb4ix.rs:19:22\n   |\n19 |        \
    \     acc.push(*digit + acc.chars().nth(i - shift).unwrap().to_digit(10).unwrap());\n\
    \   |                      ^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdcpgb4ix.rs:19:51\n\
    \   |\n19 |             acc.push(*digit + acc.chars().nth(i - shift).unwrap().to_digit(10).unwrap());\n\
    \   |                                                   ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpdcpgb4ix.rs:19:49\n\
    \   |\n19 |             acc.push(*digit + acc.chars().nth(i - shift).unwrap().to_digit(10).unwrap());\n\
    \   |                                                 ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    debug_assert!(shift <= x.len() as isize);\n    let mut result\
    \ = String::new();\n    for i in 0..shift {\n        result.push((x.rotate_left(64).unwrap()\
    \ & 0xFF).to_string());\n    }\n    for i in shift..x.len() {\n        result.push((x.rotate_left(64).unwrap()\
    \ & 0xFF).to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpthrcbkug.rs:9:30\n  |\n9 |     debug_assert!(shift <= x.len()\
    \ as isize);\n  |                              ^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpthrcbkug.rs:12:40\n   |\n12 |         result.push((x.rotate_left(64).unwrap()\
    \ & 0xFF).to_string());\n   |                                        ^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `len` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpthrcbkug.rs:14:23\n   |\n14 |     for i\
    \ in shift..x.len() {\n   |                       ^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpthrcbkug.rs:15:40\n   |\n15 |         result.push((x.rotate_left(64).unwrap()\
    \ & 0xFF).to_string());\n   |                                        ^^^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    while digits.len() > shift\
    \ {\n        digits = &digits[digits.len() - shift .. digits.len() - 1];\n   \
    \ }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7lnbj__i.rs:10:26\n   |\n\
    10 |     while digits.len() > shift {\n   |                          ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |     while digits.len()\
    \ > shift.try_into().unwrap() {\n   |                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7lnbj__i.rs:11:41\n   |\n11 |\
    \         digits = &digits[digits.len() - shift .. digits.len() - 1];\n   |  \
    \                                       ^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp7lnbj__i.rs:11:39\n\
    \   |\n11 |         digits = &digits[digits.len() - shift .. digits.len() - 1];\n\
    \   |                                       ^ no implementation for `usize - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n             <&'a\
    \ f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128\
    \ as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as\
    \ Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7lnbj__i.rs:11:18\n   |\n9  |     let mut digits\
    \ = x.to_string();\n   |                      ------------- expected due to this\
    \ value\n10 |     while digits.len() > shift {\n11 |         digits = &digits[digits.len()\
    \ - shift .. digits.len() - 1];\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\nhelp: try using a conversion method\n\
    \   |\n11 |         digits = (&digits[digits.len() - shift .. digits.len() - 1]).to_string();\n\
    \   |                  +                                                 +++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        if x > 0isize {\n           \
    \ String::from(r#\"\"#.to_string() + (x * shift % x.len()).to_string())\n    \
    \    } else {\n            String::from(r#\"\"#.to_string() - (x * shift % x.len()).to_string())\n\
    \        }\n    } else {\n        String::from(r#\"\"#.to_string() + (x * shift\
    \ % x.len()).to_string())\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpx8ysd9ce.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpx8ysd9ce.rs:11:61\n\
    \   |\n11 |             String::from(r#\"\"#.to_string() + (x * shift % x.len()).to_string())\n\
    \   |                                                             ^^^ method not\
    \ found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx8ysd9ce.rs:11:46\n\
    \   |\n11 |             String::from(r#\"\"#.to_string() + (x * shift % x.len()).to_string())\n\
    \   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                                              |\n   |                   \
    \                           expected `&str`, found struct `String`\n   |     \
    \                                         help: consider borrowing here: `&(x\
    \ * shift % x.len()).to_string()`\n\nerror[E0599]: no method named `len` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpx8ysd9ce.rs:13:61\n   |\n\
    13 |             String::from(r#\"\"#.to_string() - (x * shift % x.len()).to_string())\n\
    \   |                                                             ^^^ method not\
    \ found in `isize`\n\nerror[E0369]: cannot subtract `String` from `String`\n \
    \ --> /tmp/tmpx8ysd9ce.rs:13:44\n   |\n13 |             String::from(r#\"\"#.to_string()\
    \ - (x * shift % x.len()).to_string())\n   |                          -----------------\
    \ ^ --------------------------------- String\n   |                          |\n\
    \   |                          String\n\nerror[E0599]: no method named `len` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpx8ysd9ce.rs:16:57\n   |\n\
    16 |         String::from(r#\"\"#.to_string() + (x * shift % x.len()).to_string())\n\
    \   |                                                         ^^^ method not found\
    \ in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx8ysd9ce.rs:16:42\n\
    \   |\n16 |         String::from(r#\"\"#.to_string() + (x * shift %"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut xs = x / (shift as\
    \ isize);\n    let mut shift_remainder = x % shift;\n\n    while xs > 0 {\n  \
    \      s.push(((xs % 10) as char) + ('0' as char));\n        xs /= 10;\n    }\n\
    \n    if shift_remainder != 0 {\n        s.push((shift_remainder as char) + ('0'\
    \ as char));\n    }\n\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `char` to `char`\n  --> /tmp/tmpa_rq5r3m.rs:14:36\n\
    \   |\n14 |         s.push(((xs % 10) as char) + ('0' as char));\n   |       \
    \         ------------------- ^ ------------- char\n   |                |\n  \
    \ |                char\n\nerror[E0369]: cannot add `char` to `char`\n  --> /tmp/tmpa_rq5r3m.rs:19:42\n\
    \   |\n19 |         s.push((shift_remainder as char) + ('0' as char));\n   | \
    \               ------------------------- ^ ------------- char\n   |         \
    \       |\n   |                char\n\nerror[E0604]: only `u8` can be cast as\
    \ `char`, not `isize`\n  --> /tmp/tmpa_rq5r3m.rs:14:16\n   |\n14 |         s.push(((xs\
    \ % 10) as char) + ('0' as char));\n   |                ^^^^^^^^^^^^^^^^^^^ invalid\
    \ cast\n   |\nhelp: try `char::from_u32` instead (via a `u32`)\n  --> /tmp/tmpa_rq5r3m.rs:14:16\n\
    \   |\n14 |         s.push(((xs % 10) as char) + ('0' as char));\n   |       \
    \         ^^^^^^^^^^^^^^^^^^^\n\nerror[E0604]: only `u8` can be cast as `char`,\
    \ not `isize`\n  --> /tmp/tmpa_rq5r3m.rs:19:16\n   |\n19 |         s.push((shift_remainder\
    \ as char) + ('0' as char));\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^ invalid\
    \ cast\n   |\nhelp: try `char::from_u32` instead (via a `u32`)\n  --> /tmp/tmpa_rq5r3m.rs:19:16\n\
    \   |\n19 |         s.push((shift_remainder as char) + ('0' as char));\n   | \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0369, E0604.\nFor more information\
    \ about an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    // The digits in x are stored in reverse order\n    let mut\
    \ digits = x.to_string().reverse();\n    // The shifted digits will be stored\
    \ here\n    let mut shifted_digits = String::new();\n    // The carry is maintained\
    \ here\n    let mut carry = 0;\n\n    // Loop through the digits of the integer\
    \ x one by one\n    for i in (0..digits.len() - 1).rev() {\n        // Add the\
    \ carry to the digit from the right and store it in the variable carry\n     \
    \   carry = digits[i].chars().nth(shift).unwrap() + (carry as isize);\n      \
    \  // Concatenate the carry with the shifted digits\n        shifted_digits +=\
    \ carry;\n\n        // Set the carry zero if the length is less than shift\n \
    \       carry %= 10;\n        if carry != 0 {\n            shifted_digits += &\"\
    0\";\n        }\n\n        // Remove the last digit from the shifted digits\n\
    \        digits.pop();\n    }\n    // If the length of the shifted_digits is less\
    \ than the length of digits, return digits\n    // reversed\n    if shifted_digits.len()\
    \ < digits.len() {\n        digits[digits.len() - shifted_digits.len()..digits.len()]\n\
    \    } else {\n        digits[digits.len() - shifted_digits.len()..]\n    }\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp3pxixci6.rs:10:36\n   |\n10 |     let mut digits\
    \ = x.to_string().reverse();\n   |                                    ^^^^^^^\
    \ help: there is an associated function with a similar name: `reserve`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3pxixci6.rs:21:27\n   |\n21 |         shifted_digits\
    \ += carry;\n   |                           ^^^^^ expected `&str`, found integer\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string().chars().enumerate().rev();\n\
    \    let mut result = String::new();\n    for i in 0..shift {\n        result.push((*digits.get(i)).to_string());\n\
    \    }\n    result.reverse();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n\
    \    --> /tmp/tmpjt6duxjy.rs:9:56\n     |\n9    |     let mut digits = x.to_string().chars().enumerate().rev();\n\
    \     |                                                        ^^^ the trait `ExactSizeIterator`\
    \ is not implemented for `Chars<'_>`\n     |\n     = help: the following other\
    \ types implement trait `ExactSizeIterator`:\n               &mut I\n        \
    \       Args\n               ArgsOs\n               ArrayChunks<'_, T, N>\n  \
    \             ArrayChunksMut<'_, T, N>\n               ArrayWindows<'_, T, N>\n\
    \               Box<I, A>\n               Chunks<'_, T>\n             and 109\
    \ others\n     = note: required because of the requirements on the impl of `DoubleEndedIterator`\
    \ for `Enumerate<Chars<'_>>`\nnote: required by a bound in `rev`\n\nerror[E0599]:\
    \ no method named `get` found for struct `Rev` in the current scope\n  --> /tmp/tmpjt6duxjy.rs:12:30\n\
    \   |\n12 |         result.push((*digits.get(i)).to_string());\n   |         \
    \                     ^^^ method not found in `Rev<Enumerate<Chars<'_>>>`\n\n\
    error[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpjt6duxjy.rs:14:12\n   |\n14 |     result.reverse();\n \
    \  |            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits: Vec<String> = x.to_string().chars().map(|c|\
    \ c.to_string()).collect();\n    while digits.len() > shift {\n        digits.pop();\n\
    \    }\n    while digits.len() < shift {\n        digits.insert(0, 0);\n    }\n\
    \    digits.reverse()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpii4a9o37.rs:10:26\n   |\n\
    10 |     while digits.len() > shift {\n   |                          ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |     while digits.len()\
    \ > shift.try_into().unwrap() {\n   |                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpii4a9o37.rs:13:26\n   |\n13 |\
    \     while digits.len() < shift {\n   |                          ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |     while digits.len()\
    \ < shift.try_into().unwrap() {\n   |                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpii4a9o37.rs:14:26\n   |\n14 |\
    \         digits.insert(0, 0);\n   |                          ^- help: try using\
    \ a conversion method: `.to_string()`\n   |                          |\n   | \
    \                         expected struct `String`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpii4a9o37.rs:16:5\n   |\n8  | fn circular_shift(x:\
    \ isize, shift: isize) -> String {\n   |                                     \
    \         ------ expected `String` because of return type\n...\n16 |     digits.reverse()\n\
    \   |     ^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for c in x.to_string().chars()\
    \ {\n        s.push_str(c.to_string() + &mut s.chars().skip(shift).last().to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdmw6gjdc.rs:11:56\n   |\n\
    11 |         s.push_str(c.to_string() + &mut s.chars().skip(shift).last().to_string());\n\
    \   |                                                        ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n11 |         s.push_str(c.to_string()\
    \ + &mut s.chars().skip(shift.try_into().unwrap()).last().to_string());\n   |\
    \                                                             ++++++++++++++++++++\n\
    \nerror[E0599]: `Option<char>` doesn't implement `std::fmt::Display`\n   --> /tmp/tmpdmw6gjdc.rs:11:70\n\
    \    |\n11  |           s.push_str(c.to_string() + &mut s.chars().skip(shift).last().to_string());\n\
    \    |                                                                       \
    \ ^^^^^^^^^ `Option<char>` cannot be formatted with the default formatter\n  \
    \  |\n    = note: the following trait bounds were not satisfied:\n           \
    \ `Option<char>: std::fmt::Display`\n            which is required by `Option<char>:\
    \ ToString`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdmw6gjdc.rs:11:20\n\
    \   |\n11 |         s.push_str(c.to_string() + &mut s.chars().skip(shift).last().to_string());\n\
    \   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    expected `&str`, found struct\
    \ `String`\n   |                    help: consider borrowing here: `&(c.to_string()\
    \ + &mut s.chars().skip(shift).last().to_string())`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut i = 0;\n    let mut result = String::new();\n    while\
    \ i > 0 {\n        if i > shift {\n            result += '0';\n            i -=\
    \ shift;\n        } else {\n            result += '1';\n            i -= 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdw2qfn2g.rs:13:23\n   |\n\
    13 |             result += '0';\n   |                       ^^^ expected `&str`,\
    \ found `char`\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n13 |             result += \"0\";\n   |                      \
    \ ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdw2qfn2g.rs:16:23\n   |\n\
    16 |             result += '1';\n   |                       ^^^ expected `&str`,\
    \ found `char`\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n16 |             result += \"1\";\n   |                      \
    \ ~~~\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut n = x;\n    let mut tmp = shift;\n    loop {\n    \
    \    n >>= tmp;\n        if n <= 0 {\n            break;\n        }\n        tmp\
    \ >>= 1;\n    }\n    let mut s = String::with_capacity(x.to_string().len() + shift\
    \ as usize + 1);\n    s.push_str(x.to_string());\n    for i in 0..(shift + 1)\
    \ {\n        let tmp = (n & 1) as char;\n        if tmp > 0 {\n            s.push_str(tmp);\n\
    \        } else {\n            s.push_str(tmp.reverse());\n        }\n       \
    \ n >>= 1;\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpehvwevcq.rs:19:16\n   |\n\
    19 |     s.push_str(x.to_string());\n   |                ^^^^^^^^^^^^^\n   | \
    \               |\n   |                expected `&str`, found struct `String`\n\
    \   |                help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpehvwevcq.rs:22:18\n   |\n22 |         if tmp\
    \ > 0 {\n   |                  ^ expected `char`, found `u8`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpehvwevcq.rs:23:24\n   |\n23 |             s.push_str(tmp);\n\
    \   |                        ^^^ expected `&str`, found `char`\n\nerror[E0599]:\
    \ no method named `reverse` found for type `char` in the current scope\n  -->\
    \ /tmp/tmpehvwevcq.rs:25:28\n   |\n25 |             s.push_str(tmp.reverse());\n\
    \   |                            ^^^^^^^ method not found in `char`\n\nerror[E0604]:\
    \ only `u8` can be cast as `char`, not `isize`\n  --> /tmp/tmpehvwevcq.rs:21:19\n\
    \   |\n21 |         let tmp = (n & 1) as char;\n   |                   ^^^^^^^^^^^^^^^\
    \ invalid cast\n   |\nhelp: try `char::from_u32` instead (via a `u32`)\n  -->\
    \ /tmp/tmpehvwevcq.rs:21:19\n   |\n21 |         let tmp = (n & 1) as char;\n \
    \  |                   ^^^^^^^^^^^^^^^\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599, E0604.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    x.to_string().chars().skip(shift - x.to_string().chars().count())\n\
    \        .collect::<String>().reverse()\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpavax4xrb.rs:9:40\n  |\n9 |\
    \     x.to_string().chars().skip(shift - x.to_string().chars().count())\n  | \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpavax4xrb.rs:9:32\n\
    \  |\n9 |     x.to_string().chars().skip(shift - x.to_string().chars().count())\n\
    \  |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     x.to_string().chars().skip((shift\
    \ - x.to_string().chars().count()).try_into().unwrap())\n  |                 \
    \               +                                     +++++++++++++++++++++\n\n\
    error[E0277]: cannot subtract `usize` from `isize`\n --> /tmp/tmpavax4xrb.rs:9:38\n\
    \  |\n9 |     x.to_string().chars().skip(shift - x.to_string().chars().count())\n\
    \  |                                      ^ no implementation for `isize - usize`\n\
    \  |\n  = help: the trait `Sub<usize>` is not implemented for `isize`\n  = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n            <&'a f32\
    \ as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n\
    \            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n      \
    \      <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a\
    \ isize as Sub<isize>>\n          and 48 others\n\nerror[E0599]: no method named\
    \ `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpavax4xrb.rs:10:30\n\
    \   |\n10 |         .collect::<String>().reverse()\n   |                     \
    \         ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    if shift > x.len() {\n    \
    \    for i in 0..shift {\n            s.push(x[i]);\n        }\n        for i\
    \ in 0..x.len() - shift {\n            s.push(x[i]);\n        }\n        return\
    \ s.to_string();\n    }\n    for i in 0..shift {\n        s.push(x[i]);\n    }\n\
    \    for i in x.len() - shift {\n        s.push(x[i]);\n    }\n    return s.to_string();\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp44ba3jq1.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmp44ba3jq1.rs:12:20\n   |\n\
    12 |             s.push(x[i]);\n   |                    ^^^^\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n  --> /tmp/tmp44ba3jq1.rs:14:23\n\
    \   |\n14 |         for i in 0..x.len() - shift {\n   |                      \
    \ ^^^ method not found in `isize`\n\nerror[E0608]: cannot index into a value of\
    \ type `isize`\n  --> /tmp/tmp44ba3jq1.rs:15:20\n   |\n15 |             s.push(x[i]);\n\
    \   |                    ^^^^\n\nerror[E0608]: cannot index into a value of type\
    \ `isize`\n  --> /tmp/tmp44ba3jq1.rs:20:16\n   |\n20 |         s.push(x[i]);\n\
    \   |                ^^^^\n\nerror[E0599]: no method named `len` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmp44ba3jq1.rs:22:16\n   |\n22 |  \
    \   for i in x.len() - shift {\n   |                ^^^ method not found in `isize`\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmp44ba3jq1.rs:23:16\n\
    \   |\n23 |         s.push(x[i]);\n   |                ^^^^\n\nerror: aborting\
    \ due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    if shift > x.len() {\n    \
    \    s.reverse();\n        shift = 0;\n    }\n    for i in 0..shift {\n      \
    \  s += \"0\";\n    }\n    for d in x.chars() {\n        for _ in 0..shift {\n\
    \            s += \"0\";\n        }\n        s += d;\n        for _ in 1..shift\
    \ {\n            s += \"0\";\n        }\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpn2xwv6h4.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpn2xwv6h4.rs:11:11\n\
    \   |\n11 |         s.reverse();\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror[E0599]: no method named `chars`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpn2xwv6h4.rs:17:16\n\
    \   |\n17 |     for d in x.chars() {\n   |                ^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let digits = x.to_string();\n    let digits_reversed = digits.chars().rev().collect::<String>();\n\
    \    if digits.len() < shift {\n        return digits_reversed;\n    }\n\n   \
    \ let mut new_str = String::new();\n    let mut i = 0;\n    for d in digits_reversed\
    \ {\n        if i == shift {\n            new_str.push(d);\n        } else {\n\
    \            new_str.push(d);\n        }\n        i += 1;\n    }\n    return new_str;\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn42jjx03.rs:11:23\n   |\n\
    11 |     if digits.len() < shift {\n   |                       ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     if digits.len()\
    \ < shift.try_into().unwrap() {\n   |                            ++++++++++++++++++++\n\
    \nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpn42jjx03.rs:17:14\n\
    \   |\n17 |     for d in digits_reversed {\n   |              ^^^^^^^^^^^^^^^\
    \ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n  \
    \ = help: the trait `Iterator` is not implemented for `String`\n   = note: required\
    \ because of the requirements on the impl of `IntoIterator` for `String`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for digit in x.to_string().chars().take(shift\
    \ as usize) {\n        s.push(*digit);\n    }\n    s[..].to_string()\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpjz8s7tuz.rs:11:16\n\
    \   |\n11 |         s.push(*digit);\n   |                ^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for i in 0..shift {\n     \
    \   s += x.to_string().chars().nth(i).unwrap();\n    }\n    if shift < x.len()\
    \ {\n        for i in (0..shift).rev() {\n            s += x.to_string().chars().nth(i).unwrap();\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr6tikx_f.rs:11:40\n   |\n\
    11 |         s += x.to_string().chars().nth(i).unwrap();\n   |               \
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n11 |         s += x.to_string().chars().nth(i.try_into().unwrap()).unwrap();\n\
    \   |                                         ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr6tikx_f.rs:11:14\n   |\n11 |         s += x.to_string().chars().nth(i).unwrap();\n\
    \   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found\
    \ `char`\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpr6tikx_f.rs:13:18\n   |\n13 |     if shift < x.len()\
    \ {\n   |                  ^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr6tikx_f.rs:15:44\n   |\n15 |             s += x.to_string().chars().nth(i).unwrap();\n\
    \   |                                            ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n15 |             s += x.to_string().chars().nth(i.try_into().unwrap()).unwrap();\n\
    \   |                                             ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr6tikx_f.rs:15:18\n   |\n15 |             s\
    \ += x.to_string().chars().nth(i).unwrap();\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror: aborting due to 5 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        x.to_string().reverse().to_string()\n\
    \    } else {\n        let mut result = String::new();\n        result.push_str(x.to_string()\
    \ + \"\");\n        result.truncate(result.len() - shift);\n        result\n \
    \   }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpxb2ag3fe.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpxb2ag3fe.rs:10:23\n\
    \   |\n10 |         x.to_string().reverse().to_string()\n   |                \
    \       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxb2ag3fe.rs:13:25\n   |\n13 |\
    \         result.push_str(x.to_string() + \"\");\n   |                       \
    \  ^^^^^^^^^^^^^^^^^^\n   |                         |\n   |                  \
    \       expected `&str`, found struct `String`\n   |                         help:\
    \ consider borrowing here: `&(x.to_string() + \"\")`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxb2ag3fe.rs:14:40\n   |\n14 |         result.truncate(result.len()\
    \ - shift);\n   |                                        ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpxb2ag3fe.rs:14:38\n\
    \   |\n14 |         result.truncate(result.len() - shift);\n   |             \
    \                         ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due\
    \ to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    match x {\n        0 => \"0\",\n        x if x < 10 => String::from(x),\n\
    \        x if x < 100 => &x.to_string()[..shift],\n        x if x < 1000 => &x.to_string()[..(shift\
    \ - 1)] + &x.to_string()[(shift - 1)..].chars().nth(shift).collect::<String>(\"\
    \").to_string(),\n        _ => &x.to_string()[..(shift - 1)] + &x.to_string()[(shift\
    \ - 1)..(shift - 1)].chars().nth(shift).collect::<String>(\"\").to_string(),\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuzgpnk76.rs:10:14\n   |\n\
    8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |             \
    \                                 ------ expected `String` because of return type\n\
    9  |     match x {\n10 |         0 => \"0\",\n   |              ^^^- help: try\
    \ using a conversion method: `.to_string()`\n   |              |\n   |       \
    \       expected struct `String`, found `&str`\n\nerror[E0277]: the trait bound\
    \ `String: From<isize>` is not satisfied\n  --> /tmp/tmpuzgpnk76.rs:11:24\n  \
    \ |\n11 |         x if x < 10 => String::from(x),\n   |                      \
    \  ^^^^^^^^^^^^ the trait `From<isize>` is not implemented for `String`\n   |\n\
    \   = help: the following other types implement trait `From<T>`:\n           \
    \  <String as From<&String>>\n             <String as From<&mut str>>\n      \
    \       <String as From<&str>>\n             <String as From<Box<str>>>\n    \
    \         <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n  -->\
    \ /tmp/tmpuzgpnk76.rs:12:26\n   |\n12 |         x if x < 100 => &x.to_string()[..shift],\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `RangeTo<isize>`\n   |\n   = help: the trait `Index<RangeTo<isize>>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpuzgpnk76.rs:13:27\n   |\n13 |         x if x < 1000 => &x.to_string()[..(shift\
    \ - 1)] + &x.to_string()[(shift - 1)..].chars().nth(shift).collect::<String>(\"\
    \").to_string(),\n   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot b"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = x.to_string();\n    digits = digits[0..shift.min(digits.len())];\n\
    \    digits[shift.min(digits.len())..digits.len()].to_string() + digits\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj2luvnn3.rs:10:34\n   |\n\
    10 |     digits = digits[0..shift.min(digits.len())];\n   |                  \
    \                ^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n10 |     digits = digits[0..shift.min(digits.len().try_into().unwrap())];\n\
    \   |                                              ++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmpj2luvnn3.rs:10:14\n\
    \   |\n10 |     digits = digits[0..shift.min(digits.len())];\n   |           \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj2luvnn3.rs:11:22\n\
    \   |\n11 |     digits[shift.min(digits.len())..digits.len()].to_string() + digits\n\
    \   |                      ^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n11 |     digits[shift.min(digits.len().try_into().unwrap())..digits.len()].to_string()\
    \ + digits\n   |                                  ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpj2luvnn3.rs:11:37\n   |\n11 |     digits[shift.min(digits.len())..digits.len()].to_string()\
    \ + digits\n   |                                     ^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpj2luvnn3.rs:11:5\n   |\n11 |     d"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    assert!(shift <= x.len() + 1, \"shift of circular_shift out\
    \ of range\");\n\n    if shift == x.len() {\n        return x.to_string();\n \
    \   }\n\n    let mut result: String = String::new();\n    let mut remainder =\
    \ x;\n    for i in 0..shift {\n        if i > (x.len() - 1) {\n            result.push_str(&remainder.to_string().rev());\n\
    \            remainder = 0;\n        }\n        remainder += 1;\n        result.push((remainder\
    \ % 10 + '0').to_string());\n        remainder /= 10;\n    }\n    result.push_str(&remainder.to_string());\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpqaiyc690.rs:9:24\n  |\n9 |     assert!(shift <= x.len()\
    \ + 1, \"shift of circular_shift out of range\");\n  |                       \
    \ ^^^ method not found in `isize`\n\nerror[E0599]: no method named `len` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpqaiyc690.rs:11:19\n   |\n\
    11 |     if shift == x.len() {\n   |                   ^^^ method not found in\
    \ `isize`\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpqaiyc690.rs:18:19\n   |\n18 |         if i > (x.len()\
    \ - 1) {\n   |                   ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ `String` is not an iterator\n   --> /tmp/tmpqaiyc690.rs:19:52\n    |\n19  |\
    \               result.push_str(&remainder.to_string().rev());\n    |        \
    \                                              ^^^ `String` is not an iterator;\
    \ try calling `.chars()` or `.bytes()`\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror[E0277]: cannot add `char`\
    \ to `isize`\n  --> /tmp/tmpqaiyc690.rs:23:37\n   |\n23 |         result.push((remainder\
    \ % 10 + '0').to_string());\n   |                                     ^ no implementation\
    \ for `isize + char`\n   |\n   = help: the trait `Add<char>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    debug_assert!(shift > 0);\n\n    let mut result = String::new();\n\
    \    for i in 0..shift {\n        if x & (1 << (i + 1)) != 0 {\n            let\
    \ digit = x & ((1 << i) - 1);\n            result += String::from(\"9\"[digit\
    \ == 1]) + &\"0\".to_string();\n        } else {\n            result += \"0\"\
    .to_string();\n        }\n    }\n    result + String::from(\"9\"[(x >> shift)\
    \ != 1]);\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `str` cannot be indexed by `bool`\n  --> /tmp/tmphlyqulvs.rs:15:36\n\
    \   |\n15 |             result += String::from(\"9\"[digit == 1]) + &\"0\".to_string();\n\
    \   |                                    ^^^^^^^^^^^^^^^ string indices are ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<str>` is not implemented\
    \ for `bool`\n   = note: required because of the requirements on the impl of `Index<bool>`\
    \ for `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphlyqulvs.rs:15:23\n\
    \   |\n15 |             result += String::from(\"9\"[digit == 1]) + &\"0\".to_string();\n\
    \   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                       |\n   |                       expected `&str`, found\
    \ struct `String`\n   |                       help: consider borrowing here: `&(String::from(\"\
    9\"[digit == 1]) + &\"0\".to_string())`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmphlyqulvs.rs:17:23\n   |\n17 |             result += \"0\".to_string();\n\
    \   |                       ^^^^^^^^^^^^^^^\n   |                       |\n  \
    \ |                       expected `&str`, found struct `String`\n   |       \
    \                help: consider borrowing here: `&\"0\".to_string()`\n\nerror[E0277]:\
    \ the type `str` cannot be indexed by `bool`\n  --> /tmp/tmphlyqulvs.rs:20:27\n\
    \   |\n20 |     result + String::from(\"9\"[(x >> shift) != 1]);\n   |       \
    \                    ^^^^^^^^^^^^^^^^^^^^^^ string indices are ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<str>` is not implemented for `bool`\n\
    \   = note: required because of the requirements on the impl of `Index<bool>`\
    \ for `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphlyqulvs.rs:20:14\n\
    \   |\n20 |     result + String::from(\"9\"[(x >> shift) != 1]);\n   |       \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |              |\n   |      \
    \        expected `&str`, found struct `String`\n   |              help: consider\
    \ borrowing here: `&String::from(\"9\"[(x >> shift) != 1])`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphlyqulvs.rs:8:46\n   |\n8  | fn circular_shift(x: isize,\
    \ shift: isize) ->"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    match shift {\n        0 => \"0\",\n        1 => \"1\",\n \
    \       2 => \"21\",\n        3 => \"121\",\n        _ => return format!(\"{}{}\"\
    , x, (x >> shift) as isize).to_string(),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp296ibg0i.rs:10:14\n   |\n\
    8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |             \
    \                                 ------ expected `String` because of return type\n\
    9  |     match shift {\n10 |         0 => \"0\",\n   |              ^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |              |\n   |   \
    \           expected struct `String`, found `&str`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let len = x.to_string().len();\n    if len == 0 {\n       \
    \ return String::new();\n    }\n\n    if shift == 0 {\n        return x;\n   \
    \ }\n\n    let len = x.to_string().len();\n    let mut num = x;\n    let mut reverse\
    \ = 0;\n    let mut digits = String::new();\n    if shift < num {\n        //\
    \ Reverse the digits of the number\n        reverse = num % 10;\n        reverse\
    \ *= 10;\n        num = num / 10;\n    }\n\n    // Shift the digits of the number\
    \ to the left by the number of shifts\n    for _ in 0..shift {\n        digits.push(num\
    \ % 10);\n        num = num / 10;\n    }\n\n    // Reverse the digits of the number\n\
    \    if reverse > 0 {\n        digits.push(reverse);\n    }\n\n    digits.reverse()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpww861pjb.rs:15:16\n   |\n\
    8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |             \
    \                                 ------ expected `String` because of return type\n\
    ...\n15 |         return x;\n   |                ^- help: try using a conversion\
    \ method: `.to_string()`\n   |                |\n   |                expected\
    \ struct `String`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpww861pjb.rs:31:21\n\
    \   |\n31 |         digits.push(num % 10);\n   |                     ^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpww861pjb.rs:37:21\n\
    \   |\n37 |         digits.push(reverse);\n   |                     ^^^^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpww861pjb.rs:40:12\n   |\n40 | \
    \    digits.reverse()\n   |            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut buffer = String::new();\n    while x != 0 {\n     \
    \   buffer.insert(0, char::to_digit(x % 10));\n        x /= 10;\n    }\n    let\
    \ mut reversed = String::new();\n    for c in &buffer[..] {\n        reversed.insert(0,\
    \ char::to_digit(*c as isize));\n    }\n    reversed.rotate_left(shift);\n   \
    \ reversed\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmp9dwb27db.rs:11:26\n    |\n11  |         buffer.insert(0, char::to_digit(x\
    \ % 10));\n    |                          ^^^^^^^^^^^^^^ ------ supplied 1 argument\n\
    \    |                          |\n    |                          expected 2 arguments\n\
    \    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9dwb27db.rs:11:26\n   |\n11 |         buffer.insert(0, char::to_digit(x\
    \ % 10));\n   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `char`,\
    \ found enum `Option`\n   |\n   = note: expected type `char`\n              found\
    \ enum `Option<u32>`\n\nerror[E0277]: `&str` is not an iterator\n  --> /tmp/tmp9dwb27db.rs:15:14\n\
    \   |\n15 |     for c in &buffer[..] {\n   |              ^^^^^^^^^^^ `&str` is\
    \ not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the\
    \ trait `Iterator` is not implemented for `&str`\n   = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `&str`\n\nerror[E0061]:\
    \ this function takes 2 arguments but 1 argument was supplied\n   --> /tmp/tmp9dwb27db.rs:16:28\n\
    \    |\n16  |         reversed.insert(0, char::to_digit(*c as isize));\n    |\
    \                            ^^^^^^^^^^^^^^ ----------- supplied 1 argument\n\
    \    |                            |\n    |                            expected\
    \ 2 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9dwb27db.rs:16:28\n   |\n16 |         reversed.insert(0,\
    \ char::to_digit(*c as isize));\n   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<u32>`\n\nerror[E0599]: no method named `rotate_left`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp9dwb27db.rs:18:14\n\
    \   |\n18 |     reversed.rotate_left(shift);\n   |              ^^^^^^^^^^^ method\
    \ not found in `String`\n\nerror: aborting due to 6 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0277, E0308, E"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    assert!(shift <= x.digits().len(),\n        Error::<T>::InvalidShift(shift));\n\
    \n    let mut digits = x.digits();\n    for _ in 0..(shift - 1) {\n        digits.rotate_left(1);\n\
    \    }\n\n    // reverse digits if shift is greater than number of digits\n  \
    \  if shift > digits.len() {\n        digits.reverse();\n    }\n\n    format!(\"\
    {}\", digits)\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Error`\n  -->\
    \ /tmp/tmp0o78_ng5.rs:10:9\n   |\n10 |         Error::<T>::InvalidShift(shift));\n\
    \   |         ^^^^^ not found in this scope\n   |\nhelp: consider importing one\
    \ of these items\n   |\n1  | use std::error::Error;\n   |\n1  | use std::fmt::Error;\n\
    \   |\n1  | use std::io::Error;\n   |\n\nerror[E0412]: cannot find type `T` in\
    \ this scope\n  --> /tmp/tmp0o78_ng5.rs:10:17\n   |\n8  | fn circular_shift(x:\
    \ isize, shift: isize) -> String {\n   |                  - help: you might be\
    \ missing a type parameter: `<T>`\n9  |     assert!(shift <= x.digits().len(),\n\
    10 |         Error::<T>::InvalidShift(shift));\n   |                 ^ not found\
    \ in this scope\n\nerror[E0599]: no method named `digits` found for type `isize`\
    \ in the current scope\n --> /tmp/tmp0o78_ng5.rs:9:24\n  |\n9 |     assert!(shift\
    \ <= x.digits().len(),\n  |                        ^^^^^^ method not found in\
    \ `isize`\n\nerror[E0599]: no method named `digits` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmp0o78_ng5.rs:12:24\n   |\n12 |     let mut digits\
    \ = x.digits();\n   |                        ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        return &x[x.len() - shift..].to_string();\n\
    \    }\n\n    let mut s = String::new();\n    for (n, c) in x.chars().zip(&x[shift\
    \ as usize..]) {\n        s.push(c);\n        if n == 0 {\n            break;\n\
    \        }\n        s.push('0');\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp5vlbfbt7.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmp5vlbfbt7.rs:10:21\n\
    \   |\n10 |         return &x[x.len() - shift..].to_string();\n   |          \
    \           ^^^ method not found in `isize`\n\nerror[E0608]: cannot index into\
    \ a value of type `isize`\n  --> /tmp/tmp5vlbfbt7.rs:10:17\n   |\n10 |       \
    \  return &x[x.len() - shift..].to_string();\n   |                 ^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0599]: no method named `chars` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp5vlbfbt7.rs:14:21\n   |\n14 |     for (n, c) in x.chars().zip(&x[shift\
    \ as usize..]) {\n   |                     ^^^^^ method not found in `isize`\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmp5vlbfbt7.rs:14:34\n\
    \   |\n14 |     for (n, c) in x.chars().zip(&x[shift as usize..]) {\n   |    \
    \                              ^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 5\
    \ previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor\
    \ more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits = x.to_string().chars();\n\
    \    for d in digits {\n        s.push(d as char);\n    }\n\n    for _ in 1..shift\
    \ {\n        digits.next();\n        s.push('0');\n    }\n\n    s.reverse();\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpnqp82cpr.rs:20:7\n   |\n20 |     s.reverse();\n\
    \   |       ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut xx = x;\n    let mut res = String::new();\n    let\
    \ mut shift = shift % x.len() as isize;\n    for i in 0..shift {\n        if xx\
    \ < 0 {\n            xx = -xx;\n        } else {\n            xx = 0;\n      \
    \  }\n        res.push((&xx).chars().nth(1).unwrap());\n    }\n    if shift >\
    \ x.len() {\n        res.reverse();\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpyyrsk6hn.rs:11:31\n   |\n11 |     let mut shift = shift\
    \ % x.len() as isize;\n   |                               ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `chars` found for reference `&isize`\
    \ in the current scope\n  --> /tmp/tmpyyrsk6hn.rs:18:24\n   |\n18 |         res.push((&xx).chars().nth(1).unwrap());\n\
    \   |                        ^^^^^ method not found in `&isize`\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpyyrsk6hn.rs:20:18\n\
    \   |\n20 |     if shift > x.len() {\n   |                  ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpyyrsk6hn.rs:21:13\n   |\n21 |         res.reverse();\n\
    \   |             ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    debug_assert!(shift >= 0 && shift <= 9);\n\n    if shift ==\
    \ 0 {\n        let mut ret = String::new();\n        ret.push_str(&format!(\"\
    {}\", x));\n        return ret;\n    }\n\n    if x <= 9 {\n        if shift >\
    \ 0 {\n            format!(\"{}{}\", x.to_string(), circular_shift(x - 10, shift\
    \ - 1))\n        } else {\n            format!(\"{}{}\", x.to_string(), circular_shift(10,\
    \ shift))\n        }\n    } else {\n        format!(\"{}{}{}\",\n            \
    \    circular_shift(x / 10, shift).to_string(),\n                x.to_string(),\n\
    \                circular_shift(x % 10, shift).to_string())\n    }\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1-9-19100-10-201000-10-20\"`,\n right: `\"001\"`', /tmp/tmpsrfjvyv4.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut num = String::new();\n    let mut shifts = 1;\n   \
    \ while x > 0u {\n        let digit = x % 10;\n        num = format!(\"{}{}\"\
    , digit, num);\n        x /= 10;\n        shifts *= 10;\n    }\n    let mut i\
    \ = 0;\n    while i >= shift {\n        i = i / 10;\n        num = format!(\"\
    {}{}\", i, num);\n    }\n    let mut i = 0;\n    while i < shift {\n        num\
    \ = format!(\"{}{}\", num, i);\n        i += 10;\n    }\n    num\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error: invalid suffix `u` for number literal\n  --> /tmp/tmp61n7sipw.rs:11:15\n\
    \   |\n11 |     while x > 0u {\n   |               ^^ invalid suffix `u`\n   |\n\
    \   = help: the suffix must be one of the numeric types (`u32`, `isize`, `f32`,\
    \ etc.)\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for digit in x.digits() {\n\
    \        *s = digit.to_string() + (*s.len() > 0 ? '.' : '');\n        s += *s.len()\
    \ > shift ? '.' : '';\n    }\n    if *s.len() > shift {\n        s.truncate(shift\
    \ - s.len());\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error: empty character literal\n  --> /tmp/tmpvni2sd4n.rs:11:57\n   |\n\
    11 |         *s = digit.to_string() + (*s.len() > 0 ? '.' : '');\n   |       \
    \                                                  ^ empty character literal\n\
    \nerror: empty character literal\n  --> /tmp/tmpvni2sd4n.rs:12:40\n   |\n12 |\
    \         s += *s.len() > shift ? '.' : '';\n   |                            \
    \            ^ empty character literal\n\nerror: expected one of `)`, `,`, `.`,\
    \ `?`, or an operator, found `'.'`\n  --> /tmp/tmpvni2sd4n.rs:11:50\n   |\n11\
    \ |         *s = digit.to_string() + (*s.len() > 0 ? '.' : '');\n   |        \
    \                                          ^^^ expected one of `)`, `,`, `.`,\
    \ `?`, or an operator\n\nerror: expected one of `!`, `&&`, `&`, `(`, `)`, `*`,\
    \ `...`, `.`, `;`, `<`, `?`, `[`, `_`, `async`, `const`, `dyn`, `else`, `extern`,\
    \ `fn`, `for`, `impl`, `unsafe`, `}`, `~`, an operator, lifetime, or path, found\
    \ `''`\n  --> /tmp/tmpvni2sd4n.rs:11:56\n   |\n11 |         *s = digit.to_string()\
    \ + (*s.len() > 0 ? '.' : '');\n   |                                         \
    \               ^^ expected one of 27 possible tokens\n\nerror[E0599]: no method\
    \ named `digits` found for type `isize` in the current scope\n  --> /tmp/tmpvni2sd4n.rs:10:20\n\
    \   |\n10 |     for digit in x.digits() {\n   |                    ^^^^^^ method\
    \ not found in `isize`\n\nerror[E0614]: type `usize` cannot be dereferenced\n\
    \  --> /tmp/tmpvni2sd4n.rs:14:8\n   |\n14 |     if *s.len() > shift {\n   |  \
    \      ^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvni2sd4n.rs:15:28\n\
    \   |\n15 |         s.truncate(shift - s.len());\n   |                       \
    \     ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpvni2sd4n.rs:15:20\n   |\n15 |         s.truncate(shift - s.len());\n\
    \   |                    ^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n15 |         s.truncate((shift - s.len()).try_into().unwrap());\n\
    \   |                    +               +++++++++++++++"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    for i in 1..shift {\n\
    \        let x = x >> i;\n        if x >= 10 {\n            result += '0' as char;\n\
    \            result += x as char;\n        } else {\n            result += x as\
    \ char;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7hh0i_lu.rs:13:23\n   |\n\
    13 |             result += '0' as char;\n   |                       ^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7hh0i_lu.rs:14:23\n\
    \   |\n14 |             result += x as char;\n   |                       ^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7hh0i_lu.rs:16:23\n\
    \   |\n16 |             result += x as char;\n   |                       ^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0604]: only `u8` can be cast as `char`,\
    \ not `isize`\n  --> /tmp/tmp7hh0i_lu.rs:14:23\n   |\n14 |             result\
    \ += x as char;\n   |                       ^^^^^^^^^ invalid cast\n   |\nhelp:\
    \ try `char::from_u32` instead (via a `u32`)\n  --> /tmp/tmp7hh0i_lu.rs:14:23\n\
    \   |\n14 |             result += x as char;\n   |                       ^^^^^^^^^\n\
    \nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n  --> /tmp/tmp7hh0i_lu.rs:16:23\n\
    \   |\n16 |             result += x as char;\n   |                       ^^^^^^^^^\
    \ invalid cast\n   |\nhelp: try `char::from_u32` instead (via a `u32`)\n  -->\
    \ /tmp/tmp7hh0i_lu.rs:16:23\n   |\n16 |             result += x as char;\n   |\
    \                       ^^^^^^^^^\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0604.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    if shift > x.len() {\n    \
    \    // Shift amount greater than number of digits\n        s.reverse();\n   \
    \     s.push(&x[shift..]);\n    } else {\n        // Shift amount less than number\
    \ of digits\n        let mut shift = shift % x.len();\n        while shift !=\
    \ 0 {\n            s.push_str(&x[shift..]);\n            shift -= x.len();\n \
    \       }\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp8f185ir4.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp8f185ir4.rs:12:11\n\
    \   |\n12 |         s.reverse();\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror[E0608]: cannot index into a\
    \ value of type `isize`\n  --> /tmp/tmp8f185ir4.rs:13:17\n   |\n13 |         s.push(&x[shift..]);\n\
    \   |                 ^^^^^^^^^^\n\nerror[E0599]: no method named `len` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmp8f185ir4.rs:16:35\n   |\n\
    16 |         let mut shift = shift % x.len();\n   |                          \
    \         ^^^ method not found in `isize`\n\nerror[E0608]: cannot index into a\
    \ value of type `isize`\n  --> /tmp/tmp8f185ir4.rs:18:25\n   |\n18 |         \
    \    s.push_str(&x[shift..]);\n   |                         ^^^^^^^^^^\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n  --> /tmp/tmp8f185ir4.rs:19:24\n\
    \   |\n19 |             shift -= x.len();\n   |                        ^^^ method\
    \ not found in `isize`\n\nerror: aborting due to 6 previous errors\n\nSome errors\
    \ have detailed explanations: E0599, E0608.\nFor more information about an error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = String::with_capacity(x.to_digits().len());\n\
    \    digits.push_str(&x.to_digits().to_string());\n    for i in 0..shift {\n \
    \       digits.insert((digits.len() - i).abs() + i, ' ');\n    }\n    digits.insert((digits.len()\
    \ - shift).abs() + shift, '0');\n    digits.to_string()\n}\n\nfn main() {\n  \
    \  let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpb1pmixeq.rs:9:46\n  |\n9 |     let mut digits =\
    \ String::with_capacity(x.to_digits().len());\n  |                           \
    \                   ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `to_digits` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpb1pmixeq.rs:10:24\n   |\n10 |     digits.push_str(&x.to_digits().to_string());\n\
    \   |                        ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb1pmixeq.rs:12:39\n   |\n12 |         digits.insert((digits.len()\
    \ - i).abs() + i, ' ');\n   |                                       ^ expected\
    \ `usize`, found `isize`\n\nerror[E0599]: no method named `abs` found for type\
    \ `usize` in the current scope\n  --> /tmp/tmpb1pmixeq.rs:12:42\n   |\n12 |  \
    \       digits.insert((digits.len() - i).abs() + i, ' ');\n   |              \
    \                            ^^^ method not found in `usize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpb1pmixeq.rs:12:37\n   |\n\
    12 |         digits.insert((digits.len() - i).abs() + i, ' ');\n   |         \
    \                            ^ no implementation for `usize - isize`\n   |\n \
    \  = help: the trait `Sub<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as\
    \ Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n\
    \             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n    \
    \         <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n          \
    \   <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb1pmixeq.rs:14:35\n   |\n14 |     digits.insert((digits.len()\
    \ - shift).abs() + shift, '0');\n   |                                   ^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0599]: no method named `abs` found\
    \ for type `usize` in the current scope\n  --> /tmp/tmpb1pmixeq.rs:14:42\n   |\n\
    14 |     digits.insert((digits.len() - shift).abs() "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    x.to_string().chars().enumerate().filter(|(i, c)| *c == 0)\n\
    \        .map(|(i, _)| {\n            if i < shift {\n                *c\n   \
    \         } else {\n                *c.rotate_right(shift)\n            }\n  \
    \      }).collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n \
    \   assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpgtm2bx58.rs:12:18\n\
    \   |\n12 |                 *c\n   |                  ^ help: a local variable\
    \ with a similar name exists: `i`\n\nerror[E0425]: cannot find value `c` in this\
    \ scope\n  --> /tmp/tmpgtm2bx58.rs:14:18\n   |\n14 |                 *c.rotate_right(shift)\n\
    \   |                  ^ help: a local variable with a similar name exists: `i`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpgtm2bx58.rs:9:61\n  |\n9 |    \
    \ x.to_string().chars().enumerate().filter(|(i, c)| *c == 0)\n  |            \
    \                                                 ^ expected `char`, found `u8`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgtm2bx58.rs:11:20\n   |\n11 |\
    \             if i < shift {\n   |                    ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n11 |             if i < shift.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    use std::str;\n\n    let digits = x.to_string();\n\n    //\
    \ Calculate the offset to shift by, which is equivalent to shifting the\n    //\
    \ first character by 1 place, then the first two characters by the 2nd\n    //\
    \ place, and so on.\n    let offset = shift.abs() as isize;\n    let mut first_character_index\
    \ = 1;\n    for i in offset..=digits.len() {\n        digits.insert(first_character_index,\
    \ digits[i]);\n        first_character_index += 1;\n    }\n\n    String::from_utf8(digits.as_bytes()).unwrap()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::str`\n --> /tmp/tmp4m1gt9j1.rs:9:9\n  |\n\
    9 |     use std::str;\n  |         ^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]`\
    \ on by default\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4m1gt9j1.rs:18:23\n\
    \   |\n18 |     for i in offset..=digits.len() {\n   |                       ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n18 |     for i in\
    \ offset..=digits.len().try_into().unwrap() {\n   |                          \
    \         ++++++++++++++++++++\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp4m1gt9j1.rs:19:46\n   |\n19 |         digits.insert(first_character_index,\
    \ digits[i]);\n   |                                              ^^^^^^^^^ `String`\
    \ cannot be indexed by `isize`\n   |\n   = help: the trait `Index<isize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4m1gt9j1.rs:23:23\n\
    \   |\n23 |     String::from_utf8(digits.as_bytes()).unwrap()\n   |          \
    \             ^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_vec()`\n\
    \   |                       |\n   |                       expected struct `Vec`,\
    \ found `&[u8]`\n   |\n   = note: expected struct `Vec<u8>`\n           found\
    \ reference `&[u8]`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let digits = x.to_string();\n    let mut result = String::from(\"\
    \");\n    for digit in digits[0..(shift + 1)].chars() {\n        result = format!(\"\
    {}{}\", result, digit);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpq6v25sh9.rs:11:18\n   |\n11 |     for digit in digits[0..(shift\
    \ + 1)].chars() {\n   |                  ^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `std::ops::Range<isize>`\n   |\n   = help: the trait `Index<std::ops::Range<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digits: Vec<u8> = Vec::new();\n\
    \n    digits.push((x >> shift) as u8);\n    digits.push((x & !(u8::pow8(shift))\
    \ as u8));\n\n    for (i, &b) in digits.get_mut().iter_mut().enumerate() {\n \
    \       b.copy_from_slice(&mut s[s.len() - i - shift..s.len() - i]);\n    }\n\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmprn0gpcc7.rs:13:17\n\
    \   |\n13 |     digits.push((x & !(u8::pow8(shift)) as u8));\n   |           \
    \      ^                            ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n13 -     digits.push((x\
    \ & !(u8::pow8(shift)) as u8));\n13 +     digits.push(x & !(u8::pow8(shift)) as\
    \ u8);\n   | \n\nerror[E0599]: no function or associated item named `pow8` found\
    \ for type `u8` in the current scope\n  --> /tmp/tmprn0gpcc7.rs:13:28\n   |\n\
    13 |     digits.push((x & !(u8::pow8(shift)) as u8));\n   |                  \
    \          ^^^^\n   |                            |\n   |                     \
    \       function or associated item not found in `u8`\n   |                  \
    \          help: there is an associated function with a similar name: `pow`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmprn0gpcc7.rs:13:17\n   |\n13 |  \
    \   digits.push((x & !(u8::pow8(shift)) as u8));\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `u8`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u8`\
    \ and panic if the converted value doesn't fit\n   |\n13 |     digits.push(((x\
    \ & !(u8::pow8(shift)) as u8)).try_into().unwrap());\n   |                 + \
    \                             +++++++++++++++++++++\n\nerror[E0061]: this function\
    \ takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmprn0gpcc7.rs:15:27\n\
    \    |\n15  |     for (i, &b) in digits.get_mut().iter_mut().enumerate() {\n \
    \   |                           ^^^^^^^- supplied 0 arguments\n    |         \
    \                  |\n    |                           expected 1 argument\n  \
    \  |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprn0gpcc7.rs:15:13\n   |\n15 |     for (i, &b) in digits.get_mut().iter_mut().enumerate()\
    \ {\n   |             ^^     --------------------------------------- this expression\
    \ has type `Option<(usize, &mut &mut _)>`\n   |             |\n   |          \
    \   types differ in mutability\n   |             help: you can probably remove\
    \ the explicit borr"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    assert!(shift < x.len());\n    fn circular_shift_1(x: isize)\
    \ -> String {\n        x.to_string().chars().enumerate().map(|(i, ch)| (i - shift,\
    \ ch)).collect()\n    }\n    fn circular_shift_2(x: isize) -> String {\n     \
    \   x.to_string().chars().enumerate().rev().map(|(i, ch)| (shift + i, ch)).collect()\n\
    \    }\n    match shift {\n        0 => x.to_string(),\n        1 => circular_shift_1(x),\n\
    \        _ => circular_shift_2(x),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmpwkydvk56.rs:11:62\n\
    \   |\n11 |         x.to_string().chars().enumerate().map(|(i, ch)| (i - shift,\
    \ ch)).collect()\n   |                                                       \
    \       ^^^^^\n   |\n   = help: use the `|| { ... }` closure form instead\n\n\
    error[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmpwkydvk56.rs:14:64\n\
    \   |\n14 |         x.to_string().chars().enumerate().rev().map(|(i, ch)| (shift\
    \ + i, ch)).collect()\n   |                                                  \
    \              ^^^^^\n   |\n   = help: use the `|| { ... }` closure form instead\n\
    \nerror[E0599]: no method named `len` found for type `isize` in the current scope\n\
    \ --> /tmp/tmpwkydvk56.rs:9:23\n  |\n9 |     assert!(shift < x.len());\n  |  \
    \                     ^^^ method not found in `isize`\n\nerror[E0277]: a value\
    \ of type `String` cannot be built from an iterator over elements of type `(usize,\
    \ char)`\n    --> /tmp/tmpwkydvk56.rs:11:74\n     |\n11   |         x.to_string().chars().enumerate().map(|(i,\
    \ ch)| (i - shift, ch)).collect()\n     |                                    \
    \                                      ^^^^^^^ value of type `String` cannot be\
    \ built from `std::iter::Iterator<Item=(usize, char)>`\n     |\n     = help: the\
    \ trait `FromIterator<(usize, char)>` is not implemented for `String`\n     =\
    \ help: the following other types implement trait `FromIterator<A>`:\n       \
    \        <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror[E0277]: the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n\
    \    --> /tmp/tmpwkydvk56.rs:14:43\n     |\n14   |         x.to_string().chars().enumerate().rev().map(|(i,\
    \ ch)| (shift + i, ch)).collect()\n     |                                    \
    \       ^^^ the trait `Ex"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    format!(\"{}\", ((x << shift) | x).to_string())\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"500\"`,\n right: `\"001\"`', /tmp/tmpv2lb7isq.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    debug_assert!(shift < 64);\n    if shift > x.len() {\n    \
    \    let mut s = String::from(\"0\");\n        for x in x.to_digits(64).rev()\
    \ {\n            *s += String::from(*x);\n        }\n        s\n    } else {\n\
    \        let mut s = String::from(\"0\");\n        for x in x.to_digits(64).rev()\
    \ {\n            *s = *x.to_digits(64).nth(64 - shift);\n            s += *x;\n\
    \        }\n        s\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmppag7ckjj.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `to_digits` found for type `isize` in the current scope\n  --> /tmp/tmppag7ckjj.rs:12:20\n\
    \   |\n12 |         for x in x.to_digits(64).rev() {\n   |                   \
    \ ^^^^^^^^^ method not found in `isize`\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `str`\n  --> /tmp/tmppag7ckjj.rs:13:13\n   |\n\
    13 |             *s += String::from(*x);\n   |             --^^^^^^^^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `str`\n\nerror[E0599]:\
    \ no method named `to_digits` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmppag7ckjj.rs:18:20\n   |\n18 |         for x in x.to_digits(64).rev()\
    \ {\n   |                    ^^^^^^^^^ method not found in `isize`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmppag7ckjj.rs:19:13\n   |\n19 |             *s = *x.to_digits(64).nth(64\
    \ - shift);\n   |             ^^ doesn't have a size known at compile-time\n \
    \  |\n   = help: the trait `Sized` is not implemented for `str`\n   = note: the\
    \ left-hand-side of an assignment must have a statically known size\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0368, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = String::with_capacity(x.to_digits() + 1);\n\
    \    let mut result = String::new();\n    let mut digit_value = x % 10;\n    let\
    \ mut carry = false;\n    for _ in 0..shift {\n        if carry {\n          \
    \  digits.insert(0, digit_value);\n            digit_value += 1;\n           \
    \ carry = false;\n        } else {\n            digits.insert(0, &digit_value);\n\
    \            digit_value += 1;\n            carry = true;\n        }\n    }\n\
    \    if carry {\n        digits.insert(0, &digit_value);\n    }\n    result.push_str(&digits);\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpnrc_wgre.rs:9:46\n  |\n9 |     let mut digits =\
    \ String::with_capacity(x.to_digits() + 1);\n  |                             \
    \                 ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnrc_wgre.rs:15:30\n   |\n15 |             digits.insert(0,\
    \ digit_value);\n   |                              ^^^^^^^^^^^ expected `char`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnrc_wgre.rs:19:30\n\
    \   |\n19 |             digits.insert(0, &digit_value);\n   |                \
    \              ^^^^^^^^^^^^ expected `char`, found `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnrc_wgre.rs:25:26\n   |\n25 |         digits.insert(0,\
    \ &digit_value);\n   |                          ^^^^^^^^^^^^ expected `char`,\
    \ found `&isize`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut str = String::new();\n    for i in 0..shift {\n   \
    \     let index = i % x.len();\n        str += &x[index..(x.len() - index)];\n\
    \    }\n    let mut len = str.len();\n    if shift > len {\n        len += 1;\n\
    \    }\n    str.trim_end();\n    str\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpqqqukomr.rs:11:27\n   |\n11 |         let index = i % x.len();\n\
    \   |                           ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpqqqukomr.rs:12:29\n\
    \   |\n12 |         str += &x[index..(x.len() - index)];\n   |               \
    \              ^^^ method not found in `isize`\n\nerror[E0608]: cannot index into\
    \ a value of type `isize`\n  --> /tmp/tmpqqqukomr.rs:12:17\n   |\n12 |       \
    \  str += &x[index..(x.len() - index)];\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqqqukomr.rs:15:16\n   |\n15 |\
    \     if shift > len {\n   |                ^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n15 |     if shift > len.try_into().unwrap() {\n   |\
    \                   ++++++++++++++++++++\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599, E0608.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    for &i in x.to_string().chars()\
    \ {\n        s.push_str(if i < shift { &i + '0' } else { &i + '9' });\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6bf2gf6_.rs:10:9\n   |\n\
    10 |     for &i in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `i`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0277]: cannot add `char` to `&_`\n  --> /tmp/tmp6bf2gf6_.rs:11:38\n\
    \   |\n11 |         s.push_str(if i < shift { &i + '0' } else { &i + '9' });\n\
    \   |                                      ^ no implementation for `&_ + char`\n\
    \   |\n   = help: the trait `Add<char>` is not implemented for `&_`\n\nerror[E0277]:\
    \ cannot add `char` to `&_`\n  --> /tmp/tmp6bf2gf6_.rs:11:56\n   |\n11 |     \
    \    s.push_str(if i < shift { &i + '0' } else { &i + '9' });\n   |          \
    \                                              ^ no implementation for `&_ + char`\n\
    \   |\n   = help: the trait `Add<char>` is not implemented for `&_`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut digit = x;\n    for\
    \ i in 0..shift {\n        digit = (digit / 10).saturating_add((digit % 10).wrapping_mul(10));\n\
    \        if digit % 10 != 0 {\n            s.push_str(&format!(\"{}\", digit %\
    \ 10));\n        }\n        else {\n            s.push('0');\n        }\n    }\n\
    \    s.append(&format!(\"{}\", digit));\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `append` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpdyq2ditj.rs:20:7\n   |\n20 |     s.append(&format!(\"\
    {}\", digit));\n   |       ^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::new();\n    if shift > x.len() {\n\
    \        shift %= x.len();\n    }\n    for &i in x.to_digits().iter().rev() {\n\
    \        if shift > 0 {\n            result += \"1\".to_string();\n          \
    \  shift -= 1;\n        } else {\n            result += \"0\".to_string();\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpfq3bomiz.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpfq3bomiz.rs:11:20\n\
    \   |\n11 |         shift %= x.len();\n   |                    ^^^ method not\
    \ found in `isize`\n\nerror[E0599]: no method named `to_digits` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpfq3bomiz.rs:13:17\n   |\n13 |  \
    \   for &i in x.to_digits().iter().rev() {\n   |                 ^^^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfq3bomiz.rs:15:23\n\
    \   |\n15 |             result += \"1\".to_string();\n   |                   \
    \    ^^^^^^^^^^^^^^^\n   |                       |\n   |                     \
    \  expected `&str`, found struct `String`\n   |                       help: consider\
    \ borrowing here: `&\"1\".to_string()`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpfq3bomiz.rs:18:23\n   |\n18 |             result += \"0\".to_string();\n\
    \   |                       ^^^^^^^^^^^^^^^\n   |                       |\n  \
    \ |                       expected `&str`, found struct `String`\n   |       \
    \                help: consider borrowing here: `&\"0\".to_string()`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    assert!(shift > 0, \"shift must be positive\");\n    String::from_utf8(x.to_string().chars().enumerate().take(shift).rev().map(|(i,\
    \ _)| {\n        x.to_string().chars().nth(i).unwrap().to_string()\n    }))\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1vfwnfdx.rs:10:62\n   |\n\
    10 |     String::from_utf8(x.to_string().chars().enumerate().take(shift).rev().map(|(i,\
    \ _)| {\n   |                                                              ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n10 |     String::from_utf8(x.to_string().chars().enumerate().take(shift.try_into().unwrap()).rev().map(|(i,\
    \ _)| {\n   |                                                                \
    \   ++++++++++++++++++++\n\nerror[E0277]: the trait bound `Chars<'_>: ExactSizeIterator`\
    \ is not satisfied\n    --> /tmp/tmp1vfwnfdx.rs:10:69\n     |\n10   |     String::from_utf8(x.to_string().chars().enumerate().take(shift).rev().map(|(i,\
    \ _)| {\n     |                                                              \
    \       ^^^ the trait `ExactSizeIterator` is not implemented for `Chars<'_>`\n\
    \     |\n     = help: the following other types implement trait `ExactSizeIterator`:\n\
    \               &mut I\n               Args\n               ArgsOs\n         \
    \      ArrayChunks<'_, T, N>\n               ArrayChunksMut<'_, T, N>\n      \
    \         ArrayWindows<'_, T, N>\n               Box<I, A>\n               Chunks<'_,\
    \ T>\n             and 109 others\n     = note: required because of the requirements\
    \ on the impl of `DoubleEndedIterator` for `Enumerate<Chars<'_>>`\n     = note:\
    \ 1 redundant requirement hidden\n     = note: required because of the requirements\
    \ on the impl of `DoubleEndedIterator` for `std::iter::Take<Enumerate<Chars<'_>>>`\n\
    note: required by a bound in `rev`\n\nerror[E0599]: the method `map` exists for\
    \ struct `Rev<std::iter::Take<Enumerate<Chars<'_>>>>`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmp1vfwnfdx.rs:10:75\n   |\n10 |        String::from_utf8(x.to_string().chars().enumerate().take(shift).rev().map(|(i,\
    \ _)| {\n   |                                                                \
    \              ^^^ method cannot be called on `Rev<std::iter::Take<Enumerate<Chars<'_>>>>`\
    \ due to unsatisfied "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::with_capacity(x.checked_mul(shift).unwrap_or(1));\n\
    \    let mut carry = 0;\n    for (i, digit) in x.checked_div(shift).unwrap().iter().enumerate()\
    \ {\n        if *digit > 0 {\n            carry += 1;\n        }\n        result\
    \ += if shift > 0 { digit.to_string() } else { digit.to_string() + '0' };\n  \
    \  }\n    if carry > 0 {\n        result += '1';\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb1j77dk3.rs:9:44\n  |\n9 |\
    \     let mut result = String::with_capacity(x.checked_mul(shift).unwrap_or(1));\n\
    \  |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     let mut result\
    \ = String::with_capacity(x.checked_mul(shift).unwrap_or(1).try_into().unwrap());\n\
    \  |                                                                         \
    \    ++++++++++++++++++++\n\nerror[E0599]: no method named `iter` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpb1j77dk3.rs:11:53\n   |\n11 |  \
    \   for (i, digit) in x.checked_div(shift).unwrap().iter().enumerate() {\n   |\
    \                                                     ^^^^ method not found in\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb1j77dk3.rs:18:19\n\
    \   |\n18 |         result += '1';\n   |                   ^^^ expected `&str`,\
    \ found `char`\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n18 |         result += \"1\";\n   |                   ~~~\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    // The first part of the code reverses the string if the number\
    \ is\n    // greater than the length of the string.\n    if x.abs() > x.len()\
    \ {\n        if shift < 0 {\n            x = x.reverse();\n            shift =\
    \ 0;\n        } else {\n            x = [x.reverse()];\n            shift = -shift;\n\
    \        }\n    }\n\n    let mut s = String::new();\n    let mut i = 1;\n    while\
    \ i >= shift {\n        if i % 2 != 0 {\n            s.push_str(&x[i / 2]);\n\
    \        } else {\n            s.push(x[i / 2]);\n        }\n        i /= 2;\n\
    \    }\n\n    s.push(x[i - shift]);\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpmhjim59h.rs:11:20\n   |\n11 |     if x.abs() > x.len()\
    \ {\n   |                    ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpmhjim59h.rs:13:19\n   |\n13 |             x = x.reverse();\n   |   \
    \                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reverse_bits`\n\nerror[E0599]: no method named `reverse` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpmhjim59h.rs:16:20\n   |\n16 |  \
    \           x = [x.reverse()];\n   |                    ^^^^^^^ help: there is\
    \ an associated function with a similar name: `reverse_bits`\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmpmhjim59h.rs:25:25\n\
    \   |\n25 |             s.push_str(&x[i / 2]);\n   |                         ^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpmhjim59h.rs:27:20\n\
    \   |\n27 |             s.push(x[i / 2]);\n   |                    ^^^^^^^^\n\n\
    error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpmhjim59h.rs:32:12\n\
    \   |\n32 |     s.push(x[i - shift]);\n   |            ^^^^^^^^^^^^\n\nerror:\
    \ aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut result = String::with_capacity(x.to_string().len());\n\
    \    for &digit in x.to_string().chars() {\n        let digit = digit % 10;\n\
    \        let shift = digit as isize + shift;\n        digit /= 10;\n        if\
    \ shift >= 0 {\n            digit += 10 * ipow(-shift, &digit);\n        }\n \
    \       result += digit.to_string();\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `ipow` in this scope\n  --> /tmp/tmpaymn7pix.rs:15:27\n\
    \   |\n15 |             digit += 10 * ipow(-shift, &digit);\n   |            \
    \               ^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpaymn7pix.rs:10:9\n   |\n10 |     for &digit in x.to_string().chars()\
    \ {\n   |         ^^^^^^    --------------------- this expression has type `Option<char>`\n\
    \   |         |\n   |         expected `char`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `digit`\n   |\n   = note:   expected\
    \ type `char`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut res = String::new();\n    res.push_str(&x[shift..]);\n\
    \    res.push_str(&x[..shift]);\n    res\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpogoqjrol.rs:10:19\n\
    \   |\n10 |     res.push_str(&x[shift..]);\n   |                   ^^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpogoqjrol.rs:11:19\n\
    \   |\n11 |     res.push_str(&x[..shift]);\n   |                   ^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0608`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut r = String::new();\n    let mut remainder = x;\n  \
    \  let mut carry = 0;\n\n    while carry > 0 {\n        let digit = remainder\
    \ % 10;\n        remainder = remainder / 10;\n        r.push((digit + shift) %\
    \ 10);\n        carry += 1;\n    }\n\n    r.reverse().to_string()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8njg5rt3.rs:16:16\n   |\n\
    16 |         r.push((digit + shift) % 10);\n   |                ^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0599]: no method named `reverse` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmp8njg5rt3.rs:20:7\n \
    \  |\n20 |     r.reverse().to_string()\n   |       ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    // TODO: Optimize this with bit manipulation\n    let mut s\
    \ = String::new();\n    while x.is_positive() {\n        if shift > 0 {\n    \
    \        s.push_str(&format!(\"{}{}\", x % 10, x % 10));\n        }\n        x\
    \ /= 10;\n        shift -= 1;\n    }\n    while shift > 0 {\n        if shift\
    \ > 5 {\n            s.push('1' + x % 10);\n            x /= 10;\n           \
    \ shift -= 5;\n        } else {\n            s.push('0' + x % 10);\n         \
    \   x /= 10;\n            shift -= 1;\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `isize` to `char`\n  --> /tmp/tmp8a7nokcw.rs:20:24\n\
    \   |\n20 |             s.push('1' + x % 10);\n   |                    --- ^ ------\
    \ isize\n   |                    |\n   |                    char\n\nerror[E0369]:\
    \ cannot add `isize` to `char`\n  --> /tmp/tmp8a7nokcw.rs:24:24\n   |\n24 |  \
    \           s.push('0' + x % 10);\n   |                    --- ^ ------ isize\n\
    \   |                    |\n   |                    char\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift >= x.len() {\n        x\n    } else {\n        let\
    \ mut s = String::new();\n        s.push_str(&x[..(shift - x.len())]);\n     \
    \   s.push_str(&x[shift - x.len()..]);\n        s\n    }\n}\n\nfn main() {\n \
    \   let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpyi08ijq4.rs:9:19\n  |\n9 |     if shift >= x.len() {\n \
    \ |                   ^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyi08ijq4.rs:10:9\n   |\n8  | fn circular_shift(x: isize,\
    \ shift: isize) -> String {\n   |                                            \
    \  ------ expected `String` because of return type\n9  |     if shift >= x.len()\
    \ {\n10 |         x\n   |         ^- help: try using a conversion method: `.to_string()`\n\
    \   |         |\n   |         expected struct `String`, found `isize`\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpyi08ijq4.rs:13:36\n\
    \   |\n13 |         s.push_str(&x[..(shift - x.len())]);\n   |               \
    \                     ^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmpyi08ijq4.rs:13:21\n   |\n\
    13 |         s.push_str(&x[..(shift - x.len())]);\n   |                     ^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0599]: no method named `len` found for type `isize` in the current scope\n\
    \  --> /tmp/tmpyi08ijq4.rs:14:33\n   |\n14 |         s.push_str(&x[shift - x.len()..]);\n\
    \   |                                 ^^^ method not found in `isize`\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmpyi08ijq4.rs:14:21\n\
    \   |\n14 |         s.push_str(&x[shift - x.len()..]);\n   |                 \
    \    ^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 6 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    use std::cmp::Ordering;\n\n    let mut digits = String::new();\n\
    \    digits.push(format!(\"{}\", x));\n    while digits.len() < shift {\n    \
    \    digits.push(format!(\"{}\", x % 10));\n        x /= 10;\n    }\n    if digits.len()\
    \ < shift {\n        digits.reverse();\n    }\n    digits\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering`\n --> /tmp/tmp8ccbmfm0.rs:9:9\n\
    \  |\n9 |     use std::cmp::Ordering;\n  |         ^^^^^^^^^^^^^^^^^^\n  |\n \
    \ = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8ccbmfm0.rs:12:17\n   |\n12 |     digits.push(format!(\"\
    {}\", x));\n   |                 ^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n   |\n   = note: this error originates in the macro `format` (in Nightly\
    \ builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8ccbmfm0.rs:13:26\n   |\n13 |     while digits.len() <\
    \ shift {\n   |                          ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |     while digits.len() < shift.try_into().unwrap()\
    \ {\n   |                               ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8ccbmfm0.rs:14:21\n   |\n14 |         digits.push(format!(\"\
    {}\", x % 10));\n   |                     ^^^^^^^^^^^^^^^^^^^^^ expected `char`,\
    \ found struct `String`\n   |\n   = note: this error originates in the macro `format`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8ccbmfm0.rs:17:23\n   |\n17 |     if digits.len()\
    \ < shift {\n   |                       ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n17 |     if digits.len() < shift.try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp8ccbmfm0.rs:18:16\n   |\n18 |         digits.reverse();\n   |      \
    \          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut xs = x;\n    let mut s = \"\";\n    loop {\n      \
    \  if xs <= 0 {\n            break;\n        }\n        s += char::from_u32(xs\
    \ % 10);\n        xs /= 10;\n    }\n    s[0..shift].to_string()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp91x1wsyb.rs:15:29\n   |\n\
    15 |         s += char::from_u32(xs % 10);\n   |                             ^^^^^^^\
    \ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32`\
    \ and panic if the converted value doesn't fit\n   |\n15 |         s += char::from_u32((xs\
    \ % 10).try_into().unwrap());\n   |                             +       +++++++++++++++++++++\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n\
    \  --> /tmp/tmp91x1wsyb.rs:15:9\n   |\n15 |         s += char::from_u32(xs % 10);\n\
    \   |         -^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |         |\n   |         cannot\
    \ use `+=` on type `&str`\n\nerror[E0277]: the type `str` cannot be indexed by\
    \ `std::ops::Range<isize>`\n  --> /tmp/tmp91x1wsyb.rs:18:5\n   |\n18 |     s[0..shift].to_string()\n\
    \   |     ^^^^^^^^^^^ string indices are ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<str>` is not implemented for `std::ops::Range<isize>`\n  \
    \ = help: the following other types implement trait `SliceIndex<T>`:\n       \
    \      <std::ops::Range<usize> as SliceIndex<[T]>>\n             <std::ops::Range<usize>\
    \ as SliceIndex<str>>\n   = note: required because of the requirements on the\
    \ impl of `Index<std::ops::Range<isize>>` for `str`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift < 0 {\n        x << shift;\n        x.reverse();\n\
    \    } else {\n        x >>= shift;\n    }\n    x.to_string()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `reverse` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpbiczx18p.rs:11:11\n   |\n11 |         x.reverse();\n  \
    \ |           ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reverse_bits`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift > x.len() {\n        // reverse the digits of the\
    \ original number\n        let mut digits = x.to_string();\n        for digit\
    \ in digits.chars().nth(shift..).rev() {\n            *digit = *digit.wrapping_add(digit\
    \ as u8);\n        }\n        return digits.to_string();\n    }\n\n    if shift\
    \ < x.len() {\n        // shift digits forward\n        let mut digits = x.to_string();\n\
    \        for digit in digits.chars().nth(shift..).rev() {\n            *digit\
    \ = *digit.wrapping_add(digit as u8);\n        }\n        let mut res = digits.to_string();\n\
    \        for i in 0..shift {\n            res = res.insert(0, x);\n        }\n\
    \        return res;\n    }\n\n    x.to_string()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp8xkm8d7_.rs:9:18\n  |\n9 |     if shift > x.len() {\n  |\
    \                  ^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8xkm8d7_.rs:12:41\n   |\n12 |         for digit in digits.chars().nth(shift..).rev()\
    \ {\n   |                                         ^^^^^^^ expected `usize`, found\
    \ struct `RangeFrom`\n   |\n   = note: expected type `usize`\n            found\
    \ struct `RangeFrom<isize>`\n\nerror[E0599]: `Option<char>` is not an iterator\n\
    \   --> /tmp/tmp8xkm8d7_.rs:12:50\n    |\n12  |           for digit in digits.chars().nth(shift..).rev()\
    \ {\n    |                                                    ^^^ `Option<char>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<char>: Iterator`\n            which is required by `&mut\
    \ Option<char>: Iterator`\n\nerror[E0599]: no method named `len` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmp8xkm8d7_.rs:18:18\n   |\n18 |  \
    \   if shift < x.len() {\n   |                  ^^^ method not found in `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8xkm8d7_.rs:21:41\n   |\n21 |\
    \         for digit in digits.chars().nth(shift..).rev() {\n   |             \
    \                            ^^^^^^^ expected `usize`, found struct `RangeFrom`\n\
    \   |\n   = note: expected type `usize`\n            found struct `RangeFrom<isize>`\n\
    \nerror[E0599]: `Option<char>` is not an iterator\n   --> /tmp/tmp8xkm8d7_.rs:21:50\n\
    \    |\n21  |           for digit in digits.chars().nth(shift..).rev() {\n   \
    \ |                                                    ^^^ `Option<char>` is not\
    \ an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<char>: Iterator`\n            which is required by `&mut\
    \ Option<char>: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8xkm8d7_.rs:26:33\n\
    \   |\n26 |             res = res.insert(0, x);\n   |                        \
    \         ^ expected `char`, found `isize`\n\nerror[E0308]: mismatched "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    use std::mem;\n    let s = mem::transmute::<isize, String>(x);\n\
    \    (s.to_string() * (&[1isize; shift / 10] as *const isize)).to_string() + s[shift\
    \ % 10]\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpg31jl2li.rs:11:33\n   |\n8  | fn circular_shift(x: isize, shift: isize)\
    \ -> String {\n   |                             ----- this would need to be a\
    \ `const`\n...\n11 |     (s.to_string() * (&[1isize; shift / 10] as *const isize)).to_string()\
    \ + s[shift % 10]\n   |                                 ^^^^^\n\nerror[E0369]:\
    \ cannot multiply `String` by `*const isize`\n  --> /tmp/tmpg31jl2li.rs:11:20\n\
    \   |\n11 |     (s.to_string() * (&[1isize; shift / 10] as *const isize)).to_string()\
    \ + s[shift % 10]\n   |      ------------- ^ ---------------------------------------\
    \ *const isize\n   |      |\n   |      String\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpg31jl2li.rs:11:77\n   |\n11 |  \
    \   (s.to_string() * (&[1isize; shift / 10] as *const isize)).to_string() + s[shift\
    \ % 10]\n   |                                                                \
    \             ^^^^^^^^^^^^^ `String` cannot be indexed by `isize`\n   |\n   =\
    \ help: the trait `Index<isize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0369, E0435.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    match (x, shift) {\n        (0, _) => \"0\",\n        (d, 0)\
    \ => to_str(d).to_owned(),\n        (d, _) => to_str((x << shift) + ((x >> shift)\
    \ & 0xff)).to_owned(),\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `to_str` in this scope\n  --> /tmp/tmp9kwpz9ul.rs:11:19\n\
    \   |\n11 |         (d, 0) => to_str(d).to_owned(),\n   |                   ^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `to_str` in this\
    \ scope\n  --> /tmp/tmp9kwpz9ul.rs:12:19\n   |\n12 |         (d, _) => to_str((x\
    \ << shift) + ((x >> shift) & 0xff)).to_owned(),\n   |                   ^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9kwpz9ul.rs:10:19\n\
    \   |\n8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \                                        ------ expected `String` because of return\
    \ type\n9  |     match (x, shift) {\n10 |         (0, _) => \"0\",\n   |     \
    \              ^^^- help: try using a conversion method: `.to_string()`\n   |\
    \                   |\n   |                   expected struct `String`, found\
    \ `&str`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    match shift {\n        0 => \"0\",\n        1 => \"1\",\n \
    \       _ => x.to_string().chars().enumerate().map(|(i, c)| if i % 2 == 0 && i\
    \ >= shift {\n            c\n        } else {\n            '0' + c.to_string()\n\
    \        }).collect()\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk3tllek6.rs:10:14\n   |\n\
    8  | fn circular_shift(x: isize, shift: isize) -> String {\n   |             \
    \                                 ------ expected `String` because of return type\n\
    9  |     match shift {\n10 |         0 => \"0\",\n   |              ^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |              |\n   |   \
    \           expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk3tllek6.rs:12:83\n   |\n12 |         _ => x.to_string().chars().enumerate().map(|(i,\
    \ c)| if i % 2 == 0 && i >= shift {\n   |                                    \
    \                                               ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n12 |         _ => x.to_string().chars().enumerate().map(|(i,\
    \ c)| if i % 2 == 0 && i >= shift.try_into().unwrap() {\n   |                \
    \                                                                        ++++++++++++++++++++\n\
    \nerror[E0369]: cannot add `String` to `char`\n  --> /tmp/tmpk3tllek6.rs:15:17\n\
    \   |\n15 |             '0' + c.to_string()\n   |             --- ^ -------------\
    \ String\n   |             |\n   |             char\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut digits = String::new();\n    let mut carry = true;\n\
    \n    let mut i = x as usize;\n    for _ in 0..shift {\n        if i > 10 {\n\
    \            digits += &char::from_u32(i / 10).unwrap().to_string();\n       \
    \     i %= 10;\n        } else {\n            digits += &char::from_u32(i).unwrap().to_string();\n\
    \        }\n        carry = !carry;\n    }\n    if carry {\n        digits +=\
    \ &char::from_u32(i as u32).unwrap().to_string();\n    }\n\n    digits\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp27gl10c0.rs:15:39\n   |\n\
    15 |             digits += &char::from_u32(i / 10).unwrap().to_string();\n   |\
    \                                       ^^^^^^ expected `u32`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to a `u32` and panic if the converted value\
    \ doesn't fit\n   |\n15 |             digits += &char::from_u32((i / 10).try_into().unwrap()).unwrap().to_string();\n\
    \   |                                       +      +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp27gl10c0.rs:18:39\n   |\n18 |             digits\
    \ += &char::from_u32(i).unwrap().to_string();\n   |                          \
    \             ^ expected `u32`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to a `u32` and panic if the converted value doesn't fit\n   |\n18 |        \
    \     digits += &char::from_u32(i.try_into().unwrap()).unwrap().to_string();\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    // Return empty string if x is 0 or negative.\n    if x ==\
    \ 0 || x < 0 {\n        return String::new();\n    }\n\n    // Handle special\
    \ cases.\n    if shift == 0 {\n        return format!(\"{:0>{width}}\", x, width\
    \ = x.digit_width());\n    }\n    if shift < x.digits() - 1 {\n        return\
    \ format!(\"{}1\", circular_shift(x, shift - 1));\n    }\n\n    // Recursively\
    \ divide the number by 2 to obtain shift digits, and then\n    // shift the digits\
    \ and return the string.\n    let mut remain = x;\n    let mut digits = vec![0;\
    \ shift];\n    for d in 0..shift {\n        digits[d] = remain % 10;\n       \
    \ remain /= 10;\n    }\n    format!(\"{}{}\", digits.reverse(), circular_shift(remain,\
    \ shift))\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error: invalid format string: expected `'}'`, found `'{'`\n  --> /tmp/tmpkj3d0q0s.rs:16:29\n\
    \   |\n16 |         return format!(\"{:0>{width}}\", x, width = x.digit_width());\n\
    \   |                         -   ^ expected `}` in format string\n   |      \
    \                   |\n   |                         because of this opening brace\n\
    \   |\n   = note: if you intended to print `{`, you can escape it using `{{`\n\
    \nerror[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpkj3d0q0s.rs:18:18\n   |\n18 |     if shift < x.digits()\
    \ - 1 {\n   |                  ^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkj3d0q0s.rs:25:30\n   |\n25 |     let mut digits\
    \ = vec![0; shift];\n   |                              ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n25 |     let mut digits = vec![0;\
    \ shift.try_into().unwrap()];\n   |                                   ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpkj3d0q0s.rs:27:9\n\
    \   |\n27 |         digits[d] = remain % 10;\n   |         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: `()` doesn't implement\
    \ `std::fmt::Display`\n  --> /tmp/tmpkj3d0q0s.rs:30:21\n   |\n30 |     format!(\"\
    {}{}\", digits.reverse(), circular_shift(remain, shift))\n   |               \
    \      ^^^^^^^^^^^^^^^^ `()` cannot be formatted with the default formatter\n\
    \   |\n   = help: the trait `std::fmt::Display` is not implemented for `()`\n\
    \   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print)\
    \ instead\n   = note: this error originates in the macro `$crate::__export::format_args`\
    \ (in Nightly builds, run with -Z macro-backtrace for "
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    // Reverse the digits before shifting\n    let mut result =\
    \ String::new();\n    loop {\n        result += '0' if x < 10 && x > 0 && x %\
    \ 10 == 0 && result != '0' else to_string(x);\n        if shift > result.len()\
    \ {\n            return result;\n        }\n        x = x / 10;\n        shift\
    \ -= result.len();\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword\
    \ `if`\n  --> /tmp/tmpczpv0oym.rs:12:23\n   |\n12 |         result += '0' if x\
    \ < 10 && x > 0 && x % 10 == 0 && result != '0' else to_string(x);\n   |     \
    \                  ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror:\
    \ aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut res = String::new();\n    while x != 0 {\n        res.insert(0,\
    \ format!(\"{}\", x % 10));\n        x /= 10;\n    }\n    if shift > res.len()\
    \ {\n        res.reverse();\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8j1635bn.rs:11:23\n   |\n\
    11 |         res.insert(0, format!(\"{}\", x % 10));\n   |                   \
    \    ^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n   |\n   =\
    \ note: this error originates in the macro `format` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8j1635bn.rs:14:16\n\
    \   |\n14 |     if shift > res.len() {\n   |                ^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n14 |     if shift > res.len().try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp8j1635bn.rs:15:13\n\
    \   |\n15 |         res.reverse();\n   |             ^^^^^^^ help: there is an\
    \ associated function with a similar name: `reserve`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    if shift < 0 {\n        return x.to_string();\n    }\n\n  \
    \  let digits = x.to_string();\n    let mut result = String::new();\n    let mut\
    \ carry = 0;\n\n    for n in digits.chars() {\n        let d = (n as i32) << shift;\n\
    \        let r = (d + carry).0 % 10;\n        carry = ((d + carry).0 as u32) /\
    \ 10;\n        result = format!(\"{}{}\", result, &r as char);\n    }\n    if\
    \ carry != 0 {\n        result = format!(\"{}{}\", result, &carry as char);\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  stdout: ''
  stderr: "error[E0610]: `i32` is a primitive type and therefore doesn't have fields\n\
    \  --> /tmp/tmphuyamd8k.rs:19:29\n   |\n19 |         let r = (d + carry).0 % 10;\n\
    \   |                             ^\n\nerror[E0610]: `i32` is a primitive type\
    \ and therefore doesn't have fields\n  --> /tmp/tmphuyamd8k.rs:20:30\n   |\n20\
    \ |         carry = ((d + carry).0 as u32) / 10;\n   |                       \
    \       ^\n\nerror[E0606]: casting `&i32` as `char` is invalid\n  --> /tmp/tmphuyamd8k.rs:24:42\n\
    \   |\n24 |         result = format!(\"{}{}\", result, &carry as char);\n   |\
    \                                          ------^^^^^^^^\n   |              \
    \                            |\n   |                                         \
    \ cannot cast `&i32` as `char`\n   |                                         \
    \ help: dereference the expression: `*&carry`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0606, E0610.\nFor more information\
    \ about an error, try `rustc --explain E0606`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>>\
    \ circular_shift(12, 2)\n/// \"12\"\nfn circular_shift(x: isize, shift: isize)\
    \ -> String {\n    let mut x = x.to_string();\n    x.chars().enumerate().for_each(|(i,\
    \ c)| {\n        if i + shift > x.chars().count() {\n            x.push_str(&c.to_digit(10));\n\
    \        } else {\n            let shift = x.chars().count() - i;\n          \
    \  x.push_str(&c[..(i + shift % shift)].to_digit(10));\n        }\n    });\n \
    \   x\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc8a_yem6.rs:11:16\n   |\n\
    11 |         if i + shift > x.chars().count() {\n   |                ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmpc8a_yem6.rs:11:14\n   |\n11 |         if i + shift > x.chars().count()\
    \ {\n   |              ^ no implementation for `usize + isize`\n   |\n   = help:\
    \ the trait `Add<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc8a_yem6.rs:12:24\n   |\n12 |             x.push_str(&c.to_digit(10));\n\
    \   |                        ^^^^^^^^^^^^^^^ expected `str`, found enum `Option`\n\
    \   |\n   = note: expected reference `&str`\n              found reference `&Option<u32>`\n\
    \nerror[E0608]: cannot index into a value of type `char`\n  --> /tmp/tmpc8a_yem6.rs:15:25\n\
    \   |\n15 |             x.push_str(&c[..(i + shift % shift)].to_digit(10));\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0608.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
