name: HumanEval_27_flip_case
language: rust
results:
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut iter = string.chars().collect::<Vec<_>>();\n\
    \    for (i, c) in iter.iter_mut().enumerate() {\n        *c = if i == 0 || c\
    \ < 'a' || c > 'z' {\n            c + 'A' - 'a'\n        } else {\n          \
    \  c + 'a' - 'A'\n        };\n    }\n    String::from_utf8(iter).unwrap()\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl8d5eafy.rs:7:31\n  |\n7 |\
    \         *c = if i == 0 || c < 'a' || c > 'z' {\n  |                        \
    \       ^^^\n  |                               |\n  |                        \
    \       expected `&mut char`, found `char`\n  |                              \
    \ help: consider mutably borrowing here: `&mut 'a'`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpl8d5eafy.rs:7:42\n  |\n7 |         *c = if i == 0 || c <\
    \ 'a' || c > 'z' {\n  |                                          ^^^\n  |    \
    \                                      |\n  |                                \
    \          expected `&mut char`, found `char`\n  |                           \
    \               help: consider mutably borrowing here: `&mut 'z'`\n\nerror[E0369]:\
    \ cannot add `char` to `&mut char`\n --> /tmp/tmpl8d5eafy.rs:8:15\n  |\n8 |  \
    \           c + 'A' - 'a'\n  |             - ^ --- char\n  |             |\n \
    \ |             &mut char\n\nerror[E0369]: cannot add `char` to `&mut char`\n\
    \  --> /tmp/tmpl8d5eafy.rs:10:15\n   |\n10 |             c + 'a' - 'A'\n   | \
    \            - ^ --- char\n   |             |\n   |             &mut char\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpl8d5eafy.rs:13:23\n   |\n13 |  \
    \   String::from_utf8(iter).unwrap()\n   |                       ^^^^ expected\
    \ `u8`, found `char`\n   |\n   = note: expected struct `Vec<u8>`\n           \
    \   found struct `Vec<char>`\n\nerror: aborting due to 5 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut string = string\n        .chars()\n       \
    \ .map(|c| match c {\n            c => match c {\n                'A' | 'a' =>\
    \ c == 'a' ? 'A' : 'a',\n                _ => c,\n            },\n        })\n\
    \        .collect::<String>();\n\n    string.to_lowercase();\n    string.to_uppercase();\n\
    \    string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `'A'`\n\
    \ --> /tmp/tmp3qmr8tmh.rs:9:41\n  |\n9 |                 'A' | 'a' => c == 'a'\
    \ ? 'A' : 'a',\n  |                           --            ^^^ expected one of\
    \ `,`, `.`, `?`, `}`, or an operator\n  |                           |\n  |   \
    \                        while parsing the `match` arm starting here\n\nerror[E0277]:\
    \ a value of type `String` cannot be built from an iterator over elements of type\
    \ `()`\n    --> /tmp/tmp3qmr8tmh.rs:13:10\n     |\n13   |         .collect::<String>();\n\
    \     |          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=()>`\n\
    \     |\n     = help: the trait `FromIterator<()>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut result = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_uppercase() {\n            result.push((c as Char).to_lowercase());\n\
    \        } else {\n            result.push((c as Char).to_uppercase());\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `Char` in this scope\n --> /tmp/tmp44hzg3pq.rs:8:31\n\
    \  |\n8 |             result.push((c as Char).to_lowercase());\n  |          \
    \                     ^^^^ help: a builtin type with a similar name exists (notice\
    \ the capitalization): `char`\n\nerror[E0412]: cannot find type `Char` in this\
    \ scope\n  --> /tmp/tmp44hzg3pq.rs:10:31\n   |\n10 |             result.push((c\
    \ as Char).to_uppercase());\n   |                               ^^^^ help: a builtin\
    \ type with a similar name exists (notice the capitalization): `char`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            c @ b'A' as b'a' => b'a' as b'A',\n            c @ b'a' as b'A'\
    \ => b'a' as b'A',\n            c => c,\n        })\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `...`, `..=`, `..`, `=>`, `if`, or `|`, found keyword\
    \ `as`\n --> /tmp/tmpfb3eor4c.rs:8:22\n  |\n8 |             c @ b'A' as b'a' =>\
    \ b'a' as b'A',\n  |                      ^^ expected one of `...`, `..=`, `..`,\
    \ `=>`, `if`, or `|`\n\nerror[E0277]: a value of type `String` cannot be built\
    \ from an iterator over elements of type `()`\n    --> /tmp/tmpfb3eor4c.rs:12:10\n\
    \     |\n12   |         .collect::<String>()\n     |          ^^^^^^^ value of\
    \ type `String` cannot be built from `std::iter::Iterator<Item=()>`\n     |\n\
    \     = help: the trait `FromIterator<()>` is not implemented for `String`\n \
    \    = help: the following other types implement trait `FromIterator<A>`:\n  \
    \             <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'A' .. 'Z'\
    \ => c + 'a' - 'A',\n        'a' .. 'z' => c + 'A' - 'a',\n        _ => c,\n \
    \   }).collect::<String>()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpyiwparui.rs:6:9\n\
    \  |\n6 |         'A' .. 'Z' => c + 'a' - 'A',\n  |         ^^^^^^^^^^\n  |\n\
    \  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for\
    \ more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmpyiwparui.rs:7:9\n  |\n7 |         'a' .. 'z' => c + 'A' - 'a',\n\
    \  |         ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0369]: cannot add `char` to `char`\n --> /tmp/tmpyiwparui.rs:6:25\n\
    \  |\n6 |         'A' .. 'Z' => c + 'a' - 'A',\n  |                       - ^\
    \ --- char\n  |                       |\n  |                       char\n\nerror[E0369]:\
    \ cannot add `char` to `char`\n --> /tmp/tmpyiwparui.rs:7:25\n  |\n7 |       \
    \  'a' .. 'z' => c + 'A' - 'a',\n  |                       - ^ --- char\n  | \
    \                      |\n  |                       char\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0369, E0658.\n\
    For more information about an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a' => c\
    \ == 'A' ? 'B' : 'a',\n        'B' => c == 'a' ? 'A' : 'B',\n        _ => c,\n\
    \    })\n    .collect::<String>()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `'B'`\n\
    \ --> /tmp/tmpue8pucom.rs:6:27\n  |\n6 |         'a' => c == 'A' ? 'B' : 'a',\n\
    \  |             --            ^^^ expected one of `,`, `.`, `?`, `}`, or an operator\n\
    \  |             |\n  |             while parsing the `match` arm starting here\n\
    \nerror[E0277]: a value of type `String` cannot be built from an iterator over\
    \ elements of type `()`\n    --> /tmp/tmpue8pucom.rs:10:6\n     |\n10   |    \
    \ .collect::<String>()\n     |      ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item=()>`\n     |\n     = help: the trait `FromIterator<()>`\
    \ is not implemented for `String`\n     = help: the following other types implement\
    \ trait `FromIterator<A>`:\n               <String as FromIterator<&'a char>>\n\
    \               <String as FromIterator<&'a str>>\n               <String as FromIterator<Box<str>>>\n\
    \               <String as FromIterator<Cow<'a, str>>>\n               <String\
    \ as FromIterator<String>>\n               <String as FromIterator<char>>\nnote:\
    \ required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      c if c.is_lowercase() => c.to_uppercase(),\n            c if c.is_uppercase()\
    \ => c.to_lowercase(),\n            _ => c,\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp4qb925_a.rs:8:38\n\
    \   |\n6  |           .map(|c| match c {\n   |  __________________-\n7  | |  \
    \           c if c.is_lowercase() => c.to_uppercase(),\n   | |               \
    \                       ---------------- this is found to be of type `ToUppercase`\n\
    8  | |             c if c.is_uppercase() => c.to_lowercase(),\n   | |        \
    \                              ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n9  | |             _ => c,\n10 | |         })\n\
    \   | |_________- `match` arms have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a' ..= 'A'\n\
    \        'b' ..= 'B'\n        'c' ..= 'C'\n        'd' ..= 'D'\n        'e' ..=\
    \ 'E'\n        'f' ..= 'F'\n        'g' ..= 'G'\n        'h' ..= 'H'\n       \
    \ 'i' ..= 'I'\n        'j' ..= 'J'\n        'k' ..= 'K'\n        'l' ..= 'L'\n\
    \        'm' ..= 'M'\n        'n' ..= 'N'\n        'o' ..= 'O'\n        'p' ..=\
    \ 'P'\n        'q' ..= 'Q'\n        'r' ..= 'R'\n        's' ..= 'S'\n       \
    \ 't' ..= 'T'\n        'u' ..= 'U'\n        'v' ..= 'V'\n        'w' ..= 'W'\n\
    \        'x' ..= 'X'\n        'y' ..= 'Y'\n        'z' ..= 'Z'\n        _ => c.to_string(),\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `=>`, `if`, or `|`, found `'b'`\n --> /tmp/tmpspdxcf51.rs:7:9\n\
    \  |\n6 |         'a' ..= 'A'\n  |                    - expected one of `=>`,\
    \ `if`, or `|`\n7 |         'b' ..= 'B'\n  |         ^^^ unexpected token\n\n\
    error[E0277]: a value of type `String` cannot be built from an iterator over elements\
    \ of type `()`\n    --> /tmp/tmpspdxcf51.rs:33:8\n     |\n33   |     }).collect()\n\
    \     |        ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=()>`\n\
    \     |\n     = help: the trait `FromIterator<()>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .to_lowercase()\n        .chars()\n\
    \        .map(|c| match c {\n            c if c >= 'A' && c <= 'Z' => c + 'a'\
    \ - 'A' as u8,\n            c if c >= 'a' && c <= 'z' => c + 'A' as u8,\n    \
    \        _ => c,\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `char` to `char`\n --> /tmp/tmpp9w2m582.rs:9:44\n\
    \  |\n9 |             c if c >= 'A' && c <= 'Z' => c + 'a' - 'A' as u8,\n  | \
    \                                         - ^ --- char\n  |                  \
    \                        |\n  |                                          char\n\
    \nerror[E0369]: cannot add `u8` to `char`\n  --> /tmp/tmpp9w2m582.rs:10:44\n \
    \  |\n10 |             c if c >= 'a' && c <= 'z' => c + 'A' as u8,\n   |     \
    \                                     - ^ --------- u8\n   |                 \
    \                         |\n   |                                          char\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      c @ b'A'..=b'Z' => c @ b'a'..=b'z',\n            c @ b'a'..=b'z' => c @\
    \ b'A'..=b'Z',\n            _ => c,\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `@`\n --> /tmp/tmptt5x2o_s.rs:7:34\n  |\n7 |             c @ b'A'..=b'Z'\
    \ => c @ b'a'..=b'z',\n  |                             --   ^ expected one of\
    \ 8 possible tokens\n  |                             |\n  |                  \
    \           while parsing the `match` arm starting here\n\nerror[E0277]: a value\
    \ of type `String` cannot be built from an iterator over elements of type `()`\n\
    \    --> /tmp/tmptt5x2o_s.rs:11:10\n     |\n11   |         .collect()\n     |\
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=()>`\n\
    \     |\n     = help: the trait `FromIterator<()>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| c.to_ascii_lowercase().to_ascii_uppercase())\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpz9igzced.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_uppercase()\
    \ => c.to_lowercase(),\n        c if c.is_lowercase() => c.to_uppercase(),\n \
    \       _ => c,\n    })\n    .collect()\n}\n\nfn main() {\n    let candidate =\
    \ flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmp5kkdc_5a.rs:7:34\n\
    \  |\n5 |       string.chars().map(|c| match c {\n  |  ____________________________-\n\
    6 | |         c if c.is_uppercase() => c.to_lowercase(),\n  | |              \
    \                    ---------------- this is found to be of type `ToLowercase`\n\
    7 | |         c if c.is_lowercase() => c.to_uppercase(),\n  | |              \
    \                    ^^^^^^^^^^^^^^^^ expected struct `ToLowercase`, found struct\
    \ `ToUppercase`\n8 | |         _ => c,\n9 | |     })\n  | |_____- `match` arms\
    \ have incompatible types\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().filter(|c| *c >= 'A' && *c <= 'Z').map(|c|\
    \ *c + 32).collect()\n        .to_string() + string.chars().filter(|c| *c >= 'a'\
    \ && *c <= 'z').map(|c| *c - 32).collect()\n        .to_string()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmphzamd77j.rs:5:63\n\
    \  |\n5 |     string.chars().filter(|c| *c >= 'A' && *c <= 'Z').map(|c| *c + 32).collect()\n\
    \  |                                                               ^^\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n --> /tmp/tmphzamd77j.rs:6:82\n  |\n6 |\
    \         .to_string() + string.chars().filter(|c| *c >= 'a' && *c <= 'z').map(|c|\
    \ *c - 32).collect()\n  |                                                    \
    \                              ^^\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // Return original string if all characters are lowercase.\n\
    \    if string.chars().all(|c| *c >= 'a' && *c <= 'z') {\n        return string;\n\
    \    }\n\n    // Create a buffer to store our result.\n    let mut buffer = vec![];\n\
    \n    // Iterate over each character in the string.\n    for (i, c) in string.chars().enumerate()\
    \ {\n        // Ignore non-alpha characters.\n        if *c < 'a' || *c > 'z'\
    \ {\n            continue;\n        }\n\n        // Flip character in string and\
    \ store in buffer.\n        *c = match &string[i] {\n            'a' ..= 'z' =>\
    \ c + 'A' - 'a'.to_ascii_lowercase(),\n            'A' ..= 'Z' => c + 'a' - 'A'.to_ascii_uppercase(),\n\
    \            _ => c,\n        };\n\n        // Add character to our buffer.\n\
    \        buffer.push(&string[i]);\n    }\n\n    // Return our result string.\n\
    \    String::from_utf8(buffer.into_iter().collect())\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmpg6ni1grq.rs:6:31\n\
    \  |\n6 |     if string.chars().all(|c| *c >= 'a' && *c <= 'z') {\n  |       \
    \                        ^^\n\nerror[E0614]: type `char` cannot be dereferenced\n\
    \ --> /tmp/tmpg6ni1grq.rs:6:44\n  |\n6 |     if string.chars().all(|c| *c >= 'a'\
    \ && *c <= 'z') {\n  |                                            ^^\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n  --> /tmp/tmpg6ni1grq.rs:16:12\n   |\n\
    16 |         if *c < 'a' || *c > 'z' {\n   |            ^^\n\nerror[E0614]: type\
    \ `char` cannot be dereferenced\n  --> /tmp/tmpg6ni1grq.rs:16:24\n   |\n16 | \
    \        if *c < 'a' || *c > 'z' {\n   |                        ^^\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n  --> /tmp/tmpg6ni1grq.rs:21:9\n   |\n21\
    \ |         *c = match &string[i] {\n   |         ^^\n   |\nhelp: parentheses\
    \ are required to parse this as an expression\n   |\n16 ~         (if *c < 'a'\
    \ || *c > 'z' {\n17 |             continue;\n18 ~         })\n   |\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpg6ni1grq.rs:21:21\n\
    \   |\n21 |         *c = match &string[i] {\n   |                     ^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0369]: cannot add `char` to `char`\n  --> /tmp/tmpg6ni1grq.rs:22:30\n\
    \   |\n22 |             'a' ..= 'z' => c + 'A' - 'a'.to_ascii_lowercase(),\n \
    \  |                            - ^ --- char\n   |                           \
    \ |\n   |                            char\n\nerror[E0369]: cannot add `char` to\
    \ `char`\n  --> /tmp/tmpg6ni1grq.rs:23:30\n   |\n23 |             'A' ..= 'Z'\
    \ => c + 'a' - 'A'."
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      c if c.is_lowercase() => c.to_uppercase(),\n            _ => c.to_lowercase(),\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmpwu4xj65s.rs:8:18\n\
    \  |\n6 |           .map(|c| match c {\n  |  __________________-\n7 | |      \
    \       c if c.is_lowercase() => c.to_uppercase(),\n  | |                    \
    \                  ---------------- this is found to be of type `ToUppercase`\n\
    8 | |             _ => c.to_lowercase(),\n  | |                  ^^^^^^^^^^^^^^^^\
    \ expected struct `ToUppercase`, found struct `ToLowercase`\n9 | |         })\n\
    \  | |_________- `match` arms have incompatible types\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            'a' .. 'z' => c + '_'.to_string(),\n            'A' .. 'Z' =>\
    \ c + '_'.to_string(),\n            _ => c,\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpdn268vn5.rs:8:13\n\
    \  |\n8 |             'a' .. 'z' => c + '_'.to_string(),\n  |             ^^^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmpdn268vn5.rs:9:13\n  |\n9 |             'A' .. 'Z' => c + '_'.to_string(),\n\
    \  |             ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0369]: cannot add `String` to `char`\n --> /tmp/tmpdn268vn5.rs:8:29\n\
    \  |\n8 |             'a' .. 'z' => c + '_'.to_string(),\n  |                \
    \           - ^ --------------- String\n  |                           |\n  | \
    \                          char\n\nerror[E0369]: cannot add `String` to `char`\n\
    \ --> /tmp/tmpdn268vn5.rs:9:29\n  |\n9 |             'A' .. 'Z' => c + '_'.to_string(),\n\
    \  |                           - ^ --------------- String\n  |               \
    \            |\n  |                           char\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0369, E0658.\nFor\
    \ more information about an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            'a' .. 'z' => Char::Upper,\n            'A' .. 'Z' => Char::Lower,\n\
    \            _ => c,\n        })\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Char`\n --> /tmp/tmpignffx2j.rs:8:27\n\
    \  |\n8 |             'a' .. 'z' => Char::Upper,\n  |                        \
    \   ^^^^ use of undeclared type `Char`\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared type `Char`\n --> /tmp/tmpignffx2j.rs:9:27\n  |\n9 |         \
    \    'A' .. 'Z' => Char::Lower,\n  |                           ^^^^ use of undeclared\
    \ type `Char`\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmpignffx2j.rs:8:13\n  |\n8 |             'a' .. 'z' => Char::Upper,\n\
    \  |             ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmpignffx2j.rs:9:13\n  |\n9 |             'A' .. 'Z' => Char::Lower,\n\
    \  |             ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0433, E0658.\nFor more information about an error,\
    \ try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut res = string;\n    res.chars()\n        .map(|c|\
    \ if c == 'A' { 'a' } else if c == 'a' { 'A' } else { c })\n        .for_each(|c|\
    \ res = res.replace(c, c));\n    res\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5qdrsj_c.rs:8:44\n  |\n8 |\
    \         .for_each(|c| res = res.replace(c, c));\n  |                       \
    \                     ^ expected `&str`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c.to_ascii_lowercase().to_ascii_uppercase()\
    \ {\n            Some(upper) => upper.to_ascii_lowercase(),\n            None\
    \ => c.to_ascii_uppercase(),\n        })\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprjod_ux1.rs:7:13\n  |\n6 |\
    \         .map(|c| match c.to_ascii_lowercase().to_ascii_uppercase() {\n  |  \
    \                      ------------------------------------------- this expression\
    \ has type `char`\n7 |             Some(upper) => upper.to_ascii_lowercase(),\n\
    \  |             ^^^^^^^^^^^ expected `char`, found enum `Option`\n  |\n  = note:\
    \ expected type `char`\n             found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmprjod_ux1.rs:8:13\n  |\n6 |         .map(|c| match c.to_ascii_lowercase().to_ascii_uppercase()\
    \ {\n  |                        ------------------------------------------- this\
    \ expression has type `char`\n7 |             Some(upper) => upper.to_ascii_lowercase(),\n\
    8 |             None => c.to_ascii_uppercase(),\n  |             ^^^^ expected\
    \ `char`, found enum `Option`\n  |\n  = note: expected type `char`\n         \
    \    found enum `Option<_>`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut string\
    \ = string.to_string();\n    for ch in string.chars() {\n        let c = match\
    \ ch {\n            b'a' => {\n                match ch {\n                  \
    \  b'a' => b'A',\n                    b'b' => b'B',\n                    b'c'\
    \ => b'C',\n                    b'd' => b'D',\n                    b'e' => b'E',\n\
    \                    b'f' => b'F',\n                    b'g' => b'G',\n      \
    \              b'h' => b'H',\n                    b'i' => b'I',\n            \
    \        b'j' => b'J',\n                    b'k' => b'K',\n                  \
    \  b'l' => b'L',\n                    b'm' => b'M',\n                    b'n'\
    \ => b'N',\n                    b'o' => b'O',\n                    b'p' => b'P',\n\
    \                    b'q' => b'Q',\n                    b'r' => b'R',\n      \
    \              b's' => b'S',\n                    b't' => b'T',\n            \
    \        b'u' => b'U',\n                    b'v' => b'V',\n                  \
    \  b'w' => b'W',\n                    b'x' => b'X',\n                    b'y'\
    \ => b'Y',\n                    b'z' => b'Z',\n                }\n           \
    \ }\n            b'A' => {\n                match ch {\n                    b'a'\
    \ => b'a',\n                    b'b' => b'b',\n                    b'c' => b'c',\n\
    \                    b'd' => b'd',\n                    b'e' => b'e',\n      \
    \              b'f' => b'f',\n                    b'g' => b'g',\n            \
    \        b'h' => b'h',\n                    b'i' => b'i',\n                  \
    \  b'j' => b'j',\n                    b'k' => b'k',\n                    b'l'\
    \ => b'l',\n                    b'm' => b'm',\n                    b'n' => b'n',\n\
    \                    b'o' => b'o',\n                    b'p' => b'p',\n      \
    \              b'q' => b'q',\n                    b'r' => b'r',\n            \
    \        b's' => b's',\n                    b't' => b't',\n                  \
    \  b'u' => b'u',\n                    b'v' => b'v',\n                    b'w'\
    \ => b'w',\n                    b'x' => b'x',\n                    b'y' => b'y',\n\
    \                    b'z' => b'z',\n                }\n            }\n       \
    \     b => b,\n        };\n        result.push(c);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpojusceav.rs:9:13\n  |\n8 |\
    \         let c = match ch {\n  |                       -- this expression has\
    \ type `char`\n9 |             b'a' => {\n  |             ^^^^ expected `char`,\
    \ found `u8`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpojusceav.rs:39:13\n\
    \   |\n8  |         let c = match ch {\n   |                       -- this expression\
    \ has type `char`\n...\n39 |             b'A' => {\n   |             ^^^^ expected\
    \ `char`, found `u8`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpojusceav.rs:11:21\n\
    \   |\n10 |                 match ch {\n   |                       -- this expression\
    \ has type `char`\n11 |                     b'a' => b'A',\n   |              \
    \       ^^^^ expected `char`, found `u8`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpojusceav.rs:12:21\n   |\n10 |                 match ch {\n   | \
    \                      -- this expression has type `char`\n11 |              \
    \       b'a' => b'A',\n12 |                     b'b' => b'B',\n   |          \
    \           ^^^^ expected `char`, found `u8`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpojusceav.rs:13:21\n   |\n10 |                 match ch {\n   |\
    \                       -- this expression has type `char`\n...\n13 |        \
    \             b'c' => b'C',\n   |                     ^^^^ expected `char`, found\
    \ `u8`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpojusceav.rs:14:21\n  \
    \ |\n10 |                 match ch {\n   |                       -- this expression\
    \ has type `char`\n...\n14 |                     b'd' => b'D',\n   |         \
    \            ^^^^ expected `char`, found `u8`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpojusceav.rs:15:21\n   |\n10 |                 match ch {\n   |\
    \                       -- this expression has type `char`\n...\n15 |        \
    \             b'e' => b'E',\n   |                     ^^^^ expected `char`, found\
    \ `u8`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpojusceav.rs:16:21\n  \
    \ |\n10 |                 match ch {\n   |                       -- this expression\
    \ has type `char`\n...\n16 |                     b'f' => b'F',\n   |         \
    \  "
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      'a' => (c as u32).to_ascii_lowercase().to_ascii_uppercase(),\n        \
    \    'A' => (c as u32).to_ascii_uppercase().to_ascii_lowercase(),\n          \
    \  _ => c,\n        })\n        .collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_ascii_lowercase` found for type `u32`\
    \ in the current scope\n --> /tmp/tmpwv1m0do6.rs:7:31\n  |\n7 |             'a'\
    \ => (c as u32).to_ascii_lowercase().to_ascii_uppercase(),\n  |              \
    \                 ^^^^^^^^^^^^^^^^^^ method not found in `u32`\n\nerror[E0599]:\
    \ no method named `to_ascii_uppercase` found for type `u32` in the current scope\n\
    \ --> /tmp/tmpwv1m0do6.rs:8:31\n  |\n8 |             'A' => (c as u32).to_ascii_uppercase().to_ascii_lowercase(),\n\
    \  |                               ^^^^^^^^^^^^^^^^^^ method not found in `u32`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.to_lowercase()\n        .rev()\n        .to_uppercase()\n\
    \        .rev()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp8q6dxnxn.rs:6:10\n\
    \    |\n6   |           .rev()\n    |            ^^^ `String` is not an iterator;\
    \ try calling `.chars()` or `.bytes()`\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut out = String::with_capacity(string.len());\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            out.push_uppercase();\n\
    \        } else {\n            out.push_lowercase();\n        }\n    }\n    out\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_uppercase` found for struct `String`\
    \ in the current scope\n --> /tmp/tmpu9oehi7m.rs:8:17\n  |\n8 |             out.push_uppercase();\n\
    \  |                 ^^^^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `to_uppercase`\n\nerror[E0599]: no method named `push_lowercase`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpu9oehi7m.rs:10:17\n\
    \   |\n10 |             out.push_lowercase();\n   |                 ^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `to_lowercase`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .chain(string.chars().map(|c|\
    \ if c >= 'A' && c <= 'Z' { 'A' } else { c }))\n        .chain(string.chars().map(|c|\
    \ if c >= 'a' && c <= 'z' { 'a' } else { c }))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Hello!Aello!Haaaa!\"`,\n right: `\"hELLO!\"`', /tmp/tmp2hh6xqmy.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.to_ascii_lowercase().to_ascii_uppercase().into()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmp5h6j2fp3.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().enumerate().map(|(_, c)| (*c as char).to_ascii_lowercase()).collect::<String>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmp13jz47au.rs:5:46\n\
    \  |\n5 |     string.chars().enumerate().map(|(_, c)| (*c as char).to_ascii_lowercase()).collect::<String>().join(\"\
    \")\n  |                                              ^^\n\nerror[E0599]: no method\
    \ named `join` found for struct `String` in the current scope\n --> /tmp/tmp13jz47au.rs:5:100\n\
    \  |\n5 |     string.chars().enumerate().map(|(_, c)| (*c as char).to_ascii_lowercase()).collect::<String>().join(\"\
    \")\n  |                                                                     \
    \                               ^^^^ method not found in `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0614.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    match string.chars() {\n        \"\" => string,\n \
    \       _ => string.to_uppercase().to_lowercase()\n    }\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9eg0_16u.rs:6:9\n  |\n5 |\
    \     match string.chars() {\n  |           -------------- this expression has\
    \ type `Chars<'_>`\n6 |         \"\" => string,\n  |         ^^ expected struct\
    \ `Chars`, found `&str`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        let (lower, upper)\
    \ = match c {\n            ' ' => ('A' as usize, 'Z' as usize),\n            'a'\
    \ => ('a', 'z'),\n            'A' => ('A', 'Z'),\n            _ => (c, c),\n \
    \       };\n        upper + lower\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpp9m4pan_.rs:8:20\n\
    \   |\n6  |           let (lower, upper) = match c {\n   |  ______________________________-\n\
    7  | |             ' ' => ('A' as usize, 'Z' as usize),\n   | |              \
    \      ---------------------------- this is found to be of type `(usize, usize)`\n\
    8  | |             'a' => ('a', 'z'),\n   | |                    ^^^^^^^^^^ expected\
    \ `usize`, found `char`\n9  | |             'A' => ('A', 'Z'),\n10 | |       \
    \      _ => (c, c),\n11 | |         };\n   | |_________- `match` arms have incompatible\
    \ types\n   |\n   = note: expected tuple `(usize, usize)`\n              found\
    \ tuple `(char, char)`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut chars = string.to_lowercase();\n    for ch\
    \ in chars.chars().rev() {\n        chars.insert(ch, chars.chars().find(|c| *c\
    \ != ch).unwrap());\n    }\n    chars\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdza0lmi2.rs:7:22\n  |\n7 |\
    \         chars.insert(ch, chars.chars().find(|c| *c != ch).unwrap());\n  |  \
    \                    ^^ expected `usize`, found `char`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().chain(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() })\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpddxvedhy.rs:5:27\n\
    \  |\n5 |     string.chars().chain(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() })\n  |                           ^ consider giving\
    \ this closure parameter a type\n  |\n  = note: type must be known at this point\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpddxvedhy.rs:5:5\n  |\n4 | fn flip_case(string:\
    \ String) -> String {\n  |                                 ------ expected `String`\
    \ because of return type\n5 |     string.chars().chain(|c| if c.is_lowercase()\
    \ { c.to_uppercase() } else { c.to_lowercase() })\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found struct `std::iter::Chain`\n  |\n  = note: expected\
    \ struct `String`\n             found struct `std::iter::Chain<Chars<'_>, _>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0282, E0308.\nFor more information about an error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut string = string.to_lowercase();\n    let mut\
    \ iter = string.chars();\n    iter.for_each(|c| if c.is_upper() {\n        string\
    \ = string.to_uppercase();\n    }\n    else {\n        string = string.to_lowercase();\n\
    \    });\n    string\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n --> /tmp/tmp52vd36cr.rs:7:28\n  |\n7 |     iter.for_each(|c| if c.is_upper()\
    \ {\n  |                            ^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_uppercase`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      'A'..='Z' => c + 'a' - 'a',\n            'a'..='z' => c + 'A' - 'A',\n\
    \            _ => c,\n        })\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `char` to `char`\n --> /tmp/tmpq8pvrm5d.rs:7:28\n\
    \  |\n7 |             'A'..='Z' => c + 'a' - 'a',\n  |                       \
    \   - ^ --- char\n  |                          |\n  |                        \
    \  char\n\nerror[E0369]: cannot add `char` to `char`\n --> /tmp/tmpq8pvrm5d.rs:8:28\n\
    \  |\n8 |             'a'..='z' => c + 'A' - 'A',\n  |                       \
    \   - ^ --- char\n  |                          |\n  |                        \
    \  char\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().fold(String::new(), |mut acc, c| {\n\
    \        if c.is_lower() {\n            acc.push(c.to_uppercase());\n        }\
    \ else {\n            acc.push(c.to_lowercase());\n        }\n        acc\n  \
    \  })\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_lower` found for type `char` in the current\
    \ scope\n --> /tmp/tmpjfajxr6n.rs:6:14\n  |\n6 |         if c.is_lower() {\n \
    \ |              ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_lowercase`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjfajxr6n.rs:7:22\n\
    \  |\n7 |             acc.push(c.to_uppercase());\n  |                      ^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `ToUppercase`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjfajxr6n.rs:9:22\n  |\n9 |             acc.push(c.to_lowercase());\n\
    \  |                      ^^^^^^^^^^^^^^^^ expected `char`, found struct `ToLowercase`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut string = string.to_owned();\n    let mut buffer\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            buffer.push(c.to_uppercase());\n        } else {\n          \
    \  buffer.push(c.to_lowercase());\n        }\n    }\n    buffer\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_ledhp5n.rs:9:25\n  |\n9 |\
    \             buffer.push(c.to_uppercase());\n  |                         ^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `ToUppercase`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_ledhp5n.rs:11:25\n   |\n11 |             buffer.push(c.to_lowercase());\n\
    \   |                         ^^^^^^^^^^^^^^^^ expected `char`, found struct `ToLowercase`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| if c.is_uppercase()\
    \ { c.to_lowercase() } else { c.to_uppercase() })\n        .collect()\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp9ildxm3y.rs:6:66\n\
    \  |\n6 |         .map(|c| if c.is_uppercase() { c.to_lowercase() } else { c.to_uppercase()\
    \ })\n  |                                        ----------------          ^^^^^^^^^^^^^^^^\
    \ expected struct `ToLowercase`, found struct `ToUppercase`\n  |             \
    \                           |\n  |                                        expected\
    \ because of this\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase().to_string(),\n        c => c.to_lowercase().to_string(),\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'A' .. 'Z'\
    \ | 'a' .. 'z' => c + c.to_ascii_lowercase(),\n        _ => c.to_ascii_uppercase(),\n\
    \    })\n    .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmp8b6uwsn_.rs:6:9\n\
    \  |\n6 |         'A' .. 'Z' | 'a' .. 'z' => c + c.to_ascii_lowercase(),\n  |\
    \         ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmp8b6uwsn_.rs:6:22\n  |\n6 |         'A' .. 'Z' | 'a' .. 'z' => c\
    \ + c.to_ascii_lowercase(),\n  |                      ^^^^^^^^^^\n  |\n  = note:\
    \ see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n\
    \nerror[E0369]: cannot add `char` to `char`\n --> /tmp/tmp8b6uwsn_.rs:6:38\n \
    \ |\n6 |         'A' .. 'Z' | 'a' .. 'z' => c + c.to_ascii_lowercase(),\n  | \
    \                                   - ^ ---------------------- char\n  |     \
    \                               |\n  |                                    char\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0369, E0658.\nFor more information about an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    match string.chars() {\n        chars => {\n      \
    \      let mut char_iter = chars.clone().map(|c| match c {\n                c\
    \ if c.is_ascii_lowercase() => c,\n                c if c.is_ascii_uppercase()\
    \ => c.to_ascii_lowercase(),\n                c => c.to_ascii_uppercase(),\n \
    \           });\n            char_iter = char_iter.chain(char_iter.map(|c| match\
    \ c {\n                c if c.is_ascii_uppercase() => c,\n                c if\
    \ c.is_ascii_lowercase() => c.to_ascii_uppercase(),\n                c => c.to_ascii_lowercase(),\n\
    \            }));\n            char_iter.collect()\n        }\n    }\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp67ohgqbf.rs:12:25\n   |\n\
    7  |                let mut char_iter = chars.clone().map(|c| match c {\n   |\
    \   _________________________________-_________________-\n   |  |_________________________________|\n\
    \   | ||\n8  | ||                 c if c.is_ascii_lowercase() => c,\n9  | || \
    \                c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n10 |\
    \ ||                 c => c.to_ascii_uppercase(),\n11 | ||             });\n \
    \  | ||_____________-- expected due to this value\n   |  |             |\n   |\
    \  |_____________the expected closure\n   |                the found closure\n\
    12 |                char_iter = char_iter.chain(char_iter.map(|c| match c {\n\
    \   |  __________________________^\n13 | |                  c if c.is_ascii_uppercase()\
    \ => c,\n14 | |                  c if c.is_ascii_lowercase() => c.to_ascii_uppercase(),\n\
    15 | |                  c => c.to_ascii_lowercase(),\n16 | |              }));\n\
    \   | |________________^ expected struct `Map`, found struct `std::iter::Chain`\n\
    \   |\n   = note: expected struct `Map<Chars<'_>, _>`\n              found struct\
    \ `std::iter::Chain<Map<Chars<'_>, _>, Map<Map<Chars<'_>, [closure@/tmp/tmp67ohgqbf.rs:7:51:\
    \ 11:14]>, [closure@/tmp/tmp67ohgqbf.rs:12:55: 16:14]>>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            c if c.is_lowercase() => c.to_uppercase(),\n            c if\
    \ c.is_uppercase() => c.to_lowercase(),\n            c => c,\n        })\n   \
    \     .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp127d_w1e.rs:9:38\n\
    \   |\n7  |           .map(|c| match c {\n   |  __________________-\n8  | |  \
    \           c if c.is_lowercase() => c.to_uppercase(),\n   | |               \
    \                       ---------------- this is found to be of type `ToUppercase`\n\
    9  | |             c if c.is_uppercase() => c.to_lowercase(),\n   | |        \
    \                              ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n10 | |             c => c,\n11 | |         })\n\
    \   | |_________- `match` arms have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c @ _ =>\
    \ c.to_upper(),\n        c => c.to_lower(),\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_upper` found for type `char` in the current\
    \ scope\n --> /tmp/tmpm21tswfp.rs:6:20\n  |\n6 |         c @ _ => c.to_upper(),\n\
    \  |                    ^^^^^^^^ help: there is an associated function with a\
    \ similar name: `to_uppercase`\n\nerror[E0599]: no method named `to_lower` found\
    \ for type `char` in the current scope\n --> /tmp/tmpm21tswfp.rs:7:16\n  |\n7\
    \ |         c => c.to_lower(),\n  |                ^^^^^^^^ help: there is an\
    \ associated function with a similar name: `to_lowercase`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c|\n        match c {\n       \
    \     'a' .. 'z' => c.to_ascii_lowercase(),\n            _ => c.to_ascii_uppercase(),\n\
    \        }\n    ).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmp1en60x95.rs:7:13\n\
    \  |\n7 |             'a' .. 'z' => c.to_ascii_lowercase(),\n  |             ^^^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0658`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| if c.is_lowercase()\
    \ || c.is_uppercase() { c } else { c.to_uppercase() })\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp7nv9s_6o.rs:6:71\n\
    \  |\n6 |         .map(|c| if c.is_lowercase() || c.is_uppercase() { c } else\
    \ { c.to_uppercase() })\n  |                                                 \
    \           -          ^^^^^^^^^^^^^^^^ expected `char`, found struct `ToUppercase`\n\
    \  |                                                            |\n  |       \
    \                                                     expected because of this\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    match string.chars().map(|c| {\n        match c {\n\
    \            c if c.is_lowercase() => c.to_uppercase(),\n            c if c.is_uppercase()\
    \ => c.to_lowercase(),\n            _ => c,\n        }\n    }) {\n        Some(ref\
    \ mut result) => result.to_string(),\n        None => string,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpd8k4m83k.rs:8:38\n\
    \   |\n6  | /         match c {\n7  | |             c if c.is_lowercase() => c.to_uppercase(),\n\
    \   | |                                      ---------------- this is found to\
    \ be of type `ToUppercase`\n8  | |             c if c.is_uppercase() => c.to_lowercase(),\n\
    \   | |                                      ^^^^^^^^^^^^^^^^ expected struct\
    \ `ToUppercase`, found struct `ToLowercase`\n9  | |             _ => c,\n10 |\
    \ |         }\n   | |_________- `match` arms have incompatible types\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd8k4m83k.rs:12:9\n   |\n5  |       match string.chars().map(|c|\
    \ {\n   |  ___________-\n6  | |         match c {\n7  | |             c if c.is_lowercase()\
    \ => c.to_uppercase(),\n8  | |             c if c.is_uppercase() => c.to_lowercase(),\n\
    9  | |             _ => c,\n10 | |         }\n11 | |     }) {\n   | |______- this\
    \ expression has type `Map<Chars<'_>, _>`\n12 |           Some(ref mut result)\
    \ => result.to_string(),\n   |           ^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Map`, found enum `Option`\n   |\n   = note: expected struct `Map<Chars<'_>,\
    \ _>`\n                found enum `Option<_>`\nhelp: you might have meant to use\
    \ field `f` whose type is `_`\n   |\n5  ~     match string.chars().map(|c| {\n\
    6  +         match c {\n7  +             c if c.is_lowercase() => c.to_uppercase(),\n\
    8  +             c if c.is_uppercase() => c.to_lowercase(),\n9  +            \
    \ _ => c,\n10 +         }\n ...\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd8k4m83k.rs:13:9\n\
    \   |\n5  |       match string.chars().map(|c| {\n   |  ___________-\n6  | | \
    \        match c {\n7  | |             c if c.is_lowercase() => c.to_uppercase(),\n\
    8  | |             c if c.is_uppercase() => c.to_lowercase(),\n9  | |        \
    \     _ => c,\n10 | |         }\n11 | |     }) {\n   | |______- this expression\
    \ has type `Map<Chars<'_>, _>`\n12 |           Some(ref mut result) => result.to_string(),\n\
    13 |           None => string,\n   |           ^^^^ expected struct `Map`, found\
    \ enum `Option`\n   |\n   = note: expec"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    match string.chars() {\n        Some(c) if c.is_lowercase()\
    \ | c.is_uppercase() => c.to_string().to_uppercase().to_string(),\n        _ =>\
    \ string,\n    }\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjopekrxe.rs:6:9\n  |\n5 |\
    \     match string.chars() {\n  |           -------------- this expression has\
    \ type `Chars<'_>`\n6 |         Some(c) if c.is_lowercase() | c.is_uppercase()\
    \ => c.to_string().to_uppercase().to_string(),\n  |         ^^^^^^^ expected struct\
    \ `Chars`, found enum `Option`\n  |\n  = note: expected struct `Chars<'_>`\n \
    \              found enum `Option<_>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c @ b'a'\
    \ .. b'z' => b'A' ^ b'a' ^ b'z',\n        c @ b'A' .. b'Z' => b'a' ^ b'A' ^ b'Z',\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmp6bfz_pzu.rs:6:13\n\
    \  |\n6 |         c @ b'a' .. b'z' => b'A' ^ b'a' ^ b'z',\n  |             ^^^^^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmp6bfz_pzu.rs:7:13\n  |\n7 |         c @ b'A' .. b'Z' => b'a' ^ b'A'\
    \ ^ b'Z',\n  |             ^^^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: mismatched types\n --> /tmp/tmp6bfz_pzu.rs:6:13\n\
    \  |\n5 |     string.chars().map(|c| match c {\n  |                          \
    \        - this expression has type `char`\n6 |         c @ b'a' .. b'z' => b'A'\
    \ ^ b'a' ^ b'z',\n  |             ^^^^    ---- this is of type `u8`\n  |     \
    \        |\n  |             expected `char`, found `u8`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp6bfz_pzu.rs:6:21\n  |\n5 |     string.chars().map(|c| match\
    \ c {\n  |                                  - this expression has type `char`\n\
    6 |         c @ b'a' .. b'z' => b'A' ^ b'a' ^ b'z',\n  |             ----    ^^^^\
    \ expected `char`, found `u8`\n  |             |\n  |             this is of type\
    \ `u8`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp6bfz_pzu.rs:7:13\n  |\n\
    5 |     string.chars().map(|c| match c {\n  |                                \
    \  - this expression has type `char`\n6 |         c @ b'a' .. b'z' => b'A' ^ b'a'\
    \ ^ b'z',\n7 |         c @ b'A' .. b'Z' => b'a' ^ b'A' ^ b'Z',\n  |          \
    \   ^^^^    ---- this is of type `u8`\n  |             |\n  |             expected\
    \ `char`, found `u8`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp6bfz_pzu.rs:7:21\n\
    \  |\n5 |     string.chars().map(|c| match c {\n  |                          \
    \        - this expression has type `char`\n6 |         c @ b'a' .. b'z' => b'A'\
    \ ^ b'a' ^ b'z',\n7 |         c @ b'A' .. b'Z' => b'a' ^ b'A' ^ b'Z',\n  |   \
    \          ----    ^^^^ expected `char`, found `u8`\n  |             |\n  |  \
    \           this is of type `u8`\n\nerror[E0308]: `match"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c == c.to_lowercase() ||\
    \ c == c.to_uppercase() { c.to_lowercase() } else { c }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe_r4ochc.rs:5:36\n  |\n5 |\
    \     string.chars().map(|c| if c == c.to_lowercase() || c == c.to_uppercase()\
    \ { c.to_lowercase() } else { c }).collect()\n  |                            \
    \        ^^^^^^^^^^^^^^^^ expected `char`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpe_r4ochc.rs:5:61\n  |\n5 |     string.chars().map(|c|\
    \ if c == c.to_lowercase() || c == c.to_uppercase() { c.to_lowercase() } else\
    \ { c }).collect()\n  |                                                      \
    \       ^^^^^^^^^^^^^^^^ expected `char`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ `if` and `else` have incompatible types\n --> /tmp/tmpe_r4ochc.rs:5:106\n  |\n\
    5 |     string.chars().map(|c| if c == c.to_lowercase() || c == c.to_uppercase()\
    \ { c.to_lowercase() } else { c }).collect()\n  |                            \
    \                                                    ----------------        \
    \  ^ expected struct `ToLowercase`, found `char`\n  |                        \
    \                                                        |\n  |              \
    \                                                                  expected because\
    \ of this\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| if c == 'A' { 'B'\
    \ } else if 'a' { 'b' } else { c })\n        .collect()\n}\n\nfn main() {\n  \
    \  let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphsj3bcnp.rs:6:46\n  |\n6 |\
    \         .map(|c| if c == 'A' { 'B' } else if 'a' { 'b' } else { c })\n  |  \
    \                                            ^^^ expected `bool`, found `char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // For each character in string\n    for ch in string.chars()\
    \ {\n        // if character is uppercase\n        if ch.is_uppercase() {\n  \
    \          // change to lowercase\n            ch.to_lowercase()\n        } else\
    \ {\n            // change to uppercase\n            ch.to_uppercase()\n     \
    \   }\n    }\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpak4zobo5.rs:10:13\n   |\n\
    8  | /         if ch.is_uppercase() {\n9  | |             // change to lowercase\n\
    10 | |             ch.to_lowercase()\n   | |             ^^^^^^^^^^^^^^^^^ expected\
    \ `()`, found struct `ToLowercase`\n11 | |         } else {\n12 | |          \
    \   // change to uppercase\n13 | |             ch.to_uppercase()\n14 | |     \
    \    }\n   | |_________- expected this to be `()`\n   |\nhelp: consider using\
    \ a semicolon here\n   |\n10 |             ch.to_lowercase();\n   |          \
    \                    +\nhelp: consider using a semicolon here\n   |\n14 |    \
    \     };\n   |          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpak4zobo5.rs:13:13\n\
    \   |\n8  | /         if ch.is_uppercase() {\n9  | |             // change to\
    \ lowercase\n10 | |             ch.to_lowercase()\n11 | |         } else {\n12\
    \ | |             // change to uppercase\n13 | |             ch.to_uppercase()\n\
    \   | |             ^^^^^^^^^^^^^^^^^ expected `()`, found struct `ToUppercase`\n\
    14 | |         }\n   | |_________- expected this to be `()`\n   |\nhelp: consider\
    \ using a semicolon here\n   |\n13 |             ch.to_uppercase();\n   |    \
    \                          +\nhelp: consider using a semicolon here\n   |\n14\
    \ |         };\n   |          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpak4zobo5.rs:6:5\n\
    \   |\n4  |   fn flip_case(string: String) -> String {\n   |                 \
    \                  ------ expected `String` because of return type\n5  |     \
    \  // For each character in string\n6  | /     for ch in string.chars() {\n7 \
    \ | |         // if character is uppercase\n8  | |         if ch.is_uppercase()\
    \ {\n9  | |             // change to lowercase\n...  |\n14 | |         }\n15 |\
    \ |     }\n   | |_____^ expected struct `String`, found `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() => c.to_uppercase()\
    \ else c.to_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `=>`\n --> /tmp/tmp6_x_oc1n.rs:5:48\n  |\n5\
    \ |     string.chars().map(|c| if c.is_lowercase() => c.to_uppercase() else c.to_lowercase()).collect()\n\
    \  |                            --                  ^^ expected `{`\n  |     \
    \                       |\n  |                            this `if` expression\
    \ has a condition, but no block\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    match string.chars() {\n        None => string,\n \
    \       Some(s) => match s.to_ascii_lowercase() {\n            None => string,\n\
    \            Some(s) => s.to_ascii_uppercase(),\n        },\n    }\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptl37yoth.rs:6:9\n  |\n5 |\
    \     match string.chars() {\n  |           -------------- this expression has\
    \ type `Chars<'_>`\n6 |         None => string,\n  |         ^^^^ expected struct\
    \ `Chars`, found enum `Option`\n  |\n  = note: expected struct `Chars<'_>`\n \
    \              found enum `Option<_>`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmptl37yoth.rs:7:9\n  |\n5 |     match string.chars() {\n  |          \
    \ -------------- this expression has type `Chars<'_>`\n6 |         None => string,\n\
    7 |         Some(s) => match s.to_ascii_lowercase() {\n  |         ^^^^^^^ expected\
    \ struct `Chars`, found enum `Option`\n  |\n  = note: expected struct `Chars<'_>`\n\
    \               found enum `Option<_>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'A'..='Z'\
    \ => c as u8 | 64 as u8,\n        'a'..='z' => c as u8 | 97 as u8,\n        _\
    \ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmp9newc1n_.rs:8:14\n\
    \  |\n5 |       string.chars().map(|c| match c {\n  |  ____________________________-\n\
    6 | |         'A'..='Z' => c as u8 | 64 as u8,\n  | |                      ------------------\
    \ this is found to be of type `u8`\n7 | |         'a'..='z' => c as u8 | 97 as\
    \ u8,\n  | |                      ------------------ this is found to be of type\
    \ `u8`\n8 | |         _ => c,\n  | |              ^ expected `u8`, found `char`\n\
    9 | |     }).collect()\n  | |_____- `match` arms have incompatible types\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // Loop over string char by char\n    for c in string.chars()\
    \ {\n        match c {\n            // Lowercase letter\n            c if c.is_lowercase()\
    \ => c.to_uppercase(),\n            // Uppercase letter\n            c if c.is_uppercase()\
    \ => c.to_lowercase(),\n            _ => c,\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpzy591c56.rs:11:38\n\
    \   |\n7  | /         match c {\n8  | |             // Lowercase letter\n9  |\
    \ |             c if c.is_lowercase() => c.to_uppercase(),\n   | |           \
    \                           ---------------- this is found to be of type `ToUppercase`\n\
    10 | |             // Uppercase letter\n11 | |             c if c.is_uppercase()\
    \ => c.to_lowercase(),\n   | |                                      ^^^^^^^^^^^^^^^^\
    \ expected struct `ToUppercase`, found struct `ToLowercase`\n12 | |          \
    \   _ => c,\n13 | |         }\n   | |_________- `match` arms have incompatible\
    \ types\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzy591c56.rs:6:5\n   |\n\
    4  |   fn flip_case(string: String) -> String {\n   |                        \
    \           ------ expected `String` because of return type\n5  |       // Loop\
    \ over string char by char\n6  | /     for c in string.chars() {\n7  | |     \
    \    match c {\n8  | |             // Lowercase letter\n9  | |             c if\
    \ c.is_lowercase() => c.to_uppercase(),\n...  |\n13 | |         }\n14 | |    \
    \ }\n   | |_____^ expected struct `String`, found `()`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            'a' .. 'z' => c.to_ascii_lowercase(),\n            _ => c.to_ascii_uppercase(),\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpsy6rrndj.rs:8:13\n\
    \  |\n8 |             'a' .. 'z' => c.to_ascii_lowercase(),\n  |             ^^^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0658`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lower() then c.to_uppercase()\
    \ else c.to_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `then`\n --> /tmp/tmpg7uj21hs.rs:5:44\n  |\n\
    5 |     string.chars().map(|c| if c.is_lower() then c.to_uppercase() else c.to_lowercase()).collect()\n\
    \  |                            --              ^^^^ expected `{`\n  |       \
    \                     |\n  |                            this `if` expression has\
    \ a condition, but no block\n  |\nhelp: try placing this code inside a block\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lower() { then } c.to_uppercase()\
    \ else c.to_lowercase()).collect()\n  |                                      \
    \      +      +\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // Find the index of the last non-lowercase character\
    \ in the string.\n    let last_index = string.find_last_not_ascii_lowercase();\n\
    \n    // If there is no non-lowercase character in the string, just return the\n\
    \    // string with no changes.\n    if last_index == string::npos {\n       \
    \ return string;\n    }\n\n    // Create two substrings, one from zero to last_index,\
    \ and one from last_index to\n    // the end of the string.\n    let first_half\
    \ = string.to_string().split_last_mut().take(last_index as usize);\n    let second_half\
    \ = string.to_string().split_last_mut().skip(last_index as usize);\n\n    // Swap\
    \ the cases of the substrings, combining the two substrings into the\n    // returned\
    \ string.\n    first_half.swap(second_half);\n\n    // Concatenate the two substrings\
    \ back together into the return string.\n    first_half.concat(&second_half).to_string()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `string`\n\
    \  --> /tmp/tmpi1rqz8kt.rs:10:22\n   |\n10 |     if last_index == string::npos\
    \ {\n   |                      ^^^^^^ use of undeclared crate or module `string`\n\
    \nerror[E0599]: no method named `find_last_not_ascii_lowercase` found for struct\
    \ `String` in the current scope\n --> /tmp/tmpi1rqz8kt.rs:6:29\n  |\n6 |     let\
    \ last_index = string.find_last_not_ascii_lowercase();\n  |                  \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `to_ascii_lowercase`\n\nerror[E0599]: no method named `split_last_mut`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpi1rqz8kt.rs:16:41\n\
    \   |\n16 |     let first_half = string.to_string().split_last_mut().take(last_index\
    \ as usize);\n   |                                         ^^^^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `split_at`\n\nerror[E0599]:\
    \ no method named `split_last_mut` found for struct `String` in the current scope\n\
    \  --> /tmp/tmpi1rqz8kt.rs:17:42\n   |\n17 |     let second_half = string.to_string().split_last_mut().skip(last_index\
    \ as usize);\n   |                                          ^^^^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `split_at`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.to_lowercase().chars().map(|c| match c {\n \
    \       'a' => \"A\",\n        'b' => \"B\",\n        'c' => \"C\",\n        'd'\
    \ => \"D\",\n        'e' => \"E\",\n        'f' => \"F\",\n        'g' => \"G\"\
    ,\n        'h' => \"H\",\n        'i' => \"I\",\n        'j' => \"J\",\n     \
    \   'k' => \"K\",\n        'l' => \"L\",\n        'm' => \"M\",\n        'n' =>\
    \ \"N\",\n        'o' => \"O\",\n        'p' => \"P\",\n        'q' => \"Q\",\n\
    \        'r' => \"R\",\n        's' => \"S\",\n        't' => \"T\",\n       \
    \ 'u' => \"U\",\n        'v' => \"V\",\n        'w' => \"W\",\n        'x' =>\
    \ \"X\",\n        'y' => \"Y\",\n        'z' => \"Z\",\n        'A' => \"a\",\n\
    \        'B' => \"b\",\n        'C' => \"c\",\n        'D' => \"d\",\n       \
    \ 'E' => \"e\",\n        'F' => \"f\",\n        'G' => \"g\",\n        'H' =>\
    \ \"h\",\n        'I' => \"i\",\n        'J' => \"j\",\n        'K' => \"k\",\n\
    \        'L' => \"l\",\n        'M' => \"m\",\n        'N' => \"n\",\n       \
    \ 'O' => \"o\",\n        'P' => \"p\",\n        'Q' => \"q\",\n        'R' =>\
    \ \"r\",\n        'S' => \"s\",\n        'T' => \"t\",\n        'U' => \"u\",\n\
    \        'V' => \"v\",\n        'W' => \"w\",\n        'X' => \"x\",\n       \
    \ 'Y' => \"y\",\n        'Z' => \"z\",\n        _ => c,\n    }).collect()\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpko4f28fv.rs:58:14\n\
    \   |\n5  |       string.to_lowercase().chars().map(|c| match c {\n   |  ___________________________________________-\n\
    6  | |         'a' => \"A\",\n7  | |         'b' => \"B\",\n8  | |         'c'\
    \ => \"C\",\n...  |\n57 | |         'Z' => \"z\",\n   | |                --- this\
    \ and all prior arms are found to be of type `&str`\n58 | |         _ => c,\n\
    \   | |              ^ expected `&str`, found `char`\n59 | |     }).collect()\n\
    \   | |_____- `match` arms have incompatible types\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if ('A'\
    \ <= c && c <= 'Z') => (c as u8 - ('a' as u8) as u8) as char,\n        c if ('a'\
    \ <= c && c <= 'z') => (c as u8 - ('A' as u8) as u8) as char,\n        _ => c,\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmplnk35ijn.rs:6:40\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().chain(\n        |c| match c {\n    \
    \        c if c.is_lowercase() => c.to_uppercase(),\n            c if c.is_uppercase()\
    \ => c.to_lowercase(),\n            _ => c,\n        },\n    )\n    .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmppugnmsqv.rs:6:10\n\
    \  |\n6 |         |c| match c {\n  |          ^ consider giving this closure parameter\
    \ a type\n  |\n  = note: type must be known at this point\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'A'..='Z'\
    \ => c + &'a'..&'z',\n        'a'..='z' => c + &'A'..&'Z',\n        _ => c,\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `&char` to `char`\n --> /tmp/tmpnlcya0nq.rs:6:24\n\
    \  |\n6 |         'A'..='Z' => c + &'a'..&'z',\n  |                      - ^ ----\
    \ &char\n  |                      |\n  |                      char\n\nerror[E0369]:\
    \ cannot add `&char` to `char`\n --> /tmp/tmpnlcya0nq.rs:7:24\n  |\n7 |      \
    \   'a'..='z' => c + &'A'..&'Z',\n  |                      - ^ ---- &char\n  |\
    \                      |\n  |                      char\n\nerror[E0308]: `match`\
    \ arms have incompatible types\n --> /tmp/tmpnlcya0nq.rs:8:14\n  |\n5 |      \
    \ string.chars().map(|c| match c {\n  |  ____________________________-\n6 | |\
    \         'A'..='Z' => c + &'a'..&'z',\n  | |                      --------------\
    \ this is found to be of type `std::ops::Range<&char>`\n7 | |         'a'..='z'\
    \ => c + &'A'..&'Z',\n  | |                      -------------- this is found\
    \ to be of type `std::ops::Range<&char>`\n8 | |         _ => c,\n  | |       \
    \       ^ expected struct `std::ops::Range`, found `char`\n9 | |     }).collect()\n\
    \  | |_____- `match` arms have incompatible types\n  |\n  = note: expected struct\
    \ `std::ops::Range<&char>`\n               found type `char`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'A' .. 'Z'\
    \ => c as u8 | 256 - c,\n        'a' .. 'z' => c as u8 | 256 - c,\n        _ =>\
    \ c,\n    })\n    .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmphkdgber_.rs:6:9\n\
    \  |\n6 |         'A' .. 'Z' => c as u8 | 256 - c,\n  |         ^^^^^^^^^^\n \
    \ |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmphkdgber_.rs:7:9\n  |\n7 |         'a' .. 'z' => c as u8 | 256 -\
    \ c,\n  |         ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0277]: cannot subtract `char` from `{integer}`\n\
    \ --> /tmp/tmphkdgber_.rs:6:37\n  |\n6 |         'A' .. 'Z' => c as u8 | 256 -\
    \ c,\n  |                                     ^ no implementation for `{integer}\
    \ - char`\n  |\n  = help: the trait `Sub<char>` is not implemented for `{integer}`\n\
    \  = help: the following other types implement trait `Sub<Rhs>`:\n           \
    \ <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128\
    \ as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n\
    \            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n        \
    \    <&'a isize as Sub<isize>>\n          and 48 others\n\nerror[E0277]: cannot\
    \ subtract `char` from `{integer}`\n --> /tmp/tmphkdgber_.rs:7:37\n  |\n7 |  \
    \       'a' .. 'z' => c as u8 | 256 - c,\n  |                                \
    \     ^ no implementation for `{integer} - char`\n  |\n  = help: the trait `Sub<char>`\
    \ is not implemented for `{integer}`\n  = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n            <&'a f64 as\
    \ Sub<f64>>\n            <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n\
    \            <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n      \
    \      <&'a i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and\
    \ 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0658.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c @ _ if\
    \ c >= 'A' && c <= 'Z' => (c - 'A' + 'a' as u8) as char,\n        c @ _ => (c\
    \ - 'a' as u8) as char,\n        c => c,\n    })\n    .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n --> /tmp/tmpurxc2tkx.rs:6:45\n\
    \  |\n6 |         c @ _ if c >= 'A' && c <= 'Z' => (c - 'A' + 'a' as u8) as char,\n\
    \  |                                           - ^ --- char\n  |             \
    \                              |\n  |                                        \
    \   char\n\nerror[E0369]: cannot subtract `u8` from `char`\n --> /tmp/tmpurxc2tkx.rs:7:21\n\
    \  |\n7 |         c @ _ => (c - 'a' as u8) as char,\n  |                   - ^\
    \ --------- u8\n  |                   |\n  |                   char\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| (c as u32).to_ascii_uppercase().to_string())\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .map(|c| c.to_string().to_ascii_lowercase())\n\
    \        .collect::<Vec<_>>()\n        .concat()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_ascii_uppercase` found for type `u32`\
    \ in the current scope\n --> /tmp/tmpn8uc95tg.rs:7:29\n  |\n7 |         .map(|c|\
    \ (c as u32).to_ascii_uppercase().to_string())\n  |                          \
    \   ^^^^^^^^^^^^^^^^^^ method not found in `u32`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c|\n        c.to_ascii_lowercase()\n\
    \            .iter()\n            .fold(c, |mut current, _| current.to_ascii_uppercase())\n\
    \            .collect()\n    )\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for type `char` in the current\
    \ scope\n --> /tmp/tmp3u9uhlts.rs:7:14\n  |\n7 |             .iter()\n  |    \
    \          ^^^^ method not found in `char`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3u9uhlts.rs:5:5\n   |\n4  |   fn flip_case(string: String) -> String\
    \ {\n   |                                   ------ expected `String` because of\
    \ return type\n5  | /     string.chars().map(|c|\n6  | |         c.to_ascii_lowercase()\n\
    7  | |             .iter()\n8  | |             .fold(c, |mut current, _| current.to_ascii_uppercase())\n\
    9  | |             .collect()\n10 | |     )\n   | |_____^ expected struct `String`,\
    \ found struct `Map`\n   |\n   = note: expected struct `String`\n            \
    \  found struct `Map<Chars<'_>, _>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    if let (index, char) = string.chars().enumerate().find(|(_,\
    \ c)| c.is_uppercase()) {\n        string.chars().rev().enumerate().find(|(_,\
    \ i), _| i > index).map(|(_, c)| c.to_lowercase()).unwrap_or(char)\n    } else\
    \ {\n        string\n    }\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnbzoq473.rs:5:12\n  |\n5 |\
    \     if let (index, char) = string.chars().enumerate().find(|(_, c)| c.is_uppercase())\
    \ {\n  |            ^^^^^^^^^^^^^   ----------------------------------------------------------\
    \ this expression has type `Option<(usize, char)>`\n  |            |\n  |    \
    \        expected enum `Option`, found tuple\n  |\n  = note: expected enum `Option<(usize,\
    \ char)>`\n            found tuple `(_, _)`\n\nerror[E0593]: closure is expected\
    \ to take 1 argument, but it takes 2 arguments\n --> /tmp/tmpnbzoq473.rs:6:42\n\
    \  |\n6 |         string.chars().rev().enumerate().find(|(_, i), _| i > index).map(|(_,\
    \ c)| c.to_lowercase()).unwrap_or(char)\n  |                                 \
    \         ^^^^ ----------- takes 2 arguments\n  |                            \
    \              |\n  |                                          expected closure\
    \ that takes 1 argument\n\nerror[E0308]: mismatched types\n --> /tmp/tmpnbzoq473.rs:6:9\n\
    \  |\n4 | fn flip_case(string: String) -> String {\n  |                      \
    \           ------ expected `String` because of return type\n5 |     if let (index,\
    \ char) = string.chars().enumerate().find(|(_, c)| c.is_uppercase()) {\n6 |  \
    \       string.chars().rev().enumerate().find(|(_, i), _| i > index).map(|(_,\
    \ c)| c.to_lowercase()).unwrap_or(char)\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |         |\n  |    \
    \     expected struct `String`, found struct `ToLowercase`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0593.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c @ b'A'\
    \ as b => b'A' as b'a' || b'a' as b,\n        c @ b'a' as b => b'a' as b'A' ||\
    \ b'A' as b,\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `...`, `..=`, `..`, `=>`, `if`, or `|`, found keyword\
    \ `as`\n --> /tmp/tmp31w1kpl0.rs:6:18\n  |\n6 |         c @ b'A' as b => b'A'\
    \ as b'a' || b'a' as b,\n  |                  ^^ expected one of `...`, `..=`,\
    \ `..`, `=>`, `if`, or `|`\n\nerror[E0277]: a value of type `String` cannot be\
    \ built from an iterator over elements of type `()`\n    --> /tmp/tmp31w1kpl0.rs:9:8\n\
    \     |\n9    |     }).collect()\n     |        ^^^^^^^ value of type `String`\
    \ cannot be built from `std::iter::Iterator<Item=()>`\n     |\n     = help: the\
    \ trait `FromIterator<()>` is not implemented for `String`\n     = help: the following\
    \ other types implement trait `FromIterator<A>`:\n               <String as FromIterator<&'a\
    \ char>>\n               <String as FromIterator<&'a str>>\n               <String\
    \ as FromIterator<Box<str>>>\n               <String as FromIterator<Cow<'a, str>>>\n\
    \               <String as FromIterator<String>>\n               <String as FromIterator<char>>\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            c @ b'A' as b'a' => b'a' as b'A'\n            c @ b'a' as b'a'\
    \ => b'a' as b'a'\n            _ => c\n        })\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `...`, `..=`, `..`, `=>`, `if`, or `|`, found keyword\
    \ `as`\n --> /tmp/tmpjeg2fn98.rs:8:22\n  |\n8 |             c @ b'A' as b'a' =>\
    \ b'a' as b'A'\n  |                      ^^ expected one of `...`, `..=`, `..`,\
    \ `=>`, `if`, or `|`\n\nerror[E0277]: a value of type `String` cannot be built\
    \ from an iterator over elements of type `()`\n    --> /tmp/tmpjeg2fn98.rs:12:10\n\
    \     |\n12   |         .collect::<String>()\n     |          ^^^^^^^ value of\
    \ type `String` cannot be built from `std::iter::Iterator<Item=()>`\n     |\n\
    \     = help: the trait `FromIterator<()>` is not implemented for `String`\n \
    \    = help: the following other types implement trait `FromIterator<A>`:\n  \
    \             <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      c @ 'a' @ 'A' => c as u8 | 0x20,\n            c @ 'b' @ 'B' => c as u8\
    \ | 0x40,\n            c @ 'c' @ 'C' => c as u8 | 0x60,\n            c @ 'd' @\
    \ 'D' => c as u8 | 0x80,\n            c @ 'e' @ 'E' => c as u8 | 0xA0,\n     \
    \       c @ 'f' @ 'F' => c as u8 | 0xC0,\n            c @ 'g' @ 'G' => c as u8\
    \ | 0xE0,\n            c @ 'h' @ 'H' => c as u8 | 0xF0,\n            _ => c,\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: left-hand side of `@` must be a binding\n --> /tmp/tmpcjcowy5j.rs:7:17\n\
    \  |\n7 |             c @ 'a' @ 'A' => c as u8 | 0x20,\n  |                 ---^^^---\n\
    \  |                 |     |\n  |                 |     also a pattern\n  |  \
    \               interpreted as a pattern, not a binding\n  |\n  = note: bindings\
    \ are `x`, `mut x`, `ref x`, and `ref mut x`\n\nerror: left-hand side of `@` must\
    \ be a binding\n --> /tmp/tmpcjcowy5j.rs:8:17\n  |\n8 |             c @ 'b' @\
    \ 'B' => c as u8 | 0x40,\n  |                 ---^^^---\n  |                 |\
    \     |\n  |                 |     also a pattern\n  |                 interpreted\
    \ as a pattern, not a binding\n  |\n  = note: bindings are `x`, `mut x`, `ref\
    \ x`, and `ref mut x`\n\nerror: left-hand side of `@` must be a binding\n -->\
    \ /tmp/tmpcjcowy5j.rs:9:17\n  |\n9 |             c @ 'c' @ 'C' => c as u8 | 0x60,\n\
    \  |                 ---^^^---\n  |                 |     |\n  |             \
    \    |     also a pattern\n  |                 interpreted as a pattern, not a\
    \ binding\n  |\n  = note: bindings are `x`, `mut x`, `ref x`, and `ref mut x`\n\
    \nerror: left-hand side of `@` must be a binding\n  --> /tmp/tmpcjcowy5j.rs:10:17\n\
    \   |\n10 |             c @ 'd' @ 'D' => c as u8 | 0x80,\n   |               \
    \  ---^^^---\n   |                 |     |\n   |                 |     also a\
    \ pattern\n   |                 interpreted as a pattern, not a binding\n   |\n\
    \   = note: bindings are `x`, `mut x`, `ref x`, and `ref mut x`\n\nerror: left-hand\
    \ side of `@` must be a binding\n  --> /tmp/tmpcjcowy5j.rs:11:17\n   |\n11 | \
    \            c @ 'e' @ 'E' => c as u8 | 0xA0,\n   |                 ---^^^---\n\
    \   |                 |     |\n   |                 |     also a pattern\n   |\
    \                 interpreted as a pattern, not a binding\n   |\n   = note: bindings\
    \ are `x`, `mut x`, `ref x`, and `ref mut x`\n\nerror: left-hand side of `@` must\
    \ be a binding\n  --> /tmp/tmpcjcowy5j.rs:12:17\n   |\n12 |             c @ 'f'\
    \ @ 'F' => c as u8 | 0xC0,\n   |                 ---^^^---\n   |             \
    \    |     |\n   |                 |     also a pattern\n   |        "
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| if c.is_lowercase()\
    \ && !c.is_uppercase() { c } else { c.to_uppercase() })\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp79b6ocql.rs:6:72\n\
    \  |\n6 |         .map(|c| if c.is_lowercase() && !c.is_uppercase() { c } else\
    \ { c.to_uppercase() })\n  |                                                 \
    \            -          ^^^^^^^^^^^^^^^^ expected `char`, found struct `ToUppercase`\n\
    \  |                                                             |\n  |      \
    \                                                       expected because of this\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut string = string.to_string();\n    for c in\
    \ string.chars() {\n        match c {\n            'A'..='Z' => string.push_str(c.to_ascii_uppercase()),\n\
    \            'a'..='z' => string.push_str(c.to_ascii_lowercase()),\n         \
    \   _ => string.push_str(c),\n        }\n    }\n    string\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfzhy1uce.rs:8:42\n  |\n8 |\
    \             'A'..='Z' => string.push_str(c.to_ascii_uppercase()),\n  |     \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfzhy1uce.rs:9:42\n\
    \  |\n9 |             'a'..='z' => string.push_str(c.to_ascii_lowercase()),\n\
    \  |                                          ^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfzhy1uce.rs:10:34\n\
    \   |\n10 |             _ => string.push_str(c),\n   |                       \
    \           ^ expected `&str`, found `char`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c|\n        match c {\n       \
    \     'a' .. 'z' => c.to_uppercase(),\n            'A' .. 'Z' => c.to_lowercase(),\n\
    \            _ => c,\n        }\n    ).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpu_uwxpgb.rs:7:13\n\
    \  |\n7 |             'a' .. 'z' => c.to_uppercase(),\n  |             ^^^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmpu_uwxpgb.rs:8:13\n  |\n8 |             'A' .. 'Z' => c.to_lowercase(),\n\
    \  |             ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: `match` arms have incompatible types\n\
    \  --> /tmp/tmpu_uwxpgb.rs:8:27\n   |\n6  | /         match c {\n7  | |      \
    \       'a' .. 'z' => c.to_uppercase(),\n   | |                           ----------------\
    \ this is found to be of type `ToUppercase`\n8  | |             'A' .. 'Z' =>\
    \ c.to_lowercase(),\n   | |                           ^^^^^^^^^^^^^^^^ expected\
    \ struct `ToUppercase`, found struct `ToLowercase`\n9  | |             _ => c,\n\
    10 | |         }\n   | |_________- `match` arms have incompatible types\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0658.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      'a' => String::from('z'),\n            'z' => String::from('A'),\n    \
    \        _ => c,\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmppefyzzei.rs:9:18\n\
    \   |\n6  |           .map(|c| match c {\n   |  __________________-\n7  | |  \
    \           'a' => String::from('z'),\n   | |                    -----------------\
    \ this is found to be of type `String`\n8  | |             'z' => String::from('A'),\n\
    \   | |                    ----------------- this is found to be of type `String`\n\
    9  | |             _ => c,\n   | |                  ^- help: try using a conversion\
    \ method: `.to_string()`\n   | |                  |\n   | |                  expected\
    \ struct `String`, found `char`\n10 | |         })\n   | |_________- `match` arms\
    \ have incompatible types\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    match string {\n        \"a\" => \"A\",\n        \"\
    b\" => \"B\",\n        \"c\" => \"C\",\n        \"d\" => \"D\",\n        \"e\"\
    \ => \"E\",\n        \"f\" => \"F\",\n        \"g\" => \"G\",\n        \"h\" =>\
    \ \"H\",\n        \"i\" => \"I\",\n        \"j\" => \"J\",\n        \"k\" => \"\
    K\",\n        \"l\" => \"L\",\n        \"m\" => \"M\",\n        \"n\" => \"N\"\
    ,\n        \"o\" => \"O\",\n        \"p\" => \"P\",\n        \"q\" => \"Q\",\n\
    \        \"r\" => \"R\",\n        \"s\" => \"S\",\n        \"t\" => \"T\",\n \
    \       \"u\" => \"U\",\n        \"v\" => \"V\",\n        \"w\" => \"W\",\n  \
    \      \"x\" => \"X\",\n        \"y\" => \"Y\",\n        \"z\" => \"Z\",\n   \
    \     _ => string,\n    }\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1qr6l8dy.rs:6:9\n  |\n5 |\
    \     match string {\n  |           ------ this expression has type `String`\n\
    6 |         \"a\" => \"A\",\n  |         ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp1qr6l8dy.rs:7:9\n  |\n5 |     match\
    \ string {\n  |           ------ this expression has type `String`\n6 |      \
    \   \"a\" => \"A\",\n7 |         \"b\" => \"B\",\n  |         ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1qr6l8dy.rs:8:9\n\
    \  |\n5 |     match string {\n  |           ------ this expression has type `String`\n\
    ...\n8 |         \"c\" => \"C\",\n  |         ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1qr6l8dy.rs:9:9\n  |\n\
    5 |     match string {\n  |           ------ this expression has type `String`\n\
    ...\n9 |         \"d\" => \"D\",\n  |         ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1qr6l8dy.rs:10:9\n \
    \  |\n5  |     match string {\n   |           ------ this expression has type\
    \ `String`\n...\n10 |         \"e\" => \"E\",\n   |         ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1qr6l8dy.rs:11:9\n\
    \   |\n5  |     match string {\n   |           ------ this expression has type\
    \ `String`\n...\n11 |         \"f\" => \"F\",\n   |         ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1qr6l8dy.rs:12:9\n\
    \   |\n5  |     match string {\n   |           ------ this expression has type\
    \ `String`\n...\n12 |         \"g\" => \"G\",\n   |         ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1qr6l8dy.rs:13:9\n\
    \   |\n5  |     match string {\n   |           ------ this expression has type\
    \ `String`\n...\n13 |         \"h\" => \"H\",\n   |         ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1qr6l8dy.rs:14:9\n\
    \   |\n5  |     match string {\n   |           ------ this expression has type\
    \ `String`\n...\n14 |         \"i\" => \"I\",\n   |         ^^^ exp"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_lowercase()\
    \ { c.to_uppercase() } else { c.to_lowercase() })\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpf_r87z0k.rs:7:66\n\
    \  |\n7 |         .map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase()\
    \ })\n  |                                        ----------------          ^^^^^^^^^^^^^^^^\
    \ expected struct `ToUppercase`, found struct `ToLowercase`\n  |             \
    \                           |\n  |                                        expected\
    \ because of this\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      c @ b'A' => (c as usize - b'A' + b'a') as char,\n            c @ b'a' =>\
    \ (c as usize - b'a' + b'A') as char,\n            c => c,\n        })\n     \
    \   .collect::<String>()\n}\n\nfn main() {\n    let candidate = flip_case;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6dh52guk.rs:7:17\n  |\n6 |\
    \         .map(|c| match c {\n  |                        - this expression has\
    \ type `char`\n7 |             c @ b'A' => (c as usize - b'A' + b'a') as char,\n\
    \  |                 ^^^^ expected `char`, found `u8`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp6dh52guk.rs:8:17\n  |\n6 |         .map(|c| match c {\n\
    \  |                        - this expression has type `char`\n7 |           \
    \  c @ b'A' => (c as usize - b'A' + b'a') as char,\n8 |             c @ b'a' =>\
    \ (c as usize - b'a' + b'A') as char,\n  |                 ^^^^ expected `char`,\
    \ found `u8`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp6dh52guk.rs:7:39\n\
    \  |\n7 |             c @ b'A' => (c as usize - b'A' + b'a') as char,\n  |   \
    \                                    ^^^^ expected `usize`, found `u8`\n\nerror[E0277]:\
    \ cannot subtract `u8` from `usize`\n --> /tmp/tmp6dh52guk.rs:7:37\n  |\n7 | \
    \            c @ b'A' => (c as usize - b'A' + b'a') as char,\n  |            \
    \                         ^ no implementation for `usize - u8`\n  |\n  = help:\
    \ the trait `Sub<u8>` is not implemented for `usize`\n  = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n\
    \            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n    \
    \        <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n          \
    \  <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize\
    \ as Sub<isize>>\n          and 48 others\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp6dh52guk.rs:7:46\n  |\n7 |             c @ b'A' => (c as usize -\
    \ b'A' + b'a') as char,\n  |                                              ^^^^\
    \ expected `usize`, found `u8`\n\nerror[E0277]: cannot add `u8` to `usize`\n -->\
    \ /tmp/tmp6dh52guk.rs:7:44\n  |\n7 |             c @ b'A' => (c as usize - b'A'\
    \ + b'a') as char,\n  |                                            ^ no implementation\
    \ for `usize + u8`\n  |\n  = help: the trait `Add<u8>` is not implemented for\
    \ `usize`\n  = help: the following other types implement trait `Add<Rhs>`:\n \
    \         "
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'A'..='Z'\
    \ => c + '_',\n        'a'..='z' => c + '_',\n        '0'..='9' => c + '_',\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `char` to `char`\n --> /tmp/tmp4vlaqged.rs:6:24\n\
    \  |\n6 |         'A'..='Z' => c + '_',\n  |                      - ^ --- char\n\
    \  |                      |\n  |                      char\n\nerror[E0369]: cannot\
    \ add `char` to `char`\n --> /tmp/tmp4vlaqged.rs:7:24\n  |\n7 |         'a'..='z'\
    \ => c + '_',\n  |                      - ^ --- char\n  |                    \
    \  |\n  |                      char\n\nerror[E0369]: cannot add `char` to `char`\n\
    \ --> /tmp/tmp4vlaqged.rs:8:24\n  |\n8 |         '0'..='9' => c + '_',\n  |  \
    \                    - ^ --- char\n  |                      |\n  |           \
    \           char\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_upper()\
    \ => c.to_ascii_lowercase(),\n        c if c.is_lower() => c.to_ascii_uppercase(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n --> /tmp/tmp3cdpocxn.rs:6:16\n  |\n6 |         c if c.is_upper() =>\
    \ c.to_ascii_lowercase(),\n  |                ^^^^^^^^ help: there is an associated\
    \ function with a similar name: `is_uppercase`\n\nerror[E0599]: no method named\
    \ `is_lower` found for type `char` in the current scope\n --> /tmp/tmp3cdpocxn.rs:7:16\n\
    \  |\n7 |         c if c.is_lower() => c.to_ascii_uppercase(),\n  |          \
    \      ^^^^^^^^ help: there is an associated function with a similar name: `is_lowercase`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| if c.is_lowercase()\
    \ then c.to_uppercase() else c.to_lowercase())\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `then`\n --> /tmp/tmp5g_bitvh.rs:6:38\n  |\n\
    6 |         .map(|c| if c.is_lowercase() then c.to_uppercase() else c.to_lowercase())\n\
    \  |                  --                  ^^^^ expected `{`\n  |             \
    \     |\n  |                  this `if` expression has a condition, but no block\n\
    \  |\nhelp: try placing this code inside a block\n  |\n6 |         .map(|c| if\
    \ c.is_lowercase() { then } c.to_uppercase() else c.to_lowercase())\n  |     \
    \                                 +      +\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            c if c.is_lowercase() => c.to_uppercase(),\n            c if\
    \ c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n        })\n   \
    \     .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpy137qwgx.rs:9:38\n\
    \   |\n7  |           .map(|c| match c {\n   |  __________________-\n8  | |  \
    \           c if c.is_lowercase() => c.to_uppercase(),\n   | |               \
    \                       ---------------- this is found to be of type `ToUppercase`\n\
    9  | |             c if c.is_uppercase() => c.to_lowercase(),\n   | |        \
    \                              ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n10 | |             _ => c,\n11 | |         })\n\
    \   | |_________- `match` arms have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      'a' .. 'z' => c + 'A' - 'a'.to_ascii_lowercase(),\n            'A' .. 'Z'\
    \ => c + 'a' - 'A'.to_ascii_lowercase(),\n            _ => c,\n        })\n  \
    \      .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpjix4c061.rs:7:13\n\
    \  |\n7 |             'a' .. 'z' => c + 'A' - 'a'.to_ascii_lowercase(),\n  | \
    \            ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmpjix4c061.rs:8:13\n  |\n8 |             'A' .. 'Z' => c + 'a' - 'A'.to_ascii_lowercase(),\n\
    \  |             ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0369]: cannot add `char` to `char`\n --> /tmp/tmpjix4c061.rs:7:29\n\
    \  |\n7 |             'a' .. 'z' => c + 'A' - 'a'.to_ascii_lowercase(),\n  | \
    \                          - ^ --- char\n  |                           |\n  |\
    \                           char\n\nerror[E0369]: cannot add `char` to `char`\n\
    \ --> /tmp/tmpjix4c061.rs:8:29\n  |\n8 |             'A' .. 'Z' => c + 'a' - 'A'.to_ascii_lowercase(),\n\
    \  |                           - ^ --- char\n  |                           |\n\
    \  |                           char\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0369, E0658.\nFor more information\
    \ about an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_upper()\
    \ => c.to_ascii_uppercase().to_string(),\n        c if c.is_lower() => c.to_ascii_lowercase().to_string(),\n\
    \        c => c.to_string(),\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n --> /tmp/tmpffw6kmkh.rs:6:16\n  |\n6 |         c if c.is_upper() =>\
    \ c.to_ascii_uppercase().to_string(),\n  |                ^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_uppercase`\n\nerror[E0599]:\
    \ no method named `is_lower` found for type `char` in the current scope\n -->\
    \ /tmp/tmpffw6kmkh.rs:7:16\n  |\n7 |         c if c.is_lower() => c.to_ascii_lowercase().to_string(),\n\
    \  |                ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `is_lowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    if string.is_empty() {\n        return string;\n  \
    \  }\n    let mut lowercase = string;\n    let mut uppercase = string;\n    let\
    \ mut char_index = 0;\n    while char_index < string.len() {\n        if lowercase[char_index].is_lowercase()\
    \ {\n            uppercase[char_index] = uppercase[char_index].to_uppercase();\n\
    \        } else {\n            lowercase[char_index] = lowercase[char_index].to_lowercase();\n\
    \        }\n        char_index += 1;\n    }\n    lowercase\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpd2ln7jh7.rs:12:12\n\
    \   |\n12 |         if lowercase[char_index].is_lowercase() {\n   |          \
    \  ^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpd2ln7jh7.rs:13:13\n   |\n13 |             uppercase[char_index]\
    \ = uppercase[char_index].to_uppercase();\n   |             ^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpd2ln7jh7.rs:13:37\n   |\n13 |             uppercase[char_index]\
    \ = uppercase[char_index].to_uppercase();\n   |                              \
    \       ^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n  \
    \ = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \     "
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_uppercase()\
    \ => c.to_lowercase() else c.to_uppercase())\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `=>`\n --> /tmp/tmp38g77ofo.rs:7:38\n  |\n7\
    \ |         .map(|c| if c.is_uppercase() => c.to_lowercase() else c.to_uppercase())\n\
    \  |                  --                  ^^ expected `{`\n  |               \
    \   |\n  |                  this `if` expression has a condition, but no block\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    match string.chars() {\n        \"\" => string,\n \
    \       _ => string.chars().map(|c| match c {\n            'a' | ' ' | 'A' =>\
    \ c.to_uppercase(),\n            'b' | ' ' | 'B' => c.to_lowercase(),\n      \
    \      _ => c,\n        }).collect::<String>().into_owned(),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0g_x1jt1.rs:6:9\n  |\n5 |\
    \     match string.chars() {\n  |           -------------- this expression has\
    \ type `Chars<'_>`\n6 |         \"\" => string,\n  |         ^^ expected struct\
    \ `Chars`, found `&str`\n\nerror[E0308]: `match` arms have incompatible types\n\
    \  --> /tmp/tmp0g_x1jt1.rs:9:32\n   |\n7  |           _ => string.chars().map(|c|\
    \ match c {\n   |  _____________________________________-\n8  | |            \
    \ 'a' | ' ' | 'A' => c.to_uppercase(),\n   | |                               \
    \ ---------------- this is found to be of type `ToUppercase`\n9  | |         \
    \    'b' | ' ' | 'B' => c.to_lowercase(),\n   | |                            \
    \    ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`, found struct `ToLowercase`\n\
    10 | |             _ => c,\n11 | |         }).collect::<String>().into_owned(),\n\
    \   | |_________- `match` arms have incompatible types\n\nerror[E0599]: no method\
    \ named `into_owned` found for struct `String` in the current scope\n  --> /tmp/tmp0g_x1jt1.rs:11:32\n\
    \   |\n11 |         }).collect::<String>().into_owned(),\n   |               \
    \                 ^^^^^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // Create a slice from the string slice.\n    let mut\
    \ slice = string[..].to_lowercase();\n    slice = slice.chars().map(|c| if c.is_uppercase()\
    \ {\n        c ^ 0x20\n    } else {\n        c\n    }).collect();\n    slice.iter().cloned().collect::<String>().to_lowercase()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: no implementation for `char ^ {integer}`\n --> /tmp/tmpx5ey_wpw.rs:8:11\n\
    \  |\n8 |         c ^ 0x20\n  |         - ^ ---- {integer}\n  |         |\n  |\
    \         char\n\nerror[E0599]: no method named `iter` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpx5ey_wpw.rs:12:11\n   |\n12 |     slice.iter().cloned().collect::<String>().to_lowercase()\n\
    \   |           ^^^^ method not found in `String`\n   |\nhelp: because of the\
    \ in-memory representation of `&str`, to obtain an `Iterator` over each of its\
    \ codepoint use method `chars`\n   |\n12 |     slice.chars().cloned().collect::<String>().to_lowercase()\n\
    \   |           ~~~~~\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0369, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'A' | 'a'\
    \ => c.to_ascii_uppercase(),\n        'B' | 'b' => c.to_ascii_lowercase(),\n \
    \       _ => c.to_string(),\n    }).collect::<String>().to_ascii_lowercase()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmp5oqn7g2n.rs:8:14\n\
    \  |\n5 |       string.chars().map(|c| match c {\n  |  ____________________________-\n\
    6 | |         'A' | 'a' => c.to_ascii_uppercase(),\n  | |                    \
    \  ---------------------- this is found to be of type `char`\n7 | |         'B'\
    \ | 'b' => c.to_ascii_lowercase(),\n  | |                      ----------------------\
    \ this is found to be of type `char`\n8 | |         _ => c.to_string(),\n  | |\
    \              ^^^^^^^^^^^^^ expected `char`, found struct `String`\n9 | |   \
    \  }).collect::<String>().to_ascii_lowercase()\n  | |_____- `match` arms have\
    \ incompatible types\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      c if c.is_lowercase() => c.to_uppercase(),\n            c if c.is_uppercase()\
    \ => c.to_lowercase(),\n            _ => c,\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpyfnq25ni.rs:8:38\n\
    \   |\n6  |           .map(|c| match c {\n   |  __________________-\n7  | |  \
    \           c if c.is_lowercase() => c.to_uppercase(),\n   | |               \
    \                       ---------------- this is found to be of type `ToUppercase`\n\
    8  | |             c if c.is_uppercase() => c.to_lowercase(),\n   | |        \
    \                              ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n9  | |             _ => c,\n10 | |         })\n\
    \   | |_________- `match` arms have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().fold1(|mut c, _| {\n        match c\
    \ {\n            c if c.is_upper() => c.to_ascii_lowercase(),\n            c if\
    \ c.is_lower() => c.to_ascii_uppercase(),\n            _ => c,\n        }\n  \
    \  })\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `fold1` found for struct `Chars` in the current\
    \ scope\n --> /tmp/tmpt9g9h0dj.rs:5:20\n  |\n5 |     string.chars().fold1(|mut\
    \ c, _| {\n  |                    ^^^^^ method not found in `Chars<'_>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().fold(String::new(), |s, c| s.push_str(c.to_ascii_uppercase()));\n\
    \    string.chars().fold(String::new(), |s, c| s.push_str(c.to_ascii_lowercase()));\n\
    \    s\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `s` in this scope\n --> /tmp/tmpn30pz3fp.rs:7:5\n\
    \  |\n7 |     s\n  |     ^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpn30pz3fp.rs:5:58\n  |\n5 |     string.chars().fold(String::new(),\
    \ |s, c| s.push_str(c.to_ascii_uppercase()));\n  |                           \
    \                               ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found\
    \ `char`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpn30pz3fp.rs:5:47\n  |\n\
    5 |     string.chars().fold(String::new(), |s, c| s.push_str(c.to_ascii_uppercase()));\n\
    \  |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `()`\n  |\nnote: method `push_str` modifies\
    \ its receiver in-place\n --> /tmp/tmpn30pz3fp.rs:5:49\n  |\n5 |     string.chars().fold(String::new(),\
    \ |s, c| s.push_str(c.to_ascii_uppercase()));\n  |                           \
    \                    - ^^^^^^^^ this call modifies `s` in-place\n  |         \
    \                                      |\n  |                                \
    \               you probably want to use this value after calling the method...\n\
    \  = note: ...instead of the `()` output of method `push_str`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpn30pz3fp.rs:6:58\n  |\n6 |     string.chars().fold(String::new(),\
    \ |s, c| s.push_str(c.to_ascii_lowercase()));\n  |                           \
    \                               ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found\
    \ `char`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpn30pz3fp.rs:6:47\n  |\n\
    6 |     string.chars().fold(String::new(), |s, c| s.push_str(c.to_ascii_lowercase()));\n\
    \  |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `()`\n  |\nnote: method `push_str` modifies\
    \ its receiver in-place\n --> /tmp/tmpn30pz3fp.rs:6:49\n  |\n6 |     string.chars().fold(String::new(),\
    \ |s, c| s.push_str(c.to_ascii_lowercase()));\n  |                           \
    \                    - ^^^^^^^^ this call modifies `s` in-place\n  |         \
    \                                      |\n  |         "
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lower() then c.to_upper()\
    \ else c.to_lower()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `then`\n --> /tmp/tmppl8lzo4p.rs:5:44\n  |\n\
    5 |     string.chars().map(|c| if c.is_lower() then c.to_upper() else c.to_lower()).collect()\n\
    \  |                            --              ^^^^ expected `{`\n  |       \
    \                     |\n  |                            this `if` expression has\
    \ a condition, but no block\n  |\nhelp: try placing this code inside a block\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lower() { then } c.to_upper() else\
    \ c.to_lower()).collect()\n  |                                            +  \
    \    +\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .chain(string.chars().map(|c|\
    \ match c.to_ascii_lowercase() {\n            Some(mut c) => c.to_ascii_uppercase(),\n\
    \            None => c,\n        }))\n        .collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpebv3n4na.rs:7:13\n  |\n6 |\
    \         .chain(string.chars().map(|c| match c.to_ascii_lowercase() {\n  |  \
    \                                           ---------------------- this expression\
    \ has type `char`\n7 |             Some(mut c) => c.to_ascii_uppercase(),\n  |\
    \             ^^^^^^^^^^^ expected `char`, found enum `Option`\n  |\n  = note:\
    \ expected type `char`\n             found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpebv3n4na.rs:8:13\n  |\n6 |         .chain(string.chars().map(|c|\
    \ match c.to_ascii_lowercase() {\n  |                                        \
    \     ---------------------- this expression has type `char`\n7 |            \
    \ Some(mut c) => c.to_ascii_uppercase(),\n8 |             None => c,\n  |    \
    \         ^^^^ expected `char`, found enum `Option`\n  |\n  = note: expected type\
    \ `char`\n             found enum `Option<_>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_lowercase()\
    \ then c.to_uppercase() else c.to_lowercase())\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `then`\n --> /tmp/tmp6nrvxfgv.rs:7:38\n  |\n\
    7 |         .map(|c| if c.is_lowercase() then c.to_uppercase() else c.to_lowercase())\n\
    \  |                  --                  ^^^^ expected `{`\n  |             \
    \     |\n  |                  this `if` expression has a condition, but no block\n\
    \  |\nhelp: try placing this code inside a block\n  |\n7 |         .map(|c| if\
    \ c.is_lowercase() { then } c.to_uppercase() else c.to_lowercase())\n  |     \
    \                                 +      +\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_upper() { c.to_lowercase()\
    \ } else { c.to_uppercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n --> /tmp/tmptt65vs6o.rs:5:33\n  |\n5 |     string.chars().map(|c| if\
    \ c.is_upper() { c.to_lowercase() } else { c.to_uppercase() }).collect()\n  |\
    \                                 ^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_uppercase`\n\nerror[E0308]: `if` and `else` have incompatible\
    \ types\n --> /tmp/tmptt65vs6o.rs:5:72\n  |\n5 |     string.chars().map(|c| if\
    \ c.is_upper() { c.to_lowercase() } else { c.to_uppercase() }).collect()\n  |\
    \                                              ----------------          ^^^^^^^^^^^^^^^^\
    \ expected struct `ToLowercase`, found struct `ToUppercase`\n  |             \
    \                                 |\n  |                                     \
    \         expected because of this\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // Special case for the empty string\n    if string.is_empty()\
    \ {\n        String::new()\n    } else {\n        let mut buffer = String::new();\n\
    \        for c in string.chars() {\n            if c.is_uppercase() {\n      \
    \          buffer.push(c.to_lowercase());\n            } else {\n            \
    \    buffer.push(c.to_uppercase());\n            }\n        }\n        buffer\n\
    \    }\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpruh5eexw.rs:12:29\n   |\n\
    12 |                 buffer.push(c.to_lowercase());\n   |                    \
    \         ^^^^^^^^^^^^^^^^ expected `char`, found struct `ToLowercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpruh5eexw.rs:14:29\n   |\n14 |              \
    \   buffer.push(c.to_uppercase());\n   |                             ^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `ToUppercase`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      c @ _ if c.is_uppercase() => c.to_lowercase(),\n            c @ _ if c.is_lowercase()\
    \ => c.to_uppercase(),\n            _ => c,\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpay31rarx.rs:8:42\n\
    \   |\n6  |           .map(|c| match c {\n   |  __________________-\n7  | |  \
    \           c @ _ if c.is_uppercase() => c.to_lowercase(),\n   | |           \
    \                               ---------------- this is found to be of type `ToLowercase`\n\
    8  | |             c @ _ if c.is_lowercase() => c.to_uppercase(),\n   | |    \
    \                                      ^^^^^^^^^^^^^^^^ expected struct `ToLowercase`,\
    \ found struct `ToUppercase`\n9  | |             _ => c,\n10 | |         })\n\
    \   | |_________- `match` arms have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c } else\
    \ { c.to_uppercase() }).collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpdajulq4l.rs:5:61\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c } else { c.to_uppercase()\
    \ }).collect::<String>()\n  |                                                \
    \  -          ^^^^^^^^^^^^^^^^ expected `char`, found struct `ToUppercase`\n \
    \ |                                                  |\n  |                  \
    \                                expected because of this\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut buffer = String::new();\n\n    for ch in string.chars()\
    \ {\n        match ch {\n            'a' .. 'z' => buffer.push_str(&ch.to_string().to_uppercase()),\n\
    \            'A' .. 'Z' => buffer.push_str(&ch.to_string().to_lowercase()),\n\
    \            ch => buffer.push_str(&ch.to_string()),\n        }\n    }\n\n   \
    \ buffer\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmp1jz6a9rk.rs:9:13\n\
    \  |\n9 |             'a' .. 'z' => buffer.push_str(&ch.to_string().to_uppercase()),\n\
    \  |             ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \  --> /tmp/tmp1jz6a9rk.rs:10:13\n   |\n10 |             'A' .. 'Z' => buffer.push_str(&ch.to_string().to_lowercase()),\n\
    \   |             ^^^^^^^^^^\n   |\n   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0658`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      'a' => {\n                'A' as u8\n            }\n            'b' =>\
    \ {\n                'B' as u8\n            }\n            'c' => {\n        \
    \        'C' as u8\n            }\n            'd' => {\n                'D' as\
    \ u8\n            }\n            'e' => {\n                'E' as u8\n       \
    \     }\n            'f' => {\n                'F' as u8\n            }\n    \
    \        'g' => {\n                'G' as u8\n            }\n            'h' =>\
    \ {\n                'H' as u8\n            }\n            'i' => {\n        \
    \        'I' as u8\n            }\n            'j' => {\n                'J' as\
    \ u8\n            }\n            'k' => {\n                'K' as u8\n       \
    \     }\n            'l' => {\n                'L' as u8\n            }\n    \
    \        'm' => {\n                'M' as u8\n            }\n            'n' =>\
    \ {\n                'N' as u8\n            }\n            'o' => {\n        \
    \        'O' as u8\n            }\n            'p' => {\n                'P' as\
    \ u8\n            }\n            'q' => {\n                'Q' as u8\n       \
    \     }\n            'r' => {\n                'R' as u8\n            }\n    \
    \        's' => {\n                'S' as u8\n            }\n            't' =>\
    \ {\n                'T' as u8\n            }\n            'u' => {\n        \
    \        'U' as u8\n            }\n            'v' => {\n                'V' as\
    \ u8\n            }\n            'w' => {\n                'W' as u8\n       \
    \     }\n            'x' => {\n                'X' as u8\n            }\n    \
    \        'y' => {\n                'Y' as u8\n            }\n            'z' =>\
    \ {\n                'Z' as u8\n            }\n            _ => {\n          \
    \      'a' as u8\n            }\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `u8`\n    --> /tmp/tmpqm9_yy4w.rs:89:10\n     |\n89  \
    \ |         .collect()\n     |          ^^^^^^^ value of type `String` cannot\
    \ be built from `std::iter::Iterator<Item=u8>`\n     |\n     = help: the trait\
    \ `FromIterator<u8>` is not implemented for `String`\n     = help: the following\
    \ other types implement trait `FromIterator<A>`:\n               <String as FromIterator<&'a\
    \ char>>\n               <String as FromIterator<&'a str>>\n               <String\
    \ as FromIterator<Box<str>>>\n               <String as FromIterator<Cow<'a, str>>>\n\
    \               <String as FromIterator<String>>\n               <String as FromIterator<char>>\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            'a' | 'A' => c.to_ascii_uppercase(),\n            'b' | 'B' =>\
    \ c.to_ascii_lowercase(),\n            _ => c,\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpom1i872i.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a' .. 'z'\
    \ => c as u32 + 32 as u32,\n        _ => c,\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmp8y0hzd7_.rs:6:9\n\
    \  |\n6 |         'a' .. 'z' => c as u32 + 32 as u32,\n  |         ^^^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: `match` arms have incompatible types\n\
    \ --> /tmp/tmp8y0hzd7_.rs:7:14\n  |\n5 |       string.chars().map(|c| match c\
    \ {\n  |  ____________________________-\n6 | |         'a' .. 'z' => c as u32\
    \ + 32 as u32,\n  | |                       -------------------- this is found\
    \ to be of type `u32`\n7 | |         _ => c,\n  | |              ^ expected `u32`,\
    \ found `char`\n8 | |     }).collect()\n  | |_____- `match` arms have incompatible\
    \ types\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0658.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut chars = string.chars();\n\n    let mut result\
    \ = String::with_capacity(string.len());\n\n    for (char) in chars {\n      \
    \  let char_cap = char.to_ascii_lowercase();\n        let char_cap_up = char.to_ascii_uppercase();\n\
    \n        if char_cap != char_cap_up {\n            result.push(*char);\n    \
    \    } else {\n            result.push(*char_cap_up);\n        }\n    }\n\n  \
    \  result\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around pattern\n --> /tmp/tmpyrjfkjjh.rs:9:9\n\
    \  |\n9 |     for (char) in chars {\n  |         ^    ^\n  |\n  = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n  |\n9 -     for (char) in chars\
    \ {\n9 +     for char in chars {\n  | \n\nerror[E0614]: type `char` cannot be\
    \ dereferenced\n  --> /tmp/tmpyrjfkjjh.rs:14:25\n   |\n14 |             result.push(*char);\n\
    \   |                         ^^^^^\n\nerror[E0614]: type `char` cannot be dereferenced\n\
    \  --> /tmp/tmpyrjfkjjh.rs:16:25\n   |\n16 |             result.push(*char_cap_up);\n\
    \   |                         ^^^^^^^^^^^^\n\nerror: aborting due to 2 previous\
    \ errors; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut lowercase = String::new();\n    let mut uppercase\
    \ = String::new();\n\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            lowercase.append(c);\n        } else {\n            uppercase.append(c);\n\
    \        }\n    }\n\n    lowercase.append(uppercase)\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `append` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpsjxyol0v.rs:10:23\n   |\n10 |             lowercase.append(c);\n\
    \   |                       ^^^^^^ method not found in `String`\n\nerror[E0599]:\
    \ no method named `append` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpsjxyol0v.rs:12:23\n   |\n12 |             uppercase.append(c);\n   |\
    \                       ^^^^^^ method not found in `String`\n\nerror[E0599]: no\
    \ method named `append` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpsjxyol0v.rs:16:15\n   |\n16 |     lowercase.append(uppercase)\n   |\
    \               ^^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // Step 1. Split string to chars\n    let char_array\
    \ = string.chars().collect();\n\n    // Step 2. Flip each char\n    for char in\
    \ char_array {\n        char.swap();\n    }\n\n    // Step 3. Join chars to String\n\
    \    string.join(\"\")\n}\n\nfn main() {\n    let candidate = flip_case;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpeawu91pg.rs:10:9\n\
    \   |\n9  |     for char in char_array {\n   |                 ---------- the\
    \ element type for this iterator is not specified\n10 |         char.swap();\n\
    \   |         ^^^^ cannot infer type\n   |\n   = note: type must be known at this\
    \ point\n\nerror[E0599]: no method named `join` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpeawu91pg.rs:14:12\n   |\n14 |     string.join(\"\
    \")\n   |            ^^^^ method not found in `String`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0282, E0599.\n\
    For more information about an error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a' .. 'z'\
    \ => c as u8 - 'a' as u8,\n        'A' .. 'Z' => c as u8 - 'A' as u8,\n      \
    \  _ => c,\n    }).collect::<String>().to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmphi299ya6.rs:6:9\n\
    \  |\n6 |         'a' .. 'z' => c as u8 - 'a' as u8,\n  |         ^^^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmphi299ya6.rs:7:9\n  |\n7 |         'A' .. 'Z' => c as u8 - 'A' as\
    \ u8,\n  |         ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: `match` arms have incompatible types\n\
    \ --> /tmp/tmphi299ya6.rs:8:14\n  |\n5 |       string.chars().map(|c| match c\
    \ {\n  |  ____________________________-\n6 | |         'a' .. 'z' => c as u8 -\
    \ 'a' as u8,\n  | |                       ------------------- this is found to\
    \ be of type `u8`\n7 | |         'A' .. 'Z' => c as u8 - 'A' as u8,\n  | |   \
    \                    ------------------- this is found to be of type `u8`\n8 |\
    \ |         _ => c,\n  | |              ^ expected `u8`, found `char`\n9 | | \
    \    }).collect::<String>().to_owned()\n  | |_____- `match` arms have incompatible\
    \ types\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0658.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    match string.len() {\n        0 => \"\",\n        _\
    \ => {\n            let mut string = string.to_string();\n            for (i,\
    \ char) in string.chars().enumerate() {\n                let is_uppercase = (char\
    \ >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z');\n                if\
    \ is_uppercase {\n                    string.swap(i, i + 1);\n               \
    \ }\n            }\n            string\n        }\n    }\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2q_glpx4.rs:6:14\n  |\n4 |\
    \ fn flip_case(string: String) -> String {\n  |                              \
    \   ------ expected `String` because of return type\n5 |     match string.len()\
    \ {\n6 |         0 => \"\",\n  |              ^^- help: try using a conversion\
    \ method: `.to_string()`\n  |              |\n  |              expected struct\
    \ `String`, found `&str`\n\nerror[E0599]: no method named `swap` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmp2q_glpx4.rs:12:28\n   |\n12 | \
    \                    string.swap(i, i + 1);\n   |                            ^^^^\
    \ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| if c ==\
    \ 'a' { 'A' } else if c == 'b' { 'B' } else if c == 'c' { 'C' } else if c == 'd'\
    \ { 'D' } else if c == 'e' { 'E' } else if c == 'f' { 'F' } else if c == 'g' {\
    \ 'G' } else if c == 'h' { 'H' } else if c == 'i' { 'I' } else if c == 'j' { 'J'\
    \ } else if c == 'k' { 'K' } else if c == 'l' { 'L' } else if c == 'm' { 'M' }\
    \ else if c == 'n' { 'N' } else if c == 'o' { 'O' } else if c == 'p' { 'P' } else\
    \ if c == 'q' { 'Q' } else if c == 'r' { 'R' } else if c == 's' { 'S' } else if\
    \ c == 't' { 'T' } else if c == 'u' { 'U' } else if c == 'v' { 'V' } else if c\
    \ == 'w' { 'W' } else if c == 'x' { 'X' } else if c == 'y' { 'Y' } else if c ==\
    \ 'z' { 'Z' }else c)\n        .collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `c`\n --> /tmp/tmp0k5x__uu.rs:7:667\n  |\n7\
    \ | ...'X' } else if c == 'y' { 'Y' } else if c == 'z' { 'Z' }else c)\n  |   \
    \                                                             ^ expected `{`\n\
    \  |\nhelp: try placing this code inside a block\n  |\n7 |         .map(|c| if\
    \ c == 'a' { 'A' } else if c == 'b' { 'B' } else if c == 'c' { 'C' } else if c\
    \ == 'd' { 'D' } else if c == 'e' { 'E' } else if c == 'f' { 'F' } else if c ==\
    \ 'g' { 'G' } else if c == 'h' { 'H' } else if c == 'i' { 'I' } else if c == 'j'\
    \ { 'J' } else if c == 'k' { 'K' } else if c == 'l' { 'L' } else if c == 'm' {\
    \ 'M' } else if c == 'n' { 'N' } else if c == 'o' { 'O' } else if c == 'p' { 'P'\
    \ } else if c == 'q' { 'Q' } else if c == 'r' { 'R' } else if c == 's' { 'S' }\
    \ else if c == 't' { 'T' } else if c == 'u' { 'U' } else if c == 'v' { 'V' } else\
    \ if c == 'w' { 'W' } else if c == 'x' { 'X' } else if c == 'y' { 'Y' } else if\
    \ c == 'z' { 'Z' }else { c })\n  |                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                +   +\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| *c < *c + '_' if c.is_upper()\
    \ || *c < *c + '_').collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found keyword\
    \ `if`\n --> /tmp/tmp8jcwasri.rs:5:42\n  |\n5 |     string.chars().map(|c| *c\
    \ < *c + '_' if c.is_upper() || *c < *c + '_').collect()\n  |                \
    \                          ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\
    \nerror[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmp8jcwasri.rs:5:28\n\
    \  |\n5 |     string.chars().map(|c| *c < *c + '_' if c.is_upper() || *c < *c\
    \ + '_').collect()\n  |                            ^^\n\nerror[E0614]: type `char`\
    \ cannot be dereferenced\n --> /tmp/tmp8jcwasri.rs:5:33\n  |\n5 |     string.chars().map(|c|\
    \ *c < *c + '_' if c.is_upper() || *c < *c + '_').collect()\n  |             \
    \                    ^^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8jcwasri.rs:5:5\n\
    \  |\n4 | fn flip_case(string: String) -> String {\n  |                      \
    \           ------ expected `String` because of return type\n5 |     string.chars().map(|c|\
    \ *c < *c + '_' if c.is_upper() || *c < *c + '_').collect()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found struct `Map`\n  |\n  = note: expected struct\
    \ `String`\n             found struct `Map<Chars<'_>, [closure@/tmp/tmp8jcwasri.rs:5:24:\
    \ 5:41]>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .chain()\n      \
    \  .map(|c| match c {\n            'A'..='Z' => c.to_ascii_lowercase(),\n    \
    \        'a'..='z' => c.to_ascii_uppercase(),\n            _ => c,\n        })\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpe8xe_iob.rs:7:10\n    |\n7   |         .chain()\n    |       \
    \   ^^^^^- supplied 0 arguments\n    |          |\n    |          expected 1 argument\n\
    \    |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // Convert to lower case first.\n    string.to_lowercase().chars()\n\
    \        .map(|c| match c {\n            c => c,\n            'a' => { 'A' },\n\
    \            'e' => { 'E' },\n            'i' => { 'I' },\n            'o' =>\
    \ { 'O' },\n            'u' => { 'U' },\n            _ => { 'a' }, // Any other\
    \ character should be converted to its uppercase equivalent.\n        })\n   \
    \     .collect::<String>()\n        .to_uppercase()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpd_xe3cwl.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      c if c.is_lowercase() => c.to_uppercase(),\n            c if c.is_uppercase()\
    \ => c.to_lowercase(),\n            _ => c,\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmptk0bcpjv.rs:8:38\n\
    \   |\n6  |           .map(|c| match c {\n   |  __________________-\n7  | |  \
    \           c if c.is_lowercase() => c.to_uppercase(),\n   | |               \
    \                       ---------------- this is found to be of type `ToUppercase`\n\
    8  | |             c if c.is_uppercase() => c.to_lowercase(),\n   | |        \
    \                              ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n9  | |             _ => c,\n10 | |         })\n\
    \   | |_________- `match` arms have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'A'..='Z'\
    \ => c - 'a',\n        'a'..='z' => c + 0x5f - 'A'.to_ascii_lowercase().chars().unwrap(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `char` from `char`\n --> /tmp/tmp8qaq6k0t.rs:6:24\n\
    \  |\n6 |         'A'..='Z' => c - 'a',\n  |                      - ^ --- char\n\
    \  |                      |\n  |                      char\n\nerror[E0369]: cannot\
    \ add `{integer}` to `char`\n --> /tmp/tmp8qaq6k0t.rs:7:24\n  |\n7 |         'a'..='z'\
    \ => c + 0x5f - 'A'.to_ascii_lowercase().chars().unwrap(),\n  |              \
    \        - ^ ---- {integer}\n  |                      |\n  |                 \
    \     char\n\nerror[E0599]: no method named `chars` found for type `char` in the\
    \ current scope\n --> /tmp/tmp8qaq6k0t.rs:7:58\n  |\n7 |         'a'..='z' =>\
    \ c + 0x5f - 'A'.to_ascii_lowercase().chars().unwrap(),\n  |                 \
    \                                         ^^^^^ method not found in `char`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0369, E0599.\nFor more information about an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'A' => {\
    \ 'a' }\n        'B' => { 'b' }\n        'C' => { 'c' }\n        'D' => { 'd'\
    \ }\n        'E' => { 'e' }\n        'F' => { 'f' }\n        'G' => { 'g' }\n\
    \        'H' => { 'h' }\n        'I' => { 'i' }\n        'J' => { 'j' }\n    \
    \    'K' => { 'k' }\n        'L' => { 'l' }\n        'M' => { 'm' }\n        'N'\
    \ => { 'n' }\n        'O' => { 'o' }\n        'P' => { 'p' }\n        'Q' => {\
    \ 'q' }\n        'R' => { 'r' }\n        'S' => { 's' }\n        'T' => { 't'\
    \ }\n        'U' => { 'u' }\n        'V' => { 'v' }\n        'W' => { 'w' }\n\
    \        'X' => { 'x' }\n        'Y' => { 'y' }\n        'Z' => { 'z' }\n    \
    \    _ => c,\n    })\n    .collect::<String>() + string\n}\n\nfn main() {\n  \
    \  let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt1jjstlv.rs:34:28\n   |\n\
    34 |     .collect::<String>() + string\n   |                            ^^^^^^\n\
    \   |                            |\n   |                            expected `&str`,\
    \ found struct `String`\n   |                            help: consider borrowing\
    \ here: `&string`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut result = string;\n    let mut buffer = String::with_capacity(result.chars().count());\n\
    \    for &c in result.chars() {\n        if c.is_lowercase() {\n            buffer.push(c.to_uppercase());\n\
    \        } else {\n            buffer.push(c.to_lowercase());\n        }\n   \
    \ }\n    result.resize(buffer.len(), 0);\n    result\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxzw2u1o8.rs:7:9\n  |\n7 |\
    \     for &c in result.chars() {\n  |         ^^    -------------- this expression\
    \ has type `Option<char>`\n  |         |\n  |         expected `char`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `c`\n  |\n  =\
    \ note:   expected type `char`\n          found reference `&_`\n\nerror[E0599]:\
    \ no method named `resize` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpxzw2u1o8.rs:14:12\n   |\n14 |     result.resize(buffer.len(), 0);\n\
    \   |            ^^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| if c.is_lowercase()\
    \ { c.to_uppercase() } else { c.to_lowercase() })\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp1znf51v8.rs:7:66\n\
    \  |\n7 |         .map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase()\
    \ })\n  |                                        ----------------          ^^^^^^^^^^^^^^^^\
    \ expected struct `ToUppercase`, found struct `ToLowercase`\n  |             \
    \                           |\n  |                                        expected\
    \ because of this\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.to_lowercase().chars().map(|c| if c == 'a' {\
    \ 'A' } else if c == 'e' { 'E' } else if c == 'i' { 'I' } else if c == 'o' { 'O'\
    \ } else if c == 'u' { 'U' } else c ).collect::<String>().join(\"\")\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `c`\n --> /tmp/tmp7ndngffl.rs:5:168\n  |\n5\
    \ | ...I' } else if c == 'o' { 'O' } else if c == 'u' { 'U' } else c ).collect::<String>().join(\"\
    \")\n  |                                                                ^ expected\
    \ `{`\n  |\nhelp: try placing this code inside a block\n  |\n5 |     string.to_lowercase().chars().map(|c|\
    \ if c == 'a' { 'A' } else if c == 'e' { 'E' } else if c == 'i' { 'I' } else if\
    \ c == 'o' { 'O' } else if c == 'u' { 'U' } else { c } ).collect::<String>().join(\"\
    \")\n  |                                                                     \
    \                                                                            \
    \                       +   +\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.to_lowercase().chars().map(|c| match c {\n \
    \       'a' .. 'z' => c,\n        'A' .. 'Z' => c + ('A' as u8)\n    })\n    \
    \    .collect::<String>()\n        .to_uppercase()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpfz_d44wz.rs:6:9\n\
    \  |\n6 |         'a' .. 'z' => c,\n  |         ^^^^^^^^^^\n  |\n  = note: see\
    \ issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n\
    \nerror[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpfz_d44wz.rs:7:9\n\
    \  |\n7 |         'A' .. 'Z' => c + ('A' as u8)\n  |         ^^^^^^^^^^\n  |\n\
    \  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for\
    \ more information\n\nerror[E0369]: cannot add `u8` to `char`\n --> /tmp/tmpfz_d44wz.rs:7:25\n\
    \  |\n7 |         'A' .. 'Z' => c + ('A' as u8)\n  |                       - ^\
    \ ----------- u8\n  |                       |\n  |                       char\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0369, E0658.\nFor more information about an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.to_lowercase().chars().collect::<String>().chain(|c|\
    \ {\n        match c {\n            'a' => \"A\".to_string(),\n            'b'\
    \ => \"B\".to_string(),\n            'c' => \"C\".to_string(),\n            'd'\
    \ => \"D\".to_string(),\n            'e' => \"E\".to_string(),\n            'f'\
    \ => \"F\".to_string(),\n            'g' => \"G\".to_string(),\n            'h'\
    \ => \"H\".to_string(),\n            'i' => \"I\".to_string(),\n            'j'\
    \ => \"J\".to_string(),\n            'k' => \"K\".to_string(),\n            'l'\
    \ => \"L\".to_string(),\n            'm' => \"M\".to_string(),\n            'n'\
    \ => \"N\".to_string(),\n            'o' => \"O\".to_string(),\n            'p'\
    \ => \"P\".to_string(),\n            'q' => \"Q\".to_string(),\n            'r'\
    \ => \"R\".to_string(),\n            's' => \"S\".to_string(),\n            't'\
    \ => \"T\".to_string(),\n            'u' => \"U\".to_string(),\n            'v'\
    \ => \"V\".to_string(),\n            'w' => \"W\".to_string(),\n            'x'\
    \ => \"X\".to_string(),\n            'y' => \"Y\".to_string(),\n            'z'\
    \ => \"Z\".to_string(),\n            _ => c.to_string(),\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpg1k4zydu.rs:5:55\n\
    \    |\n5   |       string.to_lowercase().chars().collect::<String>().chain(|c|\
    \ {\n    |                                                         ^^^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().fold(String::new(), |mut c, _| {\n \
    \       c += match c.to_lowercase().to_uppercase() {\n            'A' => { 'a'\
    \ },\n            'a' => { 'A' },\n            _ => unreachable!(),\n        };\n\
    \        c\n    })\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg2izx1z_.rs:7:13\n  |\n6 |\
    \         c += match c.to_lowercase().to_uppercase() {\n  |                  \
    \  ------------------------------- this expression has type `String`\n7 |    \
    \         'A' => { 'a' },\n  |             ^^^ expected struct `String`, found\
    \ `char`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpg2izx1z_.rs:8:13\n  |\n\
    6 |         c += match c.to_lowercase().to_uppercase() {\n  |                \
    \    ------------------------------- this expression has type `String`\n7 |  \
    \           'A' => { 'a' },\n8 |             'a' => { 'A' },\n  |            \
    \ ^^^ expected struct `String`, found `char`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpg2izx1z_.rs:7:22\n  |\n7 |             'A' => { 'a' },\n  |    \
    \                  ^^^ expected `&str`, found `char`\n  |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n  |\n7 |             'A' => { \"\
    a\" },\n  |                      ~~~\n\nerror[E0308]: mismatched types\n --> /tmp/tmpg2izx1z_.rs:8:22\n\
    \  |\n8 |             'a' => { 'A' },\n  |                      ^^^ expected `&str`,\
    \ found `char`\n  |\nhelp: if you meant to write a `str` literal, use double quotes\n\
    \  |\n8 |             'a' => { \"A\" },\n  |                      ~~~\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut s = string.to_lowercase();\n    s.to_uppercase();\n\
    \    s\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpy7rxwmu6.rs:13:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // TODO: implement me\n    \"\".to_string()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"hELLO!\"`', /tmp/tmp64zeau2w.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c @ _ if\
    \ c.is_ascii_lowercase() => c.to_ascii_uppercase(),\n        c @ _ if c.is_ascii_uppercase()\
    \ => c.to_ascii_lowercase(),\n        c => c\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      'A' | 'a' => 'A',\n            'B' | 'b' => 'B',\n            'C' | 'c'\
    \ => 'C',\n            'D' | 'd' => 'D',\n            'E' | 'e' => 'E',\n    \
    \        'F' | 'f' => 'F',\n            'G' | 'g' => 'G',\n            'H' | 'h'\
    \ => 'H',\n            'I' | 'i' => 'I',\n            'J' => 'J',\n          \
    \  'K' | 'k' => 'K',\n            'L' | 'l' => 'L',\n            'M' | 'm' =>\
    \ 'M',\n            'N' | 'n' => 'N',\n            'O' | 'o' => 'O',\n       \
    \     'P' | 'p' => 'P',\n            'Q' | 'q' => 'Q',\n            'R' | 'r'\
    \ => 'R',\n            'S' | 's' => 'S',\n            'T' => 't',\n          \
    \  'U' | 'u' => 'U',\n            'V' => 'V',\n            'W' => 'W',\n     \
    \       'X' => 'X',\n            'Y' => 'Y',\n            'Z' => 'Z',\n      \
    \      '_' => '_',\n            c => c,\n        })\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpwd5x7t7q.rs:42:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.to_lowercase().chars().map(|c| match c {\n \
    \       c if c.is_upper() => c.to_uppercase(),\n        c if c.is_lower() => c.to_lowercase(),\n\
    \        _ => c,\n    }).collect::<String>().to_owned()\n}\n\nfn main() {\n  \
    \  let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n --> /tmp/tmpr00opw0o.rs:6:16\n  |\n6 |         c if c.is_upper() =>\
    \ c.to_uppercase(),\n  |                ^^^^^^^^ help: there is an associated\
    \ function with a similar name: `is_uppercase`\n\nerror[E0599]: no method named\
    \ `is_lower` found for type `char` in the current scope\n --> /tmp/tmpr00opw0o.rs:7:16\n\
    \  |\n7 |         c if c.is_lower() => c.to_lowercase(),\n  |                ^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_lowercase`\n\n\
    error[E0308]: `match` arms have incompatible types\n --> /tmp/tmpr00opw0o.rs:7:30\n\
    \  |\n5 |       string.to_lowercase().chars().map(|c| match c {\n  |  ___________________________________________-\n\
    6 | |         c if c.is_upper() => c.to_uppercase(),\n  | |                  \
    \            ---------------- this is found to be of type `ToUppercase`\n7 | |\
    \         c if c.is_lower() => c.to_lowercase(),\n  | |                      \
    \        ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`, found struct `ToLowercase`\n\
    8 | |         _ => c,\n9 | |     }).collect::<String>().to_owned()\n  | |_____-\
    \ `match` arms have incompatible types\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n        .iter()\n        .map(|c| match\
    \ c {\n            c => c.to_string(),\n            _ => c,\n        })\n    \
    \    .collect::<String>()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp614qyvn3.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'A'..='Z'\
    \ => c,\n        'a'..='z' => c,\n        _ => c,\n    })\n    .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpkg9djeut.rs:16:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            'a' ..= 'z' | 'A' ..= 'Z' => {\n                match c {\n \
    \                   'a' ..= 'A' => {\n                        'A' ..= 'a' \n \
    \                   }\n                    'b' ..= 'B' => {\n                \
    \        'B' ..= 'b' \n                    }\n                    _ => c\n   \
    \             }\n            }\n            _ => c\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpeshtamx1.rs:16:26\n\
    \   |\n9  | /                 match c {\n10 | |                     'a' ..= 'A'\
    \ => {\n11 | |                         'A' ..= 'a' \n   | |                  \
    \       ----------- this is found to be of type `RangeInclusive<char>`\n12 | |\
    \                     }\n13 | |                     'b' ..= 'B' => {\n14 | | \
    \                        'B' ..= 'b' \n   | |                         -----------\
    \ this is found to be of type `RangeInclusive<char>`\n15 | |                 \
    \    }\n16 | |                     _ => c\n   | |                          ^ expected\
    \ struct `RangeInclusive`, found `char`\n17 | |                 }\n   | |_________________-\
    \ `match` arms have incompatible types\n   |\n   = note: expected struct `RangeInclusive<char>`\n\
    \                found type `char`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            'A' ..= 'Z' | 'a' ..= 'z' => c\n        })\n        .chain(string.chars().map(|c|\
    \ match c {\n            'a' ..= 'z' | 'A' ..= 'Z' => c.to_string()\n        }))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<[closure@/tmp/tmppxx5ar2x.rs:10:35:\
    \ 12:10] as FnOnce<(char,)>>::Output == char`\n   --> /tmp/tmppxx5ar2x.rs:10:16\n\
    \    |\n10  |           .chain(string.chars().map(|c| match c {\n    |  __________-----_^\n\
    \    | |          |\n    | |          required by a bound introduced by this call\n\
    11  | |             'a' ..= 'z' | 'A' ..= 'Z' => c.to_string()\n12  | |      \
    \   }))\n    | |__________^ expected `char`, found struct `String`\n    |\n  \
    \  = note: required because of the requirements on the impl of `Iterator` for\
    \ `Map<Chars<'_>, [closure@/tmp/tmppxx5ar2x.rs:10:35: 12:10]>`\nnote: required\
    \ by a bound in `std::iter::Iterator::chain`\n\nerror[E0599]: the method `collect`\
    \ exists for struct `std::iter::Chain<Map<Chars<'_>, [closure@/tmp/tmppxx5ar2x.rs:7:14:\
    \ 9:10]>, Map<Chars<'_>, [closure@/tmp/tmppxx5ar2x.rs:10:35: 12:10]>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmppxx5ar2x.rs:13:10\n   |\n13 |\
    \           .collect()\n   |            ^^^^^^^ method cannot be called on `std::iter::Chain<Map<Chars<'_>,\
    \ [closure@/tmp/tmppxx5ar2x.rs:7:14: 9:10]>, Map<Chars<'_>, [closure@/tmp/tmppxx5ar2x.rs:10:35:\
    \ 12:10]>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `std::iter::Chain<Map<Chars<'_>, [closure@/tmp/tmppxx5ar2x.rs:7:14:\
    \ 9:10]>, Map<Chars<'_>, [closure@/tmp/tmppxx5ar2x.rs:10:35: 12:10]>>: Iterator`\n\
    \           which is required by `&mut std::iter::Chain<Map<Chars<'_>, [closure@/tmp/tmppxx5ar2x.rs:7:14:\
    \ 9:10]>, Map<Chars<'_>, [closure@/tmp/tmppxx5ar2x.rs:10:35: 12:10]>>: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    match string.len() {\n        0 => \"\",\n        1\
    \ => string,\n        _ => {\n            let mut s = string;\n            for\
    \ (i, c) in s.chars().enumerate() {\n                if i > 0 && c >= 'a' && c\
    \ <= 'z' {\n                    s.swap(0, i);\n                }\n           \
    \     if i > 0 && c >= 'A' && c <= 'Z' {\n                    s.swap(0, i);\n\
    \                }\n            }\n            s\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7a0o91nb.rs:6:14\n  |\n4 |\
    \ fn flip_case(string: String) -> String {\n  |                              \
    \   ------ expected `String` because of return type\n5 |     match string.len()\
    \ {\n6 |         0 => \"\",\n  |              ^^- help: try using a conversion\
    \ method: `.to_string()`\n  |              |\n  |              expected struct\
    \ `String`, found `&str`\n\nerror[E0599]: no method named `swap` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmp7a0o91nb.rs:12:23\n   |\n12 | \
    \                    s.swap(0, i);\n   |                       ^^^^ method not\
    \ found in `String`\n\nerror[E0599]: no method named `swap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp7a0o91nb.rs:15:23\n   |\n15 |          \
    \           s.swap(0, i);\n   |                       ^^^^ method not found in\
    \ `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'A' | 'a'\
    \ => match c {\n            'a' => c.to_ascii_uppercase().to_string(),\n     \
    \       _ => c,\n        },\n        'B' | 'b' => match c {\n            'b' =>\
    \ c.to_ascii_lowercase().to_string(),\n            _ => c,\n        },\n     \
    \   _ => c.to_string(),\n    })\n    .collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmp_wu_u0el.rs:8:18\n\
    \  |\n6 |           'A' | 'a' => match c {\n  |  ______________________-\n7 |\
    \ |             'a' => c.to_ascii_uppercase().to_string(),\n  | |            \
    \        ---------------------------------- this is found to be of type `String`\n\
    8 | |             _ => c,\n  | |                  ^- help: try using a conversion\
    \ method: `.to_string()`\n  | |                  |\n  | |                  expected\
    \ struct `String`, found `char`\n9 | |         },\n  | |_________- `match` arms\
    \ have incompatible types\n\nerror[E0308]: `match` arms have incompatible types\n\
    \  --> /tmp/tmp_wu_u0el.rs:12:18\n   |\n10 |           'B' | 'b' => match c {\n\
    \   |  ______________________-\n11 | |             'b' => c.to_ascii_lowercase().to_string(),\n\
    \   | |                    ---------------------------------- this is found to\
    \ be of type `String`\n12 | |             _ => c,\n   | |                  ^-\
    \ help: try using a conversion method: `.to_string()`\n   | |                \
    \  |\n   | |                  expected struct `String`, found `char`\n13 | | \
    \        },\n   | |_________- `match` arms have incompatible types\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().fold(String::new(), |mut s, c| {\n \
    \       match c.to_ascii_lowercase() {\n            Some(c) => s.push_str(&c.to_ascii_uppercase()),\n\
    \            None => s.push_str(&c.to_ascii_lowercase()),\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8gg9yy0o.rs:7:13\n  |\n6 |\
    \         match c.to_ascii_lowercase() {\n  |               ----------------------\
    \ this expression has type `char`\n7 |             Some(c) => s.push_str(&c.to_ascii_uppercase()),\n\
    \  |             ^^^^^^^ expected `char`, found enum `Option`\n  |\n  = note:\
    \ expected type `char`\n             found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp8gg9yy0o.rs:8:13\n  |\n6 |         match c.to_ascii_lowercase()\
    \ {\n  |               ---------------------- this expression has type `char`\n\
    7 |             Some(c) => s.push_str(&c.to_ascii_uppercase()),\n8 |         \
    \    None => s.push_str(&c.to_ascii_lowercase()),\n  |             ^^^^ expected\
    \ `char`, found enum `Option`\n  |\n  = note: expected type `char`\n         \
    \    found enum `Option<_>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8gg9yy0o.rs:7:24\n\
    \  |\n7 |             Some(c) => s.push_str(&c.to_ascii_uppercase()),\n  |   \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `()`\n  |\nnote: method `push_str` modifies its receiver in-place\n -->\
    \ /tmp/tmp8gg9yy0o.rs:7:26\n  |\n7 |             Some(c) => s.push_str(&c.to_ascii_uppercase()),\n\
    \  |                        - ^^^^^^^^ this call modifies `s` in-place\n  |  \
    \                      |\n  |                        you probably want to use\
    \ this value after calling the method...\n  = note: ...instead of the `()` output\
    \ of method `push_str`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8gg9yy0o.rs:8:32\n\
    \  |\n8 |             None => s.push_str(&c.to_ascii_lowercase()),\n  |      \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n\
    \  |\n  = note: expected reference `&str`\n             found reference `&char`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      c @ 'a' .. 'z' => (c as char).to_uppercase() as char,\n            c @\
    \ 'A' .. 'Z' => (c as char).to_lowercase() as char,\n            _ => c,\n   \
    \     })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmphczdnfek.rs:7:17\n\
    \  |\n7 |             c @ 'a' .. 'z' => (c as char).to_uppercase() as char,\n\
    \  |                 ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmphczdnfek.rs:8:17\n  |\n8 |             c @ 'A' .. 'Z' => (c as char).to_lowercase()\
    \ as char,\n  |                 ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0605]: non-primitive cast: `ToUppercase` as `char`\n\
    \ --> /tmp/tmphczdnfek.rs:7:31\n  |\n7 |             c @ 'a' .. 'z' => (c as char).to_uppercase()\
    \ as char,\n  |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror[E0605]: non-primitive cast: `ToLowercase`\
    \ as `char`\n --> /tmp/tmphczdnfek.rs:8:31\n  |\n8 |             c @ 'A' .. 'Z'\
    \ => (c as char).to_lowercase() as char,\n  |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0605, E0658.\nFor more information\
    \ about an error, try `rustc --explain E0605`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut output = String::new();\n\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            output.push((char::to_uppercase(c).unwrap()).into());\n\
    \        } else {\n            output.push((char::to_lowercase(c).unwrap()).into());\n\
    \        }\n    }\n\n    output\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for struct `ToUppercase` in\
    \ the current scope\n --> /tmp/tmpj0x56u12.rs:9:48\n  |\n9 |             output.push((char::to_uppercase(c).unwrap()).into());\n\
    \  |                                                ^^^^^^ method not found in\
    \ `ToUppercase`\n\nerror[E0599]: no method named `unwrap` found for struct `ToLowercase`\
    \ in the current scope\n  --> /tmp/tmpj0x56u12.rs:11:48\n   |\n11 |          \
    \   output.push((char::to_lowercase(c).unwrap()).into());\n   |              \
    \                                  ^^^^^^ method not found in `ToLowercase`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() then c.to_uppercase()\
    \ else c.to_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `then`\n --> /tmp/tmpqnhsbpkm.rs:5:48\n  |\n\
    5 |     string.chars().map(|c| if c.is_lowercase() then c.to_uppercase() else\
    \ c.to_lowercase()).collect()\n  |                            --             \
    \     ^^^^ expected `{`\n  |                            |\n  |               \
    \             this `if` expression has a condition, but no block\n  |\nhelp: try\
    \ placing this code inside a block\n  |\n5 |     string.chars().map(|c| if c.is_lowercase()\
    \ { then } c.to_uppercase() else c.to_lowercase()).collect()\n  |            \
    \                                    +      +\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .filter(|c| c.is_ascii_lowercase())\n\
    \        .map(|c| c.to_ascii_lowercase().to_uppercase())\n        .collect::<String>()\n\
    \        .join(\"\")\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `ToUppercase`\n    --> /tmp/tmp9ux57b4l.rs:9:10\n    \
    \ |\n9    |         .collect::<String>()\n     |          ^^^^^^^ value of type\
    \ `String` cannot be built from `std::iter::Iterator<Item=ToUppercase>`\n    \
    \ |\n     = help: the trait `FromIterator<ToUppercase>` is not implemented for\
    \ `String`\n     = help: the following other types implement trait `FromIterator<A>`:\n\
    \               <String as FromIterator<&'a char>>\n               <String as\
    \ FromIterator<&'a str>>\n               <String as FromIterator<Box<str>>>\n\
    \               <String as FromIterator<Cow<'a, str>>>\n               <String\
    \ as FromIterator<String>>\n               <String as FromIterator<char>>\nnote:\
    \ required by a bound in `collect`\n\nerror[E0599]: no method named `join` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmp9ux57b4l.rs:10:10\n\
    \   |\n10 |         .join(\"\")\n   |          ^^^^ method not found in `String`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.to_lowercase().to_uppercase()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmp1diqlcjn.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut lowercase = string.clone();\n    let mut uppercase\
    \ = string.clone();\n    let mut ascii_lowercase = string.clone();\n    let mut\
    \ ascii_uppercase = string.clone();\n\n    for c in lowercase.chars() {\n    \
    \    if c.is_lowercase() {\n            uppercase.set_char(c, c.to_uppercase());\n\
    \        }\n        if c.is_uppercase() {\n            lowercase.set_char(c, c.to_lowercase());\n\
    \        }\n    }\n    for c in uppercase.chars() {\n        if c.is_lowercase()\
    \ {\n            ascii_lowercase.set_char(c, c.to_ascii_lowercase());\n      \
    \  }\n        if c.is_uppercase() {\n            ascii_uppercase.set_char(c, c.to_ascii_uppercase());\n\
    \        }\n    }\n    uppercase + ascii_uppercase + lowercase + ascii_lowercase\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `set_char` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpw6goj3mx.rs:12:23\n   |\n12 |             uppercase.set_char(c,\
    \ c.to_uppercase());\n   |                       ^^^^^^^^ method not found in\
    \ `String`\n\nerror[E0599]: no method named `set_char` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpw6goj3mx.rs:15:23\n   |\n15 |          \
    \   lowercase.set_char(c, c.to_lowercase());\n   |                       ^^^^^^^^\
    \ method not found in `String`\n\nerror[E0599]: no method named `set_char` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpw6goj3mx.rs:20:29\n\
    \   |\n20 |             ascii_lowercase.set_char(c, c.to_ascii_lowercase());\n\
    \   |                             ^^^^^^^^ method not found in `String`\n\nerror[E0599]:\
    \ no method named `set_char` found for struct `String` in the current scope\n\
    \  --> /tmp/tmpw6goj3mx.rs:23:29\n   |\n23 |             ascii_uppercase.set_char(c,\
    \ c.to_ascii_uppercase());\n   |                             ^^^^^^^^ method not\
    \ found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw6goj3mx.rs:26:17\n\
    \   |\n26 |     uppercase + ascii_uppercase + lowercase + ascii_lowercase\n  \
    \ |                 ^^^^^^^^^^^^^^^\n   |                 |\n   |            \
    \     expected `&str`, found struct `String`\n   |                 help: consider\
    \ borrowing here: `&ascii_uppercase`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpw6goj3mx.rs:26:35\n   |\n26 |     uppercase + ascii_uppercase + lowercase\
    \ + ascii_lowercase\n   |                                   ^^^^^^^^^\n   |  \
    \                                 |\n   |                                   expected\
    \ `&str`, found struct `String`\n   |                                   help:\
    \ consider borrowing here: `&lowercase`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpw6goj3mx.rs:26:47\n   |\n26 |     uppercase + ascii_uppercase + lowercase\
    \ + ascii_lowercase\n   |                                               ^^^^^^^^^^^^^^^\n\
    \   |                                               |\n   |                  \
    \                         "
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.to_lowercase().to_uppercase()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmp00401ok6.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a' .. 'z'\
    \ => c.to_uppercase(),\n        _ => c.to_lowercase(),\n    }).collect()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmph2a5m7qh.rs:6:9\n\
    \  |\n6 |         'a' .. 'z' => c.to_uppercase(),\n  |         ^^^^^^^^^^\n  |\n\
    \  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for\
    \ more information\n\nerror[E0308]: `match` arms have incompatible types\n -->\
    \ /tmp/tmph2a5m7qh.rs:7:14\n  |\n5 |       string.chars().map(|c| match c {\n\
    \  |  ____________________________-\n6 | |         'a' .. 'z' => c.to_uppercase(),\n\
    \  | |                       ---------------- this is found to be of type `ToUppercase`\n\
    7 | |         _ => c.to_lowercase(),\n  | |              ^^^^^^^^^^^^^^^^ expected\
    \ struct `ToUppercase`, found struct `ToLowercase`\n8 | |     }).collect()\n \
    \ | |_____- `match` arms have incompatible types\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0658.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      'a' .. 'z' => {\n                c as u8 + 'A' as u8\n            }\n \
    \           'A' .. 'Z' => {\n                c as u8 + 'a' as u8\n           \
    \ }\n            '*' => c\n        })\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpqs65kxpu.rs:7:13\n\
    \  |\n7 |             'a' .. 'z' => {\n  |             ^^^^^^^^^^\n  |\n  = note:\
    \ see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n\
    \nerror[E0658]: exclusive range pattern syntax is experimental\n  --> /tmp/tmpqs65kxpu.rs:10:13\n\
    \   |\n10 |             'A' .. 'Z' => {\n   |             ^^^^^^^^^^\n   |\n \
    \  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for\
    \ more information\n\nerror[E0308]: `match` arms have incompatible types\n  -->\
    \ /tmp/tmpqs65kxpu.rs:13:20\n   |\n6  |           .map(|c| match c {\n   |  __________________-\n\
    7  | |             'a' .. 'z' => {\n8  | |                 c as u8 + 'A' as u8\n\
    \   | |                 ------------------- this is found to be of type `u8`\n\
    9  | |             }\n10 | |             'A' .. 'Z' => {\n11 | |             \
    \    c as u8 + 'a' as u8\n   | |                 ------------------- this is found\
    \ to be of type `u8`\n12 | |             }\n13 | |             '*' => c\n   |\
    \ |                    ^ expected `u8`, found `char`\n14 | |         })\n   |\
    \ |_________- `match` arms have incompatible types\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0658.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            'a' .. 'z' => c as u8 ^ 0x20,\n            'A' .. 'Z' => c as\
    \ u8 ^ 0x21,\n            _ => c,\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmp6806hfeb.rs:8:13\n\
    \  |\n8 |             'a' .. 'z' => c as u8 ^ 0x20,\n  |             ^^^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmp6806hfeb.rs:9:13\n  |\n9 |             'A' .. 'Z' => c as u8 ^ 0x21,\n\
    \  |             ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: `match` arms have incompatible types\n\
    \  --> /tmp/tmp6806hfeb.rs:10:18\n   |\n7  |           .map(|c| match c {\n  \
    \ |  __________________-\n8  | |             'a' .. 'z' => c as u8 ^ 0x20,\n \
    \  | |                           -------------- this is found to be of type `u8`\n\
    9  | |             'A' .. 'Z' => c as u8 ^ 0x21,\n   | |                     \
    \      -------------- this is found to be of type `u8`\n10 | |             _ =>\
    \ c,\n   | |                  ^ expected `u8`, found `char`\n11 | |         })\n\
    \   | |_________- `match` arms have incompatible types\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0658.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    match string.chars() {\n        chars => chars.iter().map(|c|\
    \ match c {\n            c if c.is_uppercase() => c.to_lowercase(),\n        \
    \    c => c.to_uppercase(),\n        }).collect(),\n    }\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `iter` found for struct `Chars` in the current\
    \ scope\n --> /tmp/tmpb_tohoah.rs:6:24\n  |\n6 |         chars => chars.iter().map(|c|\
    \ match c {\n  |                        ^^^^ private field, not a method\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            'a' .. 'z' => c as u8 - 32 as u8,\n            'A' .. 'Z' =>\
    \ c as u8 + 32 as u8,\n            _ => c,\n        })\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpzoa3qd6a.rs:8:13\n\
    \  |\n8 |             'a' .. 'z' => c as u8 - 32 as u8,\n  |             ^^^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmpzoa3qd6a.rs:9:13\n  |\n9 |             'A' .. 'Z' => c as u8 + 32\
    \ as u8,\n  |             ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: `match` arms have incompatible types\n\
    \  --> /tmp/tmpzoa3qd6a.rs:10:18\n   |\n7  |           .map(|c| match c {\n  \
    \ |  __________________-\n8  | |             'a' .. 'z' => c as u8 - 32 as u8,\n\
    \   | |                           ------------------ this is found to be of type\
    \ `u8`\n9  | |             'A' .. 'Z' => c as u8 + 32 as u8,\n   | |         \
    \                  ------------------ this is found to be of type `u8`\n10 | |\
    \             _ => c,\n   | |                  ^ expected `u8`, found `char`\n\
    11 | |         })\n   | |_________- `match` arms have incompatible types\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0658.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| c.to_ascii_lowercase().to_string())\n\
    \        .chain(string.chars().map(|c| c.to_ascii_uppercase().to_string()))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmptixquob7.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut buffer = String::new();\n    for ch in string.chars()\
    \ {\n        match ch {\n            'a' => buffer.push_str(\"A\"),\n        \
    \    'b' => buffer.push_str(\"B\"),\n            'c' => buffer.push_str(\"C\"\
    ),\n            'd' => buffer.push_str(\"D\"),\n            'e' => buffer.push_str(\"\
    E\"),\n            'f' => buffer.push_str(\"F\"),\n            'g' => buffer.push_str(\"\
    G\"),\n            'h' => buffer.push_str(\"H\"),\n            'i' => buffer.push_str(\"\
    I\"),\n            'j' => buffer.push_str(\"J\"),\n            'k' => buffer.push_str(\"\
    K\"),\n            'l' => buffer.push_str(\"L\"),\n            'm' => buffer.push_str(\"\
    M\"),\n            'n' => buffer.push_str(\"N\"),\n            'o' => buffer.push_str(\"\
    O\"),\n            'p' => buffer.push_str(\"P\"),\n            'q' => buffer.push_str(\"\
    Q\"),\n            'r' => buffer.push_str(\"R\"),\n            's' => buffer.push_str(\"\
    S\"),\n            't' => buffer.push_str(\"T\"),\n            'u' => buffer.push_str(\"\
    U\"),\n            'v' => buffer.push_str(\"V\"),\n            'w' => buffer.push_str(\"\
    W\"),\n            'x' => buffer.push_str(\"X\"),\n            'y' => buffer.push_str(\"\
    Y\"),\n            'z' => buffer.push_str(\"Z\"),\n            _ => buffer\n \
    \               .push_str(\n                    char::to_lowercase(&ch)\n    \
    \                    .chain(char::to_uppercase(&ch))\n                       \
    \ .collect::<String>()\n                ),\n        }\n    }\n    buffer\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuxv_psa_.rs:36:40\n   |\n\
    36 |                     char::to_lowercase(&ch)\n   |                       \
    \                 ^^^ expected `char`, found `&char`\n   |\nhelp: consider removing\
    \ the borrow\n   |\n36 -                     char::to_lowercase(&ch)\n36 +   \
    \                  char::to_lowercase(ch)\n   | \n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuxv_psa_.rs:37:51\n   |\n37 |                         .chain(char::to_uppercase(&ch))\n\
    \   |                                                   ^^^ expected `char`, found\
    \ `&char`\n   |\nhelp: consider removing the borrow\n   |\n37 -              \
    \           .chain(char::to_uppercase(&ch))\n37 +                         .chain(char::to_uppercase(ch))\n\
    \   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuxv_psa_.rs:36:21\n  \
    \ |\n36 | /                     char::to_lowercase(&ch)\n37 | |              \
    \           .chain(char::to_uppercase(&ch))\n38 | |                         .collect::<String>()\n\
    \   | |____________________________________________^ expected `&str`, found struct\
    \ `String`\n   |\nhelp: consider borrowing here\n   |\n36 ~                  \
    \   &char::to_lowercase(&ch)\n37 +                         .chain(char::to_uppercase(&ch))\n\
    38 +                         .collect::<String>()\n   |\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      c if c.is_uppercase() => c.to_lowercase(),\n            _ => c,\n     \
    \   })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n --> /tmp/tmp9ki5r_sr.rs:8:18\n\
    \  |\n6 |           .map(|c| match c {\n  |  __________________-\n7 | |      \
    \       c if c.is_uppercase() => c.to_lowercase(),\n  | |                    \
    \                  ---------------- this is found to be of type `ToLowercase`\n\
    8 | |             _ => c,\n  | |                  ^ expected struct `ToLowercase`,\
    \ found `char`\n9 | |         })\n  | |_________- `match` arms have incompatible\
    \ types\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut buffer = String::new();\n    for ch in string.chars()\
    \ {\n        if ch.is_lowercase() {\n            buffer.push(ch.to_uppercase());\n\
    \        } else {\n            buffer.push(ch.to_lowercase());\n        }\n  \
    \  }\n    buffer\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu2knzgqw.rs:8:25\n  |\n8 |\
    \             buffer.push(ch.to_uppercase());\n  |                         ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `ToUppercase`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpu2knzgqw.rs:10:25\n   |\n10 |             buffer.push(ch.to_lowercase());\n\
    \   |                         ^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut s = string.to_string();\n    for (i, c) in\
    \ s.chars().enumerate() {\n        *s = c.to_uppercase() + (*s as char) + c.to_lowercase();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `char` to `ToUppercase`\n --> /tmp/tmpnhr0275b.rs:7:31\n\
    \  |\n7 |         *s = c.to_uppercase() + (*s as char) + c.to_lowercase();\n \
    \ |              ---------------- ^ ------------ char\n  |              |\n  |\
    \              ToUppercase\n\nerror[E0277]: the size for values of type `str`\
    \ cannot be known at compilation time\n --> /tmp/tmpnhr0275b.rs:7:9\n  |\n7 |\
    \         *s = c.to_uppercase() + (*s as char) + c.to_lowercase();\n  |      \
    \   ^^ doesn't have a size known at compile-time\n  |\n  = help: the trait `Sized`\
    \ is not implemented for `str`\n  = note: the left-hand-side of an assignment\
    \ must have a statically known size\n\nerror[E0605]: non-primitive cast: `str`\
    \ as `char`\n --> /tmp/tmpnhr0275b.rs:7:33\n  |\n7 |         *s = c.to_uppercase()\
    \ + (*s as char) + c.to_lowercase();\n  |                                 ^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0369, E0605.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .chain(string.chars().map(|c|\
    \ match c {\n            c if c.is_ascii() => (char::to_ascii_uppercase(c) as\
    \ char).to_string(),\n            _ => (char::to_ascii_lowercase(c) as char).to_string(),\n\
    \        }))\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqt1nxd4f.rs:7:60\n  |\n7 |\
    \             c if c.is_ascii() => (char::to_ascii_uppercase(c) as char).to_string(),\n\
    \  |                                                            ^\n  |       \
    \                                                     |\n  |                 \
    \                                           expected `&char`, found `char`\n \
    \ |                                                            help: consider\
    \ borrowing here: `&c`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpqt1nxd4f.rs:8:44\n\
    \  |\n8 |             _ => (char::to_ascii_lowercase(c) as char).to_string(),\n\
    \  |                                            ^\n  |                       \
    \                     |\n  |                                            expected\
    \ `&char`, found `char`\n  |                                            help:\
    \ consider borrowing here: `&c`\n\nerror[E0271]: type mismatch resolving `<[closure@/tmp/tmpqt1nxd4f.rs:6:35:\
    \ 9:10] as FnOnce<(char,)>>::Output == char`\n   --> /tmp/tmpqt1nxd4f.rs:6:16\n\
    \    |\n6   |           .chain(string.chars().map(|c| match c {\n    |  __________-----_^\n\
    \    | |          |\n    | |          required by a bound introduced by this call\n\
    7   | |             c if c.is_ascii() => (char::to_ascii_uppercase(c) as char).to_string(),\n\
    8   | |             _ => (char::to_ascii_lowercase(c) as char).to_string(),\n\
    9   | |         }))\n    | |__________^ expected `char`, found struct `String`\n\
    \    |\n    = note: required because of the requirements on the impl of `Iterator`\
    \ for `Map<Chars<'_>, [closure@/tmp/tmpqt1nxd4f.rs:6:35: 9:10]>`\nnote: required\
    \ by a bound in `std::iter::Iterator::chain`\n\nerror[E0599]: the method `collect`\
    \ exists for struct `std::iter::Chain<Chars<'_>, Map<Chars<'_>, [closure@/tmp/tmpqt1nxd4f.rs:6:35:\
    \ 9:10]>>`, but its trait bounds were not satisfied\n  --> /tmp/tmpqt1nxd4f.rs:10:10\n\
    \   |\n10 |           .collect()\n   |            ^^^^^^^ method cannot be called\
    \ on `std::iter::Chain<Chars<'_>, Map<Chars<'_>, [closure@/tmp/tmpqt1nxd4f.rs:6:35:\
    \ 9:10]>>` due to unsatisfied trait"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a' => (c.to_ascii_lowercase(),\
    \ c.to_ascii_uppercase()),\n        'A' => (c.to_ascii_uppercase(), c.to_ascii_lowercase()),\n\
    \        _ => (c, c),\n    })\n    .collect::<String>()\n}\n\nfn main() {\n  \
    \  let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `(char, char)`\n    --> /tmp/tmpsski2iew.rs:10:6\n   \
    \  |\n10   |     .collect::<String>()\n     |      ^^^^^^^ value of type `String`\
    \ cannot be built from `std::iter::Iterator<Item=(char, char)>`\n     |\n    \
    \ = help: the trait `FromIterator<(char, char)>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().chain().map(|c| c.to_ascii_lowercase()).collect()\n\
    \        .iter()\n        .map(|c| c.to_ascii_uppercase())\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpm7e_9lo1.rs:5:20\n    |\n5   |     string.chars().chain().map(|c|\
    \ c.to_ascii_lowercase()).collect()\n    |                    ^^^^^- supplied\
    \ 0 arguments\n    |                    |\n    |                    expected 1\
    \ argument\n    |\nnote: associated function defined here\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      'a' => (c as u32 + 'A' as u32).to_string(),\n            'A' => (c as u32\
    \ + 'a' as u32).to_string(),\n            _ => c,\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpnlv4wydm.rs:9:18\n\
    \   |\n6  |           .map(|c| match c {\n   |  __________________-\n7  | |  \
    \           'a' => (c as u32 + 'A' as u32).to_string(),\n   | |              \
    \      ----------------------------------- this is found to be of type `String`\n\
    8  | |             'A' => (c as u32 + 'a' as u32).to_string(),\n   | |       \
    \             ----------------------------------- this is found to be of type\
    \ `String`\n9  | |             _ => c,\n   | |                  ^- help: try using\
    \ a conversion method: `.to_string()`\n   | |                  |\n   | |     \
    \             expected struct `String`, found `char`\n10 | |         })\n   |\
    \ |_________- `match` arms have incompatible types\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp2yy7p4fd.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_upper()\
    \ => c.to_ascii_lowercase(),\n        c if c.is_lower() => c.to_ascii_uppercase(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n --> /tmp/tmpwwr32xb7.rs:6:16\n  |\n6 |         c if c.is_upper() =>\
    \ c.to_ascii_lowercase(),\n  |                ^^^^^^^^ help: there is an associated\
    \ function with a similar name: `is_uppercase`\n\nerror[E0599]: no method named\
    \ `is_lower` found for type `char` in the current scope\n --> /tmp/tmpwwr32xb7.rs:7:16\n\
    \  |\n7 |         c if c.is_lower() => c.to_ascii_uppercase(),\n  |          \
    \      ^^^^^^^^ help: there is an associated function with a similar name: `is_lowercase`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .filter(|c| c >= 'A' && c <=\
    \ 'Z')\n        .map(|c| c + ('A' - 'a'))\n        .collect::<String>()\n}\n\n\
    fn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7f8nxhj.rs:6:26\n  |\n6 |\
    \         .filter(|c| c >= 'A' && c <= 'Z')\n  |                          ^^^\n\
    \  |                          |\n  |                          expected `&char`,\
    \ found `char`\n  |                          help: consider borrowing here: `&'A'`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpc7f8nxhj.rs:6:38\n  |\n6 |    \
    \     .filter(|c| c >= 'A' && c <= 'Z')\n  |                                 \
    \     ^^^\n  |                                      |\n  |                   \
    \                   expected `&char`, found `char`\n  |                      \
    \                help: consider borrowing here: `&'Z'`\n\nerror[E0369]: cannot\
    \ subtract `char` from `char`\n --> /tmp/tmpc7f8nxhj.rs:7:27\n  |\n7 |       \
    \  .map(|c| c + ('A' - 'a'))\n  |                       --- ^ --- char\n  |  \
    \                     |\n  |                       char\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    if string.len() == 0 {\n        return string\n   \
    \ }\n    let mut result = String::with_capacity(string.len());\n    let mut current_char\
    \ = string.chars();\n    loop {\n        if current_char.is_empty() {\n      \
    \      return result;\n        }\n        let next_char = current_char.next().unwrap();\n\
    \        if next_char == char::MINUS_CHAR {\n            result.push('-');\n \
    \           current_char = current_char.clone();\n        } else {\n         \
    \   result.push(next_char.to_uppercase());\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_empty` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmphbdvko80.rs:11:25\n   |\n11 |         if current_char.is_empty()\
    \ {\n   |                         ^^^^^^^^ method not found in `Chars<'_>`\n\n\
    error[E0599]: no associated item named `MINUS_CHAR` found for type `char` in the\
    \ current scope\n  --> /tmp/tmphbdvko80.rs:15:31\n   |\n15 |         if next_char\
    \ == char::MINUS_CHAR {\n   |                               ^^^^^^^^^^ associated\
    \ item not found in `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphbdvko80.rs:19:25\n\
    \   |\n19 |             result.push(next_char.to_uppercase());\n   |         \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `ToUppercase`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      c => match c {\n                'a' => c.to_uppercase(),\n            \
    \    'A' => c.to_lowercase(),\n                _ => c,\n            },\n     \
    \   })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpiw2nh4hb.rs:9:24\n\
    \   |\n7  |               c => match c {\n   |  __________________-\n8  | |  \
    \               'a' => c.to_uppercase(),\n   | |                        ----------------\
    \ this is found to be of type `ToUppercase`\n9  | |                 'A' => c.to_lowercase(),\n\
    \   | |                        ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n10 | |                 _ => c,\n11 | |         \
    \    },\n   | |_____________- `match` arms have incompatible types\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| if c.is_lowercase()\
    \ { c.to_uppercase() } else { c.to_lowercase() })\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpsrmr7ctw.rs:6:66\n\
    \  |\n6 |         .map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase()\
    \ })\n  |                                        ----------------          ^^^^^^^^^^^^^^^^\
    \ expected struct `ToUppercase`, found struct `ToLowercase`\n  |             \
    \                           |\n  |                                        expected\
    \ because of this\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      'a' .. 'z' => c.to_uppercase(),\n            'A' .. 'Z' => c.to_lowercase(),\n\
    \            _ => c,\n        })\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpfw4g7gva.rs:7:13\n\
    \  |\n7 |             'a' .. 'z' => c.to_uppercase(),\n  |             ^^^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmpfw4g7gva.rs:8:13\n  |\n8 |             'A' .. 'Z' => c.to_lowercase(),\n\
    \  |             ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: `match` arms have incompatible types\n\
    \  --> /tmp/tmpfw4g7gva.rs:8:27\n   |\n6  |           .map(|c| match c {\n   |\
    \  __________________-\n7  | |             'a' .. 'z' => c.to_uppercase(),\n \
    \  | |                           ---------------- this is found to be of type\
    \ `ToUppercase`\n8  | |             'A' .. 'Z' => c.to_lowercase(),\n   | |  \
    \                         ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`, found\
    \ struct `ToLowercase`\n9  | |             _ => c,\n10 | |         })\n   | |_________-\
    \ `match` arms have incompatible types\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0658.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            c @ b'A' .. b'Z' => b'a' .. b'z' + c\n            c @ b'a' ..\
    \ b'z' => b'A' .. b'Z' + c\n            c => c\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `c`\n --> /tmp/tmp4v2woraf.rs:9:13\n  |\n8 |             c @ b'A' .. b'Z'\
    \ => b'a' .. b'z' + c\n  |                              --                 - expected\
    \ one of 8 possible tokens\n  |                              |\n  |          \
    \                    while parsing the `match` arm starting here\n9 |        \
    \     c @ b'a' .. b'z' => b'A' .. b'Z' + c\n  |             ^ unexpected token\n\
    \nerror[E0277]: a value of type `String` cannot be built from an iterator over\
    \ elements of type `()`\n    --> /tmp/tmp4v2woraf.rs:12:10\n     |\n12   |   \
    \      .collect()\n     |          ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item=()>`\n     |\n     = help: the trait `FromIterator<()>`\
    \ is not implemented for `String`\n     = help: the following other types implement\
    \ trait `FromIterator<A>`:\n               <String as FromIterator<&'a char>>\n\
    \               <String as FromIterator<&'a str>>\n               <String as FromIterator<Box<str>>>\n\
    \               <String as FromIterator<Cow<'a, str>>>\n               <String\
    \ as FromIterator<String>>\n               <String as FromIterator<char>>\nnote:\
    \ required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            b'a' | b'z' => c.to_ascii_lowercase(),\n            b'A' | b'Z'\
    \ => c.to_ascii_uppercase(),\n            _ => c,\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfcdv4z27.rs:8:13\n  |\n7 |\
    \         .map(|c| match c {\n  |                        - this expression has\
    \ type `char`\n8 |             b'a' | b'z' => c.to_ascii_lowercase(),\n  |   \
    \          ^^^^ expected `char`, found `u8`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpfcdv4z27.rs:8:20\n  |\n7 |         .map(|c| match c {\n  |     \
    \                   - this expression has type `char`\n8 |             b'a' |\
    \ b'z' => c.to_ascii_lowercase(),\n  |                    ^^^^ expected `char`,\
    \ found `u8`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfcdv4z27.rs:9:13\n\
    \  |\n7 |         .map(|c| match c {\n  |                        - this expression\
    \ has type `char`\n8 |             b'a' | b'z' => c.to_ascii_lowercase(),\n9 |\
    \             b'A' | b'Z' => c.to_ascii_uppercase(),\n  |             ^^^^ expected\
    \ `char`, found `u8`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfcdv4z27.rs:9:20\n\
    \  |\n7 |         .map(|c| match c {\n  |                        - this expression\
    \ has type `char`\n8 |             b'a' | b'z' => c.to_ascii_lowercase(),\n9 |\
    \             b'A' | b'Z' => c.to_ascii_uppercase(),\n  |                    ^^^^\
    \ expected `char`, found `u8`\n\nerror: aborting due to 4 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    // TODO: Implement this function.\n    fmt.println!(\"\
    Implement me\");\n    string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `(`, `.`, `::`, `;`, `?`, `}`, or an operator, found\
    \ `!`\n --> /tmp/tmpxddi5iva.rs:6:16\n  |\n6 |     fmt.println!(\"Implement me\"\
    );\n  |                ^ expected one of 7 possible tokens\n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().chain(\n        char::from_digit(|c|\
    \ char::from(c).to_uppercase().into()),\n    )\n    .chain(char::from_digit(|c|\
    \ char::from(c).to_lowercase().into()))\n    .collect()\n}\n\nfn main() {\n  \
    \  let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmp0a12cebu.rs:6:9\n    |\n6   |         char::from_digit(|c| char::from(c).to_uppercase().into()),\n\
    \    |         ^^^^^^^^^^^^^^^^ --------------------------------------- supplied\
    \ 1 argument\n    |         |\n    |         expected 2 arguments\n    |\nnote:\
    \ associated function defined here\n\nerror[E0061]: this function takes 2 arguments\
    \ but 1 argument was supplied\n   --> /tmp/tmp0a12cebu.rs:8:12\n    |\n8   | \
    \    .chain(char::from_digit(|c| char::from(c).to_lowercase().into()))\n    |\
    \            ^^^^^^^^^^^^^^^^ --------------------------------------- supplied\
    \ 1 argument\n    |            |\n    |            expected 2 arguments\n    |\n\
    note: associated function defined here\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      'a' => { 'A' }\n            'A' => { 'a' }\n            'b' => { 'B' }\n\
    \            'B' => { 'b' }\n            'c' => { 'C' }\n            'C' => {\
    \ 'c' }\n            _ => { *c }\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpgjso4syb.rs:13:20\n\
    \   |\n13 |             _ => { *c }\n   |                    ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      'a' | ('A'..'Z') => c.to_ascii_uppercase(),\n            _ => c.to_ascii_lowercase(),\n\
    \        })\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmphmc2k_5p.rs:7:20\n\
    \  |\n7 |             'a' | ('A'..'Z') => c.to_ascii_uppercase(),\n  |       \
    \             ^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0658`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.to_lowercase().chars().map(|c| match c {\n \
    \       c as char => char.into(),\n        c as u8 => c.to_uppercase().into(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `=>`, `@`, `if`, or `|`, found keyword `as`\n -->\
    \ /tmp/tmpxgz7_p_r.rs:6:11\n  |\n6 |         c as char => char.into(),\n  |  \
    \         ^^ expected one of `=>`, `@`, `if`, or `|`\n\nerror[E0277]: a value\
    \ of type `String` cannot be built from an iterator over elements of type `()`\n\
    \    --> /tmp/tmpxgz7_p_r.rs:9:8\n     |\n9    |     }).collect()\n     |    \
    \    ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=()>`\n\
    \     |\n     = help: the trait `FromIterator<()>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.to_lowercase().chars().map(|c| match c {\n \
    \       c if c.is_upper() => c.to_uppercase().to_string(),\n        c if c.is_lower()\
    \ => c.to_lowercase().to_string(),\n        c => c.to_string(),\n    }).collect::<String>().into()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n --> /tmp/tmplniup60j.rs:6:16\n  |\n6 |         c if c.is_upper() =>\
    \ c.to_uppercase().to_string(),\n  |                ^^^^^^^^ help: there is an\
    \ associated function with a similar name: `is_uppercase`\n\nerror[E0599]: no\
    \ method named `is_lower` found for type `char` in the current scope\n --> /tmp/tmplniup60j.rs:7:16\n\
    \  |\n7 |         c if c.is_lower() => c.to_lowercase().to_string(),\n  |    \
    \            ^^^^^^^^ help: there is an associated function with a similar name:\
    \ `is_lowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      c @ b'a' .. b'z' => b'A' .. b'Z'\n            c @ b'A' .. b'Z' => b'a'\
    \ .. b'z'\n            c => c,\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `c`\n\
    \ --> /tmp/tmpc7rmcxed.rs:8:13\n  |\n7 |             c @ b'a' .. b'z' => b'A'\
    \ .. b'Z'\n  |                              --             - expected one of `,`,\
    \ `.`, `?`, `}`, or an operator\n  |                              |\n  |     \
    \                         while parsing the `match` arm starting here\n8 |   \
    \          c @ b'A' .. b'Z' => b'a' .. b'z'\n  |             ^ unexpected token\n\
    \nerror[E0277]: a value of type `String` cannot be built from an iterator over\
    \ elements of type `()`\n    --> /tmp/tmpc7rmcxed.rs:11:10\n     |\n11   |   \
    \      .collect()\n     |          ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item=()>`\n     |\n     = help: the trait `FromIterator<()>`\
    \ is not implemented for `String`\n     = help: the following other types implement\
    \ trait `FromIterator<A>`:\n               <String as FromIterator<&'a char>>\n\
    \               <String as FromIterator<&'a str>>\n               <String as FromIterator<Box<str>>>\n\
    \               <String as FromIterator<Cow<'a, str>>>\n               <String\
    \ as FromIterator<String>>\n               <String as FromIterator<char>>\nnote:\
    \ required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut buffer = String::with_capacity(string.len());\n\
    \    for ch in string.chars() {\n        match ch {\n            c @ cc => buffer.push(c.to_lowercase()),\n\
    \            _ => buffer.push(ch),\n        }\n    }\n    buffer\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0rt3dbt7.rs:8:35\n  |\n8 |\
    \             c @ cc => buffer.push(c.to_lowercase()),\n  |                  \
    \                 ^^^^^^^^^^^^^^^^ expected `char`, found struct `ToLowercase`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut buffer = String::new();\n    for (i, c) in\
    \ string.chars().enumerate() {\n        if c.is_lowercase() {\n            buffer.push_str(c.to_uppercase());\n\
    \        } else {\n            buffer.push_str(c.to_lowercase());\n        }\n\
    \    }\n    buffer\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjmepls6r.rs:8:29\n  |\n8 |\
    \             buffer.push_str(c.to_uppercase());\n  |                        \
    \     ^^^^^^^^^^^^^^^^ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjmepls6r.rs:10:29\n   |\n10 |             buffer.push_str(c.to_lowercase());\n\
    \   |                             ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a' .. 'z'\
    \ => {\n            'A' .. 'Z'.to_lowercase()\n        }\n        'A' .. 'Z' =>\
    \ {\n            'a' .. 'z'.to_uppercase()\n        }\n        _ => c,\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmp7gss5123.rs:6:9\n\
    \  |\n6 |         'a' .. 'z' => {\n  |         ^^^^^^^^^^\n  |\n  = note: see\
    \ issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n\
    \nerror[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmp7gss5123.rs:9:9\n\
    \  |\n9 |         'A' .. 'Z' => {\n  |         ^^^^^^^^^^\n  |\n  = note: see\
    \ issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp7gss5123.rs:7:20\n  |\n7 |    \
    \         'A' .. 'Z'.to_lowercase()\n  |                    ^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `ToLowercase`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7gss5123.rs:10:20\n   |\n10 |             'a' .. 'z'.to_uppercase()\n\
    \   |                    ^^^^^^^^^^^^^^^^^^ expected `char`, found struct `ToUppercase`\n\
    \nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp7gss5123.rs:12:14\n\
    \   |\n5  |       string.chars().map(|c| match c {\n   |  ____________________________-\n\
    6  | |         'a' .. 'z' => {\n7  | |             'A' .. 'Z'.to_lowercase()\n\
    \   | |             ------------------------- this is found to be of type `std::ops::Range<char>`\n\
    8  | |         }\n9  | |         'A' .. 'Z' => {\n10 | |             'a' .. 'z'.to_uppercase()\n\
    \   | |             ------------------------- this is found to be of type `std::ops::Range<char>`\n\
    11 | |         }\n12 | |         _ => c,\n   | |              ^ expected struct\
    \ `std::ops::Range`, found `char`\n13 | |     }).collect()\n   | |_____- `match`\
    \ arms have incompatible types\n   |\n   = note: expected struct `std::ops::Range<char>`\n\
    \                found type `char`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0658.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_ascii()\
    \ => (c as u8).to_ascii_uppercase().to_string(),\n        _ => c.to_ascii_lowercase().to_string(),\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"726976767933\"`,\n right: `\"hELLO!\"`', /tmp/tmpwqv26pyh.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().chain(|c| match c {\n        c as u8\
    \ => c.to_string().to_uppercase().to_string(),\n        c as u16 => c.to_string().to_lowercase().to_string(),\n\
    \        c as u32 => c.to_string().to_uppercase().to_string(),\n        c as u64\
    \ => c.to_string().to_lowercase().to_string(),\n        c as u128 => c.to_string().to_uppercase().to_string(),\n\
    \        _ => c.to_string()\n    }).collect::<String>().to_string()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `=>`, `@`, `if`, or `|`, found keyword `as`\n -->\
    \ /tmp/tmp11lv8eec.rs:6:11\n  |\n6 |         c as u8 => c.to_string().to_uppercase().to_string(),\n\
    \  |           ^^ expected one of `=>`, `@`, `if`, or `|`\n\nerror[E0277]: `[closure@/tmp/tmp11lv8eec.rs:5:26:\
    \ 12:6]` is not an iterator\n --> /tmp/tmp11lv8eec.rs:5:20\n  |\n5 |     string.chars().chain(|c|\
    \ match c {\n  |                    ^^^^^ --- consider calling this closure\n\
    \  |                    |\n  |                    `[closure@/tmp/tmp11lv8eec.rs:5:26:\
    \ 12:6]` is not an iterator\n  |\n  = help: the trait `Iterator` is not implemented\
    \ for `[closure@/tmp/tmp11lv8eec.rs:5:26: 12:6]`\n  = note: required because of\
    \ the requirements on the impl of `IntoIterator` for `[closure@/tmp/tmp11lv8eec.rs:5:26:\
    \ 12:6]`\n\nerror[E0599]: the method `collect` exists for struct `std::iter::Chain<Chars<'_>,\
    \ [closure@/tmp/tmp11lv8eec.rs:5:26: 12:6]>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmp11lv8eec.rs:12:8\n   |\n5  |       string.chars().chain(|c| match\
    \ c {\n   |                            -----------\n   |                     \
    \       |\n   |                            doesn't satisfy `<_ as Iterator>::Item\
    \ = char`\n   |                            doesn't satisfy `_: Iterator`\n...\n\
    12 |       }).collect::<String>().to_string()\n   |          ^^^^^^^ method cannot\
    \ be called on `std::iter::Chain<Chars<'_>, [closure@/tmp/tmp11lv8eec.rs:5:26:\
    \ 12:6]>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<[closure@/tmp/tmp11lv8eec.rs:5:26:\
    \ 12:6] as Iterator>::Item = char`\n           which is required by `std::iter::Chain<Chars<'_>,\
    \ [closure@/tmp/tmp11lv8eec.rs:5:26: 12:6]>: Iterator`\n           `[closure@/tmp/tmp11lv8eec.rs:5:26:\
    \ 12:6]: Iterator`\n           which is required by `std::iter::Chain<Chars<'_>,\
    \ [closure@/tmp/tmp11lv8eec.rs:5:26: 12:6]>: Iterator`\n           `std::iter::Chain<Chars<'_>,\
    \ [closure@/tmp/tmp11lv8eec.rs:5:26: 12:6]>: Iterator`\n           which is required\
    \ by `&mut std::iter::Chain<Chars<'_>, [closur"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase().to_string()).collect::<String>().into_iter()\n\
    \        .chain(string.chars().map(|c| c.to_ascii_lowercase().to_string()).collect::<String>())\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: the method `into_iter` exists for struct `String`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmp5q77210g.rs:5:84\n    |\n5 \
    \  |       string.chars().map(|c| c.to_ascii_uppercase().to_string()).collect::<String>().into_iter()\n\
    \    |                                                                       \
    \               ^^^^^^^^^\n    |\n    = note: the following trait bounds were\
    \ not satisfied:\n            `String: Iterator`\n            which is required\
    \ by `String: IntoIterator`\n            `&String: Iterator`\n            which\
    \ is required by `&String: IntoIterator`\n            `&mut String: Iterator`\n\
    \            which is required by `&mut String: IntoIterator`\n            `str:\
    \ Sized`\n            which is required by `str: IntoIterator`\n            `str:\
    \ Iterator`\n            which is required by `str: IntoIterator`\n          \
    \  `&str: Iterator`\n            which is required by `&str: IntoIterator`\n \
    \           `&mut str: Iterator`\n            which is required by `&mut str:\
    \ IntoIterator`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            c @ b'A' => b'Z',\n            c @ b'a' => b'z',\n          \
    \  c => c,\n        })\n        .collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvub06pyc.rs:8:17\n  |\n7 |\
    \         .map(|c| match c {\n  |                        - this expression has\
    \ type `char`\n8 |             c @ b'A' => b'Z',\n  |                 ^^^^ expected\
    \ `char`, found `u8`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvub06pyc.rs:9:17\n\
    \  |\n7 |         .map(|c| match c {\n  |                        - this expression\
    \ has type `char`\n8 |             c @ b'A' => b'Z',\n9 |             c @ b'a'\
    \ => b'z',\n  |                 ^^^^ expected `char`, found `u8`\n\nerror[E0308]:\
    \ `match` arms have incompatible types\n  --> /tmp/tmpvub06pyc.rs:10:18\n   |\n\
    7  |           .map(|c| match c {\n   |  __________________-\n8  | |         \
    \    c @ b'A' => b'Z',\n   | |                         ---- this is found to be\
    \ of type `u8`\n9  | |             c @ b'a' => b'z',\n   | |                 \
    \        ---- this is found to be of type `u8`\n10 | |             c => c,\n \
    \  | |                  ^ expected `u8`, found `char`\n11 | |         })\n   |\
    \ |_________- `match` arms have incompatible types\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .filter_map(|c| c.to_lowercase())\n\
    \        .map(|c| if c.is_uppercase() {\n            c.to_uppercase()\n      \
    \  } else {\n            c\n        })\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpes8eik18.rs:6:25\n  |\n6 |\
    \         .filter_map(|c| c.to_lowercase())\n  |                         ^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found struct `ToLowercase`\n  |\n  = note: expected\
    \ enum `Option<_>`\n           found struct `ToLowercase`\nhelp: try wrapping\
    \ the expression in `Some`\n  |\n6 |         .filter_map(|c| Some(c.to_lowercase()))\n\
    \  |                         +++++                +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      c if c.is_lowercase() => c.to_uppercase(),\n            c if c.is_uppercase()\
    \ => c.to_lowercase(),\n            _ => c,\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpdzvutezp.rs:8:38\n\
    \   |\n6  |           .map(|c| match c {\n   |  __________________-\n7  | |  \
    \           c if c.is_lowercase() => c.to_uppercase(),\n   | |               \
    \                       ---------------- this is found to be of type `ToUppercase`\n\
    8  | |             c if c.is_uppercase() => c.to_lowercase(),\n   | |        \
    \                              ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n9  | |             _ => c,\n10 | |         })\n\
    \   | |_________- `match` arms have incompatible types\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| if c.is_lowercase()\
    \ then c.to_uppercase() else c.to_lowercase())\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `then`\n --> /tmp/tmpot3nvme2.rs:6:38\n  |\n\
    6 |         .map(|c| if c.is_lowercase() then c.to_uppercase() else c.to_lowercase())\n\
    \  |                  --                  ^^^^ expected `{`\n  |             \
    \     |\n  |                  this `if` expression has a condition, but no block\n\
    \  |\nhelp: try placing this code inside a block\n  |\n6 |         .map(|c| if\
    \ c.is_lowercase() { then } c.to_uppercase() else c.to_lowercase())\n  |     \
    \                                 +      +\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      'A' | 'a' => char::ToUpper(c),\n            'B' | 'b' => char::ToLower(c),\n\
    \            _ => c,\n        })\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no associated item named `ToUpper` found for type `char`\
    \ in the current scope\n --> /tmp/tmpepff51is.rs:7:32\n  |\n7 |             'A'\
    \ | 'a' => char::ToUpper(c),\n  |                                ^^^^^^^ associated\
    \ item not found in `char`\n\nerror[E0599]: no associated item named `ToLower`\
    \ found for type `char` in the current scope\n --> /tmp/tmpepff51is.rs:8:32\n\
    \  |\n8 |             'B' | 'b' => char::ToLower(c),\n  |                    \
    \            ^^^^^^^ associated item not found in `char`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut string = string.to_lowercase();\n    string.chars().for_each(|c|\
    \ if c.is_lowercase() then c.to_uppercase() else c.to_lowercase())\n    .join(\"\
    \")\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `then`\n --> /tmp/tmp_f4jbhww.rs:6:53\n  |\n\
    6 |     string.chars().for_each(|c| if c.is_lowercase() then c.to_uppercase()\
    \ else c.to_lowercase())\n  |                                 --             \
    \     ^^^^ expected `{`\n  |                                 |\n  |          \
    \                       this `if` expression has a condition, but no block\n \
    \ |\nhelp: try placing this code inside a block\n  |\n6 |     string.chars().for_each(|c|\
    \ if c.is_lowercase() { then } c.to_uppercase() else c.to_lowercase())\n  |  \
    \                                                   +      +\n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| if c == c.to_lower()\
    \ { c.to_upper() } else { c.to_lower() })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_lower` found for type `char` in the current\
    \ scope\n --> /tmp/tmpvmt61ecm.rs:6:28\n  |\n6 |         .map(|c| if c == c.to_lower()\
    \ { c.to_upper() } else { c.to_lower() })\n  |                            ^^^^^^^^\
    \ help: there is an associated function with a similar name: `to_lowercase`\n\n\
    error[E0599]: no method named `to_upper` found for type `char` in the current\
    \ scope\n --> /tmp/tmpvmt61ecm.rs:6:43\n  |\n6 |         .map(|c| if c == c.to_lower()\
    \ { c.to_upper() } else { c.to_lower() })\n  |                               \
    \            ^^^^^^^^ help: there is an associated function with a similar name:\
    \ `to_uppercase`\n\nerror[E0599]: no method named `to_lower` found for type `char`\
    \ in the current scope\n --> /tmp/tmpvmt61ecm.rs:6:65\n  |\n6 |         .map(|c|\
    \ if c == c.to_lower() { c.to_upper() } else { c.to_lower() })\n  |          \
    \                                                       ^^^^^^^^ help: there is\
    \ an associated function with a similar name: `to_lowercase`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .filter_map(|c| match c {\n\
    \            c if c.is_uppercase() => Some(c.to_ascii_lowercase()),\n        \
    \    c if c.is_lowercase() => Some(c.to_ascii_uppercase()),\n            _ =>\
    \ None,\n        })\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hELLO\"`,\n right: `\"hELLO!\"`', /tmp/tmpwl8secwf.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a' => (c\
    \ as u32).to_string() + ('z' as u32),\n        'z' => (c as u32).to_string() +\
    \ ('a' as u32),\n        _ => c,\n    }).collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkwmskpq8.rs:6:41\n  |\n6 |\
    \         'a' => (c as u32).to_string() + ('z' as u32),\n  |                 \
    \                        ^^^^^^^^^^^^ expected `&str`, found `u32`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpkwmskpq8.rs:7:41\n  |\n7 |         'z' => (c\
    \ as u32).to_string() + ('a' as u32),\n  |                                   \
    \      ^^^^^^^^^^^^ expected `&str`, found `u32`\n\nerror[E0308]: `match` arms\
    \ have incompatible types\n --> /tmp/tmpkwmskpq8.rs:8:14\n  |\n5 |       string.chars().map(|c|\
    \ match c {\n  |  ____________________________-\n6 | |         'a' => (c as u32).to_string()\
    \ + ('z' as u32),\n  | |                -------------------------------------\
    \ this is found to be of type `String`\n7 | |         'z' => (c as u32).to_string()\
    \ + ('a' as u32),\n  | |                -------------------------------------\
    \ this is found to be of type `String`\n8 | |         _ => c,\n  | |         \
    \     ^- help: try using a conversion method: `.to_string()`\n  | |          \
    \    |\n  | |              expected struct `String`, found `char`\n9 | |     }).collect::<String>()\n\
    \  | |_____- `match` arms have incompatible types\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .chain(string.chars().enumerate().map(|(i,\
    \ _)| if i > 0 && i % 2 == 0 { char::from('a').to_uppercase() } else { char::from('A').to_lowercase()\
    \ }))\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp8uwwbk07.rs:7:121\n\
    \  |\n7 | ... { char::from('a').to_uppercase() } else { char::from('A').to_lowercase()\
    \ }))\n  |       ------------------------------          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `ToUppercase`, found struct `ToLowercase`\n  |       |\n  |\
    \       expected because of this\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut new_string: String = \"\".to_string();\n  \
    \  for c in string.chars() {\n        if c.is_lowercase() {\n            new_string\
    \ += c.to_uppercase();\n        } else {\n            new_string += c.to_lowercase();\n\
    \        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmakyki5j.rs:8:27\n  |\n8 |\
    \             new_string += c.to_uppercase();\n  |                           ^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `ToUppercase`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpmakyki5j.rs:10:27\n   |\n10 |             new_string += c.to_lowercase();\n\
    \   |                           ^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `ToLowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c @ 'a' @\
    \ 'A' => c as u8,\n        c @ b'A' @ 'a' => c as u8,\n        _ => c,\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: left-hand side of `@` must be a binding\n --> /tmp/tmpo1mvq6kx.rs:6:13\n\
    \  |\n6 |         c @ 'a' @ 'A' => c as u8,\n  |             ---^^^---\n  |  \
    \           |     |\n  |             |     also a pattern\n  |             interpreted\
    \ as a pattern, not a binding\n  |\n  = note: bindings are `x`, `mut x`, `ref\
    \ x`, and `ref mut x`\n\nerror: left-hand side of `@` must be a binding\n -->\
    \ /tmp/tmpo1mvq6kx.rs:7:13\n  |\n7 |         c @ b'A' @ 'a' => c as u8,\n  | \
    \            ----^^^---\n  |             |      |\n  |             |      also\
    \ a pattern\n  |             interpreted as a pattern, not a binding\n  |\n  =\
    \ note: bindings are `x`, `mut x`, `ref x`, and `ref mut x`\n\nerror[E0308]: `match`\
    \ arms have incompatible types\n --> /tmp/tmpo1mvq6kx.rs:8:14\n  |\n5 |      \
    \ string.chars().map(|c| match c {\n  |  ____________________________-\n6 | |\
    \         c @ 'a' @ 'A' => c as u8,\n  | |                          ------- this\
    \ is found to be of type `u8`\n7 | |         c @ b'A' @ 'a' => c as u8,\n  | |\
    \                           ------- this is found to be of type `u8`\n8 | |  \
    \       _ => c,\n  | |              ^ expected `u8`, found `char`\n9 | |     }).collect()\n\
    \  | |_____- `match` arms have incompatible types\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().chain(string.chars().map(|c| match c\
    \ {\n        'a' .. 'z' => (c as u8).to_ascii_uppercase() + (c as u8).to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmp2mn9scvi.rs:6:9\n\
    \  |\n6 |         'a' .. 'z' => (c as u8).to_ascii_uppercase() + (c as u8).to_ascii_lowercase(),\n\
    \  |         ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: `match` arms have incompatible types\n\
    \ --> /tmp/tmp2mn9scvi.rs:7:14\n  |\n5 |       string.chars().chain(string.chars().map(|c|\
    \ match c {\n  |  _________________________________________________-\n6 | |  \
    \       'a' .. 'z' => (c as u8).to_ascii_uppercase() + (c as u8).to_ascii_lowercase(),\n\
    \  | |                       ---------------------------------------------------------------\
    \ this is found to be of type `u8`\n7 | |         _ => c,\n  | |             \
    \ ^ expected `u8`, found `char`\n8 | |     }).collect()).collect()\n  | |_____-\
    \ `match` arms have incompatible types\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0658.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            'a' .. 'z' => c as char,\n            c => c.to_uppercase() as\
    \ char,\n        })\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpj5qvrdbz.rs:8:13\n\
    \  |\n8 |             'a' .. 'z' => c as char,\n  |             ^^^^^^^^^^\n \
    \ |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0605]: non-primitive cast: `ToUppercase` as `char`\n\
    \ --> /tmp/tmpj5qvrdbz.rs:9:18\n  |\n9 |             c => c.to_uppercase() as\
    \ char,\n  |                  ^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can\
    \ only be used to convert between primitive types or to coerce to a specific trait\
    \ object\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0605, E0658.\nFor more information about an error, try `rustc\
    \ --explain E0605`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut result = String::with_capacity(string.len());\n\
    \    let mut lowercase = true;\n    for ch in string.chars() {\n        if !lowercase\
    \ {\n            result += char::to_upper(ch).unwrap();\n        } else {\n  \
    \          result += char::to_lower(ch).unwrap();\n        }\n        lowercase\
    \ = !lowercase;\n    }\n    result\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no function or associated item named `to_upper` found for\
    \ type `char` in the current scope\n --> /tmp/tmpreqehlht.rs:9:29\n  |\n9 |  \
    \           result += char::to_upper(ch).unwrap();\n  |                      \
    \       ^^^^^^^^\n  |                             |\n  |                     \
    \        function or associated item not found in `char`\n  |                \
    \             help: there is an associated function with a similar name: `to_uppercase`\n\
    \nerror[E0599]: no function or associated item named `to_lower` found for type\
    \ `char` in the current scope\n  --> /tmp/tmpreqehlht.rs:11:29\n   |\n11 |   \
    \          result += char::to_lower(ch).unwrap();\n   |                      \
    \       ^^^^^^^^\n   |                             |\n   |                   \
    \          function or associated item not found in `char`\n   |             \
    \                help: there is an associated function with a similar name: `to_lowercase`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'A' .. 'Z'\
    \ => c.to_ascii_uppercase(),\n        'a' .. 'z' => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpdt48zd4p.rs:6:9\n\
    \  |\n6 |         'A' .. 'Z' => c.to_ascii_uppercase(),\n  |         ^^^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmpdt48zd4p.rs:7:9\n  |\n7 |         'a' .. 'z' => c.to_ascii_lowercase(),\n\
    \  |         ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0658`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            'a' => (c as u32).to_ascii_lowercase().into(),\n            'A'\
    \ => (c as u32).to_ascii_uppercase().into(),\n            _ => c,\n        })\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `to_ascii_lowercase` found for type `u32`\
    \ in the current scope\n --> /tmp/tmprnetqvcn.rs:8:31\n  |\n8 |             'a'\
    \ => (c as u32).to_ascii_lowercase().into(),\n  |                            \
    \   ^^^^^^^^^^^^^^^^^^ method not found in `u32`\n\nerror[E0599]: no method named\
    \ `to_ascii_uppercase` found for type `u32` in the current scope\n --> /tmp/tmprnetqvcn.rs:9:31\n\
    \  |\n9 |             'A' => (c as u32).to_ascii_uppercase().into(),\n  |    \
    \                           ^^^^^^^^^^^^^^^^^^ method not found in `u32`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| c.to_ascii_lowercase().into())\n\
    \        .chain(string.chars().map(|c| c.to_ascii_uppercase().into()))\n     \
    \   .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpujy80eqj.rs:6:10\n\
    \  |\n6 |         .map(|c| c.to_ascii_lowercase().into())\n  |          ^^^ cannot\
    \ infer type for type parameter `B` declared on the associated function `map`\n\
    7 |         .chain(string.chars().map(|c| c.to_ascii_uppercase().into()))\n  |\
    \                                       ----------------------------- this method\
    \ call resolves to `T`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| if c.is_upper() {\
    \ c.to_lower() } else { c.to_upper() })\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_upper` found for type `char` in the current\
    \ scope\n --> /tmp/tmp02zt4irp.rs:6:23\n  |\n6 |         .map(|c| if c.is_upper()\
    \ { c.to_lower() } else { c.to_upper() })\n  |                       ^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_uppercase`\n\n\
    error[E0599]: no method named `to_lower` found for type `char` in the current\
    \ scope\n --> /tmp/tmp02zt4irp.rs:6:38\n  |\n6 |         .map(|c| if c.is_upper()\
    \ { c.to_lower() } else { c.to_upper() })\n  |                               \
    \       ^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\
    \nerror[E0599]: no method named `to_upper` found for type `char` in the current\
    \ scope\n --> /tmp/tmp02zt4irp.rs:6:60\n  |\n6 |         .map(|c| if c.is_upper()\
    \ { c.to_lower() } else { c.to_upper() })\n  |                               \
    \                             ^^^^^^^^ help: there is an associated function with\
    \ a similar name: `to_uppercase`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            c @ b'a' => b'A'.to_ascii_lowercase()\n            .to_ascii_uppercase()\n\
    \            .to_ascii_lowercase(),\n            _ => c,\n        })\n       \
    \ .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3_go8nxk.rs:8:17\n  |\n7 |\
    \         .map(|c| match c {\n  |                        - this expression has\
    \ type `char`\n8 |             c @ b'a' => b'A'.to_ascii_lowercase()\n  |    \
    \             ^^^^ expected `char`, found `u8`\n\nerror[E0308]: `match` arms have\
    \ incompatible types\n  --> /tmp/tmp3_go8nxk.rs:11:18\n   |\n7  |           .map(|c|\
    \ match c {\n   |                    ------- `match` arms have incompatible types\n\
    8  |               c @ b'a' => b'A'.to_ascii_lowercase()\n   |  _________________________-\n\
    9  | |             .to_ascii_uppercase()\n10 | |             .to_ascii_lowercase(),\n\
    \   | |_________________________________- this is found to be of type `u8`\n11\
    \ |               _ => c,\n   |                    ^ expected `u8`, found `char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      'a' .. 'z' => c.to_uppercase(),\n            _ => c.to_lowercase(),\n \
    \       })\n        .collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpyy5bkhiu.rs:7:13\n\
    \  |\n7 |             'a' .. 'z' => c.to_uppercase(),\n  |             ^^^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: `match` arms have incompatible types\n\
    \ --> /tmp/tmpyy5bkhiu.rs:8:18\n  |\n6 |           .map(|c| match c {\n  |  __________________-\n\
    7 | |             'a' .. 'z' => c.to_uppercase(),\n  | |                     \
    \      ---------------- this is found to be of type `ToUppercase`\n8 | |     \
    \        _ => c.to_lowercase(),\n  | |                  ^^^^^^^^^^^^^^^^ expected\
    \ struct `ToUppercase`, found struct `ToLowercase`\n9 | |         })\n  | |_________-\
    \ `match` arms have incompatible types\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0658.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .chain(string)\n        .map(|c|\
    \ if c == 'A' { 'a' } else if c == 'a' { 'A' } else { c })\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `String` is not an iterator\n --> /tmp/tmp975tsk3u.rs:6:16\n\
    \  |\n6 |         .chain(string)\n  |          ----- ^^^^^^ `String` is not an\
    \ iterator; try calling `.chars()` or `.bytes()`\n  |          |\n  |        \
    \  required by a bound introduced by this call\n  |\n  = help: the trait `Iterator`\
    \ is not implemented for `String`\n  = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `String`\n\nerror[E0599]: the method `map`\
    \ exists for struct `std::iter::Chain<Chars<'_>, String>`, but its trait bounds\
    \ were not satisfied\n   --> /tmp/tmp975tsk3u.rs:7:10\n    |\n7   |          \
    \ .map(|c| if c == 'A' { 'a' } else if c == 'a' { 'A' } else { c })\n    |   \
    \         ^^^ method cannot be called on `std::iter::Chain<Chars<'_>, String>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `<String as Iterator>::Item = char`\n     \
    \       which is required by `std::iter::Chain<Chars<'_>, String>: Iterator`\n\
    \            `String: Iterator`\n            which is required by `std::iter::Chain<Chars<'_>,\
    \ String>: Iterator`\n            `std::iter::Chain<Chars<'_>, String>: Iterator`\n\
    \            which is required by `&mut std::iter::Chain<Chars<'_>, String>: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string\n        .chars()\n        .map(|c| match c\
    \ {\n            c @ b'A' as b'a' => b'a' as b'A',\n            c @ b'a' as b'A'\
    \ => b'A' as b'a',\n            _ => c,\n        })\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `...`, `..=`, `..`, `=>`, `if`, or `|`, found keyword\
    \ `as`\n --> /tmp/tmp6xp7spto.rs:8:22\n  |\n8 |             c @ b'A' as b'a' =>\
    \ b'a' as b'A',\n  |                      ^^ expected one of `...`, `..=`, `..`,\
    \ `=>`, `if`, or `|`\n\nerror[E0277]: a value of type `String` cannot be built\
    \ from an iterator over elements of type `()`\n    --> /tmp/tmp6xp7spto.rs:12:10\n\
    \     |\n12   |         .collect::<String>()\n     |          ^^^^^^^ value of\
    \ type `String` cannot be built from `std::iter::Iterator<Item=()>`\n     |\n\
    \     = help: the trait `FromIterator<()>` is not implemented for `String`\n \
    \    = help: the following other types implement trait `FromIterator<A>`:\n  \
    \             <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_uppercase() || c.is_lowercase()\
    \ {\n        match c.to_uppercase() {\n            Some(' ') => ' ',\n       \
    \     Some(c) => c,\n            None => c.to_lowercase().unwrap(),\n        }\n\
    \    } else {\n        c\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoofhdtde.rs:7:13\n  |\n6 |\
    \         match c.to_uppercase() {\n  |               ---------------- this expression\
    \ has type `ToUppercase`\n7 |             Some(' ') => ' ',\n  |             ^^^^^^^^^\
    \ expected struct `ToUppercase`, found enum `Option`\n  |\n  = note: expected\
    \ struct `ToUppercase`\n               found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpoofhdtde.rs:8:13\n  |\n6 |         match c.to_uppercase()\
    \ {\n  |               ---------------- this expression has type `ToUppercase`\n\
    7 |             Some(' ') => ' ',\n8 |             Some(c) => c,\n  |        \
    \     ^^^^^^^ expected struct `ToUppercase`, found enum `Option`\n  |\n  = note:\
    \ expected struct `ToUppercase`\n               found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpoofhdtde.rs:9:13\n  |\n6 |         match c.to_uppercase()\
    \ {\n  |               ---------------- this expression has type `ToUppercase`\n\
    ...\n9 |             None => c.to_lowercase().unwrap(),\n  |             ^^^^\
    \ expected struct `ToUppercase`, found enum `Option`\n  |\n  = note: expected\
    \ struct `ToUppercase`\n               found enum `Option<_>`\n\nerror[E0599]:\
    \ no method named `unwrap` found for struct `ToLowercase` in the current scope\n\
    \ --> /tmp/tmpoofhdtde.rs:9:38\n  |\n9 |             None => c.to_lowercase().unwrap(),\n\
    \  |                                      ^^^^^^ method not found in `ToLowercase`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      'A' ..= 'Z' | 'a'..= 'z' => c.to_ascii_lowercase(),\n            _ => c,\n\
    \        })\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hello!\"`,\n right: `\"hELLO!\"`', /tmp/tmpmsm8_g0q.rs:16:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars()\n        .map(|c| match c {\n      \
    \      'a' .. 'z' => c + '_',\n            'A' .. 'Z' => c + '_',\n          \
    \  _ => c,\n        })\n        .collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpeui0wa3o.rs:7:13\n\
    \  |\n7 |             'a' .. 'z' => c + '_',\n  |             ^^^^^^^^^^\n  |\n\
    \  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for\
    \ more information\n\nerror[E0658]: exclusive range pattern syntax is experimental\n\
    \ --> /tmp/tmpeui0wa3o.rs:8:13\n  |\n8 |             'A' .. 'Z' => c + '_',\n\
    \  |             ^^^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0369]: cannot add `char` to `char`\n --> /tmp/tmpeui0wa3o.rs:7:29\n\
    \  |\n7 |             'a' .. 'z' => c + '_',\n  |                           -\
    \ ^ --- char\n  |                           |\n  |                           char\n\
    \nerror[E0369]: cannot add `char` to `char`\n --> /tmp/tmpeui0wa3o.rs:8:29\n \
    \ |\n8 |             'A' .. 'Z' => c + '_',\n  |                           - ^\
    \ --- char\n  |                           |\n  |                           char\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0369, E0658.\nFor more information about an error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() then c.to_uppercase()\
    \ else c.to_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `then`\n --> /tmp/tmpssfwefbz.rs:5:48\n  |\n\
    5 |     string.chars().map(|c| if c.is_lowercase() then c.to_uppercase() else\
    \ c.to_lowercase()).collect()\n  |                            --             \
    \     ^^^^ expected `{`\n  |                            |\n  |               \
    \             this `if` expression has a condition, but no block\n  |\nhelp: try\
    \ placing this code inside a block\n  |\n5 |     string.chars().map(|c| if c.is_lowercase()\
    \ { then } c.to_uppercase() else c.to_lowercase()).collect()\n  |            \
    \                                    +      +\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.to_lowercase().chars().chain(string.chars().map(|c|\
    \ match c {\n        'a' .. 'z' => c..='A'..'Z',\n        'A' .. 'Z' => c.to_uppercase(),\n\
    \        _ => c,\n    })).collect::<String>() + string.to_uppercase()\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `..`\n\
    \ --> /tmp/tmpirf8guf1.rs:6:30\n  |\n6 |         'a' .. 'z' => c..='A'..'Z',\n\
    \  |                    --        ^^ expected one of `,`, `.`, `?`, `}`, or an\
    \ operator\n  |                    |\n  |                    while parsing the\
    \ `match` arm starting here\n\nerror[E0308]: mismatched types\n --> /tmp/tmpirf8guf1.rs:9:31\n\
    \  |\n9 |     })).collect::<String>() + string.to_uppercase()\n  |           \
    \                    ^^^^^^^^^^^^^^^^^^^^^\n  |                              \
    \ |\n  |                               expected `&str`, found struct `String`\n\
    \  |                               help: consider borrowing here: `&string.to_uppercase()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
