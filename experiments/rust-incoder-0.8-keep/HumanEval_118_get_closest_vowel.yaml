name: HumanEval_118_get_closest_vowel
language: rust
prompt: "/// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n/// two consonants from the right side of the word (case sensitive).\n\
  /// Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
  \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
  yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
  quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfn get_closest_vowel(word:\
  \ String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
  yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
  )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
  \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
  \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
  bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")),\
  \ String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
  \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n  \
  \  assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
  anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\"\
  )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"\
  o\"));\n}\n"
completions: ["  \n  let word = word.to_lowercase();\n  let mut vowel_count = 0;\n\
    \  let mut current_vowel_index = 0;\n  \n  // search backwards from end of string\n\
    \  for index in word.rev().chars().rev().rposition(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n    \n    if index < 0 {\n      break;\n\
    \    }\n    \n    let vowel = word.chars().nth(index).unwrap();\n    \n    //\
    \ vowel is in range and we haven't reached the start\n    if vowel == current_vowel_index\
    \ + 1 && current_vowel_index != 0 {\n      vowel_count++;\n    }\n    \n    current_vowel_index\
    \ = vowel;\n  }\n  \n  if vowel_count == 0 {\n    return \"\";\n  }\n  \n  return\
    \ word.chars().nth(word.chars().rposition(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') + 1).unwrap();", "    let mut vowels = vec!['u', 'i',\
    \ 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o'];\n   \
    \ \n    for consonant in word.chars().rev() {\n        if let Some(vowel) = vowels.binary_search(&consonant)\
    \ {\n            vowels.remove(vowel);\n            \n            if vowels.len()\
    \ < 2 {\n                return String::new();\n            }\n        }\n   \
    \ }\n\n    String::new()", "    word.chars().filter_map(|c| {\n        if c.is_uppercase()\
    \ || c.is_lowercase() {\n            if c.is_uppercase() {\n                Some(c.to_uppercase())\n\
    \            } else if c.is_lowercase() {\n                Some(c.to_lowercase())\n\
    \            } else {\n                None\n            }\n        } else if\
    \ c.is_vowel() {\n            Some(c.to_uppercase())\n        } else {\n     \
    \       None\n        }\n    }).find(|c| c.is_some()).map(|c| c.unwrap()).unwrap_or(\"\
    \")", "    let mut min_distance = word.len() as i32;\n    let mut vowel = String::new();\n\
    \    for &c in word.chars().cloned() {\n        if c == ' ' {\n            continue;\n\
    \        }\n        let distance = word.char_indices()\n                     \
    \   .iter()\n                        .filter(|(_, index)| index < word.len())\n\
    \                        .map(|(_, index)| index as i32)\n                   \
    \     .min();\n        if min_distance > distance {\n            min_distance\
    \ = distance;\n            vowel = String::from(c.to_lowercase());\n        }\n\
    \    }\n    return vowel;", "    word.chars().enumerate().filter(|&(_, c)| c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').filter(|&(_, c)| !c.is_lowercase()).filter(|&(_,\
    \ c)| c.is_uppercase()).filter(|&(_, c)| c.is_ascii()).unwrap_or(\"\")", "   \
    \ word.chars().skip_while(|c| {\n        c < 'A' || c > 'Z' ||\n            c\
    \ < 'a' || c > 'z' ||\n            c < '0' || c > '9'\n    }).take_while(|c| c\
    \ != 'a' && c != 'A' && c != 'e' && c != 'E' && c != 'i' && c != 'I' && c != 'o'\
    \ && c != 'O' && c != 'u' && c != 'U').collect()\n        .join(\"\\u{1F447}\"\
    ) ", "    let mut vowel_index = String::new();\n    for mut i in word.reverse().chars()\
    \ {\n        let mut i = i as u32;\n        if i as usize > 2 {\n            i\
    \ += 1;\n        }\n        if i as usize == 4 {\n            vowel_index.push(\"\
    ae\");\n        }\n        if i as usize == 5 {\n            vowel_index.push(\"\
    ai\");\n        }\n        if i as usize == 6 {\n            vowel_index.push(\"\
    au\");\n        }\n        if i as usize == 7 {\n            vowel_index.push(\"\
    au\");\n        }\n        if i as usize == 8 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 9 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 10 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 11 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 12 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 13 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 14 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 15 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 16 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 17 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 18 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 19 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 20 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 21 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 22 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 23 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 24 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 25 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 26 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 27 {\n            vowel_index.push(\"\
    ou\");\n        }\n        if i as usize == 28 {\n            vowel_index.push(\"\
    ou", "    \n    let mut vowels = HashSet::new();\n    let mut letters = word.chars().collect::<Vec<_>>();\n\
    \    letters.pop();\n    letters.pop();\n    letters.reverse();\n    \n    let\
    \ vowels0 = chars::vowels.collect::<Vec<_>>();\n    let vowels1 = chars::vowels.collect::<Vec<_>>();\n\
    \    \n    vowels0.clone() + vowels1.clone() + letters.clone() + letters.clone().reverse()\n\
    \        .iter()\n        .cloned()\n        .filter(|&x| vowels.contains(x))\n\
    \        .cloned()\n        .collect::<Vec<_>>();\n    \n    vowels.iter().cloned().filter(|&x|\
    \ vowels0.contains(x)).cloned().collect::<Vec<_>>()", "    let mut vowels = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let len = word.len();\n    let mut start\
    \ = 0;\n    let mut end = len - 1;\n    while start <= end {\n        let mid\
    \ = (start + end) / 2;\n        let vowel = word[mid];\n        if word.contains(&vowel)\
    \ {\n            return vowel;\n        } else if vowels.contains(&vowel) {\n\
    \            end = mid - 1;\n        } else {\n            start = mid + 1;\n\
    \        }\n    }\n    return \"\".to_string();", "    let mut consonants: Vec<usize>\
    \ = vec![\n        0x1d0, 0x1d1, 0x1d2, 0x1d3, 0x1d4, 0x1d5, 0x1d6, 0x1d7, 0x1d8,\n\
    \        0x1d9, 0x1dc, 0x1db, 0x1de,\n    ];\n    let mut vowels: Vec<usize> =\
    \ vec![\n        0x1d0, 0x1d8, 0x1d9,\n    ];\n\n    for (index, char) in word.chars().enumerate().take(word.len()\
    \ - 1) {\n        if consonants.contains(char) {\n            consonants.push(char);\n\
    \        } else {\n            if vowels.contains(char) {\n                vowels.push(char);\n\
    \            } else {\n                return \"\";\n            }\n        }\n\
    \    }\n    if consonants.len() > vowels.len() {\n        return \"\".to_string();\n\
    \    }\n    let mut min: usize;\n    let mut max: usize;\n    for (index, char)\
    \ in word.chars().enumerate().take(word.len() - 1) {\n        if char == consonants[vowels.len()].to_usize()\
    \ {\n            min = index;\n        }\n        if char == consonants[0].to_usize()\
    \ {\n            max = index;\n        }\n    }\n    if max < min {\n        return\
    \ \"\".to_string();\n    }\n    let mid = (min + max) / 2;\n    let mut vowel:\
    \ String;\n    if vowels.contains(consonants[mid].to_usize()) {\n        vowel\
    \ = consonants[mid].to_string();\n    } else {\n        vowel = vowels[mid].to_string();\n\
    \    }\n    return vowel;", "    fn is_vowel(s: &String) -> bool {\n        let\
    \ v = s.as_bytes().nth(1).unwrap();\n        v.is_uppercase() || v == 0xAC00 ||\n\
    \            v == 0xAC05 || v == 0xAC0E || v == 0xAC12 || v == 0xAC15\n    }\n\
    \n    let mut vowels = String::new();\n\n    for c in word.chars().nth(word.len()\
    \ - 1) {\n        let mut found = false;\n        for &i in &c {\n           \
    \ if is_vowel(&i) {\n                found = true;\n                break;\n \
    \           }\n        }\n        if !found {\n            vowels.push_str(&c.to_string());\n\
    \        }\n    }\n    if vowels.len() == 0 {\n        \"\"\n    } else {\n  \
    \      vowels\n    }", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"];\n\n    for i in word.rchars().rev().skip_while(|c| !vowels.contains(c))\
    \ {\n        let vowel = vowels[vowels.iter().position(|&x| x == &i).unwrap()];\n\
    \        if i != vowel {\n            return String::from(vowel);\n        }\n\
    \    }\n    \"\"", "    let mut vowels = \"aeiouAEIOU\".to_string();\n    for\
    \ c in word.chars().rev() {\n        if let Some(index) = vowels.rfind(&c.to_lowercase())\
    \ {\n            if index != 0 {\n                vowels = vowels[..index];\n\
    \            }\n        }\n    }\n    vowels", "    let mut vowels: HashSet<&str>\
    \ = HashSet::new();\n    vowels.insert(\"a\".to_owned());\n    vowels.insert(\"\
    e\".to_owned());\n    vowels.insert(\"i\".to_owned());\n    vowels.insert(\"o\"\
    .to_owned());\n    vowels.insert(\"u\".to_owned());\n    vowels.insert(\"y\".to_owned());\n\
    \    vowels.insert(\"a\".to_owned());\n    vowels.insert(\"e\".to_owned());\n\
    \    vowels.insert(\"i\".to_owned());\n    vowels.insert(\"o\".to_owned());\n\
    \    vowels.insert(\"u\".to_owned());\n    vowels.insert(\"y\".to_owned());\n\
    \    vowels.insert(\"a\".to_owned());\n    vowels.insert(\"e\".to_owned());\n\
    \    vowels.insert(\"i\".to_owned());\n    vowels.insert(\"o\".to_owned());\n\
    \    vowels.insert(\"u\".to_owned());\n    vowels.insert(\"y\".to_owned());\n\
    \    let mut word: Vec<&str> = word.split_whitespace();\n    let mut index: usize\
    \ = 0;\n    let mut min_vowel: Option<&str> = None;\n    let mut vowel_index:\
    \ usize = 0;\n    loop {\n        if word.len() <= index + 1 {\n            break;\n\
    \        }\n        let first_char = &word[index];\n        let last_char = &word[word.len()\
    \ - 1];\n        if vowels.contains(first_char) {\n            vowel_index = index;\n\
    \        }\n        if vowels.contains(last_char) {\n            vowel_index =\
    \ word.len() - 1;\n        }\n        index += 1;\n        let vowel_range = &vowels[vowel_index..(vowel_index\
    \ + 1)];\n        for vowel in vowel_range {\n            if first_char == vowel\
    \ {\n                break;\n            }\n            if vowel == last_char\
    \ {\n                break;\n            }\n            let first_char = &word[index];\n\
    \            let last_char = &word[word.len() - 1];\n            if vowels.contains(first_char)\
    \ {\n                vowel_index = index;\n            }\n            if vowels.contains(last_char)\
    \ {\n                vowel_index = word.len() - 1;\n            }\n          \
    \  index += 1;\n            if index >= word.len() {\n                break;\n\
    \            }\n        }\n        if index >= word.len() {\n            break;\n\
    \        }\n        let vowel_range = &vowels[vowel_index..(vowel_index + 1)];\n\
    \        let mut min_vowel_char = first_char;\n        for vowel in vowel_range\
    \ {\n            if min_vowel_char == vowel {\n                min_vowel_char\
    \ = first_char", "    let mut i = word.len();\n    while i >= 0 {\n        match\
    \ word.chars().position(|&c| c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n            None => return \"\",\n            Some(start) => {\n\
    \                if word.chars().position(|&c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                    i += start - 'a' as usize -\
    \ 1;\n                } else {\n                    i -= start;\n            \
    \    }\n            }\n        }\n        i--;\n    }\n    return \"\";", "  \
    \  let vowel_set = vec!['a', 'e', 'i', 'o', 'u'];\n    word.chars().enumerate().filter(|&(idx,\
    \ _)| vowel_set.contains(&word.chars().nth(idx).unwrap()))\n        .enumerate()\n\
    \        .map(|(idx, vowel)| word.chars().nth(idx + 1).unwrap())\n        .filter(|&c|\
    \ vowel == 'u' || vowel == 'o' || vowel == 'i' || vowel == 'e')\n        .first()\n\
    \        .unwrap()\n        .to_string()", "    let mut res = String::new();\n\
    \    for vowel in 'a' .. 'z' {\n        let mut curr_idx = word.len();\n     \
    \   loop {\n            let c = word[curr_idx - 1];\n            curr_idx = curr_idx.saturating_sub(1);\n\
    \            if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n                res\
    \ = c.to_string() + res;\n            }\n            else {\n                break;\n\
    \            }\n        }\n    }\n    return res;", "    // Your code here\n \
    \   let mut vowels = \"aeiou\";\n    let mut word_list = word.chars();\n    while\
    \ let Some(c) = word_list.next() {\n        if vowels.contains(&c.to_lowercase())\
    \ {\n            let pos = word_list.position(|c| *c == c);\n            word_list\
    \ = word_list.skip(pos).take(1);\n        } else {\n            word_list = word_list.skip(1).take(1);\n\
    \        }\n    }\n    word_list.next()", "    let mut vowels = vec![\"\"; word.len()];\n\
    \    vowels.iter_mut().enumerate().for_each(|(i, &v)| {\n        if i == 0 {\n\
    \            if v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u' {\n \
    \               vowels[i] = v;\n            }\n        } else if i == word.len()\
    \ - 1 {\n            if v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u'\
    \ {\n                vowels[i] = v;\n            }\n        } else {\n       \
    \     let next = match i {\n                0 => i + 1,\n                _ =>\
    \ i + 2,\n            };\n            if v == 'a' || v == 'e' || v == 'i' || v\
    \ == 'o' || v == 'u' {\n                vowels[i] = v;\n            }\n      \
    \      if v == 'a' && word[next] == 'a' {\n                vowels[i] = v;\n  \
    \          }\n            if v == 'e' && word[next] == 'e' {\n               \
    \ vowels[i] = v;\n            }\n            if v == 'i' && word[next] == 'i'\
    \ {\n                vowels[i] = v;\n            }\n            if v == 'o' &&\
    \ word[next] == 'o' {\n                vowels[i] = v;\n            }\n       \
    \     if v == 'u' && word[next] == 'u' {\n                vowels[i] = v;\n   \
    \         }\n        }\n    });\n    vowels\n        .iter()\n        .cloned()\n\
    \        .max_by_key(|&x| {\n            let mut i = 0;\n            word\n  \
    \              .bytes()\n                .enumerate()\n                .filter(|&(a,\
    \ b)| *a != b)\n                .filter(|&(a, b)| a == x)\n                .next()\n\
    \                .unwrap()\n                .1 == x\n        })\n        .unwrap()\n\
    \        .to_string()", "    let vowels_start = vec![\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    let vowels_end = vec![\"e\", \"i\", \"o\", \"u\"];\n    \n    let\
    \ mut vowel_iter: Vec<&str> = word.chars().filter(|c| vowels_start.contains(&c)).chain(word.chars().filter(|c|\
    \ vowels_end.contains(&c))).collect();\n    \n    vowel_iter.sort_by_key(|&c|\
    \ vowels_start.iter().position(|&v1| v1 == c).unwrap());\n    \n    vowel_iter.pop().unwrap()",
  "    let mut vowels = Vec::new();\n    for ch in word.chars() {\n        if ch.is_vowel()\
    \ {\n            vowels.push(ch);\n        }\n    }\n    if vowels.len() == 0\
    \ {\n        return \"\";\n    }\n    let mut i = 0;\n    let mut j = vowels.len()\
    \ - 1;\n    while i <= j {\n        let mut vowel = vowels[i];\n        i += 1;\n\
    \        while j < vowels.len() && vowels[j].is_vowel() {\n            j -= 1;\n\
    \        }\n        if i <= j {\n            if let Some(consonant_after_vowel)\
    \ = word[i + ..j].chars().last() {\n                if consonant_after_vowel.is_vowel()\
    \ {\n                    return vowel.to_string();\n                }\n      \
    \      }\n        }\n    }\n    return \"\";", "    if word.len() == 0 {\n   \
    \     return \"\".to_string();\n    }\n    \n    let mut vowel = \"a\".to_string();\n\
    \    let mut vowel_start_pos = word.len() - 1;\n    let mut vowel_end_pos = word.len()\
    \ - 1;\n    \n    let mut consonant = \"b\".to_string();\n    let mut consonant_start_pos\
    \ = 0;\n    let mut consonant_end_pos = 0;\n    \n    while vowel_start_pos >=\
    \ 0 && vowel_end_pos >= 0 && consonant_start_pos >= 0 && consonant_end_pos >=\
    \ 0 {\n        if word[vowel_end_pos].is_lowercase() {\n            if word[vowel_start_pos].is_lowercase()\
    \ && word[vowel_end_pos].to_string().eq_ignore_ascii_case(vowel) {\n         \
    \       vowel = vowel.into();\n                vowel_end_pos += 1;\n         \
    \       vowel_start_pos -= 1;\n            }\n        }\n        if word[consonant_end_pos].is_lowercase()\
    \ {\n            if word[consonant_start_pos].is_lowercase() && word[consonant_end_pos].to_string().eq_ignore_ascii_case(consonant)\
    \ {\n                consonant = consonant.into();\n                consonant_end_pos\
    \ += 1;\n                consonant_start_pos -= 1;\n            }\n        }\n\
    \        \n        if vowel_start_pos >= 0 {\n            vowel = word[vowel_start_pos].to_string().eq_ignore_ascii_case(\"\
    a\")\n                || word[vowel_start_pos].to_string().eq_ignore_ascii_case(\"\
    i\")\n                || word[vowel_start_pos].to_string().eq_ignore_ascii_case(\"\
    o\")\n                || word[vowel_start_pos].to_string().eq_ignore_ascii_case(\"\
    u\")\n                || word[vowel_start_pos].to_string().eq_ignore_ascii_case(\"\
    e\")\n                || word[vowel_start_pos].to_string().eq_ignore_ascii_case(\"\
    \xE4\")\n                || word[vowel_start_pos].to_string().eq_ignore_ascii_case(\"\
    \xF6\")\n                || word[vowel_start_pos].to_string().eq_ignore_ascii_case(\"\
    \xFC\")\n                || word[vowel_start_pos].to_string().eq_ignore_ascii_case(\"\
    c\") // TODO\n                || word[vowel_start_pos].to_string().eq_ignore_ascii_case(\"\
    d\")\n                || word[vowel_start_pos].to_string().eq_ignore_ascii_case(\"\
    p\")\n                || word[vowel_start_pos].to_string().eq_ignore_ascii_case(\"\
    f\")\n                || word[vowel_start_pos].to_string().eq_ignore_", "    let\
    \ mut word = word.to_lowercase();\n    let mut vowels: Vec<&str> = vec![\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    let mut vowel_count: usize = 0;\n    let mut\
    \ start = 0;\n    let mut end = 0;\n    let mut current_char: char;\n    let mut\
    \ next_char: char;\n    for char in word.chars() {\n        if vowels.contains(char)\
    \ {\n            vowel_count += 1;\n        } else {\n            if vowel_count\
    \ < 2 {\n                start = end;\n            } else if vowel_count == 2\
    \ {\n                start = end;\n                end = end;\n            } else\
    \ {\n                break;\n            }\n        }\n    }\n    if vowel_count\
    \ < 2 {\n        return \"\";\n    }\n    if vowel_count == 2 {\n        return\
    \ vowels[0];\n    }\n    let mut best_match: char = \"\";\n    for _ in 0..(vowel_count\
    \ - 1) {\n        best_match = \"\";\n        for _ in 0..(vowel_count - 1) {\n\
    \            current_char = word[start];\n            next_char = word[end];\n\
    \            if current_char != next_char {\n                break;\n        \
    \    }\n            best_match += next_char;\n            start += 1;\n      \
    \      end += 1;\n        }\n        if best_match != \"\" {\n            return\
    \ best_match;\n        }\n    }\n    return \"\";", "    let mut counter = 0;\n\
    \    let mut vowels: Vec<&str> = vec![];\n    for i in word.chars() {\n      \
    \  if let c = 'a' <= i && i <= 'z' {\n            counter++;\n            vowels.push(i);\n\
    \        }\n        if let c = 'A' <= i && i <= 'Z' {\n            counter++;\n\
    \            vowels.push(i);\n        }\n    }\n    if counter <= 1 {\n      \
    \  return \"\".to_string();\n    }\n    vowels.sort_by_key(|&x| x.cmp(&word[word.len()\
    \ - counter..].to_lowercase()));\n    vowels.pop().unwrap()", "    if word.len()\
    \ < 2 {\n        return \"\".to_string();\n    }\n\n    let mut res = String::new();\n\
    \    let vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowel\
    \ = String::new();\n    let mut i = 0;\n\n    while i < word.len() {\n       \
    \ for v in vowels.iter() {\n            if word[i] == v {\n                vowel\
    \ = v;\n                i += 1;\n            }\n        }\n    }\n\n    while\
    \ vowel.len() > 0 {\n        match vowel.chars().nth(vowel.len() - 1) {\n    \
    \        Some(c) if c >= 'a' && c <= 'z' => res += c.to_string(),\n          \
    \  Some(c) if c >= 'A' && c <= 'Z' => res += c.to_string(),\n            _ =>\
    \ res += vowel.to_string(),\n        }\n    }\n\n    return res.to_string();",
  "    if word.len() < 2 {\n        return \"\";\n    }\n    let mut vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"];\n    vowels.sort();\n    vowels.reverse();\n\
    \    let mut cur_letter = &word[word.len() - 1];\n    for vowel in vowels {\n\
    \        if cur_letter == vowel {\n            return vowel.to_string();\n   \
    \     }\n        cur_letter = &word[word.len() - 1 - vowel.len()];\n    }\n  \
    \  return \"\".to_string();", "    let mut left = 0\n    let mut right = word.len()\
    \ - 1;\n    while left < right {\n        let current = word.chars().nth(left).unwrap();\n\
    \        let next_char = word.chars().nth(right).unwrap();\n        if current\
    \ == \"a\" {\n            if next_char != \"a\" {\n                return \"\"\
    ;\n            } else {\n                left += 1;\n                right -=\
    \ 1;\n            }\n        } else if current == \"e\" {\n            if next_char\
    \ != \"e\" {\n                return \"\";\n            } else {\n           \
    \     left += 1;\n                right -= 1;\n            }\n        } else if\
    \ current == \"i\" {\n            if next_char != \"i\" {\n                return\
    \ \"\";\n            } else {\n                left += 1;\n                right\
    \ -= 1;\n            }\n        } else if current == \"o\" {\n            if next_char\
    \ != \"o\" {\n                return \"\";\n            } else {\n           \
    \     left += 1;\n                right -= 1;\n            }\n        } else if\
    \ current == \"u\" {\n            if next_char != \"u\" {\n                return\
    \ \"\";\n            } else {\n                left += 1;\n                right\
    \ -= 1;\n            }\n        }\n    }\n    \"\".to_string()", "    let mut\
    \ word_start = word.char_indices().next().unwrap();\n    let mut current_vowel\
    \ = String::new();\n    let mut current_consonant = String::new();\n    loop {\n\
    \        let current_vowel = word_start.index(b\"a\").unwrap().unwrap() + 1;\n\
    \        let current_consonant = word_start.index(b\"b\").unwrap().unwrap() +\
    \ 1;\n        if current_vowel >= word.len() {\n            break;\n        }\n\
    \        if word.chars().last().unwrap() as u8 == word.chars().nth(current_consonant).unwrap()\
    \ as u8 {\n            return current_vowel.to_string();\n        }\n        word_start.seek(current_vowel);\n\
    \    }\n    \"\".to_string()", "    let mut vowel_index = 0;\n    let mut prev_consonant_index\
    \ = 0;\n    let mut prev_vowel_index = 0;\n    let mut vowels_set: HashSet<String>\
    \ = HashSet::new();\n    let mut cur_consonant_index = word\n        .chars()\n\
    \        .map(|c| c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \        .count() as u32;\n    let mut cur_vowel_index = word\n        .chars()\n\
    \        .filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        .count() as u32;\n    let mut cur_vowel_index2 = word\n        .chars()\n\
    \        .filter(|c| c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \        .count() as u32;\n    for c in word.chars() {\n        if c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n            vowels_set.insert(&word.to_string());\n\
    \        }\n    }\n    vowels_set.iter().cloned().filter(|&x| vowels_set.contains(&x.to_string()).unwrap_or(false)).iter().cloned().fold(String::new(),\
    \ |a, &x| *a = x.to_string());\n    while vowel_index < cur_vowel_index {\n  \
    \      vowel_index += 1;\n        prev_consonant_index = cur_consonant_index;\n\
    \        prev_vowel_index = cur_vowel_index;\n        while vowel_index < cur_vowel_index\
    \ {\n            cur_consonant_index -= 1;\n            if cur_consonant_index\
    \ == 0 {\n                cur_consonant_index = word\n                    .chars()\n\
    \                    .filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n                    .count() as u32;\n                cur_vowel_index\
    \ -= 1;\n                if cur_vowel_index == 0 {\n                    cur_vowel_index\
    \ = word\n                        .chars()\n                        .filter(|c|\
    \ c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n                \
    \        .count() as u32;\n                    cur_vowel_index2 = word\n     \
    \                   .chars()\n                        .filter(|c| c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U')\n                        .count()\
    \ as u32;\n                }\n            }\n            let mut cur_vowel_index\
    \ = word\n                .chars()\n                .filter(|c| c == 'a' || c\
    \ == 'e' || ", "    word.chars().enumerate().find(|&(_, c)| {\n        let idx\
    \ = c.to_string();\n        (&c.to_string()[..] == \"a\" || &c.to_string()[..]\
    \ == \"e\" || &c.to_string()[..] == \"i\" || &c.to_string()[..] == \"o\" || &c.to_string()[..]\
    \ == \"u\") && c.to_string().chars().any(|&b| *b != &idx)\n    }).unwrap()", " \
    \   let mut result = String::new();\n    word.chars()\n        .windows(2)\n \
    \       .filter(|&c| c.is_ascii_letter())\n        .filter(|&c| !c.is_ascii_upper())\n\
    \        .cloned()\n        .for_each(|c| {\n            if let Some(&(_,c)) =\
    \ c.as_ref().find_last_mut() {\n                result = if c == c.to_ascii_lowercase()\
    \ {\n                    c.to_ascii_uppercase()\n                } else {\n  \
    \                  c.to_ascii_lowercase()\n                };\n            }\n\
    \        })\n        .collect();\n    \n    result", "    \n    let mut vowels:\
    \ Vec<String> = vec![\"\", \"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort_by(|a,\
    \ b| {\n        word.chars().nth(0).unwrap() <=> a.chars().nth(0).unwrap()\n \
    \   });\n    \n    if vowels.len() == 0 {\n        return String::new();\n   \
    \ }\n    \n    vowels[0]", "    word.chars().enumerate().take_while( |&(_,c)|\
    \ *c != '\\0' ).collect::<Vec<(usize, char)>>().iter().enumerate().map(|&(_,c)|\
    \ *c as char).filter(|c| *c != 'u').next().unwrap().unwrap()", "    let mut vowel_index\
    \ = 0;\n    let mut consonant_index = 0;\n    let mut is_found = false;\n    let\
    \ mut min_vowel_dist = Vec::new();\n\n    // Get the minimum distance from the\
    \ right side of the given word (to the closest \n    // vowel)\n    while !is_found\
    \ && consonant_index < word.len() {\n        let c = word[consonant_index];\n\n\
    \        // If the current character is not a consonant, then break the loop\n\
    \        if !c.is_lowercase() {\n            break;\n        }\n\n        // Check\
    \ all possible combinations for vowels and consonants\n        for vowel in &[\"\
    a\", \"e\", \"i\", \"o\", \"u\"] {\n            if vowel.chars().all(|c| word.contains(&c))\
    \ {\n                // Found a vowel, now check it has the minimum distance from\
    \ the right\n                // side of the given word (to the closest consonant)\n\
    \                if c.is_lowercase() {\n                    min_vowel_dist.append(vowel.len()\
    \ - word[vowel_index].len());\n                }\n            }\n        }\n \
    \       \n        // Increment the index of vowel found\n        vowel_index +=\
    \ 1;\n        // Increment the index of consonant found\n        consonant_index\
    \ += 1;\n    }\n\n    // If no vowels were found, return an empty string\n   \
    \ if !is_found {\n        return String::new();\n    }\n\n    // If no consonants\
    \ were found, return the minimum distance from the right side\n    // of the given\
    \ word (to the closest vowel)\n    if consonant_index >= word.len() {\n      \
    \  return String::from(min_vowel_dist);\n    }\n\n    // If all consonants were\
    \ found, return the minimum distance from the right side \n    // of the given\
    \ word (to the closest vowel)\n    if consonant_index == word.len() {\n      \
    \  return String::from(min_vowel_dist);\n    }", "    let mut vowel_index = 0u;\n\
    \    let mut consonant_index = word.length() - 1;\n    let mut consonant_vowel_index\
    \ = String::new();\n\n    // find first non-vowel \n    while vowel_index < word.len()\
    \ && word.chars().any(|c| !c.is_vowel()) {\n        vowel_index += 1;\n    }\n\
    \n    // find last non-vowel\n    while consonant_index >= 0 && word.chars().any(|c|\
    \ !c.is_vowel()) {\n        consonant_index -= 1;\n    }\n\n    while vowel_index\
    \ < word.len() && consonant_index >= 0 {\n        if word.chars()[vowel_index].is_vowel()\
    \ && word.chars()[consonant_index].is_vowel() {\n            consonant_vowel_index.push(word.chars()[consonant_index].to_uppercase());\n\
    \            consonant_index -= 1;\n        }\n        vowel_index += 1;\n   \
    \     consonant_index -= 1;\n    }\n\n    if consonant_vowel_index.is_empty()\
    \ {\n        \"\"\n    } else {\n        consonant_vowel_index.clone()\n    }",
  "    let mut vowels: Vec<&str> = vec![\"A\",\"a\",\"E\",\"e\",\"I\",\"i\",\"O\"\
    ,\"o\",\"U\",\"u\"];\n    let mut word: String = word.to_string();\n    for vowel\
    \ in vowels.iter() {\n        if word.contains(vowel) {\n            let start_index\
    \ = word.rindex(vowel);\n            let end_index = start_index + 1;\n      \
    \      let end_index = end_index.unwrap_or(word.len());\n            return word.iter().take(end_index).collect::<String>().join(\"\
    \");\n        }\n    }\n    \"\"", "    word.chars().skip_while(|c| c == 'A' ||\
    \ c == 'a' || c == 'E' || c == 'e' || c == 'I' || c == 'i' || c == 'O' || c ==\
    \ 'o' || c == 'U' || c == 'u').fold(\"\".to_string(), |mut x, c| {\n        match\
    \ x.chars().nth(0) {\n            Some(_) => {\n                let len = c -\
    \ 'A'.to_string();\n                if len < 0 {\n                    return x;\n\
    \                } else if len < 4 {\n                    x.push(c);\n       \
    \         }\n            }\n            None => x,\n        }\n    });", "   \
    \ if word.len() <= 2 {\n        return \"\";\n    }\n\n    let mut vowels = vec![\"\
    A\", \"a\", \"E\", \"e\", \"I\", \"i\", \"O\", \"o\", \"U\", \"u\", \"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    let mut word = word.to_lowercase();\n    let mut\
    \ prev_vowel = 0;\n    let mut next_vowel = 0;\n    let mut pos = 0;\n    loop\
    \ {\n        pos = word.rfind('a', pos);\n        if pos == 0 {\n            return\
    \ \"\";\n        }\n        let vowel = &vowels[(pos + 1) as usize];\n       \
    \ // if pos > 0 || (prev_vowel == 0 && vowel == 'a') {\n        if pos > 0 ||\
    \ prev_vowel == 0 {\n            if !word.starts_with(vowel) {\n             \
    \   // if prev_vowel != 0 {\n                if prev_vowel != vowel {\n      \
    \              prev_vowel = vowel;\n                }\n                continue;\n\
    \            }\n        }\n        let next_vowel = &vowels[(pos + 2) as usize];\n\
    \        let mut pos = pos + 1;\n        if next_vowel == 0 && vowel == 'a' {\n\
    \            next_vowel = 'u';\n        }\n        if next_vowel == vowel {\n\
    \            break;\n        }\n    }\n    return if word.ends_with(vowel) {\n\
    \        vowel.into()\n    } else {\n        word.chars().nth(pos + 1).unwrap_or(String::new()).into()\n\
    \    };", "    if word[word.len()-1] == 'a' || word[word.len()-1] == 'e' || word[word.len()-1]\
    \ == 'i' || word[word.len()-1] == 'o' || word[word.len()-1] == 'u' || word[word.len()-1]\
    \ == 'A' || word[word.len()-1] == 'E' || word[word.len()-1] == 'I' || word[word.len()-1]\
    \ == 'O' || word[word.len()-1] == 'U' {\n        return \"\".to_string();\n  \
    \  }\n    \n    word.chars().enumerate().filter_map(|(idx, char)| {\n        if\
    \ char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' || char\
    \ == 'A' || char == 'E' || char == 'I' || char == 'O' || char == 'U' {\n     \
    \       Some((idx, char))\n        } else {\n            None\n        }\n   \
    \ }).enumerate().filter_map(|(idx, (idx, char))| {\n        if char == 'a' ||\
    \ char == 'e' || char == 'i' || char == 'o' || char == 'u' || char == 'A' || char\
    \ == 'E' || char == 'I' || char == 'O' || char == 'U' {\n            Some((idx,\
    \ char))\n        } else {\n            None\n        }\n    }).filter_map(|(idx,\
    \ (idx, char))| {\n        if char == 'a' || char == 'e' || char == 'i' || char\
    \ == 'o' || char == 'u' || char == 'A' || char == 'E' || char == 'I' || char ==\
    \ 'O' || char == 'U' {\n            Some((idx, char))\n        } else {\n    \
    \        None\n        }\n    }).filter_map(|(idx, (idx, char))| {\n        if\
    \ char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' || char\
    \ == 'A' || char == 'E' || char == 'I' || char == 'O' || char == 'U' {\n     \
    \       Some((idx, char))\n        } else {\n            None\n        }\n   \
    \ }).filter_map(|(idx, (idx, char))| {\n        if char == 'a' || char == 'e'\
    \ || char == 'i' || char == 'o' || char == 'u' || char == 'A' || char == 'E' ||\
    \ char == 'I' || char == 'O' || char == 'U' {\n            Some((idx, char))\n\
    \        } else {\n            None\n        }\n    }).filter_map(|(idx, (idx,\
    \ char))| {\n        if char == 'a' || char == 'e' || char == 'i' || char == 'o'\
    \ || char == 'u' || char == 'A' || char == 'E' || char == 'I' || char == 'O' ||\
    \ char == 'U' {", "    let mut vowels = \"aeiouAEIOU\".to_string();\n    \n  \
    \  for s in word.chars() {\n        let r = vowels.rfind(s).unwrap_or(word.len()\
    \ - 1);\n        if r < word.len() - 1 {\n            return vowels[r + 1 as usize\
    \ - 1];\n        }\n    }\n    return String::new();", "    word\n        .chars()\n\
    \        .enumerate()\n        .filter_map(|(idx, ch)| {\n            if ch ==\
    \ b'a' || ch == b'e' || ch == b'i' || ch == b'o' || ch == b'u' {\n           \
    \     Some(idx)\n            } else {\n                None\n            }\n \
    \       })\n        .take_while(|idx| idx > 0 && idx < word.len())\n        .map(|idx|\
    \ word.chars().nth(idx).unwrap())\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .map(|ch| {\n            if ch == b'a' || ch == b'e' || ch == b'i' ||\
    \ ch == b'o' || ch == b'u' {\n                ch\n            } else {\n     \
    \           \"\"\n            }\n        })\n        .collect::<String>()", " \
    \   let mut vowels = [\"\"];\n    for ch in word.chars() {\n        if ch.is_uppercase()\
    \ && ch.is_vowel() {\n            vowels.push(ch);\n        }\n        if ch.is_lowercase()\
    \ && ch.is_vowel() {\n            vowels.push(ch);\n        }\n    }\n    let\
    \ mut vowels_iter = vowels.iter().rev();\n    vowels_iter.next();\n    let vowel\
    \ = vowels_iter.next().unwrap();\n    vowel", "    let vowels = \"aeiouAEIOU\"\
    .to_string();\n    if word.len() < 3 || word.len() > len(vowels) {\n        return\
    \ \"\";\n    }\n    let mut current_index = 0;\n    let mut vowels_iter = vowels.chars().nth(word.len()\
    \ - 1).unwrap().unwrap();\n    let mut current_vowel = vowels_iter;\n    if vowels_iter.starts_with(current_vowel)\
    \ {\n        current_vowel = vowels_iter.next();\n    }\n    for (i, ch) in word.chars().enumerate()\
    \ {\n        if vowels_iter.contains(ch) {\n            current_vowel = vowels_iter;\n\
    \            current_index = i;\n            break;\n        }\n    }\n    return\
    \ current_vowel.to_string()", "    let mut vowel_count = 0;\n    let mut index\
    \ = 0;\n\n    while index < word.len() {\n        if word[index] == 'a' || word[index]\
    \ == 'e' || word[index] == 'i' || word[index] == 'o' || word[index] == 'u' {\n\
    \            vowel_count = vowel_count + 1;\n        }\n\n        index = index\
    \ + 1;\n    }\n\n    if word.len() == vowel_count {\n        return \"\".to_string();\n\
    \    }\n\n    let mut vowel_index = vowel_count - 1;\n    while vowel_index >=\
    \ 0 {\n        if word.len() == vowel_count {\n            return \"\".to_string();\n\
    \        }\n        if word[vowel_index] == 'a' || word[vowel_index] == 'e' ||\
    \ word[vowel_index] == 'i' || word[vowel_index] == 'o' || word[vowel_index] ==\
    \ 'u' {\n            return word[vowel_index].to_string();\n        }\n      \
    \  vowel_index = vowel_index - 1;\n    }\n    return \"\".to_string();", "   \
    \ let mut vowel = \"a\"; // a is always considered as vowel before finding any\
    \ vowel that is consonant from right side of word.\n    let mut vowel_position\
    \ = word.len();\n    let mut consonant_position = word.len() - 1;\n    let mut\
    \ consonant_index = consonant_position;\n    while consonant_index > 0 {\n   \
    \     if word[consonant_index] >= 'a' && word[consonant_index] <= 'z' {\n    \
    \        vowel = &word[vowel_position - 1] as String;\n            break;\n  \
    \      } else if word[consonant_index] >= 'A' && word[consonant_index] <= 'Z'\
    \ {\n            vowel = &word[vowel_position - 1] as String;\n            break;\n\
    \        }\n        consonant_index -= 1;\n    }\n\n    while consonant_position\
    \ > 0 {\n        if word[consonant_position] >= 'A' && word[consonant_position]\
    \ <= 'Z' {\n            vowel = &word[vowel_position - 1] as String;\n       \
    \     break;\n        }\n        consonant_position -= 1;\n    }\n    vowel",
  "    let vowel = word.chars().filter(|&i| \n        i != 'a' && i != 'e' && i !=\
    \ 'i' && i != 'o' && i != 'u').next()\n        .unwrap();\n    word.chars().skip_while(|&i|\
    \ \n        i != 'a' && i != 'e' && i != 'i' && i != 'o' && i != 'u').take_while(|&i|\
    \ \n        i != 'a' && i != 'e' && i != 'i' && i != 'o' && i != 'u')\n      \
    \  .filter_map(|i| if i == vowel { Some(0) } else { None })\n        .next().unwrap();",
  "    let vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for i in word.rsplitn(2,\
    \ 'a') {\n        if vowels.contains(&i.last().unwrap()) {\n            return\
    \ i.last().unwrap();\n        }\n    }\n    return \"\";", "    let vowels = \"\
    aeiouAEIOU\".to_string();\n    let mut word = word.to_lowercase();\n    let mut\
    \ vowels_index = -1;\n    let mut vowels_char: Char = vowels.to_lowercase()[0];\n\
    \    let mut consonants_index = -1;\n    let mut consonants_char: Char = \"bcdhjmnpqrstvxz\"\
    .to_lowercase()[0];\n\n    while vowels_index < vowels.len() - 1 && consonants_index\
    \ < \"bcdhjmnpqrstvxz\".to_lowercase().len() - 1 {\n        if word.chars().any(|c|\
    \ c != consonants_char) {\n            vowels_index += 1;\n            consonants_index\
    \ += 1;\n        } else {\n            vowels_index += 1;\n        }\n       \
    \ if word.chars().any(|c| c != vowels_char) {\n            consonants_index +=\
    \ 1;\n        } else {\n            consonants_index += 1;\n        }\n      \
    \  vowels_char = vowels.to_lowercase()[vowels_index];\n        consonants_char\
    \ = consonants.to_lowercase()[consonants_index];\n    }\n    if vowels_index <\
    \ vowels.len() - 1 {\n        vowels.to_lowercase()[vowels_index]\n    } else\
    \ if consonants_index < \"bcdhjmnpqrstvxz\".to_lowercase().len() - 1 {\n     \
    \   consonants.to_lowercase()[consonants_index]\n    } else {\n        \"\".to_string()\n\
    \    }", "    let vowels = \"AEIOUaeiou\".to_string();\n    let vowel = word.chars().rev()\n\
    \        .skip_while(|c| c != 'A' || c != 'E' || c != 'I' || c != 'O' || c !=\
    \ 'U')\n        .take_while(|c| c != 'a' || c != 'e' || c != 'i' || c != 'o' ||\
    \ c != 'u')\n        .find(|c| vowels.contains(c.to_string()))\n        .unwrap();\n\
    \    let vowel_pos = word.chars().skip_while(|c| c != 'A' || c != 'E' || c !=\
    \ 'I' || c != 'O' || c != 'U').find(|c| vowels.contains(c.to_string())).unwrap();\n\
    \    let mut vowel_left = word.chars().take_while(|c| c != 'A' || c != 'E' ||\
    \ c != 'I' || c != 'O' || c != 'U').find(|c| vowels.contains(c.to_string())).unwrap();\n\
    \    vowel_left.cmp(&vowel_pos)\n        .unwrap()\n        .unwrap_or(-1)\n \
    \       .to_string()", "    let mut vowels: Vec<&str> = vec![];\n    let mut char_iter\
    \ = word.char_indices();\n    let mut letter_iter = char_iter.next();\n    while\
    \ let Some(Some(idx)) = letter_iter {\n        let char = &word[idx];\n      \
    \  if let Some(vowel) = char.chars().filter(|c| *c >= 'a' && *c <= 'z').next()\
    \ {\n            if vowels.contains(&vowel) {\n                break;\n      \
    \      }\n            vowels.push(vowel);\n            letter_iter = char_iter.next();\n\
    \        } else {\n            break;\n        }\n    }\n    vowels.sort_unstable_by_key(|&x|\
    \ *x);\n    vowels.iter().next().unwrap()", "    word.chars().filter(|c| c !=\
    \ 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u').fold(String::new(), |memo,\
    \ item| {\n        let vowel = if item == 'a' { |c| c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u' }\n        else { |c| c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u' }\n        memo.iter_mut().take_while(|c| c != 'a' && c != 'e' && c\
    \ != 'i' && c != 'o' && c != 'u').take(vowel.len()).collect::<String>().unwrap_or(\"\
    \")\n    })", "    \n    // Write your code here\n    let mut vowels: Vec<Char>\
    \ = vec!['a','e','i','o','u'];\n    let mut consonants: Vec<Char> = vec!['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n\
    \    let mut count: usize = 0;\n    word.chars().filter(|char| consonants.contains(char)).cloned().for_each(|con|\
    \ {\n        vowels.filter(|char| char == con).cloned().for_each(|vowel| {\n \
    \           if word.ends_with(vowel) {\n                count++;\n           \
    \ }\n        });\n    });\n    vowels[count - 1].to_string()", "    let mut vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count = word.len();\n    let mut\
    \ i = word.len();\n\n    while i >= 0 {\n        if word.chars().all(|c| vowels.contains(&c))\
    \ {\n            vowels = vowels.iter().cloned().collect();\n            vowels.retain(|c|\
    \ c != 'a');\n            vowels.retain(|c| c != 'e');\n            vowels.retain(|c|\
    \ c != 'i');\n            vowels.retain(|c| c != 'o');\n            vowels.retain(|c|\
    \ c != 'u');\n            vowels.retain(|c| c != 'A');\n            vowels.retain(|c|\
    \ c != 'E');\n            vowels.retain(|c| c != 'I');\n            vowels.retain(|c|\
    \ c != 'O');\n            vowels.retain(|c| c != 'U');\n            vowels.retain(|c|\
    \ c != 'a');\n            vowels.retain(|c| c != 'e');\n            vowels.retain(|c|\
    \ c != 'i');\n            vowels.retain(|c| c != 'o');\n            vowels.retain(|c|\
    \ c != 'u');\n            vowels.retain(|c| c != 'A');\n            vowels.retain(|c|\
    \ c != 'E');\n            vowels.retain(|c| c != 'I');\n            vowels.retain(|c|\
    \ c != 'O');\n            vowels.retain(|c| c != 'U');\n        }\n        i -=\
    \ 1;\n    }\n\n    vowels.iter().cloned().collect::<String>().to_string()", " \
    \   // Your code here\n    let mut consonants = String::new();\n    for char in\
    \ word.chars() {\n        if char == 'a' || char == 'e' || char == 'i' || char\
    \ == 'o' || char == 'u' {\n            consonants.push_str(char.to_string());\n\
    \        }\n    }\n    if consonants.len() < 2 { return String::new(); }\n   \
    \ let mut vowels = String::new();\n    for char in consonants.chars() {\n    \
    \    if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u'\
    \ {\n            vowels.push_str(char.to_string());\n        }\n    }\n    if\
    \ vowels.len() < 2 { return String::new(); }\n    if vowels.len() > 2 { return\
    \ String::new(); }\n    if vowels.len() == 1 {\n        return vowels.to_string();\n\
    \    }\n    let mut left_bound = word;\n    let mut right_bound = word;\n    let\
    \ mut i = 0;\n    for char in left_bound.chars() {\n        if char == 'a' ||\
    \ char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n            left_bound\
    \ = &left_bound[..i].to_string();\n            right_bound = &right_bound[..i].to_string();\n\
    \            i += 1;\n        }\n    }\n    let mut closest_vowel: Option<String>\
    \ = None;\n    while i < left_bound.len() {\n        if left_bound[..left_bound.len()\
    \ - left_bound.len() - right_bound.len()].contains(&vowels[..vowels.len()]) {\n\
    \            closest_vowel = Some(vowels[..vowels.len()]);\n            break;\n\
    \        }\n        i += 1;\n    }\n    closest_vowel.unwrap()", "    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let\
    \ vowel_pos = word.chars().zip(vowels.clone()).enumerate().collect::<Vec<_>>();\n\
    \    let mut last_consonant_pos = 0;\n    for (ref pos, ref consonant) in vowel_pos\
    \ {\n        if consonant != word[last_consonant_pos] {\n            last_consonant_pos\
    \ = pos;\n        }\n    }\n\n    let mut found_consonant_pos = 0;\n    let mut\
    \ min_diff = std::i32::MAX;\n    for (ref pos, ref consonant) in vowel_pos {\n\
    \        if consonant != word[found_consonant_pos] {\n            found_consonant_pos\
    \ = pos;\n        }\n        let diff = pos - found_consonant_pos;\n        if\
    \ diff < min_diff {\n            min_diff = diff;\n        }\n    }\n    vowels[min_diff]",
  "    let mut s = String::new();\n    \n    for i in word.chars().skip(1).rev().peekable().skip(1).rev()\
    \ {\n        if let Some(vowel) = get_vowel(&i) {\n            if !s.starts_with(vowel)\
    \ {\n                s.push_str(vowel);\n            }\n        } else {\n   \
    \         break;\n        }\n    }\n    \n    s", "    // Write your code here\n\
    \    let mut vowels: Vec<&str> = Vec::new();\n    vowels.push(\"a\");\n    vowels.push(\"\
    e\");\n    vowels.push(\"i\");\n    vowels.push(\"o\");\n    vowels.push(\"u\"\
    );\n    vowels.push(\"y\");\n    vowels.push(\"A\");\n    vowels.push(\"E\");\n\
    \    vowels.push(\"I\");\n    vowels.push(\"O\");\n    vowels.push(\"U\");\n \
    \   vowels.push(\"Y\");\n    vowels.sort_unstable_by_key(|s| s.chars().count());\n\
    \    let mut res = String::new();\n    for vowel in vowels {\n        if word.contains(&vowel)\
    \ {\n            word.split_whitespace().last().unwrap().to_lowercase().split_ascii_lowercase().map(|c|\
    \ c).contains(vowel).unwrap_or(false)?\n                .resize(word.len(), |i,\
    \ j| {\n                    let mut res = String::new();\n                   \
    \ res.push_str(&word[i..j]);\n                    res.push_str(vowel);\n     \
    \               res\n                })\n                .unwrap_or(&\"\")\n \
    \       } else {\n            break;\n        }\n    }\n    res.to_lowercase()",
  "    let mut vowel = String::new();\n    let vowel_set = vec![\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n\n    for c in word.chars().rposition(|&c| c >= 'a' && c <=\
    \ 'z') {\n        if vowel_set.contains(c) {\n            vowel += c;\n      \
    \      break;\n        }\n    }\n\n    if vowel.len() == 0 {\n        vowel\n\
    \    } else {\n        vowel\n    }", "    word.chars().rposition(|&c|c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U').unwrap_or(word.len())", " \
    \   let mut vowels: Vec<&str> = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n\n \
    \   let mut current_consonant_pos = word.rfind('a');\n    let mut current_vowel_pos\
    \ = word.rfind('a');\n\n    let mut is_first = true;\n    loop {\n        if current_consonant_pos\
    \ == word.len() {\n            break;\n        }\n        if current_vowel_pos\
    \ == word.len() {\n            break;\n        }\n        if word[current_consonant_pos\
    \ - 1] == vowels[current_vowel_pos - 1] {\n            if !is_first {\n      \
    \          vowels.push(&vowels[current_vowel_pos - 1]);\n                is_first\
    \ = false;\n            }\n            current_consonant_pos--;\n            current_vowel_pos--;\n\
    \        }\n        else {\n            vowels.push(&vowels[current_vowel_pos\
    \ - 1]);\n            current_vowel_pos--;\n        }\n    }\n\n    if current_consonant_pos\
    \ < word.len() {\n        vowels.push(&vowels[current_vowel_pos - 1]);\n    }\n\
    \n    if current_vowel_pos < word.len() {\n        vowels.push(&vowels[current_vowel_pos\
    \ - 1]);\n    }\n\n    if current_consonant_pos < word.len() || current_vowel_pos\
    \ < word.len() {\n        return \"\".to_string();\n    }\n\n    let mut closest_vowel\
    \ = &vowels[word.rfind('a') - 1];\n    closest_vowel.push(&vowels[word.rfind('a')\
    \ + 1]);\n    closest_vowel.push(&vowels[word.rfind('e') + 1]);\n    closest_vowel.push(&vowels[word.rfind('i')\
    \ + 1]);\n    closest_vowel.push(&vowels[word.rfind('o') + 1]);\n    closest_vowel.push(&vowels[word.rfind('u')\
    \ + 1]);\n\n    for i in 0..closest_vowel.len() {\n        closest_vowel[i] =\
    \ &closest_vowel[i][0];\n    }\n\n    closest_vowel.join()", "    let vowels =\
    \ \"aeiouAEIOU\";\n    \n    // let len = word.len();\n    // let word_ends_vowel\
    \ = word.chars().all(|x| vowels.contains(String::from(x)));\n    // let word_starts_vowel\
    \ = word.chars().any(|x| vowels.contains(String::from(x)));\n    \n    // let\
    \ starts_vowel = word.chars().any(|x| vowels.contains(String::from(x)));\n   \
    \ // let ends_vowel = word.chars().all(|x| vowels.contains(String::from(x)));\n\
    \    let starts_vowel = word.chars().any(|x| vowels.contains(String::from(x)));\n\
    \    let ends_vowel = word.chars().all(|x| vowels.contains(String::from(x)));\n\
    \    \n    // let starts_vowel = word.chars().any(|x| vowels.contains(String::from(x)));\n\
    \    // let ends_vowel = word.chars().all(|x| vowels.contains(String::from(x)));\n\
    \    \n    if starts_vowel && ends_vowel {\n        // find vowel position\n \
    \       let vowel_pos = word.chars().rposition(|x| vowels.contains(String::from(x)));\n\
    \        // return if vowel position is inside string\n        if vowel_pos >=\
    \ 0 && vowel_pos < word.len() {\n            word.chars().position(|x| vowels.contains(String::from(x))\
    \ && x.is_uppercase())\n        } else {\n            return \"\".to_string();\n\
    \        }\n    } else {\n        return \"\".to_string();\n    }", "    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let\
    \ mut vowels_idx = vec![0];\n    let mut vowels_idx = vec![0];\n    let mut idx\
    \ = word.len() - 1;\n    let mut result = \"\";\n    while idx >= 0 && idx < word.len()\
    \ - 1 {\n        if word[idx] == vowels[vowels_idx[vowels_idx].clone()]\n    \
    \    {\n            vowels_idx[vowels_idx.len() - 1] = idx as usize;\n       \
    \ }\n        idx -= 1;\n    }\n    if vowels_idx[0] == 0 {\n        result = \"\
    \";\n    } else {\n        result = vowels[vowels_idx.len() - 1];\n    }\n   \
    \ result", "    let mut s = String::new();\n    for &c in word {\n        if c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            let mut\
    \ idx = 0;\n            while idx < word.len() && word.chars().nth(idx) != c {\n\
    \                idx += 1;\n            }\n            s.push_str(&word.chars().nth(idx));\n\
    \        } else {\n            break;\n        }\n    }\n    s", "    // Your\
    \ code here\n    word.chars().filter(|c| c.to_ascii_lowercase() == 'a' || c.to_ascii_lowercase()\
    \ == 'e' || c.to_ascii_lowercase() == 'i' || c.to_ascii_lowercase() == 'o' ||\
    \ c.to_ascii_lowercase() == 'u').fold(\"\".to_string(), |accum, c| {\n       \
    \ \n        match accum {\n            \"\" => c.to_ascii_lowercase(),\n     \
    \       _ => return \"\".to_string(),\n        }\n    });", "    let mut ans =\
    \ String::new();\n    for v in word.chars().skip(1).rev() {\n        let lower\
    \ = v.to_lowercase();\n        if lower.chars().any(|c| {\n            !c.is_uppercase()\
    \ || c == c.to_lowercase()\n        }) {\n            ans = ans.clone();\n   \
    \         return ans;\n        }\n    }\n    ans.clone()", "    let mut vowel\
    \ = \"a\".to_string();\n    let mut consonant = \"z\".to_string();\n    let mut\
    \ index = 0;\n    loop {\n        index = word.rfind(&consonant, index);\n   \
    \     if index == String::npos { return vowel.to_string() }\n        index = word.rfind(&vowel,\
    \ index);\n        if index == String::npos { return vowel.to_string() }\n   \
    \     let index = word.rfind(&vowel, index);\n        if index == String::npos\
    \ { return \"\".to_string() }\n        let index = word.rfind(&consonant, index);\n\
    \        if index == String::npos { return \"\".to_string() }\n        vowel =\
    \ vowel.to_string();\n        consonant = consonant.to_string();\n    }", "  use\
    \ std::cmp::min;\n  use std::cmp::Ordering;\n  let vowel = \"AEIOUaeiou\";\n \
    \ let vowels = &vowel[..];\n  let vowel_idx = word.chars().fold(\n      0,\n \
    \     |i, &ch| {\n        let ch: char = ch.to_lowercase();\n        match vowels.binary_search(&ch)\
    \ {\n          Some(i) => i,\n          None => i,\n        }\n      }\n  );\n\
    \  if vowel_idx >= word.chars().len() - 1 {\n    return \"\";\n  }\n  let vowel_chars\
    \ = &vowel[vowel_idx + 1..];\n  let vowel_start = word.chars().skip(vowel_idx).last();\n\
    \  let vowel_end = word.chars().skip(vowel_idx + 1).first();\n  if vowel_chars.contains(&vowel[vowel_idx])\
    \ {\n    return if vowel_start.cmp(&vowel_end) < 0 {\n      vowel\n    } else\
    \ {\n      vowel.chars().last().unwrap()\n    };\n  } else {\n    let mut i =\
    \ 0;\n    while i != word.chars().len() - 1 {\n      let ch: char = word[i as\
    \ usize];\n      if !vowel_start.contains(&ch) && !vowel_end.contains(&ch) &&\
    \ ch != vowel[vowel_idx] {\n        break;\n      }\n      i += 1;\n    }\n  \
    \  word.chars().skip(i).last().unwrap()\n  }", "    let mut vowel_index = word.len()\
    \ - 1;\n    \n    let mut vowel = String::new();\n    \n    while vowel_index\
    \ >= 0 && !is_vowel(vowel_index) {\n        vowel.push(word[vowel_index]);\n \
    \       vowel_index -= 1;\n    }\n    \n    let mut vowel_index = vowel.len();\n\
    \    \n    while vowel_index >= 0 && !is_vowel(vowel_index) {\n        vowel.push(word[vowel_index]);\n\
    \        vowel_index -= 1;\n    }\n    \n    vowel.into_owned()", "    let mut\
    \ vowel_index = word.len();\n    let mut vowel_count = 0;\n    let mut min_vowel_length\
    \ = word.len();\n    let mut found_vowel = false;\n    \n    for con in word.chars()\
    \ {\n        if !found_vowel && con == char::from('a'..'z') {\n            found_vowel\
    \ = true;\n            vowel_index = word.chars().position(|c| c == con).unwrap();\n\
    \        }\n        if found_vowel && con == char::from('a'..'z') {\n        \
    \    vowel_count += 1;\n        }\n        if found_vowel && con == char::from('A'..'Z')\
    \ {\n            vowel_count += 1;\n        }\n        if vowel_count > min_vowel_length\
    \ {\n            found_vowel = false;\n            min_vowel_length = vowel_count;\n\
    \        }\n    }\n    \n    match vowel_index {\n        Some(i) => word.chars()[i\
    \ - min_vowel_length + 1 .. i].unwrap(),\n        None => \"\",\n    }", "   \
    \ \n    let mut vowel = String::new();\n    \n    for vowels in word.chars().skip(1)\
    \ {\n        if vowels.is_uppercase() {\n            vowel += vowels.to_lowercase();\n\
    \        }\n    }\n    vowel += word.chars().last().unwrap().to_lowercase();\n\
    \    \n    return vowel;", "    word.chars().skip_while(|c| c >= 'A' && c <= 'Z').filter(|c|\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u').enumerate().map(|(i,\
    \ c)| (i - 1) as usize).max_by(|i| {\n        if let Some(j) = (i - 1).wrapping_add(1).wrapping_add(-2)\n\
    \            && word[j..i].chars().all(|c| c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U')\n        {\n            return i;\n        }\n       \
    \ String::new()\n    }).map(|i| (word.len() - 1) - i as usize)\n    .unwrap_or(0)",
  "    let mut vowels: Vec<&str> = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let\
    \ vowel_candidates: Vec<&str> = word\n        .chars()\n        .filter(|c| c.is_uppercase())\n\
    \        .filter(|c| vowels.iter().all(|c| c.to_lowercase() == c))\n        .filter(|c|\
    \ {\n            c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\n  \
    \      })\n        .collect();\n    vowels.iter().cloned().filter(|c| vowel_candidates.iter().any(|c|\
    \ c == &c)).last().unwrap()", "    let mut vowel = String::new();\n    let mut\
    \ vowel_start = String::new();\n    let mut vowel_end = String::new();\n    let\
    \ mut vowel_previous = String::new();\n    let mut vowel_next = String::new();\n\
    \    let mut consonant_start = String::new();\n    let mut consonant_previous\
    \ = String::new();\n    let mut consonant_next = String::new();\n    \n    if\
    \ word.len() >= 2 {\n        for char in word.chars().rev() {\n            if\
    \ char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u'{\n \
    \               vowel.push(char);\n                \n                if char ==\
    \ 'a' {\n                    vowel_start.push('a');\n                    vowel_previous.push('a');\n\
    \                    vowel_next.push('a');\n                }\n              \
    \  if char == 'e' {\n                    vowel_start.push('e');\n            \
    \        vowel_previous.push('e');\n                    vowel_next.push('e');\n\
    \                }\n                if char == 'i' {\n                    vowel_start.push('i');\n\
    \                    vowel_previous.push('i');\n                    vowel_next.push('i');\n\
    \                }\n                if char == 'o' {\n                    vowel_start.push('o');\n\
    \                    vowel_previous.push('o');\n                    vowel_next.push('o');\n\
    \                }\n                if char == 'u' {\n                    vowel_start.push('u');\n\
    \                    vowel_previous.push('u');\n                    vowel_next.push('u');\n\
    \                }\n            }\n            if char == 'A' || char == 'E' ||\
    \ char == 'I' || char == 'O' || char == 'U' {\n                vowel.push(char);\n\
    \                \n                if char == 'A' {\n                    vowel_start.push('A');\n\
    \                    vowel_previous.push('A');\n                    vowel_next.push('A');\n\
    \                }\n                if char == 'E' {\n                    vowel_start.push('E');\n\
    \                    vowel_previous.push('E');\n                    vowel_next.push('E');\n\
    \                }\n                if char == 'I' {\n                    vowel_start.push('I');\n\
    \                    vowel_previous.push('I');\n                    vowel_next.push('I');\n\
    \                }\n                if char == 'O' {\n                    vowel_start.push('O');\n\
    \                    vowel_previous.push('O');\n                    vowel_next.push('O');\n\
    \                }\n                if char == 'U' {\n                    vowel_start.push('U');\n\
    \                    vowel_previous.push('U');\n                    vowel_next.push('U');\n\
    \                }\n            }\n", "    if word.len() < 2 {\n        return\
    \ \"\".to_string();\n    }\n    let mut vowels: Vec<String> = vec![\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let mut vowel_index = word.len();\n    let mut last_vowel\
    \ = word.len() - 1;\n    let mut vowel: String;\n\n    while vowel_index >= 0\
    \ && vowel_index < word.len() && vowels[vowel_index] != word.chars().nth(vowel_index).unwrap().to_string()\
    \ {\n        vowel_index = vowel_index - 1;\n    }\n\n    vowel_index %= word.len();\n\
    \    vowel = vowels[vowel_index];\n    last_vowel = vowels.iter().position(|v|\
    \ v == vowel).unwrap();\n\n    if vowel_index > 0 && (vowel_index <= vowel.len()\
    \ || vowel.chars().nth(vowel_index - 1).unwrap() == word.chars().nth(last_vowel).unwrap())\
    \ {\n        return vowel.clone(); // U\n    }\n\n    if vowel_index < word.len()\
    \ - 1 && vowel.chars().nth(vowel_index + 1).unwrap() == word.chars().nth(last_vowel).unwrap()\
    \ {\n        return vowel.clone(); // U\n    }\n\n    return \"\".to_string();",
  "    let vowels = \"aeiou\";\n    let mut result = String::new();\n    let mut index\
    \ = word.len() - 1;\n    let mut char = word.chars().nth(index);\n    while char\
    \ != word.chars().nth(index) {\n        result = match char.to_ascii_lowercase().contains(&vowels)\
    \ {\n            true => char.to_ascii_lowercase().chars().nth(0),\n         \
    \   false => \"\".to_string(),\n        };\n        index--;\n        char = word.chars().nth(index);\n\
    \    }\n    result", "    let mut vowels = String::new();\n    let mut consonants\
    \ = String::new();\n    let mut index = 0;\n    let mut end = word.len();\n  \
    \  while index < end {\n        if let Some(current_consonant) = word.chars().position(|c|\
    \ c == consonants[index]) {\n            let current_vowel = word.chars().position(|c|\
    \ c == vowels[index]);\n            if let Some(current_vowel) = current_vowel\
    \ {\n                vowels.push_str(&vowels[index]);\n                consonants.push_str(&consonants[current_vowel\
    \ - current_consonant]);\n            } else {\n                vowels.push_str(&vowels[current_vowel]);\n\
    \            }\n        } else {\n            consonants.push_str(&consonants[index]);\n\
    \        }\n        index += 1;\n    }\n    vowels", "    let mut counter = String::new();\n\
    \    let mut vowels = \"aeiou\";\n    let mut vowels_len = 8;\n    let mut vowels_idx\
    \ = 0;\n    \n    while counter != word[vowels_idx + 1] && vowels_idx < word.len()\
    \ {\n        if word[vowels_idx] == vowels[vowels_len] {\n            counter.push_str(vowels[vowels_len]);\n\
    \            vowels_len -= 1;\n            vowels_idx += 1;\n        } else {\n\
    \            vowels_len += 1;\n        }\n    }\n    \n    counter += &vowels[vowels_len];\n\
    \    \n    return counter", "    let mut i = 0;\n    let mut j = 0;\n    let mut\
    \ best_match = 0;\n    let mut best_match_char: char;\n    let mut vowels = \"\
    aeiou\";\n\n    while i < word.len() {\n        let c = word[i];\n        if vowels.contains(&c)\
    \ {\n            i += 1;\n            continue;\n        }\n        while j +\
    \ 1 < word.len() {\n            let c_j = word[j];\n            if vowels.contains(&c_j)\
    \ {\n                j += 1;\n                continue;\n            }\n     \
    \       if i == 0 {\n                if c_j.to_lowercase() == c.to_lowercase()\
    \ {\n                    best_match = j;\n                    best_match_char\
    \ = c_j;\n                }\n            } else {\n                if c_j.to_lowercase()\
    \ == c.to_lowercase() && c_j != best_match_char {\n                    best_match\
    \ = j;\n                    best_match_char = c_j;\n                }\n      \
    \      }\n            j += 1;\n        }\n        i += 1;\n    }\n    if best_match\
    \ == 0 {\n        return \"\".to_string();\n    }\n    let best_match_word = word.chars().nth(best_match).unwrap();\n\
    \    if best_match_char == c {\n        return best_match_word.to_string();\n\
    \    }\n    return \"\".to_string();", "    word.chars().enumerate().filter(|&(k,\
    \ c)| c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u').fold(\"\", |acc,\
    \ &(_, c)| {\n        if c.is_uppercase() {\n            if acc.ends_with(vowel::ENGLISH)\
    \ {\n                acc\n            } else {\n                acc + vowel::ENGLISH\n\
    \            }\n        } else {\n            if acc.ends_with(vowel::ENGLISH)\
    \ {\n                acc\n            } else {\n                acc + \"A\"\n\
    \            }\n        }\n    })", "    word.chars()\n        .filter(|&c| c.is_vowel())\n\
    \        .rposition(|c| c.is_consonant())\n        .unwrap_or(0)", "    let mut\
    \ vowels = HashSet::new();\n    let vowel_set = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    vowels.insert(vowel_set[0]);\n    for &letter in &word[word.len() - 1].chars()\
    \ {\n        if vowels.contains(&letter) {\n            break;\n        }\n  \
    \      for vowel in vowel_set {\n            if word[word.len() - 1] == vowel\
    \ {\n                vowels.insert(vowel);\n                break;\n         \
    \   }\n        }\n    }\n    if word.len() == 0 {\n        \"\".to_string();\n\
    \    } else {\n        vowels.iter().next().unwrap().to_string()\n    }", "  \
    \  if word.len() < 3 {\n        return \"\";\n    }\n\n    let mut vowel = \"\
    u\".to_string();\n    let mut current_index = 0;\n    let mut last_index = word.len()\
    \ - 1;\n    while current_index <= last_index {\n        let vowel_index = word.chars().position(|c|\
    \ *c == &vowel);\n        if vowel_index == std::option::Option::Some {\n    \
    \        current_index = vowel_index.unwrap() + 1; // add 1 to skip the vowel\
    \ before 'u'\n        } else {\n            current_index -= 1;\n        }\n\n\
    \        let first_index = word.chars().position(|c| *c == &'a');\n        if\
    \ first_index == std::option::Option::Some {\n            last_index = first_index.unwrap()\
    \ - 1;\n        } else {\n            last_index -= 1;\n        }\n    }\n\n \
    \   vowel.to_string()", "    word.chars().filter_map(|c| match c {\n        'a'..='z'\
    \ => Some(c as i32),\n        _ => None,\n    }).skip(1).take(word.len() - 1).collect::<Vec<_>>().enumerate().find(|(i,\
    \ c)| {\n        c < word.chars().last().unwrap() - 'a' as i32\n    })?.1.to_string()",
  "    word.chars().collect::<Vec<char>>()\n        .filter(|c| *c != 'a' && *c !=\
    \ 'e' && *c != 'i' && *c != 'o' && *c != 'u'\n            && *c != 'A' && *c !=\
    \ 'E' && *c != 'I' && *c != 'O' && *c != 'U').cloned()\n        .clone()\n   \
    \     .iter()\n        .cloned()\n        .enumerate()\n        .cloned()\n  \
    \      .filter(|(_, c)| {\n            if c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U' {\n                true\n            } else {\n                false\n \
    \           }\n        }).map(|(_, c)| {\n            match c {\n            \
    \    'a' => \"a\",\n                'e' => \"e\",\n                'i' => \"i\"\
    ,\n                'o' => \"o\",\n                'u' => \"u\",\n            \
    \    'A' => \"a\",\n                'E' => \"e\",\n                'I' => \"i\"\
    ,\n                'O' => \"o\",\n                'U' => \"u\",\n            \
    \    _ => \"\",\n            }\n        }).collect()\n        .iter()\n      \
    \  .cloned()\n        .filter(|c| c.len() > 0)\n        .cloned()\n        .enumerate()\n\
    \        .cloned()\n        .map(|(_, c)| c.to_string())\n        .collect()\n\
    \        .cloned()\n        .iter()\n        .cloned()\n        .map(|(_, c)|\
    \ c.to_ascii_lowercase()).collect()\n        .cloned()\n        .iter()\n    \
    \    .cloned()\n        .map(|(_, c)| c.to_ascii_lowercase())\n        .next()\n\
    \        .clone()\n        .unwrap()\n        .to_string()", "    // let mut vowel_index\
    \ = HashMap::new();\n    // vowel_index.insert(vec![\"a\", \"e\", \"i\", \"o\"\
    , \"u\"].iter().cloned().collect::<Vec<_>>(), 0);\n    let mut vowel_index: HashMap<Vec<char>,\
    \ u32> = HashMap::new();\n    vowel_index.insert(vec![\"a\", \"e\", \"i\", \"\
    o\", \"u\"].iter().cloned().collect::<Vec<_>>(), 0);\n    \n    for char in word[..word.rfind('a')]\
    \ {\n        if let Some(index) = vowel_index.get(char) {\n            vowel_index.entry(index).or_insert(0)\n\
    \        } else {\n            break;\n        }\n    }\n    let mut first_index\
    \ = vowel_index.entry(\"a\").or_insert(0);\n    let mut second_index = vowel_index.entry(\"\
    e\").or_insert(0);\n    let mut third_index = vowel_index.entry(\"i\").or_insert(0);\n\
    \    let mut fourth_index = vowel_index.entry(\"o\").or_insert(0);\n    let mut\
    \ fifth_index = vowel_index.entry(\"u\").or_insert(0);\n    \n    if first_index\
    \ > second_index && first_index > third_index && first_index > fourth_index &&\
    \ first_index > fifth_index {\n        if first_index != second_index && first_index\
    \ != third_index && first_index != fourth_index && first_index != fifth_index\
    \ {\n            return char.to_string();\n        }\n    }\n    return \"\";",
  "    \n    // Your code goes here\n    let vowels = \"aeiouAEIOU\";\n    let mut\
    \ vowel_count = vec![String::new(); word.len()];\n    \n    for i in 0..word.len()\
    \ {\n        vowel_count[i] = word.chars().filter(|c| vowels.contains(c.to_lowercase())).count();\n\
    \        if vowel_count[i] > 2 {\n            return String::new();\n        }\n\
    \    }\n    let mut max_i = word.len() - 1;\n    let mut max_j = word.len() -\
    \ 1;\n    while max_i >= 0 {\n        while max_j >= 0 && vowel_count[max_j] >\
    \ 2 {\n            max_j -= 1;\n        }\n        if max_j >= 0 {\n         \
    \   max_i = max_j;\n            max_j = word.len() - 1;\n        } else {\n  \
    \          return String::new();\n        }\n    }\n    \n    return word.chars().filter(|c|\
    \ vowels.contains(c.to_lowercase())).last().to_string();", "    let vowels = &[\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    for i in 0..word.len() - 2 {\n        let\
    \ lower = word[..i + 1].chars().collect::<Vec<char>>().join(\"\");\n        let\
    \ upper = word[i + 2..].chars().collect::<Vec<char>>().join(\"\");\n        let\
    \ start = word.chars().skip_while(|c| vowels.contains(&c.to_lowercase())).count();\n\
    \        let end = word.chars().skip_while(|c| vowels.contains(&c.to_lowercase())).count();\n\
    \        \n        if start < end && start < vowels.len() && end < vowels.len()\
    \ {\n            return vowels[start..end].join(\"\");\n        }\n    }\n\n \
    \   return \"\";", "    let mut counter = 0;\n    let mut vowels = vec![\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_iterator = vowels.iter().cloned().peekable();\n\
    \    let mut vowels_iterator_end = vowels.iter().cloned().peekable();\n    vowels_iterator.skip(word.len()\
    \ - 1).peekable();\n\n    loop {\n        let vowel_str = word[vowels_iterator];\n\
    \        let vowel_index = (word.len() - 1) - vowels_iterator;\n        if vowel_str\
    \ != word[vowel_index] {\n            counter = 0;\n        }\n\n        counter++;\n\
    \        if counter == 2 {\n            vowels_iterator_end.peekable();\n    \
    \    }\n\n        match vowel_str {\n            \"a\" => vowels_iterator.peek(),\n\
    \            \"e\" => vowels_iterator_end.peek(),\n            \"i\" => vowels_iterator_end.peek(),\n\
    \            \"o\" => vowels_iterator_end.peek(),\n            \"u\" => vowels_iterator_end.peek(),\n\
    \            _ => break,\n        }\n        vowels_iterator.next();\n    }\n\
    \    return vowels_iterator.peek().unwrap();", "    word.chars()\n        .skip_while(|c|\
    \ !c.is_letter())\n        .skip_while(|c| c.is_whitespace() || c.is_digit())\n\
    \        .collect::<Vec<Char>>()\n        .iter()\n        .take_while(|c| !c.is_uppercase())\n\
    \        .enumerate()\n        .take_while(|(_, c)| c.is_lowercase())\n      \
    \  .nth(0)\n        .unwrap_or(\"\")", "    let mut vowels: HashSet<char> = HashSet::new();\n\
    \    vowels.insert('a', 'A');\n    vowels.insert('e', 'E');\n    vowels.insert('i',\
    \ 'I');\n    vowels.insert('o', 'O');\n    vowels.insert('u', 'U');\n    let mut\
    \ consonants: HashSet<char> = HashSet::new();\n    consonants.insert('b', 'B');\n\
    \    consonants.insert('d', 'D');\n    consonants.insert('f', 'F');\n    consonants.insert('k',\
    \ 'K');\n    consonants.insert('m', 'M');\n    consonants.insert('n', 'N');\n\
    \    consonants.insert('p', 'P');\n    consonants.insert('s', 'S');\n    consonants.insert('t',\
    \ 'T');\n    consonants.insert('v', 'V');\n    consonants.insert('w', 'W');\n\
    \    consonants.insert('y', 'Y');\n    \n    let mut consonants_idx: usize = 0;\n\
    \    let mut vowels_idx: usize = 0;\n    let mut vowels_len: usize = vowels.len();\n\
    \    let mut consonants_len: usize = consonants.len();\n    let mut idx: usize\
    \ = 0;\n    while consonants_idx < consonants_len && vowels_idx < vowels_len {\n\
    \        if word[idx] == 'c' && consonants.contains(word[idx + 1]) {\n       \
    \     consonants_idx += 1;\n            idx += 2;\n        } else if word[idx]\
    \ == 'u' && vowels.contains(word[idx + 1]) {\n            vowels_idx += 1;\n \
    \           idx += 2;\n        } else {\n            idx += 1;\n        }\n  \
    \  }\n    return if consonants_idx == consonants_len { \"\" } else { vowels[consonants_idx]\
    \ }", "    if word.len() <= 1 {\n        return \"\"\n    }\n    let mut vowels\
    \ = \"aeiouAEIOU\".to_string();\n    let vowel_set = vowels.chars().collect::<HashSet<char>>();\n\
    \    let mut pos = word.len() - 1;\n    while pos >= 0 && vowel_set.contains(&word[pos])\
    \ {\n        pos -= 1;\n    }\n    if pos == -1 {\n        return \"\".to_string()\n\
    \    }\n    let mut vowel_str = \"\";\n    word.chars().for_each(|c| {\n     \
    \   match c.to_string().to_ascii_lowercase().find(|c| vowel_set.contains(&c))\
    \ {\n            Some(i) => {\n                vowel_str += &vowels[i as usize];\n\
    \            },\n            None => {\n                break\n            }\n\
    \        }\n    });\n    return vowel_str", "    let mut vowels = vec![\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"];\n    for vowel in vowels.iter_mut() {\n       \
    \ let mut word = word;\n        let vowel_pos = word.rfind(&vowel);\n        if\
    \ vowel_pos > 0 {\n            if vowel_pos == word.len() - 1 {\n            \
    \    word.split_whitespace().for_each(|c| {\n                    *c = c.to_lowercase();\n\
    \                    if c.is_vowel() {\n                        vowel.remove(0);\n\
    \                    }\n                });\n            } else {\n          \
    \      word.split_whitespace().for_each(|c| {\n                    *c = c.to_lowercase();\n\
    \                    if c.is_vowel() {\n                        vowel.remove(0);\n\
    \                    }\n                });\n                vowel.remove(0);\n\
    \            }\n            if word.len() == 0 {\n                return \"\"\
    ;\n            }\n        }\n    }\n    vowels.into_iter().next().unwrap().to_string()",
  "    let mut vowel_iter = word.chars().rev().skip(1).filter(|&c| {\n        c !=\
    \ 'a' && c != 'A' && c != 'e' && c != 'E' && c != 'i' && c != 'I' && c != 'o'\
    \ && c != 'O' && c != 'u' && c != 'U'\n    });\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n    vowel_iter.next().unwrap();\n\
    \    vowel_iter.next().unwrap();", "    \n    let mut index = word.len();\n  \
    \  let mut min_diff: i32 = -100;\n    let mut max_diff: i32 = 100;\n    let mut\
    \ vowels = vec!['u', 'a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u', 'a', 'e',\
    \ 'i', 'o', 'u', 'a'];\n    \n    // check all consonants\n    while index > 0\
    \ {\n        if word.starts_with(vowels[index - 1]) {\n            let diff =\
    \ word[index - 1].chars().count() - vowels[index - 1].chars().count();\n     \
    \       if diff < min_diff {\n                min_diff = diff;\n            }\n\
    \        }\n        index--;\n    }\n\n    // check last consonant\n    if word.ends_with(vowels[index])\
    \ {\n        let diff = word[index].chars().count() - vowels[index].chars().count();\n\
    \        if diff < min_diff {\n            min_diff = diff;\n        }\n    }\n\
    \    \n    // check all vowels\n    while index > 0 {\n        if word.starts_with(vowels[index])\
    \ {\n            let diff = vowels.count() - word.chars().count();\n         \
    \   if diff < max_diff {\n                max_diff = diff;\n            }\n  \
    \      }\n        index--;\n    }\n\n    // check last vowel\n    if word.ends_with(vowels[index])\
    \ {\n        let diff = vowels.count() - word.chars().count();\n        if diff\
    \ < max_diff {\n            max_diff = diff;\n        }\n    }\n    \n    if min_diff\
    \ >= max_diff {\n        \"\"\n    } else {\n        vowels[min_diff .. max_diff\
    \ + 1].iter().cloned().collect::<String>().cloned()\n    }", "  word.chars().filter_map(|c|\
    \ match c {\n    'a' .. 'z' => Some(c.to_string()),\n    _ => None,\n  }).enumerate().filter(|(_,\
    \ vowel)| word.len() > vowel.len()).min(|(_, vowel)| vowel.len()).map(|(_, vowel)|\
    \ vowel).unwrap_or(\"\")", "    let mut min_len = word.len() as i32;\n    let\
    \ mut min_index = 0;\n\n    let mut min_len_i = min_len;\n    let mut min_i =\
    \ min_index;\n\n    let mut min_len_j = min_len;\n    let mut min_j = min_index;\n\
    \n    let mut min_len_k = min_len;\n    let mut min_k = min_index;\n\n    for\
    \ word in word.chars().skip(1) {\n        let mut i = 1;\n        let mut j =\
    \ 1;\n        let mut k = 1;\n        if word.chars().any(|&x| x == 'a') {\n \
    \           i = 0;\n        }\n        if word.chars().any(|&x| x == 'e') {\n\
    \            j = 0;\n        }\n        if word.chars().any(|&x| x == 'i') {\n\
    \            k = 0;\n        }\n        let len = word.len() as i32;\n       \
    \ if min_len_i <= len {\n            min_len_i = len;\n            min_i = i;\n\
    \        }\n        if min_len_j <= len {\n            min_len_j = len;\n    \
    \        min_j = j;\n        }\n        if min_len_k <= len {\n            min_len_k\
    \ = len;\n            min_k = k;\n        }\n\n    }\n    if min_len == 0 {\n\
    \        return String::new();\n    }\n    let mut min_len = min_len;\n    let\
    \ mut min = min_index;\n    let mut min_i = min_i;\n    let mut min_j = min_j;\n\
    \    let mut min_k = min_k;\n\n    if min_len_i > min_len_j {\n        if min_len_i\
    \ > min_len_k {\n            if min_len_i > min_i {\n                if min_len_i\
    \ > min_j {\n                    min_i = min_index;\n                    min_j\
    \ = min_index;\n                }\n                min = min_index;\n        \
    \    }\n            min = min_index;\n        }\n        if min_len_i > min_k\
    \ {\n            min = min_index;\n        }\n    }\n    if min_len_j > min_len_k\
    \ {\n        if min_len_j > min_i {\n            if min_len_j > min_j {\n    \
    \            min = min_index;\n                min_i = min_index;\n          \
    \      min_j = min_index;\n            }\n            min = min_index;\n     \
    \   }\n        if min_len_j > min_k {\n            min = min_index;\n        }\n\
    \    }\n    if min_len_k > min_i {\n        if min_len_k > min_j {\n         \
    \   min = min_index;\n            min_i = min_index;\n            min_j = min_index;\n\
    \        }\n        if min_len_k > min_k {\n            min = min_index;\n   \
    \     }\n    }\n    let mut min_len = min_len;\n    let mut min = min_index;\n",
  "    let mut vowels: HashMap<String, String> = HashMap::new();\n    vowels.insert(\"\
    a\".to_string(), \"u\".to_string());\n    vowels.insert(\"i\".to_string(), \"\
    u\".to_string());\n    vowels.insert(\"e\".to_string(), \"i\".to_string());\n\
    \    vowels.insert(\"o\".to_string(), \"u\".to_string());\n    vowels.insert(\"\
    u\".to_string(), \"u\".to_string());\n    let mut min_distance = std::i32::MAX;\n\
    \    let mut closest_vowel = \"\";\n    \n    for letter in word.chars().cloned().skip(word.len())\
    \ {\n        let distance = vowels.get(&letter).unwrap().len();\n        if distance\
    \ < min_distance {\n            min_distance = distance;\n            closest_vowel\
    \ = letter;\n        }\n    }\n    closest_vowel", "    \n    let mut left = 0;\n\
    \    let mut right = word.len() - 1;\n    \n    let mut min_dist = 0;\n    let\
    \ mut min_vowel = String::new();\n    \n    loop {\n        while left < right\
    \ {\n            let mut vowel = word.chars().nth(left).unwrap().to_string();\n\
    \            vowel = vowel.to_lowercase();\n            if vowel == \"a\" || vowel\
    \ == \"e\" || vowel == \"i\" || vowel == \"o\" || vowel == \"u\" {\n         \
    \       min_dist = std::cmp::min(min_dist, left - left + 1);\n               \
    \ min_vowel = vowel;\n            }\n            left += 1;\n        }\n     \
    \   \n        while left >= 0 {\n            let mut vowel = word.chars().nth(left).unwrap().to_string();\n\
    \            vowel = vowel.to_lowercase();\n            if vowel == \"a\" || vowel\
    \ == \"e\" || vowel == \"i\" || vowel == \"o\" || vowel == \"u\" {\n         \
    \       min_dist = std::cmp::min(min_dist, left - left + 1);\n               \
    \ min_vowel = vowel;\n            }\n            left -= 1;\n        }\n     \
    \   \n        right -= 1;\n        \n        if left < 0 {\n            break;\n\
    \        }\n    }\n    \n    min_vowel", "    let mut vowels = vec![\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    let mut vowel = vowels.iter().filter(|vowel| {\n\
    \        word.contains(&vowel)\n    }).next();\n    vowel.ok_or(\"No vowel found\"\
    )?;\n    word.chars().filter(|c| {\n        vowels.iter().any(|&v| {\n       \
    \     if v == c {\n                vowel = Some(v);\n            }\n         \
    \   false\n        })\n    }).next()\n        .ok_or(\"No vowel found\")?;\n \
    \   vowel.unwrap()", "    let mut iter = word.rfind('a');\n    let mut vowels\
    \ = String::new();\n    let mut i = 1;\n    while iter.len() > 0 && i <= word.length\
    \ {\n        if iter.starts_with('a') {\n            vowels.push(word[i..iter.len()].to_lowercase());\n\
    \            iter = iter.into_iter().rfind('a');\n        }\n        i += 1;\n\
    \    }\n    vowels.trim().to_string()", "    let mut s = String::new();\n    let\
    \ mut vowels = \"a\" .. \"z\";\n    let mut consonants = \"A\" .. \"Z\";\n   \
    \ let len = word.len();\n    for i in  0 .. word.len() - 1 {\n        if word.chars().nth(i).unwrap()\
    \ in vowels {\n            if word.chars().nth(word.len() - i - 1).unwrap() in\
    \ vowels {\n                s.push(i);\n                s.push(i);\n         \
    \   }\n            else if word.chars().nth(word.len() - i - 1).unwrap() in consonants\
    \ {\n                s.push(word.len() - i - 1);\n                s.push(word.len()\
    \ - i - 1);\n            }\n            else {\n                break;\n     \
    \       }\n        }\n    }\n    if s.len() == 0 {\n        String::new()\n  \
    \  } else {\n        s.clone()\n    }", "    let mut current_char = word.len()\
    \ - 1;\n    loop {\n        let mut min_vowels = word.len();\n        let mut\
    \ current_vowel: usize = 0;\n        while current_char >= 0 {\n            let\
    \ vowel_index = vowel_position(word, current_char);\n            if vowel_index\
    \ != -1 {\n                let vowel = vowels[vowel_index];\n                if\
    \ vowel.starts_with(word[current_char..current_char+vowel.len()]) {\n        \
    \            current_vowel = vowel.len();\n                }\n            }\n\
    \            current_char--;\n        }\n        if current_vowel < min_vowels\
    \ {\n            return String::new();\n        }\n        min_vowels = current_vowel;\n\
    \        current_vowel = 0;\n        while current_char >= 0 {\n            let\
    \ vowel_index = vowel_position(word, current_char);\n            if vowel_index\
    \ != -1 {\n                let vowel = vowels[vowel_index];\n                if\
    \ vowel.starts_with(word[current_char..current_char+vowel.len()]) {\n        \
    \            current_vowel = vowel.len();\n                }\n            }\n\
    \            current_char--;\n        }\n    }", "    let mut vowels = vec![];\n\
    \    let vowels_length = word.len() / 2;\n    let mut consonants = word.len()\
    \ - vowels_length;\n    \n    for _ in 0..vowels_length {\n        vowels.push(word.chars().nth(consonants).unwrap());\n\
    \        consonants -= 1;\n    }\n    \n    for _ in 0..vowels_length {\n    \
    \    vowels.push(word.chars().nth(consonants).unwrap());\n        consonants -=\
    \ 1;\n    }\n    \n    let vowels_count = vowels.iter().filter(|&x| x.is_vowel()).count();\n\
    \    \n    if vowels_count == 0 {\n        return \"\";\n    }\n    \n    let\
    \ min_distance = word.len() + 1;\n    \n    for vowel in vowels.iter().filter(|&x|\
    \ x.is_vowel()) {\n        let distance = word.chars().zip(vowel.chars()).filter(|&(c1,\
    \ _)| c1 != x).count();\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n        }\n    }\n    \n    for _ in 0..vowels_length {\n     \
    \   vowels.remove(vowels.iter().filter(|&x| x.is_vowel()).next().unwrap());\n\
    \    }\n    \n    vowels.iter().filter(|&x| x.is_vowel()).next()", "    let mut\
    \ vowels = String::new();\n\n    for i in word[1..].chars().filter(|c| match c\
    \ {\n        'A' | 'a' | 'E' | 'e' | 'I' | 'i' | 'O' | 'o' | 'U' | 'u' => {\n\
    \            vowels += c;\n            false\n        }\n        _ => {\n    \
    \        false\n        }\n    }) {\n        vowels += String::from(*i);\n   \
    \ }\n\n    vowels", "    let mut lower = word.to_indy(|c| c >= 'a' && c <= 'z');\n\
    \    lower = lower.next_to_indy(\"a\", 'z');\n\n    let mut upper = word.to_indy(|c|\
    \ c >= 'A' && c <= 'Z');\n    upper = upper.prev_to_indy(\"A\", 'Z');\n\n    if\
    \ lower.is_none() || upper.is_none() {\n        return String::new();\n    }\n\
    \n    let mut low = lower.unwrap();\n    let mut up = upper.unwrap();\n\n    while\
    \ low != up {\n        if lower.unwrap().is_some() && up.is_some() {\n       \
    \     if low.unwrap().unwrap() == up.unwrap().unwrap() {\n                return\
    \ low.unwrap().unwrap();\n            }\n        }\n        low = lower.unwrap().unwrap();\n\
    \        up = upper.unwrap().unwrap();\n    }\n\n    return String::new();", " \
    \   let mut leftSideIndex = 0;\n    let mut rightSideIndex = word.len() - 1;\n\
    \    let mut leftSide = String::new();\n    let mut rightSide = String::new();\n\
    \    while leftSideIndex < rightSideIndex {\n        let leftChar = word[leftSideIndex];\n\
    \        let rightChar = word[rightSideIndex];\n        if leftChar == rightChar\
    \ {\n            leftSide.push_str(&leftChar.to_lowercase());\n            rightSide.push_str(&rightChar.to_lowercase());\n\
    \            leftSideIndex += 1;\n            rightSideIndex -= 1;\n        }\
    \ else if leftChar == 'a' && rightChar == 'o' {\n            leftSide.push_str(\"\
    u\");\n            rightSide.push_str(\"u\");\n            leftSideIndex += 1;\n\
    \            rightSideIndex -= 1;\n        } else if leftChar == 'a' && rightChar\
    \ == 'o' && leftSideIndex == 0 {\n            leftSide.push_str(\"u\");\n    \
    \        leftSideIndex += 1;\n        } else if leftChar == 'e' && rightChar ==\
    \ 'i' && leftSideIndex == word.len() - 1 {\n            leftSide.push_str(\"i\"\
    );\n            rightSide.push_str(\"i\");\n            leftSideIndex += 1;\n\
    \        } else if leftChar == 'e' && rightChar == 'i' && leftSideIndex == 0 {\n\
    \            leftSide.push_str(\"i\");\n            leftSideIndex += 1;\n    \
    \    } else if leftChar == 'i' && rightChar == 'o' && leftSideIndex == word.len()\
    \ - 1 {\n            leftSide.push_str(\"i\");\n            rightSide.push_str(\"\
    i\");\n            leftSideIndex += 1;\n        } else if leftChar == 'i' && rightChar\
    \ == 'o' && leftSideIndex == 0 {\n            leftSide.push_str(\"i\");\n    \
    \        leftSideIndex += 1;\n        } else if leftChar == 'u' && rightChar ==\
    \ 'r' && leftSideIndex == word.len() - 1 {\n            leftSide.push_str(\"r\"\
    );\n            rightSide.push_str(\"r\");\n            leftSideIndex += 1;\n\
    \        } else if leftChar == 'u' && rightChar == 'r' && leftSideIndex == 0 {\n\
    \            leftSide.push_str(\"r\");\n            leftSideIndex += 1;\n    \
    \    } else if leftChar == 'a' && rightChar == 'e' && leftSideIndex == word.len()\
    \ - 1 && rightSideIndex == word.len() - 1 {\n            leftSide.push_str(\"\
    e\");\n            rightSide.push_str(\"e\");\n            leftSideIndex += 1;\n\
    \        } else if leftChar == 'a' && rightChar == 'e' && ", "  let vowel = \"\
    AEIOU\".to_lowercase();\n  let mut pos = word.len() - 1;\n  while pos >= 0 {\n\
    \    let vowel_positions = word.chars().skip(pos).filter(|x| x.contains(&vowel));\n\
    \    let count = vowel_positions.count();\n    if count == 0 {\n      return \"\
    \";\n    }\n    pos = vowel_positions.last().unwrap().cmp(&word.chars()[pos]).unwrap().unwrap_or(pos);\n\
    \  }\n  word", "    if word.chars().any(|c| c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u') {\n        return \"\";\n    }\n    let mut index = 0;\n\
    \    let mut last_vowel_index = 0;\n    let mut vowel_index = 0;\n    let mut\
    \ cur_len = word.length();\n    loop {\n        last_vowel_index = cur_len;\n\
    \        index += 1;\n        cur_len = word[index].len_utf8();\n        if cur_len\
    \ == 0 {\n            break;\n        }\n        if cur_len == 1 {\n         \
    \   if word[index] == get_consonant_from_right(word[index]) {\n              \
    \  break;\n            }\n        }\n        if word[index] == get_consonant_from_right(word[index])\
    \ {\n            vowel_index += 1;\n        }\n    }\n    vowel_index -= 1;\n\
    \    if vowel_index > 0 {\n        word.chars().take(vowel_index).collect::<String>()\n\
    \    } else {\n        \"\"\n    }", "    let mut vowels = vec![\"\".to_string(),\
    \ \"\".to_string()];\n    for consonant in word.chars() {\n        if consonant\
    \ == 'a' || consonant == 'i' || consonant == 'o' || consonant == 'u' {\n     \
    \       vowels[0] += consonant;\n        }\n        if consonant == 'e' || consonant\
    \ == 'i' || consonant == 'o' || consonant == 'u' {\n            vowels[1] += consonant;\n\
    \        }\n    }\n    let mut left_index = 0;\n    let mut right_index = 0;\n\
    \    while vowels[0] == \"\" {\n        left_index += 1;\n    }\n    while vowels[1]\
    \ == \"\" {\n        right_index -= 1;\n    }\n    let mut left_vowel_index =\
    \ left_index;\n    let mut right_vowel_index = right_index;\n    if left_index\
    \ < right_index {\n        if vowels[left_index] == \"\" {\n            left_vowel_index\
    \ += 1;\n        }\n    }\n    if left_index > right_index {\n        if vowels[right_index]\
    \ == \"\" {\n            right_vowel_index -= 1;\n        }\n    }\n    if left_index\
    \ > right_index {\n        if left_vowel_index == right_vowel_index {\n      \
    \      return vowels[left_index];\n        } else {\n            return vowels[left_index].to_string();\n\
    \        }\n    } else {\n        return vowels[right_index].to_string();\n  \
    \  }", "    let mut vowels = vec!['a','e','i','o','u'];\n    \n    for (i, c)\
    \ in word.chars().enumerate() {\n        if vowels.iter().any(|v| v == c) { \n\
    \            vowels.remove(i);\n        }\n    }\n    \n    if vowels.is_empty()\
    \ { \"\" }\n    else {\n        vowels.iter().next().unwrap()\n    }", "    word.chars().enumerate().fold(\"\
    \", |mut acc, &(idx, _)| {\n        match idx {\n            0 => acc + \"u\"\
    ,\n            word.len() - 1 => acc + \"U\",\n            1 => acc,\n       \
    \     i => match i.to_ascii_lowercase() {\n                \"a\" => acc + \"a\"\
    ,\n                \"e\" => acc + \"e\",\n                \"i\" => acc + \"i\"\
    ,\n                \"o\" => acc + \"o\",\n                \"u\" => acc + \"u\"\
    ,\n                _ => acc\n            }\n        }\n    })", "    let vowels\
    \ = vec![\"A\",\"a\",\"E\",\"e\",\"I\",\"i\",\"O\",\"o\",\"U\",\"u\"];\n    let\
    \ mut vowels_iter = vowels.iter();\n    let mut cur_word = word;\n    let mut\
    \ cur_vowel = vowels_iter.next();\n    loop {\n        if cur_vowel.as_str() ==\
    \ cur_word.as_str()[word.len()-1] &&\n            cur_vowel == vowels_iter.next()\
    \ {\n            return cur_vowel.as_str();\n        }\n        if cur_vowel.as_str()\
    \ == cur_word.as_str()[word.len() - 2] &&\n            cur_vowel == vowels_iter.next()\
    \ {\n            return cur_vowel.as_str();\n        }\n        if cur_vowel.as_str()\
    \ == cur_word.as_str()[word.len() - 3] &&\n            cur_vowel == vowels_iter.next()\
    \ {\n            return cur_vowel.as_str();\n        }\n        if cur_vowel.as_str()\
    \ == cur_word.as_str()[word.len() - 4] &&\n            cur_vowel == vowels_iter.next()\
    \ {\n            return cur_vowel.as_str();\n        }\n        if cur_vowel.as_str()\
    \ == cur_word.as_str()[word.len() - 5] &&\n            cur_vowel == vowels_iter.next()\
    \ {\n            return cur_vowel.as_str();\n        }\n        if cur_vowel.as_str()\
    \ == cur_word.as_str()[word.len() - 6] &&\n            cur_vowel == vowels_iter.next()\
    \ {\n            return cur_vowel.as_str();\n        }\n        if cur_vowel.as_str()\
    \ == cur_word.as_str()[word.len() - 7] &&\n            cur_vowel == vowels_iter.next()\
    \ {\n            return cur_vowel.as_str();\n        }\n        if cur_vowel.as_str()\
    \ == cur_word.as_str()[word.len() - 8] &&\n            cur_vowel == vowels_iter.next()\
    \ {\n            return cur_vowel.as_str();\n        }\n        if cur_vowel.as_str()\
    \ == cur_word.as_str()[word.len() - 9] &&\n            cur_vowel == vowels_iter.next()\
    \ {\n            return cur_vowel.as_str();\n        }\n        cur_word = cur_word.as_str().to_string();\n\
    \        cur_vowel = vowels_iter.next();\n    }\n    return \"\".to_string();",
  "    let mut vowel_start_index = String::new();\n    let mut vowel_end_index = String::new();\n\
    \    let mut index = String::new();\n\n    for letter in word[..] {\n        if\
    \ letter == ('a'..'z').contains(|c|) {\n            vowel_start_index = index;\n\
    \            index = letter;\n        }\n        if letter == ('A'..'Z').contains(|c|)\
    \ {\n            vowel_end_index = index;\n            index = letter;\n     \
    \   }\n    }\n\n    let distance = abs(vowel_start_index - vowel_end_index);\n\
    \n    if distance < 0 {\n        String::new()\n    } else {\n        vowel_start_index[distance..distance].to_string()\n\
    \    }", "    let mut counter = 0;\n    let mut prev_consonant = String::from(\"\
    \");\n    let mut prev_vowel = String::from(\"\");\n    for c in word.chars()\
    \ {\n        if c.is_vowel() {\n            counter++;\n            prev_consonant\
    \ = c.to_lowercase();\n        } else {\n            if counter < 2 {\n      \
    \          continue;\n            }\n            prev_vowel = prev_consonant;\n\
    \            counter = 0;\n        }\n        if prev_vowel == c.to_lowercase()\
    \ {\n            return c.to_lowercase();\n        }\n    }\n    return String::from(\"\
    \");", "    // Convert string to character array\n    let char_array = word.to_lowercase().chars();\n\
    \    // Find index of first vowel\n    let vowel_idx = char_array\n        .iter()\n\
    \        .find(|&c| c == 0x4E00u && c < 0x9FFFu)\n        .expect(\"String contains\
    \ invalid character\");\n    // Find index of last consonant\n    let con_idx\
    \ = char_array\n        .iter()\n        .rfind(|&c| c == 0xFF0Fu && c < 0xFFE0u)\n\
    \        .expect(\"String contains invalid character\");\n    // Find the first\
    \ vowel after the first consonant\n    let start = con_idx.wrapping_add(1).unwrap_or(vowel_idx);\n\
    \    // Find the first vowel before the second consonant\n    let end = con_idx.wrapping_sub(1).unwrap_or(vowel_idx);\n\
    \    // Return empty string if there is no vowel\n    match end {\n        0 =>\
    \ \"\",\n        _ => {\n            // Convert character array to string\n  \
    \          let mut s = String::new();\n            for (idx, char) in char_array[start..end].iter().enumerate()\
    \ {\n                // Check if current character is a vowel\n              \
    \  if char >= 0x4E00u && char <= 0x9FFFu {\n                    // If the current\
    \ character is a vowel\n                    // Add to the string only if it's\
    \ not at the end or beginning of the string\n                    if idx < char_array.len()\
    \ - 1 || idx > 0 {\n                        s.push_str(&char as char);\n     \
    \               }\n                } else {\n                    break;\n    \
    \            }\n            }\n            // Return empty string if the string\
    \ contains invalid character\n            s.into_string().expect(\"String contains\
    \ invalid character\")\n        }\n    }", "    let len = word.length();\n   \
    \ let mut res = String::new();\n\n    for _ in 0..len {\n        let first_c =\
    \ word.chars().next().unwrap();\n        let mut next = String::new();\n\n   \
    \     for c in word.chars() {\n            if c.is_uppercase() {\n           \
    \     next.push(c);\n            } else {\n                next.push(first_c.unwrap());\n\
    \                break;\n            }\n        }\n\n        if next.is_empty()\
    \ {\n            continue;\n        }\n\n        let mut i = len - 1;\n      \
    \  let mut found = false;\n\n        while i >= 0 && found == false {\n      \
    \      if let Some(vowel) = &next[i] {\n                if !vowel.contains('a'\
    \ && 'e' && 'i' && 'o' && 'u') {\n                    found = vowel;\n       \
    \         } else {\n                    next.remove(i);\n                    i\
    \ -= 1;\n                }\n            }\n\n            i -= 1;\n        }\n\n\
    \        if found == true {\n            res.push((&found).to_string());\n   \
    \     }\n    }\n\n    if res.is_empty() {\n        return \"\";\n    }\n\n   \
    \ res.chomp()", "    let mut vowel_index = word.rfind('a', -1);\n    let mut vowel_start\
    \ = vowel_index;\n    let mut vowel_end = vowel_index;\n    vowel_end = word.rfind('a',\
    \ vowel_end + 1);\n\n    for vowel_index in word.rfind('a', vowel_end).rev() {\n\
    \        vowel_start = vowel_index;\n        vowel_end = word.rfind('a', vowel_start\
    \ + 1);\n\n        if vowel_index == 0 {\n            break\n        }\n    }\n\
    \    if vowel_start == vowel_end {\n        return \"\".to_string();\n    }\n\
    \    if vowel_end < word.len() {\n        return word[vowel_end..].to_string();\n\
    \    }\n    word.to_string()", "    let mut vowels = String::new();\n    word.chars().filter(|&c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n    vowels.push_str(\"\
    u\");\n    word.chars().filter(|&c| c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u').skip(1);\n    vowels.push_str(\"U\");\n    word.chars().filter(|&c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').skip(1).skip(1);\n\
    \    vowels.push_str(\"I\");\n    word.chars().filter(|&c| c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u').skip(1).skip(1).skip(1);\n    vowels.push_str(\"\
    O\");\n    word.chars().filter(|&c| c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u').skip(1).skip(1).skip(1).skip(1);\n    vowels.push_str(\"a\");\n\
    \    word.chars().filter(|&c| c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u').skip(1).skip(1).skip(1).skip(1).skip(1);\n    vowels.push_str(\"e\"\
    );\n    word.chars().filter(|&c| c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u').skip(1).skip(1).skip(1).skip(1).skip(1).skip(1);\n    vowels.push_str(\"\
    i\");\n    word.chars().filter(|&c| c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u').skip(1).skip(1).skip(1).skip(1).skip(1).skip(1);\n    vowels.push_str(\"\
    o\");\n    word.chars().filter(|&c| c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u').skip(1).skip(1).skip(1).skip(1).skip(1).skip(1);\n    vowels.push_str(\"\
    u\");\n    word.chars().filter(|&c| c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u').skip(1).skip(1).skip(1).skip(1).skip(1).skip(1).skip(1);\n    vowels.push_str(\"\
    A\");\n    word.char", "    let vowels = vec![ 'A', 'E', 'I', 'O', 'U' ];\n\n\
    \    let mut index = 0;\n    let mut chars = word.chars().collect::<Vec<char>>();\n\
    \    while index < chars.len() - 1 {\n        if chars[index] == chars[index +\
    \ 1] {\n            return vowels[(index + 1) % vowels.len()].to_string();\n \
    \       }\n        index += 1;\n    }\n    \"\".to_string()", "    let mut vowel\
    \ = String::new();\n    let mut vowel_flag = false;\n    let mut min_pos = word.len()\
    \ - 1;\n    let mut max_pos = 0;\n    for (i, c) in word.chars().enumerate() {\n\
    \        if vowel_flag {\n            if c == vowel.chars().last().unwrap() {\n\
    \                min_pos = i;\n                break;\n            } else {\n\
    \                min_pos = i;\n            }\n        } else {\n            vowel_flag\
    \ = is_vowel(c);\n        }\n        max_pos = i;\n    }\n    if min_pos == max_pos\
    \ {\n        return vowel;\n    }\n    if min_pos < max_pos {\n        vowel =\
    \ String::from(word[min_pos - 1]);\n    } else {\n        vowel = String::from(word[max_pos\
    \ + 1]);\n    }\n    return vowel;", "    let mut vowels: Vec<&str> = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_start = 0;\n    let mut\
    \ vowels_end = 0;\n\n    let word_len = word.len();\n    if word_len > 3 {\n \
    \       let mut first_vowel_index: usize = 0;\n        for index in 0..word_len\
    \ - 2 {\n            if word[index] == 'a' || word[index] == 'e' || word[index]\
    \ == 'i' || word[index] == 'o' || word[index] == 'u' {\n                first_vowel_index\
    \ = index;\n                break;\n            }\n        }\n        if first_vowel_index\
    \ != 0 {\n            vowels_start = first_vowel_index;\n        }\n\n       \
    \ let mut last_vowel_index: usize = 0;\n        for index in word_len - 1 {\n\
    \            if word[index] == 'a' || word[index] == 'e' || word[index] == 'i'\
    \ || word[index] == 'o' || word[index] == 'u' {\n                last_vowel_index\
    \ = index;\n                break;\n            }\n        }\n        if last_vowel_index\
    \ != word_len {\n            vowels_end = last_vowel_index;\n        }\n\n   \
    \     if vowels_start != 0 && vowels_end != 0 {\n            word = word.split_whitespace().collect();\n\
    \n            for index in 0..(vowels_end - vowels_start + 1) {\n            \
    \    if word[index] == &vowels[vowels_end - vowels_start - 1] {\n            \
    \        return word[vowels_start - 1];\n                }\n            }\n  \
    \      }\n    }\n\n    return \"\";", "    let mut vowels: Vec<String> = Vec::new();\n\
    \    let mut index = word.len();\n    while index > 0 {\n        if index > 1\
    \ && word[index..index + 1].chars().filter(|x| !vowels.contains(&x)).len() <=\
    \ 1 {\n            vowels.push(word[index..index + 1].chars().filter(|x| !vowels.contains(&x)).collect::<Vec<String>>()[0]);\n\
    \        }\n        index -= 1;\n    }\n    vowels.into_iter().next().cloned()",
  "    if word.len() < 2 {\n        return String::new();\n    }\n    \n    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut index = 0;\n\
    \    while index < word.len() - 1 {\n        for vowel in vowels {\n         \
    \   if word.len() >= index+1 {\n                let current = word[index].to_lowercase();\n\
    \                let next_letter = word[index+1].to_lowercase();\n           \
    \     \n                if current == vowel && next_letter != vowel {\n      \
    \              return vowel.to_string();\n                }\n            }\n \
    \       }\n        \n        index += 1;\n    }\n    \n    return String::new();",
  "    let mut counter = word.len();\n    let mut vowels: [Char; 4] = [' ', 'a', 'e',\
    \ 'i', 'o', 'u'];\n    vowels.sort_unstable();\n    loop {\n        counter -=\
    \ 1;\n        if counter < 0 {\n            break;\n        }\n        if word[counter]\
    \ == '\\0' {\n            break;\n        }\n        let mut index: usize = 0;\n\
    \        let mut flag = true;\n        let mut j = 0;\n        for (j, v) in vowels.iter().enumerate()\
    \  {\n            if word[counter + j] != v {\n                flag = false;\n\
    \                break;\n            }\n        }\n        if flag {\n       \
    \     return word[counter];\n        }\n    }\n    return \"\";", "    if word.is_empty()\
    \ { return \"\"; }\n    \n    let mut i = word.len() - 1;\n    let mut j = 0;\n\
    \    \n    while i >= 0 && j != word.len() {\n        let c = word[j];\n     \
    \   \n        if c.is_vowel() {\n            i -= 1;\n            j += 1;\n  \
    \      } else if c.is_consonant() {\n            i -= 1;\n        } else {\n \
    \           break;\n        }\n    }\n    \n    if i == -1 { return \"\"; }\n\
    \    \n    let c = word[j];\n    \n    if c.is_vowel() {\n        return c.to_string();\n\
    \    } else if c.is_consonant() {\n        word.remove(j, 1);\n        return\
    \ get_closest_vowel(word);\n    }\n    \n    return \"\";", "    let vowel_count\
    \ = word.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count();\n    let mut vowel_count = vowel_count + 1;\n    \n    vowel_count\
    \ - word.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count();\n    \n    if vowel_count < 2 {\n        return \"\".to_string();\n\
    \    }\n    let mut min_dist = word.len();\n    let mut vowel = String::new();\n\
    \    \n    for c in word.chars().rev() {\n        if c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u' {\n            continue;\n        }\n       \
    \ \n        let dist = c - word.chars().filter(|c| c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u').count();\n        \n        if dist < min_dist\
    \ {\n            min_dist = dist;\n            vowel = c\n        }\n    }\n \
    \   return vowel;", "    let mut vowels = ['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut found_vowel = false;\n    let mut vowel_to_add = String::new();\n    let\
    \ mut vowel_found = false;\n    let mut index = 0;\n    \n    while !found_vowel\
    \ && index < word.len() {\n        if word[index] in vowels {\n            found_vowel\
    \ = true;\n            vowel_to_add = word[index];\n            vowel_found =\
    \ true;\n            index += 1;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    \n    if !found_vowel {\n        vowel_to_add.clear();\n\
    \    }\n    \n    if !vowel_found {\n        return vowel_to_add;\n    } else\
    \ {\n        return String::new();\n    }", "    let len = word.len();\n    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut first_consonant\
    \ = false;\n    let mut last_consonant = false;\n    let mut first_vowel = false;\n\
    \    let mut last_vowel = false;\n    for i in 0..len {\n        if word[i] ==\
    \ ' ' {\n            last_consonant = false;\n            last_vowel = false;\n\
    \        }\n        if first_consonant && word[i] == first_vowel.as_ref() {\n\
    \            last_consonant = false;\n            last_vowel = false;\n      \
    \  } else {\n            if first_vowel {\n                first_vowel = false;\n\
    \            } else {\n                if word[i] == vowels[first_vowel.as_ref()]\
    \ {\n                    first_vowel = Some(i);\n                    first_consonant\
    \ = true;\n                }\n                if word[i] != vowels[first_vowel.as_ref()]\
    \ {\n                    last_consonant = true;\n                }\n         \
    \   }\n            if last_consonant {\n                last_consonant = false;\n\
    \            } else {\n                if word[i] == vowels[last_vowel.as_ref()]\
    \ {\n                    last_vowel = Some(i);\n                    last_consonant\
    \ = true;\n                }\n                if word[i] != vowels[last_vowel.as_ref()]\
    \ {\n                    first_vowel = Some(i);\n                    last_consonant\
    \ = true;\n                }\n            }\n        }\n    }\n    if first_vowel.is_none()\
    \ || last_consonant.is_none() {\n        return \"\".to_string();\n    }\n   \
    \ let left = first_vowel.unwrap();\n    let right = last_vowel.unwrap();\n   \
    \ word.chars()\n        .enumerate()\n        .skip_while(|&(idx, ch)| *ch ==\
    \ ' ' || ch == ' ')\n        .filter(|&(idx, ch)| ch == 'a' || ch == 'e' || ch\
    \ == 'i' || ch == 'o' || ch == 'u')\n        .take_while(|&(idx, ch)| idx >= left\
    \ && idx <= right)\n        .next()\n        .unwrap()\n        .to_string()",
  "    let mut vowels: Vec<Char> = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let\
    \ mut start = 0;\n    let mut end = word.len() - 1;\n\n    while start < end {\n\
    \        if word[start].is_uppercase() && word[end].is_uppercase() {\n       \
    \     while start < end {\n                if word[start].is_uppercase() && word[end].is_uppercase()\
    \ &&\n                    vowels.contains(word[end]) {\n                    return\
    \ word[end].to_string();\n                }\n                match word[start]\
    \ {\n                    let ref v = word.split_ascii_lowercase().next().get(1);\n\
    \                    let ref s = word.split_ascii_lowercase().next().get(3);\n\
    \                    let ref t = word.split_ascii_lowercase().next().get(5);\n\
    \                    let ref y = word.split_ascii_lowercase().next().get(7);\n\
    \                    let ref z = word.split_ascii_lowercase().next().get(9);\n\
    \                    let ref w = word.split_ascii_lowercase().next().get(11);\n\
    \                    let ref b = word.split_ascii_lowercase().next().get(13);\n\
    \                    let ref c = word.split_ascii_lowercase().next().get(15);\n\
    \                    let ref l = word.split_ascii_lowercase().next().get(17);\n\
    \                    let ref r = word.split_ascii_lowercase().next().get(19);\n\
    \                    let ref z = word.split_ascii_lowercase().next().get(21);\n\
    \                    let ref p = word.split_ascii_lowercase().next().get(23);\n\
    \                    let ref g = word.split_ascii_lowercase().next().get(25);\n\
    \                    let ref z = word.split_ascii_lowercase().next().get(27);\n\
    \                    let ref k = word.split_ascii_lowercase().next().get(29);\n\
    \                    let ref s = word.split_ascii_lowercase().next().get(31);\n\
    \                    let ref h = word.split_ascii_lowercase().next().get(33);\n\
    \                    let ref j = word.split_ascii_lowercase().next().get(35);\n\
    \                    let ref m = word.split_ascii_lowercase().next().get(37);\n\
    \                    let ref g = word.split_ascii_lowercase().next().get(39);\n\
    \                    let ref j = word.split_ascii_lowercase().next().get(41);\n\
    \                    let ref d = word.split_ascii_lowercase().next().get(43);\n\
    \                    let ref b = word.split_ascii_lowercase().next().get(45);\n\
    \                    let ref j = word.split_ascii_lowercase().next().get(47);\n\
    \                    let ref d = word.split_ascii_lowercase().next().get(49);\n\
    \                    let ref y = word.split_ascii_lowercase().next().get(51);\n\
    \                    let ref s = word.split_ascii_lowercase().next().get(53);\n\
    \                    let ref n = word.split_ascii_lowercase().next().get(55);\n\
    \                    let ref q = word.split_ascii_lowercase().next().get(57);\n\
    \                    let ref r = word.split_", "    let mut vowel_set = HashSet::new();\n\
    \    vowel_set.insert(\"a\".to_string());\n    vowel_set.insert(\"i\".to_string());\n\
    \    vowel_set.insert(\"e\".to_string());\n    vowel_set.insert(\"o\".to_string());\n\
    \    vowel_set.insert(\"u\".to_string());\n    vowel_set.insert(\"A\".to_string());\n\
    \    vowel_set.insert(\"I\".to_string());\n    vowel_set.insert(\"E\".to_string());\n\
    \    vowel_set.insert(\"O\".to_string());\n    vowel_set.insert(\"U\".to_string());\n\
    \    let mut start = word.len() - 1;\n    loop {\n        if let Some(idx) = word.rfind(|c|\
    \ vowel_set.contains(c.to_string())) {\n            return word[idx..].to_string();\n\
    \        }\n        if start < 0 {\n            return String::new();\n      \
    \  }\n        if let Some(idx) = word.rfind(|c| vowel_set.contains(c.to_string()))\
    \ {\n            start = idx;\n        } else {\n            start -= 1;\n   \
    \     }\n    }", "    let mut vowel = String::new();\n\n    for ch in word.rposition(|&ch|\
    \ ch >= 'A' && ch <= 'Z') {\n        for consonant in 'a' - 'A' + 1..'z' - 'A'\
    \ + 1 {\n            if ch >= consonant && (ch <= 'z' || ch >= 'Z') {\n      \
    \          vowel += consonant;\n                break;\n            }\n      \
    \  }\n    }\n\n    vowel", "    let mut vowel = String::new();\n    let mut consonants\
    \ = String::new();\n    let mut consonant_index = word.len();\n    consonants.push_str(\"\
    bBcCdDfFgGhHjJkKlLmMNnNpPqQrRsStTuUvVwWxXzZ\");\n\n    while consonant_index >\
    \ 0 {\n        consonant_index -= 1;\n        consonants.push_str(word.chars().skip_while(|c|\
    \ *c == consonants[consonant_index]))\n    }\n\n    let mut vowel_index = word.len()\
    \ - 1;\n    vowel.push_str(word.chars().skip_while(|c| {\n        vowel_index\
    \ += 1;\n        vowel_index > 0 && *c == consonants[vowel_index]\n    }).collect::<String>());\n\
    \n    vowel", "    let mut vowels = \"aeiou\";\n    if word.len() > 0 {\n    \
    \    let vowels_from_right = word.chars().rev().filter(|&c| vowels.contains(&c)).last();\n\
    \        let vowels_from_left = word.chars().filter(|&c| vowels.contains(&c)).first();\n\
    \        if vowels_from_right.is_some() && vowels_from_left.is_some() {\n    \
    \        return word[word.len() - vowels_from_right.len() - vowels_from_left.len()..].to_string();\n\
    \        }\n    }\n    \"\".to_string()", "    let mut vowels = vec![\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"];\n    vowels.sort_by_key(|&v|\
    \ word.chars().position(|&c| c.to_ascii_lowercase().cmp(&v)))\n        .take(word.len()\
    \ - 1).collect()", "    if word.len() == 0 {\n        return \"\".to_string();\n\
    \    }\n    let mut vowel: Option<&str> = None;\n    word.split_whitespace().rev().for_each(|c|\
    \ {\n        match c.to_lowercase().as_str() {\n            \"a\" => \"a\",\n\
    \            \"e\" => \"e\",\n            \"i\" => \"i\",\n            \"o\" =>\
    \ \"o\",\n            \"u\" => \"u\",\n            \"y\" => \"y\",\n         \
    \   _ => (),\n        }\n    });\n    for vowel in word[word.len() - 1].chars().filter_map(|c|\
    \ {\n        if c.is_uppercase() {\n            Some(c.to_string())\n        }\
    \ else if c.is_lowercase() {\n            None\n        } else {\n           \
    \ None\n        }\n    }) {\n        let index = word.index(vowel);\n        let\
    \ rest = word[index + vowel.len() + 1];\n        if rest.isalpha() {\n       \
    \     return vowel.clone();\n        }\n    }\n    \"\".to_string()", "    //\
    \ Your code goes here\n    let vowels = \"aeiou\".to_string();\n    let vowels_size\
    \ = vowels.len();\n    let mut last_consonant = \"\";\n    for i in word.len()\
    \ - 1 {\n        if word[i] == &vowels[vowels_size - 1] { \n            last_consonant\
    \ = &vowels[vowels_size - 1];\n            break;\n        }\n    }\n    let mut\
    \ last_consonant_pos = word.len();\n    for i in word.reverse().len() {\n    \
    \    if word[last_consonant_pos] == &vowels[vowels_size - 1] {\n            break;\n\
    \        }\n        last_consonant_pos = i;\n    }\n    last_consonant_pos", "\t\
    let vowels = vec![ 'a', 'e', 'i', 'o', 'u', 'y' ];\n\tlet vowels_len = vowels.len();\n\
    \tlet vowel_counts = HashMap::new();\n\tlet vowel_iter = word.char_indices();\n\
    \tfor vowel in vowels {\n\t\tlet mut count = 0;\n\t\tlet mut curr_iter = vowel_iter;\n\
    \t\tlet mut has_next = vowel.chars().any(|c|{\n\t\t\tcurr_iter.next().unwrap_or(false)\n\
    \t\t\t\t&& c == vowel\n\t\t});\n\t\twhile has_next {\n\t\t\tcurr_iter.next().unwrap_or(false)?;\n\
    \t\t\tcount += 1;\n\t\t\thas_next = vowel.chars().any(|c|{\n\t\t\t\tcurr_iter.next().unwrap_or(false)\n\
    \t\t\t\t\t&& c == vowel\n\t\t\t});\n\t\t}\n\t\tvowel_counts.insert(vowel, count);\n\
    \t}\n\tlet min_count = vowel_counts.iter().min_by(|a, b|{\n\t\t*a.key.cmp(&b.key).unwrap_or(*b.key.cmp(&a.key).unwrap_or(1))\n\
    \t}).unwrap_or(1);\n\tlet mut min_vowel = String::new();\n\tlet mut curr_iter\
    \ = vowel_iter;\n\tlet mut has_next = vowel.chars().any(|c|{\n\t\tcurr_iter.next().unwrap_or(false)\n\
    \t\t\t&& c == vowel\n\t});\n\twhile has_next {\n\t\tcurr_iter.next().unwrap_or(false)?;\n\
    \t\tlet vowel = vowels[vowels.iter().position(|&a|{\n\t\t\t*a == c\n\t\t}).unwrap().unwrap()];\n\
    \t\tlet count = vowel_counts.get(&vowel).unwrap_or(0);\n\t\tif min_count > count\
    \ {\n\t\t\tmin_count = count;\n\t\t\tmin_vowel = vowel;\n\t\t}\n\t\thas_next =\
    \ vowel.chars().any(|c|{\n\t\t\tcurr_iter.next().unwrap_or(false)\n\t\t\t\t&&\
    \ c == vowel\n\t\t});\n\t}\n\treturn min_vowel", "    let mut left = 0\n    let\
    \ mut right = word.len() - 1;\n\n    let mut vowels = vec!['A', 'a', 'O', 'o',\
    \ 'U', 'u', 'E', 'e']\n    .iter()\n    .filter(|&vowel| {\n        if *vowel\
    \ == word[left] || word[left] == ' ' {\n            vowel.parse::<i32>().is_err()\n\
    \        } else {\n            false\n        }\n    });\n\n    if word[right]\
    \ == 'o' || word[right] == 'u' {\n        vowels.push(word[right]);\n    }\n\n\
    \    let mut vowel_count = 0;\n\n    while left < right {\n        match vowels.next()\
    \ {\n            Some(vowel) => {\n                if vowel == word[right] {\n\
    \                    vowel_count += 1;\n                } else {\n           \
    \         vowel_count = 1;\n                }\n            },\n            None\
    \ => break,\n        }\n\n        left += 1;\n    }\n\n    if vowel_count == 0\
    \ {\n        \"\".to_string()\n    } else {\n        vowels.next().unwrap().to_string()\n\
    \    }", "    if word.len() < 3 || word.len() > 5 || word[0] != word[0] {\n  \
    \      return \"\";\n    }\n    let mut vowels = Vec::new();\n    vowels.push(word[0]);\n\
    \    for c in word.clone() {\n        if c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I'\n            || c ==\
    \ 'O' || c == 'U' {\n            vowels.push(c);\n        }\n    }\n    if vowels.len()\
    \ == 0 {\n        return \"\";\n    }\n    let mut vowels_count = vowels.len();\n\
    \    let mut next_consonant = 1;\n    let mut closest = &vowels.first();\n   \
    \ let mut next_closest = &vowels.first();\n    let mut index = 0;\n    while vowels_count\
    \ > 0 {\n        let mut distance = word.len() - vowels_count;\n        while\
    \ distance >= 0 {\n            let mut index = word.chars().rposition(|&c| c ==\
    \ next_closest).unwrap();\n            if index < word.len() && index >= 0 {\n\
    \                closest = next_closest;\n                next_closest = (&vowels)[index];\n\
    \                distance = distance - 1;\n            }\n            distance\
    \ = distance - 1;\n        }\n        index = index + 1;\n        next_closest\
    \ = (&vowels)[index];\n        vowels_count = vowels_count - 1;\n    }\n    if\
    \ closest == &vowels.first() {\n        return \"\";\n    }\n    return closest;",
  "    word.chars().skip_while(|&c| !is_vowel(c)).take_while(|c| *c == 'a' || *c ==\
    \ 'e' || *c == 'i' || *c == 'o' || *c == 'u').collect::<String>().cloned()", " \
    \   \n    // Find first vowel in the right side.\n    let first_vowel = word.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').next();\n    \n  \
    \  // Find last vowel in the right side.\n    let last_vowel = word.chars().filter(|c|\
    \ c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U').next();\n    \n  \
    \  // Find the first vowel between first_vowel and last_vowel.\n    let current_index\
    \ = word.chars().rposition(|c| c == first_vowel);\n    \n    // Find the last\
    \ vowel between first_vowel and last_vowel.\n    let next_index = word.chars().rposition(|c|\
    \ c == last_vowel);\n    \n    // Check if there is at least one vowel in the\
    \ right side.\n    if current_index == Some(next_index) \n    { \n        // If\
    \ the two vowels are in the right side, then return it.\n        return String::from(first_vowel);\n\
    \    }\n    \n    // If the two vowels are not in the right side then return empty\
    \ string.\n    String::from(\"\")", "    let mut result = String::new();\n\n \
    \   let mut start = word.rfind('a', 0);\n    let mut end = word.rfind('u');\n\
    \    while start < end {\n        let vowel = word[start + 1];\n        if vowel\
    \ != \"a\" && vowel != \"e\" && vowel != \"i\" && vowel != \"o\" && vowel != \"\
    u\" {\n            break;\n        }\n        start = word.rfind('a', start +\
    \ 1);\n    }\n\n    if start < end {\n        result = word[start..end].to_string();\n\
    \    }\n    result", "    let mut vowels: Vec<String> = vec![\"a\", \"e\", \"\
    i\", \"o\", \"u\"];\n\n    let word_string = word.to_lowercase();\n    for vowel\
    \ in vowels {\n        if word_string.contains(vowel) {\n            return vowel;\n\
    \        }\n    }\n    \"\"", "    let mut vowels = vec![\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"];\n    for vowel in vowels.iter() {\n        if word.len() >= vowel.len()\
    \ {\n            let mut index = word.len();\n            for cons in vowels.iter().rev()\
    \ {\n                if index >= cons.len() {\n                    return vowel.to_string();\n\
    \                }\n                index = index - cons.len();\n            }\n\
    \        }\n    }\n    \"\"", "    let mut vowels = vec![];\n    let mut last_consonant\
    \ = String::new();\n    for &consonant in word.as_str().rposition(|c| !c.is_ascii_letter())\
    \ {\n        if consonant.is_ascii_letter() {\n            last_consonant = consonant;\n\
    \        } else {\n            vowels.push(consonant.to_ascii_lowercase());\n\
    \        }\n    }\n\n    if vowels.len() == 0 {\n        return String::new();\n\
    \    }\n\n    let vowel_mut =  vowels.iter().take_while(|&vowel| vowel.chars().any(|c|\
    \ !c.is_ascii_letter())).cloned().collect();\n    let consonant_mut =  vowels.iter().take_while(|&consonant|\
    \ consonant.chars().any(|c| !c.is_ascii_letter())).cloned().collect();\n    let\
    \ mut vowel_next = String::new();\n    let mut consonant_next = String::new();\n\
    \n    loop {\n        if consonant_next.len() > 0 {\n            consonant_next\
    \ = consonant_next.into_lowercase();\n        } else {\n            consonant_next\
    \ = last_consonant;\n        }\n\n        if vowel_next.len() > 0 {\n        \
    \    vowel_next = vowel_next.into_lowercase();\n        } else {\n           \
    \ vowel_next = vowels.next().unwrap();\n        }\n\n        if consonant_next.chars().any(|c|\
    \ c.is_ascii_letter()) && !vowel_next.chars().any(|c| c.is_ascii_letter()) {\n\
    \            break;\n        }\n    }\n\n    vowel_next.to_ascii_lowercase()",
  "    word.chars().enumerate()\n        .enumerate()\n        .find(|(_, c)| !c.is_uppercase())\n\
    \        .unwrap_or(word.len())\n        .wrapping_add(1).unwrap_or_else(|| word.len())\n\
    \        .map{|i| if i >= word.len() || !i.is_vowel() {return \"\"}; i}\n    \
    \    .unwrap()\n        .wrapping_add(1).unwrap()\n        .to_string_lossy().to_string()",
  "    word.chars()\n        .filter(|&c| c !='A' && c !='E' && c !='I' && c !='O'\
    \ && c !='U' && c !='Y')\n        .filter(|&c| c !='a')\n        .filter(|&c|\
    \ c !='e')\n        .filter(|&c| c !='i')\n        .filter(|&c| c !='o')\n   \
    \     .filter(|&c| c !='u')\n        .filter(|&c| c !='y')\n        .last()\n\
    \        .unwrap_or(String::new())", "    let mut vowels = \"a\";\n    let mut\
    \ index = 0;\n    for c in word.chars() {\n        vowels = c.to_lowercase().chars().skip_while(|c|\
    \ *c != 'a' && *c != 'e' && *c != 'i' && *c != 'o' && *c != 'u').collect::<Vec<_>>()\n\
    \            .into_iter().find(|v| *v != *c).unwrap(); // find first vowel before\
    \ current letter\n        index = *c;\n    }\n    vowels", "    let mut current\
    \ = word.chars();\n    let mut vowel = String::new();\n    vowel.push(0);\n\n\
    \    current.next();\n    current.next();\n    current.next();\n    current.next();\n\
    \    current.next();\n    current.next();\n\n    while !current.is_empty() {\n\
    \        current.next();\n        if current == vowel.chars() {\n            break;\n\
    \        }\n        current.next();\n    }\n\n    vowel", "    let mut vowels_found\
    \ = false;\n    let mut vowel_to_search = \"\";\n    let mut prev_pos = 0;\n \
    \   let mut i = 0;\n    while i < word.len() {\n        let mut found = false;\n\
    \        if word[i] >= 'A' && word[i] <= 'Z' {\n            vowel_to_search =\
    \ word[i..].to_lowercase();\n            for i in 1..word.length() - vowel_to_search.len()\
    \ {\n                if word[i] == vowel_to_search[i - 1] { found = true; }\n\
    \            }\n        } else {\n            vowel_to_search = word[i..].to_lowercase();\n\
    \            for i in 1..word.length() - vowel_to_search.len() {\n           \
    \     if word[i] == vowel_to_search { found = true; }\n            }\n       \
    \ }\n        if found {\n            prev_pos = i;\n            vowels_found =\
    \ true;\n        }\n        i = prev_pos + 1;\n    }\n    if vowels_found {\n\
    \        vowel_to_search\n    } else {\n        \"\".to_string()\n    }", "  \
    \  let mut vowel_index: usize = 0;\n    let mut current_vowel: Option<String>\
    \ = None;\n    for c in word.chars() {\n        if c.to_lowercase().contains(\"\
    a\") {\n            vowel_index = word.chars().position(|c| c.to_lowercase() ==\
    \ 'a');\n            current_vowel = Some(word.chars().nth(vowel_index));\n  \
    \      }\n        if c.to_lowercase().contains(\"e\") {\n            vowel_index\
    \ = word.chars().position(|c| c.to_lowercase() == 'e');\n            current_vowel\
    \ = Some(word.chars().nth(vowel_index));\n        }\n        if c.to_lowercase().contains(\"\
    i\") {\n            vowel_index = word.chars().position(|c| c.to_lowercase() ==\
    \ 'i');\n            current_vowel = Some(word.chars().nth(vowel_index));\n  \
    \      }\n        if c.to_lowercase().contains(\"o\") {\n            vowel_index\
    \ = word.chars().position(|c| c.to_lowercase() == 'o');\n            current_vowel\
    \ = Some(word.chars().nth(vowel_index));\n        }\n        if c.to_lowercase().contains(\"\
    u\") {\n            vowel_index = word.chars().position(|c| c.to_lowercase() ==\
    \ 'u');\n            current_vowel = Some(word.chars().nth(vowel_index));\n  \
    \      }\n        if !current_vowel.is_some() {\n            if current_vowel.is_none()\
    \ {\n                return \"\";\n            } else {\n                return\
    \ current_vowel.unwrap();\n            }\n        }\n    }\n    return \"\";",
  "    let mut vowels: Vec<&str> = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let\
    \ mut index = word.length() - 1;\n    while index >= 0 {\n        if word.chars().any(|c|\
    \ vowels.contains(c.to_lowercase())) {\n            let mut vowel_index = vowels.iter().position(|&x|\
    \ x == c.to_lowercase());\n            if vowel_index != 0 {\n               \
    \ let vowel = &vowels[vowel_index - 1];\n                return vowel;\n     \
    \       }\n        }\n        index -= 1;\n    }\n    \"\".to_string()", "   \
    \ let mut vowels: Vec<&str> = Vec::new();\n    let mut consonants: Vec<&str> =\
    \ Vec::new();\n    \n    for (i, c) in word.chars().enumerate() {\n        if\
    \ c.is_upper() {\n            vowels.push(String::from(&word[i..i].to_string()));\n\
    \        } else {\n            consonants.push(String::from(&word[i..i].to_string()));\n\
    \        }\n    }\n\n    let mut left_consonant_idx = 0;\n    let mut right_consonant_idx\
    \ = word.len() - 1;\n\n    loop {\n        if vowels.len() > 0 {\n           \
    \ return vowels[0][left_consonant_idx % vowels[0].len()];\n        }\n\n     \
    \   let mut left_vowel_idx = left_consonant_idx;\n        let mut right_vowel_idx\
    \ = right_consonant_idx;\n        \n        if left_vowel_idx == left_consonant_idx\
    \ {\n            left_vowel_idx += 1;\n        }\n\n        if right_vowel_idx\
    \ == right_consonant_idx {\n            right_vowel_idx -= 1;\n        }\n\n \
    \       if right_vowel_idx <= left_vowel_idx {\n            return \"\";\n   \
    \     }\n\n        if vowels[left_vowel_idx] != \"\" {\n            let mut right_vowel\
    \ = vowels[left_vowel_idx];\n            \n            left_vowel_idx -= 1;\n\n\
    \            while right_vowel_idx > left_vowel_idx {\n                right_vowel\
    \ -= 1;\n                if right_vowel == \"\" {\n                    break;\n\
    \                }\n                right_vowel_idx -= 1;\n            }\n\n \
    \           if right_vowel_idx > left_vowel_idx {\n                right_vowel\
    \ = vowels[left_vowel_idx];\n                left_vowel_idx -= 1;\n          \
    \  }\n\n            if right_vowel_idx > left_vowel_idx {\n                right_vowel\
    \ = vowels[left_vowel_idx];\n                left_vowel_idx -= 1;\n          \
    \  }\n\n            return right_vowel[left_vowel_idx % right_vowel.len()];\n\
    \        }\n        \n        left_consonant_idx += 1;\n        right_consonant_idx\
    \ -= 1;\n    }", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"\
    ];\n    let mut vowels_iter = vowels.iter();\n    let vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let mut vowels_len = vowels.len();\n\
    \    let mut vowels_iter = vowels.iter();\n    let ", "    let mut vowels = \"\
    aeiou\";\n    let mut pos = word.len();\n    let mut res = String::new();\n  \
    \  \n    while pos > 0 {\n        if word.starts_with(vowels) {\n            res.push_str(vowels.to_owned());\n\
    \            \n            word.swap(0, 0);\n            pos = 0;\n        }\n\
    \        \n        pos-= 1;\n    }\n    \n    res", "    let mut vowel: Option<usize>\
    \ = None;\n    let mut index: usize = 0;\n    let mut last_vowel = word.rfind(\"\
    a\", String::npos);\n    if last_vowel == String::npos { \n        last_vowel\
    \ = word.len();\n    }\n    for con in word.rchars().skip(last_vowel).rev() {\n\
    \        if vowel == Some(index) {\n            break;\n        }\n        if\
    \ con == Some('a'..='z')  {\n            vowel = Some(index);\n        }\n   \
    \     index = con;\n    }\n    if vowel == None {\n        return \"\";\n    }\n\
    \    word[vowel.take()]", "    let mut vowels_stack = Vec::new();\n    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowels_index\
    \ = 0;\n    for c in word.chars() {\n        if vowels.contains(c) {\n       \
    \     vowels_stack.push(vowels_index);\n        }\n        vowels_index += 1;\n\
    \    }\n    vowels_stack.push(-2);\n    if vowels_stack.len() == 0 {\n       \
    \ return \"\".to_string();\n    }\n    let mut vowels_index = vowels_stack.pop().unwrap();\n\
    \    let mut consonants_stack = Vec::new();\n    let mut consonants = vec![\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"];\n    let mut consonants_index\
    \ = 0;\n    for c in word.chars() {\n        if consonants.contains(c) {\n   \
    \         consonants_stack.push(consonants_index);\n        }\n        consonants_index\
    \ += 1;\n    }\n    consonants_stack.push(-2);\n    if consonants_stack.len()\
    \ == 0 {\n        return \"\".to_string();\n    }\n    let mut consonants_index\
    \ = consonants_stack.pop().unwrap();\n    match vowels_index - consonants_index\
    \ {\n        1 => return \"\".to_string(),\n        -1 => return \"u\".to_string(),\n\
    \        _ => {\n            match vowels_index - consonants_index {\n       \
    \         2 => return \"u\".to_string(),\n                -2 => return \"\".to_string(),\n\
    \                _ => {\n                    match vowels_index - consonants_index\
    \ {\n                        3 => return \"i\".to_string(),\n                \
    \        -3 => return \"\".to_string(),\n                        _ => {\n    \
    \                        match vowels_index - consonants_index {\n           \
    \                     4 => return \"e\".to_string(),\n                       \
    \         -4 => return \"\".to_string(),\n                                _ =>\
    \ {\n                                    match vowels_index - consonants_index\
    \ {\n                                        5 => return \"o\".to_string(),\n\
    \                                        -5 => return \"\".to_string(),\n    \
    \                                    _ => {\n                                \
    \            match vowels_index - consonants_index {\n                       \
    \                         6 => return \"a\".to_string(),\n                   \
    \                             -6 => return \"\".to_string(),\n               \
    \                                 _ => {\n                                   \
    \                 match vowels_index - consonants_index {\n                  \
    \                                      7 => return \"e\".to_string(),\n      \
    \                                                  -7 => return \"\".to_", " \
    \   if word.is_empty() {\n        return \"\";\n    }\n\n    let mut vowels =\
    \ vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n\n    let mut vowel_iter = word.chars().rposition(|&c|\
    \ vowels.contains(&c.to_lowercase()));\n\n    if vowel_iter.is_none() {\n    \
    \    return \"\";\n    }\n\n    let mut cur_vowel = 0;\n    let mut cur_consonant\
    \ = 0;\n\n    for &c in vowel_iter.unwrap().unwrap().as_ref() {\n        if c.to_lowercase()\
    \ == &vowels[cur_vowel] {\n            cur_vowel += 1;\n        } else {\n   \
    \         cur_consonant += 1;\n        }\n    }\n\n    if cur_consonant < cur_vowel\
    \ - 1 {\n        cur_vowel -= 1;\n    }\n\n    if cur_consonant == 1 {\n     \
    \   if cur_vowel == 0 {\n            return \"\".to_string();\n        } else\
    \ {\n            return vowels[cur_vowel].to_string();\n        }\n    }\n\n \
    \   vowels[cur_vowel].to_string()", "    let mut vowels = vec![\"a\", \"e\", \"\
    i\", \"o\", \"u\"];\n    let mut vowels_ending = vec![\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n\n    for c in word.chars() {\n        let index = vowels.iter().position(|&x|\
    \ x.chars().any(|&y| y == c));\n        if index != None {\n            vowels_ending.remove(index);\n\
    \        } else {\n            vowels_ending.push(c);\n        }\n    }\n\n  \
    \  vowels_ending.iter().cloned().find(|&x| vowels.iter().any(|&y| x == y)).map(|x|\
    \ x.to_string())", "    let vowels = \"aeiouAEIOU\".to_string();\n    let mut\
    \ vowel_index = word.chars().enumerate().cloned().collect::<Vec<_>>();\n    vowel_index.sort_by(|x,y|\
    \ x.1.cmp(&y.1).reverse());\n\n    let mut index = vowel_index.len() - 1;\n  \
    \  loop {\n        if index >= 0 {\n            if let Some(item) = vowel_index[index].1\
    \ {\n                if !vowels.contains(&item) {\n                    index =\
    \ index - 1;\n                    continue;\n                } else {\n      \
    \              break;\n                }\n            }\n        } else {\n  \
    \          return \"\";\n        }\n\n        if let Some(item) = vowel_index[index].1\
    \ {\n            if !vowels.contains(&item) {\n                break;\n      \
    \      } else {\n                return item;\n            }\n        }\n    \
    \    index = index - 1;\n    }\n\n    return \"\";", "    let vowel_pairs = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut closest_vowel = String::new();\n\
    \    for pair in vowel_pairs {\n        closest_vowel = word.split_matches(|c:\
    \ char| c.chars().any(|v|\n            v == pair as u32 || v == pair as u16)\n\
    \        ).next().unwrap().to_string()\n    }\n    if closest_vowel == \"\" {\n\
    \        \"\"\n    } else {\n        closest_vowel\n    }", "    \n    word.chars().enumerate()\n\
    \        .find_map(|(i, c)| {\n            match c {\n                'a' | 'e'\
    \ | 'i' | 'o' | 'u' => Some(i),\n                _ => None,\n            }\n \
    \       })\n        .and_then(|index| {\n            if index == 0 {\n       \
    \         \"\".to_string()\n            } else if index == word.len() - 1 {\n\
    \                get_vowel_before(word.chars().nth(index), true)\n           \
    \ } else if index == word.len() - 2 {\n                get_vowel_after(word.chars().nth(index),\
    \ true)\n            } else if index == word.len() - 3 {\n                get_vowel_before(word.chars().nth(index),\
    \ false)\n            } else {\n                get_vowel_after(word.chars().nth(index),\
    \ false)\n            }\n        })", "    use std::cmp::Ordering;\n    use std::collections::BTreeMap;\n\
    \n    let mut vowel_map = BTreeMap::new();\n    vowel_map.insert(\"\", Ordering::Less);\n\
    \n    for &c in word.chars() {\n        if c.is_uppercase() {\n            if\
    \ let Some(previous) = vowel_map.get(&c.to_string()) {\n                vowel_map.entry(previous).insert(Ordering::GreaterOrEqual,\
    \ 1);\n            }\n        } else {\n            if let Some(previous) = vowel_map.get(&c.to_string())\
    \ {\n                vowel_map.entry(previous).insert(Ordering::Less, 1);\n  \
    \          }\n        }\n    }\n\n    // For empty input\n    if vowel_map.len()\
    \ == 0 {\n        \"\".to_string()\n    } else {\n        let max_order = vowel_map.iter().max(|a,\
    \ b| a.1.cmp(&b.1).reverse()).unwrap();\n        let max_order = max_order.1.cmp(&max_order.0).reverse();\n\
    \        vowel_map.iter().filter(|&(_, order)| order == max_order).next().unwrap().0.to_string()\n\
    \    }", "    let mut vowels = vec![];\n    let mut vowel_end_pos = word.len()\
    \ - 1;\n    let mut last_consonant_pos = word.len() - 1;\n    let mut prev_consonant_pos\
    \ = 0;\n    while prev_consonant_pos < word.len() - 1 {\n        \n        if\
    \ word[prev_consonant_pos] == 'a' {\n            vowels.push(&word[prev_consonant_pos\
    \ + 1]);\n            last_consonant_pos++;\n            prev_consonant_pos++;\n\
    \            \n        } else if word[prev_consonant_pos] == 'e' {\n         \
    \   vowels.push(&word[prev_consonant_pos + 1]);\n            last_consonant_pos++;\n\
    \            prev_consonant_pos++;\n            \n        } else if word[prev_consonant_pos]\
    \ == 'i' {\n            vowels.push(&word[prev_consonant_pos + 1]);\n        \
    \    last_consonant_pos++;\n            prev_consonant_pos++;\n            \n\
    \        } else if word[prev_consonant_pos] == 'o' {\n            vowels.push(&word[prev_consonant_pos\
    \ + 1]);\n            last_consonant_pos++;\n            prev_consonant_pos++;\n\
    \            \n        } else if word[prev_consonant_pos] == 'u' {\n         \
    \   vowels.push(&word[prev_consonant_pos + 1]);\n            last_consonant_pos++;\n\
    \            prev_consonant_pos++;\n            \n        } else if word[prev_consonant_pos]\
    \ == 'A' {\n            vowels.push(&word[prev_consonant_pos + 1]);\n        \
    \    last_consonant_pos++;\n            prev_consonant_pos++;\n            \n\
    \        } else if word[prev_consonant_pos] == 'E' {\n            vowels.push(&word[prev_consonant_pos\
    \ + 1]);\n            last_consonant_pos++;\n            prev_consonant_pos++;\n\
    \            \n        } else if word[prev_consonant_pos] == 'I' {\n         \
    \   vowels.push(&word[prev_consonant_pos + 1]);\n            last_consonant_pos++;\n\
    \            prev_consonant_pos++;\n            \n        } else if word[prev_consonant_pos]\
    \ == 'O' {\n            vowels.push(&word[prev_consonant_pos + 1]);\n        \
    \    last_consonant_pos++;\n            prev_consonant_pos++;\n            \n\
    \        } else if word[prev_consonant_pos] == 'U' {\n            vowels.push(&word[prev_consonant_pos\
    \ + 1]);\n            last_consonant_pos++;\n            prev_consonant_pos",
  "    word.chars()\n        .enumerate()\n        .filter(|(_, ch)| ch.is_vowel())\n\
    \        .filter(|(_, ch)| !ch.is_lower())\n        .filter(|(_, ch)| !ch.is_upper())\n\
    \        .next()\n        .map(|(_, ch)| ch.to_uppercase())\n        .collect::<String>()",
  "    match word {\n        \"\" | \"a\" | \"e\" | \"i\" | \"o\" | \"u\" => \"\"\
    ,\n        _ => get_closest_vowel(word[1:].to_lowercase()) + \n            get_closest_vowel(word[0].to_lowercase())\n\
    \    }", "    let mut word = word.to_lowercase();\n    let mut vowels: Vec<String>\
    \ = vec![];\n    let mut last_consonant: usize = 0;\n    let mut last_vowel: usize\
    \ = 0;\n    for c in word.chars() {\n        match c {\n            'a' => vowels.push(String::from(\"\
    a\".to_string())),\n            'e' => vowels.push(String::from(\"e\".to_string())),\n\
    \            'i' => vowels.push(String::from(\"i\".to_string())),\n          \
    \  'o' => vowels.push(String::from(\"o\".to_string())),\n            'u' => vowels.push(String::from(\"\
    u\".to_string())),\n            'y' => vowels.push(String::from(\"a\".to_string())),\n\
    \            'e' => vowels.push(String::from(\"e\".to_string())),\n          \
    \  _ => (),\n        }\n        last_consonant = word.len() - 1;\n    }\n    let\
    \ mut first_consonant: usize = 0;\n    for c in word.chars() {\n        match\
    \ c {\n            'a' => vowels.push(String::from(\"a\".to_string())),\n    \
    \        'e' => vowels.push(String::from(\"e\".to_string())),\n            'i'\
    \ => vowels.push(String::from(\"i\".to_string())),\n            'o' => vowels.push(String::from(\"\
    o\".to_string())),\n            'u' => vowels.push(String::from(\"u\".to_string())),\n\
    \            'y' => vowels.push(String::from(\"a\".to_string())),\n          \
    \  'e' => vowels.push(String::from(\"e\".to_string())),\n            _ => (),\n\
    \        }\n        first_consonant = word.len() - 1;\n    }\n\n    for &vowel\
    \ in &vowels {\n        if let Some(position) = word.find(&vowel) {\n        \
    \    let current_vowel = &word[position..position + vowel.len()];\n          \
    \  let distance = current_vowel.len() - last_vowel;\n            if distance <\
    \ 0 {\n                continue;\n            }\n            if distance == 0\
    \ {\n                return vowel.to_string();\n            }\n            let\
    \ distance = current_vowel.len() - first_consonant;\n            if distance <\
    \ 0 {\n                continue;\n            }\n            if distance == 0\
    \ {\n                return vowel.to_string();\n            }\n        }\n   \
    \ }\n\n    \"\".to_string()", "    if word.len() > 3 {\n        let mut vowel\
    \ = String::new();\n        for ch in word[..] {\n            if ch == 'a' ||\
    \ ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' {\n                vowel.push(ch);\n\
    \            }\n        }\n        let mut consonant = String::new();\n      \
    \  for ch in word[word.len() - 3..] {\n            if ch == 'a' || ch == 'e' ||\
    \ ch == 'i' || ch == 'o' || ch == 'u' {\n                consonant.push(ch);\n\
    \            }\n        }\n        if vowel.len() != 0 {\n            return vowel.clone()\
    \ + vowel.len().to_string();\n        }\n        if consonant.len() != 0 {\n \
    \           return consonant.clone() + consonant.len().to_string();\n        }\n\
    \        return String::new();\n    }\n    String::new()", "    let mut vowels\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowel_start = String::new();\n\
    \    let mut vowel_end = String::new();\n    let mut vowel_candidates = vec![];\n\
    \    for con in word.chars().rev() {\n        if vowels.contains(&con) {\n   \
    \         vowel_start = con;\n            break;\n        }\n    }\n    for con\
    \ in word.chars().rev().rev() {\n        if vowels.contains(&con) {\n        \
    \    vowel_end = con;\n            break;\n        }\n    }\n    if vowel_start\
    \ != \"\" && vowel_end != \"\" {\n        vowel_candidates.push(vowel_start);\n\
    \        vowel_candidates.push(vowel_end);\n    }\n    vowel_candidates.iter().filter(|x|\
    \ x.chars().any(|y| vowels.contains(&y)).collect::<Vec<String>>()).cloned().collect::<Vec<String>>()\n\
    \        .iter()\n        .find(|x| vowel_candidates.iter().any(|y| x.contains(&y)));",
  "    let mut vowel_found = false;\n    let mut current_vowel_index = 1;\n    let\
    \ mut current_vowel = String::new();\n    let mut words_to_match = vec![\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"];\n    let mut vowels_in_word = 0;\n    let\
    \ mut vowels_in_word2 = words_to_match.len();\n    while vowel_found == false\
    \ {\n        if current_vowel_index == words_to_match.len() {\n            if\
    \ current_vowel_index == 0 {\n                vowel_found = true;\n          \
    \      current_vowel_index = 0;\n                current_vowel = String::new();\n\
    \            } else {\n                current_vowel_index += 1;\n           \
    \ }\n        } else {\n            if current_vowel_index + 1 < words_to_match.len()\
    \ {\n                let next_vowel = words_to_match[current_vowel_index + 1];\n\
    \                if next_vowel == word.chars().nth(current_vowel_index + 1).unwrap()\
    \ {\n                    vowel_found = true;\n                    current_vowel_index\
    \ += 1;\n                    current_vowel = next_vowel.to_string();\n       \
    \         } else {\n                    current_vowel_index += 1;\n          \
    \      }\n            } else {\n                current_vowel_index += 1;\n  \
    \          }\n        }\n        if vowels_in_word == 2 {\n            if vowels_in_word2\
    \ == 2 {\n                vowel_found = true;\n                current_vowel_index\
    \ = 0;\n                current_vowel = String::new();\n                vowels_in_word\
    \ = 0;\n            } else {\n                vowels_in_word += 1;\n         \
    \       current_vowel_index = 1;\n                current_vowel = words_to_match[current_vowel_index];\n\
    \            }\n        }\n    }\n    return current_vowel;", "    let mut word\
    \ = word.to_lowercase().chars().collect::<Vec<&str>>();\n    let mut left = word[word.len()\
    \ - 1];\n    let mut right = word[0];\n    \n    for c in word.chars() {\n   \
    \     if c == 'y' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'{\n\
    \            let mut temp = c;\n            while let Some(m) = word.rfind(&mut\
    \ temp){\n                temp = m\n            }\n            temp = temp.to_lowercase().chars().collect::<Vec<&str>>().len()\n\
    \            if temp > left {\n                left = temp\n            }\n  \
    \      }\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ {\n            let mut temp = c;\n            while let Some(m) = word.rfind(&mut\
    \ temp){\n                temp = m\n            }\n            temp = temp.to_lowercase().chars().collect::<Vec<&str>>().len()\n\
    \            if temp > right {\n                right = temp\n            }\n\
    \        }\n    }\n    word[word.len() - 1] = word.len()-1 - left;\n    word[0]\
    \ = word.len() - 1 - right;\n    word.iter().find(|c| c == 'u' || c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'y').unwrap_or(\"\")", "    let mut\
    \ result: String = \"\".to_string();\n    let mut vowels: Vec<&str> = vec![\"\
    A\", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\"];\n\n    let vowel_index: usize\
    \ = 0;\n\n    for consonant in word.chars().rev() {\n        if vowels[vowel_index..vowel_index\
    \ + 3].contains(&consonant) {\n            if vowel_index < vowels.len() - 2 {\n\
    \                vowel_index += 3;\n            } else {\n                vowel_index\
    \ = 0;\n            }\n        } else {\n            vowel_index += 1;\n     \
    \   }\n    }\n\n    result = vowels[vowel_index];\n    result", "    let mut vowel:\
    \ Char = '';\n    let mut len: usize = 0;\n    let mut i: usize = 0;\n    for\
    \ char in word.chars() {\n        if char.ascii_lowercase() == 'a' || char.ascii_lowercase()\
    \ == 'e' || char.ascii_lowercase() == 'i' || char.ascii_lowercase() == 'o' ||\
    \ char.ascii_lowercase() == 'u' {\n            vowel = char;\n            len\
    \ = i;\n        }\n        i += 1;\n    }\n    if len == 0 {\n        return '';\n\
    \    }\n    word.chars().skip_while(|&x| {\n        x < &vowel && x >= &vowel\n\
    \    });\n    let mut result = '';\n    if word.len() <= len {\n        result\
    \ = &vowel;\n    } else {\n        let mut last = word.chars().last();\n     \
    \   match last {\n            None => return result,\n            Some('e') =>\
    \ return result,\n            Some('i') => return result,\n            Some('o')\
    \ => return result,\n            Some('u') => {\n                result = &vowel;\n\
    \            }\n            Some('a') => {\n                result = &vowel;\n\
    \            }\n            Some('e') | Some('i') | Some('o') | Some('u') => {\n\
    \                result = &vowel;\n            }\n        }\n    }\n    result;",
  "    let mut vowels: Vec<String> = vec![\"A\", \"a\", \"I\", \"i\", \"O\", \"o\"\
    , \"U\", \"u\", \"E\", \"e\"];\n    vowels.sort_by_key(|&x| x.cmp(&word.chars().next().unwrap()));\n\
    \    vowels.iter().take_while(|&x| x.chars().count() < word.chars().count()).next()",
  "    if word.is_empty() {\n        return \"\";\n    }\n\n    let mut word = word.to_string();\n\
    \    let mut index = word.rfind('A');\n    let mut vowels: Vec<&str> = vec![];\n\
    \n    while index != word.len() - 1 {\n        if index < word.len() - 1 && (*index\
    \ + 2) == word[index] {\n            vowels.push(&word[index..index + 2]);\n \
    \           word = &word[index + 2..].to_string();\n        }\n        index -=\
    \ 1;\n    }\n\n    let mut index = word.rfind('U');\n    let mut vowels: Vec<&str>\
    \ = vec![];\n\n    while index != word.len() - 1 {\n        if index < word.len()\
    \ - 1 && (*index + 2) == word[index] {\n            vowels.push(&word[index..index\
    \ + 2]);\n            word = &word[index + 2..].to_string();\n        }\n    \
    \    index -= 1;\n    }\n\n    vowels.iter().map(|s| s.to_string()).filter(|s|\
    \ !s.is_empty()).cloned().collect()", "    let vowels = \"aeiouAEIOU\".to_string();\n\
    \    if word.len() < 3 || word.len() > 10 {\n        return \"\".to_string();\n\
    \    }\n\n    let mut vowels_count = word.chars().enumerate().filter(|&(i, &c)|\
    \ c.is_upper()).count();\n    let mut consonants_count = word.chars().enumerate().filter(|&(i,\
    \ &c)| !c.is_upper()).count();\n    if vowels_count < 2 || consonants_count <\
    \ 2 {\n        return \"\".to_string();\n    }\n\n    if vowels_count == 2 &&\
    \ consonants_count == 2 {\n        let mut index = word.len();\n        if word[index].is_uppercase()\
    \ {\n            index = index - 1;\n        }\n        return word[index].to_ascii_lowercase().to_string();\n\
    \    }\n    if vowels_count > 2 {\n        word = word.to_ascii_lowercase();\n\
    \        let vowels = word.chars().enumerate().filter(|&(i, &c)| c.is_upper()).collect::<Vec<(usize,\
    \ char)>>();\n        let mut index = vowels.len() - 1;\n        if vowels[index].1.is_lowercase()\
    \ {\n            index = -1;\n        }\n        let mut vowel_len = vowels[index].0.unwrap();\n\
    \        let mut vowel_char = vowels[index].1.unwrap();\n        if vowel_char\
    \ == vowels[vowel_len-1].1.unwrap() {\n            return vowel_char.to_ascii_lowercase().to_string();\n\
    \        }\n        let mut i = vowels.len() - 1;\n        let mut vowel_len =\
    \ i;\n        let mut vowel_char = vowels.last().unwrap().1;\n        while vowels.len()\
    \ > 1 {\n            if vowels[i].1.is_lowercase() {\n                index =\
    \ i;\n            }\n            vowel_len -= 1;\n            vowel_char = vowels[vowel_len].1.unwrap();\n\
    \            if vowel_char == vowels[vowel_len+1].1.unwrap() {\n             \
    \   return vowel_char.to_ascii_lowercase().to_string();\n            }\n     \
    \       i -= 1;\n            vowel_len = i;\n            vowel_char = vowels.last().unwrap().1;\n\
    \        }\n        return vowels.last().unwrap().1.to_ascii_lowercase().to_string();\n\
    \    }\n    if consonants_count > 2 {\n        word = word.to_ascii_lowercase();\n\
    \        let consonants = word.chars().enumerate().filter(|&(i, &c)| !c.is_upper()).collect::<Vec<(usize,\
    \ char)>>();\n        let mut index = consonants.len() - 1;\n        if consonants[index].1.is_lowercase()\
    \ {\n            index = -1;\n        }\n        let mut consonant_len = consonants[index].",
  "    word.chars().nth(word.len() - 1).filter(|c| !c.is_uppercase()).take_while(\
    \ |c| {\n        (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\
    \ c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U').expect(\"String contains\
    \ English letters only - get_closest_vowel(\\\"yogurt\\\")\");\n        c != 'a'\n\
    \    }).find_mut(&mut |&c| {\n        if let Some(vowel) = find_vowel(c) {\n \
    \           vowel.next = c;\n            return true;\n        }\n        false\n\
    \    }).map(|vowel| vowel.as_str()).unwrap_or(\"\")", "    let mut res = String::new();\n\
    \    for pos in word.rposition(|&char| char == 'a' || char == 'e' || char == 'i'\
    \ || char == 'o' || char == 'u') {\n        res.push_str(&word[pos..pos + 1]);\n\
    \    }\n    return res.into_owned();", "    let mut vowels = vec![\"A\", \"a\"\
    , \"E\", \"e\", \"I\", \"i\", \"O\", \"o\", \"U\", \"u\"];\n    let mut i = 0;\n\
    \    let mut j = word.size() - 1;\n    loop {\n        if word[i] == word[j] {\n\
    \            if i != j {\n                return if vowels.contains(&word[i +\
    \ 2]) {\n                    String::from(vowels[vowels.iter().position(|&v| v\
    \ == &word[i + 2]).unwrap()])\n                } else {\n                    String::from(\"\
    \".to_string());\n                };\n            }\n        }\n        i += 1;\n\
    \        j -= 1;\n    }", "    let vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n\n    let mut words: Vec<&str> = word.chars().collect();\n    let mut vowels:\
    \ Vec<&str> = vowels.iter().collect();\n\n    // 1. find all consonants\n    let\
    \ mut consonants: Vec<&str> = words.iter().filter_map(|&c| match c {\n       \
    \ 'a' => true,\n        'e' => true,\n        'i' => true,\n        'o' => true,\n\
    \        'u' => true,\n        _ => false,\n    }).collect();\n\n    // 2. find\
    \ all vowels on the right side of consonants\n    for consonant in consonants\
    \ {\n        let mut current_vowel: Vec<&str> = vowels.iter().collect();\n\n \
    \       for vowel in current_vowel {\n            if !vowel.contains(&consonant)\
    \ {\n                words.push(&vowel);\n            }\n        }\n    }\n\n\
    \    // 3. find all vowels on the left side of consonants\n    let mut consonants:\
    \ Vec<&str> = words.iter().filter_map(|&c| match c {\n        'a' => true,\n \
    \       'e' => true,\n        'i' => true,\n        'o' => true,\n        'u'\
    \ => true,\n        _ => false,\n    }).collect();\n\n    for consonant in consonants\
    \ {\n        let mut current_vowel: Vec<&str> = vowels.iter().collect();\n\n \
    \       for vowel in current_vowel {\n            if vowel.contains(&consonant)\
    \ {\n                words.push(&vowel);\n            }\n        }\n    }\n\n\
    \    // 4. find closest vowel\n    let mut closest: &str = &vowels[0];\n\n   \
    \ let mut current_vowel: Vec<&str> = vowels.iter().collect();\n\n    for vowel\
    \ in current_vowel {\n        let mut distances: Vec<i32> = words.iter().filter_map(|&w|\
    \ {\n            if w == vowel {\n                0\n            } else {\n  \
    \              word.chars().enumerate().filter_map(|(i, c)| {\n              \
    \      if c == &vowel {\n                        if i == 0 {\n               \
    \             1\n                        } else {\n                          \
    \  -1\n                        }\n                    } else {\n             \
    \           0\n                    }\n                }).collect::<Vec<_>>()\n\
    \            }\n        }).collect::<Vec<_>>();\n\n        let mut min_distance:\
    \ i32 = distances[0];\n\n        for dist in distances.iter() {\n            if\
    \ dist < min_distance {\n                min_distance = dist;\n              \
    \  closest = &vowel;\n            }\n        }\n    }\n\n", "    let mut i = 0;\n\
    \    let mut j = word.len() - 1;\n    \n    while i <= j {\n        if word.chars()\n\
    \            .skip(i)\n            .skip(word.len())\n            .any(|c| c.to_ascii_lowercase()\
    \ != 'a' && c.to_ascii_lowercase() != 'e' && c.to_ascii_lowercase() != 'i'\n \
    \               && c.to_ascii_lowercase() != 'o' && c.to_ascii_lowercase() !=\
    \ 'u' && c.to_ascii_lowercase() != 'y' && c.to_ascii_lowercase() != 'a' && c.to_ascii_lowercase()\
    \ != 'e' && c.to_ascii_lowercase() != 'i' && c.to_ascii_lowercase() != 'o' &&\
    \ c.to_ascii_lowercase() != 'u' && c.to_ascii_lowercase() != 'y')) {\n       \
    \     i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    if\
    \ j > i {\n        \"\".to_string()\n    } else {\n        let mut vowel_index\
    \ = word.chars()\n            .skip(word.len() - j)\n            .skip(j)\n  \
    \          .count();\n        word.chars()\n            .skip(vowel_index)\n \
    \           .take(1)\n            .to_string()\n    }", "    let mut vowel = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"];\n    let mut vowel_start = word.chars().skip_while(|c|\
    \ vowel.contains(c)).collect::<Vec<_>>();\n    let mut vowel_end = vowel_start.clone();\n\
    \    vowel.sort();\n    vowel_start.reverse();\n    vowel_end.sort();\n    \n\
    \    let mut vowel_index = 0;\n    for i in word.chars().skip_while(|c| vowel.contains(c)).collect::<Vec<_>>()\
    \ {\n        if vowel_index == 0 {\n            vowel_start = vec![i];\n     \
    \   } else {\n            vowel_end = vec![i];\n        }\n        vowel_index\
    \ += 1;\n    }\n    if vowel_start.len() < vowel_end.len() {\n        vowel_start.len()\n\
    \    } else {\n        vowel_end.len()\n    }", "    let mut vowels = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut vowel_iter = word.char_indices();\n\
    \    let mut current_vowel;\n\n    if vowel_iter.next().is_none() {\n        return\
    \ String::new();\n    }\n\n    if vowel_iter.next().unwrap().is_none() {\n   \
    \     return String::new();\n    }\n\n    while vowel_iter.next().unwrap().unwrap().is_some()\
    \ {\n        current_vowel = vowels.pop().unwrap();\n        let (next, next2)\
    \ = vowel_iter.peek().unwrap().unwrap().unwrap();\n\n        if next < next2 {\n\
    \            return current_vowel.to_string();\n        }\n    }\n\n    vowels.push(current_vowel);\n\
    \    String::new()", "    let vowels: Vec<&str> = vec![\n        \"a\",\n    \
    \    \"e\",\n        \"i\",\n        \"o\",\n        \"u\",\n    ];\n    let vowels_r\
    \ = vec![\n        \"a\",\n        \"e\",\n        \"i\",\n        \"o\",\n  \
    \      \"u\",\n        \"A\",\n        \"E\",\n        \"I\",\n        \"O\",\n\
    \        \"U\",\n    ];\n\n    let mut current = word[word.len() - 1];\n    for\
    \ i in 1..word.len() - 1 {\n        let c_r = if current[..1].chars().all(|c|\
    \ vowels_r.contains(&c)) {\n            vowels_r.iter().position(|&c| current[..1].chars().any(|c|\
    \ c == c))\n        } else {\n            vowels.iter().position(|&c| current[..1].chars().any(|c|\
    \ c == c))\n        };\n        let c_l = if current[..1].chars().all(|c| vowels.contains(&c))\
    \ {\n            vowels.iter().position(|&c| current[..1].chars().any(|c| c ==\
    \ c))\n        } else {\n            vowels_l.iter().position(|&c| current[..1].chars().any(|c|\
    \ c == c))\n        };\n        let c_r = current[..1];\n        let c_l = current[..1];\n\
    \n        current = if c_r < c_l {\n            current[..c_r + 3]\n        }\
    \ else {\n            current[..c_l + 3]\n        };\n    }\n    current[..word.len()]",
  "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut pos = 0;\n    let mut index = 0;\n\n    while let Some(ref v) = vowels.iter().position(|v|\
    \ v.as_str() == &word[pos]) {\n        pos = pos + 1;\n        index = index;\n\
    \    }\n\n    match vowels.iter().position(|v| v.as_str() == &word[pos..]) {\n\
    \        Some(i) => {\n            vowels.swap(i, index + 1);\n            let\
    \ mut index = i;\n            let mut res = String::new();\n            while\
    \ let Some(ref v) = vowels.iter().position(|v| v.as_str() == &word[pos..]) {\n\
    \                pos = pos + 1;\n                index = index;\n            }\n\
    \            vowels[index] = String::new();\n            res.push_str(&word[pos..]);\n\
    \            vowels[index] = String::new();\n            res.push_str(&word[pos..]);\n\
    \            vowels[index] = String::new();\n            res.push_str(&word[pos..]);\n\
    \            vowels[index] = String::new();\n            res.push_str(&word[pos..]);\n\
    \            vowels[index] = String::new();\n            res.push_str(&word[pos..]);\n\
    \            vowels[index] = String::new();\n            res.push_str(&word[pos..]);\n\
    \            vowels[index] = String::new();\n            res.push_str(&word[pos..]);\n\
    \            vowels[index] = String::new();\n            res.push_str(&word[pos..]);\n\
    \            vowels[index] = String::new();\n            res.push_str(&word[pos..]);\n\
    \            vowels[index] = String::new();\n            res.push_str(&word[pos..]);\n\
    \            vowels[index] = String::new();\n            res.push_str(&word[pos..]);\n\
    \            vowels[index] = String::new();\n            res.push_str(&word[pos..]);\n\
    \            vowels[index] = String::new();\n            res.push_str(&word[pos..]);\n\
    \            vowels[index] = String::new();\n            res.push_str(&word[pos..]);\n\
    \            vowels[index] = String::new();\n            res.push_str(&word[pos..]);\n\
    \            vowels[index] = String::new();\n            res.push_str(&word[pos..]);\n\
    \            vowels[index] = String::new();\n            res.push_str(&word[pos..]);\n\
    \            vowels[index] = String::new();\n            res.push_str(&word",
  "    let mut res = String::new();\n    let mut last_consonant = String::new();\n\
    \    let mut first_consonant = String::new();\n    let mut last_vowel = String::new();\n\
    \    let mut first_vowel = String::new();\n    for ch in word.chars() {\n    \
    \    if ch.is_consonant() {\n            last_consonant = ch;\n        } else\
    \ {\n            if first_consonant.len() > 0 {\n                first_consonant\
    \ = last_consonant;\n            }\n            last_vowel = ch;\n        }\n\
    \    }\n    if first_consonant.len() > 0 {\n        first_consonant = first_consonant.to_string();\n\
    \        last_consonant = last_consonant.to_string();\n    }\n    for ch in word.chars()\
    \ {\n        if ch.is_vowel() {\n            last_vowel = ch;\n        } else\
    \ {\n            if first_vowel.len() > 0 {\n                first_vowel = last_vowel;\n\
    \            }\n        }\n    }\n    if first_vowel.len() > 0 {\n        res.push_str(&first_vowel);\n\
    \    } else {\n        return \"\".to_string();\n    }\n    if first_consonant.len()\
    \ > 0 {\n        res.push_str(&last_consonant);\n    } else {\n        return\
    \ \"\".to_string();\n    }\n    if first_vowel.len() > 0 {\n        res.push_str(&first_vowel);\n\
    \    } else {\n        return \"\".to_string();\n    }\n    if last_vowel.len()\
    \ > 0 {\n        res.push_str(&last_vowel);\n    }\n    return res.to_string();",
  "    word.chars()\n        .map(|c| c.to_ascii_lowercase())\n        .cloned()\n\
    \        .windows(2)\n        .filter(|v| v.chars().any(|c| c == 'u' || c == 'i'\
    \ || c == 'o' || c == 'a' || c == 'e' || c == 'u'))\n        .map(|v| v[..].to_string())\n\
    \        .chain(())\n        .min_by(|a, b| a.len() as i16 - b.len() as i16)\n\
    \        .unwrap()\n        .to_string()", "    if word.length() <= 2 {\n    \
    \    return String::new();\n    }\n    let mut start = 0;\n    let mut end = 0;\n\
    \    let mut vowels: Vec<&str> = vec![];\n    let mut first_cons = false;\n  \
    \  let mut last_cons = false;\n    let mut cons_pos = 0;\n    let mut last_pos\
    \ = 0;\n    let mut last_vowel = String::new();\n    for c in word.chars() {\n\
    \        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'{\n      \
    \      vowels.push(c);\n        }\n        if c == ' ' {\n            let start\
    \ = cons_pos - 1;\n            let end = last_pos;\n            let mut vowel\
    \ = String::new();\n            let mut cons_vowel = false;\n            for i\
    \ in start..end {\n                if vowels[i] == 'a' || vowels[i] == 'e' ||\
    \ vowels[i] == 'i' || vowels[i] == 'o' || vowels[i] == 'u'{\n                \
    \    vowel = vowel.push_str(vowels[i]);\n                    cons_vowel = true;\n\
    \                }\n            }\n            if !cons_vowel && vowel.len() !=\
    \ 0 {\n                last_vowel = vowel.clone();\n            }\n          \
    \  last_pos = cons_pos;\n            last_cons = cons_vowel;\n        }\n    \
    \    if c == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'h' ||\
    \ c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'p' || c ==\
    \ 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x'\
    \ || c == 'z' || c == '\\0' {\n            last_pos = cons_pos;\n            last_cons\
    \ = cons_vowel;\n        }\n        if cons_pos == 0 && c == 'a' || c == 'b' ||\
    \ c == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c ==\
    \ 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r'\
    \ || c == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'z' || c\
    \ == '\\0' {\n            cons_pos = word.length();\n        }\n        if c ==\
    \ ' ' {\n            cons_pos--;\n        }\n        cons_pos++;\n    }\n    if\
    \ first_cons {\n        let mut vowel = String::new();\n        for i in start..end\
    \ {\n            if vowels[i] == 'a' || vowels[i] == 'e' || ", '    word.chars().rev().take(word.len()
    - 2).rev().map(|c| c.to_ascii_lowercase()).find(|c| c != c.to_ascii_lowercase().to_lowercase()).expect("cannot
    find any vowels").to_string()', "    let mut s = String::new();\n    let mut pos\
    \ = word.len() - 1;\n    let mut vowel_a = String::new();\n    let mut vowel_e\
    \ = String::new();\n    let mut vowel_i = String::new();\n    let mut vowel_o\
    \ = String::new();\n    let mut vowel_u = String::new();\n    let mut vowel_aa\
    \ = String::new();\n    let mut vowel_ae = String::new();\n    let mut vowel_ai\
    \ = String::new();\n    let mut vowel_ao = String::new();\n    let mut vowel_au\
    \ = String::new();\n    let mut vowel_ua = String::new();\n    let mut vowel_aei\
    \ = String::new();\n    let mut vowel_aou = String::new();\n    let mut vowel_auu\
    \ = String::new();\n\n    while pos > 0 {\n        if word[pos] == 'a' {\n   \
    \         vowel_a = String::new();\n        }\n        if word[pos] == 'e' {\n\
    \            vowel_e = String::new();\n        }\n        if word[pos] == 'i'\
    \ {\n            vowel_i = String::new();\n        }\n        if word[pos] ==\
    \ 'o' {\n            vowel_o = String::new();\n        }\n        if word[pos]\
    \ == 'u' {\n            vowel_u = String::new();\n        }\n        if word[pos]\
    \ == 'a' {\n            vowel_aa = String::new();\n        }\n        if word[pos]\
    \ == 'e' {\n            vowel_ae = String::new();\n        }\n        if word[pos]\
    \ == 'i' {\n            vowel_ai = String::new();\n        }\n        if word[pos]\
    \ == 'o' {\n            vowel_ao = String::new();\n        }\n        if word[pos]\
    \ == 'u' {\n            vowel_au = String::new();\n        }\n        if word[pos]\
    \ == 'a' {\n            vowel_ua = String::new();\n        }\n        if word[pos]\
    \ == 'e' {\n            vowel_aei = String::new();\n        }\n        if word[pos]\
    \ == 'o' {\n            vowel_aou = String::new();\n        }\n        if word[pos]\
    \ == 'u' {\n            vowel_auu = String::new();\n        }\n\n        if vowel_a.len()\
    \ != 0 || vowel_e.len() != 0 || vowel_i.len() != 0 || vowel_o.len() != 0 || vowel_u.len()\
    \ != 0 || vowel_aa.", "    let mut cons = word[word.len()..].chars().collect::<Vec<&str>>();\n\
    \    let mut vowel = String::new();\n\n    while cons.len() > 1 {\n        for\
    \ &con in cons.iter() {\n            if let Some(cons) = cons.iter().position(|&x|\
    \ *x == &con) {\n                vowel = con;\n                break;\n      \
    \      }\n        }\n        cons = cons.iter().collect::<Vec<&str>>();\n    }\n\
    \n    vowel", "    // Your code goes here\n    word.to_lowercase().chars().enumerate().filter(|&(_,\
    \ index)| {\n        (index > 0) || (index < word.len() - 2)\n    }).map(|(index,\
    \ char)| {\n        if char == 'a'\n            || char == 'e'\n            ||\
    \ char == 'i'\n            || char == 'o'\n            || char == 'u'\n      \
    \  {\n            char\n        } else {\n            \"\"\n        }\n    }).collect()",
  "    let mut vowel = String::new();\n    let mut i = 0;\n    while i < word.len()\
    \ {\n        if word[i] == String::from(\"A\"..=\"Z\") {\n            i += 1;\n\
    \            if i == word.len() {\n                break;\n            }\n   \
    \         vowel = match vowel.cmp(&word[i - 1..i]) {\n                Ordering::Less\
    \ => String::from(\"\"),\n                Ordering::Equal => String::from(\"\"\
    ),\n                Ordering::Greater => String::from(\"U\"),\n            };\n\
    \        } else {\n            i += 1;\n            if i == word.len() {\n   \
    \             break;\n            }\n            vowel = match vowel.cmp(&word[i\
    \ - 1..i]) {\n                Ordering::Less => String::from(\"\"),\n        \
    \        Ordering::Equal => String::from(\"\"),\n                Ordering::Greater\
    \ => String::from(\"u\"),\n            };\n        }\n    }\n    vowel", "   \
    \ let vowels = \"AEIOUaeiou\".to_string();\n    word.chars().enumerate().filter(|(_,c)|\
    \ *c >= 'a' && *c <= 'z').fold(String::new(), |acc,(_,c)| {\n        acc.push_str(vowels.chars().skip(1).take(2).find(|c|\
    \ *c == c).unwrap_or(String::new()))\n    });", "\tlet mut vowels = Vec::new();\n\
    \tvowels.push_str(\"\".to_string());\n\tvowels.push_str(\"A\".to_string());\n\t\
    vowels.push_str(\"E\".to_string());\n\tvowels.push_str(\"I\".to_string());\n\t\
    vowels.push_str(\"O\".to_string());\n\tvowels.push_str(\"U\".to_string());\n\t\
    vowels.push_str(\"a\".to_string());\n\tvowels.push_str(\"e\".to_string());\n\t\
    vowels.push_str(\"i\".to_string());\n\tvowels.push_str(\"o\".to_string());\n\t\
    vowels.push_str(\"u\".to_string());\n\tlet mut vowel_count = 0;\n\tlet mut vowel_start\
    \ = String::new();\n\tlet mut vowel_end = String::new();\n\tfor (i, char) in word.chars().enumerate()\
    \ {\n\t\tif char == 'a' || char == 'e' || char == 'i' || char == 'o' || char ==\
    \ 'u' {\n\t\t\tvowel_start = word[(i - 1)..i];\n\t\t\tvowel_end = word[i..(i +\
    \ 1)];\n\t\t\tvowel_count += 1;\n\t\t}\n\t\tif vowel_count == 2 {\n\t\t\tif vowel_start\
    \ == \"\" {\n\t\t\t\tvowel_start = String::new();\n\t\t\t}\n\t\t\tif vowel_end\
    \ == \"\" {\n\t\t\t\tvowel_end = String::new();\n\t\t\t}\n\t\t\treturn vowels[vowel_start.len()..vowel_end.len()];\
    \ // the range here will be between 0 to 3\n\t\t}\n\t}\n\t\n\treturn \"\".to_string();",
  "    let mut result = \"\";\n    \n    // Check if there are consonants in the right\n\
    \    let mut consonants = word.len() - 1;\n    \n    // Check all letters until\
    \ we find a vowel\n    while consonants > 0 {\n        \n        // If we have\
    \ a vowel\n        if word.chars().all(|c| *c == 'A' || \n                   \
    \      *c == 'E' || \n                         *c == 'I' || \n               \
    \          *c == 'O' || \n                         *c == 'U') {\n            \n\
    \            // If we found a vowel in the right place, break\n            return\
    \ String::from(&result[..consonants]);\n        }\n        \n        // If not\
    \ and we found a vowel in the left place, break\n        if consonants > 0 &&\
    \ word.chars().any(|c| *c == 'a' || \n                                       \
    \      *c == 'e' || \n                                             *c == 'i' ||\
    \ \n                                             *c == 'o' || \n             \
    \                                *c == 'u') {\n            \n            consonants\
    \ -= 1;\n        }\n        \n        // If we found a consonant in the right\
    \ place, break\n        if consonants > 0 && word.chars().any(|c| *c == 'B' ||\
    \ \n                                             *c == 'G' || \n             \
    \                                *c == 'J' || \n                             \
    \                *c == 'M' || \n                                             *c\
    \ == 'P' || \n                                             *c == 'S' || \n   \
    \                                          *c == 'V') {\n            \n      \
    \      consonants -= 1;\n        }\n    }\n    \n    // We didn't find any vowels\n\
    \    \"\".to_string()", "    let mut vowel: Option<&str> = None;\n    let mut\
    \ idx = 0;\n    for ch in word.chars() {\n        if idx % 2 == 0 {\n        \
    \    if ch >= 'a' && ch <= 'z' {\n                vowel = Some(&word[idx..idx+3]);\n\
    \                break;\n            }\n        } else {\n            if ch >=\
    \ 'A' && ch <= 'Z' {\n                vowel = Some(&word[idx..idx+3]);\n     \
    \           break;\n            }\n        }\n        idx += 1;\n    }\n    match\
    \ vowel {\n        None => \"\",\n        Some(v) => v,\n    }", "    let mut\
    \ vowel: String;\n    let mut vowel_start = word.chars().position(|c| c >= 'a'\
    \ && c <= 'z');\n    let mut vowel_end = word.chars().position(|c| c >= 'A' &&\
    \ c <= 'Z');\n    if vowel_start.is_none() {\n        vowel = word.chars().position(|c|\
    \ c >= 'a' && c <= 'z').unwrap();\n    } else if vowel_end.is_none() {\n     \
    \   vowel = word.chars().position(|c| c >= 'A' && c <= 'Z').unwrap();\n    } else\
    \ {\n        vowel = word.chars().position(|c| c >= 'a' && c <= 'z')\n       \
    \     .unwrap()\n            .take_while(|c| c != 'A' || c != 'a'|| c != 'E' ||\
    \ c != 'e' || \n            c!= 'I' || c != 'i' || c != 'O' || c != 'o' || c!=\
    \ 'U' || c != 'u'\n        ).unwrap()\n    }\n    \n    vowel", "    // Your code\
    \ goes here\n    let vowels = \"AEIOUaeiou\".to_string();\n    let vowel_set =\
    \ vowels.chars().collect::<HashSet<char>>();\n    word.chars().for_each(|c|{\n\
    \        if vowel_set.contains(&c) {\n            vowel_set.insert(c);\n     \
    \   }\n    });\n    let mut res = \"\";\n    let mut s = word;\n    while !vowel_set.contains(&s[s.len()-1])\
    \ && s.len() > 0 {\n        res = &mut s[0..s.len()-1];\n        s.remove(s.len()-1);\n\
    \    }\n    res", "    let mut vowel_count: usize = 0;\n    \n    for letter in\
    \ word[1..] {\n        if letter >= 'a' && letter <= 'z' {\n            vowel_count\
    \ = vowel_count + 1;\n        }\n    }\n    \n    let mut vowel_range: Vec<usize>\
    \ = vec![vowel_count, vowel_count];\n    vowel_range.sort();\n    \n    let vowel:\
    \ usize = (vowel_range[1] + vowel_range[0]) / 2;\n    let mut current_char: char;\n\
    \    \n    for c in word.rposition(|c| c >= 'a' && c <= 'z') {\n        if let\
    \ Some(pos) = word.rindex(c) {\n            let pos_range: Vec<usize> = vec![pos\
    \ - 1, pos];\n            pos_range.sort();\n            let mut cur_vowel: usize\
    \ = (pos_range[1] + pos_range[0]) / 2;\n            \n            if cur_vowel\
    \ == vowel {\n                current_char = c\n            }\n        }\n   \
    \ }\n    \n    if let Some(current) = current_char {\n        return current\n\
    \    }\n    \n    return \"\".to_string();"]
stop_tokens:
- "\n}"
