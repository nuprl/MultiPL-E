name: HumanEval_135_can_arrange
language: rust
results:
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut arr: Vec<isize>\
    \ = arr.clone();\n    let mut i = 0;\n    arr.sort_unstable();\n    for e in arr.iter().skip(1)\
    \ {\n        if e > i {\n            i += 1;\n        } else {\n            return\
    \ i;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1z9yrod1.rs:13:16\n   |\n\
    13 |         if e > i {\n   |                ^\n   |                |\n   |  \
    \              expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&i`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    // Write code here\n \
    \   let mut largest: usize = 0;\n    for &i in arr.iter().skip(1) {\n        if\
    \ *i < *largest+1 {\n            largest = *i;\n        }\n    }\n    if largest\
    \ == -1 {\n        -1\n    } else {\n        largest\n    }\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpfj11pwge.rs:12:12\n\
    \   |\n12 |         if *i < *largest+1 {\n   |            ^^\n\nerror[E0614]:\
    \ type `usize` cannot be dereferenced\n  --> /tmp/tmpfj11pwge.rs:12:17\n   |\n\
    12 |         if *i < *largest+1 {\n   |                 ^^^^^^^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpfj11pwge.rs:13:23\n   |\n\
    13 |             largest = *i;\n   |                       ^^\n\nerror[E0600]:\
    \ cannot apply unary operator `-` to type `usize`\n  --> /tmp/tmpfj11pwge.rs:16:19\n\
    \   |\n16 |     if largest == -1 {\n   |                   ^^\n   |          \
    \         |\n   |                   cannot apply unary operator `-`\n   |    \
    \               help: you may have meant the maximum value of `usize`: `usize::MAX`\n\
    \   |\n   = note: unsigned values cannot be negated\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfj11pwge.rs:19:9\n   |\n8  | fn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n   |                                    ----- expected `isize` because\
    \ of return type\n...\n19 |         largest\n   |         ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n19 |         largest.try_into().unwrap()\n\
    \   |                ++++++++++++++++++++\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0600, E0614.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    while\
    \ i < arr.len() {\n        if arr[i] >= arr[i + 1..] {\n            return i;\n\
    \        }\n        i += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsau4u9im.rs:11:22\n   |\n\
    11 |         if arr[i] >= arr[i + 1..] {\n   |                      ^^^^^^^^^^^^\
    \ expected `isize`, found slice `[isize]`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsau4u9im.rs:12:20\n   |\n12 |             return i;\n   |     \
    \               ^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    12 |             return i.try_into().unwrap();\n   |                     ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.len() == 0 {\n\
    \        return -1;\n    }\n\n    let mut max = -1i32; // Initialize to impossible\
    \ value\n\n    for i in arr.iter() {\n        if *i <= max {\n            max\
    \ = i;\n        }\n    }\n\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgeaa3lpo.rs:16:18\n   |\n\
    16 |         if *i <= max {\n   |                  ^^^ expected `isize`, found\
    \ `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |         if *i <= max.try_into().unwrap() {\n \
    \  |                     ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpgeaa3lpo.rs:17:19\n   |\n13 |     let mut max = -1i32; // Initialize\
    \ to impossible value\n   |                   ----- expected due to this value\n\
    ...\n17 |             max = i;\n   |                   ^ expected `i32`, found\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgeaa3lpo.rs:21:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n21 | \
    \    max\n   |     ^^^ expected `isize`, found `i32`\n   |\nhelp: you can convert\
    \ an `i32` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    21 |     max.try_into().unwrap()\n   |        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = arr.len();\n\
    \    let mut max_val = arr.first();\n    for i in arr.iter().rev() {\n       \
    \ if i > max_val {\n            max_idx = i;\n            max_val = i;\n     \
    \   }\n    }\n    if max_idx == 0 {\n        return -1;\n    }\n    return max_idx;\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp032tl2_9.rs:12:16\n   |\n\
    12 |         if i > max_val {\n   |                ^^^^^^^ expected `&isize`,\
    \ found enum `Option`\n   |\n   = note: expected reference `&isize`\n        \
    \           found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp032tl2_9.rs:13:23\n   |\n9  |     let mut max_idx = arr.len();\n   |\
    \                       --------- expected due to this value\n...\n13 |      \
    \       max_idx = i;\n   |                       ^ expected `usize`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp032tl2_9.rs:14:23\n   |\n10 |\
    \     let mut max_val = arr.first();\n   |                       ----------- expected\
    \ due to this value\n...\n14 |             max_val = i;\n   |                \
    \       ^ expected enum `Option`, found `&isize`\n   |\n   = note:   expected\
    \ enum `Option<&isize>`\n           found reference `&isize`\nhelp: try wrapping\
    \ the expression in `Some`\n   |\n14 |             max_val = Some(i);\n   |  \
    \                     +++++ +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp032tl2_9.rs:20:12\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n20 | \
    \    return max_idx;\n   |            ^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n20 |     return max_idx.try_into().unwrap();\n   |\
    \                   ++++++++++++++++++++\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().skip_while(|&x|\
    \ x < arr[0] + 1).last().unwrap_or(-1)\n}\n\nfn main() {\n    let candidate =\
    \ can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgyfwy7gq.rs:9:36\n  |\n9 |\
    \     arr.iter().skip_while(|&x| x < arr[0] + 1).last().unwrap_or(-1)\n  |   \
    \                                 ^^^^^^^^^^\n  |                            \
    \        |\n  |                                    expected `&isize`, found `isize`\n\
    \  |                                    help: consider borrowing here: `&(arr[0]\
    \ + 1)`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpgyfwy7gq.rs:9:65\n  |\n\
    9 |     arr.iter().skip_while(|&x| x < arr[0] + 1).last().unwrap_or(-1)\n  | \
    \                                                                ^^\n  |     \
    \                                                            |\n  |          \
    \                                                       expected `&isize`, found\
    \ integer\n  |                                                               \
    \  help: consider borrowing here: `&-1`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpgyfwy7gq.rs:9:5\n  |\n8 | fn can_arrange(arr: Vec<isize>) -> isize {\n\
    \  |                                    ----- expected `isize` because of return\
    \ type\n9 |     arr.iter().skip_while(|&x| x < arr[0] + 1).last().unwrap_or(-1)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    9 |     *arr.iter().skip_while(|&x| x < arr[0] + 1).last().unwrap_or(-1)\n  |\
    \     +\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut result = -1;\n\
    \    let mut current_pos = 0;\n    for i in arr.iter() {\n        if i < current_pos\
    \ {\n            current_pos = i;\n        } else {\n            result = i;\n\
    \            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphw8soa0v.rs:12:16\n   |\n\
    12 |         if i < current_pos {\n   |                ^^^^^^^^^^^\n   |     \
    \           |\n   |                expected `&isize`, found integer\n   |    \
    \            help: consider borrowing here: `&current_pos`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphw8soa0v.rs:13:27\n   |\n10 |     let mut current_pos =\
    \ 0;\n   |                           - expected due to this value\n...\n13 | \
    \            current_pos = i;\n   |                           ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |  \
    \           current_pos = *i;\n   |                           +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphw8soa0v.rs:15:22\n   |\n9  |     let mut result\
    \ = -1;\n   |                      -- expected due to this value\n...\n15 |  \
    \           result = i;\n   |                      ^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n15 |             result\
    \ = *i;\n   |                      +\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n\n \
    \   for &n in arr {\n        if n > max {\n            max = n;\n        }\n \
    \   }\n\n    return max;\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6vq6lpcw.rs:11:9\n   |\n\
    11 |     for &n in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  for i in arr.iter() {\n        if i != max {\n            max = i;\n      \
    \  }\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmprj73quwx.rs:11:14\n\
    \   |\n11 |         if i != max {\n   |              ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmprj73quwx.rs:12:19\n   |\n9  |     let mut max = -1;\n   |          \
    \         -- expected due to this value\n...\n12 |             max = i;\n   |\
    \                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n12 |             max = *i;\n   |                   +\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    for &x in arr.iter() {\n        if x != i && x > arr[j] {\n\
    \            j = i;\n        }\n        i += 1;\n    }\n    if j == arr.len()\
    \ - 1 {\n        -1\n    } else {\n        j + 1\n    }\n}\n\nfn main() {\n  \
    \  let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjxovig4v.rs:13:17\n   |\n\
    10 |     let mut j = 0;\n   |                 - expected due to this value\n...\n\
    13 |             j = i;\n   |                 ^ expected `usize`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjxovig4v.rs:20:9\n   |\n8  | fn\
    \ can_arrange(arr: Vec<isize>) -> isize {\n   |                              \
    \      ----- expected `isize` because of return type\n...\n20 |         j + 1\n\
    \   |         ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    20 |         (j + 1).try_into().unwrap()\n   |         +     +++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = std::i32::MAX;\n\
    \    let mut i = 1;\n\n    while i <= arr.len() {\n        if arr[i] > max {\n\
    \            max = arr[i];\n        }\n\n        if arr[i] == arr[i-1] {\n   \
    \         i += 1;\n        } else {\n            i += 2;\n        }\n    }\n\n\
    \    if max == std::i32::MAX {\n        return -1;\n    }\n\n    max\n}\n\nfn\
    \ main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbzwv6sbw.rs:13:21\n   |\n\
    13 |         if arr[i] > max {\n   |                     ^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n13 |         if arr[i] > max.try_into().unwrap()\
    \ {\n   |                        ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbzwv6sbw.rs:14:19\n   |\n9  |     let mut max = std::i32::MAX;\n\
    \   |                   ------------- expected due to this value\n...\n14 |  \
    \           max = arr[i];\n   |                   ^^^^^^ expected `i32`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbzwv6sbw.rs:28:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n28 | \
    \    max\n   |     ^^^ expected `isize`, found `i32`\n   |\nhelp: you can convert\
    \ an `i32` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    28 |     max.try_into().unwrap()\n   |        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n    let mut result = arr.iter().cmp_by_key(|x| *x).unwrap();\n\
    \    let last = &arr[result.iter().rposition(|&x| *x > &*last).unwrap()];\n  \
    \  if *last > &*first {\n        result.swap(0, 1);\n        result.enumerate().for_each(|(i,\
    \ &x)| {\n            *i = last - x;\n        });\n    }\n    result.next()\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `last` in this scope\n  --> /tmp/tmplwmfk511.rs:13:57\n\
    \   |\n13 |     let last = &arr[result.iter().rposition(|&x| *x > &*last).unwrap()];\n\
    \   |                                                         ^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find value `first` in this scope\n  --> /tmp/tmplwmfk511.rs:14:18\n\
    \   |\n14 |     if *last > &*first {\n   |                  ^^^^^ not found in\
    \ this scope\n\nerror[E0599]: no method named `cmp_by_key` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmplwmfk511.rs:12:33\n   |\n12 |     let mut\
    \ result = arr.iter().cmp_by_key(|x| *x).unwrap();\n   |                     \
    \            ^^^^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n   \
    \ let mut i = 0;\n    while i < arr.len() {\n        if arr[i] <= max {\n    \
    \        break;\n        }\n        let j = i;\n        while j < arr.len() &&\
    \ arr[j] >= max {\n            j += 1;\n        }\n        if j - i != 1 {\n \
    \           max = arr[i];\n            i = j;\n        } else {\n            i\
    \ += 1;\n        }\n    }\n    if i == arr.len() {\n        -1\n    } else {\n\
    \        max\n    }\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmpsh17ef6t.rs:17:13\n\
    \   |\n15 |         let j = i;\n   |             -\n   |             |\n   | \
    \            first assignment to `j`\n   |             help: consider making this\
    \ binding mutable: `mut j`\n16 |         while j < arr.len() && arr[j] >= max\
    \ {\n17 |             j += 1;\n   |             ^^^^^^ cannot assign twice to\
    \ immutable variable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n    arr.iter().rposition(|&x| x <= arr[0]).unwrap()\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp2jfa3e7.rs:12:5\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n12 |     arr.iter().rposition(|&x|\
    \ x <= arr[0]).unwrap()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     arr.iter().rposition(|&x|\
    \ x <= arr[0]).unwrap().try_into().unwrap()\n   |                            \
    \                        ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut index = 0;\n \
    \   while index < arr.len() {\n        let mut next_index = index;\n        while\
    \ next_index < arr.len() && arr[next_index] >= arr[index] {\n            next_index\
    \ += 1;\n        }\n        if next_index != index {\n            return index;\n\
    \        }\n        index += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwtihm4q6.rs:16:20\n   |\n\
    16 |             return index;\n   |                    ^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |             return index.try_into().unwrap();\n\
    \   |                         ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    // find the first element\
    \ greater than or equal to the current element\n    let mut largest = std::cmp::min::<isize>(arr.len(),\
    \ 1);\n    let mut cur = 0;\n    for elt in arr.iter().rev() {\n        if elt\
    \ >= arr[cur] {\n            largest = std::cmp::max::<isize>(largest, cur);\n\
    \        }\n        cur += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_h9ulspo.rs:10:46\n   |\n\
    10 |     let mut largest = std::cmp::min::<isize>(arr.len(), 1);\n   |       \
    \                                       ^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n10 |     let mut largest = std::cmp::min::<isize>(arr.len().try_into().unwrap(),\
    \ 1);\n   |                                                       ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_h9ulspo.rs:13:19\n   |\n13 |\
    \         if elt >= arr[cur] {\n   |                   ^^^^^^^^\n   |        \
    \           |\n   |                   expected `&isize`, found `isize`\n   | \
    \                  help: consider borrowing here: `&arr[cur]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_h9ulspo.rs:14:55\n   |\n14 |             largest\
    \ = std::cmp::max::<isize>(largest, cur);\n   |                              \
    \                         ^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n14 |             largest = std::cmp::max::<isize>(largest, cur.try_into().unwrap());\n\
    \   |                                                          ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut prev_el = arr[0];\n\
    \    let mut el = arr[0];\n    let mut max_el = arr[0];\n    for &el in arr {\n\
    \        if el > max_el {\n            max_el = el;\n        }\n        if el\
    \ == prev_el {\n            continue;\n        }\n        prev_el = el;\n    }\n\
    \    if max_el == -1 {\n        -1\n    } else {\n        max_el\n    }\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxvtwhqq7.rs:12:9\n   |\n\
    12 |     for &el in arr {\n   |         ^^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `el`\n   |\n   = note:  \
    \ expected type `isize`\n           found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 1;\n    while\
    \ i < arr.len() {\n        let mut largest = i;\n        for j in i + 1 .. arr.len()\
    \ {\n            if arr[j] < arr[largest] {\n                largest = j;\n  \
    \          }\n        }\n        if largest != i {\n            return largest;\n\
    \        }\n        i += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl3b6uwn4.rs:18:20\n   |\n\
    18 |             return largest;\n   |                    ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n18 |             return largest.try_into().unwrap();\n\
    \   |                           ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    while\
    \ i < arr.len() && arr[i] >= arr[i + 1] {\n        i += 1;\n    }\n    if i ==\
    \ arr.len() {\n        -1\n    } else {\n        i\n    }\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2wq5xvg4.rs:16:9\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n16 |        \
    \ i\n   |         ^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    16 |         i.try_into().unwrap()\n   |          ++++++++++++++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    for i in arr.iter().rev() {\n        if i != arr[0] && largest < i - 1 {\n\
    \            largest = i - 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpyefnxacz.rs:11:14\n\
    \   |\n11 |         if i != arr[0] && largest < i - 1 {\n   |              ^^\
    \ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut ans = -1;\n  \
    \  let mut largest = arr[0];\n    for i in arr.iter().skip(1) {\n        if i\
    \ > largest {\n            ans = i;\n            largest = i;\n        }\n   \
    \ }\n    ans\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfoiicjf4.rs:12:16\n   |\n\
    12 |         if i > largest {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found `isize`\n   |            \
    \    help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfoiicjf4.rs:13:19\n   |\n9  |     let mut ans = -1;\n   |     \
    \              -- expected due to this value\n...\n13 |             ans = i;\n\
    \   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n13 |             ans = *i;\n   |           \
    \        +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfoiicjf4.rs:14:23\n\
    \   |\n10 |     let mut largest = arr[0];\n   |                       ------ expected\
    \ due to this value\n...\n14 |             largest = i;\n   |                \
    \       ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n14 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = 1;\n\
    \    let mut cur_index = 1;\n\n    for x in arr.iter().rev() {\n        if x >\
    \ arr[max_index] {\n            max_index = cur_index;\n        }\n        cur_index\
    \ += 1;\n    }\n\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn9a58iwj.rs:13:16\n   |\n\
    13 |         if x > arr[max_index] {\n   |                ^^^^^^^^^^^^^^\n   |\
    \                |\n   |                expected `&isize`, found `isize`\n   |\
    \                help: consider borrowing here: `&arr[max_index]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn9a58iwj.rs:19:5\n   |\n8  | fn can_arrange(arr:\
    \ Vec<isize>) -> isize {\n   |                                    ----- expected\
    \ `isize` because of return type\n...\n19 |     max_index\n   |     ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n19 |     max_index.try_into().unwrap()\n\
    \   |              ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  for x in arr.iter() {\n        if max < x {\n            max = x;\n       \
    \ }\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0cld20xc.rs:12:19\n   |\n\
    9  |     let mut max = -1;\n   |                   -- expected due to this value\n\
    ...\n12 |             max = x;\n   |                   ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |        \
    \     max = *x;\n   |                   +\n\nerror[E0277]: can't compare `isize`\
    \ with `&isize`\n  --> /tmp/tmp0cld20xc.rs:11:16\n   |\n11 |         if max <\
    \ x {\n   |                ^ no implementation for `isize < &isize` and `isize\
    \ > &isize`\n   |\n   = help: the trait `PartialOrd<&isize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `PartialOrd<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().enumerate().max().unwrap()\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp453mjzoj.rs:9:5\n  |\n8 |\
    \ fn can_arrange(arr: Vec<isize>) -> isize {\n  |                            \
    \        ----- expected `isize` because of return type\n9 |     arr.iter().enumerate().max().unwrap()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n\
    \  |\n  = note: expected type `isize`\n            found tuple `(usize, &isize)`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n\n    while index < arr.len() {\n        if arr[index]\
    \ > arr[largest] {\n            largest = index;\n        } else {\n         \
    \   index += 1;\n        }\n    }\n\n    largest\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpft1p6ibo.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpft1p6ibo.rs:20:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n20 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n20 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for &i in arr {\n        if i != max {\n       \
    \     max = i;\n            max_idx = i;\n        } else {\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgk_jg4yq.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  for (i, item) in arr.iter().enumerate() {\n        if item > arr[0] {\n   \
    \         max = i;\n            break;\n        }\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd9efbpo9.rs:11:19\n   |\n\
    11 |         if item > arr[0] {\n   |                   ^^^^^^\n   |         \
    \          |\n   |                   expected `&isize`, found `isize`\n   |  \
    \                 help: consider borrowing here: `&arr[0]`\n\nerror[E0277]: the\
    \ trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpd9efbpo9.rs:9:19\n \
    \ |\n9 |     let mut max = -1;\n  |                   ^^ the trait `Neg` is not\
    \ implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd9efbpo9.rs:16:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n16 | \
    \    max\n   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    16 |     max.try_into().unwrap()\n   |        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  for i in arr {\n        if max < i {\n            max = i;\n        }\n   \
    \ }\n    if max == -1 {\n        return -1;\n    }\n    for i in 0..arr.len()\
    \ {\n        if arr[i] != max {\n            return i;\n        }\n    }\n   \
    \ return arr.len();\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwtr23hiu.rs:20:20\n   |\n\
    20 |             return i;\n   |                    ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |             return i.try_into().unwrap();\n\
    \   |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    while\
    \ i < arr.len() {\n        i += 1;\n        let mut j = i - 1;\n        while\
    \ j < arr.len() && arr[j] <= arr[i] {\n            j += 1;\n        }\n      \
    \  if i == j {\n            return -1;\n        }\n    }\n    return i;\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9x5y541d.rs:20:12\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n20 |     return\
    \ i;\n   |            ^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    20 |     return i.try_into().unwrap();\n   |             ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    for i in 1..arr.len()\
    \ {\n        if arr[i - 1] > i {\n            return i;\n        }\n    }\n  \
    \  -1\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpef6w2w1p.rs:10:25\n   |\n\
    10 |         if arr[i - 1] > i {\n   |                         ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n10 |         if arr[i - 1] > i.try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpef6w2w1p.rs:11:20\n   |\n11 |             return i;\n \
    \  |                    ^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n11 |             return i.try_into().unwrap();\n   |                  \
    \   ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().rev().enumerate().rev().max().unwrap_or(-1)\
    \ as isize\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3h52reir.rs:9:56\n  |\n9 |\
    \     arr.iter().rev().enumerate().rev().max().unwrap_or(-1) as isize\n  |   \
    \                                                     ^^ expected tuple, found\
    \ integer\n  |\n  = note: expected tuple `(usize, &isize)`\n              found\
    \ type `{integer}`\n\nerror[E0605]: non-primitive cast: `(usize, &isize)` as `isize`\n\
    \ --> /tmp/tmp3h52reir.rs:9:5\n  |\n9 |     arr.iter().rev().enumerate().rev().max().unwrap_or(-1)\
    \ as isize\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0605.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    // write your code here\n\
    \    if arr.is_empty() {\n        return -1;\n    }\n    let mut index = 0;\n\
    \    while index < arr.len() - 1 {\n        if arr[index] > arr[index + 1] {\n\
    \            break;\n        }\n        index += 1;\n    }\n    if index < arr.len()\
    \ {\n        return index;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_0q0qgvw.rs:21:16\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n21 |        \
    \ return index;\n   |                ^^^^^ expected `isize`, found `usize`\n \
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n21 |         return index.try_into().unwrap();\n  \
    \ |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n    let mut max_idx = arr.len() - 1;\n    for i in\
    \ 0..arr.len() - 2 {\n        if arr[i] > arr[i + 1] {\n            max_idx =\
    \ i;\n        }\n    }\n    if max_idx == -1 { -1 } else { max_idx }\n}\n\nfn\
    \ main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0600]: cannot apply unary operator `-` to type `usize`\n  --> /tmp/tmp5cqtu46f.rs:18:19\n\
    \   |\n18 |     if max_idx == -1 { -1 } else { max_idx }\n   |               \
    \    ^^\n   |                   |\n   |                   cannot apply unary operator\
    \ `-`\n   |                   help: you may have meant the maximum value of `usize`:\
    \ `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5cqtu46f.rs:18:36\n   |\n8  | fn can_arrange(arr:\
    \ Vec<isize>) -> isize {\n   |                                    ----- expected\
    \ `isize` because of return type\n...\n18 |     if max_idx == -1 { -1 } else {\
    \ max_idx }\n   |                                    ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n18 |     if max_idx == -1 { -1 } else\
    \ { max_idx.try_into().unwrap() }\n   |                                      \
    \     ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0600.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    for &i in &arr {\n        if i > largest {\n            largest = i;\n  \
    \      }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp5zj9jaue.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = std::cmp::max::<isize>(arr.iter().cloned().collect::<Vec<_>>());\n\
    \    for (i, element) in arr.iter().enumerate() {\n        if element > largest\
    \ {\n            largest = element;\n        }\n        if i > 0 && element ==\
    \ largest + 1 {\n            return i - 1;\n        }\n    }\n    -1\n}\n\nfn\
    \ main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpzon22u62.rs:9:23\n     |\n9    |     let mut largest = std::cmp::max::<isize>(arr.iter().cloned().collect::<Vec<_>>());\n\
    \     |                       ^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------------\
    \ supplied 1 argument\n     |                       |\n     |                \
    \       expected 2 arguments\n     |\nnote: function defined here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzon22u62.rs:11:22\n   |\n11 |         if element\
    \ > largest {\n   |                      ^^^^^^^\n   |                      |\n\
    \   |                      expected `&isize`, found `isize`\n   |            \
    \          help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzon22u62.rs:12:23\n   |\n9  |     let mut largest = std::cmp::max::<isize>(arr.iter().cloned().collect::<Vec<_>>());\n\
    \   |                       ---------------------------------------------------------------\
    \ expected due to this value\n...\n12 |             largest = element;\n   | \
    \                      ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n12 |             largest = *element;\n   | \
    \                      +\n\nerror[E0277]: can't compare `&isize` with `isize`\n\
    \  --> /tmp/tmpzon22u62.rs:14:29\n   |\n14 |         if i > 0 && element == largest\
    \ + 1 {\n   |                             ^^ no implementation for `&isize ==\
    \ isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for\
    \ `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzon22u62.rs:15:20\n\
    \   |\n15 |             return i - 1;\n   |                    ^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |             return\
    \ (i -"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = 0usize;\n\
    \    for i in arr.iter() {\n        max = i if i > max else max;\n    }\n    max\
    \ - arr.last().unwrap()\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found keyword `if`\n  --> /tmp/tmptztdgl8k.rs:11:17\n   |\n11 |         max\
    \ = i if i > max else max;\n   |                 ^^ expected one of 8 possible\
    \ tokens\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptztdgl8k.rs:13:11\n\
    \   |\n13 |     max - arr.last().unwrap()\n   |           ^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptztdgl8k.rs:13:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n13 | \
    \    max - arr.last().unwrap()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |     (max - arr.last().unwrap()).try_into().unwrap()\n\
    \   |     +                         +++++++++++++++++++++\n\nerror[E0277]: cannot\
    \ subtract `&isize` from `usize`\n  --> /tmp/tmptztdgl8k.rs:13:9\n   |\n13 | \
    \    max - arr.last().unwrap()\n   |         ^ no implementation for `usize -\
    \ &isize`\n   |\n   = help: the trait `Sub<&isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \n    for elem in arr.iter() {\n        if elem > largest {\n            largest\
    \ = elem;\n        }\n    }\n\n    largest\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuccq06dh.rs:12:19\n   |\n\
    12 |         if elem > largest {\n   |                   ^^^^^^^\n   |       \
    \            |\n   |                   expected `&isize`, found integer\n   |\
    \                   help: consider borrowing here: `&largest`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuccq06dh.rs:13:23\n   |\n9  |     let mut largest\
    \ = -1;\n   |                       -- expected due to this value\n...\n13 | \
    \            largest = elem;\n   |                       ^^^^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |  \
    \           largest = *elem;\n   |                       +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().take_while(|x|\
    \ *x < *arr.iter().enumerate().min_by(|(_, _), (i, _)| x.cmp(&i)))\n        .max_unwrap_or(-1);\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcitk8xy_.rs:9:90\n  |\n9 |\
    \     arr.iter().take_while(|x| *x < *arr.iter().enumerate().min_by(|(_, _), (i,\
    \ _)| x.cmp(&i)))\n  |                                                       \
    \                                   ^^ expected `isize`, found `usize`\n  |\n\
    \  = note: expected reference `&&isize`\n             found reference `&&usize`\n\
    \nerror[E0614]: type `Option<(usize, &isize)>` cannot be dereferenced\n --> /tmp/tmpcitk8xy_.rs:9:36\n\
    \  |\n9 |     arr.iter().take_while(|x| *x < *arr.iter().enumerate().min_by(|(_,\
    \ _), (i, _)| x.cmp(&i)))\n  |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0599]: no method named `max_unwrap_or` found for struct `TakeWhile` in\
    \ the current scope\n  --> /tmp/tmpcitk8xy_.rs:10:10\n   |\n10 |         .max_unwrap_or(-1);\n\
    \   |          ^^^^^^^^^^^^^ method not found in `TakeWhile<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpcitk8xy_.rs:9:27: 9:94]>`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpcitk8xy_.rs:8:36\n  |\n8 | fn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n  |    -----------                     ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  for i in arr.iter().skip(1) {\n        if max == -1 {\n            max = i;\n\
    \        } else if arr[i] > max {\n            max = i;\n        }\n    }\n  \
    \  max\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw48dzx6s.rs:12:19\n   |\n\
    9  |     let mut max = -1;\n   |                   -- expected due to this value\n\
    ...\n12 |             max = i;\n   |                   ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |        \
    \     max = *i;\n   |                   +\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `&isize`\n  --> /tmp/tmpw48dzx6s.rs:13:19\n   |\n13 | \
    \        } else if arr[i] > max {\n   |                   ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw48dzx6s.rs:14:19\n\
    \   |\n9  |     let mut max = -1;\n   |                   -- expected due to this\
    \ value\n...\n14 |             max = i;\n   |                   ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |  \
    \           max = *i;\n   |                   +\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.rev().iter().enumerate().rev().filter(|(i,\
    \ j)| j - i > 1).next()\n        .unwrap_or(-1)\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpckq_937g.rs:9:9\n\
    \    |\n9   |       arr.rev().iter().enumerate().rev().filter(|(i, j)| j - i >\
    \ 1).next()\n    |           ^^^ `Vec<isize>` is not an iterator\n    |\n    =\
    \ note: the following trait bounds were not satisfied:\n            `Vec<isize>:\
    \ Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n  \
    \          `[isize]: Iterator`\n            which is required by `&mut [isize]:\
    \ Iterator`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    // sort the array in reverse\
    \ order\n    let mut sorted = arr\n        .iter()\n        .cloned()\n      \
    \  .cloned()\n        .sort_by_key(|&a| -a);\n\n    // keep iterating until we\
    \ find a value\n    let mut i = 1;\n    while i <= sorted.len() {\n        //\
    \ if the next element does not fit in the range then return -1\n        if sorted[i]\
    \ > sorted[i - 1].unwrap_or(sorted[0].unwrap_or(-1)) {\n            return -1;\n\
    \        }\n        i += 1;\n    }\n    sorted.len() - 1\n}\n\nfn main() {\n \
    \   let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmpuue8mgrx.rs:13:10\n     |\n13   | \
    \        .cloned()\n     |          ^^^^^^ expected reference, found `isize`\n\
    \     |\n     = note: expected reference `&&_`\n                found reference\
    \ `&isize`\n     = note: required because of the requirements on the impl of `Iterator`\
    \ for `Cloned<std::slice::Iter<'_, isize>>`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: no method named `sort_by_key` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmpuue8mgrx.rs:14:10\n   |\n14 |         .sort_by_key(|&a|\
    \ -a);\n   |          ^^^^^^^^^^^ method not found in `Cloned<Cloned<std::slice::Iter<'_,\
    \ isize>>>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n    let mut max: isize = 0;\n    for i in 0..arr.len()\
    \ {\n        if arr[i] > max {\n            max = i;\n        }\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbedy2yvi.rs:15:19\n   |\n\
    12 |     let mut max: isize = 0;\n   |                  ----- expected due to\
    \ this type\n...\n15 |             max = i;\n   |                   ^ expected\
    \ `isize`, found `usize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n   \
    \ for i in arr.iter().rev() {\n        if i >= arr[0] {\n            return -1;\n\
    \        }\n        if i > max {\n            max = i;\n        }\n    }\n   \
    \ max + 1\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp04_phdlw.rs:11:17\n   |\n\
    11 |         if i >= arr[0] {\n   |                 ^^^^^^\n   |             \
    \    |\n   |                 expected `&isize`, found `isize`\n   |          \
    \       help: consider borrowing here: `&arr[0]`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp04_phdlw.rs:14:16\n   |\n14 |         if i > max {\n   |      \
    \          ^^^\n   |                |\n   |                expected `&isize`,\
    \ found integer\n   |                help: consider borrowing here: `&max`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp04_phdlw.rs:15:19\n   |\n9  |  \
    \   let mut max = 0;\n   |                   - expected due to this value\n...\n\
    15 |             max = i;\n   |                   ^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n15 |             max = *i;\n\
    \   |                   +\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut ans = -1;\n  \
    \  for x in arr.iter() {\n        if x < arr.iter().skip(1).next() {\n       \
    \     return x;\n        }\n        if ans == -1 || x < ans {\n            ans\
    \ = x;\n        }\n    }\n    ans\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt_z2h6by.rs:11:16\n   |\n\
    11 |         if x < arr.iter().skip(1).next() {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&isize`, found enum `Option`\n   |\n   = note: expected reference\
    \ `&isize`\n                   found enum `Option<&isize>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpt_z2h6by.rs:12:20\n   |\n12 |             return x;\n \
    \  |                    ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n12 |             return *x;\n   |          \
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt_z2h6by.rs:14:29\n\
    \   |\n14 |         if ans == -1 || x < ans {\n   |                          \
    \   ^^^\n   |                             |\n   |                            \
    \ expected `&isize`, found integer\n   |                             help: consider\
    \ borrowing here: `&ans`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt_z2h6by.rs:15:19\n\
    \   |\n9  |     let mut ans = -1;\n   |                   -- expected due to this\
    \ value\n...\n15 |             ans = x;\n   |                   ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |  \
    \           ans = *x;\n   |                   +\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.len() == 0 {\n\
    \        -1\n    } else {\n        let mut curr_min_index = 0;\n        let mut\
    \ curr_max_index = 0;\n        for index in 0..arr.len() {\n            if index\
    \ < curr_max_index {\n                continue;\n            }\n            if\
    \ index > curr_min_index {\n                return -1;\n            }\n      \
    \      curr_max_index = index;\n            curr_min_index = index;\n        }\n\
    \        curr_max_index\n    }\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbdf67l7r.rs:24:9\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n24 |        \
    \ curr_max_index\n   |         ^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n24 |         curr_max_index.try_into().unwrap()\n \
    \  |                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n\n \
    \   for n in arr.iter().rev() {\n        if *n > *arr.get(max - 1) {\n       \
    \     max = n;\n        } else {\n            break;\n        }\n    }\n\n   \
    \ if max == arr.len() {\n        return -1;\n    }\n\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `Option<&isize>` cannot be dereferenced\n  --> /tmp/tmpo50r0xtm.rs:12:17\n\
    \   |\n12 |         if *n > *arr.get(max - 1) {\n   |                 ^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpo50r0xtm.rs:13:19\n   |\n9  |\
    \     let mut max = 0;\n   |                   - expected due to this value\n\
    ...\n13 |             max = n;\n   |                   ^ expected `usize`, found\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo50r0xtm.rs:23:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n23 | \
    \    max\n   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    23 |     max.try_into().unwrap()\n   |        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n\
    \    let mut idx: isize = 0;\n    let mut n = arr.len();\n    while n != 0 {\n\
    \        if arr[n - 1] > arr[idx] {\n            max = idx;\n        }\n     \
    \   if arr[n - 1] < arr[idx] {\n            idx = n - 1;\n        }\n        n\
    \ -= 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp37prgy5g.rs:13:25\n\
    \   |\n13 |         if arr[n - 1] > arr[idx] {\n   |                         ^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp37prgy5g.rs:16:25\n\
    \   |\n16 |         if arr[n - 1] < arr[idx] {\n   |                         ^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp37prgy5g.rs:17:19\n   |\n10 |     let mut idx:\
    \ isize = 0;\n   |                  ----- expected due to this type\n...\n17 |\
    \             idx = n - 1;\n   |                   ^^^^^ expected `isize`, found\
    \ `usize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    let\
    \ mut max_idx = -1;\n    while i < arr.len() {\n        if arr[i] <= arr[i+1]\
    \ {\n            max_idx = i;\n        }\n        i += 1;\n    }\n    max_idx\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmptbknfuw4.rs:10:23\n\
    \   |\n10 |     let mut max_idx = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmptbknfuw4.rs:17:5\n   |\n8  | fn can_arrange(arr: Vec<isize>) ->\
    \ isize {\n   |                                    ----- expected `isize` because\
    \ of return type\n...\n17 |     max_idx\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     max_idx.try_into().unwrap()\n  \
    \ |            ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().enumerate().max_unwrap_or(-1)\
    \ as isize\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `max_unwrap_or` found for struct `Enumerate`\
    \ in the current scope\n --> /tmp/tmpo_xmrzct.rs:9:28\n  |\n9 |     arr.iter().enumerate().max_unwrap_or(-1)\
    \ as isize\n  |                            ^^^^^^^^^^^^^ method not found in `Enumerate<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().position(|&x|\
    \ x > arr.iter().last().unwrap()).unwrap_or(-1)\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7pdxo7hz.rs:9:34\n  |\n9 |\
    \     arr.iter().position(|&x| x > arr.iter().last().unwrap()).unwrap_or(-1)\n\
    \  |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |     arr.iter().position(|&x|\
    \ x > *arr.iter().last().unwrap()).unwrap_or(-1)\n  |                        \
    \          +\n\nerror[E0600]: cannot apply unary operator `-` to type `usize`\n\
    \ --> /tmp/tmp7pdxo7hz.rs:9:72\n  |\n9 |     arr.iter().position(|&x| x > arr.iter().last().unwrap()).unwrap_or(-1)\n\
    \  |                                                                        ^^\n\
    \  |                                                                        |\n\
    \  |                                                                        cannot\
    \ apply unary operator `-`\n  |                                              \
    \                          help: you may have meant the maximum value of `usize`:\
    \ `usize::MAX`\n  |\n  = note: unsigned values cannot be negated\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp7pdxo7hz.rs:9:5\n  |\n8 | fn can_arrange(arr:\
    \ Vec<isize>) -> isize {\n  |                                    ----- expected\
    \ `isize` because of return type\n9 |     arr.iter().position(|&x| x > arr.iter().last().unwrap()).unwrap_or(-1)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     arr.iter().position(|&x|\
    \ x > arr.iter().last().unwrap()).unwrap_or(-1).try_into().unwrap()\n  |     \
    \                                                                      ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0600.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    for\
    \ &x in arr.iter() {\n        if x > i {\n            return i;\n        }\n \
    \       i += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `3`', /tmp/tmpiip8nh8i.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n    let mut i: isize = 0;\n    loop {\n        if\
    \ i >= arr.len() {\n            return -1;\n        }\n        if arr[i] >= arr[i-1]\
    \ {\n            return i;\n        }\n        i += 1;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqkearlcj.rs:14:17\n   |\n\
    14 |         if i >= arr.len() {\n   |                 ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |         if i >= arr.len().try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqkearlcj.rs:17:12\n  \
    \ |\n17 |         if arr[i] >= arr[i-1] {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpqkearlcj.rs:17:22\n   |\n17 |         if arr[i]\
    \ >= arr[i-1] {\n   |                      ^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    for i in arr.iter() {\n\
    \        if i > 0 && (arr[i-1] > i) {\n            return i - 1;\n        }\n\
    \    }\n    return -1;\n}\n\nfn main() {\n    let candidate = can_arrange;\n \
    \   assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsdfe177i.rs:10:16\n   |\n\
    10 |         if i > 0 && (arr[i-1] > i) {\n   |                ^\n   |       \
    \         |\n   |                expected `&isize`, found integer\n   |      \
    \          help: consider borrowing here: `&0`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpsdfe177i.rs:10:22\n   |\n10 |  \
    \       if i > 0 && (arr[i-1] > i) {\n   |                      ^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().enumerate().filter(|(index,\
    \ _)| !index+1 <= arr.iter().rev().last().unwrap()).last().unwrap_or(-1)\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2w3iw8qp.rs:9:60\n  |\n9 |\
    \     arr.iter().enumerate().filter(|(index, _)| !index+1 <= arr.iter().rev().last().unwrap()).last().unwrap_or(-1)\n\
    \  |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp2w3iw8qp.rs:9:111\n\
    \  |\n9 |     arr.iter().enumerate().filter(|(index, _)| !index+1 <= arr.iter().rev().last().unwrap()).last().unwrap_or(-1)\n\
    \  |                                                                         \
    \                                      ^^ expected tuple, found integer\n  |\n\
    \  = note: expected tuple `(usize, &isize)`\n              found type `{integer}`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp2w3iw8qp.rs:9:5\n  |\n8 | fn can_arrange(arr:\
    \ Vec<isize>) -> isize {\n  |                                    ----- expected\
    \ `isize` because of return type\n9 |     arr.iter().enumerate().filter(|(index,\
    \ _)| !index+1 <= arr.iter().rev().last().unwrap()).last().unwrap_or(-1)\n  |\
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected type `isize`\n      \
    \      found tuple `(usize, &isize)`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if largest < arr[i] -\
    \ 1 {\n            largest = arr[i];\n        }\n        i += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpnd8mqtd2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut l = arr.len();\n\
    \    while l > 1 && arr[l-1] > arr[l] {\n        l -= 1;\n    }\n    l - 1\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwswqhiih.rs:13:5\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n13 |     l -\
    \ 1\n   |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    13 |     (l - 1).try_into().unwrap()\n   |     +     +++++++++++++++++++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n\
    \    let mut idx: usize = 0;\n    for i in arr {\n        if i > max {\n     \
    \       max = i;\n            idx = i;\n        }\n    }\n\n    if max == idx\
    \ {\n        return -1;\n    }\n\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6kuqe53a.rs:14:19\n   |\n\
    10 |     let mut idx: usize = 0;\n   |                  ----- expected due to\
    \ this type\n...\n14 |             idx = i;\n   |                   ^ expected\
    \ `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6kuqe53a.rs:18:15\n\
    \   |\n18 |     if max == idx {\n   |               ^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n18 |     if max == idx.try_into().unwrap()\
    \ {\n   |                  ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut index = 0;\n    for elem in arr.iter() {\n        if elem > arr[index]\
    \ {\n            largest = index;\n        } else {\n            index += 1\n\
    \        }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpazlwmu0b.rs:12:19\n   |\n\
    12 |         if elem > arr[index] {\n   |                   ^^^^^^^^^^\n   | \
    \                  |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&arr[index]`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpazlwmu0b.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpazlwmu0b.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    let\
    \ mut result = -1;\n    let mut end = arr.len();\n    while end > i && result\
    \ != end {\n        if arr[i] <= arr[i-1] {\n            result = i;\n       \
    \     i += 1;\n        } else {\n            end -= 1;\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpc71x_9sm.rs:10:22\n\
    \   |\n10 |     let mut result = -1;\n   |                      ^^ the trait `Neg`\
    \ is not implemented for `usize`\n   |\n   = help: the following other types implement\
    \ trait `Neg`:\n             &f32\n             &f64\n             &i128\n   \
    \          &i16\n             &i32\n             &i64\n             &i8\n    \
    \         &isize\n           and 8 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpc71x_9sm.rs:20:5\n   |\n8  | fn can_arrange(arr: Vec<isize>) ->\
    \ isize {\n   |                                    ----- expected `isize` because\
    \ of return type\n...\n20 |     result\n   |     ^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |     result.try_into().unwrap()\n   |\
    \           ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = arr.len();\n\
    \    while i > 0 && arr[i] < arr[i-1] {\n        i -= 1;\n    }\n    i\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_jg2c702.rs:13:5\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n13 |     i\n\
    \   |     ^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n13 |     i.try_into().unwrap()\n\
    \   |      ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n    let mut highest_so_far = arr[0];\n    for i in\
    \ 1..arr.len() {\n        if arr[i] > highest_so_far {\n            highest_so_far\
    \ = arr[i];\n        }\n    }\n    highest_so_far\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpk76itmmu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index: isize\
    \ = 0;\n    let mut current_index: isize = 0;\n    for i in arr.iter() {\n   \
    \     current_index = i;\n        if current_index > max_index {\n           \
    \ max_index = current_index;\n        }\n    }\n    if max_index == -1 {\n   \
    \     max_index = -1;\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpga03slvf.rs:12:25\n   |\n\
    10 |     let mut current_index: isize = 0;\n   |                            -----\
    \ expected due to this type\n11 |     for i in arr.iter() {\n12 |         current_index\
    \ = i;\n   |                         ^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n12 |         current_index = *i;\n\
    \   |                         +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut min = arr[0];\n\
    \    let mut max = arr.iter().rev().find(|&x| x <= min).unwrap();\n    for &x\
    \ in arr {\n        if x <= min {\n            min = x;\n        }\n        if\
    \ x >= max {\n            max = x;\n        }\n    }\n    if min >= max {\n  \
    \      return -1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa18we2mf.rs:10:51\n   |\n\
    10 |     let mut max = arr.iter().rev().find(|&x| x <= min).unwrap();\n   |  \
    \                                                 ^^^\n   |                  \
    \                                 |\n   |                                    \
    \               expected `&isize`, found `isize`\n   |                       \
    \                            help: consider borrowing here: `&min`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpa18we2mf.rs:11:9\n   |\n11 |     for &x in arr\
    \ {\n   |         ^^    --- this expression has type `Option<isize>`\n   |   \
    \      |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `x`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpa18we2mf.rs:15:17\n   |\n15 |         if x >= max {\n   |     \
    \            ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n15 |         if x >= *max {\n   |                 +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpa18we2mf.rs:16:19\n   |\n10 |     let mut max\
    \ = arr.iter().rev().find(|&x| x <= min).unwrap();\n   |                   ---------------------------------------------\
    \ expected due to this value\n...\n16 |             max = x;\n   |           \
    \        ^\n   |                   |\n   |                   expected `&isize`,\
    \ found `isize`\n   |                   help: consider borrowing here: `&x`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpa18we2mf.rs:19:15\n   |\n19 |  \
    \   if min >= max {\n   |               ^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n19 |     if min >= *max\
    \ {\n   |               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa18we2mf.rs:22:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n22 | \
    \    max\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n22 |   "
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut i = 1;\n    largest = arr.iter().fold(i, |a, b| if a >= b {\n   \
    \     a\n    } else {\n        b\n    });\n\n    while i < (arr.len() - 1) {\n\
    \        let mut largest = -1;\n        let mut i = i + 1;\n        for j in i..arr.len()\
    \ {\n            if arr[j] >= arr[i] {\n                largest = j;\n       \
    \         break;\n            }\n        }\n        if largest != -1 {\n     \
    \       break;\n        }\n    }\n\n    if largest == -1 {\n        -1\n    }\
    \ else {\n        largest\n    }\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcrjd1sfo.rs:14:9\n   |\n\
    14 |         b\n   |         ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |         *b\n   |         +\n\nerror[E0277]:\
    \ can't compare `isize` with `&isize`\n  --> /tmp/tmpcrjd1sfo.rs:11:46\n   |\n\
    11 |     largest = arr.iter().fold(i, |a, b| if a >= b {\n   |               \
    \                               ^^ no implementation for `isize < &isize` and\
    \ `isize > &isize`\n   |\n   = help: the trait `PartialOrd<&isize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `PartialOrd<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrjd1sfo.rs:17:15\n\
    \   |\n17 |     while i < (arr.len() - 1) {\n   |               ^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n17 |     while i\
    \ < ((arr.len() - 1)).try_into().unwrap() {\n   |               +            \
    \   +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrjd1sfo.rs:20:21\n\
    \   |\n20 |         for j in i..arr.len() {\n   |                     ^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpcrjd1sfo.rs:21:16\n   |\n21 |            \
    \ if arr[j] >= arr[i] {\n   |                ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpcrjd1sfo.rs:21:26\n   |\n21 |            \
    \ if arr[j] >= arr[i] {\n   |                          ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = he"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest: isize\
    \ = 0;\n    for i in arr.iter().rev() {\n        if *i > arr[largest] {\n    \
    \        largest = i;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4pzqepms.rs:11:17\n\
    \   |\n11 |         if *i > arr[largest] {\n   |                 ^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4pzqepms.rs:12:23\n   |\n9  |     let mut largest:\
    \ isize = 0;\n   |                      ----- expected due to this type\n...\n\
    12 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \           largest = *i;\n   |                       +\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest_idx: usize\
    \ = 0;\n    let mut largest_value = arr[0];\n    for (i, value) in arr.iter().enumerate()\
    \ {\n        if value < largest_value {\n            largest_value = value;\n\
    \            largest_idx = i;\n        }\n    }\n    largest_idx\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppmru4qkl.rs:12:20\n   |\n\
    12 |         if value < largest_value {\n   |                    ^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    expected `&isize`, found `isize`\n\
    \   |                    help: consider borrowing here: `&largest_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppmru4qkl.rs:13:29\n   |\n10 |     let mut largest_value\
    \ = arr[0];\n   |                             ------ expected due to this value\n\
    ...\n13 |             largest_value = value;\n   |                           \
    \  ^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |             largest_value = *value;\n   |           \
    \                  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppmru4qkl.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largest_idx\n   |     ^^^^^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n17 |     largest_idx.try_into().unwrap()\n   |          \
    \      ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = arr.iter().position(|&x|\
    \ x <= arr[0]);\n    match i {\n        Some(x) => x,\n        None => -1,\n \
    \   }\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz045r81i.rs:11:20\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n11 |        \
    \ Some(x) => x,\n   |                    ^ expected `isize`, found `usize`\n \
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |         Some(x) => x.try_into().unwrap(),\n  \
    \ |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().enumerate().filter(|(_,\
    \ elem)| elem > 0).next()\n        .expect(\"No element greater than or equal\
    \ to element before\")\n}\n\nfn main() {\n    let candidate = can_arrange;\n \
    \   assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqi6jmfw2.rs:9:54\n  |\n9 |\
    \     arr.iter().enumerate().filter(|(_, elem)| elem > 0).next()\n  |        \
    \                                              ^ expected `&&isize`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqi6jmfw2.rs:9:5\n   |\n8  |  \
    \ fn can_arrange(arr: Vec<isize>) -> isize {\n   |                           \
    \           ----- expected `isize` because of return type\n9  | /     arr.iter().enumerate().filter(|(_,\
    \ elem)| elem > 0).next()\n10 | |         .expect(\"No element greater than or\
    \ equal to element before\")\n   | |_____________________________________________________________________^\
    \ expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n    \
    \         found tuple `(usize, &isize)`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = 0;\n\
    \    for i in arr {\n        if i < *max_index {\n            return -1;\n   \
    \     }\n        if i >= *max_index {\n            i = -1;\n        }\n      \
    \  max_index = i;\n    }\n    max_index\n}\n\nfn main() {\n    let candidate =\
    \ can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpgn54sv9_.rs:11:16\n\
    \   |\n11 |         if i < *max_index {\n   |                ^^^^^^^^^^\n\nerror[E0614]:\
    \ type `{integer}` cannot be dereferenced\n  --> /tmp/tmpgn54sv9_.rs:14:17\n \
    \  |\n14 |         if i >= *max_index {\n   |                 ^^^^^^^^^^\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    let\
    \ mut max = -1;\n\n    for &i in arr {\n        if i > max {\n            max\
    \ = i;\n        }\n    }\n\n    if max > -1 {\n        return max;\n    }\n\n\
    \    -1\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk84maqnw.rs:12:9\n   |\n\
    12 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    let mut max_index = -1;\n    while j < arr.len() - 1 {\n   \
    \     if arr[j] > arr[j + 1] {\n            if max_index == -1 || arr[j] <= max_index\
    \ {\n                max_index = arr[j];\n            }\n        }\n        j\
    \ += 1;\n    }\n    if max_index == -1 || max_index == arr.len() - 1 {\n     \
    \   max_index = -1;\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbwjb98hr.rs:20:40\n   |\n\
    20 |     if max_index == -1 || max_index == arr.len() - 1 {\n   |            \
    \                            ^^^^^^^^^^^^^ expected `isize`, found `usize`\n \
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n20 |     if max_index == -1 || max_index == (arr.len()\
    \ - 1).try_into().unwrap() {\n   |                                        +  \
    \           +++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = arr.len()\
    \ - 1;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < arr[i+1]\
    \ {\n            i += 1;\n        } else {\n            largest = i;\n       \
    \ }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdm91mf9a.rs:18:5\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n18 |     largest\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut cur = 0;\n    for &x in arr.iter() {\n        if x == cur {\n     \
    \       continue;\n        }\n        if x > max {\n            max = x;\n   \
    \     }\n        cur = x;\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpcx9jpqh3.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut result = -1;\n\
    \    let mut i = 0;\n\n    while i < arr.len() {\n        if arr[i] > arr[i..i].last()\
    \ {\n            i += 1;\n        } else {\n            result = i;\n        \
    \    break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf7nbgytv.rs:13:21\n   |\n\
    13 |         if arr[i] > arr[i..i].last() {\n   |                     ^^^^^^^^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpf7nbgytv.rs:20:5\n   |\n8  | fn can_arrange(arr: Vec<isize>) ->\
    \ isize {\n   |                                    ----- expected `isize` because\
    \ of return type\n...\n20 |     result\n   |     ^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |     result.try_into().unwrap()\n   |\
    \           ++++++++++++++++++++\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n --> /tmp/tmpf7nbgytv.rs:9:22\n  |\n9 |     let mut result\
    \ = -1;\n  |                      ^^ the trait `Neg` is not implemented for `usize`\n\
    \  |\n  = help: the following other types implement trait `Neg`:\n           \
    \ &f32\n            &f64\n            &i128\n            &i16\n            &i32\n\
    \            &i64\n            &i8\n            &isize\n          and 8 others\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = arr.len()\
    \ - 1;\n    while i >= 0 {\n        if arr[i] <= arr[i-1] {\n            break;\n\
    \        }\n        i -= 1;\n    }\n    i - 1\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi0qn_9o4.rs:16:5\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n16 |     i -\
    \ 1\n   |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    16 |     (i - 1).try_into().unwrap()\n   |     +     +++++++++++++++++++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut m = arr.len();\n\
    \    if m <= 0 {\n        return -1;\n    }\n    let mut j = 0;\n    let mut i\
    \ = 1;\n    while i < m {\n        if arr[j] > arr[j + 1] {\n            return\
    \ j;\n        }\n        j += 1;\n        i += 1;\n    }\n    return -1;\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5j9oh7q0.rs:17:20\n   |\n\
    17 |             return j;\n   |                    ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |             return j.try_into().unwrap();\n\
    \   |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = std::i32::MAX;\n\
    \    for i in arr.iter().rev() {\n        if i <= max {\n            return i;\n\
    \        }\n        max = i;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7usnsht4.rs:11:17\n   |\n\
    11 |         if i <= max {\n   |                 ^^^ expected `&isize`, found\
    \ `i32`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7usnsht4.rs:12:20\n \
    \  |\n12 |             return i;\n   |                    ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \           return *i;\n   |                    +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7usnsht4.rs:14:15\n   |\n9  |     let mut max = std::i32::MAX;\n\
    \   |                   ------------- expected due to this value\n...\n14 |  \
    \       max = i;\n   |               ^ expected `i32`, found `&isize`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n   \
    \ for (i, &val) in arr.iter().enumerate() {\n        if val > max {\n        \
    \    max = val;\n        }\n        if i > 0 && val != arr[i-1] {\n          \
    \  return -1;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpz_6z01_2.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut index = 0\n  \
    \  for i in arr.iter() {\n        if i > arr[index] {\n            index = i\n\
    \        }\n    }\n    index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpzdaq3am_.rs:9:22\n\
    \   |\n9  |     let mut index = 0\n   |                      ^ help: add `;` here\n\
    10 |     for i in arr.iter() {\n   |     --- unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzdaq3am_.rs:11:16\n   |\n11 |         if i >\
    \ arr[index] {\n   |                ^^^^^^^^^^\n   |                |\n   |  \
    \              expected `&isize`, found `isize`\n   |                help: consider\
    \ borrowing here: `&arr[index]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzdaq3am_.rs:12:21\n\
    \   |\n9  |     let mut index = 0\n   |                     - expected due to\
    \ this value\n...\n12 |             index = i\n   |                     ^ expected\
    \ `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzdaq3am_.rs:15:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    index\n   |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n15 |     index.try_into().unwrap()\n   |          ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().skip(1).fold(0,\
    \ |max, &x| if x > max { x } else { max })\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp8toax75z.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.len() == 0 {\n\
    \        return -1;\n    }\n    if arr.iter().any(|&x| x <= arr.iter().last().unwrap())\
    \ {\n        return -1;\n    }\n    if arr.iter().any(|&x| x <= arr.iter().last().unwrap()\
    \ + 1) {\n        return -1;\n    }\n    return arr.iter().rposition(|&x| x >\
    \ arr.iter().last().unwrap() + 1)\n        .map(|i| arr.iter().last().unwrap()\
    \ + 1 + i - 1).unwrap();\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcpj96n1j.rs:12:33\n   |\n\
    12 |     if arr.iter().any(|&x| x <= arr.iter().last().unwrap()) {\n   |     \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |     if arr.iter().any(|&x|\
    \ x <= *arr.iter().last().unwrap()) {\n   |                                 +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcpj96n1j.rs:19:51\n   |\n19 |\
    \         .map(|i| arr.iter().last().unwrap() + 1 + i - 1).unwrap();\n   |   \
    \                                                ^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot add `usize` to `isize`\n  --> /tmp/tmpcpj96n1j.rs:19:49\n\
    \   |\n19 |         .map(|i| arr.iter().last().unwrap() + 1 + i - 1).unwrap();\n\
    \   |                                                 ^ no implementation for\
    \ `isize + usize`\n   |\n   = help: the trait `Add<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut arr = arr.clone();\n\
    \    for i in 1..arr.len() {\n        if arr[i-1] > arr[i] {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate =\
    \ can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcmt44a_d.rs:12:20\n   |\n\
    12 |             return i;\n   |                    ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n12 |             return i.try_into().unwrap();\n\
    \   |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut index = 0;\n\n\
    \    for i in arr.iter() {\n        if index < i {\n            index = i;\n \
    \       }\n    }\n\n    match (arr.iter().rev().enumerate().map(|(e, ix)| ix).max()\
    \ ) {\n        Some(i) => i,\n        None => -1,\n    }\n}\n\nfn main() {\n \
    \   let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around `match` scrutinee expression\n\
    \  --> /tmp/tmp0k1om0xf.rs:17:11\n   |\n17 |     match (arr.iter().rev().enumerate().map(|(e,\
    \ ix)| ix).max() ) {\n   |           ^                                       \
    \             ^^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n17 -     match (arr.iter().rev().enumerate().map(|(e,\
    \ ix)| ix).max() ) {\n17 +     match arr.iter().rev().enumerate().map(|(e, ix)|\
    \ ix).max() {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0k1om0xf.rs:13:21\n\
    \   |\n9  |     let mut index = 0;\n   |                     - expected due to\
    \ this value\n...\n13 |             index = i;\n   |                     ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    13 |             index = *i;\n   |                     +\n\nerror[E0277]: can't\
    \ compare `isize` with `&isize`\n  --> /tmp/tmp0k1om0xf.rs:12:18\n   |\n12 | \
    \        if index < i {\n   |                  ^ no implementation for `isize\
    \ < &isize` and `isize > &isize`\n   |\n   = help: the trait `PartialOrd<&isize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp0k1om0xf.rs:18:20\n   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n18 |         Some(i) => i,\n   |                    ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    18 |         Some(i) => *i,\n   |                    +\n\nerror: aborting due\
    \ to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_value = arr[0];\n    for &idx in arr.iter().rev() {\n       \
    \ if idx > max_value {\n            max_value = idx;\n            max_idx = idx;\n\
    \        }\n    }\n    if max_idx == -1 {\n        return -1;\n    }\n    return\
    \ max_idx;\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpp30ta7hc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut result = -1;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[i+1] {\n\
    \            result = i;\n        }\n        i += 1;\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpqysb5v71.rs:9:22\n\
    \  |\n9 |     let mut result = -1;\n  |                      ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqysb5v71.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     result.try_into().unwrap()\n   |           ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = 0;\n\
    \    for i in arr.iter() {\n        if i > &arr[max_idx] {\n            max_idx\
    \ = i;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp14xffwsw.rs:12:23\n   |\n\
    9  |     let mut max_idx = 0;\n   |                       - expected due to this\
    \ value\n...\n12 |             max_idx = i;\n   |                       ^ expected\
    \ `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp14xffwsw.rs:15:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    max_idx\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     max_idx.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut index = 0;\n \
    \   let mut value = arr[0];\n    for elem in &arr[1..] {\n        if value >=\
    \ elem {\n            return index;\n        }\n        index = index + 1;\n \
    \       value = elem;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp12wxfw64.rs:12:21\n   |\n\
    12 |         if value >= elem {\n   |                     ^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \       if value >= *elem {\n   |                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp12wxfw64.rs:16:17\n   |\n10 |     let mut value = arr[0];\n\
    \   |                     ------ expected due to this value\n...\n16 |       \
    \  value = elem;\n   |                 ^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n16 |         value = *elem;\n\
    \   |                 +\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_so_far = std::i32::MAX;\n\
    \n    for val in arr.iter() {\n        if val <= max_so_far {\n            max_so_far\
    \ = val;\n        }\n    }\n    if max_so_far == std::i32::MAX {\n        return\
    \ -1;\n    }\n    max_so_far\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphtbhq1yx.rs:12:19\n   |\n\
    12 |         if val <= max_so_far {\n   |                   ^^^^^^^^^^ expected\
    \ `&isize`, found `i32`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphtbhq1yx.rs:13:26\n\
    \   |\n9  |     let mut max_so_far = std::i32::MAX;\n   |                    \
    \      ------------- expected due to this value\n...\n13 |             max_so_far\
    \ = val;\n   |                          ^^^ expected `i32`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmphtbhq1yx.rs:19:5\n   |\n8  | fn\
    \ can_arrange(arr: Vec<isize>) -> isize {\n   |                              \
    \      ----- expected `isize` because of return type\n...\n19 |     max_so_far\n\
    \   |     ^^^^^^^^^^ expected `isize`, found `i32`\n   |\nhelp: you can convert\
    \ an `i32` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    19 |     max_so_far.try_into().unwrap()\n   |               ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = arr.len();\n\
    \    let mut largest = -1;\n    while i > 0 {\n        largest += i;\n       \
    \ i = 0;\n        while i < arr.len() && arr[i] <= arr[largest - 1] {\n      \
    \      i += 1;\n        }\n        if i == 0 {\n            return -1;\n     \
    \   }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpnlh1kd_y.rs:10:23\n\
    \   |\n10 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnlh1kd_y.rs:21:5\n   |\n8  | fn can_arrange(arr: Vec<isize>) ->\
    \ isize {\n   |                                    ----- expected `isize` because\
    \ of return type\n...\n21 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n21 |     largest.try_into().unwrap()\n  \
    \ |            ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    // Scan from left to right\
    \ and store the current index\n    let mut index = 0;\n    // For all elements\
    \ in the array\n    for &x in arr {\n        // If the element is not greater\
    \ than or equal to the current element return it\n        if x <= arr[index] {\n\
    \            return index;\n        }\n        // Otherwise, increase the index\n\
    \        index++;\n    }\n    // If we reach the end of the array without finding\
    \ a larger element\n    return -1;\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpe3yekrha.rs:18:14\n\
    \   |\n18 |         index++;\n   |              ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n18 |         { let tmp = index; index +=\
    \ 1; tmp };\n   |         +++++++++++      ~~~~~~~~~~~~~~~~~~~\n18 -         index++;\n\
    18 +         index += 1;\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe3yekrha.rs:12:9\n\
    \   |\n12 |     for &x in arr {\n   |         ^^    --- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `x`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe3yekrha.rs:15:20\n   |\n15 |             return\
    \ index;\n   |                    ^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n15 |             return index.try_into().unwrap();\n   |\
    \                         ++++++++++++++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \n    for a in arr.iter() {\n        if a > largest {\n            largest = a;\n\
    \        }\n    }\n\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx0hz5q_j.rs:12:16\n   |\n\
    12 |         if a > largest {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpx0hz5q_j.rs:13:23\n   |\n9  |     let mut largest = -1;\n   | \
    \                      -- expected due to this value\n...\n13 |             largest\
    \ = a;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n13 |             largest = *a;\n\
    \   |                       +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().position(|&x|\
    \ !x.is_max()).unwrap_or(-1)\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_max` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp6z0jerqf.rs:9:33\n  |\n9 |     arr.iter().position(|&x|\
    \ !x.is_max()).unwrap_or(-1)\n  |                                 ^^^^^^ method\
    \ not found in `isize`\n\nerror[E0600]: cannot apply unary operator `-` to type\
    \ `usize`\n --> /tmp/tmp6z0jerqf.rs:9:53\n  |\n9 |     arr.iter().position(|&x|\
    \ !x.is_max()).unwrap_or(-1)\n  |                                            \
    \         ^^\n  |                                                     |\n  | \
    \                                                    cannot apply unary operator\
    \ `-`\n  |                                                     help: you may have\
    \ meant the maximum value of `usize`: `usize::MAX`\n  |\n  = note: unsigned values\
    \ cannot be negated\n\nerror[E0308]: mismatched types\n --> /tmp/tmp6z0jerqf.rs:9:5\n\
    \  |\n8 | fn can_arrange(arr: Vec<isize>) -> isize {\n  |                    \
    \                ----- expected `isize` because of return type\n9 |     arr.iter().position(|&x|\
    \ !x.is_max()).unwrap_or(-1)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     arr.iter().position(|&x|\
    \ !x.is_max()).unwrap_or(-1).try_into().unwrap()\n  |                        \
    \                                ++++++++++++++++++++\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0600.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n    let mut idx = 0;\n    while idx < arr.len() -\
    \ 1 {\n        if arr[idx] > arr[idx+1] {\n            idx += 1;\n        } else\
    \ {\n            return idx;\n        }\n    }\n    -1\n}\n\nfn main() {\n   \
    \ let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdsrfq0ux.rs:17:20\n   |\n\
    17 |             return idx;\n   |                    ^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |             return idx.try_into().unwrap();\n\
    \   |                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = arr.len();\n\
    \    for i in (0..arr.len()).rev() {\n        if arr[i] <= arr[largest - i] {\n\
    \            largest = i;\n        } else {\n            break;\n        }\n \
    \   }\n    if largest == arr.len() {\n        -1\n    } else {\n        largest\n\
    \    }\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv1g_fc01.rs:20:9\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n20 |        \
    \ largest\n   |         ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n20 |         largest.try_into().unwrap()\n   |                ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest: isize\
    \ = 0;\n    let mut left: isize = 0;\n\n    for x in arr.iter() {\n        if\
    \ x > arr[left] {\n            largest = x;\n        }\n\n        left += 1;\n\
    \    }\n\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_078b_k3.rs:13:16\n\
    \   |\n13 |         if x > arr[left] {\n   |                ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_078b_k3.rs:14:23\n\
    \   |\n9  |     let mut largest: isize = 0;\n   |                      ----- expected\
    \ due to this type\n...\n14 |             largest = x;\n   |                 \
    \      ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n14 |             largest = *x;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    for i in arr {\n        if i > arr[0] {\n            max_idx = i;\n     \
    \   }\n    }\n    Some(max_idx)\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnyawjs0i.rs:15:5\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n15 |     Some(max_idx)\n\
    \   |     ^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut min_value = arr[0];\n\
    \    let mut max_value = arr[0];\n    for i in arr.iter().rev() {\n        if\
    \ *i < *min_value {\n            min_value = i;\n        }\n        if *i > *max_value\
    \ {\n            max_value = i;\n        }\n    }\n    if min_value > max_value\
    \ {\n        return -1;\n    }\n    if min_value == max_value {\n        return\
    \ -1;\n    }\n    return max_value - min_value + 1;\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpcvg0fyu5.rs:12:17\n\
    \   |\n12 |         if *i < *min_value {\n   |                 ^^^^^^^^^^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpcvg0fyu5.rs:13:25\n   |\n9  |  \
    \   let mut min_value = arr[0];\n   |                         ------ expected\
    \ due to this value\n...\n13 |             min_value = i;\n   |              \
    \           ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |             min_value = *i;\n   |                   \
    \      +\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpcvg0fyu5.rs:15:17\n\
    \   |\n15 |         if *i > *max_value {\n   |                 ^^^^^^^^^^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpcvg0fyu5.rs:16:25\n   |\n10 |  \
    \   let mut max_value = arr[0];\n   |                         ------ expected\
    \ due to this value\n...\n16 |             max_value = i;\n   |              \
    \           ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |             max_value = *i;\n   |                   \
    \      +\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().position(|x|\
    \ *x > *arr.iter().position(|y| y < x))\n}\n\nfn main() {\n    let candidate =\
    \ can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `Option<usize>` cannot be dereferenced\n --> /tmp/tmp2ynksdwc.rs:9:34\n\
    \  |\n9 |     arr.iter().position(|x| *x > *arr.iter().position(|y| y < x))\n\
    \  |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp2ynksdwc.rs:9:5\n  |\n8 | fn can_arrange(arr:\
    \ Vec<isize>) -> isize {\n  |                                    ----- expected\
    \ `isize` because of return type\n9 |     arr.iter().position(|x| *x > *arr.iter().position(|y|\
    \ y < x))\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n\
    \             found enum `Option<usize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = 0usize;\n\
    \n    for i in arr {\n        if i == max {\n            continue;\n        }\n\
    \n        if i <= max {\n            return i;\n        }\n\n        if max >\
    \ i {\n            max = i;\n        }\n    }\n\n    return -1;\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuy5nw20g.rs:12:17\n   |\n\
    12 |         if i == max {\n   |                 ^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n12 |         if i == max.try_into().unwrap() {\n  \
    \ |                    ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuy5nw20g.rs:16:17\n   |\n16 |         if i <= max {\n   |     \
    \            ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    16 |         if i <= max.try_into().unwrap() {\n   |                    ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpuy5nw20g.rs:20:18\n   |\n20 |\
    \         if max > i {\n   |                  ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n20 |         if max > i.try_into().unwrap() {\n   |\
    \                   ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpuy5nw20g.rs:21:19\n   |\n9  |     let mut max = 0usize;\n   |  \
    \                 ------ expected due to this value\n...\n21 |             max\
    \ = i;\n   |                   ^ expected `usize`, found `isize`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  for &n in arr.iter() {\n        max = match &n {\n            n if n >= max\
    \ => n,\n            _ => max,\n        };\n    }\n    max + 1\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfcb9dkcv.rs:12:23\n   |\n\
    12 |             n if n >= max => n,\n   |                       ^^^\n   |   \
    \                    |\n   |                       expected `&isize`, found integer\n\
    \   |                       help: consider borrowing here: `&max`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfcb9dkcv.rs:12:30\n   |\n12 |             n\
    \ if n >= max => n,\n   |                              ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |        \
    \     n if n >= max => *n,\n   |                              +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = 0;\n\
    \    let mut current = arr.len() - 1;\n    while current > largest {\n       \
    \ if arr[current] > arr[current - 1] {\n            largest = current;\n     \
    \   } else {\n            current -= 1;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeivly1mi.rs:18:5\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n18 |     largest\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n   \
    \ for i in arr.iter().rev() {\n        if *i < max {\n            max = *i;\n\
    \        }\n    }\n    max - 1 if max != -1 else -1\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword\
    \ `if`\n  --> /tmp/tmp0uwl7asu.rs:15:13\n   |\n15 |     max - 1 if max != -1 else\
    \ -1\n   |             ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.len() == 1 {\n\
    \        return arr[0];\n    }\n\n    let mut largest = std::cmp::max(arr[0],\
    \ arr.iter().skip(1).max().unwrap());\n    let mut index = 1;\n    while largest\
    \ != arr[index] {\n        index += 1;\n        if index >= arr.len() {\n    \
    \        break;\n        }\n        largest = std::cmp::max(largest, arr[index]);\n\
    \    }\n    index\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa9ihp49u.rs:13:45\n   |\n\
    13 |     let mut largest = std::cmp::max(arr[0], arr.iter().skip(1).max().unwrap());\n\
    \   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n13 |     let mut largest = std::cmp::max(arr[0], *arr.iter().skip(1).max().unwrap());\n\
    \   |                                             +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpa9ihp49u.rs:22:5\n   |\n8  | fn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n   |                                    ----- expected `isize` because\
    \ of return type\n...\n22 |     index\n   |     ^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n22 |     index.try_into().unwrap()\n   |\
    \          ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n    let mut largest_index_so_far = -1;\n    let mut\
    \ small_index_so_far = -1;\n    for &a in &arr {\n        if a > largest_index_so_far\
    \ {\n            largest_index_so_far = a;\n        }\n        if a < small_index_so_far\
    \ {\n            small_index_so_far = a;\n        }\n    }\n    if small_index_so_far\
    \ > largest_index_so_far {\n        small_index_so_far\n    } else {\n       \
    \ largest_index_so_far\n    }\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpzi2pf9zy.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut min = i32::MAX;\n\
    \    let mut max = -1;\n\n    for &x in &arr {\n        match &min {\n       \
    \     x if x < x => {\n                min = x;\n            }\n            _\
    \ => {\n                max = x;\n            }\n        }\n    }\n    max\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp04iwfu0v.rs:15:23\n   |\n\
    9  |     let mut min = i32::MAX;\n   |                   -------- expected due\
    \ to this value\n...\n15 |                 min = x;\n   |                    \
    \   ^ expected `i32`, found `&i32`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n15 |                 min = *x;\n   |                       +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().enumerate().filter(|(_,\
    \ i)| *i > 0 && !arr.iter().skip(i + 1).any(|&x| *x == *i)).last().unwrap_or(-1)\
    \ as isize\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkqgnyc02.rs:9:49\n  |\n9 |\
    \     arr.iter().enumerate().filter(|(_, i)| *i > 0 && !arr.iter().skip(i + 1).any(|&x|\
    \ *x == *i)).last().unwrap_or(-1) as isize\n  |                              \
    \                   ^\n  |                                                 |\n\
    \  |                                                 expected `&isize`, found\
    \ integer\n  |                                                 help: consider\
    \ borrowing here: `&0`\n\nerror[E0369]: cannot add `{integer}` to `&&isize`\n\
    \ --> /tmp/tmpkqgnyc02.rs:9:73\n  |\n9 |     arr.iter().enumerate().filter(|(_,\
    \ i)| *i > 0 && !arr.iter().skip(i + 1).any(|&x| *x == *i)).last().unwrap_or(-1)\
    \ as isize\n  |                                                              \
    \         - ^ - {integer}\n  |                                               \
    \                        |\n  |                                              \
    \                         &&isize\n  |\nhelp: `+` can be used on `isize`, you\
    \ can dereference `i`\n  |\n9 |     arr.iter().enumerate().filter(|(_, i)| *i\
    \ > 0 && !arr.iter().skip(*i + 1).any(|&x| *x == *i)).last().unwrap_or(-1) as\
    \ isize\n  |                                                                 \
    \      +\n\nerror[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpkqgnyc02.rs:9:87\n\
    \  |\n9 |     arr.iter().enumerate().filter(|(_, i)| *i > 0 && !arr.iter().skip(i\
    \ + 1).any(|&x| *x == *i)).last().unwrap_or(-1) as isize\n  |                \
    \                                                                       ^^\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpkqgnyc02.rs:9:115\n  |\n9 |     arr.iter().enumerate().filter(|(_,\
    \ i)| *i > 0 && !arr.iter().skip(i + 1).any(|&x| *x == *i)).last().unwrap_or(-1)\
    \ as isize\n  |                                                              \
    \                                                     ^^ expected tuple, found\
    \ integer\n  |\n  = note: expected tuple `(usize, &isize)`\n              found\
    \ type `{integer}`\n\nerror[E0605]: non-primitive cast: `(usize, &isize)` as `isize`\n\
    \ --> /tmp/tmpkqgnyc02.rs:9:"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max: isize = -1;\n\
    \    for i in 0..arr.len() {\n        if arr[i] >= arr[max] {\n            max\
    \ = i;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcl19g__3.rs:11:22\n\
    \   |\n11 |         if arr[i] >= arr[max] {\n   |                      ^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcl19g__3.rs:12:19\n   |\n9  |     let mut max:\
    \ isize = -1;\n   |                  ----- expected due to this type\n...\n12\
    \ |             max = i;\n   |                   ^ expected `isize`, found `usize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n    if arr.len() <= 2 {\n        return arr.len();\n\
    \    }\n    let mut start = 0;\n    let mut end = arr.len() - 1;\n    while start\
    \ < end {\n        let mid = start + (end - start) / 2;\n        if arr[mid] >=\
    \ arr[mid+1] {\n            end = mid - 1;\n        } else {\n            start\
    \ = mid + 1;\n        }\n    }\n    return start as isize;\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2goo9zhs.rs:13:16\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n13 |        \
    \ return arr.len();\n   |                ^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |         return arr.len().try_into().unwrap();\n\
    \   |                         ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n   \
    \ let mut index = 0;\n    for &i in arr {\n        if i == i {\n            continue;\n\
    \        }\n        if max < i {\n            max = i;\n            index = i;\n\
    \        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp10geo04t.rs:11:9\n   |\n\
    11 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index: usize\
    \ = 0;\n    let mut max = arr[0];\n    for (i, item) in arr.iter().enumerate()\
    \ {\n        if item > max {\n            max = item;\n            max_index =\
    \ i;\n        }\n    }\n    if max_index == arr.len() - 1 {\n        return -1;\n\
    \    }\n    return max_index;\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdu2tvbyt.rs:12:19\n   |\n\
    12 |         if item > max {\n   |                   ^^^\n   |               \
    \    |\n   |                   expected `&isize`, found `isize`\n   |        \
    \           help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdu2tvbyt.rs:13:19\n   |\n10 |     let mut max = arr[0];\n\
    \   |                   ------ expected due to this value\n...\n13 |         \
    \    max = item;\n   |                   ^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |             max = *item;\n\
    \   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdu2tvbyt.rs:20:12\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n20 | \
    \    return max_index;\n   |            ^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n20 |     return max_index.try_into().unwrap();\n  \
    \ |                     ++++++++++++++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = 0;\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= arr[0] {\n\
    \            i += 1;\n        } else {\n            max_idx = i;\n        }\n\
    \    }\n    if max_idx == arr.len() - 1 {\n        max_idx\n    } else {\n   \
    \     -1\n    }\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_jubfb60.rs:19:9\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n19 |        \
    \ max_idx\n   |         ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |         max_idx.try_into().unwrap()\n   |                ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n   \
    \ for &element in arr.iter().skip(1) {\n        if element > max {\n         \
    \   max = element;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp6h1mcxth.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  for i in arr.iter().rev() {\n        if i >= &arr[max] {\n            max =\
    \ i;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpqeuu5oc1.rs:9:19\n\
    \  |\n9 |     let mut max = -1;\n  |                   ^^ the trait `Neg` is not\
    \ implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqeuu5oc1.rs:12:19\n\
    \   |\n9  |     let mut max = -1;\n   |                   -- expected due to this\
    \ value\n...\n12 |             max = i;\n   |                   ^ expected `usize`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqeuu5oc1.rs:15:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    max\n   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    15 |     max.try_into().unwrap()\n   |        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.len() == 0 {\n\
    \        return -1;\n    }\n    let mut max_idx = arr.iter().rposition(|&x| x\
    \ < arr[0]).unwrap_or_else(|| arr.len());\n    for i in 1..arr.len() {\n     \
    \   if max_idx == i {\n            return i;\n        } else if arr[i] > arr[max_idx]\
    \ {\n            max_idx = i;\n        }\n    }\n    -1\n}\n\nfn main() {\n  \
    \  let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb2ghtk4x.rs:15:20\n   |\n\
    15 |             return i;\n   |                    ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n15 |             return i.try_into().unwrap();\n\
    \   |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n    let mut largest: isize = 1;\n    let mut smallest:\
    \ isize = 1;\n    let mut index = 0;\n    let mut max_val: isize = *arr;\n   \
    \ while largest < arr.len() {\n        while largest < arr.len() && arr[index]\
    \ <= max_val {\n            index += 1; // check this value is greater than largest\
    \ value so far\n            max_val = max_val - arr[index];\n            largest\
    \ = largest;\n        }\n        if max_val == arr[index] {\n            largest++;\n\
    \        }\n        if smallest > index {\n            smallest = index;\n   \
    \     }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp74zaquzm.rs:23:20\n\
    \   |\n23 |             largest++;\n   |                    ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n23 |             { let tmp =\
    \ largest; largest += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n\
    23 -             largest++;\n23 +             largest += 1;\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp74zaquzm.rs:15:30\n   |\n15 |     let mut max_val:\
    \ isize = *arr;\n   |                      -----   ^^^^ expected `isize`, found\
    \ slice `[isize]`\n   |                      |\n   |                      expected\
    \ due to this\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp74zaquzm.rs:16:21\n\
    \   |\n16 |     while largest < arr.len() {\n   |                     ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n16 |     while largest\
    \ < arr.len().try_into().unwrap() {\n   |                              ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp74zaquzm.rs:17:25\n   |\n17 |\
    \         while largest < arr.len() && arr[index] <= max_val {\n   |         \
    \                ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n17 |         while largest < arr.len().try_into().unwrap() && arr[index]\
    \ <= max_val {\n   |                                  ++++++++++++++++++++\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp74zaquzm.rs:25:23\n   |\n25 |  \
    \       if smallest > index {\n   |                       ^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n25 |         if smallest > index.try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp74zaquzm.rs:26:24\n   |\n13 |     let mut smallest: isize\
    \ = 1;\n   |                       ----- expected due to this type\n...\n26 |\
    \           "
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().skip(1).enumerate().max().unwrap()\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuzz9i4c2.rs:9:5\n  |\n8 |\
    \ fn can_arrange(arr: Vec<isize>) -> isize {\n  |                            \
    \        ----- expected `isize` because of return type\n9 |     arr.iter().skip(1).enumerate().max().unwrap()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ tuple\n  |\n  = note: expected type `isize`\n            found tuple `(usize,\
    \ &isize)`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    let\
    \ mut res = -1;\n\n    while i < arr.len() && res == -1 {\n        if arr[i] >=\
    \ arr[i..].iter().max().unwrap_or(i) {\n            res = i;\n        }\n\n  \
    \      i += 1;\n    }\n\n    res\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm4ao9wgm.rs:13:54\n   |\n\
    13 |         if arr[i] >= arr[i..].iter().max().unwrap_or(i) {\n   |         \
    \                                             ^ expected `&isize`, found `usize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpm4ao9wgm.rs:13:22\n   |\n13 |\
    \         if arr[i] >= arr[i..].iter().max().unwrap_or(i) {\n   |            \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap_or(i) {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpm4ao9wgm.rs:10:19\n\
    \   |\n10 |     let mut res = -1;\n   |                   ^^ the trait `Neg` is\
    \ not implemented for `usize`\n   |\n   = help: the following other types implement\
    \ trait `Neg`:\n             &f32\n             &f64\n             &i128\n   \
    \          &i16\n             &i32\n             &i64\n             &i8\n    \
    \         &isize\n           and 8 others\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpm4ao9wgm.rs:12:35\n   |\n12 |     while\
    \ i < arr.len() && res == -1 {\n   |                                   ^^ the\
    \ trait `Neg` is not implemented for `usize`\n   |\n   = help: the following other\
    \ types implement trait `Neg`:\n             &f32\n             &f64\n       \
    \      &i128\n             &i16\n             &i32\n             &i64\n      \
    \       &i8\n             &isize\n           and 8 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpm4ao9wgm.rs:20:5\n   |\n8  | fn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n   |                                    ----- expected `isize` because\
    \ of return type\n...\n20 |     res\n   |     ^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n20 |     res.try_into().unwrap()\n   |        ++++++++++++++++++++\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 1isize;\n\
    \    while i < arr.len() {\n        if arr[i] > arr[i-1] {\n            i += 1;\n\
    \        } else {\n            return i;\n        }\n    }\n    -1\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgr3gs11c.rs:10:15\n   |\n\
    10 |     while i < arr.len() {\n   |               ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n10 |     while i < arr.len().try_into().unwrap()\
    \ {\n   |                        ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgr3gs11c.rs:11:12\n  \
    \ |\n11 |         if arr[i] > arr[i-1] {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgr3gs11c.rs:11:21\n   |\n11 |         if arr[i]\
    \ > arr[i-1] {\n   |                     ^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.len() == 0 {\n\
    \        return -1;\n    }\n    arr.iter().enumerate().filter(|(i, elem)| elem\
    \ >= &arr[i - 1]).max()\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzi6g_vsc.rs:12:55\n   |\n\
    12 |     arr.iter().enumerate().filter(|(i, elem)| elem >= &arr[i - 1]).max()\n\
    \   |                                                       ^^^^^^^^^^^ expected\
    \ `&isize`, found `isize`\n   |\n   = note: expected reference `&&isize`\n   \
    \           found reference `&isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpzi6g_vsc.rs:12:5\n   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n12 |     arr.iter().enumerate().filter(|(i, elem)| elem >=\
    \ &arr[i - 1]).max()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<(usize, &isize)>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n\
    \    let mut index = 1;\n    while index < arr.len() {\n        if max < arr[index\
    \ - 1] {\n            max = arr[index - 1];\n        }\n        match arr.binary_search(&index\
    \ - 1) {\n            Ok(index) => {\n                return index - 1;\n    \
    \        }\n            Err(index) => return -1,\n        }\n        index +=\
    \ 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqte_t_39.rs:15:33\n   |\n\
    15 |         match arr.binary_search(&index - 1) {\n   |                     \
    \            ^^^^^^^^^^ expected `&isize`, found `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqte_t_39.rs:17:24\n   |\n17 |                 return index\
    \ - 1;\n   |                        ^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n17 |                 return (index - 1).try_into().unwrap();\n\
    \   |                        +         +++++++++++++++++++++\n\nwarning: unreachable\
    \ statement\n  --> /tmp/tmpqte_t_39.rs:21:9\n   |\n15 | /         match arr.binary_search(&index\
    \ - 1) {\n16 | |             Ok(index) => {\n17 | |                 return index\
    \ - 1;\n18 | |             }\n19 | |             Err(index) => return -1,\n20\
    \ | |         }\n   | |_________- any code following this `match` expression is\
    \ unreachable, as all arms diverge\n21 |           index += 1;\n   |         \
    \  ^^^^^^^^^^^ unreachable statement\n   |\n   = note: `#[warn(unreachable_code)]`\
    \ on by default\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().enumerate().filter(|(idx,\
    \ element)| idx > 0 && element >= arr[idx - 1]).max().unwrap_or(-1)\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv6r5g1m7.rs:9:58\n  |\n9 |\
    \     arr.iter().enumerate().filter(|(idx, element)| idx > 0 && element >= arr[idx\
    \ - 1]).max().unwrap_or(-1)\n  |                                             \
    \             ^\n  |                                                         \
    \ |\n  |                                                          expected `&usize`,\
    \ found integer\n  |                                                         \
    \ help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpv6r5g1m7.rs:9:74\n  |\n9 |     arr.iter().enumerate().filter(|(idx,\
    \ element)| idx > 0 && element >= arr[idx - 1]).max().unwrap_or(-1)\n  |     \
    \                                                                     ^^^^^^^^^^^^\
    \ expected `&&isize`, found `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpv6r5g1m7.rs:9:104\n\
    \  |\n9 |     arr.iter().enumerate().filter(|(idx, element)| idx > 0 && element\
    \ >= arr[idx - 1]).max().unwrap_or(-1)\n  |                                  \
    \                                                                      ^^ expected\
    \ tuple, found integer\n  |\n  = note: expected tuple `(usize, &isize)`\n    \
    \          found type `{integer}`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpv6r5g1m7.rs:9:5\n\
    \  |\n8 | fn can_arrange(arr: Vec<isize>) -> isize {\n  |                    \
    \                ----- expected `isize` because of return type\n9 |     arr.iter().enumerate().filter(|(idx,\
    \ element)| idx > 0 && element >= arr[idx - 1]).max().unwrap_or(-1)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected type `isize`\n      \
    \      found tuple `(usize, &isize)`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.len() <= 1 {\n\
    \        return -1;\n    }\n    let mut largest = arr[0];\n    for i in 1..arr.len()\
    \ {\n        if arr[i] >= largest {\n            largest = i;\n        }\n   \
    \ }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpirz9ao_l.rs:15:23\n   |\n\
    12 |     let mut largest = arr[0];\n   |                       ------ expected\
    \ due to this value\n...\n15 |             largest = i;\n   |                \
    \       ^ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut min_idx = 0;\n\
    \    for i in 0..arr.len() {\n        if arr[i] >= arr[min_idx] {\n          \
    \  min_idx = i;\n        }\n    }\n    if min_idx == arr.len() {\n        return\
    \ -1;\n    }\n    min_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr0v5z6ge.rs:18:5\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n18 |     min_idx\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    18 |     min_idx.try_into().unwrap()\n   |            ++++++++++++++++++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().windows(2).max_by_key(|(a,b)|\
    \ a.cmp(b))\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `windows` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmp_kul7cjf.rs:9:16\n  |\n9 |     arr.iter().windows(2).max_by_key(|(a,b)|\
    \ a.cmp(b))\n  |                ^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut curr = -1;\n \
    \   for i in arr.iter() {\n        if curr > i {\n            curr = i;\n    \
    \    }\n    }\n    curr\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptiq_01ho.rs:12:20\n   |\n\
    9  |     let mut curr = -1;\n   |                    -- expected due to this value\n\
    ...\n12 |             curr = i;\n   |                    ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |        \
    \     curr = *i;\n   |                    +\n\nerror[E0277]: can't compare `isize`\
    \ with `&isize`\n  --> /tmp/tmptiq_01ho.rs:11:17\n   |\n11 |         if curr >\
    \ i {\n   |                 ^ no implementation for `isize < &isize` and `isize\
    \ > &isize`\n   |\n   = help: the trait `PartialOrd<&isize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `PartialOrd<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = arr.iter().cloned().enumerate().min_by_key(|(_,\
    \ e)| *e);\n    match i {\n        Some(i) => i,\n        None => -1,\n    }\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprn3vrm_k.rs:11:20\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n11 |        \
    \ Some(i) => i,\n   |                    ^ expected `isize`, found tuple\n   |\n\
    \   = note: expected type `isize`\n             found tuple `(usize, isize)`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().enumerate().max().unwrap_or(-1)\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4td910ex.rs:9:44\n  |\n9 |\
    \     arr.iter().enumerate().max().unwrap_or(-1)\n  |                        \
    \                    ^^ expected tuple, found integer\n  |\n  = note: expected\
    \ tuple `(usize, &isize)`\n              found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp4td910ex.rs:9:5\n  |\n8 | fn can_arrange(arr:\
    \ Vec<isize>) -> isize {\n  |                                    ----- expected\
    \ `isize` because of return type\n9 |     arr.iter().enumerate().max().unwrap_or(-1)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n\
    \  |\n  = note: expected type `isize`\n            found tuple `(usize, &isize)`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    while\
    \ i < arr.len() {\n        if arr[i] <= arr[i-1] {\n            i += 1;\n    \
    \    } else {\n            i += 2;\n        }\n    }\n    i\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq4h9p9og.rs:17:5\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n17 |     i\n\
    \   |     ^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n17 |     i.try_into().unwrap()\n\
    \   |      ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().fold(\n   \
    \     std::cmp::Ordering::Equal,\n        |x, y| x.partial_cmp(y).unwrap_or(std::cmp::Ordering::Less))\n\
    \        .unwrap_or(std::cmp::Ordering::Equal)\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkvv3bmap.rs:11:30\n   |\n\
    11 |         |x, y| x.partial_cmp(y).unwrap_or(std::cmp::Ordering::Less))\n  \
    \ |                              ^ expected enum `std::cmp::Ordering`, found `isize`\n\
    \   |\n   = note: expected reference `&std::cmp::Ordering`\n              found\
    \ reference `&isize`\n\nerror[E0599]: no method named `unwrap_or` found for enum\
    \ `std::cmp::Ordering` in the current scope\n  --> /tmp/tmpkvv3bmap.rs:12:10\n\
    \   |\n12 |         .unwrap_or(std::cmp::Ordering::Equal)\n   |          ^^^^^^^^^\
    \ method not found in `std::cmp::Ordering`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut last_non_equal_i\
    \ = 0;\n    let mut max_i = -1;\n\n    for i in arr.iter() {\n        if *i >\
    \ *arr[last_non_equal_i] {\n            last_non_equal_i = i;\n            max_i\
    \ = i;\n        }\n    }\n    max_i\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp36pblqpz.rs:13:17\n\
    \   |\n13 |         if *i > *arr[last_non_equal_i] {\n   |                 ^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp36pblqpz.rs:14:32\n   |\n9  |\
    \     let mut last_non_equal_i = 0;\n   |                                - expected\
    \ due to this value\n...\n14 |             last_non_equal_i = i;\n   |       \
    \                         ^ expected `usize`, found `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp36pblqpz.rs:15:21\n   |\n10 |     let mut max_i\
    \ = -1;\n   |                     -- expected due to this value\n...\n15 |   \
    \          max_i = i;\n   |                     ^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n15 |             max_i =\
    \ *i;\n   |                     +\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut low = -1;\n  \
    \  let mut high = arr.len();\n    while low < high {\n        let mid = (low +\
    \ high) / 2;\n        if arr[mid] >= arr[mid+1] {\n            high = mid;\n \
    \       } else {\n            low = mid + 1;\n        }\n    }\n    high\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpj19y413x.rs:9:19\n\
    \  |\n9 |     let mut low = -1;\n  |                   ^^ the trait `Neg` is not\
    \ implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj19y413x.rs:19:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n19 | \
    \    high\n   |     ^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n19 |     high.try_into().unwrap()\n   |         ++++++++++++++++++++\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] <= arr[i-1] {\n\
    \            return -1;\n        }\n        max = i;\n        i += 1;\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp1wzjyyy6.rs:9:19\n\
    \  |\n9 |     let mut max = -1;\n  |                   ^^ the trait `Neg` is not\
    \ implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1wzjyyy6.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    max\n   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    18 |     max.try_into().unwrap()\n   |        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    debug_assert!(&arr.iter().zip(arr.iter().skip(1)).all(|(a,\
    \ b)| a <= b));\n    let mut max = 0;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x > max {\n            max = x;\n        }\n    }\n    -1\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: &arr.iter().zip(arr.iter().skip(1)).all(|(a,\
    \ b)| a <= b)', /tmp/tmpo4lfk49r.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut cur_max = -1;\n\
    \n    for i in arr.iter() {\n        if *i <= cur_max {\n            return -1;\n\
    \        }\n        cur_max = *i;\n    }\n\n    return cur_max;\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmptivqn0ch.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    match arr.len() {\n  \
    \      0 => return -1,\n        _ => return arr\n            .iter()\n       \
    \     .enumerate()\n            .find_map(|(i, e)| if e <= arr[i-1] { Some(i)\
    \ } else { None })\n            .unwrap_or_else(|| -1),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyqh54217.rs:14:40\n   |\n\
    14 |             .find_map(|(i, e)| if e <= arr[i-1] { Some(i) } else { None })\n\
    \   |                                        ^^^^^^^^\n   |                  \
    \                      |\n   |                                        expected\
    \ `&isize`, found `isize`\n   |                                        help: consider\
    \ borrowing here: `&arr[i-1]`\n\nerror[E0600]: cannot apply unary operator `-`\
    \ to type `usize`\n  --> /tmp/tmpyqh54217.rs:15:32\n   |\n15 |             .unwrap_or_else(||\
    \ -1),\n   |                                ^^\n   |                         \
    \       |\n   |                                cannot apply unary operator `-`\n\
    \   |                                help: you may have meant the maximum value\
    \ of `usize`: `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyqh54217.rs:11:21\n   |\n8  |\
    \   fn can_arrange(arr: Vec<isize>) -> isize {\n   |                         \
    \             ----- expected `isize` because of return type\n...\n11 |       \
    \    _ => return arr\n   |  _____________________^\n12 | |             .iter()\n\
    13 | |             .enumerate()\n14 | |             .find_map(|(i, e)| if e <=\
    \ arr[i-1] { Some(i) } else { None })\n15 | |             .unwrap_or_else(|| -1),\n\
    \   | |__________________________________^ expected `isize`, found `usize`\n \
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n15 |             .unwrap_or_else(|| -1).try_into().unwrap(),\n\
    \   |                                   ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0600.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n    let mut max = 0;\n    for i in 0..arr.len() {\n\
    \        if i != max && arr[i] <= arr[max] {\n            max = i;\n        }\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9u1pep7e.rs:18:5\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n18 |     max\n\
    \   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n18 |     max.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().cloned().enumerate().max_by_key(|(i,\
    \ elem)| {\n        if i < (arr.len() - 1) {\n            if elem > arr[i+1] {\n\
    \                elem\n            } else {\n                -1\n            }\n\
    \        } else {\n            -1\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps7mo1r1j.rs:10:16\n   |\n\
    10 |         if i < (arr.len() - 1) {\n   |                ^^^^^^^^^^^^^^^\n \
    \  |                |\n   |                expected `&usize`, found `usize`\n\
    \   |                help: consider borrowing here: `&((arr.len() - 1))`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps7mo1r1j.rs:11:23\n   |\n11 |             if\
    \ elem > arr[i+1] {\n   |                       ^^^^^^^^\n   |               \
    \        |\n   |                       expected `&isize`, found `isize`\n   |\
    \                       help: consider borrowing here: `&arr[i+1]`\n\nerror[E0308]:\
    \ `if` and `else` have incompatible types\n  --> /tmp/tmps7mo1r1j.rs:14:17\n \
    \  |\n11 | /             if elem > arr[i+1] {\n12 | |                 elem\n \
    \  | |                 ---- expected because of this\n13 | |             } else\
    \ {\n14 | |                 -1\n   | |                 ^^ expected `&isize`, found\
    \ integer\n15 | |             }\n   | |_____________- `if` and `else` have incompatible\
    \ types\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps7mo1r1j.rs:9:5\n   |\n\
    8  |   fn can_arrange(arr: Vec<isize>) -> isize {\n   |                      \
    \                ----- expected `isize` because of return type\n9  | /     arr.iter().cloned().enumerate().max_by_key(|(i,\
    \ elem)| {\n10 | |         if i < (arr.len() - 1) {\n11 | |             if elem\
    \ > arr[i+1] {\n12 | |                 elem\n...  |\n18 | |         }\n19 | |\
    \     })\n   | |______^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<(usize, isize)>`\n\n\
    error: aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut ans = 0;\n   \
    \ let mut curr = arr.iter().position(|x| x != arr.iter().last().unwrap()).unwrap();\n\
    \    for &x in arr {\n        if x > curr { ans = -1; break; }\n        ans =\
    \ x;\n        curr = x;\n    }\n    ans\n}\n\nfn main() {\n    let candidate =\
    \ can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcv04tpcb.rs:11:9\n   |\n\
    11 |     for &x in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0277]: the trait bound\
    \ `usize: Neg` is not satisfied\n  --> /tmp/tmpcv04tpcb.rs:12:29\n   |\n12 | \
    \        if x > curr { ans = -1; break; }\n   |                             ^^\
    \ the trait `Neg` is not implemented for `usize`\n   |\n   = help: the following\
    \ other types implement trait `Neg`:\n             &f32\n             &f64\n \
    \            &i128\n             &i16\n             &i32\n             &i64\n\
    \             &i8\n             &isize\n           and 8 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcv04tpcb.rs:16:5\n   |\n8  | fn can_arrange(arr:\
    \ Vec<isize>) -> isize {\n   |                                    ----- expected\
    \ `isize` because of return type\n...\n16 |     ans\n   |     ^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |     ans.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut low = 0;\n    for &item in &arr {\n        assert!(item < arr[low]);\n\
    \        if item > arr[largest] {\n            largest = low;\n        }\n   \
    \     low = low;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpwoabk13w.rs:9:23\n\
    \  |\n9 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwoabk13w.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut index = 0;\n \
    \   while index < arr.len() && arr[index] < arr[index-1] {\n        index +=1;\n\
    \    }\n    if index >= arr.len() || index < 0 {\n        return -1;\n    }\n\
    \    return index;\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphgpmsorz.rs:16:12\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n16 |     return\
    \ index;\n   |            ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     return index.try_into().unwrap();\n   |                \
    \ ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max: isize = arr.len();\n\
    \    let mut i = 0;\n    while i < max && arr[i] <= arr[i - 1] {\n        i +=\
    \ 1;\n    }\n    i -= 1;\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7b8ii0jl.rs:9:26\n  |\n9 |\
    \     let mut max: isize = arr.len();\n  |                  -----   ^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |                  |\n  |               \
    \   expected due to this\n  |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     let mut max: isize =\
    \ arr.len().try_into().unwrap();\n  |                                   ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7b8ii0jl.rs:11:22\n\
    \   |\n11 |     while i < max && arr[i] <= arr[i - 1] {\n   |                \
    \      ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n \
    \  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  \
    \ = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7b8ii0jl.rs:11:32\n\
    \   |\n11 |     while i < max && arr[i] <= arr[i - 1] {\n   |                \
    \                ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    let\
    \ mut j = arr.len();\n    while (i < j) && (arr[i] <= arr[j]) {\n        i +=\
    \ 1;\n        j -= 1;\n    }\n    if i == j {\n        return -1;\n    }\n   \
    \ if i == arr.len() {\n        return i;\n    }\n    return i;\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcuiw5ks_.rs:19:16\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n19 |        \
    \ return i;\n   |                ^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |         return i.try_into().unwrap();\n   |                \
    \ ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().rposition(|&x|\
    \ *x >= *arr.last().unwrap()).unwrap_or_else(|| -1)\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp16jdrgnn.rs:9:31\n\
    \  |\n9 |     arr.iter().rposition(|&x| *x >= *arr.last().unwrap()).unwrap_or_else(||\
    \ -1)\n  |                               ^^\n\nerror[E0600]: cannot apply unary\
    \ operator `-` to type `usize`\n --> /tmp/tmp16jdrgnn.rs:9:77\n  |\n9 |     arr.iter().rposition(|&x|\
    \ *x >= *arr.last().unwrap()).unwrap_or_else(|| -1)\n  |                     \
    \                                                        ^^\n  |             \
    \                                                                |\n  |      \
    \                                                                       cannot\
    \ apply unary operator `-`\n  |                                              \
    \                               help: you may have meant the maximum value of\
    \ `usize`: `usize::MAX`\n  |\n  = note: unsigned values cannot be negated\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmp16jdrgnn.rs:9:5\n  |\n8 | fn can_arrange(arr:\
    \ Vec<isize>) -> isize {\n  |                                    ----- expected\
    \ `isize` because of return type\n9 |     arr.iter().rposition(|&x| *x >= *arr.last().unwrap()).unwrap_or_else(||\
    \ -1)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n9 |     arr.iter().rposition(|&x|\
    \ *x >= *arr.last().unwrap()).unwrap_or_else(|| -1).try_into().unwrap()\n  | \
    \                                                                            \
    \   ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0600, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    let\
    \ mut max = std::i32::MAX;\n    for elt in arr.iter() {\n        if elt <= max\
    \ {\n            max = elt;\n            i += 1;\n        }\n    }\n    if max\
    \ >= arr.len() {\n        -1\n    } else {\n        i - 1\n    }\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkpq2bylu.rs:12:19\n   |\n\
    12 |         if elt <= max {\n   |                   ^^^ expected `&isize`, found\
    \ `i32`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkpq2bylu.rs:13:19\n \
    \  |\n10 |     let mut max = std::i32::MAX;\n   |                   -------------\
    \ expected due to this value\n...\n13 |             max = elt;\n   |         \
    \          ^^^ expected `i32`, found `&isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpkpq2bylu.rs:17:15\n   |\n17 |     if max >= arr.len() {\n   | \
    \              ^^^^^^^^^ expected `i32`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `i32` and panic if the converted value doesn't fit\n   |\n17\
    \ |     if max >= arr.len().try_into().unwrap() {\n   |                      \
    \  ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = 0;\n\
    \    let mut max_value = arr[0];\n    for (i, &value) in arr.iter().enumerate()\
    \ {\n        if value > max_value {\n            max_value = value;\n        \
    \    max_idx = i;\n        }\n    }\n    if max_idx == arr.len() {\n        return\
    \ -1;\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp56w7kbi.rs:20:5\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n20 |     max_idx\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    20 |     max_idx.try_into().unwrap()\n   |            ++++++++++++++++++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  for i in 1..arr.len() {\n        if arr[i] <= max {\n            return i;\n\
    \        }\n        if arr[i] > max {\n            max = arr[i];\n        }\n\
    \    }\n    -1\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdn12wo2v.rs:12:20\n   |\n\
    12 |             return i;\n   |                    ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n12 |             return i.try_into().unwrap();\n\
    \   |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.len() == 0 {\n\
    \        return -1;\n    }\n    let mut max_idx = -1;\n    let mut max_val = 0;\n\
    \    for &e in arr.iter() {\n        if e < max_val {\n            return -1;\n\
    \        }\n        max_val = e;\n        max_idx = arr.len() - 1;\n    }\n  \
    \  max_idx;\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpvwad_x9b.rs:12:23\n\
    \   |\n12 |     let mut max_idx = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpvwad_x9b.rs:8:36\n  |\n8 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n  |    -----------                     ^^^^^ expected `isize`, found `()`\n\
    \  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut l = 0;\n    let\
    \ mut r = arr.len();\n\n    while l < r {\n        let mut index = l;\n\n    \
    \    while index > 0 && arr[index - 1] > arr[index] {\n            index -= 1;\n\
    \        }\n\n        if index < r {\n            return index;\n        }\n\n\
    \        l += 1;\n        r -= 1;\n    }\n\n    -1\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp68jaakhy.rs:20:20\n   |\n\
    20 |             return index;\n   |                    ^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |             return index.try_into().unwrap();\n\
    \   |                         ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    for i in arr {\n        if i == arr.remove(i).unwrap() {\n            max_idx\
    \ = i - 1;\n            break;\n        }\n    }\n    max_idx\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqb14suc7.rs:11:28\n   |\n\
    11 |         if i == arr.remove(i).unwrap() {\n   |                          \
    \  ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n   |\n11 |         if\
    \ i == arr.remove(i.try_into().unwrap()).unwrap() {\n   |                    \
    \         ++++++++++++++++++++\n\nerror[E0599]: no method named `unwrap` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpqb14suc7.rs:11:31\n   |\n\
    11 |         if i == arr.remove(i).unwrap() {\n   |                          \
    \     ^^^^^^ method not found in `isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n   \
    \ for i in arr.iter() {\n        if i > max {\n            max = i;\n        }\n\
    \    }\n    if max > 0 {\n        return max;\n    }\n    return -1;\n}\n\nfn\
    \ main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjmhes5m8.rs:11:16\n   |\n\
    11 |         if i > max {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjmhes5m8.rs:12:19\n\
    \   |\n9  |     let mut max = 0;\n   |                   - expected due to this\
    \ value\n...\n12 |             max = i;\n   |                   ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \           max = *i;\n   |                   +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_val = std::cmp::min(*arr.iter().rev().skip(1).rev().last().unwrap(),\
    \ *arr.iter().last().unwrap());\n    for i in arr.iter().rev().skip(1).rev() {\n\
    \        if i > max_val {\n            max_val = i;\n        }\n    }\n    max_val\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjx4boj98.rs:11:16\n   |\n\
    11 |         if i > max_val {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found `isize`\n   |            \
    \    help: consider borrowing here: `&max_val`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjx4boj98.rs:12:23\n   |\n9  |     let mut max_val = std::cmp::min(*arr.iter().rev().skip(1).rev().last().unwrap(),\
    \ *arr.iter().last().unwrap());\n   |                       -------------------------------------------------------------------------------------------\
    \ expected due to this value\n...\n12 |             max_val = i;\n   |       \
    \                ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n12 |             max_val = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    debug_assert!(arr.len()\
    \ > 0);\n    let mut max_index = -1;\n    let mut current_index = 1;\n    while\
    \ current_index < arr.len() {\n        if arr[current_index] <= arr[max_index]\
    \ {\n            break;\n        }\n        max_index = current_index;\n     \
    \   current_index += 1;\n    }\n    return max_index;\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp9_7z064u.rs:10:25\n\
    \   |\n10 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9_7z064u.rs:19:12\n   |\n8  | fn can_arrange(arr: Vec<isize>) ->\
    \ isize {\n   |                                    ----- expected `isize` because\
    \ of return type\n...\n19 |     return max_index;\n   |            ^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n19 |     return max_index.try_into().unwrap();\n\
    \   |                     ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().enumerate().max().unwrap().1\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph6kzcqo7.rs:9:5\n  |\n8 |\
    \ fn can_arrange(arr: Vec<isize>) -> isize {\n  |                            \
    \        ----- expected `isize` because of return type\n9 |     arr.iter().enumerate().max().unwrap().1\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |     *arr.iter().enumerate().max().unwrap().1\n\
    \  |     +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    for i in arr.iter() {\n        if i > largest {\n            largest = i;\n\
    \        }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwfiolnrg.rs:11:16\n   |\n\
    11 |         if i > largest {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwfiolnrg.rs:12:23\n   |\n9  |     let mut largest = -1;\n   | \
    \                      -- expected due to this value\n...\n12 |             largest\
    \ = i;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n12 |             largest = *i;\n\
    \   |                       +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < max {\n    \
    \        return -1;\n        }\n        if arr[i] == max {\n            max =\
    \ i;\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyivm7bp0.rs:16:19\n   |\n\
    9  |     let mut max = -1;\n   |                   -- expected due to this value\n\
    ...\n16 |             max = i;\n   |                   ^ expected `isize`, found\
    \ `usize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().rev().skip(1).last().unwrap_or(-1)\
    \ as isize\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppcj6_4sp.rs:9:47\n  |\n9 |\
    \     arr.iter().rev().skip(1).last().unwrap_or(-1) as isize\n  |            \
    \                                   ^^\n  |                                  \
    \             |\n  |                                               expected `&isize`,\
    \ found integer\n  |                                               help: consider\
    \ borrowing here: `&-1`\n\nerror[E0606]: casting `&isize` as `isize` is invalid\n\
    \ --> /tmp/tmppcj6_4sp.rs:9:5\n  |\n9 |     arr.iter().rev().skip(1).last().unwrap_or(-1)\
    \ as isize\n  |     ---------------------------------------------^^^^^^^^^\n \
    \ |     |\n  |     cannot cast `&isize` as `isize`\n  |     help: dereference\
    \ the expression: `*arr.iter().rev().skip(1).last().unwrap_or(-1)`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0606.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut n = arr.len();\n\
    \    let mut max = 0;\n    let mut max_pre = 0;\n    let mut max2 = 0isize;\n\
    \    let mut max3 = 0isize;\n    while n > 0 {\n        if arr[n - 1] > arr[max_pre]\
    \ {\n            max = n;\n            max_pre = max_pre;\n            n = max\
    \ - 1;\n        } else {\n            n = n - 1;\n            max_pre = n;\n \
    \       }\n    }\n    match max {\n        0 => return -1,\n        1 => return\
    \ 0,\n        _ => return max_pre,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe_3ua0qg.rs:27:21\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n27 |        \
    \ _ => return max_pre,\n   |                     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n27 |         _ => return max_pre.try_into().unwrap(),\n\
    \   |                            ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n\n    let mut last = arr.first_unwrap();\n    let\
    \ mut smallest = arr.first_mut().unwrap();\n    for i in arr.iter_mut() {\n  \
    \      if i != last {\n            smallest = i;\n        }\n        last = i;\n\
    \    }\n\n    if smallest < last {\n        return -1;\n    }\n\n    arr.swap(last,\
    \ smallest);\n    smallest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `first_unwrap` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmp_h8svoum.rs:13:24\n   |\n13 |     let mut\
    \ last = arr.first_unwrap();\n   |                        ^^^^^^^^^^^^ method\
    \ not found in `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_h8svoum.rs:26:14\n\
    \   |\n26 |     arr.swap(last, smallest);\n   |              ^^^^ expected `usize`,\
    \ found `&mut isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_h8svoum.rs:26:20\n\
    \   |\n26 |     arr.swap(last, smallest);\n   |                    ^^^^^^^^ expected\
    \ `usize`, found `&mut isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_h8svoum.rs:27:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n27 | \
    \    smallest\n   |     ^^^^^^^^ expected `isize`, found `&mut isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n27 |     *smallest\n   |     +\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut arrangement: isize\
    \ = 0;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < arr[i-1]\
    \ {\n            break;\n        }\n        i += 1;\n        arrangement += 1;\n\
    \    }\n    if i == arr.len() {\n        return -1;\n    }\n    arrangement\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpuny3hraj.rs:12:25\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().enumerate().map(|(i,\
    \ x)| {\n        if x <= arr[i..] {\n            x\n        } else {\n       \
    \     i\n        }\n    }).max().unwrap_or(-1)\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5sl7zyyp.rs:10:17\n   |\n\
    10 |         if x <= arr[i..] {\n   |                 ^^^^^^^^ expected `&isize`,\
    \ found slice `[isize]`\n\nerror[E0308]: `if` and `else` have incompatible types\n\
    \  --> /tmp/tmp5sl7zyyp.rs:13:13\n   |\n10 | /         if x <= arr[i..] {\n11\
    \ | |             x\n   | |             - expected because of this\n12 | |   \
    \      } else {\n13 | |             i\n   | |             ^ expected `&isize`,\
    \ found `usize`\n14 | |         }\n   | |_________- `if` and `else` have incompatible\
    \ types\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_val = -1;\n\
    \    let mut cur = 0;\n    for &x in arr.iter() {\n        if x > max_val {\n\
    \            max_val = x;\n            cur = x\n        }\n    }\n    cur\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpn9uh2ioq.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n    let mut largest = arr.iter().max();\n    for i\
    \ in arr.iter().skip(1) {\n        if *i > largest {\n            largest = i;\n\
    \        }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoax0i9ym.rs:14:17\n   |\n\
    14 |         if *i > largest {\n   |                 ^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoax0i9ym.rs:15:23\n\
    \   |\n12 |     let mut largest = arr.iter().max();\n   |                    \
    \   ---------------- expected due to this value\n...\n15 |             largest\
    \ = i;\n   |                       ^ expected enum `Option`, found `&isize`\n\
    \   |\n   = note:   expected enum `Option<&isize>`\n           found reference\
    \ `&isize`\nhelp: try wrapping the expression in `Some`\n   |\n15 |          \
    \   largest = Some(i);\n   |                       +++++ +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpoax0i9ym.rs:18:5\n   |\n8  | fn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n   |                                    ----- expected `isize` because\
    \ of return type\n...\n18 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<&isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().enumerate().filter(|(&i,\
    \ &e)| e <= i).max().unwrap_or(-1)\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf7kuch49.rs:9:37\n  |\n9 |\
    \     arr.iter().enumerate().filter(|(&i, &e)| e <= i).max().unwrap_or(-1)\n \
    \ |                                     ^^    - expected due to this\n  |    \
    \                                 |\n  |                                     expected\
    \ `usize`, found reference\n  |                                     help: you\
    \ can probably remove the explicit borrow: `i`\n  |\n  = note:   expected type\
    \ `usize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpf7kuch49.rs:9:70\n  |\n9 |     arr.iter().enumerate().filter(|(&i,\
    \ &e)| e <= i).max().unwrap_or(-1)\n  |                                      \
    \                                ^^ expected tuple, found integer\n  |\n  = note:\
    \ expected tuple `(usize, &isize)`\n              found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpf7kuch49.rs:9:5\n  |\n8 | fn can_arrange(arr:\
    \ Vec<isize>) -> isize {\n  |                                    ----- expected\
    \ `isize` because of return type\n9 |     arr.iter().enumerate().filter(|(&i,\
    \ &e)| e <= i).max().unwrap_or(-1)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected type `isize`\n      \
    \      found tuple `(usize, &isize)`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().fold(0isize,\
    \ |max, &x| max if x < max { -1 } else { max })\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator,\
    \ found keyword `if`\n --> /tmp/tmpceo2k2og.rs:9:43\n  |\n9 |     arr.iter().fold(0isize,\
    \ |max, &x| max if x < max { -1 } else { max })\n  |                         \
    \                 -^^ expected one of 8 possible tokens\n  |                 \
    \                         |\n  |                                          help:\
    \ missing `,`\n\nerror[E0425]: cannot find value `x` in this scope\n --> /tmp/tmpceo2k2og.rs:9:46\n\
    \  |\n9 |     arr.iter().fold(0isize, |max, &x| max if x < max { -1 } else { max\
    \ })\n  |                                              ^ not found in this scope\n\
    \nerror[E0425]: cannot find value `max` in this scope\n --> /tmp/tmpceo2k2og.rs:9:50\n\
    \  |\n9 |     arr.iter().fold(0isize, |max, &x| max if x < max { -1 } else { max\
    \ })\n  |                                                  ^^^ not found in this\
    \ scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::cmp::max;\n\
    \  |\n\nerror[E0425]: cannot find value `max` in this scope\n --> /tmp/tmpceo2k2og.rs:9:68\n\
    \  |\n9 |     arr.iter().fold(0isize, |max, &x| max if x < max { -1 } else { max\
    \ })\n  |                                                                    ^^^\
    \ not found in this scope\n  |\nhelp: consider importing this function\n  |\n\
    1 | use std::cmp::max;\n  |\n\nerror[E0061]: this function takes 2 arguments but\
    \ 3 arguments were supplied\n    --> /tmp/tmpceo2k2og.rs:9:16\n     |\n9    |\
    \     arr.iter().fold(0isize, |max, &x| max if x < max { -1 } else { max })\n\
    \     |                ^^^^ ------  ------------- ------------------------------\
    \ supplied 3 arguments\n     |                |\n     |                expected\
    \ 2 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0425.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 1usize;\n\
    \    let mut max = -1;\n    while i < arr.len() {\n        if arr[i] <= max {\n\
    \            break;\n        }\n        max = i;\n        i += 1;\n    }\n   \
    \ max\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcijccuzv.rs:15:15\n   |\n\
    10 |     let mut max = -1;\n   |                   -- expected due to this value\n\
    ...\n15 |         max = i;\n   |               ^ expected `isize`, found `usize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n\n    let mut index = 0;\n\n    // Iterate from the\
    \ beginning of the vector to the second element and look\n    // for the largest\
    \ element that is larger than the element preceding it.\n    while index > 0 &&\
    \ arr[index] > arr[index - 1] {\n        index -= 1;\n    }\n\n    // If we reached\
    \ the start of the array without a matching element,\n    // then there isn't\
    \ a solution.\n    if index == 0 {\n        return -1;\n    }\n\n    // Otherwise,\
    \ the largest element will be at arr[index - 1].\n    arr[index - 1]\n}\n\nfn\
    \ main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpts1ff3vb.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    for i in 0..arr.len()\
    \ {\n        for j in i+1..arr.len() {\n            if arr[j] >= arr[i] {\n  \
    \              return -1;\n            }\n        }\n    }\n\n    arr.iter().max().unwrap_or(-1)\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4c80bjcd.rs:17:32\n   |\n\
    17 |     arr.iter().max().unwrap_or(-1)\n   |                                ^^\n\
    \   |                                |\n   |                                expected\
    \ `&isize`, found integer\n   |                                help: consider\
    \ borrowing here: `&-1`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4c80bjcd.rs:17:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    arr.iter().max().unwrap_or(-1)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    17 |     *arr.iter().max().unwrap_or(-1)\n   |     +\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 1;\n    let\
    \ mut maxi = -1;\n    while i < arr.len() {\n        if arr[i - 1] < arr[i] {\n\
    \            maxi = i;\n        }\n        i += 1;\n    }\n    maxi\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmppiki46on.rs:10:20\n\
    \   |\n10 |     let mut maxi = -1;\n   |                    ^^ the trait `Neg`\
    \ is not implemented for `usize`\n   |\n   = help: the following other types implement\
    \ trait `Neg`:\n             &f32\n             &f64\n             &i128\n   \
    \          &i16\n             &i32\n             &i64\n             &i8\n    \
    \         &isize\n           and 8 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppiki46on.rs:17:5\n   |\n8  | fn can_arrange(arr: Vec<isize>) ->\
    \ isize {\n   |                                    ----- expected `isize` because\
    \ of return type\n...\n17 |     maxi\n   |     ^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n17 |     maxi.try_into().unwrap()\n   |         ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    let mut largest_so_far = -1;\n    for i in arr.iter().rev() {\n        if\
    \ i == 0 {\n            largest_so_far = i;\n            largest = i;\n      \
    \  } else if largest == i {\n            if largest_so_far < i {\n           \
    \     largest_so_far = i;\n                largest = i;\n            }\n     \
    \   } else {\n            return -1;\n        }\n    }\n    largest\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpy9hkp_w5.rs:12:14\n\
    \   |\n12 |         if i == 0 {\n   |              ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy9hkp_w5.rs:13:30\n\
    \   |\n10 |     let mut largest_so_far = -1;\n   |                           \
    \   -- expected due to this value\n...\n13 |             largest_so_far = i;\n\
    \   |                              ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n13 |             largest_so_far\
    \ = *i;\n   |                              +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpy9hkp_w5.rs:14:23\n   |\n9  |     let mut largest = -1;\n   | \
    \                      -- expected due to this value\n...\n14 |             largest\
    \ = i;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |             largest = *i;\n\
    \   |                       +\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \  --> /tmp/tmpy9hkp_w5.rs:15:27\n   |\n15 |         } else if largest == i {\n\
    \   |                           ^^ no implementation for `isize == &isize`\n \
    \  |\n   = help: the trait `PartialEq<&isize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy9hkp_w5.rs:17:34\n\
    \   |\n10 |     let mut largest_so_far = -1;\n   |                           \
    \   -- expected due to this value\n...\n17 |                 largest_so_far =\
    \ i;\n   |                                  ^ expected `isize`, f"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    for\
    \ &i in arr {\n        if i > i {\n            return i;\n        }\n    }\n \
    \   return -1;\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzmwjoj9y.rs:10:9\n   |\n\
    10 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n    let mut last_val = arr[0];\n    let mut current_val\
    \ = 1;\n    for &x in arr.iter().skip(1) {\n        if x != last_val + 1 {\n \
    \           return -1;\n        }\n        last_val = current_val;\n        current_val\
    \ += 1;\n    }\n    last_val\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmphp0ptmz3.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n\n    let mut max_idx = arr.len();\n\n    for i in\
    \ 0..arr.len() - 1 {\n        if arr[i] <= arr[max_idx] {\n            max_idx\
    \ = i;\n        }\n    }\n\n    if max_idx > arr.len() - 1 {\n        return -1;\n\
    \    }\n\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmqkvoefi.rs:25:5\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n25 |     max_idx\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    25 |     max_idx.try_into().unwrap()\n   |            ++++++++++++++++++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    for i in arr {\n        if i > 0\n            && i < (largest + 1)\n    \
    \        && (largest == -1 || i > largest)\n        {\n            largest = i;\n\
    \        }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmp5tgp78fe.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n    arr.iter().fold(arr.iter().skip_while(|&x| x !=\
    \ arr.iter().nth(0)), |mut i, &x| {\n        i -= 1;\n        if x <= i {\n  \
    \          return i;\n        }\n        Ok(i)\n    })\n}\n\nfn main() {\n   \
    \ let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `Option<&isize>`\n  --> /tmp/tmphf3rlhu_.rs:12:50\n\
    \   |\n12 |     arr.iter().fold(arr.iter().skip_while(|&x| x != arr.iter().nth(0)),\
    \ |mut i, &x| {\n   |                                                  ^^ no implementation\
    \ for `&isize == Option<&isize>`\n   |\n   = help: the trait `PartialEq<Option<&isize>>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmphf3rlhu_.rs:12:21\n   |\n12 |     arr.iter().fold(arr.iter().skip_while(|&x|\
    \ x != arr.iter().nth(0)), |mut i, &x| {\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found struct `SkipWhile`\n   |\n   = note: expected type `isize`\n\
    \            found struct `SkipWhile<std::slice::Iter<'_, isize>, [closure@/tmp/tmphf3rlhu_.rs:12:43:\
    \ 12:70]>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphf3rlhu_.rs:17:9\n\
    \   |\n17 |         Ok(i)\n   |         ^^^^^ expected `isize`, found enum `Result`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Result<isize,\
    \ _>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut index = 0;\n \
    \   let mut max = 0;\n    while index < arr.len() {\n        if arr[index] > max\
    \ {\n            max = arr[index];\n        }\n        if arr[index] == max {\n\
    \            return index;\n        }\n        index += 1;\n    }\n    -1\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfa512qf0.rs:16:20\n   |\n\
    16 |             return index;\n   |                    ^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |             return index.try_into().unwrap();\n\
    \   |                         ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut l = 0;\n    let\
    \ mut r = arr.len() - 1;\n    while l < r {\n        if arr[l] > arr[r] {\n  \
    \          break;\n        }\n        l = l + 1;\n        r = r - 1;\n    }\n\
    \    match l {\n        0 => -1,\n        _ => r,\n    }\n}\n\nfn main() {\n \
    \   let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpetikenhx.rs:20:14\n\
    \   |\n18 | /     match l {\n19 | |         0 => -1,\n   | |              -- this\
    \ is found to be of type `isize`\n20 | |         _ => r,\n   | |             \
    \ ^ expected `isize`, found `usize`\n21 | |     }\n   | |_____- `match` arms have\
    \ incompatible types\n   |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n20 |         _ => r.try_into().unwrap(),\n\
    \   |               ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    use std::cmp::Ordering::Greater;\n\
    \    arr.sort_by(|a, b| a.partial_cmp(&b).unwrap().reverse().unwrap())\n     \
    \   .last()\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "warning: unused import: `std::cmp::Ordering::Greater`\n --> /tmp/tmpitlqsf48.rs:9:9\n\
    \  |\n9 |     use std::cmp::Ordering::Greater;\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |\n  = note: `#[warn(unused_imports)]` on by default\n\nerror[E0599]: no method\
    \ named `unwrap` found for enum `std::cmp::Ordering` in the current scope\n  -->\
    \ /tmp/tmpitlqsf48.rs:10:61\n   |\n10 |     arr.sort_by(|a, b| a.partial_cmp(&b).unwrap().reverse().unwrap())\n\
    \   |                                                             ^^^^^^ method\
    \ not found in `std::cmp::Ordering`\n\nerror[E0599]: `()` is not an iterator\n\
    \  --> /tmp/tmpitlqsf48.rs:11:10\n   |\n11 |         .last()\n   |          ^^^^\
    \ `()` is not an iterator\n   |\n   = note: the following trait bounds were not\
    \ satisfied:\n           `(): Iterator`\n           which is required by `&mut\
    \ (): Iterator`\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = -1;\n    let\
    \ mut max_elem = arr[0];\n    let mut has_larger = false;\n\n    for &e in &arr\
    \ {\n        if has_larger {\n            if e < max_elem {\n                return\
    \ -1;\n            }\n            i = -1;\n        }\n        if e > max_elem\
    \ {\n            max_elem = e;\n            has_larger = true;\n        }\n  \
    \  }\n\n    return i;\n}\n\nfn main() {\n    let candidate = can_arrange;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpz1bg0neb.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter().enumerate().max_by_key(|(_,\
    \ idx)| {\n        let prev = *idx - 1;\n        if prev >= 0 {\n            prev\n\
    \        } else {\n            arr.len() - 1\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpay4qkfap.rs:14:13\n\
    \   |\n11 | /         if prev >= 0 {\n12 | |             prev\n   | |        \
    \     ---- expected because of this\n13 | |         } else {\n14 | |         \
    \    arr.len() - 1\n   | |             ^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    15 | |         }\n   | |_________- `if` and `else` have incompatible types\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpay4qkfap.rs:9:5\n   |\n8  |   fn\
    \ can_arrange(arr: Vec<isize>) -> isize {\n   |                              \
    \        ----- expected `isize` because of return type\n9  | /     arr.iter().enumerate().max_by_key(|(_,\
    \ idx)| {\n10 | |         let prev = *idx - 1;\n11 | |         if prev >= 0 {\n\
    12 | |             prev\n...  |\n15 | |         }\n16 | |     })\n   | |______^\
    \ expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<(usize, &isize)>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max: usize = 0;\n\
    \    for &i in &arr {\n        if *i < max {\n            return -1;\n       \
    \ }\n        if *i > max {\n            max = *i;\n        }\n    }\n    arr.len()\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp7qi20w_4.rs:11:12\n\
    \   |\n11 |         if *i < max {\n   |            ^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmp7qi20w_4.rs:14:12\n   |\n14 |        \
    \ if *i > max {\n   |            ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmp7qi20w_4.rs:15:19\n   |\n15 |             max = *i;\n   |     \
    \              ^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7qi20w_4.rs:18:5\n\
    \   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    arr.len()\n   |     ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     arr.len().try_into().unwrap()\n   |              ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut res = -1;\n  \
    \  let mut cur_val = arr[0];\n    for &cur_val in arr.iter().skip(1) {\n     \
    \   if cur_val <= cur_val {\n            res = -1;\n            break;\n     \
    \   }\n    }\n    res\n}\n\nfn main() {\n    let candidate = can_arrange;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpipi64v46.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n\
    \    let mut max_i: isize = 1;\n    let mut min_i: isize = arr.len();\n\n    while\
    \ max_i < min_i {\n        if arr[max_i] > arr[min_i] {\n            max_i = max_i;\n\
    \        } else {\n            min_i = min_i;\n        }\n    }\n\n    match arr[max_i]\
    \ {\n        1 => -1,\n        _ => max_i\n    }\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx085rzzz.rs:11:28\n   |\n\
    11 |     let mut min_i: isize = arr.len();\n   |                    -----   ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |                    |\n   |           \
    \         expected due to this\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     let mut min_i:\
    \ isize = arr.len().try_into().unwrap();\n   |                               \
    \      ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpx085rzzz.rs:14:12\n   |\n14 |         if arr[max_i]\
    \ > arr[min_i] {\n   |            ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpx085rzzz.rs:14:25\n   |\n14 |         if arr[max_i]\
    \ > arr[min_i] {\n   |                         ^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpx085rzzz.rs:21:11\n   |\n21 |     match arr[max_i]\
    \ {\n   |           ^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut i = 0;\n    let\
    \ mut largest = -1;\n    for &i in arr.iter() {\n        if i > 0 {\n        \
    \    if i >= largest+1 {\n                largest = i;\n            }\n      \
    \  }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp63hea7ii.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut is_largest = true;\n    for i in arr.iter() {\n        if i > max_idx\
    \ {\n            max_idx = i;\n            \n        } else if i == max_idx {\n\
    \            is_largest = false;\n        }\n    }\n    if is_largest {\n    \
    \    return max_idx;\n    } else {\n        return -1;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbyvtlhd0.rs:12:16\n   |\n\
    12 |         if i > max_idx {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&max_idx`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbyvtlhd0.rs:13:23\n   |\n9  |     let mut max_idx = -1;\n   | \
    \                      -- expected due to this value\n...\n13 |             max_idx\
    \ = i;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n13 |             max_idx = *i;\n\
    \   |                       +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n\
    \  --> /tmp/tmpbyvtlhd0.rs:15:21\n   |\n15 |         } else if i == max_idx {\n\
    \   |                     ^^ no implementation for `&isize == {integer}`\n   |\n\
    \   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for i in arr.iter() {\n        let prev = &arr[i..i + 1];\n        max_index\
    \ = i;\n        if *prev >= *i {\n            return i;\n        }\n    }\n  \
    \  max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptlyv70sx.rs:11:28\n   |\n\
    11 |         let prev = &arr[i..i + 1];\n   |                            ^^^^^\n\
    \   |                            |\n   |                            expected `&isize`,\
    \ found `isize`\n   |                            help: consider borrowing here:\
    \ `&(i + 1)`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `std::ops::Range<&isize>`\n\
    \  --> /tmp/tmptlyv70sx.rs:11:21\n   |\n11 |         let prev = &arr[i..i + 1];\n\
    \   |                     ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `std::ops::Range<&isize>`\n   = help: the following other types implement\
    \ trait `SliceIndex<T>`:\n             <std::ops::Range<usize> as SliceIndex<[T]>>\n\
    \             <std::ops::Range<usize> as SliceIndex<str>>\n   = note: required\
    \ because of the requirements on the impl of `Index<std::ops::Range<&isize>>`\
    \ for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptlyv70sx.rs:12:21\n\
    \   |\n9  |     let mut max_index = -1;\n   |                         -- expected\
    \ due to this value\n...\n12 |         max_index = i;\n   |                  \
    \   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n12 |         max_index = *i;\n   |                     +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptlyv70sx.rs:14:20\n   |\n14 |             return\
    \ i;\n   |                    ^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n14 |             return *i;\n   | \
    \                   +\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter()\n        .enumerate()\n\
    \        .map(|(i, x)| if i <= x.checked_sub(1)\n            .unwrap_or(0) > 0\
    \ { i } else { None })\n        .max()\n        .unwrap_or(-1)\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmph3xsncz8.rs:11:28\n\
    \   |\n11 |         .map(|(i, x)| if i <= x.checked_sub(1)\n   |             \
    \               ^^\n12 |             .unwrap_or(0) > 0 { i } else { None })\n\
    \   |                           ^\n   |\n   = help: use `::<...>` instead of `<...>`\
    \ to specify lifetime, type, or const arguments\n   = help: or use `(...)` if\
    \ you meant to specify fn arguments\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    arr.iter()\n        .enumerate()\n\
    \        .max_by_key(|&(idx, value)| {\n            if idx == 0 {\n          \
    \      // First element\n                true\n            } else if value < arr[idx\
    \ - 1] {\n                // Found new largest\n                false\n      \
    \      } else {\n                // Found new smallest\n                true\n\
    \            }\n        })\n        .expect(\"Should not get here\")\n}\n\nfn\
    \ main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbyxbrf5p.rs:15:31\n   |\n\
    15 |             } else if value < arr[idx - 1] {\n   |                      \
    \         ^^^^^^^^^^^^\n   |                               |\n   |           \
    \                    expected `&isize`, found `isize`\n   |                  \
    \             help: consider borrowing here: `&arr[idx - 1]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbyxbrf5p.rs:9:5\n   |\n8  |   fn can_arrange(arr:\
    \ Vec<isize>) -> isize {\n   |                                      ----- expected\
    \ `isize` because of return type\n9  | /     arr.iter()\n10 | |         .enumerate()\n\
    11 | |         .max_by_key(|&(idx, value)| {\n12 | |             if idx == 0 {\n\
    ...  |\n22 | |         })\n23 | |         .expect(\"Should not get here\")\n \
    \  | |______________________________________^ expected `isize`, found tuple\n\
    \   |\n   = note: expected type `isize`\n             found tuple `(usize, &isize)`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n    let mut i = 0;\n    for &x in arr.iter().rev()\
    \ {\n        if x <= i {\n            return -1;\n        }\n        i += 1;\n\
    \    }\n    arr.len() - 1\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpww6hznc_.rs:19:5\n   |\n\
    8  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n19 |     arr.len()\
    \ - 1\n   |     ^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |     (arr.len() - 1).try_into().unwrap()\n   |     +        \
    \     +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut index = arr.iter().enumerate().find(|(_, elem)| elem > max).unwrap();\n\
    \    while index != Some(0) {\n        max = arr[index];\n        index.unwrap().1\
    \ += 1;\n        index = arr.iter().enumerate().find(|(_, elem)| elem > max).unwrap();\n\
    \    }\n    max + 1\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkf3e0_jl.rs:10:68\n   |\n\
    10 |     let mut index = arr.iter().enumerate().find(|(_, elem)| elem > max).unwrap();\n\
    \   |                                                                    ^^^ expected\
    \ `&&isize`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkf3e0_jl.rs:11:20\n\
    \   |\n11 |     while index != Some(0) {\n   |                    ^^^^^^^ expected\
    \ tuple, found enum `Option`\n   |\n   = note: expected tuple `(usize, &isize)`\n\
    \               found enum `Option<{integer}>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `(usize, &isize)`\n  --> /tmp/tmpkf3e0_jl.rs:12:15\n  \
    \ |\n12 |         max = arr[index];\n   |               ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `(usize, &isize)`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `(Bound<usize>, Bound<usize>)`\n   = note: required because\
    \ of the requirements on the impl of `Index<(usize, &isize)>` for `Vec<isize>`\n\
    \nerror[E0599]: no method named `unwrap` found for tuple `(usize, &isize)` in\
    \ the current scope\n  --> /tmp/tmpkf3e0_jl.rs:13:15\n   |\n13 |         index.unwrap().1\
    \ += 1;\n   |               ^^^^^^ method not found in `(usize, &isize)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkf3e0_jl.rs:14:64\n   |\n14 |         index\
    \ = arr.iter().enumerate().find(|(_, elem)| elem > max).unwrap();\n   |      \
    \                                                          ^^^ expected `&&isize`,\
    \ found integer\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.is_empty() {\n\
    \        return -1;\n    }\n\n    let mut cur_val = arr[0];\n    let mut max_val\
    \ = cur_val;\n    for i in arr.iter().skip(1) {\n        if *i > *cur_val {\n\
    \            cur_val = i;\n            max_val = i;\n        }\n    }\n    max_val\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmphwpyb5ml.rs:16:17\n\
    \   |\n16 |         if *i > *cur_val {\n   |                 ^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphwpyb5ml.rs:17:23\n   |\n13 |     let mut cur_val\
    \ = arr[0];\n   |                       ------ expected due to this value\n...\n\
    17 |             cur_val = i;\n   |                       ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |  \
    \           cur_val = *i;\n   |                       +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphwpyb5ml.rs:18:23\n   |\n14 |     let mut max_val = cur_val;\n\
    \   |                       ------- expected due to this value\n...\n18 |    \
    \         max_val = i;\n   |                       ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n18 |             max_val\
    \ = *i;\n   |                       +\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = 0;\n\
    \    let mut max_value = arr[0];\n    for &val in arr.iter() {\n        if val\
    \ > max_value {\n            max_value = val;\n            max_index = val - 1;\n\
    \        }\n    }\n    if arr.len() > 1 && max_value == arr[1] {\n        max_index\
    \ += 1;\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmptbhdz30r.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut highest = 0usize;\n\
    \    let mut lowest = std::cmp::max(isize::MIN, isize::MAX);\n\n    for &v in\
    \ arr.iter() {\n        if v < lowest {\n            lowest = v;\n        } else\
    \ if v > highest {\n            highest = v;\n        }\n    }\n\n    lowest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcoul1e2t.rs:15:23\n   |\n\
    15 |         } else if v > highest {\n   |                       ^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |         } else if v\
    \ > highest.try_into().unwrap() {\n   |                              ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcoul1e2t.rs:16:23\n   |\n9  |\
    \     let mut highest = 0usize;\n   |                       ------ expected due\
    \ to this value\n...\n16 |             highest = v;\n   |                    \
    \   ^ expected `usize`, found `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_val: isize\
    \ = 0;\n    for val in arr.iter() {\n        if *val > *max_val {\n          \
    \  max_val = val;\n        }\n    }\n    return max_val;\n}\n\nfn main() {\n \
    \   let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmptsfz4fx5.rs:11:19\n\
    \   |\n11 |         if *val > *max_val {\n   |                   ^^^^^^^^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmptsfz4fx5.rs:12:23\n   |\n9  |  \
    \   let mut max_val: isize = 0;\n   |                      ----- expected due\
    \ to this type\n...\n12 |             max_val = val;\n   |                   \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n12 |             max_val = *val;\n   |                   \
    \    +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    debug_assert!((&arr[0..1]\
    \ == &[1..1]));\n    debug_assert!((&arr[2..3] == &[2,2..2]));\n    debug_assert!((&arr[3..5]\
    \ == &[3,4,3..4]));\n    arr.iter().enumerate().max()\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `isize` with `std::ops::Range<{integer}>`\n\
    \ --> /tmp/tmp3ubda_e3.rs:9:31\n  |\n9 |     debug_assert!((&arr[0..1] == &[1..1]));\n\
    \  |                               ^^ no implementation for `isize == std::ops::Range<{integer}>`\n\
    \  |\n  = help: the trait `PartialEq<std::ops::Range<{integer}>>` is not implemented\
    \ for `isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n  = note: required because of the requirements on the impl of `PartialEq<[std::ops::Range<{integer}>;\
    \ 1]>` for `[isize]`\n  = note: 1 redundant requirement hidden\n  = note: required\
    \ because of the requirements on the impl of `PartialEq<&[std::ops::Range<{integer}>;\
    \ 1]>` for `&[isize]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3ubda_e3.rs:10:38\n\
    \   |\n10 |     debug_assert!((&arr[2..3] == &[2,2..2]));\n   |              \
    \                        ^^^^ expected integer, found struct `std::ops::Range`\n\
    \   |\n   = note: expected type `{integer}`\n            found struct `std::ops::Range<{integer}>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3ubda_e3.rs:11:40\n   |\n11 |\
    \     debug_assert!((&arr[3..5] == &[3,4,3..4]));\n   |                      \
    \                  ^^^^ expected integer, found struct `std::ops::Range`\n   |\n\
    \   = note: expected type `{integer}`\n            found struct `std::ops::Range<{integer}>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3ubda_e3.rs:12:5\n   |\n8  | fn\
    \ can_arrange(arr: Vec<isize>) -> isize {\n   |                              \
    \      ----- expected `isize` because of return type\n...\n12 |     arr.iter().enumerate().max()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<(usize,\
    \ &isize)>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E027"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    match arr.iter().max_by_key(|x|\
    \ x - arr[0]) {\n        None => -1,\n        Some(i) => i,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `isize` from `&&isize`\n --> /tmp/tmp_ncg17zl.rs:9:39\n\
    \  |\n9 |     match arr.iter().max_by_key(|x| x - arr[0]) {\n  |             \
    \                        - ^ ------ isize\n  |                               \
    \      |\n  |                                     &&isize\n  |\nhelp: `-` can\
    \ be used on `isize`, you can dereference `x`\n  |\n9 |     match arr.iter().max_by_key(|x|\
    \ *x - arr[0]) {\n  |                                     +\n\nerror[E0308]: `match`\
    \ arms have incompatible types\n  --> /tmp/tmp_ncg17zl.rs:11:20\n   |\n9  | /\
    \     match arr.iter().max_by_key(|x| x - arr[0]) {\n10 | |         None => -1,\n\
    \   | |                 -- this is found to be of type `isize`\n11 | |       \
    \  Some(i) => i,\n   | |                    ^ expected `isize`, found `&isize`\n\
    12 | |     }\n   | |_____- `match` arms have incompatible types\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |         Some(i) => *i,\n   |          \
    \          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max: isize = 0;\n\
    \    let mut index: usize = 0;\n    let mut last = arr[0];\n    for val in arr.iter().rev()\
    \ {\n        if val <= last {\n            max = max(max, index + 1);\n      \
    \  }\n        last = val;\n        index += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpytp1k_tj.rs:13:19\n   |\n\
    13 |         if val <= last {\n   |                   ^^^^\n   |             \
    \      |\n   |                   expected `&isize`, found `isize`\n   |      \
    \             help: consider borrowing here: `&last`\n\nerror[E0618]: expected\
    \ function, found `isize`\n  --> /tmp/tmpytp1k_tj.rs:14:19\n   |\n9  |     let\
    \ mut max: isize = 0;\n   |         ------- `max` has type `isize`\n...\n14 |\
    \             max = max(max, index + 1);\n   |                   ^^^----------------\n\
    \   |                   |\n   |                   call expression requires function\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpytp1k_tj.rs:16:16\n   |\n11 |\
    \     let mut last = arr[0];\n   |                    ------ expected due to this\
    \ value\n...\n16 |         last = val;\n   |                ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n16 |  \
    \       last = *val;\n   |                +\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0618.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    use std::cmp::Ordering;\n\
    \    arr.iter().fold(-1, |max, &el| match el {\n        i if i > max => i,\n \
    \       _ => max,\n    })\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpc2mxghbt.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    for i in 0..arr.len() {\n        if arr[i] > arr[max_idx] {\n           \
    \ max_idx = i;\n        }\n    }\n    if max_idx == -1 { return -1 }\n    return\
    \ max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp_fn75bcp.rs:9:23\n\
    \  |\n9 |     let mut max_idx = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmp_fn75bcp.rs:15:19\n   |\n15 |     if max_idx\
    \ == -1 { return -1 }\n   |                   ^^\n   |                   |\n \
    \  |                   cannot apply unary operator `-`\n   |                 \
    \  help: you may have meant the maximum value of `usize`: `usize::MAX`\n   |\n\
    \   = note: unsigned values cannot be negated\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_fn75bcp.rs:16:12\n   |\n8  | fn can_arrange(arr: Vec<isize>) ->\
    \ isize {\n   |                                    ----- expected `isize` because\
    \ of return type\n...\n16 |     return max_idx\n   |            ^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n16 |     return max_idx.try_into().unwrap()\n\
    \   |                   ++++++++++++++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0600.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut smallest = arr[0];\n\
    \    let mut largest = arr[0];\n\n    for i in 1..arr.len() {\n        if arr[i]\
    \ <= smallest {\n            smallest = i;\n        }\n        if arr[i] >= largest\
    \ {\n            largest = i;\n        }\n    }\n    largest\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp27nimek4.rs:14:24\n   |\n\
    9  |     let mut smallest = arr[0];\n   |                        ------ expected\
    \ due to this value\n...\n14 |             smallest = i;\n   |               \
    \         ^ expected `isize`, found `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp27nimek4.rs:17:23\n   |\n10 |     let mut largest = arr[0];\n \
    \  |                       ------ expected due to this value\n...\n17 |      \
    \       largest = i;\n   |                       ^ expected `isize`, found `usize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest = -1;\n\
    \    for &x in &arr {\n        if x > largest {\n            largest = x;\n  \
    \      }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpbd4ptuv_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
