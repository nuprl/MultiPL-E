name: HumanEval_12_longest
language: rust
results:
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_length = strings[0].len();\n    let mut best_string = strings[0];\n\
    \    for string in strings.iter() {\n        if string.len() > max_length {\n\
    \            max_length = string.len();\n            best_string = string;\n \
    \       }\n    }\n    Some(best_string)\n}\n\nfn main() {\n    let candidate =\
    \ longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9w3gmdc9.rs:17:27\n   |\n\
    13 |     let mut best_string = strings[0];\n   |                           ----------\
    \ expected due to this value\n...\n17 |             best_string = string;\n  \
    \ |                           ^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                           |\n   |                           expected struct\
    \ `String`, found `&String`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut maxlen = 0;\n    for s in strings {\n        maxlen = if s.len()\
    \ > maxlen { s.len() } else { maxlen };\n    }\n\n    for s in strings {\n   \
    \     if s.len() == maxlen {\n            return Some(s);\n        }\n    }\n\n\
    \    None\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `strings`\n   --> /tmp/tmp8e8ccxun.rs:18:14\n\
    \    |\n8   | fn longest(strings: Vec<String>) -> Option<String> {\n    |    \
    \        ------- move occurs because `strings` has type `Vec<String>`, which does\
    \ not implement the `Copy` trait\n...\n14  |     for s in strings {\n    |   \
    \           ------- `strings` moved due to this implicit call to `.into_iter()`\n\
    ...\n18  |     for s in strings {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `strings`\nhelp: consider iterating over a slice of the `Vec<String>`'s\
    \ content to avoid moving into the `for` loop\n    |\n14  |     for s in &strings\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut best = String::new();\n    let mut best_len\
    \ = String::new();\n    for s in strings {\n        let len = s.chars().count();\n\
    \        if len > best_len.len() {\n            best = s;\n            best_len\
    \ = len;\n        }\n    }\n    Some(best)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpri0pkzam.rs:15:24\n   |\n\
    10 |     let mut best_len = String::new();\n   |                        -------------\
    \ expected due to this value\n...\n15 |             best_len = len;\n   |    \
    \                    ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                        |\n   |                        expected struct `String`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .fold1(\n       \
    \     |max, &string| if string.len() > max.len() {\n                Some(string)\n\
    \            } else {\n                max\n            },\n        )\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `fold1` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpkb0phwaz.rs:11:10\n   |\n11 |         .fold1(\n\
    \   |          ^^^^^ method not found in `std::slice::Iter<'_, String>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut min_length = std::u16::MAX;\n    let mut longest\
    \ = None;\n    for s in strings.iter() {\n        let len = s.chars().count();\n\
    \        if len < min_length {\n            min_length = len;\n            longest\
    \ = Some(s);\n        }\n    }\n    longest\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk36hsq_p.rs:13:18\n   |\n\
    13 |         if len < min_length {\n   |                  ^^^^^^^^^^ expected\
    \ `usize`, found `u16`\n   |\nhelp: you can convert a `u16` to a `usize`\n   |\n\
    13 |         if len < min_length.into() {\n   |                            +++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk36hsq_p.rs:14:26\n   |\n9  |\
    \     let mut min_length = std::u16::MAX;\n   |                          -------------\
    \ expected due to this value\n...\n14 |             min_length = len;\n   |  \
    \                        ^^^ expected `u16`, found `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk36hsq_p.rs:18:5\n   |\n8  | fn longest(strings: Vec<String>)\
    \ -> Option<String> {\n   |                                     --------------\
    \ expected `Option<String>` because of return type\n...\n18 |     longest\n  \
    \ |     ^^^^^^^ expected struct `String`, found `&String`\n   |\n   = note: expected\
    \ enum `Option<String>`\n              found enum `Option<&String>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_length = 0;\n    let mut max_string = None;\n    for s in\
    \ strings {\n        if max_length < s.len() {\n            max_length = s.len();\n\
    \            max_string = s;\n        }\n    }\n    Some(max_string)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2uke5pzq.rs:17:26\n   |\n\
    13 |     let mut max_string = None;\n   |                          ---- expected\
    \ due to this value\n...\n17 |             max_string = s;\n   |             \
    \             ^ expected enum `Option`, found struct `String`\n   |\n   = note:\
    \ expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping\
    \ the expression in `Some`\n   |\n17 |             max_string = Some(s);\n   |\
    \                          +++++ +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2uke5pzq.rs:20:10\n\
    \   |\n20 |     Some(max_string)\n   |          ^^^^^^^^^^ expected struct `String`,\
    \ found enum `Option`\n   |\n   = note: expected struct `String`\n           \
    \     found enum `Option<_>`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest_len = std::i32::MAX;\n    let mut longest_idx: usize\
    \ = 0;\n    for (idx, s) in strings.into_iter().enumerate() {\n        if s.len()\
    \ > longest_len {\n            longest_len = s.len();\n            longest_idx\
    \ = idx;\n        }\n    }\n    if longest_len > 0 {\n        return Some(strings[longest_idx]);\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq86rt27v.rs:15:22\n   |\n\
    15 |         if s.len() > longest_len {\n   |                      ^^^^^^^^^^^\
    \ expected `usize`, found `i32`\n   |\nhelp: you can convert an `i32` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |         if s.len()\
    \ > longest_len.try_into().unwrap() {\n   |                                 ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpq86rt27v.rs:16:27\n   |\n12 |\
    \     let mut longest_len = std::i32::MAX;\n   |                           -------------\
    \ expected due to this value\n...\n16 |             longest_len = s.len();\n \
    \  |                           ^^^^^^^ expected `i32`, found `usize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .fold((None, 0),\
    \ |(ref mut acc, ref string), index| {\n            if index == strings.len()\
    \ {\n                Some(string.to_owned())\n            } else {\n         \
    \       if string.length() > acc.0 {\n                    (Some(string.to_owned()),\
    \ string.length())\n                } else {\n                    acc.0\n    \
    \            }\n            }\n        })\n        .1\n}\n\nfn main() {\n    let\
    \ candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&String` with `usize`\n  --> /tmp/tmps59g3y30.rs:12:22\n\
    \   |\n12 |             if index == strings.len() {\n   |                    \
    \  ^^ no implementation for `&String == usize`\n   |\n   = help: the trait `PartialEq<usize>`\
    \ is not implemented for `&String`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n   \
    \          <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps59g3y30.rs:13:17\n\
    \   |\n13 |                 Some(string.to_owned())\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected tuple, found enum `Option`\n   |\n   = note: expected tuple `(Option<_>,\
    \ {integer})`\n               found enum `Option<{integer}>`\n\nerror[E0599]:\
    \ no method named `length` found for reference `&{integer}` in the current scope\n\
    \  --> /tmp/tmps59g3y30.rs:15:27\n   |\n15 |                 if string.length()\
    \ > acc.0 {\n   |                           ^^^^^^ method not found in `&{integer}`\n\
    \nerror[E0609]: no field `0` on type `&mut Option<_>`\n  --> /tmp/tmps59g3y30.rs:15:42\n\
    \   |\n15 |                 if string.length() > acc.0 {\n   |               \
    \                           ^\n\nerror[E0599]: no method named `length` found\
    \ for reference `&{integer}` in the current scope\n  --> /tmp/tmps59g3y30.rs:16:54\n\
    \   |\n16 |                     (Some(string.to_owned()), string.length())\n \
    \  |                                                      ^^^^^^ method not found\
    \ in `&{integer}`\n\nerror[E0609]: no field `0` on type `&mut Option<{integer}>`\n\
    \  --> /tmp/tmps59g3y30.rs:18:25\n   |\n18 |                     acc.0\n   | \
    \                        ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps59g3y30.rs:9:5\n\
    \   |\n8  |   fn longest(strings: Vec<String>) -> Option<String>"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    // Sort in descending length order.\n    let mut strings = strings.iter().cloned().collect::<Vec<String>>();\n\
    \    strings.sort();\n\n    match strings.iter().position(|&s| {\n        strings.iter().any(|&s2|\
    \ s2.len() < s.len())\n    }) {\n        None => {\n            strings.remove(&strings.iter().first().unwrap());\n\
    \            None\n        }\n        Some(index) => {\n            strings.pop();\n\
    \            Some(strings[index])\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `first` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpf81ovu63.rs:21:44\n   |\n21 |          \
    \   strings.remove(&strings.iter().first().unwrap());\n   |                  \
    \                          ^^^^^ method not found in `std::slice::Iter<'_, String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest_len = String::new();\n    let mut longest_str = String::new();\n\
    \n    for s in strings {\n        match s.len() {\n            0 => continue,\n\
    \            len => {\n                if len > longest_len.len() {\n        \
    \            longest_len = len;\n                    longest_str = s;\n      \
    \          }\n            }\n        }\n    }\n    Some(longest_str)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwxjz4kq1.rs:20:35\n   |\n\
    12 |     let mut longest_len = String::new();\n   |                          \
    \ ------------- expected due to this value\n...\n20 |                     longest_len\
    \ = len;\n   |                                   ^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                   |\n   |     \
    \                              expected struct `String`, found `usize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut current_length: usize = 0;\n    let mut max_length: usize = 0;\n\
    \    let mut longest_string: String = \"\";\n    for str in strings {\n      \
    \  let len = str.len();\n        if len > current_length {\n            current_length\
    \ = len;\n        }\n        if len > max_length {\n            max_length = len;\n\
    \            longest_string = str;\n        }\n    }\n    if longest_string.len()\
    \ == max_length {\n        return Some(longest_string);\n    }\n    None\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5tfirszp.rs:14:38\n   |\n\
    14 |     let mut longest_string: String = \"\";\n   |                        \
    \     ------   ^^- help: try using a conversion method: `.to_string()`\n   | \
    \                            |        |\n   |                             |  \
    \      expected struct `String`, found `&str`\n   |                          \
    \   expected due to this\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut current_length: u32 = 0;\n    let mut current_string = None;\n\
    \    for s in strings {\n        if current_length != s.len() {\n            current_length\
    \ = s.len();\n            current_string = Some(s);\n        }\n    }\n    Some(current_string)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp90mxia9b.rs:15:30\n   |\n\
    15 |         if current_length != s.len() {\n   |                            \
    \  ^^^^^^^ expected `u32`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to a `u32` and panic if the converted value doesn't fit\n   |\n15 |        \
    \ if current_length != s.len().try_into().unwrap() {\n   |                   \
    \                  ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp90mxia9b.rs:16:30\n   |\n12 |     let mut current_length: u32 = 0;\n\
    \   |                             --- expected due to this type\n...\n16 |   \
    \          current_length = s.len();\n   |                              ^^^^^^^\
    \ expected `u32`, found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp90mxia9b.rs:20:10\n\
    \   |\n20 |     Some(current_string)\n   |          ^^^^^^^^^^^^^^ expected struct\
    \ `String`, found enum `Option`\n   |\n   = note: expected struct `String`\n \
    \               found enum `Option<String>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut shortest = strings.iter().map(|s| s.len()).min().unwrap();\n\
    \    strings.iter().find(|s| s.len() == shortest).map(|s| s.to_string()).or_else(||\
    \ {\n        strings.iter().filter(|s| s.len() == shortest).map(|s| s.to_string()).first()\n\
    \    })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `first` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmp40z0yhty.rs:11:79\n   |\n11 |         strings.iter().filter(|s|\
    \ s.len() == shortest).map(|s| s.to_string()).first()\n   |                  \
    \                                                             ^^^^^ method not\
    \ found in `Map<Filter<std::slice::Iter<'_, String>, [closure@/tmp/tmp40z0yhty.rs:11:31:\
    \ 11:54]>, [closure@/tmp/tmp40z0yhty.rs:11:60: 11:77]>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_length = 0;\n    let mut longest = strings[0];\n    for s\
    \ in strings.iter() {\n        let length = s.len();\n        if length > max_length\
    \ {\n            max_length = length;\n            longest = s;\n        }\n \
    \   }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplmmjyb3i.rs:18:23\n   |\n\
    13 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n18 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut maxlen = String::new();\n    let mut maxlens\
    \ = Vec::new();\n    let mut s = String::new();\n    for string in strings {\n\
    \        let len = string.len();\n        if len > maxlen.len() {\n          \
    \  maxlen = string;\n            maxlens.push(len);\n        }\n    }\n    if\
    \ maxlen.len() != 0 {\n        if maxlens.len() > 1 {\n            return Some(maxlen);\n\
    \        }\n        s = maxlen;\n    }\n    None\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(\"x\")`', /tmp/tmpxhwb5zwd.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    assert!(strings.is_empty(), \"The input list shouldn't\
    \ be empty\");\n\n    let mut max = String::new();\n    let mut max_index = -1;\n\
    \    for (index, s) in strings.iter().enumerate() {\n        match s.len() {\n\
    \            1 => max = Some(s),\n            x if x > max_index => max = Some(s),\n\
    \            x => (),\n        }\n        max_index = index;\n    }\n\n    Some(max)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa1tn0b6b.rs:15:24\n   |\n\
    11 |     let mut max = String::new();\n   |                   ------------- expected\
    \ due to this value\n...\n15 |             1 => max = Some(s),\n   |         \
    \               ^^^^^^^ expected struct `String`, found enum `Option`\n   |\n\
    \   = note: expected struct `String`\n                found enum `Option<&String>`\n\
    \nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpa1tn0b6b.rs:12:25\n\
    \   |\n12 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpa1tn0b6b.rs:16:41\n   |\n11 |     let mut max = String::new();\n\
    \   |                   ------------- expected due to this value\n...\n16 |  \
    \           x if x > max_index => max = Some(s),\n   |                       \
    \                  ^^^^^^^ expected struct `String`, found enum `Option`\n   |\n\
    \   = note: expected struct `String`\n                found enum `Option<&String>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    assert!(strings.len() > 0, \"Cannot find the longest\
    \ string from an empty list\");\n    let mut max_length = 0;\n    for &s in strings\
    \ {\n        max_length = std::cmp::max(max_length, s.len());\n    }\n    let\
    \ mut longest_string = strings[0];\n    for &s in strings {\n        if s.len()\
    \ > max_length {\n            longest_string = s;\n        }\n    }\n    Some(longest_string)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_v_5k0l5.rs:11:9\n   |\n\
    11 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp_v_5k0l5.rs:15:9\n   |\n15 |   \
    \  for &s in strings {\n   |         ^^    ------- this expression has type `Option<String>`\n\
    \   |         |\n   |         expected struct `String`, found reference\n   |\
    \         help: you can probably remove the explicit borrow: `s`\n   |\n   = note:\
    \ expected struct `String`\n           found reference `&_`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut current_longest = String::with_capacity(strings[0].len());\n\
    \    for s in strings {\n        if s.len() > current_longest.len() {\n      \
    \      current_longest.clear();\n        }\n        if current_longest.len() <\
    \ s.len() {\n            current_longest.extend(s);\n        }\n    }\n    if\
    \ current_longest.len() == 0 {\n        None\n    } else {\n        Some(current_longest)\n\
    \    }\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: `String` is not an iterator\n   --> /tmp/tmpif787hz2.rs:15:36\n\
    \    |\n15  |             current_longest.extend(s);\n    |                  \
    \           ------ ^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n\
    \    |                             |\n    |                             required\
    \ by a bound introduced by this call\n    |\n    = help: the trait `Iterator`\
    \ is not implemented for `String`\n    = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `String`\nnote: required by a bound in `extend`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for string in strings.iter().rev()\
    \ {\n        if string.length > longest.length {\n            longest = string;\n\
    \        }\n    }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `length` on type `&String`\n  --> /tmp/tmppoquqwwb.rs:14:19\n\
    \   |\n14 |         if string.length > longest.length {\n   |                \
    \   ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n\
    \  --> /tmp/tmppoquqwwb.rs:14:36\n   |\n14 |         if string.length > longest.length\
    \ {\n   |                                    ^^^^^^ unknown field\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppoquqwwb.rs:15:23\n   |\n12 |     let mut longest\
    \ = strings[0];\n   |                       ---------- expected due to this value\n\
    ...\n15 |             longest = string;\n   |                       ^^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                       |\n\
    \   |                       expected struct `String`, found `&String`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0609.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .take_while(|s| s.chars().count()\
    \ >= strings.len())\n        .max_by_key(|s| s.chars().count())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqr7xbxk_.rs:9:5\n   |\n8\
    \  |   fn longest(strings: Vec<String>) -> Option<String> {\n   |            \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n9  | /     strings\n10 | |         .iter()\n11 | |         .take_while(|s|\
    \ s.chars().count() >= strings.len())\n12 | |         .max_by_key(|s| s.chars().count())\n\
    \   | |__________________________________________^ expected struct `String`, found\
    \ `&String`\n   |\n   = note: expected enum `Option<String>`\n              found\
    \ enum `Option<&String>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut string = strings.clone();\n    if strings.is_empty()\
    \ {\n        return None;\n    }\n    let mut longest_len = strings[0].len();\n\
    \    for str in strings.iter() {\n        if str.len() > longest_len {\n     \
    \       longest_len = str.len();\n        }\n    }\n    Some(\n        strings.iter().find(|s|\
    \ s.len() == longest_len).cloned().unwrap(),\n    )\n}\n\nfn main() {\n    let\
    \ candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .into_iter()\n        .filter_map(|s|\
    \ s.chars().count())\n        .max()\n        .cloned()\n}\n\nfn main() {\n  \
    \  let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn6004ha9.rs:11:25\n   |\n\
    8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<_>` because of return\
    \ type\n...\n11 |         .filter_map(|s| s.chars().count())\n   |           \
    \              ^^^^^^^^^^^^^^^^^ expected enum `Option`, found `usize`\n   |\n\
    \   = note: expected enum `Option<_>`\n              found type `usize`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n11 |         .filter_map(|s| Some(s.chars().count()))\n\
    \   |                         +++++                 +\n\nerror[E0034]: multiple\
    \ applicable items in scope\n  --> /tmp/tmpn6004ha9.rs:13:10\n   |\n13 |     \
    \    .cloned()\n   |          ^^^^^^ multiple `cloned` found\n   |\n   = note:\
    \ candidate #1 is defined in an impl for the type `Option<&T>`\n   = note: candidate\
    \ #2 is defined in an impl for the type `Option<&mut T>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0034, E0308.\n\
    For more information about an error, try `rustc --explain E0034`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = String::new();\n    for s in strings\
    \ {\n        if max_len.len() < s.len() {\n            max_len = s;\n        }\n\
    \    }\n    if max_len.len() == 0 {\n        None\n    } else {\n        Some(max_len)\n\
    \    }\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut len = String::new();\n    let mut best_len = String::new();\n\
    \n    for s in strings {\n        s.len().unwrap().unwrap().to_ascii_lowercase().unwrap().encode(&mut\
    \ len).unwrap();\n        if len < best_len {\n            best_len = len;\n \
    \           best_len = s.clone();\n        }\n    }\n\n    Some(best_len)\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `unwrap` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmpzsnyqq00.rs:17:17\n   |\n17 |         s.len().unwrap().unwrap().to_ascii_lowercase().unwrap().encode(&mut\
    \ len).unwrap();\n   |                 ^^^^^^ method not found in `usize`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .into_iter()\n        .max_by_key(|s|\
    \ s.len())\n        .cloned()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<String>` is not an iterator\n   --> /tmp/tmpgz19k224.rs:12:10\n\
    \    |\n12  |           .cloned()\n    |            ^^^^^^ `Option<String>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<String>: Iterator`\n            which is required by `&mut\
    \ Option<String>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .ok_or_else(|| Error::new(ErrorKind::EmptyInput))\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `ErrorKind`\n \
    \ --> /tmp/tmp05l8qo0r.rs:14:35\n   |\n14 |         .ok_or_else(|| Error::new(ErrorKind::EmptyInput))\n\
    \   |                                   ^^^^^^^^^ use of undeclared type `ErrorKind`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Error`\n  --> /tmp/tmp05l8qo0r.rs:14:24\n\
    \   |\n14 |         .ok_or_else(|| Error::new(ErrorKind::EmptyInput))\n   |  \
    \                      ^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ one of these items\n   |\n1  | use std::error::Error;\n   |\n1  | use std::fmt::Error;\n\
    \   |\n1  | use std::io::Error;\n   |\n\nerror[E0599]: `Option<usize>` is not\
    \ an iterator\n   --> /tmp/tmp05l8qo0r.rs:13:10\n    |\n13  |           .cloned()\n\
    \    |            ^^^^^^ `Option<usize>` is not an iterator\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `Option<usize>:\
    \ Iterator`\n            which is required by `&mut Option<usize>: Iterator`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = String::new();\n    let mut max_len_index\
    \ = 0;\n    for (i, s) in strings.iter().enumerate() {\n        let len = s.len();\n\
    \        if len > max_len {\n            max_len = len;\n            max_len_index\
    \ = i;\n        }\n    }\n    if max_len_index >= strings.len() {\n        return\
    \ None;\n    }\n    Some(strings[max_len_index])\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpok7i9hmg.rs:13:18\n   |\n\
    13 |         if len > max_len {\n   |                  ^^^^^^^ expected `usize`,\
    \ found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpok7i9hmg.rs:14:23\n\
    \   |\n9  |     let mut max_len = String::new();\n   |                       -------------\
    \ expected due to this value\n...\n14 |             max_len = len;\n   |     \
    \                  ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                       |\n   |                       expected struct `String`,\
    \ found `usize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max().cloned()\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmprqybi5f1.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .into_iter()\n        .map(|s| s.to_ascii_lowercase())\n\
    \        .max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpkxkn5nc5.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .cloned()\n     \
    \   .max_by(|a, b| a.len().cmp(b.len()))\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyntgro91.rs:12:36\n   |\n\
    12 |         .max_by(|a, b| a.len().cmp(b.len()))\n   |                      \
    \              ^^^^^^^\n   |                                    |\n   |      \
    \                              expected `&usize`, found `usize`\n   |        \
    \                            help: consider borrowing here: `&b.len()`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |longest, s| {\n        if\
    \ let Some(len) = longest.as_ref().len() {\n            if len < s.len() {\n \
    \               longest = Some(s);\n            }\n        }\n        longest\n\
    \    })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpl1rlilpo.rs:10:45\n   |\n10 |         if let Some(len)\
    \ = longest.as_ref().len() {\n   |                                           \
    \  ^^^ method not found in `Option<&String>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl1rlilpo.rs:12:32\n   |\n12 |                 longest = Some(s);\n\
    \   |                                ^- help: try using a conversion method: `.to_string()`\n\
    \   |                                |\n   |                                expected\
    \ struct `String`, found `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut maxlen = std::i32::MAX;\n    let mut maxidx\
    \ = 0;\n    for &s in strings {\n        if s.len() > maxlen {\n            maxlen\
    \ = s.len();\n            maxidx = strings.iter().position(|&x| x.len() == maxlen).unwrap();\n\
    \        }\n    }\n    if maxidx < strings.len() {\n        Some(strings[maxidx])\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp22oejk08.rs:11:9\n   |\n\
    11 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp22oejk08.rs:14:62\n   |\n14 |  \
    \           maxidx = strings.iter().position(|&x| x.len() == maxlen).unwrap();\n\
    \   |                                                              ^^^^^^ expected\
    \ `usize`, found `i32`\n   |\nhelp: you can convert an `i32` to a `usize` and\
    \ panic if the converted value doesn't fit\n   |\n14 |             maxidx = strings.iter().position(|&x|\
    \ x.len() == maxlen.try_into().unwrap()).unwrap();\n   |                     \
    \                                               ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut string = match strings.len() {\n        0 =>\
    \ None,\n        _ => strings.iter().max().unwrap(),\n    };\n    for s in strings.iter()\
    \ {\n        if *string.len() < s.len() {\n            string = s;\n        }\n\
    \    }\n    string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp01gfgoin.rs:11:14\n\
    \   |\n9  |       let mut string = match strings.len() {\n   |  ______________________-\n\
    10 | |         0 => None,\n   | |              ---- this is found to be of type\
    \ `Option<_>`\n11 | |         _ => strings.iter().max().unwrap(),\n   | |    \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `&String`\n\
    12 | |     };\n   | |_____- `match` arms have incompatible types\n   |\n   = note:\
    \   expected enum `Option<_>`\n           found reference `&String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    strings.iter()\n        .cloned()\n        .map(|string| string.chars().count())\n\
    \        .max()\n        .cloned()\n        .map(|length| strings.iter().max().take(length))\n\
    \        .unwrap_or(strings.iter().max())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpxi5jfsw_.rs:16:10\n\
    \    |\n16  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror[E0061]: this function takes 0 arguments but\
    \ 1 argument was supplied\n    --> /tmp/tmpxi5jfsw_.rs:17:44\n     |\n17   | \
    \        .map(|length| strings.iter().max().take(length))\n     |            \
    \                                ^^^^ ------ supplied 1 argument\n     |     \
    \                                       |\n     |                            \
    \                expected 0 arguments\n     |\nnote: associated function defined\
    \ here\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut length: i32 = -1;\n    let mut max_length: usize = 0;\n   \
    \ for s in strings {\n        if length == -1 {\n            length = s.len();\n\
    \        } else {\n            if length != s.len() {\n                length\
    \ = -1;\n            } else {\n                if length > max_length {\n    \
    \                max_length = length;\n                }\n            }\n    \
    \    }\n    }\n    if length != -1 {\n        Some(strings[max_length as usize])\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi5w9c0up.rs:17:22\n   |\n\
    13 |     let mut length: i32 = -1;\n   |                     --- expected due\
    \ to this type\n...\n17 |             length = s.len();\n   |                \
    \      ^^^^^^^ expected `i32`, found `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpi5w9c0up.rs:19:26\n   |\n19 |             if length != s.len()\
    \ {\n   |                          ^^^^^^^ expected `i32`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `i32` and panic if the converted value doesn't\
    \ fit\n   |\n19 |             if length != s.len().try_into().unwrap() {\n   |\
    \                                 ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpi5w9c0up.rs:22:29\n   |\n22 |                 if length\
    \ > max_length {\n   |                             ^^^^^^^^^^ expected `i32`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `i32` and panic if\
    \ the converted value doesn't fit\n   |\n22 |                 if length > max_length.try_into().unwrap()\
    \ {\n   |                                       ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpi5w9c0up.rs:23:34\n   |\n14 |     let mut max_length:\
    \ usize = 0;\n   |                         ----- expected due to this type\n...\n\
    23 |                     max_length = length;\n   |                          \
    \        ^^^^^^ expected `usize`, found `i32`\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    strings.iter().max_by_key(|s| s.len()).unwrap()\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5gtx8nyo.rs:12:5\n   |\n\
    8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n12 |     strings.iter().max_by_key(|s| s.len()).unwrap()\n   |  \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `&String`\n   |\n   = note:   expected enum `Option<String>`\n           found\
    \ reference `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut best_len = String::new();\n    let mut best_str\
    \ = String::new();\n    for (i, s) in strings.into_iter().enumerate() {\n    \
    \    if i == 0 {\n            best_len = s.len();\n            best_str = s;\n\
    \        } else if s.len() > best_len {\n            best_len = s.len();\n   \
    \         best_str = s;\n        }\n    }\n    Some(best_str)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphztjr__p.rs:13:24\n   |\n\
    9  |     let mut best_len = String::new();\n   |                        -------------\
    \ expected due to this value\n...\n13 |             best_len = s.len();\n   |\
    \                        ^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                        |\n   |                        expected struct `String`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphztjr__p.rs:15:29\n\
    \   |\n15 |         } else if s.len() > best_len {\n   |                     \
    \        ^^^^^^^^ expected `usize`, found struct `String`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphztjr__p.rs:16:24\n   |\n9  |     let mut best_len = String::new();\n\
    \   |                        ------------- expected due to this value\n...\n16\
    \ |             best_len = s.len();\n   |                        ^^^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        |\n\
    \   |                        expected struct `String`, found `usize`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().map(|s| s.len()).max().map(|s| strings.iter().find(|e|\
    \ e == s).cloned()).cloned()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&&String` with `usize`\n --> /tmp/tmpvc2xmqys.rs:9:77\n\
    \  |\n9 |     strings.iter().map(|s| s.len()).max().map(|s| strings.iter().find(|e|\
    \ e == s).cloned()).cloned()\n  |                                            \
    \                                 ^^ no implementation for `&&String == usize`\n\
    \  |\n  = help: the trait `PartialEq<usize>` is not implemented for `&&String`\n\
    \  = help: the following other types implement trait `PartialEq<Rhs>`:\n     \
    \       <&'a str as PartialEq<OsString>>\n            <&'a str as PartialEq<String>>\n\
    \            <&'b str as PartialEq<Cow<'a, str>>>\n            <String as PartialEq<&'a\
    \ str>>\n            <String as PartialEq<Cow<'a, str>>>\n            <String\
    \ as PartialEq<str>>\n            <String as PartialEq>\n            <str as PartialEq<Cow<'a,\
    \ str>>>\n          and 4 others\n\nerror[E0599]: `Option<Option<String>>` is\
    \ not an iterator\n   --> /tmp/tmpvc2xmqys.rs:9:93\n    |\n9   |       strings.iter().map(|s|\
    \ s.len()).max().map(|s| strings.iter().find(|e| e == s).cloned()).cloned()\n\
    \    |                                                                       \
    \                        ^^^^^^ `Option<Option<String>>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<Option<String>>: Iterator`\n            which is required by `&mut\
    \ Option<Option<String>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    // Return None if the list is empty\n    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    // Sort the list by length\n    let mut\
    \ strings_sorted = strings.iter().cloned().sort_by_key(|s| s.len());\n\n    //\
    \ Return the longest one\n    match strings_sorted.first() {\n        Some(ref\
    \ string) => Some(string),\n        None => None,\n    }\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `Cloned` in\
    \ the current scope\n  --> /tmp/tmpckiwp85b.rs:15:54\n   |\n15 |     let mut strings_sorted\
    \ = strings.iter().cloned().sort_by_key(|s| s.len());\n   |                  \
    \                                    ^^^^^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ String>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckiwp85b.rs:19:34\n\
    \   |\n19 |         Some(ref string) => Some(string),\n   |                  \
    \                ^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                                  |\n   |                               \
    \   expected struct `String`, found reference\n   |\n   = note: expected struct\
    \ `String`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut sorted_strings = strings.iter().cloned().sort();\n    let mut\
    \ max_length = sorted_strings.last().len();\n    let mut i = 0;\n    loop {\n\
    \        i += 1;\n        let index = sorted_strings.iter().position(|&s| s.len()\
    \ == max_length + i).unwrap();\n        max_length = sorted_strings[index % sorted_strings.len()].len();\n\
    \        if index == sorted_strings.len() {\n            break;\n        }\n \
    \   }\n    sorted_strings[index % sorted_strings.len()]\n}\n\nfn main() {\n  \
    \  let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `index` in this scope\n  --> /tmp/tmpv2714il8.rs:24:20\n\
    \   |\n24 |     sorted_strings[index % sorted_strings.len()]\n   |           \
    \         ^^^^^ not found in this scope\n\nerror[E0599]: no method named `sort`\
    \ found for struct `Cloned` in the current scope\n  --> /tmp/tmpv2714il8.rs:13:54\n\
    \   |\n13 |     let mut sorted_strings = strings.iter().cloned().sort();\n   |\
    \                                                      ^^^^ method not found in\
    \ `Cloned<std::slice::Iter<'_, String>>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .into_iter()\n        .map(|s| s.chars().count())\n\
    \        .max()\n        .map(|c| c.to_string())\n        .cloned()\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<String>` is not an iterator\n   --> /tmp/tmpp5zy8yps.rs:14:10\n\
    \    |\n14  |           .cloned()\n    |            ^^^^^^ `Option<String>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<String>: Iterator`\n            which is required by `&mut\
    \ Option<String>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        None\n    } else {\n\
    \        let max_len = strings.iter().map(|s| s.len()).max();\n        strings\n\
    \            .iter()\n            .filter_map(|s| if s.len() == max_len { Some(s)\
    \ } else { None })\n            .next()\n    }\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmgj4q0yp.rs:15:43\n   |\n\
    15 |             .filter_map(|s| if s.len() == max_len { Some(s) } else { None\
    \ })\n   |                                           ^^^^^^^ expected `usize`,\
    \ found enum `Option`\n   |\n   = note: expected type `usize`\n              found\
    \ enum `Option<usize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmgj4q0yp.rs:13:9\n\
    \   |\n8  |   fn longest(strings: Vec<String>) -> Option<String> {\n   |     \
    \                                  -------------- expected `Option<String>` because\
    \ of return type\n...\n13 | /         strings\n14 | |             .iter()\n15\
    \ | |             .filter_map(|s| if s.len() == max_len { Some(s) } else { None\
    \ })\n16 | |             .next()\n   | |___________________^ expected struct `String`,\
    \ found `&String`\n   |\n   = note: expected enum `Option<String>`\n         \
    \     found enum `Option<&String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut l = strings.len();\n    if l <= 1 {\n     \
    \   return None;\n    }\n    let mut result = strings[0];\n    let mut count =\
    \ 0;\n    for s in strings {\n        if s > result {\n            result = s;\n\
    \            count += 1;\n        }\n    }\n    if count == l {\n        Some(result)\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmp6irbj7qc.rs:9:9\n\
    \  |\n9 |     let mut l = strings.len();\n  |         ----^\n  |         |\n \
    \ |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by\
    \ default\n\nerror[E0507]: cannot move out of index of `Vec<String>`\n  --> /tmp/tmp6irbj7qc.rs:13:22\n\
    \   |\n13 |     let mut result = strings[0];\n   |                      ^^^^^^^^^^\n\
    \   |                      |\n   |                      move occurs because value\
    \ has type `String`, which does not implement the `Copy` trait\n   |         \
    \             help: consider borrowing here: `&strings[0]`\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0507`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .fold(None, |max_len,\
    \ s| {\n            if max_len.is_none() {\n                max_len = Some(s.len());\n\
    \            } else {\n                if max_len.unwrap() < s.len() {\n     \
    \               max_len = Some(s.len());\n                }\n            }\n \
    \           max_len\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpozzjgvw3.rs:13:32\n   |\n\
    13 |                 max_len = Some(s.len());\n   |                          \
    \      ^^^^^^^- help: try using a conversion method: `.to_string()`\n   |    \
    \                            |\n   |                                expected struct\
    \ `String`, found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpozzjgvw3.rs:15:39\n\
    \   |\n15 |                 if max_len.unwrap() < s.len() {\n   |            \
    \                           ^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                                       |\n   |                          \
    \             expected struct `String`, found `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpozzjgvw3.rs:16:36\n   |\n16 |                     max_len\
    \ = Some(s.len());\n   |                                    ^^^^^^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                            \
    \        |\n   |                                    expected struct `String`,\
    \ found `usize`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpymqhzfx4.rs:12:5\n   |\n\
    8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n12 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = String::new();\n    for string in strings {\n     \
    \   if longest == string {\n            continue;\n        }\n        longest\
    \ = string;\n        break;\n    }\n    Some(longest)\n}\n\nfn main() {\n    let\
    \ candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"x\")`,\n right: `Some(\"zzzz\")`', /tmp/tmph6pq565u.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().map(|x| x.chars().count()).max().and_then(|x|\
    \ strings[*x as usize])\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `usize` cannot be dereferenced\n --> /tmp/tmpseon3lbg.rs:9:74\n\
    \  |\n9 |     strings.iter().map(|x| x.chars().count()).max().and_then(|x| strings[*x\
    \ as usize])\n  |                                                            \
    \              ^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().cloned().enumerate().max().map(|(i,\
    \ &x)| x).unwrap_or_else(|| strings.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjhis8k8l.rs:9:56\n  |\n9 |\
    \     strings.iter().cloned().enumerate().max().map(|(i, &x)| x).unwrap_or_else(||\
    \ strings.len())\n  |                                                        ^^-\
    \ expected due to this\n  |                                                  \
    \      |\n  |                                                        expected\
    \ struct `String`, found reference\n  |                                      \
    \                  help: you can probably remove the explicit borrow: `x`\n  |\n\
    \  = note: expected struct `String`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpjhis8k8l.rs:9:5\n  |\n8 | fn longest(strings:\
    \ Vec<String>) -> Option<String> {\n  |                                     --------------\
    \ expected `Option<String>` because of return type\n9 |     strings.iter().cloned().enumerate().max().map(|(i,\
    \ &x)| x).unwrap_or_else(|| strings.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `usize`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found type `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut res = String::new();\n    for s in strings.iter()\
    \ {\n        if res.length().is_some() {\n            return Some(res.clone());\n\
    \        }\n        if res.len() < s.length() {\n            res = s;\n      \
    \  }\n    }\n    None\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp03bo_0kl.rs:11:16\n   |\n11 |         if res.length().is_some()\
    \ {\n   |                ^^^^^^ help: there is an associated function with a similar\
    \ name: `len`\n\nerror[E0599]: no method named `length` found for reference `&String`\
    \ in the current scope\n  --> /tmp/tmp03bo_0kl.rs:14:26\n   |\n14 |         if\
    \ res.len() < s.length() {\n   |                          ^^^^^^ help: there is\
    \ an associated function with a similar name: `len`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp03bo_0kl.rs:15:19\n   |\n9  |     let mut res = String::new();\n\
    \   |                   ------------- expected due to this value\n...\n15 |  \
    \           res = s;\n   |                   ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                   |\n   |                   expected struct\
    \ `String`, found `&String`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .unwrap_or(0)\n        .to_string()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmp7l65_o0y.rs:13:10\n\
    \    |\n13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest_len = strings[0].len();\n\n    for s in strings {\n\
    \        if s.len() > longest_len {\n            longest_len = s.len();\n    \
    \    }\n    }\n\n    if longest_len == strings[0].len() {\n        Some(strings[0])\n\
    \    } else {\n        strings.iter().max_by(|a, b| a.len() < b.len()).cloned()\n\
    \    }\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdrkwnhg1.rs:24:38\n   |\n\
    24 |         strings.iter().max_by(|a, b| a.len() < b.len()).cloned()\n   |  \
    \                                    ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longer = String::new();\n    let mut shorter\
    \ = String::new();\n    let mut first_occurrence = String::new();\n\n    for s\
    \ in strings {\n        if s.length() > longer.len() {\n            longer = s;\n\
    \        } else if s.length() < shorter.len() {\n            shorter = s;\n  \
    \      }\n    }\n\n    if shorter == longer {\n        first_occurrence = shorter;\n\
    \    }\n\n    Some(first_occurrence)\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpy6xd9s__.rs:14:14\n   |\n14 |         if s.length()\
    \ > longer.len() {\n   |              ^^^^^^ help: there is an associated function\
    \ with a similar name: `len`\n\nerror[E0599]: no method named `length` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmpy6xd9s__.rs:16:21\n   |\n\
    16 |         } else if s.length() < shorter.len() {\n   |                    \
    \ ^^^^^^ help: there is an associated function with a similar name: `len`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest_string = strings[0];\n    for &s in &strings {\n  \
    \      if s.len() > longest_string.len() {\n            longest_string = s;\n\
    \        }\n    }\n\n    Some(longest_string)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0507]: cannot move out of index of `Vec<String>`\n  --> /tmp/tmp1trud6a7.rs:13:30\n\
    \   |\n13 |     let mut longest_string = strings[0];\n   |                   \
    \           ^^^^^^^^^^\n   |                              |\n   |            \
    \                  move occurs because value has type `String`, which does not\
    \ implement the `Copy` trait\n   |                              help: consider\
    \ borrowing here: `&strings[0]`\n\nerror[E0507]: cannot move out of a shared reference\n\
    \  --> /tmp/tmp1trud6a7.rs:14:15\n   |\n14 |     for &s in &strings {\n   |  \
    \       --    ^^^^^^^^\n   |         ||\n   |         |data moved here\n   | \
    \        |move occurs because `s` has type `String`, which does not implement\
    \ the `Copy` trait\n   |         help: consider removing the `&`: `s`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0507`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut strings = strings\n        .iter()\n      \
    \  .cloned()\n        .filter(|s| s.len() > 0)\n        .collect::<Vec<_>>();\n\
    \n    // Find the longest one\n    let mut best_len = 0;\n    let mut best_string\
    \ = None;\n    for s in strings {\n        if s.len() > best_len {\n         \
    \   best_len = s.len();\n            best_string = Some(s);\n        }\n    }\n\
    \n    match best_string {\n        Some(s) => Some(s.to_string()),\n        None\
    \ => None,\n    }\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut length: usize = 0;\n    let mut max: String\
    \ = None;\n    for s in strings.iter().cloned() {\n        if let Some(len) =\
    \ s.length() {\n            if len > length {\n                length = len;\n\
    \                max = Some(s);\n            }\n        }\n    }\n    if length\
    \ == 0 {\n        None\n    } else {\n        max\n    }\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3leyc1tx.rs:10:27\n   |\n\
    10 |     let mut max: String = None;\n   |                  ------   ^^^^ expected\
    \ struct `String`, found enum `Option`\n   |                  |\n   |        \
    \          expected due to this\n   |\n   = note: expected struct `String`\n \
    \               found enum `Option<_>`\n\nerror[E0599]: no method named `length`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp3leyc1tx.rs:12:30\n\
    \   |\n12 |         if let Some(len) = s.length() {\n   |                    \
    \          ^^^^^^ help: there is an associated function with a similar name: `len`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3leyc1tx.rs:15:23\n   |\n10 |\
    \     let mut max: String = None;\n   |                  ------ expected due to\
    \ this type\n...\n15 |                 max = Some(s);\n   |                  \
    \     ^^^^^^^ expected struct `String`, found enum `Option`\n   |\n   = note:\
    \ expected struct `String`\n                found enum `Option<String>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3leyc1tx.rs:22:9\n   |\n8  | fn longest(strings:\
    \ Vec<String>) -> Option<String> {\n   |                                     --------------\
    \ expected `Option<String>` because of return type\n...\n22 |         max\n  \
    \ |         ^^^ expected enum `Option`, found struct `String`\n   |\n   = note:\
    \ expected enum `Option<String>`\n            found struct `String`\nhelp: try\
    \ wrapping the expression in `Some`\n   |\n22 |         Some(max)\n   |      \
    \   +++++   +\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_length = 0;\n    let mut max_value = \"\".to_string();\n\
    \    for s in strings.iter() {\n        if s.len() > max_length {\n          \
    \  max_length = s.len();\n            max_value = s;\n        }\n    }\n    Some(max_value)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3ojun2hy.rs:17:25\n   |\n\
    13 |     let mut max_value = \"\".to_string();\n   |                         --------------\
    \ expected due to this value\n...\n17 |             max_value = s;\n   |     \
    \                    ^- help: try using a conversion method: `.to_string()`\n\
    \   |                         |\n   |                         expected struct\
    \ `String`, found `&String`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_length = 0;\n    for s in strings {\n        if s.len()\
    \ > max_length {\n            max_length = s.len();\n        }\n    }\n\n    Some(strings[strings.iter().position(|s|\
    \ s.len() == max_length)].clone())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[String]` cannot be indexed by `Option<usize>`\n\
    \  --> /tmp/tmpymreibf5.rs:20:10\n   |\n20 |     Some(strings[strings.iter().position(|s|\
    \ s.len() == max_length)].clone())\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[String]>` is not implemented for `Option<usize>`\n   = note:\
    \ required because of the requirements on the impl of `Index<Option<usize>>` for\
    \ `Vec<String>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmp9ossrduw.rs:13:10\n\
    \    |\n13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    // Avoid unnecessary allocations when the input list\
    \ contains no strings\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    // Avoid unnecessary allocations when the input list contains only\
    \ one string\n    if strings.len() == 1 {\n        return strings[0];\n    }\n\
    \n    let mut longest = strings[0];\n    let mut longestlen = strings[0].len();\n\
    \n    for string in strings.iter().rev() {\n        if string.len() > longestlen\
    \ {\n            longest = string;\n            longestlen = string.len();\n \
    \       }\n    }\n    longest\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3g28bons.rs:16:16\n   |\n\
    8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n16 |         return strings[0];\n   |                ^^^^^^^^^^ expected\
    \ enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n\
    \            found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n16 |         return Some(strings[0]);\n   |                +++++      \
    \    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3g28bons.rs:24:23\n  \
    \ |\n19 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n24 |             longest = string;\n   |  \
    \                     ^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3g28bons.rs:28:5\n\
    \   |\n8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                              -------------- expected `Option<String>` because\
    \ of return type\n...\n28 |     longest\n   |     ^^^^^^^ expected enum `Option`,\
    \ found struct `String`\n   |\n   = note: expected enum `Option<String>`\n   \
    \         found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n28 |     Some(longest)\n   |     +++++       +\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for s in strings {\n        if s.len()\
    \ > longest.len() {\n            longest = s;\n        }\n    }\n    longest\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwznh12ie.rs:18:5\n   |\n\
    8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n18 |     longest\n   |     ^^^^^^^ expected enum `Option`, found\
    \ struct `String`\n   |\n   = note: expected enum `Option<String>`\n         \
    \   found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n\
    18 |     Some(longest)\n   |     +++++       +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| {\n    \
    \        if s.len() > strings.len() {\n                s\n            } else {\n\
    \                strings.iter().find(|x| x.len() == s.len()).unwrap()\n      \
    \      }\n        })\n        .max()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplfjkcl4n.rs:9:5\n   |\n8\
    \  |   fn longest(strings: Vec<String>) -> Option<String> {\n   |            \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n9  | /     strings\n10 | |         .iter()\n11 | |         .map(|s|\
    \ {\n12 | |             if s.len() > strings.len() {\n...  |\n17 | |         })\n\
    18 | |         .max()\n   | |______________^ expected struct `String`, found `&String`\n\
    \   |\n   = note: expected enum `Option<String>`\n              found enum `Option<&String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by(|a, b| a.len() as usize - b.len()\
    \ as usize).cloned()\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgoqs46p6.rs:9:34\n  |\n9 |\
    \     strings.iter().max_by(|a, b| a.len() as usize - b.len() as usize).cloned()\n\
    \  |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `std::cmp::Ordering`, found `usize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = -1;\n    for string in strings.iter().rev()\
    \ {\n        let len = string.len();\n        if max_len < len {\n           \
    \ max_len = len;\n        }\n    }\n\n    if max_len == -1 {\n        return None;\n\
    \    }\n\n    if strings.len() == 0 {\n        return Some(\"\");\n    }\n\n \
    \   let mut result = \"\";\n    for string in strings.iter().rev() {\n       \
    \ let len = string.len();\n        if max_len == len {\n            return Some(result);\n\
    \        }\n        result = &*result + &string[..max_len];\n    }\n\n    Some(result)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpcy25q06u.rs:9:23\n\
    \  |\n9 |     let mut max_len = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmpcy25q06u.rs:17:19\n   |\n17 |     if max_len\
    \ == -1 {\n   |                   ^^\n   |                   |\n   |         \
    \          cannot apply unary operator `-`\n   |                   help: you may\
    \ have meant the maximum value of `usize`: `usize::MAX`\n   |\n   = note: unsigned\
    \ values cannot be negated\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcy25q06u.rs:22:21\n\
    \   |\n22 |         return Some(\"\");\n   |                     ^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                     |\n   |\
    \                     expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcy25q06u.rs:29:25\n   |\n29 |             return\
    \ Some(result);\n   |                         ^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                         |\n   |               \
    \          expected struct `String`, found `&str`\n\nerror[E0369]: cannot add\
    \ `&str` to `&str`\n  --> /tmp/tmpcy25q06u.rs:31:27\n   |\n31 |         result\
    \ = &*result + &string[..max_len];\n   |                  -------- ^ ------------------\
    \ &str\n   |                  |        |\n   |                  |        `+` cannot\
    \ be used to concatenate two `&str` strings\n   |                  &str\n   |\n\
    \   = note: string concatenation requires an owned `String` on the left\nhelp:\
    \ remove the borrow to obtain an owned `String`\n   |\n31 -         result = &*result\
    \ + &string[..max_len];\n31 +         result = *result + &string[..max_len];\n\
    \   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcy25q06u.rs:34:10\n  \
    \ |\n34 |     Some(result)\n   |          "
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .into_iter()\n        .windows(2)\n\
    \        .map(|string| {\n            string\n                .into_iter()\n \
    \               .max_by_key(|s| s.len())\n                .expect(\"All strings\
    \ have the same length\")\n        })\n        .max_by_key(|s| s.len())\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `windows` found for struct `std::vec::IntoIter`\
    \ in the current scope\n  --> /tmp/tmp5t81trk1.rs:11:10\n   |\n11 |         .windows(2)\n\
    \   |          ^^^^^^^ method not found in `std::vec::IntoIter<String>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| {\n    \
    \        let len = s.len();\n            if len == 0 {\n                None\n\
    \            } else {\n                if len == strings.len() {\n           \
    \         Some(s)\n                } else {\n                    Some(s.chars().max().unwrap())\n\
    \                }\n            }\n        })\n        .max_by(|a, b| a.cmp(b))\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpbq2uuxsh.rs:19:21\n\
    \   |\n16 | /                 if len == strings.len() {\n17 | |              \
    \       Some(s)\n   | |                     ------- expected because of this\n\
    18 | |                 } else {\n19 | |                     Some(s.chars().max().unwrap())\n\
    \   | |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&String`,\
    \ found `char`\n20 | |                 }\n   | |_________________- `if` and `else`\
    \ have incompatible types\n   |\n   = note: expected enum `Option<&String>`\n\
    \              found enum `Option<char>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = std::cmp::max::<i32>(\n        strings.iter().map(|s|\
    \ s.len()).sum(),\n        0\n    );\n    let mut found_len = false;\n\n    for\
    \ s in strings {\n        let len = s.len();\n        if max_len > len {\n   \
    \         max_len = len;\n        }\n\n        if len > 0 && len == max_len {\n\
    \            found_len = true;\n        }\n    }\n\n    if found_len {\n     \
    \   Some(\n            strings\n                .iter()\n                .max_by_key(|s|\
    \ s.len())\n                .take_while(|s| !s.is_empty())\n                .map(|s|\
    \ s.to_string())\n                .unwrap_or_else(|| format!(\"(empty string)\"\
    ))\n        )\n    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `i32: Sum<usize>` is not satisfied\n    -->\
    \ /tmp/tmpv5bl_e0w.rs:9:39\n     |\n9    |     let mut max_len = std::cmp::max::<i32>(\n\
    \     |                                       ^^^ the trait `Sum<usize>` is not\
    \ implemented for `i32`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n        \
    \       <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20\
    \ others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpv5bl_e0w.rs:17:22\n   |\n17 |         if max_len\
    \ > len {\n   |                      ^^^ expected `i32`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `i32` and panic if the converted value doesn't\
    \ fit\n   |\n17 |         if max_len > len.try_into().unwrap() {\n   |       \
    \                  ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpv5bl_e0w.rs:18:23\n   |\n9  |       let mut max_len = std::cmp::max::<i32>(\n\
    \   |  _______________________-\n10 | |         strings.iter().map(|s| s.len()).sum(),\n\
    11 | |         0\n12 | |     );\n   | |_____- expected due to this value\n...\n\
    18 |               max_len = len;\n   |                         ^^^ expected `i32`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv5bl_e0w.rs:21:30\n\
    \   |\n21 |         if len > 0 && len == max_len {\n   |                     \
    \         ^^^^^^^ expected `usize`, found `i32`\n   |\nhelp: you can convert an\
    \ `i32` to a `usize` and panic if the converted value doesn't fit\n   |\n21 |\
    \         if len > 0 && len == max_len.try_into().unwrap() {\n   |           \
    \                          ++++++++++++++++++++\n\nerror[E0599]: `Option<&String>`\
    \ is not an iterator\n   --> /tmp/tmpv5bl_e0w.rs:31:18\n    |\n31  |         \
    \          .take_while(|s| !s.is_empty())\n    |                    ^^^^^^^^^^\
    \ `Option<&String>` is not an iterator\n    |"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest_string = strings[0].clone();\n    for\
    \ string in strings {\n        if string.length() > longest_string.length() {\n\
    \            longest_string = string;\n        }\n    }\n    Some(longest_string)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmptilbukmz.rs:11:19\n   |\n11 |         if string.length()\
    \ > longest_string.length() {\n   |                   ^^^^^^ help: there is an\
    \ associated function with a similar name: `len`\n\nerror[E0599]: no method named\
    \ `length` found for struct `String` in the current scope\n  --> /tmp/tmptilbukmz.rs:11:45\n\
    \   |\n11 |         if string.length() > longest_string.length() {\n   |     \
    \                                        ^^^^^^ help: there is an associated function\
    \ with a similar name: `len`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max_len, string| if string.length\
    \ > max_len {\n        Some(string)\n    } else {\n        max_len\n    })\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `length` on type `&String`\n --> /tmp/tmp2tx63ys1.rs:9:59\n\
    \  |\n9 |     strings.iter().fold(None, |max_len, string| if string.length > max_len\
    \ {\n  |                                                           ^^^^^^ unknown\
    \ field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2tx63ys1.rs:10:14\n \
    \  |\n10 |         Some(string)\n   |              ^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |              |\n   |              expected struct\
    \ `String`, found `&String`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0609.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = String::new();\n    let mut min_len\
    \ = String::new();\n    for s in strings.iter() {\n        match s.len() {\n \
    \           1 => max_len.push_str(s),\n            _ => match s.len() {\n    \
    \            len if len > max_len.len() => max_len.push_str(s),\n            \
    \    len if len < min_len.len() => min_len.push_str(s),\n                _ =>\
    \ {}\n            }\n        }\n    }\n    if max_len.len() > min_len.len() {\n\
    \        Some(max_len.clone())\n    } else {\n        None\n    }\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"xyz\")`,\n right: `Some(\"x\")`', /tmp/tmp0316gsia.rs:31:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max = String::new();\n    for str in strings\
    \ {\n        max = if str.length > max.len() {\n            str.clone()\n    \
    \    } else {\n            max\n        };\n    }\n    Some(max)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `length` on type `String`\n  --> /tmp/tmpx_53rllr.rs:11:22\n\
    \   |\n11 |         max = if str.length > max.len() {\n   |                  \
    \    ^^^^^^ unknown field\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0609`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut lens = Vec::new();\n\n    for s in strings {\n        let len\
    \ = s.len();\n        lens.push(len);\n    }\n\n    let max_lens = lens.iter().max();\n\
    \    let lens_index = lens\n        .iter()\n        .enumerate()\n        .filter(|(i,\
    \ _)| max_lens == *i)\n        .next()\n        .unwrap()\n        .1;\n\n   \
    \ let mut longest = strings[lens_index].to_string();\n\n    for s in strings.iter()\
    \ {\n        if longest != *s {\n            longest = *s;\n        }\n    }\n\
    \n    longest\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpatrmkdxg.rs:24:38\n   |\n\
    24 |         .filter(|(i, _)| max_lens == *i)\n   |                          \
    \            ^^ expected enum `Option`, found `usize`\n   |\n   = note: expected\
    \ enum `Option<&usize>`\n              found type `usize`\n\nerror[E0277]: the\
    \ type `[String]` cannot be indexed by `&usize`\n  --> /tmp/tmpatrmkdxg.rs:29:23\n\
    \   |\n29 |     let mut longest = strings[lens_index].to_string();\n   |     \
    \                  ^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented\
    \ for `&usize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<&usize>`\
    \ for `Vec<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpatrmkdxg.rs:37:5\n\
    \   |\n8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                              -------------- expected `Option<String>` because\
    \ of return type\n...\n37 |     longest\n   |     ^^^^^^^ expected enum `Option`,\
    \ found struct `String`\n   |\n   = note: expected enum `Option<String>`\n   \
    \         found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n37 |     Some(longest)\n   |     +++++       +\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut length = String::new();\n    let mut longest = String::new();\n\
    \    for s in strings {\n        length = s.chars().count();\n        if length\
    \ > longest {\n            longest = length;\n        }\n    }\n\n    if longest\
    \ == String::new().len() {\n        return None;\n    }\n\n    Some(longest)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj0qsuh0l.rs:16:18\n   |\n\
    13 |     let mut length = String::new();\n   |                      -------------\
    \ expected due to this value\n...\n16 |         length = s.chars().count();\n\
    \   |                  ^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                  |\n   |                  expected struct\
    \ `String`, found `usize`\n\nerror[E0277]: can't compare `String` with `usize`\n\
    \  --> /tmp/tmpj0qsuh0l.rs:22:16\n   |\n22 |     if longest == String::new().len()\
    \ {\n   |                ^^ no implementation for `String == usize`\n   |\n  \
    \ = help: the trait `PartialEq<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             <&'a\
    \ str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n \
    \            <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    // Fast path\n    let mut it = strings.iter().rev();\n\
    \    let mut longest: Vec<String> = Vec::new();\n    let mut longest_len = 0;\n\
    \    let mut first = true;\n    loop {\n        let mut current = it.next().unwrap();\n\
    \        if longest_len == current.len() {\n            longest.push(current);\n\
    \        } else {\n            if longest_len > current.len() {\n            \
    \    longest_len = current.len();\n                longest = current;\n      \
    \      }\n        }\n        first = longest_len == current.len();\n        if\
    \ !it.next().is_some() {\n            break;\n        }\n    }\n    if longest.len()\
    \ > 0 {\n        Some(longest.clone())\n    } else {\n        None\n    }\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgj4eu7lm.rs:17:26\n   |\n\
    17 |             longest.push(current);\n   |                          ^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \        |\n   |                          expected struct `String`, found `&String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgj4eu7lm.rs:21:27\n   |\n11 |\
    \     let mut longest: Vec<String> = Vec::new();\n   |                      -----------\
    \ expected due to this type\n...\n21 |                 longest = current;\n  \
    \ |                           ^^^^^^^ expected struct `Vec`, found `&String`\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found reference `&String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgj4eu7lm.rs:30:14\n   |\n30 |\
    \         Some(longest.clone())\n   |              ^^^^^^^^^^^^^^^ expected struct\
    \ `String`, found struct `Vec`\n   |\n   = note: expected struct `String`\n  \
    \            found struct `Vec<String>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .into_iter()\n        .map(|x| x.len()\
    \ as u16)\n        .max_by_key(|x| x)\n        .map(|x| x.to_string())\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error: lifetime may not live long enough\n  --> /tmp/tmpkm9dcxyz.rs:12:25\n\
    \   |\n12 |         .max_by_key(|x| x)\n   |                      -- ^ returning\
    \ this value requires that `'1` must outlive `'2`\n   |                      ||\n\
    \   |                      |return type of closure is &'2 u16\n   |          \
    \            has type `&'1 u16`\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut result = String::new();\n    let mut longest = String::new();\n\
    \    for string in strings {\n        if result.len() < string.len() {\n     \
    \       result = string;\n        }\n        if longest < string {\n         \
    \   longest = string;\n        }\n    }\n    longest_match(&result, &longest,\
    \ longest)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `longest_match` in this scope\n  -->\
    \ /tmp/tmp25514vyo.rs:22:5\n   |\n22 |     longest_match(&result, &longest, longest)\n\
    \   |     ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut best_length = 0;\n    let mut best_str = None;\n\n    for str\
    \ in strings {\n        match str.len() {\n            1 => {\n              \
    \  if best_length < str.len() {\n                    best_length = str.len();\n\
    \                    best_str = str;\n                }\n            }\n     \
    \       _ => {\n                // Keep the shorter one\n                if best_length\
    \ < str.len() {\n                    best_length = str.len();\n              \
    \      best_str = str;\n                }\n            }\n        }\n    }\n\n\
    \    Some(best_str)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbfg1xvaj.rs:21:32\n   |\n\
    14 |     let mut best_str = None;\n   |                        ---- expected due\
    \ to this value\n...\n21 |                     best_str = str;\n   |         \
    \                       ^^^ expected enum `Option`, found struct `String`\n  \
    \ |\n   = note: expected enum `Option<_>`\n            found struct `String`\n\
    help: try wrapping the expression in `Some`\n   |\n21 |                     best_str\
    \ = Some(str);\n   |                                +++++   +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbfg1xvaj.rs:28:32\n   |\n14 |     let mut best_str\
    \ = None;\n   |                        ---- expected due to this value\n...\n\
    28 |                     best_str = str;\n   |                               \
    \ ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected\
    \ enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the\
    \ expression in `Some`\n   |\n28 |                     best_str = Some(str);\n\
    \   |                                +++++   +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbfg1xvaj.rs:34:10\n   |\n34 |     Some(best_str)\n   |        \
    \  ^^^^^^^^ expected struct `String`, found enum `Option`\n   |\n   = note: expected\
    \ struct `String`\n                found enum `Option<_>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max = String::new();\n    for s in strings {\n        if s.len()\
    \ > max.len() {\n            max = s;\n        }\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzq558_f4.rs:19:5\n   |\n\
    8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n19 |     max\n   |     ^^^ expected enum `Option`, found struct `String`\n\
    \   |\n   = note: expected enum `Option<String>`\n            found struct `String`\n\
    help: try wrapping the expression in `Some`\n   |\n19 |     Some(max)\n   |  \
    \   +++++   +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    let mut longests = strings.iter().map(|s|\
    \ s.len()).max().unwrap();\n    for s in strings.iter().rev() {\n        if s.len()\
    \ > longests {\n            longest = s;\n            longests = s.len();\n  \
    \      }\n    }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6txu4cv3.rs:16:23\n   |\n\
    12 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n16 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .chain(\n       \
    \     strings\n                .iter()\n                .enumerate()\n       \
    \         .filter(|&(index, string)| index == 0 || string != strings[index - 1])\n\
    \                .map(|(index, string)| string),\n        )\n        .max()\n\
    \        .or_else(|| None as Option<String>)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&String` with `String`\n  --> /tmp/tmppp72xxy2.rs:15:65\n\
    \   |\n15 |                 .filter(|&(index, string)| index == 0 || string !=\
    \ strings[index - 1])\n   |                                                  \
    \               ^^ no implementation for `&String == String`\n   |\n   = help:\
    \ the trait `PartialEq<String>` is not implemented for `&String`\n   = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n             <&'a str\
    \ as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n     \
    \        <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppp72xxy2.rs:19:21\n   |\n19 |         .or_else(|| None\
    \ as Option<String>)\n   |                     ^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&String`, found struct `String`\n   |\n   = note: expected enum `Option<&String>`\n\
    \              found enum `Option<String>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppp72xxy2.rs:9:5\n   |\n8  |   fn longest(strings: Vec<String>)\
    \ -> Option<String> {\n   |                                       --------------\
    \ expected `Option<String>` because of return type\n9  | /     strings\n10 | |\
    \         .iter()\n11 | |         .chain(\n12 | |             strings\n...  |\n\
    18 | |         .max()\n19 | |         .or_else(|| None as Option<String>)\n  \
    \ | |___________________________________________^ expected struct `String`, found\
    \ `&String`\n   |\n   = note: expected enum `Option<String>`\n              found\
    \ enum `Option<&String>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .fold(String::new(),\
    \ |mut acc, s| {\n            if acc.len() > s.len() {\n                acc.clone()\n\
    \            } else {\n                acc.push_str(s);\n                acc\n\
    \            }\n        })\n        .as_ref()\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgt7i2nd0.rs:9:5\n   |\n8\
    \  |   fn longest(strings: Vec<String>) -> Option<String> {\n   |            \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n9  | /     strings\n10 | |         .iter()\n11 | |         .fold(String::new(),\
    \ |mut acc, s| {\n12 | |             if acc.len() > s.len() {\n...  |\n18 | |\
    \         })\n19 | |         .as_ref()\n   | |_________________^ expected enum\
    \ `Option`, found reference\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found reference `&_`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut best = longest_prefix(\n        strings.iter().cloned().collect::<Vec<_>>(),\n\
    \        0,\n        None,\n    );\n    match best.len() {\n        0 => None,\n\
    \        1 => Some(best[0]),\n        _ => best,\n    }\n}\n\nfn main() {\n  \
    \  let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `longest_prefix` in this scope\n -->\
    \ /tmp/tmpvxif6awi.rs:9:20\n  |\n9 |     let mut best = longest_prefix(\n  | \
    \                   ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .cloned()\n     \
    \   .map(|x| x.to_owned().chars().count())\n        .max()\n        .unwrap_or(0)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8smg73d9.rs:9:5\n   |\n8\
    \  |   fn longest(strings: Vec<String>) -> Option<String> {\n   |            \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n9  | /     strings\n10 | |         .iter()\n11 | |         .cloned()\n\
    12 | |         .map(|x| x.to_owned().chars().count())\n13 | |         .max()\n\
    14 | |         .unwrap_or(0)\n   | |_____________________^ expected enum `Option`,\
    \ found `usize`\n   |\n   = note: expected enum `Option<String>`\n           \
    \   found type `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut min = strings[0].len();\n    let mut max_len = strings[0].len();\n\
    \    for i in strings.iter().rev() {\n        let len = i.len();\n        let\
    \ mut cur_len = len;\n        for j in 0..len {\n            if len > max_len\
    \ && j > 0 {\n                max_len = len;\n                cur_len = j;\n \
    \           }\n            if len < min {\n                min = len;\n      \
    \      }\n        }\n    }\n    if max_len == strings[0].len() {\n        return\
    \ None;\n    }\n    Some(strings[max_len])\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "warning: variable `cur_len` is assigned to, but never used\n  --> /tmp/tmp5_n3euyl.rs:16:17\n\
    \   |\n16 |         let mut cur_len = len;\n   |                 ^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_variables)]` on by default\n   = note: consider using\
    \ `_cur_len` instead\n\nwarning: value assigned to `cur_len` is never read\n \
    \ --> /tmp/tmp5_n3euyl.rs:20:17\n   |\n20 |                 cur_len = j;\n   |\
    \                 ^^^^^^^\n   |\n   = note: `#[warn(unused_assignments)]` on by\
    \ default\n   = help: maybe it is overwritten before being read?\n\nerror[E0507]:\
    \ cannot move out of index of `Vec<String>`\n  --> /tmp/tmp5_n3euyl.rs:30:10\n\
    \   |\n30 |     Some(strings[max_len])\n   |          ^^^^^^^^^^^^^^^^ move occurs\
    \ because value has type `String`, which does not implement the `Copy` trait\n\
    \nerror: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0507`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let max_len = String::from(\"\");\n    for s in strings {\n        let\
    \ len = s.chars().count();\n        if len > max_len.len() {\n            max_len\
    \ = len;\n        }\n    }\n    Some(max_len)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjuowx9d9.rs:16:23\n   |\n\
    12 |     let max_len = String::from(\"\");\n   |                   ----------------\
    \ expected due to this value\n...\n16 |             max_len = len;\n   |     \
    \                  ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                       |\n   |                       expected struct `String`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    strings.iter().map(|s| s.chars().max().unwrap()).max()\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7oovwfgj.rs:12:5\n   |\n\
    8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n12 |     strings.iter().map(|s| s.chars().max().unwrap()).max()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `String`, found `char`\n   |\n   = note: expected enum `Option<String>`\n  \
    \            found enum `Option<char>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest_len = 0;\n    let mut longest_str = None;\n    for s\
    \ in strings {\n        let len = s.len();\n        if len > longest_len {\n \
    \           longest_len = len;\n            longest_str = s;\n        }\n    }\n\
    \    Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppqt49pzd.rs:18:27\n   |\n\
    13 |     let mut longest_str = None;\n   |                           ---- expected\
    \ due to this value\n...\n18 |             longest_str = s;\n   |            \
    \               ^ expected enum `Option`, found struct `String`\n   |\n   = note:\
    \ expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping\
    \ the expression in `Some`\n   |\n18 |             longest_str = Some(s);\n  \
    \ |                           +++++ +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmppqt49pzd.rs:21:10\n   |\n21 |     Some(longest_str)\n   |          ^^^^^^^^^^^\
    \ expected struct `String`, found enum `Option`\n   |\n   = note: expected struct\
    \ `String`\n                found enum `Option<_>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest = strings[0];\n    let mut i = 0;\n\n    while i <\
    \ strings.len() {\n        let s = strings[i];\n        if s.length() > longest.length()\
    \ {\n            longest = s;\n        }\n        i += 1;\n    }\n\n    longest\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp4i3_80ge.rs:18:14\n   |\n18 |         if s.length()\
    \ > longest.length() {\n   |              ^^^^^^ help: there is an associated\
    \ function with a similar name: `len`\n\nerror[E0599]: no method named `length`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp4i3_80ge.rs:18:33\n\
    \   |\n18 |         if s.length() > longest.length() {\n   |                 \
    \                ^^^^^^ help: there is an associated function with a similar name:\
    \ `len`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4i3_80ge.rs:24:5\n  \
    \ |\n8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |         \
    \                            -------------- expected `Option<String>` because\
    \ of return type\n...\n24 |     longest\n   |     ^^^^^^^ expected enum `Option`,\
    \ found struct `String`\n   |\n   = note: expected enum `Option<String>`\n   \
    \         found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n24 |     Some(longest)\n   |     +++++       +\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut min_len = strings[0].length();\n    for s in\
    \ strings {\n        if min_len > s.length() {\n            min_len = s.length();\n\
    \        }\n    }\n    if min_len > 0 {\n        for s in strings {\n        \
    \    if min_len == s.length() {\n                return Some(s);\n           \
    \ }\n        }\n    }\n    None\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp4jekc617.rs:9:34\n  |\n9 |     let mut min_len =\
    \ strings[0].length();\n  |                                  ^^^^^^ help: there\
    \ is an associated function with a similar name: `len`\n\nerror[E0599]: no method\
    \ named `length` found for struct `String` in the current scope\n  --> /tmp/tmp4jekc617.rs:11:24\n\
    \   |\n11 |         if min_len > s.length() {\n   |                        ^^^^^^\
    \ help: there is an associated function with a similar name: `len`\n\nerror[E0599]:\
    \ no method named `length` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp4jekc617.rs:12:25\n   |\n12 |             min_len = s.length();\n  \
    \ |                         ^^^^^^ help: there is an associated function with\
    \ a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmp4jekc617.rs:17:29\n   |\n17 | \
    \            if min_len == s.length() {\n   |                             ^^^^^^\
    \ help: there is an associated function with a similar name: `len`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for string in strings.iter().rev()\
    \ {\n        if string.length > longest.length {\n            longest = string;\n\
    \        }\n    }\n    longest\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `length` on type `&String`\n  --> /tmp/tmprypmje0c.rs:14:19\n\
    \   |\n14 |         if string.length > longest.length {\n   |                \
    \   ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n\
    \  --> /tmp/tmprypmje0c.rs:14:36\n   |\n14 |         if string.length > longest.length\
    \ {\n   |                                    ^^^^^^ unknown field\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprypmje0c.rs:15:23\n   |\n12 |     let mut longest\
    \ = strings[0];\n   |                       ---------- expected due to this value\n\
    ...\n15 |             longest = string;\n   |                       ^^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                       |\n\
    \   |                       expected struct `String`, found `&String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprypmje0c.rs:18:5\n   |\n8  | fn longest(strings:\
    \ Vec<String>) -> Option<String> {\n   |                                     --------------\
    \ expected `Option<String>` because of return type\n...\n18 |     longest\n  \
    \ |     ^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note:\
    \ expected enum `Option<String>`\n            found struct `String`\nhelp: try\
    \ wrapping the expression in `Some`\n   |\n18 |     Some(longest)\n   |     +++++\
    \       +\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0609.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by(|a, b| a.len().cmp(&b.len()))\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnm5mamz0.rs:9:5\n  |\n8 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n9 |     strings.iter().max_by(|a, b| a.len().cmp(&b.len()))\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = strings[0].len();\n    for i in strings.iter()\
    \ {\n        let len = i.len();\n        if len > max_len {\n            max_len\
    \ = len;\n        }\n    }\n    if strings.is_empty() {\n        return None;\n\
    \    }\n    Some(strings[strings.iter().position(|s| s == &max_len)].clone())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `String` with `usize`\n  --> /tmp/tmpinsv80y7.rs:19:48\n\
    \   |\n19 |     Some(strings[strings.iter().position(|s| s == &max_len)].clone())\n\
    \   |                                                ^^ no implementation for\
    \ `String == usize`\n   |\n   = help: the trait `PartialEq<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n   = note: required because\
    \ of the requirements on the impl of `PartialEq<&usize>` for `&String`\n\nerror[E0277]:\
    \ the type `[String]` cannot be indexed by `Option<usize>`\n  --> /tmp/tmpinsv80y7.rs:19:10\n\
    \   |\n19 |     Some(strings[strings.iter().position(|s| s == &max_len)].clone())\n\
    \   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>`\
    \ is not implemented for `Option<usize>`\n   = note: required because of the requirements\
    \ on the impl of `Index<Option<usize>>` for `Vec<String>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut length = std::u32::MAX;\n    for s in strings\
    \ {\n        if s.length() > length {\n            length = s.length();\n    \
    \    }\n    }\n    if length == std::u32::MAX {\n        None\n    } else {\n\
    \        strings[strings.len()..].iter()\n            .max_by_key(|s| s.len()\
    \ as u32).map(|s| s).next()\n    }\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp_gjv9tyu.rs:11:14\n   |\n11 |         if s.length()\
    \ > length {\n   |              ^^^^^^ help: there is an associated function with\
    \ a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmp_gjv9tyu.rs:12:24\n   |\n12 | \
    \            length = s.length();\n   |                        ^^^^^^ help: there\
    \ is an associated function with a similar name: `len`\n\nerror[E0599]: no method\
    \ named `next` found for enum `Option` in the current scope\n  --> /tmp/tmp_gjv9tyu.rs:19:56\n\
    \   |\n19 |             .max_by_key(|s| s.len() as u32).map(|s| s).next()\n  \
    \ |                                                        ^^^^ method not found\
    \ in `Option<&String>`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut lens = strings.length;\n    let mut max_len\
    \ = strings.iter().map(|s| s.len()).max();\n    if lens > 1 {\n        for i in\
    \ 0..(lens - 1) {\n            if max_len > strings.iter().map(|s| s.len() - i).max()\
    \ {\n                max_len = strings.iter().map(|s| s.len() - i).max();\n  \
    \          }\n        }\n    }\n    if max_len == 0 {\n        return None;\n\
    \    }\n    Some(strings[strings.iter().position(|&x| x.len() == max_len).unwrap()])\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `length` on type `Vec<String>`\n --> /tmp/tmpr1myjf2e.rs:9:28\n\
    \  |\n9 |     let mut lens = strings.length;\n  |                            ^^^^^^\
    \ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1myjf2e.rs:18:19\n\
    \   |\n18 |     if max_len == 0 {\n   |                   ^ expected enum `Option`,\
    \ found integer\n   |\n   = note: expected enum `Option<usize>`\n            \
    \  found type `{integer}`\nhelp: try wrapping the expression in `Some`\n   |\n\
    18 |     if max_len == Some(0) {\n   |                   +++++ +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpr1myjf2e.rs:21:58\n   |\n21 |     Some(strings[strings.iter().position(|&x|\
    \ x.len() == max_len).unwrap()])\n   |                                       \
    \                   ^^^^^^^ expected `usize`, found enum `Option`\n   |\n   =\
    \ note: expected type `usize`\n              found enum `Option<usize>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0609.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max().map(|s| s).unwrap_or(None)\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj_ktlnlx.rs:9:47\n  |\n9 |\
    \     strings.iter().max().map(|s| s).unwrap_or(None)\n  |                   \
    \                            ^^^^ expected `&String`, found enum `Option`\n  |\n\
    \  = note: expected reference `&String`\n                  found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpj_ktlnlx.rs:9:5\n  |\n8 | fn longest(strings:\
    \ Vec<String>) -> Option<String> {\n  |                                     --------------\
    \ expected `Option<String>` because of return type\n9 |     strings.iter().max().map(|s|\
    \ s).unwrap_or(None)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .into_iter()\n        .filter(|s|\
    \ s.is_ok())\n        .max(|a, b| a.cmp(b))\n        .map(|x| x)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ok` found for reference `&String` in\
    \ the current scope\n  --> /tmp/tmptjj0pnqp.rs:11:23\n   |\n11 |         .filter(|s|\
    \ s.is_ok())\n   |                       ^^^^^ method not found in `&String`\n\
    \nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmptjj0pnqp.rs:12:10\n     |\n12   |         .max(|a, b| a.cmp(b))\n\
    \     |          ^^^ --------------- supplied 1 argument\n     |          |\n\
    \     |          expected 0 arguments\n     |\nnote: associated function defined\
    \ here\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut result = None;\n    for s in strings {\n  \
    \      if result.is_none() {\n            result = Some(s);\n        } else {\n\
    \            result.unwrap()\n                .chars()\n                .take_while(|c|\
    \ *c != s.chars().max())\n                .count();\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2csd3z_8.rs:16:39\n   |\n\
    16 |                 .take_while(|c| *c != s.chars().max())\n   |            \
    \                           ^^^^^^^^^^^^^^^ expected `char`, found enum `Option`\n\
    \   |\n   = note: expected type `char`\n              found enum `Option<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        None\n    } else {\n\
    \        let mut max_len = String::new();\n        let mut max_len_iter = strings.iter().enumerate();\n\
    \        let mut max_iter = false;\n        for (i, s) in max_len_iter {\n   \
    \         match s.len() {\n                1 => max_len.push_str(&s[0]),\n   \
    \             max => max_len.push_str(&s[max - 1]),\n            }\n         \
    \   max_len = max_len.len() > max_len.len() ? max_len : max_len.to_string();\n\
    \            if max_len == s.len() && i > 0\n                || max_len == s.len()\
    \ && i == 0 && max_len.len() > max_len.len() {\n                max_iter = true;\n\
    \            }\n        }\n        max_iter ? Some(max_len) : longest(strings)\n\
    \    }\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `max_len`\n\
    \  --> /tmp/tmpj_7p5njq.rs:20:55\n   |\n20 |             max_len = max_len.len()\
    \ > max_len.len() ? max_len : max_len.to_string();\n   |                     \
    \                                  ^^^^^^^ expected one of `.`, `;`, `?`, `}`,\
    \ or an operator\n\nerror: expected one of `.`, `;`, `?`, `}`, or an operator,\
    \ found `Some`\n  --> /tmp/tmpj_7p5njq.rs:26:20\n   |\n26 |         max_iter ?\
    \ Some(max_len) : longest(strings)\n   |                    ^^^^ expected one\
    \ of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0277]: the type `String` cannot\
    \ be indexed by `{integer}`\n  --> /tmp/tmpj_7p5njq.rs:17:40\n   |\n17 |     \
    \            1 => max_len.push_str(&s[0]),\n   |                             \
    \           ^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the\
    \ trait `Index<{integer}>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpj_7p5njq.rs:18:42\n   |\n18 |                 max => max_len.push_str(&s[max\
    \ - 1]),\n   |                                          ^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 4 previ"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    // The longest string will be the one at the first position in the\
    \ sorted list.\n    let mut sorted_strings = strings.into_iter().copied().sorted();\n\
    \n    // If more than one string has the same length then we return the string\
    \ at the first\n    // position (the one at index 0 in the sorted list).\n   \
    \ let mut string_with_max_length = sorted_strings.next();\n    let mut length\
    \ = string_with_max_length.unwrap_len();\n\n    // We iterate over the sorted\
    \ list and compare each string with the one at the first\n    // position. If\
    \ the length of the first string is greater than the current length then we\n\
    \    // replace the string with the first one.\n    for str in sorted_strings.filter_map(|s|\
    \ {\n        // If the string at the first position is longer than the current\
    \ string then\n        // replace it.\n        if length >= str.len() {\n    \
    \        length = str.len();\n            Some(str)\n        } else {\n      \
    \      None\n        }\n    }) {\n        if length == string_with_max_length.unwrap_len()\
    \ {\n            return str;\n        }\n    }\n\n    // In case the longest string\
    \ is not in the sorted list then return None.\n    None\n}\n\nfn main() {\n  \
    \  let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0423]: expected value, found builtin type `str`\n  --> /tmp/tmped3nq_5o.rs:27:22\n\
    \   |\n27 |         if length >= str.len() {\n   |                      ^^^ not\
    \ a value\n\nerror[E0423]: expected value, found builtin type `str`\n  --> /tmp/tmped3nq_5o.rs:28:22\n\
    \   |\n28 |             length = str.len();\n   |                      ^^^ not\
    \ a value\n\nerror[E0423]: expected value, found builtin type `str`\n  --> /tmp/tmped3nq_5o.rs:29:18\n\
    \   |\n29 |             Some(str)\n   |                  ^^^ not a value\n\nerror[E0271]:\
    \ type mismatch resolving `<std::vec::IntoIter<String> as Iterator>::Item == &_`\n\
    \    --> /tmp/tmped3nq_5o.rs:14:50\n     |\n14   |     let mut sorted_strings\
    \ = strings.into_iter().copied().sorted();\n     |                           \
    \                       ^^^^^^ expected reference, found struct `String`\n   \
    \  |\n     = note: expected reference `&_`\n                   found struct `String`\n\
    note: required by a bound in `copied`\n\nerror[E0599]: no method named `sorted`\
    \ found for struct `Copied` in the current scope\n  --> /tmp/tmped3nq_5o.rs:14:59\n\
    \   |\n14 |     let mut sorted_strings = strings.into_iter().copied().sorted();\n\
    \   |                                                           ^^^^^^ method\
    \ not found in `Copied<std::vec::IntoIter<String>>`\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0271, E0423, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().map(|s| s.len()).max()\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg6pbfqfr.rs:9:5\n  |\n8 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n9 |     strings.iter().map(|s| s.len()).max()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `usize`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<usize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .fold(\n        \
    \    None,\n            |max_len, string| {\n                if string.is_empty()\
    \ {\n                    max_len\n                } else {\n                 \
    \   max_len.cmp(&string.len()).unwrap_or(max_len.len())\n                }\n \
    \           },\n        )\n}\n\nfn main() {\n    let candidate = longest;\n  \
    \  assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp17u9hsxp.rs:17:33\n   |\n\
    17 |                     max_len.cmp(&string.len()).unwrap_or(max_len.len())\n\
    \   |                                 ^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `usize`\n   |\n   = note: expected reference `&Option<String>`\n           \
    \   found reference `&usize`\n\nerror[E0599]: no method named `unwrap_or` found\
    \ for enum `std::cmp::Ordering` in the current scope\n  --> /tmp/tmp17u9hsxp.rs:17:48\n\
    \   |\n17 |                     max_len.cmp(&string.len()).unwrap_or(max_len.len())\n\
    \   |                                                ^^^^^^^^^ method not found\
    \ in `std::cmp::Ordering`\n\nerror[E0599]: no method named `len` found for enum\
    \ `Option` in the current scope\n  --> /tmp/tmp17u9hsxp.rs:17:66\n   |\n17 | \
    \                    max_len.cmp(&string.len()).unwrap_or(max_len.len())\n   |\
    \                                                                  ^^^ method\
    \ not found in `Option<String>`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut res = strings.iter().fold(String::new(), |mut a, s| {\n     \
    \   if a.len() < s.len() {\n            a = s;\n        }\n        a\n    });\n\
    \    if res.len() == 0 {\n        return None;\n    }\n    Some(res.to_owned())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc3uavoe1.rs:14:17\n   |\n\
    12 |     let mut res = strings.iter().fold(String::new(), |mut a, s| {\n   | \
    \                                                          - expected due to this\
    \ parameter type\n13 |         if a.len() < s.len() {\n14 |             a = s;\n\
    \   |                 ^- help: try using a conversion method: `.to_string()`\n\
    \   |                 |\n   |                 expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, x| if x.length > max.len()\
    \ {\n        Some(x.clone());\n    } else {\n        None\n    })\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `length` on type `&String`\n --> /tmp/tmpjrdvxo8m.rs:9:45\n\
    \  |\n9 |     strings.iter().fold(None, |max, x| if x.length > max.len() {\n \
    \ |                                             ^^^^^^ unknown field\n\nerror[E0599]:\
    \ no method named `len` found for enum `Option` in the current scope\n --> /tmp/tmpjrdvxo8m.rs:9:58\n\
    \  |\n9 |     strings.iter().fold(None, |max, x| if x.length > max.len() {\n \
    \ |                                                          ^^^ method not found\
    \ in `Option<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjrdvxo8m.rs:9:64\n\
    \   |\n9  |       strings.iter().fold(None, |max, x| if x.length > max.len() {\n\
    \   |  ________________________________________________________________^\n10 |\
    \ |         Some(x.clone());\n   | |                        - help: remove this\
    \ semicolon\n11 | |     } else {\n   | |_____^ expected enum `Option`, found `()`\n\
    \   |\n   = note:   expected enum `Option<String>`\n           found unit type\
    \ `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599, E0609.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .into_iter()\n        .map(|s| s.len()\
    \ as u32)\n        .max()\n        .cloned()\n        .ok()\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<u32>` is not an iterator\n   --> /tmp/tmpplriwdf7.rs:13:10\n\
    \    |\n13  |           .cloned()\n    |            ^^^^^^ `Option<u32>` is not\
    \ an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<u32>: Iterator`\n            which is required by `&mut Option<u32>:\
    \ Iterator`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut long_string: Option<String> = None;\n    let mut longest =\
    \ strings[0].len();\n    for s in strings.iter() {\n        if s.len() > longest\
    \ {\n            longest = s.len();\n            long_string = Some(s);\n    \
    \    }\n    }\n    long_string\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp00tt_kfi.rs:18:32\n   |\n\
    18 |             long_string = Some(s);\n   |                                ^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \              |\n   |                                expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    // We use some sorting algorithm to find the longest\
    \ string in the list\n    // and return the first\n    let mut longest_len = MAX_LEN;\n\
    \    let mut longest_pos = 0;\n\n    for s in strings {\n        let len = s.len();\n\
    \        if len > longest_len {\n            longest_len = len;\n            longest_pos\
    \ = 0;\n        }\n        if len == longest_len {\n            if longest_pos\
    \ == 0 {\n                longest_pos = 0;\n            }\n        } else {\n\
    \            longest_pos = longest_pos + 1;\n        }\n    }\n\n    if longest_pos\
    \ == 0 {\n        return None;\n    }\n\n    // Return the first element\n   \
    \ strings.iter().next().unwrap()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `MAX_LEN` in this scope\n  --> /tmp/tmp1xlekfjm.rs:11:27\n\
    \   |\n11 |     let mut longest_len = MAX_LEN;\n   |                         \
    \  ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1xlekfjm.rs:34:5\n\
    \   |\n8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                              -------------- expected `Option<String>` because\
    \ of return type\n...\n34 |     strings.iter().next().unwrap()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `&String`\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut min_len = std::mem::size_of::<usize>() as usize;\n    let mut\
    \ longest_len = 0;\n\n    for s in strings {\n        let len = s.len();\n   \
    \     if len > longest_len {\n            longest_len = len;\n            match\
    \ min_len {\n                0 => min_len = len,\n                m => if len\
    \ < m { min_len = m }\n            }\n        }\n    }\n\n    strings.iter().position(|s|\
    \ s.len() == longest_len).map(|i| strings[i])\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0507]: cannot move out of index of `Vec<String>`\n  --> /tmp/tmpxka6srha.rs:27:65\n\
    \   |\n27 |     strings.iter().position(|s| s.len() == longest_len).map(|i| strings[i])\n\
    \   |                                                                 ^^^^^^^^^^\
    \ move occurs because value has type `String`, which does not implement the `Copy`\
    \ trait\n\nerror[E0382]: borrow of moved value: `strings`\n   --> /tmp/tmpxka6srha.rs:27:5\n\
    \    |\n8   | fn longest(strings: Vec<String>) -> Option<String> {\n    |    \
    \        ------- move occurs because `strings` has type `Vec<String>`, which does\
    \ not implement the `Copy` trait\n...\n16  |     for s in strings {\n    |   \
    \           ------- `strings` moved due to this implicit call to `.into_iter()`\n\
    ...\n27  |     strings.iter().position(|s| s.len() == longest_len).map(|i| strings[i])\n\
    \    |     ^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `strings`\n    = note: borrow\
    \ occurs due to deref coercion to `[String]`\nhelp: consider iterating over a\
    \ slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n \
    \   |\n16  |     for s in &strings {\n    |              +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0382, E0507.\n\
    For more information about an error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = -1;\n    for s in strings {\n   \
    \     let len = s.len();\n        if max_len < len {\n            max_len = len;\n\
    \        }\n    }\n    if max_len == -1 {\n        return None;\n    }\n    strings.iter().max().or_else(||\
    \ strings.first())\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpls8sh9b0.rs:9:23\n\
    \  |\n9 |     let mut max_len = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmpls8sh9b0.rs:16:19\n   |\n16 |     if max_len\
    \ == -1 {\n   |                   ^^\n   |                   |\n   |         \
    \          cannot apply unary operator `-`\n   |                   help: you may\
    \ have meant the maximum value of `usize`: `usize::MAX`\n   |\n   = note: unsigned\
    \ values cannot be negated\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpls8sh9b0.rs:19:5\n\
    \   |\n8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                              -------------- expected `Option<String>` because\
    \ of return type\n...\n19 |     strings.iter().max().or_else(|| strings.first())\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `&String`\n   |\n   = note: expected enum `Option<String>`\n         \
    \     found enum `Option<&String>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0600.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut maxlen = -1;\n    let mut result = String::new();\n\
    \    for s in strings {\n        let len = s.len();\n        if len > maxlen {\n\
    \            maxlen = len;\n            result = s;\n        }\n    }\n    Some(result)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp5kv62f4g.rs:9:22\n\
    \  |\n9 |     let mut maxlen = -1;\n  |                      ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut length = Vec::new();\n    for s in strings.into_iter()\
    \ {\n        length.push(s.len());\n    }\n    let mut max_len = -1;\n    for\
    \ s in strings.into_iter() {\n        if max_len < s.len() {\n            max_len\
    \ = s.len();\n        }\n    }\n    let mut ret = Some(strings[0]);\n    for s\
    \ in strings.into_iter() {\n        if max_len < s.len() {\n            ret =\
    \ Some(s);\n        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmppn7vqunw.rs:13:23\n\
    \   |\n13 |     let mut max_len = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .fold(\n        \
    \    None,\n            |mut acc, elem| match acc {\n                Some(mut\
    \ acc2) => if acc.len() < elem\n                    || acc2.len() > elem\n   \
    \                 || acc2.len() == elem && acc2.iter().all(|x| x != elem) {\n\
    \                    Some(elem);\n                } else {\n                 \
    \   Some(acc.unwrap().clone());\n                },\n                None => Some(elem),\n\
    \            },\n        )\n}\n\nfn main() {\n    let candidate = longest;\n \
    \   assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmphrahy6pl.rs:14:42\n   |\n14 |                 Some(mut\
    \ acc2) => if acc.len() < elem\n   |                                         \
    \ ^^^ method not found in `Option<String>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphrahy6pl.rs:15:37\n   |\n15 |                     || acc2.len()\
    \ > elem\n   |                                     ^^^^ expected `usize`, found\
    \ `&String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphrahy6pl.rs:16:38\n\
    \   |\n16 |                     || acc2.len() == elem && acc2.iter().all(|x| x\
    \ != elem) {\n   |                                      ^^^^ expected `usize`,\
    \ found `&String`\n\nerror[E0599]: no method named `iter` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmphrahy6pl.rs:16:51\n   |\n16 |          \
    \           || acc2.len() == elem && acc2.iter().all(|x| x != elem) {\n   |  \
    \                                                 ^^^^ method not found in `String`\n\
    \   |\nhelp: because of the in-memory representation of `&str`, to obtain an `Iterator`\
    \ over each of its codepoint use method `chars`\n   |\n16 |                  \
    \   || acc2.len() == elem && acc2.chars().all(|x| x != elem) {\n   |         \
    \                                          ~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphrahy6pl.rs:16:77\n   |\n16 |                       || acc2.len()\
    \ == elem && acc2.iter().all(|x| x != elem) {\n   |  _____________________________________________________________________________^\n\
    17 | |                     Some(elem);\n18 | |                 } else {\n   |\
    \ |_________________^ expected enum `Option`, found `()`\n   |\n   = note:   expected\
    \ enum `Option<String>`\n           found unit type `()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphrahy6pl.rs:18:24\n   |\n18 |                   } else\
    \ {\n   |  ________________________^\n19 | |                     Some(acc.unwrap().clone());\n\
    \   | |                                               - help: remove this semicolon\n\
    20 | |                 },\n   | |_________________^ expecte"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0];\n    for i in 1..strings.len() {\n    \
    \    let s = strings[i];\n        if longest == s {\n            continue;\n \
    \       }\n        if s.len() > longest.len() {\n            longest = s;\n  \
    \      }\n    }\n    longest\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgckm0hpn.rs:22:5\n   |\n\
    8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n22 |     longest\n   |     ^^^^^^^ expected enum `Option`, found\
    \ struct `String`\n   |\n   = note: expected enum `Option<String>`\n         \
    \   found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n\
    22 |     Some(longest)\n   |     +++++       +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |a, b| {\n        if a.len()\
    \ < b.len() {\n            Some(a)\n        } else {\n            Some(b)\n  \
    \      }\n    })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpd7j8_b9w.rs:10:14\n   |\n10 |         if a.len() < b.len()\
    \ {\n   |              ^^^ method not found in `Option<String>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd7j8_b9w.rs:11:18\n   |\n11 |             Some(a)\n\
    \   |                  ^ expected struct `String`, found enum `Option`\n   |\n\
    \   = note: expected struct `String`\n                found enum `Option<String>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpd7j8_b9w.rs:13:18\n   |\n13 |\
    \             Some(b)\n   |                  ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                  |\n   |                  expected struct\
    \ `String`, found `&String`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest = String::new();\n    for s in strings\
    \ {\n        if longest < s.len() {\n            longest = s.len();\n        }\n\
    \    }\n    if longest > 0 {\n        Some(longest.clone())\n    } else {\n  \
    \      None\n    }\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2qstqvx_.rs:11:22\n   |\n\
    11 |         if longest < s.len() {\n   |                      ^^^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                      |\n\
    \   |                      expected struct `String`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2qstqvx_.rs:12:23\n   |\n9  |     let mut longest\
    \ = String::new();\n   |                       ------------- expected due to this\
    \ value\n...\n12 |             longest = s.len();\n   |                      \
    \ ^^^^^^^- help: try using a conversion method: `.to_string()`\n   |         \
    \              |\n   |                       expected struct `String`, found `usize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2qstqvx_.rs:15:18\n   |\n15 |\
    \     if longest > 0 {\n   |                  ^- help: try using a conversion\
    \ method: `.to_string()`\n   |                  |\n   |                  expected\
    \ struct `String`, found integer\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max, &s| {\n        if let\
    \ Some(len) = s.chars().count() {\n            if len > max {\n              \
    \  Some(s)\n            } else {\n                Some(s.clone())\n          \
    \  }\n        } else {\n            None\n        }\n    })\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprdwsm_31.rs:10:16\n   |\n\
    10 |         if let Some(len) = s.chars().count() {\n   |                ^^^^^^^^^\
    \   ----------------- this expression has type `usize`\n   |                |\n\
    \   |                expected `usize`, found enum `Option`\n   |\n   = note: expected\
    \ type `usize`\n              found enum `Option<_>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .into_iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .unwrap_or(0)\n}\n\nfn main() {\n    let candidate =\
    \ longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps44dzgr1.rs:9:5\n   |\n8\
    \  |   fn longest(strings: Vec<String>) -> Option<String> {\n   |            \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n9  | /     strings\n10 | |         .into_iter()\n11 | |       \
    \  .map(|s| s.len())\n12 | |         .max()\n13 | |         .unwrap_or(0)\n  \
    \ | |_____________________^ expected enum `Option`, found `usize`\n   |\n   =\
    \ note: expected enum `Option<String>`\n              found type `usize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest = Some(String::new());\n    for s in\
    \ strings {\n        if let Some(len) = s.len() {\n            if let Some(pref)\
    \ = longest.take() {\n                if len < pref.len() {\n                \
    \    longest = Some(s);\n                }\n            } else {\n           \
    \     longest = Some(s);\n            }\n        }\n    }\n    longest\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp81rm8f41.rs:11:16\n   |\n\
    11 |         if let Some(len) = s.len() {\n   |                ^^^^^^^^^   -------\
    \ this expression has type `usize`\n   |                |\n   |              \
    \  expected `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n\
    \              found enum `Option<_>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut len = std::collections::HashSet::new();\n \
    \   for s in strings {\n        len.insert(s.len());\n    }\n\n    let mut max\
    \ = std::collections::HashSet::new();\n    for s in len.iter() {\n        match\
    \ max {\n            std::collections::HashSet::with_capacity(_) => {\n      \
    \          max.insert(s);\n            },\n            _ => (),\n        }\n \
    \   }\n    match max {\n        std::collections::HashSet::with_capacity(_) =>\
    \ {\n            None\n        },\n        _ => Some(len.iter().max_by_key(|v|\
    \ v.0).unwrap()),\n    }\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0164]: expected tuple struct or tuple variant, found associated\
    \ function `std::collections::HashSet::with_capacity`\n  --> /tmp/tmpezvkvcvu.rs:17:13\n\
    \   |\n17 |             std::collections::HashSet::with_capacity(_) => {\n   |\
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `fn` calls are not allowed\
    \ in patterns\n   |\n   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \nerror[E0164]: expected tuple struct or tuple variant, found associated function\
    \ `std::collections::HashSet::with_capacity`\n  --> /tmp/tmpezvkvcvu.rs:24:9\n\
    \   |\n24 |         std::collections::HashSet::with_capacity(_) => {\n   |   \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `fn` calls are not allowed\
    \ in patterns\n   |\n   = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n\
    \nerror[E0609]: no field `0` on type `&&usize`\n  --> /tmp/tmpezvkvcvu.rs:27:47\n\
    \   |\n27 |         _ => Some(len.iter().max_by_key(|v| v.0).unwrap()),\n   |\
    \                                               ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpezvkvcvu.rs:27:19\n   |\n27 |         _ => Some(len.iter().max_by_key(|v|\
    \ v.0).unwrap()),\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \ |\n   |                   expected struct `String`, found `&usize`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0164, E0308, E0609.\nFor more information about an error, try `rustc --explain\
    \ E0164`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = std::u32::MAX;\n    let mut result\
    \ = String::with_capacity(1);\n    for s in strings {\n        let len = s.len();\n\
    \        if max_len < len {\n            max_len = len;\n            result =\
    \ s;\n        }\n    }\n    result.ok()\n}\n\nfn main() {\n    let candidate =\
    \ longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyd9325cg.rs:13:22\n   |\n\
    13 |         if max_len < len {\n   |                      ^^^ expected `u32`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to a `u32` and panic if\
    \ the converted value doesn't fit\n   |\n13 |         if max_len < len.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyd9325cg.rs:14:23\n   |\n9  |     let mut max_len = std::u32::MAX;\n\
    \   |                       ------------- expected due to this value\n...\n14\
    \ |             max_len = len;\n   |                       ^^^ expected `u32`,\
    \ found `usize`\n\nerror[E0599]: no method named `ok` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpyd9325cg.rs:18:12\n   |\n18 |     result.ok()\n\
    \   |            ^^ method not found in `String`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    // Find the longest string in input list that isn't\
    \ empty.\n    let mut longest_len = String::new();\n    for s in strings.iter()\
    \ {\n        let len = s.chars().count();\n        if len > longest_len.len()\
    \ {\n            longest_len = len;\n        }\n    }\n\n    // If there are multiple\
    \ strings of the same length, return the first one. Otherwise, return None.\n\
    \    if longest_len.len() != strings[0].chars().count() {\n        return None;\n\
    \    }\n\n    // Otherwise, return the longest one.\n    longest_len\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd2hapxq5.rs:14:27\n   |\n\
    10 |     let mut longest_len = String::new();\n   |                          \
    \ ------------- expected due to this value\n...\n14 |             longest_len\
    \ = len;\n   |                           ^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                           |\n   |                     \
    \      expected struct `String`, found `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd2hapxq5.rs:24:5\n   |\n8  | fn longest(strings: Vec<String>) ->\
    \ Option<String> {\n   |                                     -------------- expected\
    \ `Option<String>` because of return type\n...\n24 |     longest_len\n   |   \
    \  ^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note:\
    \ expected enum `Option<String>`\n            found struct `String`\nhelp: try\
    \ wrapping the expression in `Some`\n   |\n24 |     Some(longest_len)\n   |  \
    \   +++++           +\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut best_len = -1;\n    let mut best_string = String::default();\n\
    \    for s in strings {\n        let len = s.len();\n        if len > best_len\
    \ {\n            best_len = len;\n            best_string = s;\n        }\n  \
    \  }\n    Some(best_string)\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpbj1g5z6q.rs:9:24\n\
    \  |\n9 |     let mut best_len = -1;\n  |                        ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut len = Vec::with_capacity(strings.len());\n\
    \    for s in strings {\n        len.push(s.len());\n    }\n    len.sort_unstable();\n\
    \    let mut longest_str = String::new();\n    let mut longest = Some(String::new());\n\
    \    let mut has_longest = false;\n    for i in 0..(len.len() - 1) {\n       \
    \ if len[i] == len[i+1] {\n            has_longest = true;\n            if longest_str.len()\
    \ < s.len() {\n                longest_str.resize(s.len(), ' ');\n           \
    \ }\n            longest_str.push_str(&s[i as usize]);\n        } else if has_longest\
    \ {\n            has_longest = false;\n            if longest_str.len() > s.len()\
    \ {\n                return longest;\n            }\n            longest_str.resize(s.len(),\
    \ ' ');\n            longest_str.push_str(&s[i as usize]);\n        } else if\
    \ longest_str.len() < s.len() {\n            longest_str.resize(s.len(), ' ');\n\
    \            longest_str.push_str(&s[i as usize]);\n        }\n    }\n    if has_longest\
    \ {\n        longest = Some(longest_str);\n    }\n    longest\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `s` in this scope\n  --> /tmp/tmph27q_79r.rs:20:36\n\
    \   |\n20 |             if longest_str.len() < s.len() {\n   |               \
    \                     ^ help: a local variable with a similar name exists: `i`\n\
    \nerror[E0425]: cannot find value `s` in this scope\n  --> /tmp/tmph27q_79r.rs:21:36\n\
    \   |\n21 |                 longest_str.resize(s.len(), ' ');\n   |          \
    \                          ^ help: a local variable with a similar name exists:\
    \ `i`\n\nerror[E0425]: cannot find value `s` in this scope\n  --> /tmp/tmph27q_79r.rs:23:35\n\
    \   |\n23 |             longest_str.push_str(&s[i as usize]);\n   |          \
    \                         ^ help: a local variable with a similar name exists:\
    \ `i`\n\nerror[E0425]: cannot find value `s` in this scope\n  --> /tmp/tmph27q_79r.rs:26:36\n\
    \   |\n26 |             if longest_str.len() > s.len() {\n   |               \
    \                     ^ help: a local variable with a similar name exists: `i`\n\
    \nerror[E0425]: cannot find value `s` in this scope\n  --> /tmp/tmph27q_79r.rs:29:32\n\
    \   |\n29 |             longest_str.resize(s.len(), ' ');\n   |              \
    \                  ^ help: a local variable with a similar name exists: `i`\n\n\
    error[E0425]: cannot find value `s` in this scope\n  --> /tmp/tmph27q_79r.rs:30:35\n\
    \   |\n30 |             longest_str.push_str(&s[i as usize]);\n   |          \
    \                         ^ help: a local variable with a similar name exists:\
    \ `i`\n\nerror[E0425]: cannot find value `s` in this scope\n  --> /tmp/tmph27q_79r.rs:31:39\n\
    \   |\n31 |         } else if longest_str.len() < s.len() {\n   |            \
    \                           ^ help: a local variable with a similar name exists:\
    \ `i`\n\nerror[E0425]: cannot find value `s` in this scope\n  --> /tmp/tmph27q_79r.rs:32:32\n\
    \   |\n32 |             longest_str.resize(s.len(), ' ');\n   |              \
    \                  ^ help: a local variable with a similar name exists: `i`\n\n\
    error[E0425]: cannot find value `s` in this scope\n  --> /tmp/tmph27q_79r.rs:33:35\n\
    \   |\n33 |             longest_str.push_str(&s[i as usize]);\n   |         "
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = std::cmp::max::<usize>(1);\n    let\
    \ mut max_str = String::new();\n    for s in strings {\n        if s.len() < max_len\
    \ {\n            max_len = s.len();\n            max_str = s;\n        }\n   \
    \ }\n    max_str.ok_or(format_err!(\"Not enough strings with length {}\", max_len))\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `format_err` in this scope\n   --> /tmp/tmpu2jcpxj5.rs:17:19\n\
    \    |\n17  |       max_str.ok_or(format_err!(\"Not enough strings with length\
    \ {}\", max_len))\n    |                     ^^^^^^^^^^ help: a macro with a similar\
    \ name exists: `format_args`\n\nerror[E0061]: this function takes 2 arguments\
    \ but 1 argument was supplied\n    --> /tmp/tmpu2jcpxj5.rs:9:23\n     |\n9   \
    \ |     let mut max_len = std::cmp::max::<usize>(1);\n     |                 \
    \      ^^^^^^^^^^^^^^^^^^^^^^ - supplied 1 argument\n     |                  \
    \     |\n     |                       expected 2 arguments\n     |\nnote: function\
    \ defined here\n\nerror[E0599]: no method named `ok_or` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpu2jcpxj5.rs:17:13\n   |\n17 |     max_str.ok_or(format_err!(\"\
    Not enough strings with length {}\", max_len))\n   |             ^^^^^ method\
    \ not found in `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut len = strings[0].get_len();\n    for s in &strings {\n      \
    \  if s.get_len() > len {\n            len = s.get_len();\n        }\n    }\n\
    \    Some(strings[strings.len() - 1])\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `get_len` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp5k_payh4.rs:12:30\n   |\n12 |     let mut len =\
    \ strings[0].get_len();\n   |                              ^^^^^^^ method not\
    \ found in `String`\n\nerror[E0599]: no method named `get_len` found for reference\
    \ `&String` in the current scope\n  --> /tmp/tmp5k_payh4.rs:14:14\n   |\n14 |\
    \         if s.get_len() > len {\n   |              ^^^^^^^ method not found in\
    \ `&String`\n\nerror[E0599]: no method named `get_len` found for reference `&String`\
    \ in the current scope\n  --> /tmp/tmp5k_payh4.rs:15:21\n   |\n15 |          \
    \   len = s.get_len();\n   |                     ^^^^^^^ method not found in `&String`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    // We have nothing to do\n    if strings.is_empty()\
    \ {\n        return None;\n    }\n\n    // Find longest string\n    let mut max_len\
    \ = String::new();\n    let mut max_str_len = 0;\n    let mut longest_str = String::new();\n\
    \n    for s in strings {\n        let len = s.len();\n        if max_len.len()\
    \ > len {\n            max_len = &s[len..];\n            max_str_len = len;\n\
    \            longest_str = s;\n        }\n    }\n\n    // If all strings match\
    \ the length of the longest string, return it instead of None\n    if longest_str.len()\
    \ == max_str_len {\n        return longest_str;\n    }\n\n    // If all strings\
    \ match the length of the longest string, return None instead of the longest string\n\
    \    if max_len.len() == 0 {\n        return None;\n    }\n\n    Some(max_len[..])\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjg1yes9t.rs:22:23\n   |\n\
    15 |     let mut max_len = String::new();\n   |                       -------------\
    \ expected due to this value\n...\n22 |             max_len = &s[len..];\n   |\
    \                       ^^^^^^^^^ expected struct `String`, found `&str`\n   |\n\
    help: try using a conversion method\n   |\n22 |             max_len = (&s[len..]).to_string();\n\
    \   |                       +         +++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjg1yes9t.rs:30:16\n   |\n8  | fn longest(strings: Vec<String>)\
    \ -> Option<String> {\n   |                                     --------------\
    \ expected `Option<String>` because of return type\n...\n30 |         return longest_str;\n\
    \   |                ^^^^^^^^^^^ expected enum `Option`, found struct `String`\n\
    \   |\n   = note: expected enum `Option<String>`\n            found struct `String`\n\
    help: try wrapping the expression in `Some`\n   |\n30 |         return Some(longest_str);\n\
    \   |                +++++           +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpjg1yes9t.rs:38:10\n   |\n38 |     Some(max_len[..])\n   |          ^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |          |\n   | \
    \         expected struct `String`, found `str`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().map(|s| s.len() as u64).max().unwrap_or(\n\
    \        strings.iter().map(|s| s.len() as u64).max(),\n    )\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdcgpvjeu.rs:10:9\n   |\n\
    10 |         strings.iter().map(|s| s.len() as u64).max(),\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `u64`, found enum `Option`\n   |\n   = note: expected type `u64`\n\
    \              found enum `Option<u64>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpdcgpvjeu.rs:9:5\n   |\n8  |   fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n   |                                       -------------- expected `Option<String>`\
    \ because of return type\n9  | /     strings.iter().map(|s| s.len() as u64).max().unwrap_or(\n\
    10 | |         strings.iter().map(|s| s.len() as u64).max(),\n11 | |     )\n \
    \  | |_____^ expected enum `Option`, found `u64`\n   |\n   = note: expected enum\
    \ `Option<String>`\n              found type `u64`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(\n        None,\n        |acc,\
    \ s| {\n            match acc.get().len() {\n                0 => Some(s),\n \
    \               _ => acc.map(|s| s | s),\n            }\n        },\n    )\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `get` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmp5kghh3td.rs:12:23\n   |\n12 |             match acc.get().len()\
    \ {\n   |                       ^^^ method not found in `Option<String>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5kghh3td.rs:13:27\n   |\n13 |              \
    \   0 => Some(s),\n   |                           ^- help: try using a conversion\
    \ method: `.to_string()`\n   |                           |\n   |             \
    \              expected struct `String`, found `&String`\n\nerror[E0369]: no implementation\
    \ for `String | String`\n  --> /tmp/tmp5kghh3td.rs:14:36\n   |\n14 |         \
    \        _ => acc.map(|s| s | s),\n   |                                  - ^ -\
    \ String\n   |                                  |\n   |                      \
    \            String\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut strings_len = std::cmp::max(strings.len(),\
    \ 1);\n    let mut mut_index = strings.len() - 1;\n    let mut last_one = None;\n\
    \    while mut_index >= 0 && mut_index < strings_len {\n        let string = &strings[mut_index];\n\
    \        if string.len() == strings_len {\n            last_one = Some(string.clone());\n\
    \            break;\n        }\n        if string.len() > strings_len {\n    \
    \        strings_len = string.len();\n        }\n        mut_index -= 1;\n   \
    \ }\n    Some(last_one)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcboei_in.rs:23:10\n   |\n\
    23 |     Some(last_one)\n   |          ^^^^^^^^ expected struct `String`, found\
    \ enum `Option`\n   |\n   = note: expected struct `String`\n                found\
    \ enum `Option<String>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max_len, s| {\n        let\
    \ len = s.len();\n        if len > max_len {\n            max_len = len;\n   \
    \     }\n        Some(s)\n    })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqrciplm9.rs:11:18\n   |\n\
    11 |         if len > max_len {\n   |                  ^^^^^^^ expected `usize`,\
    \ found enum `Option`\n   |\n   = note: expected type `usize`\n              found\
    \ enum `Option<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqrciplm9.rs:12:23\n\
    \   |\n9  |     strings.iter().fold(None, |max_len, s| {\n   |               \
    \                 ------- expected due to this parameter type\n...\n12 |     \
    \        max_len = len;\n   |                       ^^^ expected enum `Option`,\
    \ found `usize`\n   |\n   = note: expected enum `Option<String>`\n           \
    \   found type `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqrciplm9.rs:14:14\n\
    \   |\n14 |         Some(s)\n   |              ^- help: try using a conversion\
    \ method: `.to_string()`\n   |              |\n   |              expected struct\
    \ `String`, found `&String`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(\n        None,\n        |longest_so_far,\
    \ string| longest_so_far.map(|x| {\n            if x.len() == string.len() {\n\
    \                x\n            } else {\n                Some(string)\n     \
    \       }\n        }),\n    )\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmp0mpjbnlz.rs:15:17\n\
    \   |\n12 | /             if x.len() == string.len() {\n13 | |               \
    \  x\n   | |                 - expected because of this\n14 | |             }\
    \ else {\n15 | |                 Some(string)\n   | |                 ^^^^^^^^^^^^\
    \ expected struct `String`, found enum `Option`\n16 | |             }\n   | |_____________-\
    \ `if` and `else` have incompatible types\n   |\n   = note: expected struct `String`\n\
    \                found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut len: usize = 0;\n    let mut longest_len = -1;\n    let mut len_index\
    \ = 0;\n    let mut longest_len_pos = 0;\n    for string in strings {\n      \
    \  match string.len() {\n            0 => continue,\n            _ => {\n    \
    \            len = string.len();\n                longest_len = len;\n       \
    \         len_index = 0;\n                longest_len_pos = 0;\n            }\n\
    \        }\n        if len > longest_len {\n            longest_len = len;\n \
    \           longest_len_pos = len_index;\n        }\n        len_index += 1;\n\
    \    }\n    if longest_len == 0 {\n        return None;\n    }\n    if longest_len_pos\
    \ == 0 {\n        strings.next()\n    } else {\n        strings[longest_len_pos]\n\
    \    }\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpwr090l0m.rs:13:27\n\
    \   |\n13 |     let mut longest_len = -1;\n   |                           ^^ the\
    \ trait `Neg` is not implemented for `usize`\n   |\n   = help: the following other\
    \ types implement trait `Neg`:\n             &f32\n             &f64\n       \
    \      &i128\n             &i16\n             &i32\n             &i64\n      \
    \       &i8\n             &isize\n           and 8 others\n\nerror[E0599]: no\
    \ method named `next` found for struct `Vec<String>` in the current scope\n  -->\
    \ /tmp/tmpwr090l0m.rs:36:17\n   |\n36 |         strings.next()\n   |         \
    \        ^^^^ method not found in `Vec<String>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwr090l0m.rs:38:9\n   |\n8  | fn longest(strings: Vec<String>) ->\
    \ Option<String> {\n   |                                     -------------- expected\
    \ `Option<String>` because of return type\n...\n38 |         strings[longest_len_pos]\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n\
    \   |\n   = note: expected enum `Option<String>`\n            found struct `String`\n\
    help: try wrapping the expression in `Some`\n   |\n38 |         Some(strings[longest_len_pos])\n\
    \   |         +++++                        +\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.sort_by_key(|&x| x.len()).last()\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmpr92yl4m_.rs:9:39\n\
    \  |\n9 |     strings.sort_by_key(|&x| x.len()).last()\n  |                  \
    \                     ^^^^ `()` is not an iterator\n  |\n  = note: the following\
    \ trait bounds were not satisfied:\n          `(): Iterator`\n          which\
    \ is required by `&mut (): Iterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter()\n        .map(|s| s.len())\n       \
    \ .max()\n        .cloned()\n        .cloned()\n        .unwrap()\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpyl6pn97x.rs:12:10\n\
    \    |\n12  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        None\n    } else {\n\
    \        let mut lens = Vec::with_capacity(strings.len());\n        for s in strings\
    \ {\n            lens.push_back(s.len());\n        }\n        lens.sort();\n \
    \       let max_len = lens.iter().max().unwrap();\n        Some(strings[lens.iter().position(|x|\
    \ x == max_len).unwrap()])\n    }\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmpmkybwdcx.rs:14:18\n   |\n14 |             lens.push_back(s.len());\n\
    \   |                  ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longer = String::new();\n    let mut shorter\
    \ = String::new();\n    for s in strings {\n        if s.len() > longer.len()\
    \ {\n            longer = s;\n        } else if s.len() < shorter.len() {\n  \
    \          shorter = s;\n        }\n    }\n    longest(vec![longer, shorter]).unwrap_or_else(||\
    \ strings[0])\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp921sv9an.rs:18:5\n   |\n\
    8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n18 |     longest(vec![longer, shorter]).unwrap_or_else(|| strings[0])\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n\
    \            found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n18 |     Some(longest(vec![longer, shorter]).unwrap_or_else(|| strings[0]))\n\
    \   |     +++++                                                            +\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, string| if acc.is_none()\
    \ { acc = Some(string) } else if string.is_suffix_of(acc.unwrap()) {\n       \
    \ Some(acc.unwrap())\n    } else { acc = Some(acc.unwrap().push_str(string).unwrap())\
    \ })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5pocfojg.rs:9:79\n  |\n9 |\
    \     strings.iter().fold(None, |mut acc, string| if acc.is_none() { acc = Some(string)\
    \ } else if string.is_suffix_of(acc.unwrap()) {\n  |                         \
    \                                                      ^^^^^^- help: try using\
    \ a conversion method: `.to_string()`\n  |                                   \
    \                                            |\n  |                          \
    \                                                     expected struct `String`,\
    \ found `&String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5pocfojg.rs:9:68\n\
    \  |\n9 |     strings.iter().fold(None, |mut acc, string| if acc.is_none() { acc\
    \ = Some(string) } else if string.is_suffix_of(acc.unwrap()) {\n  |          \
    \                                                          ^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `()`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found unit type `()`\nhelp: try adding an expression at the end of\
    \ the block\n  |\n9 ~     strings.iter().fold(None, |mut acc, string| if acc.is_none()\
    \ { acc = Some(string);\n10~     None } else if string.is_suffix_of(acc.unwrap())\
    \ {\n  |\n9 ~     strings.iter().fold(None, |mut acc, string| if acc.is_none()\
    \ { acc = Some(string);\n10~     Some(()) } else if string.is_suffix_of(acc.unwrap())\
    \ {\n  |\n\nerror[E0599]: no method named `is_suffix_of` found for reference `&String`\
    \ in the current scope\n --> /tmp/tmp5pocfojg.rs:9:104\n  |\n9 |     strings.iter().fold(None,\
    \ |mut acc, string| if acc.is_none() { acc = Some(string) } else if string.is_suffix_of(acc.unwrap())\
    \ {\n  |                                                                     \
    \                                   ^^^^^^^^^^^^ method not found in `&String`\n\
    \  |\n  = help: items from traits can only be used if the trait is in scope\n\
    help: the following trait is implemented but not in scope; perhaps add a `use`\
    \ for it:\n  |\n1 | use std::str::pattern::Pattern;\n  |\n\nerror[E0599]: no method\
    \ named `unwrap` found for unit type `()` in the current scope\n  --> /tmp/t"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len()\
    \ as i64)\n        .max().map(|len| strings.iter().filter(|s| s.len() == len).max())\n\
    \        .map(|s| s.unwrap())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq7i__5ml.rs:12:63\n   |\n\
    12 |         .max().map(|len| strings.iter().filter(|s| s.len() == len).max())\n\
    \   |                                                               ^^^ expected\
    \ `usize`, found `i64`\n   |\nhelp: you can convert an `i64` to a `usize` and\
    \ panic if the converted value doesn't fit\n   |\n12 |         .max().map(|len|\
    \ strings.iter().filter(|s| s.len() == len.try_into().unwrap()).max())\n   | \
    \                                                                 ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpq7i__5ml.rs:9:5\n   |\n8  |  \
    \ fn longest(strings: Vec<String>) -> Option<String> {\n   |                 \
    \                      -------------- expected `Option<String>` because of return\
    \ type\n9  | /     strings\n10 | |         .iter()\n11 | |         .map(|s| s.len()\
    \ as i64)\n12 | |         .max().map(|len| strings.iter().filter(|s| s.len() ==\
    \ len).max())\n13 | |         .map(|s| s.unwrap())\n   | |____________________________^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest_str = None;\n    let mut longest_len = String::new();\n\
    \    for s in strings {\n        if s.len() > longest_len.len() {\n          \
    \  longest_len = s.len();\n            longest_str = s;\n        }\n    }\n  \
    \  longest_str.cloned()\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeisaromz.rs:16:27\n   |\n\
    13 |     let mut longest_len = String::new();\n   |                          \
    \ ------------- expected due to this value\n...\n16 |             longest_len\
    \ = s.len();\n   |                           ^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                           |\n   |             \
    \              expected struct `String`, found `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpeisaromz.rs:17:27\n   |\n12 |     let mut longest_str =\
    \ None;\n   |                           ---- expected due to this value\n...\n\
    17 |             longest_str = s;\n   |                           ^ expected enum\
    \ `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n\
    \            found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n17 |             longest_str = Some(s);\n   |                         \
    \  +++++ +\n\nerror[E0034]: multiple applicable items in scope\n  --> /tmp/tmpeisaromz.rs:20:17\n\
    \   |\n20 |     longest_str.cloned()\n   |                 ^^^^^^ multiple `cloned`\
    \ found\n   |\n   = note: candidate #1 is defined in an impl for the type `Option<&T>`\n\
    \   = note: candidate #2 is defined in an impl for the type `Option<&mut T>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0034, E0308.\nFor more information about an error, try `rustc --explain E0034`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut min_len = strings.len();\n    let mut result = strings[0][..];\n\
    \n    for &s in strings {\n        let len = s.len();\n        if len < min_len\
    \ {\n            min_len = len;\n            result = s;\n        }\n    }\n\n\
    \    Some(result)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n  --> /tmp/tmp54gdeirh.rs:14:9\n   |\n14 |     let mut result = strings[0][..];\n\
    \   |         ^^^^^^^^^^ doesn't have a size known at compile-time\n   |\n   =\
    \ help: the trait `Sized` is not implemented for `str`\n   = note: all local variables\
    \ must have a statically known size\n   = help: unsized locals are gated as an\
    \ unstable feature\nhelp: consider borrowing here\n   |\n14 |     let mut result\
    \ = &strings[0][..];\n   |                      +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp54gdeirh.rs:16:9\n   |\n16 |     for &s in strings {\n\
    \   |         ^^    ------- this expression has type `Option<String>`\n   |  \
    \       |\n   |         expected struct `String`, found reference\n   |      \
    \   help: you can probably remove the explicit borrow: `s`\n   |\n   = note: expected\
    \ struct `String`\n           found reference `&_`\n\nerror[E0277]: the size for\
    \ values of type `str` cannot be known at compilation time\n  --> /tmp/tmp54gdeirh.rs:20:13\n\
    \   |\n20 |             result = s;\n   |             ^^^^^^ doesn't have a size\
    \ known at compile-time\n   |\n   = help: the trait `Sized` is not implemented\
    \ for `str`\n   = note: the left-hand-side of an assignment must have a statically\
    \ known size\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp54gdeirh.rs:24:10\n\
    \   |\n24 |     Some(result)\n   |          ^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |          |\n   |          expected struct `String`,\
    \ found `str`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.sort_by(|a, b| a.len().cmp(&b.len()));\n\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    strings.last()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpapnv_ynm.rs:15:5\n   |\n\
    8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n15 |     strings.last()\n   |     ^^^^^^^^^^^^^^ expected struct\
    \ `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_length = 0;\n    let mut result = Some(strings[0]);\n\n\
    \    for i in 1..strings.len() {\n        if strings[i].len() > max_length {\n\
    \            result = Some(strings[i]);\n            max_length = strings[i].len();\n\
    \        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0507]: cannot move out of index of `Vec<String>`\n  --> /tmp/tmps1c8t9c_.rs:14:27\n\
    \   |\n14 |     let mut result = Some(strings[0]);\n   |                     \
    \      ^^^^^^^^^^ move occurs because value has type `String`, which does not\
    \ implement the `Copy` trait\n\nerror[E0507]: cannot move out of index of `Vec<String>`\n\
    \  --> /tmp/tmps1c8t9c_.rs:18:27\n   |\n18 |             result = Some(strings[i]);\n\
    \   |                           ^^^^^^^^^^ move occurs because value has type\
    \ `String`, which does not implement the `Copy` trait\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0507`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest_length: usize = 0;\n\n    for s in\
    \ strings.iter() {\n        if s.len() > longest_length {\n            longest_length\
    \ = s.len();\n        }\n    }\n\n    if longest_length > 0 {\n        strings.iter()\n\
    \            .fold(None, |mut longest, s| {\n                if longest == None\
    \ {\n                    longest = Some(s);\n                } else if longest.len()\
    \ < s.len() {\n                    longest = Some(s);\n                }\n   \
    \             longest\n            })\n    }\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpau1xn3ld.rs:21:36\n   |\n\
    21 |                     longest = Some(s);\n   |                            \
    \        ^- help: try using a conversion method: `.to_string()`\n   |        \
    \                            |\n   |                                    expected\
    \ struct `String`, found `&String`\n\nerror[E0599]: no method named `len` found\
    \ for enum `Option` in the current scope\n  --> /tmp/tmpau1xn3ld.rs:22:35\n  \
    \ |\n22 |                 } else if longest.len() < s.len() {\n   |          \
    \                         ^^^ method not found in `Option<String>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpau1xn3ld.rs:23:36\n   |\n23 |              \
    \       longest = Some(s);\n   |                                    ^- help: try\
    \ using a conversion method: `.to_string()`\n   |                            \
    \        |\n   |                                    expected struct `String`,\
    \ found `&String`\n\nerror[E0317]: `if` may be missing an `else` clause\n  -->\
    \ /tmp/tmpau1xn3ld.rs:17:5\n   |\n8  |   fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n   |                                       -------------- expected `Option<String>`\
    \ because of this return type\n...\n17 | /     if longest_length > 0 {\n18 | |\
    \         strings.iter()\n19 | |             .fold(None, |mut longest, s| {\n\
    20 | |                 if longest == None {\n...  |\n26 | |             })\n27\
    \ | |     }\n   | |_____^ expected enum `Option`, found `()`\n   |\n   = note:\
    \   expected enum `Option<String>`\n           found unit type `()`\n   = note:\
    \ `if` expressions without `else` evaluate to `()`\n   = help: consider adding\
    \ an `else` block that evaluates to the expected type\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0317, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest = strings[0];\n    for str in strings.iter().rev()\
    \ {\n        if longest.len() > str.len() {\n            longest = str;\n    \
    \    }\n    }\n    Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqcypwr7b.rs:12:23\n   |\n\
    9  |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n12 |             longest = str;\n   |     \
    \                  ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max = 0;\n    for s in strings {\n        if\
    \ s.len() > max {\n            max = s.len();\n        }\n    }\n    if max >\
    \ 0 {\n        return Some(\n            strings.iter().filter(|s| s.len() ==\
    \ max).map(|s| s.to_owned()).max(),\n        );\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjdn92w6g.rs:17:13\n   |\n\
    17 |             strings.iter().filter(|s| s.len() == max).map(|s| s.to_owned()).max(),\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found enum `Option`\n   |\n   = note: expected struct\
    \ `String`\n                found enum `Option<String>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = String::new();\n    for s in strings\
    \ {\n        let len = s.len();\n        if max_len.len() < len {\n          \
    \  max_len = s;\n        }\n    }\n    max_len.ok()\n        .map(|s| s.to_string())\n\
    \        .unwrap_or(None)\n}\n\nfn main() {\n    let candidate = longest;\n  \
    \  assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `ok` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpjx_f9jen.rs:16:13\n   |\n16 |     max_len.ok()\n   |  \
    \           ^^ method not found in `String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    // Find longest string\n    let mut longest_len = 0;\n\
    \    let mut longest_str = None;\n    for s in strings {\n        if longest_len\
    \ < s.len() {\n            longest_len = s.len();\n            longest_str = Some(s);\n\
    \        }\n    }\n\n    // If no string found, return the longest one\n    if\
    \ longest_str.is_some() {\n        return longest_str;\n    }\n\n    // If only\
    \ one string found, return it\n    if longest_len == strings[0].len() {\n    \
    \    return longest_str;\n    }\n\n    // If more than one, return the first one\n\
    \    strings.iter().next().unwrap()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp87c_clx3.rs:30:5\n   |\n\
    8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n30 |     strings.iter().next().unwrap()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `&String`\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found reference `&String`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut lens: Vec<usize> = Vec::new();\n    for s in strings {\n    \
    \    lens.push(s.len());\n    }\n    lens.sort();\n    Some(strings[lens.len()\
    \ - 1])\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `strings`\n   --> /tmp/tmpsfw775sz.rs:17:10\n\
    \    |\n8   | fn longest(strings: Vec<String>) -> Option<String> {\n    |    \
    \        ------- move occurs because `strings` has type `Vec<String>`, which does\
    \ not implement the `Copy` trait\n...\n13  |     for s in strings {\n    |   \
    \           ------- `strings` moved due to this implicit call to `.into_iter()`\n\
    ...\n17  |     Some(strings[lens.len() - 1])\n    |          ^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `strings`\nhelp: consider iterating over a slice of the\
    \ `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n13  |  \
    \   for s in &strings {\n    |              +\n\nerror[E0507]: cannot move out\
    \ of index of `Vec<String>`\n  --> /tmp/tmpsfw775sz.rs:17:10\n   |\n17 |     Some(strings[lens.len()\
    \ - 1])\n   |          ^^^^^^^^^^^^^^^^^^^^^^^ move occurs because value has type\
    \ `String`, which does not implement the `Copy` trait\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0382, E0507.\n\
    For more information about an error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter()\n        .enumerate()\n        .max_by(|(_,\
    \ a), (_, b)| a.len() < b.len());\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb03yrkan.rs:11:34\n   |\n\
    11 |         .max_by(|(_, a), (_, b)| a.len() < b.len());\n   |              \
    \                    ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`, found\
    \ `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpb03yrkan.rs:8:37\n  |\n\
    8 | fn longest(strings: Vec<String>) -> Option<String> {\n  |    -------     \
    \                     ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n  | \
    \   |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note:   expected enum `Option<String>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(\n        None,\n        |mut acc,\
    \ item| {\n            let mut len = item.len();\n            if let Some(last_len)\
    \ = (acc.len(), acc[acc.len() - len..].len()) {\n                if len < last_len\
    \ {\n                    Some(item.clone())\n                } else {\n      \
    \              let mut max_len = last_len;\n                    for s in acc[acc.len()\
    \ - len..] {\n                        if max_len < s.len() {\n               \
    \             max_len = s.len();\n                        }\n                \
    \    }\n                    Some(item.clone())\n                }\n          \
    \  } else if acc.is_empty() {\n                Some(item.clone())\n          \
    \  } else {\n                None\n            }\n        },\n    )\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpwskg5dkh.rs:13:42\n   |\n13 |             if let Some(last_len)\
    \ = (acc.len(), acc[acc.len() - len..].len()) {\n   |                        \
    \                  ^^^ method not found in `Option<String>`\n\nerror[E0599]: no\
    \ method named `len` found for enum `Option` in the current scope\n  --> /tmp/tmpwskg5dkh.rs:13:57\n\
    \   |\n13 |             if let Some(last_len) = (acc.len(), acc[acc.len() - len..].len())\
    \ {\n   |                                                         ^^^ method not\
    \ found in `Option<String>`\n\nerror[E0608]: cannot index into a value of type\
    \ `Option<String>`\n  --> /tmp/tmpwskg5dkh.rs:13:49\n   |\n13 |             if\
    \ let Some(last_len) = (acc.len(), acc[acc.len() - len..].len()) {\n   |     \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0599]:\
    \ no method named `len` found for enum `Option` in the current scope\n  --> /tmp/tmpwskg5dkh.rs:18:38\n\
    \   |\n18 |                     for s in acc[acc.len() - len..] {\n   |      \
    \                                ^^^ method not found in `Option<String>`\n\n\
    error[E0608]: cannot index into a value of type `Option<String>`\n  --> /tmp/tmpwskg5dkh.rs:18:30\n\
    \   |\n18 |                     for s in acc[acc.len() - len..] {\n   |      \
    \                        ^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0599]: no method named\
    \ `is_empty` found for enum `Option` in the current scope\n  --> /tmp/tmpwskg5dkh.rs:25:27\n\
    \   |\n25 |             } else if acc.is_empty() {\n   |                     \
    \      ^^^^^^^^ method not found in `Option<String>`\n\nerror: aborting due to\
    \ 6 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest_len: usize = 0;\n    let mut longest_string\
    \ = None;\n    for s in strings {\n        if s.len() > longest_len {\n      \
    \      longest_string = s;\n            longest_len = s.len();\n        } else\
    \ if s.len() == longest_len {\n            longest_len = longest_len + 1;\n  \
    \      }\n    }\n    longest_string\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphj39fos_.rs:13:30\n   |\n\
    10 |     let mut longest_string = None;\n   |                              ----\
    \ expected due to this value\n...\n13 |             longest_string = s;\n   |\
    \                              ^ expected enum `Option`, found struct `String`\n\
    \   |\n   = note: expected enum `Option<_>`\n            found struct `String`\n\
    help: try wrapping the expression in `Some`\n   |\n13 |             longest_string\
    \ = Some(s);\n   |                              +++++ +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by(|a, b| b.len() - a.len())\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgrtbto51.rs:9:34\n  |\n9 |\
    \     strings.iter().max_by(|a, b| b.len() - a.len())\n  |                   \
    \               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`, found `usize`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpgrtbto51.rs:9:5\n  |\n8 | fn longest(strings:\
    \ Vec<String>) -> Option<String> {\n  |                                     --------------\
    \ expected `Option<String>` because of return type\n9 |     strings.iter().max_by(|a,\
    \ b| b.len() - a.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut shortest = strings[0];\n    for &s in &strings {\n        if\
    \ s.len() < shortest.len() {\n            shortest = s;\n        }\n    }\n\n\
    \    for &s in &strings {\n        if s.len() == shortest.len() {\n          \
    \  return Some(s);\n        }\n    }\n\n    None\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0507]: cannot move out of index of `Vec<String>`\n  --> /tmp/tmp5v6gq25d.rs:13:24\n\
    \   |\n13 |     let mut shortest = strings[0];\n   |                        ^^^^^^^^^^\n\
    \   |                        |\n   |                        move occurs because\
    \ value has type `String`, which does not implement the `Copy` trait\n   |   \
    \                     help: consider borrowing here: `&strings[0]`\n\nerror[E0507]:\
    \ cannot move out of a shared reference\n  --> /tmp/tmp5v6gq25d.rs:14:15\n   |\n\
    14 |     for &s in &strings {\n   |         --    ^^^^^^^^\n   |         ||\n\
    \   |         |data moved here\n   |         |move occurs because `s` has type\
    \ `String`, which does not implement the `Copy` trait\n   |         help: consider\
    \ removing the `&`: `s`\n\nerror[E0507]: cannot move out of a shared reference\n\
    \  --> /tmp/tmp5v6gq25d.rs:20:15\n   |\n20 |     for &s in &strings {\n   |  \
    \       --    ^^^^^^^^\n   |         ||\n   |         |data moved here\n   | \
    \        |move occurs because `s` has type `String`, which does not implement\
    \ the `Copy` trait\n   |         help: consider removing the `&`: `s`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0507`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = std::cmp::max::<usize>(strings.len(),\
    \ 1);\n    for string in strings {\n        let len = string.len();\n        if\
    \ max_len < len {\n            max_len = len;\n        }\n    }\n    strings.iter().fold(None,\
    \ |mut a, s| {\n        if let Some(mut a) = a\n            .map(|s| s.len() <=\
    \ s.len())\n            .filter(|b| b)\n            .next()\n        {\n     \
    \       return a;\n        }\n        Some(s\n            .chars()\n         \
    \   .enumerate()\n            .fold(None, |mut a, (i, ch)| {\n               \
    \ if i + 1 == string.len() {\n                    Some(a)\n                } else\
    \ {\n                    if a\n                        .map(|a| a.len() > a.len())\n\
    \                        .filter(|b| b)\n                        .is_none()\n\
    \                    {\n                        Some(a)\n                    }\
    \ else {\n                        None\n                    }\n              \
    \  }\n            }))\n    })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `string` in this scope\n  --> /tmp/tmpeud3mjnp.rs:28:29\n\
    \   |\n28 |                 if i + 1 == string.len() {\n   |                 \
    \            ^^^^^^ help: a local variable with a similar name exists: `strings`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpeud3mjnp.rs:19:25\n   |\n19 |\
    \             .filter(|b| b)\n   |                         ^ expected `bool`,\
    \ found `&bool`\n   |\nhelp: consider dereferencing the borrow\n   |\n19 |   \
    \          .filter(|b| *b)\n   |                         +\n\nerror[E0599]: no\
    \ method named `next` found for enum `Option` in the current scope\n  --> /tmp/tmpeud3mjnp.rs:20:14\n\
    \   |\n20 |             .next()\n   |              ^^^^ method not found in `Option<bool>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpeud3mjnp.rs:27:19\n   |\n27 |\
    \             .fold(None, |mut a, (i, ch)| {\n   |                   ^^^^ expected\
    \ struct `String`, found enum `Option`\n   |\n   = note: expected struct `String`\n\
    \                found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpeud3mjnp.rs:29:21\n   |\n29 |                     Some(a)\n   |    \
    \                 ^^^^^^^ expected struct `String`, found enum `Option`\n   |\n\
    \   = note: expected struct `String`\n                found enum `Option<String>`\n\
    \nerror[E0599]: `String` is not an iterator\n   --> /tmp/tmpeud3mjnp.rs:32:26\n\
    \    |\n32  |                           .map(|a| a.len() > a.len())\n    |   \
    \                         ^^^ `String` is not an iterator; try calling `.chars()`\
    \ or `.bytes()`\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `String: Iterator`\n            which is required by `&mut String:\
    \ Iterator`\n            `str: Iterator`\n            which is required by `&mut\
    \ str: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeud3mjnp.rs:36:25\n\
    \   |\n36 |                         Some(a)\n   |                         ^^^^^^^\
    \ expected struct `String`, found enum `Option`\n   |\n   = note: expected struct\
    \ `String`\n                found enum `Option<String>`\n\nerror[E0308]: mismatched\
    \ types\n  --"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter()\n        .fold(\n            String::new(),\n\
    \            |mut current, element| {\n                if current.len() > element.len()\
    \ {\n                    current\n                } else if current.len() < element.len()\
    \ {\n                    element\n                } else {\n                 \
    \   current\n                }\n            },\n        )\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp90f7olts.rs:11:13\n   |\n\
    11 |             String::new(),\n   |             ^^^^^^^^^^^^^ expected enum\
    \ `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n\
    \            found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n11 |             Some(String::new()),\n   |             +++++         \
    \    +\n\nerror[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmp90f7olts.rs:13:28\n   |\n13 |                 if current.len()\
    \ > element.len() {\n   |                            ^^^ method not found in `Option<String>`\n\
    \nerror[E0599]: no method named `len` found for enum `Option` in the current scope\n\
    \  --> /tmp/tmp90f7olts.rs:15:35\n   |\n15 |                 } else if current.len()\
    \ < element.len() {\n   |                                   ^^^ method not found\
    \ in `Option<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp90f7olts.rs:16:21\n\
    \   |\n16 |                     element\n   |                     ^^^^^^^ expected\
    \ enum `Option`, found `&String`\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found reference `&String`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = std::mem::size_of::<usize>() * std::mem::size_of::<usize>();\
    \ // start with a very large value\n    strings.sort_by(|a, b| a.len().cmp(b.len()));\n\
    \    for s in &strings {\n        let len = s.len();\n        if len > max_len\
    \ {\n            max_len = len;\n        }\n    }\n    strings\n        .iter()\n\
    \        .fold(None, |max, rest| {\n            if *rest > max {\n           \
    \     Some(rest)\n            } else {\n                None\n            }\n\
    \        })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdzuuxcbq.rs:10:40\n   |\n\
    10 |     strings.sort_by(|a, b| a.len().cmp(b.len()));\n   |                 \
    \                       ^^^^^^^\n   |                                        |\n\
    \   |                                        expected `&usize`, found `usize`\n\
    \   |                                        help: consider borrowing here: `&b.len()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdzuuxcbq.rs:20:24\n   |\n20 |\
    \             if *rest > max {\n   |                        ^^^ expected struct\
    \ `String`, found enum `Option`\n   |\n   = note: expected struct `String`\n \
    \               found enum `Option<String>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdzuuxcbq.rs:21:22\n   |\n21 |                 Some(rest)\n   |\
    \                      ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                      |\n   |                      expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest_string = None;\n    let mut longest_length = 0;\n\n\
    \    for s in strings {\n        if s.len() > longest_length {\n            longest_string\
    \ = s;\n            longest_length = s.len();\n        }\n    }\n\n    if longest_length\
    \ == 0 {\n        return None;\n    }\n\n    Some(longest_string)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqzyggge_.rs:18:30\n   |\n\
    13 |     let mut longest_string = None;\n   |                              ----\
    \ expected due to this value\n...\n18 |             longest_string = s;\n   |\
    \                              ^ expected enum `Option`, found struct `String`\n\
    \   |\n   = note: expected enum `Option<_>`\n            found struct `String`\n\
    help: try wrapping the expression in `Some`\n   |\n18 |             longest_string\
    \ = Some(s);\n   |                              +++++ +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqzyggge_.rs:27:10\n   |\n27 |     Some(longest_string)\n\
    \   |          ^^^^^^^^^^^^^^ expected struct `String`, found enum `Option`\n\
    \   |\n   = note: expected struct `String`\n                found enum `Option<_>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by(|a, b| a.len() < b.len())\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp69951q06.rs:9:34\n  |\n9 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len())\n  |                   \
    \               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`, found `bool`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp69951q06.rs:9:5\n  |\n8 | fn longest(strings:\
    \ Vec<String>) -> Option<String> {\n  |                                     --------------\
    \ expected `Option<String>` because of return type\n9 |     strings.iter().max_by(|a,\
    \ b| a.len() < b.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    // We need `strings.len()` instead of `strings.len()-1`\
    \ because the first string\n    // will have the length of 0, hence we'll miss\
    \ it\n    if strings.is_empty() {\n        return None;\n    }\n\n    // Sort\
    \ and find the longest one\n    let mut max = String::new();\n    let mut max_length\
    \ = 0;\n    for s in strings.iter() {\n        let length = s.len();\n       \
    \ let len_diff = max - max_length;\n        if len_diff == length {\n        \
    \    // Reached our max\n            if length > max {\n                max_length\
    \ = length;\n                max = s;\n            }\n        } else {\n     \
    \       // Reached a new max, reset and continue with next string\n          \
    \  max = String::new();\n            max_length = length;\n        }\n    }\n\n\
    \    Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot subtract `{integer}` from `String`\n  --> /tmp/tmpdupj2egh.rs:20:28\n\
    \   |\n20 |         let len_diff = max - max_length;\n   |                   \
    \     --- ^ ---------- {integer}\n   |                        |\n   |        \
    \                String\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdupj2egh.rs:23:25\n\
    \   |\n23 |             if length > max {\n   |                         ^^^ expected\
    \ `usize`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdupj2egh.rs:25:23\n\
    \   |\n16 |     let mut max = String::new();\n   |                   -------------\
    \ expected due to this value\n...\n25 |                 max = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0369.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |mut acc, s| {\n        match\
    \ acc.len()\n            && s.length()\n            && s.len() >= acc.len() {\n\
    \            true => Some(s),\n            false => Some(acc),\n        };\n \
    \   })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpb9jjc0dk.rs:10:19\n   |\n10 |         match acc.len()\n\
    \   |                   ^^^ method not found in `Option<String>`\n\nerror[E0599]:\
    \ no method named `length` found for reference `&String` in the current scope\n\
    \  --> /tmp/tmpb9jjc0dk.rs:11:18\n   |\n11 |             && s.length()\n   | \
    \                 ^^^^^^ help: there is an associated function with a similar\
    \ name: `len`\n\nerror[E0599]: no method named `len` found for enum `Option` in\
    \ the current scope\n  --> /tmp/tmpb9jjc0dk.rs:12:31\n   |\n12 |             &&\
    \ s.len() >= acc.len() {\n   |                               ^^^ method not found\
    \ in `Option<String>`\n\nerror[E0308]: `match` arms have incompatible types\n\
    \  --> /tmp/tmpb9jjc0dk.rs:14:22\n   |\n10 | /         match acc.len()\n11 | |\
    \             && s.length()\n12 | |             && s.len() >= acc.len() {\n13\
    \ | |             true => Some(s),\n   | |                     ------- this is\
    \ found to be of type `Option<&String>`\n14 | |             false => Some(acc),\n\
    \   | |                      ^^^^^^^^^ expected `&String`, found enum `Option`\n\
    15 | |         };\n   | |_________- `match` arms have incompatible types\n   |\n\
    \   = note: expected enum `Option<&String>`\n              found enum `Option<Option<String>>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpb9jjc0dk.rs:9:44\n   |\n9  | \
    \      strings.iter().fold(None, |mut acc, s| {\n   |  ____________________________________________^\n\
    10 | |         match acc.len()\n11 | |             && s.length()\n12 | |     \
    \        && s.len() >= acc.len() {\n...  |\n15 | |         };\n16 | |     })\n\
    \   | |_____^ expected enum `Option`, found `()`\n   |\n   = note:   expected\
    \ enum `Option<String>`\n           found unit type `()`\n\nerror: aborting due\
    \ to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .chain(\n       \
    \     strings.into_iter().map(|x| x.chars().count()),\n        )\n        .max()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<[closure@/tmp/tmpsrddrtn1.rs:12:37:\
    \ 12:58] as FnOnce<(String,)>>::Output == &String`\n   --> /tmp/tmpsrddrtn1.rs:12:13\n\
    \    |\n11  |         .chain(\n    |          ----- required by a bound introduced\
    \ by this call\n12  |             strings.into_iter().map(|x| x.chars().count()),\n\
    \    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&String`,\
    \ found `usize`\n    |\n    = note: required because of the requirements on the\
    \ impl of `Iterator` for `Map<std::vec::IntoIter<String>, [closure@/tmp/tmpsrddrtn1.rs:12:37:\
    \ 12:58]>`\nnote: required by a bound in `std::iter::Iterator::chain`\n\nerror[E0599]:\
    \ the method `max` exists for struct `std::iter::Chain<std::slice::Iter<'_, String>,\
    \ Map<std::vec::IntoIter<String>, [closure@/tmp/tmpsrddrtn1.rs:12:37: 12:58]>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpsrddrtn1.rs:14:10\n \
    \  |\n14 |           .max()\n   |            ^^^ method cannot be called on `std::iter::Chain<std::slice::Iter<'_,\
    \ String>, Map<std::vec::IntoIter<String>, [closure@/tmp/tmpsrddrtn1.rs:12:37:\
    \ 12:58]>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<Map<std::vec::IntoIter<String>, [closure@/tmp/tmpsrddrtn1.rs:12:37:\
    \ 12:58]> as Iterator>::Item = &String`\n           which is required by `std::iter::Chain<std::slice::Iter<'_,\
    \ String>, Map<std::vec::IntoIter<String>, [closure@/tmp/tmpsrddrtn1.rs:12:37:\
    \ 12:58]>>: Iterator`\n           `std::iter::Chain<std::slice::Iter<'_, String>,\
    \ Map<std::vec::IntoIter<String>, [closure@/tmp/tmpsrddrtn1.rs:12:37: 12:58]>>:\
    \ Ord`\n           which is required by `&std::iter::Chain<std::slice::Iter<'_,\
    \ String>, Map<std::vec::IntoIter<String>, [closure@/tmp/tmpsrddrtn1.rs:12:37:\
    \ 12:58]>>: Ord`\n           `std::iter::Chain<std::slice::Iter<'_, String>, Map<std::vec::IntoIter<String>,\
    \ [closure@/tmp/tmpsrddrtn1.rs:12:37: 12:58]>>: Ord`\n           which is required\
    \ by `&mut std::iter::Chain<std::slice::Iter<'_, String>, Map<std::vec::IntoIter<String>,\
    \ [closure@/tmp/t"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut lens: Vec<i32> = Vec::new();\n    for s in strings {\n      \
    \  lens.push(s.len());\n    }\n    let mut max_len = lens.iter().max().unwrap();\n\
    \    for s in &mut lens {\n        if s == max_len {\n            max_len = 0;\n\
    \        } else {\n            break;\n        }\n    }\n    if max_len == 0 {\n\
    \        return None;\n    }\n    let mut max_idx = 0;\n    for s in &mut lens\
    \ {\n        if s == max_len {\n            max_idx = s;\n        }\n    }\n \
    \   Some(strings[max_idx])\n}\n\nfn main() {\n    let candidate = longest;\n \
    \   assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz8l1tb7o.rs:14:19\n   |\n\
    14 |         lens.push(s.len());\n   |                   ^^^^^^^ expected `i32`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `i32` and panic if\
    \ the converted value doesn't fit\n   |\n14 |         lens.push(s.len().try_into().unwrap());\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz8l1tb7o.rs:19:23\n   |\n16 |     let mut max_len = lens.iter().max().unwrap();\n\
    \   |                       -------------------------- expected due to this value\n\
    ...\n19 |             max_len = 0;\n   |                       ^\n   |       \
    \                |\n   |                       expected `&i32`, found integer\n\
    \   |                       help: consider borrowing here: `&0`\n\nerror[E0277]:\
    \ can't compare `&i32` with `{integer}`\n  --> /tmp/tmpz8l1tb7o.rs:24:16\n   |\n\
    24 |     if max_len == 0 {\n   |                ^^ no implementation for `&i32\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&i32`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz8l1tb7o.rs:30:23\n\
    \   |\n27 |     let mut max_idx = 0;\n   |                       - expected due\
    \ to this value\n...\n30 |             max_idx = s;\n   |                    \
    \   ^ expected integer, found `&mut i32`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n30 |             max_idx = *s;\n   |                       +\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut largest = strings.iter().fold(\n        0,\n        |mut a,\
    \ string| if a.len() < string.len() {\n            a\n        } else {\n     \
    \       string\n        }\n    );\n\n    for string in strings.iter() {\n    \
    \    if largest == string.len() {\n            return string;\n        }\n   \
    \     largest = string.len();\n    }\n\n    None\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `len` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp3xj1gy29.rs:15:30\n   |\n15 |         |mut a, string| if a.len()\
    \ < string.len() {\n   |          -----               ^^^\n   |          |\n \
    \  |          you must specify a type for this binding, like `i32`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3xj1gy29.rs:18:13\n   |\n18 |             string\n\
    \   |             ^^^^^^ expected integer, found `&String`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3xj1gy29.rs:24:20\n   |\n24 |             return string;\n\
    \   |                    ^^^^^^ expected enum `Option`, found `&String`\n   |\n\
    \   = note:   expected enum `Option<String>`\n           found reference `&String`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0689.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    // Find the longest string.\n    let max_string = strings.iter()\n\
    \        .fold(String::new(), |max_string, string| {\n            if max_string.length()\
    \ <= string.length() {\n                string\n            } else {\n       \
    \         max_string\n            }\n        });\n\n    // Return the first longest\
    \ string or the largest string.\n    strings.iter()\n        .find(|string| string.len()\
    \ == max_string.length())\n}\n\nfn main() {\n    let candidate = longest;\n  \
    \  assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpo_19bib0.rs:12:27\n   |\n12 |             if max_string.length()\
    \ <= string.length() {\n   |                           ^^^^^^ help: there is an\
    \ associated function with a similar name: `len`\n\nerror[E0599]: no method named\
    \ `length` found for reference `&String` in the current scope\n  --> /tmp/tmpo_19bib0.rs:12:46\n\
    \   |\n12 |             if max_string.length() <= string.length() {\n   |    \
    \                                          ^^^^^^ help: there is an associated\
    \ function with a similar name: `len`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpo_19bib0.rs:13:17\n   |\n13 |                 string\n   |         \
    \        ^^^^^^- help: try using a conversion method: `.to_string()`\n   |   \
    \              |\n   |                 expected struct `String`, found `&String`\n\
    \nerror[E0599]: no method named `length` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpo_19bib0.rs:21:51\n   |\n21 |         .find(|string| string.len()\
    \ == max_string.length())\n   |                                              \
    \     ^^^^^^ help: there is an associated function with a similar name: `len`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpo_19bib0.rs:20:5\n   |\n8  | \
    \  fn longest(strings: Vec<String>) -> Option<String> {\n   |                \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n20 | /     strings.iter()\n21 | |         .find(|string| string.len()\
    \ == max_string.length())\n   | |___________________________________________________________^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut string = strings.iter().fold(String::new(), |mut acc, x| {\n\
    \        if acc.len() > x.len() {\n            acc.to_string()\n        } else\
    \ {\n            acc\n        }\n    });\n    Some(string)\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"\")`,\n right: `Some(\"x\")`', /tmp/tmppd6u45c7.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut length = strings.iter().map(|s| s.len()).max();\n    for s in\
    \ strings {\n        if s.len() == length {\n            return Some(s);\n   \
    \     }\n        length = s.len();\n    }\n    None\n}\n\nfn main() {\n    let\
    \ candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4f31dnhp.rs:14:23\n   |\n\
    14 |         if s.len() == length {\n   |                       ^^^^^^ expected\
    \ `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n     \
    \         found enum `Option<usize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp4f31dnhp.rs:17:18\n   |\n12 |     let mut length = strings.iter().map(|s|\
    \ s.len()).max();\n   |                      -------------------------------------\
    \ expected due to this value\n...\n17 |         length = s.len();\n   |      \
    \            ^^^^^^^ expected enum `Option`, found `usize`\n   |\n   = note: expected\
    \ enum `Option<usize>`\n              found type `usize`\nhelp: try wrapping the\
    \ expression in `Some`\n   |\n17 |         length = Some(s.len());\n   |     \
    \             +++++       +\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .into_iter()\n        .map(|s| s.chars().count())\n\
    \        .max()\n        .ok()\n        .or_else(|| strings.iter().map(|s| s.len()).max().ok())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `ok` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpi_bptyz7.rs:13:10\n   |\n13 |         .ok()\n   |     \
    \     ^^ help: there is an associated function with a similar name: `or`\n\nerror[E0599]:\
    \ no method named `ok` found for enum `Option` in the current scope\n  --> /tmp/tmpi_bptyz7.rs:14:59\n\
    \   |\n14 |         .or_else(|| strings.iter().map(|s| s.len()).max().ok())\n\
    \   |                                                           ^^ help: there\
    \ is an associated function with a similar name: `or`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max().cloned().map(|s| s)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpuu4j3l6v.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let len = strings\n        .iter()\n        .map(|s|\
    \ s.len())\n        .max();\n    strings[strings.iter().position(|s| s.len() ==\
    \ len).unwrap()]\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp44ttm1kq.rs:13:52\n   |\n\
    13 |     strings[strings.iter().position(|s| s.len() == len).unwrap()]\n   | \
    \                                                   ^^^ expected `usize`, found\
    \ enum `Option`\n   |\n   = note: expected type `usize`\n              found enum\
    \ `Option<usize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp44ttm1kq.rs:13:5\n\
    \   |\n8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                              -------------- expected `Option<String>` because\
    \ of return type\n...\n13 |     strings[strings.iter().position(|s| s.len() ==\
    \ len).unwrap()]\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum\
    \ `Option<String>`\n            found struct `String`\nhelp: try wrapping the\
    \ expression in `Some`\n   |\n13 |     Some(strings[strings.iter().position(|s|\
    \ s.len() == len).unwrap()])\n   |     +++++                                 \
    \                            +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().enumerate()\n        .max_by(|(_, a),\
    \ _| (a.len() as i64).cmp(&_))\n        .map(|(i, s)| (*s).to_owned())\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error: in expressions, `_` can only be used on the left-hand side of an\
    \ assignment\n  --> /tmp/tmp5w23fjox.rs:10:51\n   |\n10 |         .max_by(|(_,\
    \ a), _| (a.len() as i64).cmp(&_))\n   |                                     \
    \              ^ `_` not allowed here\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    strings[0].chars().max(|a, b| a.cmp(b))\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpftzsr8cd.rs:12:29\n\
    \   |\n12 |     strings[0].chars().max(|a, b| a.cmp(b))\n   |                \
    \             ^ consider giving this closure parameter a type\n   |\n   = note:\
    \ type must be known at this point\n\nerror[E0061]: this function takes 0 arguments\
    \ but 1 argument was supplied\n    --> /tmp/tmpftzsr8cd.rs:12:24\n     |\n12 \
    \  |     strings[0].chars().max(|a, b| a.cmp(b))\n     |                     \
    \   ^^^ --------------- supplied 1 argument\n     |                        |\n\
    \     |                        expected 0 arguments\n     |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpftzsr8cd.rs:12:5\n\
    \   |\n8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                              -------------- expected `Option<String>` because\
    \ of return type\n...\n12 |     strings[0].chars().max(|a, b| a.cmp(b))\n   |\
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `char`\n   |\n   = note: expected enum `Option<String>`\n              found\
    \ enum `Option<char>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0282, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0].len();\n    let mut longest_len = strings[0].len();\n\
    \    for s in strings {\n        if s.len() > longest_len {\n            longest_len\
    \ = s.len();\n            longest = s;\n        }\n    }\n    Some(longest)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp10takz9t.rs:17:23\n   |\n\
    12 |     let mut longest = strings[0].len();\n   |                       ----------------\
    \ expected due to this value\n...\n17 |             longest = s;\n   |       \
    \                ^ expected `usize`, found struct `String`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp10takz9t.rs:20:10\n   |\n20 |     Some(longest)\n   | \
    \         ^^^^^^^- help: try using a conversion method: `.to_string()`\n   | \
    \         |\n   |          expected struct `String`, found `usize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |max_len, string| {\n   \
    \     let len = string.len();\n        if len > max_len {\n            Some(string)\n\
    \        } else {\n            None\n        }\n    })\n}\n\nfn main() {\n   \
    \ let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbydsdoj3.rs:11:18\n   |\n\
    11 |         if len > max_len {\n   |                  ^^^^^^^ expected `usize`,\
    \ found enum `Option`\n   |\n   = note: expected type `usize`\n              found\
    \ enum `Option<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbydsdoj3.rs:12:18\n\
    \   |\n12 |             Some(string)\n   |                  ^^^^^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                  |\n   |   \
    \               expected struct `String`, found `&String`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut max_length = 0;\n    let mut longest = strings[0];\n    for\
    \ s in strings.iter() {\n        if s.length > max_length {\n            max_length\
    \ = s.length;\n            longest = s;\n        }\n    }\n    longest\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0609]: no field `length` on type `&String`\n  --> /tmp/tmpc95_6p_k.rs:16:14\n\
    \   |\n16 |         if s.length > max_length {\n   |              ^^^^^^ unknown\
    \ field\n\nerror[E0609]: no field `length` on type `&String`\n  --> /tmp/tmpc95_6p_k.rs:17:28\n\
    \   |\n17 |             max_length = s.length;\n   |                         \
    \   ^^^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc95_6p_k.rs:18:23\n\
    \   |\n14 |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n18 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc95_6p_k.rs:21:5\n\
    \   |\n8  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                              -------------- expected `Option<String>` because\
    \ of return type\n...\n21 |     longest\n   |     ^^^^^^^ expected enum `Option`,\
    \ found struct `String`\n   |\n   = note: expected enum `Option<String>`\n   \
    \         found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n21 |     Some(longest)\n   |     +++++       +\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0609.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut longest_len = strings[0].chars().count();\n\
    \    let mut max_len = -1;\n\n    for string in strings.iter() {\n        let\
    \ string_len = string.chars().count();\n\n        if string_len > max_len {\n\
    \            max_len = string_len;\n        }\n\n        if string_len == longest_len\
    \ {\n            return Some(string);\n        }\n\n        if longest_len > string_len\
    \ {\n            longest_len = string_len;\n        }\n    }\n\n    None\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpq4lqrptl.rs:10:23\n\
    \   |\n10 |     let mut max_len = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpq4lqrptl.rs:20:25\n   |\n20 |             return Some(string);\n\
    \   |                         ^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                         |\n   |                         expected struct\
    \ `String`, found `&String`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_len: usize = 0;\n    let mut max_len_string: String = String::new();\n\
    \    for s in strings.iter() {\n        if max_len < s.len() {\n            max_len\
    \ = s.len();\n            max_len_string = s;\n        }\n    }\n    Some(max_len_string)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdoq6fzug.rs:17:30\n   |\n\
    13 |     let mut max_len_string: String = String::new();\n   |               \
    \              ------ expected due to this type\n...\n17 |             max_len_string\
    \ = s;\n   |                              ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                              |\n   |                  \
    \            expected struct `String`, found `&String`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by(|a, b| a.len() < b.len()).map(|s|\
    \ s)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjkzg457r.rs:9:34\n  |\n9 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).map(|s| s)\n  |        \
    \                          ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjkzg457r.rs:9:5\n\
    \  |\n8 | fn longest(strings: Vec<String>) -> Option<String> {\n  |          \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n9 |     strings.iter().max_by(|a, b| a.len() < b.len()).map(|s|\
    \ s)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = String::new();\n    let mut longest_len\
    \ = String::new();\n    for (s, l) in strings.into_iter().zip(longest(strings).into_iter())\
    \ {\n        if l > max_len {\n            max_len = l;\n            longest_len\
    \ = s;\n        }\n    }\n    longest_len.cloned()\n}\n\nfn main() {\n    let\
    \ candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmpc2_z_bow.rs:17:17\n\
    \    |\n17  |       longest_len.cloned()\n    |                   ^^^^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut shortest_length = usize::MAX;\n    let mut\
    \ result = String::new();\n    for s in strings {\n        if s.len() < shortest_length\
    \ {\n            shortest_length = s.len();\n            result = s;\n       \
    \ }\n    }\n    if shortest_length == usize::MAX {\n        return None;\n   \
    \ }\n    Some(result)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"x\")`,\n right: `Some(\"zzzz\")`', /tmp/tmpz0hbs6pt.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = String::new();\n    for s in strings.iter()\
    \ {\n        if s.len() > max_len.len() {\n            max_len = s;\n        }\n\
    \    }\n    Some(max_len)\n}\n\nfn main() {\n    let candidate = longest;\n  \
    \  assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5v3270rh.rs:12:23\n   |\n\
    9  |     let mut max_len = String::new();\n   |                       -------------\
    \ expected due to this value\n...\n12 |             max_len = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len = -1;\n    let mut longest_str = String::new();\n\
    \    for str in strings {\n        let len = str.len();\n        if max_len <\
    \ len {\n            max_len = len;\n            longest_str = str;\n        }\n\
    \    }\n    if longest_str.len() == 0 {\n        return None;\n    }\n    Some(longest_str)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp1oo48pjr.rs:9:23\n\
    \  |\n9 |     let mut max_len = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut res = strings[0];\n    for s in strings.iter().cloned().windows(2)\
    \ {\n        if s.len() > res.len() {\n            res = s;\n        }\n    }\n\
    \    Some(res)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `windows` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmpdfa6ksxv.rs:10:38\n   |\n10 |     for s in strings.iter().cloned().windows(2)\
    \ {\n   |                                      ^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ String>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest: usize = 0;\n    let mut longest_string = strings[0];\n\
    \    for &s in &strings {\n        if longest < s.len() {\n            longest\
    \ = s.len();\n            longest_string = s;\n        }\n    }\n\n    Some(longest_string)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0507]: cannot move out of index of `Vec<String>`\n  --> /tmp/tmpjcfnxg2b.rs:14:30\n\
    \   |\n14 |     let mut longest_string = strings[0];\n   |                   \
    \           ^^^^^^^^^^\n   |                              |\n   |            \
    \                  move occurs because value has type `String`, which does not\
    \ implement the `Copy` trait\n   |                              help: consider\
    \ borrowing here: `&strings[0]`\n\nerror[E0507]: cannot move out of a shared reference\n\
    \  --> /tmp/tmpjcfnxg2b.rs:15:15\n   |\n15 |     for &s in &strings {\n   |  \
    \       --    ^^^^^^^^\n   |         ||\n   |         |data moved here\n   | \
    \        |move occurs because `s` has type `String`, which does not implement\
    \ the `Copy` trait\n   |         help: consider removing the `&`: `s`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0507`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(Some(\"\"), |mut result, str| {\n\
    \        if let Some(old_length) = result.len() {\n            if old_length >\
    \ str.len() {\n                Some(str.to_owned())\n            } else {\n  \
    \              Some(result)\n            }\n        } else {\n            Some(result)\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkiz7hamn.rs:9:30\n  |\n9 |\
    \     strings.iter().fold(Some(\"\"), |mut result, str| {\n  |               \
    \               ^^- help: try using a conversion method: `.to_string()`\n  | \
    \                             |\n  |                              expected struct\
    \ `String`, found `&str`\n\nerror[E0599]: no method named `len` found for enum\
    \ `Option` in the current scope\n  --> /tmp/tmpkiz7hamn.rs:10:42\n   |\n10 | \
    \        if let Some(old_length) = result.len() {\n   |                      \
    \                    ^^^ method not found in `Option<String>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkiz7hamn.rs:14:22\n   |\n14 |              \
    \   Some(result)\n   |                      ^^^^^^ expected struct `String`, found\
    \ enum `Option`\n   |\n   = note: expected struct `String`\n                found\
    \ enum `Option<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkiz7hamn.rs:17:18\n\
    \   |\n17 |             Some(result)\n   |                  ^^^^^^ expected struct\
    \ `String`, found enum `Option`\n   |\n   = note: expected struct `String`\n \
    \               found enum `Option<String>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(None, |acc, s| {\n        if acc.is_none()\
    \ {\n            Some(s.clone())\n        } else {\n            Some(acc.unwrap().len()\
    \ > s.len() ? acc : s)\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `acc`\n\
    \  --> /tmp/tmpybswzic6.rs:13:49\n   |\n13 |             Some(acc.unwrap().len()\
    \ > s.len() ? acc : s)\n   |                                                -^^^\
    \ expected one of `)`, `,`, `.`, `?`, or an operator\n   |                   \
    \                             |\n   |                                        \
    \        help: missing `,`\n\nerror[E0573]: expected type, found local variable\
    \ `s`\n  --> /tmp/tmpybswzic6.rs:13:55\n   |\n13 |             Some(acc.unwrap().len()\
    \ > s.len() ? acc : s)\n   |                                                 \
    \      ^ expecting a type here because of type ascription\n\nerror[E0277]: the\
    \ `?` operator can only be applied to values that implement `Try`\n  --> /tmp/tmpybswzic6.rs:13:39\n\
    \   |\n13 |             Some(acc.unwrap().len() > s.len() ? acc : s)\n   |   \
    \                                    ^^^^^^^^^ the `?` operator cannot be applied\
    \ to type `usize`\n   |\n   = help: the trait `Try` is not implemented for `usize`\n\
    \nerror[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n\
    \  --> /tmp/tmpybswzic6.rs:13:13\n   |\n13 |             Some(acc.unwrap().len()\
    \ > s.len() ? acc : s)\n   |             ^^^^ ------------------------------ -------\
    \ supplied 2 arguments\n   |             |\n   |             expected 1 argument\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277, E0573.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut string = match strings.first() {\n        Some(string)\
    \ => string,\n        _ => {\n            return Some(strings.iter().map(|string|\
    \ string.len()).max().unwrap());\n        }\n    };\n    for string in strings.iter()\
    \ {\n        if string.len() > string.len() {\n            return Some(string);\n\
    \        }\n    }\n    None\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn0ouuef3.rs:12:25\n   |\n\
    12 |             return Some(strings.iter().map(|string| string.len()).max().unwrap());\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \       |\n   |                         expected struct `String`, found `usize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpn0ouuef3.rs:17:25\n   |\n17 |\
    \             return Some(string);\n   |                         ^^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \ |\n   |                         expected struct `String`, found `&String`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.len())\n\
    \        .max()\n        .cloned()\n        .and_then(|l| strings[l])\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmp_3dyikv0.rs:13:10\n\
    \    |\n13  |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest = &strings.iter().max().unwrap();\n    let mut longest_len\
    \ = longest.len();\n\n    for s in &strings {\n        if s.len() == longest_len\
    \ {\n            longest = s;\n        }\n        longest_len = longest .len();\n\
    \    }\n\n    longest\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsmqwwns1.rs:18:23\n   |\n\
    13 |     let mut longest = &strings.iter().max().unwrap();\n   |             \
    \          ------------------------------ expected due to this value\n...\n18\
    \ |             longest = s;\n   |                       ^ expected `&String`,\
    \ found struct `String`\n   |\n   = note: expected reference `&&String`\n    \
    \          found reference `&String`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpsmqwwns1.rs:23:5\n   |\n8  | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n   |                                     -------------- expected `Option<String>`\
    \ because of return type\n...\n23 |     longest\n   |     ^^^^^^^ expected enum\
    \ `Option`, found `&&String`\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found reference `&&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max_len: usize = 0;\n    for s in strings {\n\
    \        let len = s.chars().count();\n        if len > max_len {\n          \
    \  max_len = len;\n        }\n    }\n    strings.iter().max_by(|a, b| a.len()\
    \ < b.len()).unwrap_or(None)\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoxti2l4s.rs:16:34\n   |\n\
    16 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n   |\
    \                                  ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoxti2l4s.rs:16:63\n\
    \   |\n16 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \   |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n   |\n   = note: expected reference `&String`\n\
    \                   found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpoxti2l4s.rs:16:5\n   |\n8  | fn longest(strings: Vec<String>) ->\
    \ Option<String> {\n   |                                     -------------- expected\
    \ `Option<String>` because of return type\n...\n16 |     strings.iter().max_by(|a,\
    \ b| a.len() < b.len()).unwrap_or(None)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `&String`\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().fold(Some(\"\"), |mut acc, str| {\n\
    \        acc.len_with_index().and_then(|len, i| {\n            if len > i.len_with_index()\
    \ {\n                Some(str)\n            } else {\n                None\n \
    \           }\n        })\n    })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnseovseo.rs:9:30\n  |\n9 |\
    \     strings.iter().fold(Some(\"\"), |mut acc, str| {\n  |                  \
    \            ^^- help: try using a conversion method: `.to_string()`\n  |    \
    \                          |\n  |                              expected struct\
    \ `String`, found `&str`\n\nerror[E0599]: no method named `len_with_index` found\
    \ for enum `Option` in the current scope\n  --> /tmp/tmpnseovseo.rs:10:13\n  \
    \ |\n10 |         acc.len_with_index().and_then(|len, i| {\n   |             ^^^^^^^^^^^^^^\
    \ method not found in `Option<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut result = Vec::new();\n\n    for s in strings\
    \ {\n        if result.is_empty() || result.pop().len() < s.len() {\n        \
    \    result.push(s);\n        }\n    }\n\n    result.len() == 1 ?\n        result.pop()\
    \ :\n        Some(String::from_utf8_lossy(result)\n            .map_err(|_| format!(\"\
    All strings in \\\"{}\\\" have same length\", strings)?)\n            .unwrap_or(strings.max()));\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `result`\n  --> /tmp/tmpgsk00gs4.rs:17:24\n\
    \   |\n17 |     result.len() == 1 ?\n   |                        ^ help: add `;`\
    \ here\n18 |         result.pop() :\n   |         ------ unexpected token\n\n\
    error: expected one of `!`, `)`, `+`, `,`, `->`, or `::`, found `.`\n  --> /tmp/tmpgsk00gs4.rs:20:13\n\
    \   |\n18 |         result.pop() :\n   |                      - tried to parse\
    \ a type due to this\n19 |         Some(String::from_utf8_lossy(result)\n   |\
    \                                             - expected one of `!`, `)`, `+`,\
    \ `,`, `->`, or `::`\n20 |             .map_err(|_| format!(\"All strings in \\\
    \"{}\\\" have same length\", strings)?)\n   |             ^ unexpected token\n\
    \nerror: expected one of `.`, `;`, `?`, `}`, or an operator, found `)`\n  -->\
    \ /tmp/tmpgsk00gs4.rs:20:85\n   |\n20 |             .map_err(|_| format!(\"All\
    \ strings in \\\"{}\\\" have same length\", strings)?)\n   |                 \
    \                                                                    ^ expected\
    \ one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0599]: no method named `len`\
    \ found for enum `Option` in the current scope\n  --> /tmp/tmpgsk00gs4.rs:12:46\n\
    \   |\n12 |         if result.is_empty() || result.pop().len() < s.len() {\n \
    \  |                                              ^^^ method not found in `Option<_>`\n\
    \nerror[E0277]: the `?` operator can only be applied to values that implement\
    \ `Try`\n  --> /tmp/tmpgsk00gs4.rs:17:21\n   |\n17 |     result.len() == 1 ?\n\
    \   |                     ^^^ the `?` operator cannot be applied to type `{integer}`\n\
    \   |\n   = help: the trait `Try` is not implemented for `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgsk00gs4.rs:17:5\n   |\n17 |     result.len()\
    \ == 1 ?\n   |     ^^^^^^^^^^^^^^^^^^^- help: consider using a semicolon here\n\
    \   |     |\n   |     expected `()`, found `bool`\n\nerror: aborting due to 6\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longer = Some(strings[0]);\n    for s in strings {\n      \
    \  if s.len() > longer.unwrap().len() {\n            longer = Some(s);\n     \
    \   }\n    }\n    longer\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0507]: cannot move out of index of `Vec<String>`\n  --> /tmp/tmp5ep_273w.rs:13:27\n\
    \   |\n13 |     let mut longer = Some(strings[0]);\n   |                     \
    \      ^^^^^^^^^^ move occurs because value has type `String`, which does not\
    \ implement the `Copy` trait\n\nerror[E0382]: use of moved value: `longer`\n \
    \  --> /tmp/tmp5ep_273w.rs:15:22\n    |\n13  |     let mut longer = Some(strings[0]);\n\
    \    |         ---------- move occurs because `longer` has type `Option<String>`,\
    \ which does not implement the `Copy` trait\n14  |     for s in strings {\n15\
    \  |         if s.len() > longer.unwrap().len() {\n    |                     \
    \ ^^^^^^ -------- `longer` moved due to this method call, in previous iteration\
    \ of loop\n16  |             longer = Some(s);\n    |             ------ this\
    \ reinitialization might get skipped\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `longer`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0382, E0507.\nFor more information\
    \ about an error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut longest = strings[0].len();\n    for s in strings {\n       \
    \ if s.len() > longest {\n            longest = s.len();\n        }\n    }\n \
    \   Some(strings[strings.iter().position(|&x| x == longest).unwrap()])\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `String` with `usize`\n  --> /tmp/tmpoglknpf1.rs:18:49\n\
    \   |\n18 |     Some(strings[strings.iter().position(|&x| x == longest).unwrap()])\n\
    \   |                                                 ^^ no implementation for\
    \ `String == usize`\n   |\n   = help: the trait `PartialEq<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter()\n        .map(|s| s.chars().max().unwrap())\n\
    \        .max()\n        .and_then(|s| strings.iter().filter_map(|s| s.chars().max()).max())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpclj9k6my.rs:9:5\n   |\n8\
    \  |   fn longest(strings: Vec<String>) -> Option<String> {\n   |            \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n9  | /     strings.iter()\n10 | |         .map(|s| s.chars().max().unwrap())\n\
    11 | |         .max()\n12 | |         .and_then(|s| strings.iter().filter_map(|s|\
    \ s.chars().max()).max())\n   | |___________________________________________________________________________^\
    \ expected struct `String`, found `char`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<char>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n\n    let mut longest_len = std::u32::MAX;\n    let mut longest_str = String::new();\n\
    \n    for s in strings {\n        let l = s.len();\n\n        if l > longest_len\
    \ {\n            longest_len = l;\n            longest_str = s;\n        }\n \
    \   }\n\n    if longest_len > std::u32::MAX {\n        return None;\n    }\n\n\
    \    Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1b70rtkn.rs:19:16\n   |\n\
    19 |         if l > longest_len {\n   |                ^^^^^^^^^^^ expected `usize`,\
    \ found `u32`\n   |\nhelp: you can convert a `u32` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |         if l > longest_len.try_into().unwrap()\
    \ {\n   |                           ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1b70rtkn.rs:20:27\n   |\n13 |     let mut longest_len =\
    \ std::u32::MAX;\n   |                           ------------- expected due to\
    \ this value\n...\n20 |             longest_len = l;\n   |                   \
    \        ^ expected `u32`, found `usize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings\n        .iter()\n        .map(|s| s.chars().count())\n\
    \        .max_by_key(|v| v)\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgf2sl2pj.rs:9:5\n   |\n8\
    \  |   fn longest(strings: Vec<String>) -> Option<String> {\n   |            \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n9  | /     strings\n10 | |         .iter()\n11 | |         .map(|s|\
    \ s.chars().count())\n12 | |         .max_by_key(|v| v)\n   | |__________________________^\
    \ expected struct `String`, found `usize`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<usize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    // find longest length\n    let mut lens = strings.iter().map(|s|\
    \ s.len()).max().unwrap_or(0);\n\n    // find the first longest string\n    let\
    \ mut ret = None;\n    for s in strings {\n        if s.len() == lens {\n    \
    \        ret = Some(s);\n            break;\n        }\n        lens = lens.saturating_sub(s.len());\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"yyy\")`,\n right: `Some(\"zzzz\")`', /tmp/tmpo97lytbg.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter()\n        .copied()\n        .rev()\n\
    \        .fold(String::new(), |mut acc, s| {\n            if acc.len() > s.len()\
    \ {\n                acc.push_str(s);\n            } else {\n                acc\
    \ = s;\n            }\n            acc\n        });\n}\n\nfn main() {\n    let\
    \ candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `String: Copy` is not satisfied\n    -->\
    \ /tmp/tmp93fazen4.rs:10:10\n     |\n10   |         .copied()\n     |        \
    \  ^^^^^^ the trait `Copy` is not implemented for `String`\n     |\nnote: required\
    \ by a bound in `copied`\n\nerror[E0599]: the method `rev` exists for struct `Copied<std::slice::Iter<'_,\
    \ String>>`, but its trait bounds were not satisfied\n  --> /tmp/tmp93fazen4.rs:11:10\n\
    \   |\n11 |           .rev()\n   |            ^^^ method cannot be called on `Copied<std::slice::Iter<'_,\
    \ String>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `Copied<std::slice::Iter<'_, String>>:\
    \ Iterator`\n           which is required by `&mut Copied<std::slice::Iter<'_,\
    \ String>>: Iterator`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp93fazen4.rs:8:37\n\
    \  |\n8 | fn longest(strings: Vec<String>) -> Option<String> {\n  |    -------\
    \                          ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n\
    \  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n  |\n  = note:   expected enum `Option<String>`\n          found\
    \ unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut string = String::new();\n    for string in\
    \ strings {\n        string = string.to_owned();\n        if string.len() > string.len()\
    \ {\n            return Some(string);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "warning: unused variable: `string`\n --> /tmp/tmpisre2_mk.rs:9:13\n  |\n\
    9 |     let mut string = String::new();\n  |             ^^^^^^ help: if this\
    \ is intentional, prefix it with an underscore: `_string`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n --> /tmp/tmpisre2_mk.rs:9:9\n\
    \  |\n9 |     let mut string = String::new();\n  |         ----^^^^^^\n  |   \
    \      |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0384]: cannot assign twice to immutable variable `string`\n\
    \  --> /tmp/tmpisre2_mk.rs:11:9\n   |\n10 |     for string in strings {\n   |\
    \         ------\n   |         |\n   |         first assignment to `string`\n\
    \   |         help: consider making this binding mutable: `mut string`\n11 | \
    \        string = string.to_owned();\n   |         ^^^^^^ cannot assign twice\
    \ to immutable variable\n\nerror: aborting due to previous error; 2 warnings emitted\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    if strings.is_empty() {\n        return None;\n   \
    \ }\n    let mut max_len = strings[0].len();\n    for i in 1..strings.len() {\n\
    \        if max_len > strings[i].len() {\n            max_len = strings[i].len();\n\
    \        }\n    }\n    Some(strings[strings.len() - 1].trim_end_matches('Z'))\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphff80b05.rs:18:10\n   |\n\
    18 |     Some(strings[strings.len() - 1].trim_end_matches('Z'))\n   |        \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |          |\n   |          expected struct `String`,\
    \ found `&str`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    let mut max = String::new();\n    let mut max_len =\
    \ String::new();\n    for s in strings {\n        let len = s.len();\n       \
    \ match max_len {\n            Some(len2) => {\n                if len2 > len\
    \ {\n                    max = s;\n                    max_len = len;\n      \
    \          }\n            }\n            None => max = s,\n        };\n    }\n\
    \    Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsbf4uzm2.rs:14:13\n   |\n\
    13 |         match max_len {\n   |               ------- this expression has type\
    \ `String`\n14 |             Some(len2) => {\n   |             ^^^^^^^^^^ expected\
    \ struct `String`, found enum `Option`\n   |\n   = note: expected struct `String`\n\
    \                found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpsbf4uzm2.rs:20:13\n   |\n13 |         match max_len {\n   |        \
    \       ------- this expression has type `String`\n...\n20 |             None\
    \ => max = s,\n   |             ^^^^ expected struct `String`, found enum `Option`\n\
    \   |\n   = note: expected struct `String`\n                found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsbf4uzm2.rs:17:31\n   |\n10 |\
    \     let mut max_len = String::new();\n   |                       -------------\
    \ expected due to this value\n...\n17 |                     max_len = len;\n \
    \  |                               ^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                               |\n   |                               expected\
    \ struct `String`, found `usize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\n/// >>> longest([])\n/// >>> longest(['a', 'b', 'c'])\n\
    /// 'a'\n/// >>> longest(['a', 'bb', 'ccc'])\n/// 'ccc'\nfn longest(strings: Vec<String>)\
    \ -> Option<String> {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv0bjn8br.rs:9:5\n  |\n8 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n9 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
