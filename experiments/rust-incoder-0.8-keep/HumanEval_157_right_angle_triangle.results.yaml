name: HumanEval_157_right_angle_triangle
language: rust
results:
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let delta = a * b - c * b;\n    let delta2 = delta * delta;\n    if delta2\
    \ > 0 {\n        return false;\n    }\n\n    let delta3 = delta * delta2;\n  \
    \  let delta4 = delta2 * delta2;\n    delta3 > 0 && delta4 > 0 && delta2 != 0\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpn8otwuu1.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a2 = a / 2;\n    let mut b2 = b / 2;\n    let mut c2 = c / 2;\n    while\
    \ a2 + b2 + c2 < 4 {\n        a2 += 1;\n        b2 += 1;\n        c2 += 1;\n \
    \   }\n    let mut b = sqrt(a2 + b2);\n    let mut c = sqrt(a2 - b2);\n    while\
    \ c < b {\n        b += 1;\n        c = sqrt(a2 - b);\n    }\n    a2 -= b;\n \
    \   b2 -= c;\n    c2 -= b;\n    let mut a = sqrt(a2);\n    let mut c = sqrt(c2);\n\
    \    while c < a {\n        a += 1;\n        c = sqrt(c2);\n    }\n    a2 -= a;\n\
    \    c2 -= c;\n    b2 -= b;\n    if a * b * c < 0 {\n        return false;\n \
    \   }\n    true\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmpfhu5p93b.rs:20:17\n\
    \   |\n20 |     let mut b = sqrt(a2 + b2);\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `sqrt` in this scope\n \
    \ --> /tmp/tmpfhu5p93b.rs:21:17\n   |\n21 |     let mut c = sqrt(a2 - b2);\n \
    \  |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `sqrt` in this scope\n  --> /tmp/tmpfhu5p93b.rs:24:13\n   |\n24 | \
    \        c = sqrt(a2 - b);\n   |             ^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmpfhu5p93b.rs:29:17\n\
    \   |\n29 |     let mut a = sqrt(a2);\n   |                 ^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `sqrt` in this scope\n  -->\
    \ /tmp/tmpfhu5p93b.rs:30:17\n   |\n30 |     let mut c = sqrt(c2);\n   |      \
    \           ^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `sqrt` in this scope\n  --> /tmp/tmpfhu5p93b.rs:33:13\n   |\n33 |         c\
    \ = sqrt(c2);\n   |             ^^^^ not found in this scope\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b + c {\n        false\n    } else {\n        c < b + a && a *\
    \ b > c && c > a * b\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvhxz0l8p.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        right_angle_triangle(b, a, c)\n    } else if b <\
    \ c {\n        right_angle_triangle(c, a, b)\n    } else {\n        b == c &&\
    \ (a + b) <= 4\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp57xyitr0.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > 0 && b > 0 && c > 0 && a * a + b * b - c * c > 0;\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsyc1f0tr.rs:8:58\n  |\n8 |\
    \ fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n  |    --------------------\
    \                                  ^^^^ expected `bool`, found `()`\n  |    |\n\
    \  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    9 |     a > 0 && b > 0 && c > 0 && a * a + b * b - c * c > 0;\n  |           \
    \                                              - help: remove this semicolon\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a_sqr_sum = a_sqr_sum_inner(a, b, c);\n    if a_sqr_sum > b *\
    \ b + c * c {\n        return false;\n    }\n    else if a_sqr_sum < b * b + \
    \ a * c {\n        return false;\n    }\n    else {\n        a_sqr_sum -= b *\
    \ b + c * c;\n        if a_sqr_sum < 0\n            || (a > 0 && a_sqr_sum > b\
    \ * b - c * c)\n            || (a < 0 && a_sqr_sum > b * b + c * c)\n        {\n\
    \            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n   \
    \ let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `a_sqr_sum_inner` in this scope\n -->\
    \ /tmp/tmpegv1oly4.rs:9:25\n  |\n9 |     let mut a_sqr_sum = a_sqr_sum_inner(a,\
    \ b, c);\n  |                         ^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < 0 || b < 0 || c < 0 || a + b < c + b + c {\n        false\n  \
    \  } else {\n        if a + b > c + b + c {\n            true\n        } else\
    \ {\n            a >= b + c\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9eb7d5xf.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) >= 0 && (b - c) >= 0 && (c - a) >= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpe894ghro.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n\n   \
    \ let mut counter = 0;\n    let mut a = a + 1;\n    let mut b = b + 1;\n    let\
    \ mut c = c + 1;\n\n    while a < b {\n        if b - a > c {\n            return\
    \ false;\n        }\n\n        if c - b > a {\n            counter++;\n      \
    \  }\n\n        counter++;\n        c++;\n        a++;\n    }\n\n    true\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp7dvbhifu.rs:24:20\n\
    \   |\n24 |             counter++;\n   |                    ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n24 |             { let tmp =\
    \ counter; counter += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n\
    24 -             counter++;\n24 +             counter += 1;\n   | \n\nerror: Rust\
    \ has no postfix increment operator\n  --> /tmp/tmp7dvbhifu.rs:27:16\n   |\n27\
    \ |         counter++;\n   |                ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n27 |         { let tmp = counter; counter\
    \ += 1; tmp };\n   |         +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n27 -  \
    \       counter++;\n27 +         counter += 1;\n   | \n\nerror: aborting due to\
    \ 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let l1 = a * a;\n    let l2 = b * b;\n    let l3 = c * c;\n\n    let\
    \ angle = (l1 + l2) as isize * (l2 + l3) as isize;\n\n    (l1 + l2 > l3 + angle)\
    \ && (l1 + l3 > l2 + angle)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpst_cc6tk.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b * b) - ((a / 2) * (b * c)) = \n         (a * b) - ((b / a) * (c *\
    \ c)) == 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphtu_5cep.rs:9:5\n   |\n9\
    \  | /     (b * b) - ((a / 2) * (b * c)) = \n10 | |          (a * b) - ((b / a)\
    \ * (c * c)) == 0\n   | |___________________________________________^ expected\
    \ `bool`, found `()`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).is_zero() && (c - b).is_zero()\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_zero` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp748pe6d9.rs:9:13\n  |\n9 |     (b - a).is_zero() && (c -\
    \ b).is_zero()\n  |             ^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `is_zero` found for type `isize` in the current scope\n -->\
    \ /tmp/tmp748pe6d9.rs:9:34\n  |\n9 |     (b - a).is_zero() && (c - b).is_zero()\n\
    \  |                                  ^^^^^^^ method not found in `isize`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    debug_assert!(a + b > c);\n    debug_assert!(b > c);\n    debug_assert!(c\
    \ > a);\n    (a + b + c) == (a + b) * (b + c) - (b + c) * (a + b)\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: b > c', /tmp/tmpywlgzzj9.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\tlet mut sum = a*a + b*b + c*c; // sum of three sides\n\n\tif sum < 0 {\n\
    \t\tsum = 0;\n\t}\n\n\tlet mut flag = true;\n\tif a > b {\n\t\tif b > c {\n\t\t\
    \tflag = false;\n\t\t}\n\t} else {\n\t\tif c > b {\n\t\t\tflag = false;\n\t\t\
    }\n\t}\n\n\tlet mut det = a*b*c - a*c*b; // determinant\n\n\tif det == 0 {\n\t\
    \tflag = false;\n\t}\n\t\n\treturn flag;\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpm6f9zkyc.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > b + c || b > a + c || c > a + b\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6j_ok602.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let sides = [a, b, c];\n    if sides.iter().filter(|s| s > 0).count()\
    \ == 2 {\n        if sides[1] >= sides[0] && sides[0] >= sides[2] {\n        \
    \    return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpthb6sd7u.rs:10:36\n   |\n\
    10 |     if sides.iter().filter(|s| s > 0).count() == 2 {\n   |              \
    \                      ^ expected `&&isize`, found integer\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > b + c || b > a + c || c > a + b\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpf0inb_1g.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > 0 && b > 0 && c > 0 && a <= b && a <= c && b <= c && a + b + c ==\
    \ a * b + c;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n  \
    \  assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6u2fj38x.rs:8:58\n  |\n8 |\
    \ fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n  |    --------------------\
    \                                  ^^^^ expected `bool`, found `()`\n  |    |\n\
    \  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    9 |     a > 0 && b > 0 && c > 0 && a <= b && a <= c && b <= c && a + b + c ==\
    \ a * b + c;\n  |                                                            \
    \                        - help: remove this semicolon\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let angle = (a + b + c) mod 180.0;\n    angle == 90.0 || angle == 180.0\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found keyword\
    \ `mod`\n --> /tmp/tmpe5g49nzw.rs:9:29\n  |\n9 |     let angle = (a + b + c) mod\
    \ 180.0;\n  |                             ^^^ expected one of `.`, `;`, `?`, `else`,\
    \ or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\t// If the sides are equal, they form a right-angled triangle.\n\tif a ==\
    \ b && b == c {\n\t\treturn true;\n\t}\n\n\t// If only one side is equal, then\
    \ the other two sides must be 90 or \n\t// 180 degree.\n\tif a == b {\n\t\tif\
    \ c == b {\n\t\t\treturn true;\n\t\t}\n\t\treturn b == c;\n\t}\n\tif a == c {\n\
    \t\tif b == c {\n\t\t\treturn true;\n\t\t}\n\t\treturn a == b;\n\t}\n\n\tif b\
    \ == c {\n\t\tif a == b {\n\t\t\treturn true;\n\t\t}\n\t\treturn b == a;\n\t}\n\
    \n\treturn false;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzptbihwd.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  a > 0 && b > 0 && c > 0 && a * a + b * b == c * c\n}\n\nfn main() {\n \
    \   let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmparopfcae.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > b && (b > c || c > a)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyrn49j14.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  a > 0 && b > 0 && c > 0 && a + b + c > 0\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp27_k21n3.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let d = b * b - 4 * a * c;\n    d < 0 ? false : d == 0 && a > 0 && b\
    \ > 0 && c > 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword\
    \ `false`\n  --> /tmp/tmpq9yf33vm.rs:10:13\n   |\n10 |     d < 0 ? false : d ==\
    \ 0 && a > 0 && b > 0 && c > 0\n   |             ^^^^^ expected one of `.`, `;`,\
    \ `?`, `}`, or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // Check if any of a, b, or c is zero\n    match a, b, c {\n        //\
    \ a is zero is already handled\n        _, _, _ => true,\n\n        // b and c\
    \ are equal\n        0, _, _ => true,\n        0, _, 0 => true,\n        _, _,\
    \ 0 => true,\n\n        // a and c are equal\n        _, _, _ => true,\n     \
    \   _, _, 0 => true,\n        _, _, _ => false,\n    };\n}\n\nfn main() {\n  \
    \  let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `.`, `::`, `?`, `{`, or an operator, found\
    \ `,`\n  --> /tmp/tmpituehjh8.rs:10:12\n   |\n10 |     match a, b, c {\n   | \
    \    -----  ^ expected one of `!`, `.`, `::`, `?`, `{`, or an operator\n   | \
    \    |\n   |     while parsing this `match` expression\n\nerror: aborting due\
    \ to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == b {\n        if b == c {\n            return true\n        }\n\
    \        false\n    }\n    else if (b == c) {\n        true\n    }\n    else if\
    \ a == c {\n        false\n    }\n    else {\n        ((a + b + c) == (sqrt(a)\
    \ * sqrt(b) * sqrt(c)))\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmpbtm6z22k.rs:22:26\n\
    \   |\n22 |         ((a + b + c) == (sqrt(a) * sqrt(b) * sqrt(c)))\n   |     \
    \                     ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `sqrt` in this scope\n  --> /tmp/tmpbtm6z22k.rs:22:36\n   |\n22 | \
    \        ((a + b + c) == (sqrt(a) * sqrt(b) * sqrt(c)))\n   |                \
    \                    ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `sqrt` in this scope\n  --> /tmp/tmpbtm6z22k.rs:22:46\n   |\n22 | \
    \        ((a + b + c) == (sqrt(a) * sqrt(b) * sqrt(c)))\n   |                \
    \                              ^^^^ not found in this scope\n\nwarning: unnecessary\
    \ parentheses around `if` condition\n  --> /tmp/tmpbtm6z22k.rs:15:13\n   |\n15\
    \ |     else if (b == c) {\n   |             ^      ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n15 -     else if (b ==\
    \ c) {\n15 +     else if b == c {\n   | \n\nwarning: unnecessary parentheses around\
    \ block return value\n  --> /tmp/tmpbtm6z22k.rs:22:9\n   |\n22 |         ((a +\
    \ b + c) == (sqrt(a) * sqrt(b) * sqrt(c)))\n   |         ^                   \
    \                         ^\n   |\nhelp: remove these parentheses\n   |\n22 -\
    \         ((a + b + c) == (sqrt(a) * sqrt(b) * sqrt(c)))\n22 +         (a + b\
    \ + c) == (sqrt(a) * sqrt(b) * sqrt(c))\n   | \n\nerror: aborting due to 3 previous\
    \ errors; 2 warnings emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > b + c || b > a + c || c > a + b\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7r3v23yc.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a * b + c * c) - (b * b) - (a * a)\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzbuy46rw.rs:9:5\n  |\n8 |\
    \ fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n  |       \
    \                                                   ---- expected `bool` because\
    \ of return type\n9 |     (a * b + c * c) - (b * b) - (a * a)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `bool`, found `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b {\n        std::swap(a, b);\n    }\n    if a > c {\n       \
    \ std::swap(a, c);\n    }\n    if b > c {\n        std::swap(b, c);\n    }\n \
    \   if a + b > c {\n        return false;\n    }\n    if a + c > b {\n       \
    \ return false;\n    }\n    if b + c > a {\n        return false;\n    }\n   \
    \ return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `swap` in crate `std`\n  --> /tmp/tmpt1y55uji.rs:10:14\n\
    \   |\n10 |         std::swap(a, b);\n   |              ^^^^ not found in `std`\n\
    \   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\nhelp: if you import `swap`, refer to it\
    \ directly\n   |\n10 -         std::swap(a, b);\n10 +         swap(a, b);\n  \
    \ | \n\nerror[E0425]: cannot find function `swap` in crate `std`\n  --> /tmp/tmpt1y55uji.rs:13:14\n\
    \   |\n13 |         std::swap(a, c);\n   |              ^^^^ not found in `std`\n\
    \   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\nhelp: if you import `swap`, refer to it\
    \ directly\n   |\n13 -         std::swap(a, c);\n13 +         swap(a, c);\n  \
    \ | \n\nerror[E0425]: cannot find function `swap` in crate `std`\n  --> /tmp/tmpt1y55uji.rs:16:14\n\
    \   |\n16 |         std::swap(b, c);\n   |              ^^^^ not found in `std`\n\
    \   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\nhelp: if you import `swap`, refer to it\
    \ directly\n   |\n16 -         std::swap(b, c);\n16 +         swap(b, c);\n  \
    \ | \n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let abs_a = abs(a);\n    let abs_b = abs(b);\n    let abs_c = abs(c);\n\
    \    abs_a != 0 && abs_b != 0 && abs_c != 0 &&\n        abs_a != abs_b && (abs_a\
    \ - abs_b) == (abs_a - abs_c) && (abs_b - abs_c) == (abs_a - abs_b)\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n --> /tmp/tmp5gtxs__7.rs:9:17\n\
    \  |\n9 |     let abs_a = abs(a);\n  |                 ^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp5gtxs__7.rs:10:17\n\
    \   |\n10 |     let abs_b = abs(b);\n   |                 ^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp5gtxs__7.rs:11:17\n\
    \   |\n11 |     let abs_c = abs(c);\n   |                 ^^^ not found in this\
    \ scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > b && a > c || b > c && b > a || c > a && c > b\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpu0wq0q5z.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a - b == c || b - a == c || c - a == b\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfchm10mm.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a <= b + c && a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplyb7k56j.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\ta >= 0 && b >= 0 && c >= 0 && a + b <= c && a + c <= b && b + c <= a\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjf9q5rfd.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  (b - a) * 2 + (c - b) * 2 > a * a + b * b + c * c // no zeros in abc \n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_991s3ss.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let a = a + b + c;\n    let b = a - b - c;\n    let c = a - b + c;\n\
    \    a == b * b + c * b + c * a + c * c - a * c > 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp4ybcf9yf.rs:12:7\n\
    \   |\n12 |     a == b * b + c * b + c * a + c * c - a * c > 0\n   |       ^^\
    \                                       ^\n   |\n   = help: use `::<...>` instead\
    \ of `<...>` to specify lifetime, type, or const arguments\n   = help: or use\
    \ `(...)` if you meant to specify fn arguments\nhelp: parenthesize the comparison\n\
    \   |\n12 |     a == (b * b + c * b + c * a + c * c - a * c > 0)\n   |       \
    \   +                                         +\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a < b + c && a * a + b * b + c * c <= c * c + b * b + a * a\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgomeeizm.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() <= (c - b).abs()\n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbs_aro3w.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    let\
    \ sqrt1 = a.sqrt() as f64;\n    let sqrt2 = b.sqrt() as f64;\n    let sqrt3 =\
    \ c.sqrt() as f64;\n    sqrt1 * sqrt3 == sqrt2 * sqrt1\n}\n\nfn main() {\n   \
    \ let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpmd489w9r.rs:12:19\n   |\n12 |     let sqrt1 = a.sqrt()\
    \ as f64;\n   |                   ^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `sqrt` found for type `isize` in the current scope\n  --> /tmp/tmpmd489w9r.rs:13:19\n\
    \   |\n13 |     let sqrt2 = b.sqrt() as f64;\n   |                   ^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `sqrt` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpmd489w9r.rs:14:19\n   |\n14 |  \
    \   let sqrt3 = c.sqrt() as f64;\n   |                   ^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if b - a < c {\n        false\n    } else if c - b < a {\n        true\n\
    \    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvlfbt_d6.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // Check that the number of sides equals 3\n    assert! (a + b + c ==\
    \ 3);\n    \n    // If a>b>c, then b is wrong\n    if a > b {\n        b\n   \
    \ } else {\n        a\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2j2cs0mr.rs:14:9\n   |\n\
    8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n   |   \
    \                                                       ---- expected `bool` because\
    \ of return type\n...\n14 |         b\n   |         ^ expected `bool`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2j2cs0mr.rs:16:9\n   |\n8  | fn\
    \ right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n   |         \
    \                                                 ---- expected `bool` because\
    \ of return type\n...\n16 |         a\n   |         ^ expected `bool`, found `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b > c) && (a + c > b) && (b + c > a)\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpol52_vo7.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    \n    // Compute the third side of the triangle\n    let c: isize = 3*a\
    \ + 2*b + c;\n    \n    // If the third side is negative, no triangle exists\n\
    \    if c < 0 {\n        return false;\n    }\n    \n    // If the third side\
    \ is equal to the first two, it's a right angle triangle\n    if c == a {\n  \
    \      return true;\n    }\n    \n    // If the third side is equal to the second\
    \ two, it's a right angle triangle\n    if c == b {\n        return true;\n  \
    \  }\n    \n    // If the third side is equal to the third two, it's a right angle\
    \ triangle\n    if c == c {\n        return true;\n    }\n    \n    // If the\
    \ third side is greater than the second two, it's not possible\n    // to form\
    \ a right angle triangle with these side lengths\n    if c > b {\n        return\
    \ false;\n    }\n    \n    // If the third side is greater than the first two,\
    \ it's not possible\n    // to form a right angle triangle with these side lengths\n\
    \    if c > a {\n        return false;\n    }\n    \n    // If the third side\
    \ is greater than the third two, it's not possible\n    // to form a right angle\
    \ triangle with these side lengths\n    if c > c {\n        return false;\n  \
    \  }\n    \n    // If the third side is less than the second two, it's possible\
    \ to\n    // form a right angle triangle with these side lengths\n    if c < b\
    \ {\n        return true;\n    }\n    \n    // If the third side is less than\
    \ the first two, it's possible to\n    // form a right angle triangle with these\
    \ side lengths\n    if c < a {\n        return true;\n    }\n    \n    // If the\
    \ third side is less than the third two, it's possible to\n    // form a right\
    \ angle triangle with these side lengths\n    if c < c {\n        return true;\n\
    \    }\n    \n    // If this point is on a line, it's possible to form a right\
    \ angle triangle\n    // with these side lengths\n    if a != b {\n        return\
    \ true;\n    }\n    \n    // If this point is on a line, it's possible to form\
    \ a right angle triangle\n    // with these side lengths\n    if a != c {\n  \
    \      return true;\n    }\n    \n    // If this point is on a line, it's possible\
    \ to form a right angle triangle\n    // with these side lengths\n    if b !=\
    \ c {\n        return true;\n    }\n    \n    // If this point is on a line, it's\
    \ possible to form a right angle triangle\n    // with these side lengths\n  \
    \  if a > b {\n        return true;\n    }\n    \n    // If this point is on a\
    \ line, it's possible to form a right angle triangle\n    // with these side lengths\n\
    \    if a > c \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `}`\n  --> /tmp/tmpr039c0uu.rs:96:1\n   |\n\
    95 |     if a > c \n   |     -- this `if` expression has a condition, but no block\n\
    96 | }\n   | ^ expected `{`\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ + b + c < 4 {\n        a = a + b + c;\n        b = b + c + a;\n        c = c\
    \ + a + b;\n    }\n    if a == b {\n        return a > c;\n    }\n    else {\n\
    \        return b > c;\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2p9my6j5.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpu9mzisq3.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c {\n        return false;\n    }\n\n    a + c > b + c ||\
    \ b + c > a + c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzffb7y1o.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() == (b - c).abs() == (b + c).abs()\n}\n\nfn main() {\n \
    \   let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n --> /tmp/tmpqlwmqigs.rs:9:19\n\
    \  |\n9 |     (b - a).abs() == (b - c).abs() == (b + c).abs()\n  |           \
    \        ^^               ^^\n  |\nhelp: split the comparison into two\n  |\n\
    9 |     (b - a).abs() == (b - c).abs() && (b - c).abs() == (b + c).abs()\n  |\
    \                                    ++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpqlwmqigs.rs:9:39\n  |\n9 |     (b - a).abs() == (b - c).abs()\
    \ == (b + c).abs()\n  |                                       ^^^^^^^^^^^^^ expected\
    \ `bool`, found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let is_triangle_result = a + b > c && a * b > c;\n    let a = (a * a\
    \ + c * b * b - a * b * c).abs() < 2.0;\n    let b = (b * a + c * b * b - a *\
    \ c).abs() < 2.0;\n    let c = (c * a + a * b * b - c * b * c).abs() < 2.0;\n\
    \    is_triangle_result && a && b && c\n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp04jm3_om.rs:10:53\n   |\n\
    10 |     let a = (a * a + c * b * b - a * b * c).abs() < 2.0;\n   |          \
    \                                           ^^^ expected `isize`, found floating-point\
    \ number\n\nerror[E0277]: cannot multiply `isize` by `bool`\n  --> /tmp/tmp04jm3_om.rs:11:16\n\
    \   |\n11 |     let b = (b * a + c * b * b - a * c).abs() < 2.0;\n   |       \
    \         ^ no implementation for `isize * bool`\n   |\n   = help: the trait `Mul<bool>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0369]: cannot multiply `bool` by `isize`\n \
    \ --> /tmp/tmp04jm3_om.rs:11:36\n   |\n11 |     let b = (b * a + c * b * b - a\
    \ * c).abs() < 2.0;\n   |                                  - ^ - isize\n   | \
    \                                 |\n   |                                  bool\n\
    \nerror[E0277]: cannot multiply `isize` by `bool`\n  --> /tmp/tmp04jm3_om.rs:12:16\n\
    \   |\n12 |     let c = (c * a + a * b * b - c * b * c).abs() < 2.0;\n   |   \
    \             ^ no implementation for `isize * bool`\n   |\n   = help: the trait\
    \ `Mul<bool>` is not implemented for `isize`\n   = help: the following other types\
    \ implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n          \
    \   <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n            \
    \ <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a\
    \ i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a isize\
    \ as Mul<isize>>\n           and 49 others\n\nerror[E0369]: cannot multiply `bool`\
    \ by `bool`\n  --> /tmp/tmp04jm3_om.rs:12:24\n   |\n12 |     let c = (c * a +\
    \ a * b * b - c * b * c).abs() < 2.0;\n   |                      - ^ - bool\n\
    \   |                      |\n   |                      "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // if all sides are same\n    if a == b {\n        return a == c;\n \
    \   }\n    \n    // if all sides are same\n    if a == c {\n        return b ==\
    \ c;\n    }\n    \n    // if one side is same\n    if a == b + c {\n        return\
    \ right_angle_triangle(b, c);\n    }\n    \n    // if two sides are same\n   \
    \ if b == c {\n        return false; // no such triangle\n    }\n    \n    //\
    \ if two sides are different\n    if a == b + c {\n        return right_angle_triangle(b,\
    \ c);\n    }\n    \n    // if one side is different\n    if a == b + c {\n   \
    \     return right_angle_triangle(b, c);\n    }\n    \n    // if both sides are\
    \ different\n    if a == b + c {\n        return right_angle_triangle(b, c);\n\
    \    }\n    \n    // if one side is greater than or equals to other side\n   \
    \ if a >= b + c {\n        return right_angle_triangle(a, b, c);\n    }\n    \n\
    \    // if both sides are greater than or equals to other side\n    if b >= a\
    \ + c {\n        return right_angle_triangle(a, b, c);\n    }\n    \n    // if\
    \ one side is greater than or equals to other side\n    if a >= b + c {\n    \
    \    return right_angle_triangle(a, b, c);\n    }\n    \n    // if two sides are\
    \ greater than or equals to other side\n    if b >= a + c {\n        return right_angle_triangle(a,\
    \ b, c);\n    }\n    \n    // if two sides are equal\n    // or two sides are\
    \ greater than or equals to other side\n    if a == b + c {\n        return right_angle_triangle(a,\
    \ b, c);\n    }\n    \n    // if one side is equal\n    // or one side is greater\
    \ than or equals to other side\n    if a == b + c {\n        return right_angle_triangle(a,\
    \ b, c);\n    }\n    \n    // if one side is equal\n    // or one side is greater\
    \ than or equals to other side\n    if a == b + c {\n        return right_angle_triangle(a,\
    \ b, c);\n    }\n    \n    // if all sides are equal\n    // or all sides are\
    \ greater than or equals to other side\n    if a == b + c {\n        return right_angle_triangle(a,\
    \ b, c);\n    }\n    \n    // if all sides are equal\n    // or all sides are\
    \ greater than or equals to other side\n    if a == b + c {\n        return right_angle_triangle(a,\
    \ b, c);\n    }\n    \n    // if all sides are equal\n    // or all sides are\
    \ greater than or equals to other side\n    if a == b + c {\n        return \n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp5f9ri9e8.rs:113:3\n\
    \    |\n8   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n96  |     if a == b + c {\n    |                   - this delimiter\
    \ might not be properly closed...\n97  |         return \n98  | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n113 | }\n    |   ^\n\n\
    error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n\
    \  --> /tmp/tmp5f9ri9e8.rs:21:16\n   |\n21 |         return right_angle_triangle(b,\
    \ c);\n   |                ^^^^^^^^^^^^^^^^^^^^ -  - supplied 2 arguments\n  \
    \ |                |\n   |                expected 3 arguments\n   |\nnote: function\
    \ defined here\n  --> /tmp/tmp5f9ri9e8.rs:8:4\n   |\n8  | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |    ^^^^^^^^^^^^^^^^^^^^ --------\
    \  --------  --------\n\nerror[E0061]: this function takes 3 arguments but 2 arguments\
    \ were supplied\n  --> /tmp/tmp5f9ri9e8.rs:31:16\n   |\n31 |         return right_angle_triangle(b,\
    \ c);\n   |                ^^^^^^^^^^^^^^^^^^^^ -  - supplied 2 arguments\n  \
    \ |                |\n   |                expected 3 arguments\n   |\nnote: function\
    \ defined here\n  --> /tmp/tmp5f9ri9e8.rs:8:4\n   |\n8  | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |    ^^^^^^^^^^^^^^^^^^^^ --------\
    \  --------  --------\n\nerror[E0061]: this function takes 3 arguments but 2 arguments\
    \ were supplied\n  --> /tmp/tmp5f9ri9e8.rs:36:16\n   |\n36 |         return right_angle_triangle(b,\
    \ c);\n   |                ^^^^^^^^^^^^^^^^^^^^ -  - supplied 2 arguments\n  \
    \ |                |\n   |                expected 3 arguments\n   |\nnote: function\
    \ defined here\n  --> /tmp/tmp5f9ri9e8.rs:8:4\n   |\n8  | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |    ^^^^^^^^^^^^^^^^^^^^ --------\
    \  --------  --------\n\nerror[E0061]: this function takes 3 arguments but 2 arguments\
    \ were supplied\n  --> /tmp/tmp5f9ri9e8.rs:41:16\n   |\n41 |     "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a <= b + c && a + c <= b\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0n3pdpsx.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c + b - a) * (c + a - b) < 0\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_p0kpad3.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() > (c - b).abs()\n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpge9xkcgp.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b + c == (a + b + c) as isize\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpptd_62bd.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\tif a + b > c + a {\n\t\tfalse\n\t} else if b + c > a + b {\n\t\tfalse\n\
    \t} else if c + a > a + c {\n\t\tfalse\n\t} else {\n\t\ttrue\n\t}\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprz7od00_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut b = b;\n    let mut c = c;\n    a -= b;\n\
    \    b -= c;\n    a -= c;\n    a == 0 || b == 0 || c == 0 || a + b + c == 360\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpn3_hz0n6.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let EPSILON: f64 = 1e-6;\n    let mut a = a - b;\n    let mut b = b -\
    \ c;\n    let mut c = c - a;\n    \n    // Check if a > b and b > c\n    if a\
    \ > EPSILON && b > EPSILON && c > EPSILON {\n        return false;\n    }\n  \
    \  \n    // Check if c > a and c > b\n    if c > EPSILON {\n        a = c;\n \
    \       b = c - a;\n    }\n    \n    // Check if b > a and b > c\n    if b > EPSILON\
    \ {\n        a = b;\n        c = b - a;\n    }\n    \n    // Check if a > c and\
    \ c > b\n    if a > EPSILON {\n        b = c;\n        c = a - b;\n    }\n   \
    \ \n    if a == EPSILON && b == EPSILON && c == EPSILON {\n        return true;\n\
    \    }\n    \n    return false;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfu8wl3sb.rs:15:12\n   |\n\
    15 |     if a > EPSILON && b > EPSILON && c > EPSILON {\n   |            ^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfu8wl3sb.rs:15:27\n\
    \   |\n15 |     if a > EPSILON && b > EPSILON && c > EPSILON {\n   |         \
    \                  ^^^^^^^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfu8wl3sb.rs:15:42\n   |\n15 |     if a > EPSILON && b >\
    \ EPSILON && c > EPSILON {\n   |                                          ^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfu8wl3sb.rs:20:12\n\
    \   |\n20 |     if c > EPSILON {\n   |            ^^^^^^^ expected `isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfu8wl3sb.rs:26:12\n \
    \  |\n26 |     if b > EPSILON {\n   |            ^^^^^^^ expected `isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfu8wl3sb.rs:32:12\n \
    \  |\n32 |     if a > EPSILON {\n   |            ^^^^^^^ expected `isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfu8wl3sb.rs:37:13\n \
    \  |\n37 |     if a == EPSILON && b == EPSILON && c == EPSILON {\n   |       \
    \      ^^^^^^^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfu8wl3sb.rs:37:29\n   |\n37 |     if a == EPSILON && b == EPSILON\
    \ && c == EPSILON {\n   |                             ^^^^^^^ expected `isize`,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfu8wl3sb.rs:37:45\n\
    \   |\n37 |     if a == EPSILON && b == EPSILON && c == EPSILON {\n   |      \
    \                                       ^^^^^^^ expected `isize`, found `f64`\n\
    \nerror: aborting due to 9 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b {\n        a, b, b = b, a, b\n    }\n    if a > c {\n      \
    \  a, b, c = c, a, b\n    }\n    if b > c {\n        b, c, c = c, b, a\n    }\n\
    \    if b > c {\n        a, b, c = c, a, b\n    }\n    if a < b {\n        a,\
    \ b, c = c, a, b\n    }\n    \n    a == b or a == c or a == c\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected `:`, found `=`\n  --> /tmp/tmpflyphv4c.rs:10:17\n   |\n\
    10 |         a, b, b = b, a, b\n   |                -^\n   |                |\n\
    \   |                help: replace equals symbol with a colon: `:`\n\nerror: struct\
    \ literals are not allowed here\n  --> /tmp/tmpflyphv4c.rs:9:12\n   |\n9  |  \
    \     if a > b {\n   |  ____________^\n10 | |         a, b, b = b, a, b\n11 |\
    \ |     }\n   | |_____^\n   |\nhelp: surround the struct literal with parentheses\n\
    \   |\n9  ~     if a > (b {\n10 |         a, b, b = b, a, b\n11 ~     })\n   |\n\
    \nerror: expected `:`, found `=`\n  --> /tmp/tmpflyphv4c.rs:13:17\n   |\n13 |\
    \         a, b, c = c, a, b\n   |                -^\n   |                |\n \
    \  |                help: replace equals symbol with a colon: `:`\n\nerror: struct\
    \ literals are not allowed here\n  --> /tmp/tmpflyphv4c.rs:12:12\n   |\n12 | \
    \      if a > c {\n   |  ____________^\n13 | |         a, b, c = c, a, b\n14 |\
    \ |     }\n   | |_____^\n   |\nhelp: surround the struct literal with parentheses\n\
    \   |\n12 ~     if a > (c {\n13 |         a, b, c = c, a, b\n14 ~     })\n   |\n\
    \nerror: expected `:`, found `=`\n  --> /tmp/tmpflyphv4c.rs:16:17\n   |\n16 |\
    \         b, c, c = c, b, a\n   |                -^\n   |                |\n \
    \  |                help: replace equals symbol with a colon: `:`\n\nerror: struct\
    \ literals are not allowed here\n  --> /tmp/tmpflyphv4c.rs:15:12\n   |\n15 | \
    \      if b > c {\n   |  ____________^\n16 | |         b, c, c = c, b, a\n17 |\
    \ |     }\n   | |_____^\n   |\nhelp: surround the struct literal with parentheses\n\
    \   |\n15 ~     if b > (c {\n16 |         b, c, c = c, b, a\n17 ~     })\n   |\n\
    \nerror: expected `:`, found `=`\n  --> /tmp/tmpflyphv4c.rs:19:17\n   |\n19 |\
    \         a, b, c = c, a, b\n   |                -^\n   |                |\n \
    \  |                help: replace equals symbol with a colon: `:`\n\nerror: struct\
    \ literals are not allowed here\n  --> /tmp/tmpflyphv4c.rs:18:12\n   |\n18 | \
    \      if b > c {\n   |  ____________^\n19 | |         a, b, c = c, a, b\n20 |\
    \ |     }\n   | |_____^\n   |\nhelp: surround the struct literal with parentheses\n\
    \   |\n18 ~     if b > (c {\n19"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let d = b * b - 4 * a * c;\n    d < 0\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptez87bto.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 && b == 0 && c == 0 || (a == 0 && b != 0 || b != 0 && c ==\
    \ 0) || (a != 0 && b == 0 && c != 0 || a != 0 && b != 0 && c != 0) || (a != 0\
    \ && b != 0 && c != 0) {\n        return false;\n    }\n    let mut a = a > c\
    \ ? a : c;\n    let mut b = b > c ? b : c;\n    let mut c = a > b ? a : b;\n\n\
    \    c -= 1;\n    c += 1;\n\n    a -= 1;\n    b += 1;\n\n    a -= 1;\n    b -=\
    \ 1;\n\n    a -= 1;\n    b += 1;\n\n    a -= 1;\n    c -= 1;\n\n    a -= 1;\n\
    \    b -= 1;\n\n    a -= 1;\n    c += 1;\n\n    a -= 1;\n    b -= 1;\n\n    a\
    \ += 1;\n    b -= 1;\n\n    a += 1;\n    b += 1;\n\n    a += 1;\n    b -= 1;\n\
    \n    a += 1;\n    c -= 1;\n\n    a += 1;\n    b += 1;\n\n    a += 1;\n    b -=\
    \ 1;\n\n    a += 1;\n    c += 1;\n\n    a + b == c || a + b == a || a + c == b\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpm5_3z1_8.rs:12:25\n   |\n12 |     let mut a = a > c ? a : c;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if b >= c {\n        return false;\n    }\n    \n    if a <= c {\n  \
    \      return true;\n    }\n    \n    let ab = a - b;\n    let bc = b - c;\n \
    \   let ac = c - a;\n    \n    let ab_ac = ab * ac;\n    let ab_bc = ab * bc;\n\
    \    let ac_bc = ac * bc;\n    let ab_ab = ab * ab;\n    let ab_cb = ab * bc;\n\
    \    let ac_ac = ac * ac;\n    let ac_bc = ac * bc;\n    let bc_cb = bc * cb;\n\
    \    let ab_ac_bc = ab_ac * bc;\n    \n    if ab_ac_bc < ab_ab + ab_cb + ac_ac\
    \ {\n        return false;\n    }\n    \n    if ab_ac_bc < ac_bc + ac_cb + bc_cb\
    \ {\n        return true;\n    }\n    \n    let ab_ab_cb = ab_ab * cb;\n    let\
    \ ab_ac_cb = ab_ac * cb;\n    let ab_bc_cb = ab_bc * cb;\n    let ab_ac_bc_ab\
    \ = ab_ac_bc * ab;\n    let ab_ac_bc_cb = ab_ac_bc * cb;\n    \n    if ab_ac_bc_ab\
    \ < ab_ab_cb + ab_cb + ab_ac_bc_cb {\n        return false;\n    }\n    \n   \
    \ let ab_ac_bc_cb = ab_ac_bc * cb;\n    if ab_ac_bc_cb < ab_ab_cb + ab_cb + ab_ac_bc_ab\
    \ {\n        return true;\n    }\n    \n    let ac_bc_cb = ac_bc * cb;\n    if\
    \ ac_bc_cb < ac_bc + ac_cb + bc_cb {\n        return false;\n    }\n    \n   \
    \ let ac_bc_cb = ac_bc * cb;\n    if ac_bc_cb < ac_bc + ac_cb + bc_cb {\n    \
    \    return true;\n    }\n    \n    let ab_ab_cb = ab_ab * cb;\n    if ab_ab_cb\
    \ < ab_ab_cb + ab_cb + ab_ab_ac_bc_cb {\n        return false;\n    }\n    \n\
    \    let ab_ab_cb = ab_ab * cb;\n    if ab_ab_cb < ab_ab_cb + ab_cb + ab_ab_ac_bc_cb\
    \ {\n        return true;\n    }\n    \n    let ab_ac_bc_cb = \n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpk8d2j7q0.rs:75:1\n\
    \   |\n75 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `cb`\
    \ in this scope\n  --> /tmp/tmpk8d2j7q0.rs:28:22\n   |\n28 |     let bc_cb = bc\
    \ * cb;\n   |                      ^^ help: a local variable with a similar name\
    \ exists: `ab`\n\nerror[E0425]: cannot find value `ac_cb` in this scope\n  -->\
    \ /tmp/tmpk8d2j7q0.rs:35:27\n   |\n35 |     if ab_ac_bc < ac_bc + ac_cb + bc_cb\
    \ {\n   |                           ^^^^^ help: a local variable with a similar\
    \ name exists: `ab_cb`\n\nerror[E0425]: cannot find value `cb` in this scope\n\
    \  --> /tmp/tmpk8d2j7q0.rs:39:28\n   |\n39 |     let ab_ab_cb = ab_ab * cb;\n\
    \   |                            ^^ help: a local variable with a similar name\
    \ exists: `ab`\n\nerror[E0425]: cannot find value `cb` in this scope\n  --> /tmp/tmpk8d2j7q0.rs:40:28\n\
    \   |\n40 |     let ab_ac_cb = ab_ac * cb;\n   |                            ^^\
    \ help: a local variable with a similar name exists: `ab`\n\nerror[E0425]: cannot\
    \ find value `cb` in this scope\n  --> /tmp/tmpk8d2j7q0.rs:41:28\n   |\n41 | \
    \    let ab_bc_cb = ab_bc * cb;\n   |                            ^^ help: a local\
    \ variable with a similar name exists: `ab`\n\nerror[E0425]: cannot find value\
    \ `cb` in this scope\n  --> /tmp/tmpk8d2j7q0.rs:43:34\n   |\n43 |     let ab_ac_bc_cb\
    \ = ab_ac_bc * cb;\n   |                                  ^^ help: a local variable\
    \ with a similar name exists: `ab`\n\nerror[E0425]: cannot find value `cb` in\
    \ this scope\n  --> /tmp/tmpk8d2j7q0.rs:49:34\n   |\n49 |     let ab_ac_bc_cb\
    \ = ab_ac_bc * cb;\n   |                                  ^^ help: a local variable\
    \ with a similar name exists: `ab`\n\nerror[E0425]: cannot find value `cb` in\
    \ this scope\n  --> /tmp/tmpk8d2j7q0.rs:54:28\n   |\n54 |     let ac_bc_cb = ac_bc\
    \ * cb;\n   |                            ^^ help: a local variable with a similar\
    \ name exists: `ab`\n\nerror[E0425]: cannot find value `ac_cb` in this scope\n\
    \  --> /tmp/tmpk8d2j7q0.rs:55:27\n   |\n55 |     if ac_bc_cb < ac_bc + ac_cb +\
    \ bc_cb {\n   |                           ^^^^^ help:"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a >= b and b >= c and c >= a \n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: `and` is not a logical operator\n --> /tmp/tmp4abzfu2q.rs:9:12\n\
    \  |\n9 |     a >= b and b >= c and c >= a \n  |            ^^^ help: use `&&`\
    \ to perform logical conjunction\n  |\n  = note: unlike in e.g., python and PHP,\
    \ `&&` and `||` are used for logical operators\n\nerror: `and` is not a logical\
    \ operator\n --> /tmp/tmp4abzfu2q.rs:9:23\n  |\n9 |     a >= b and b >= c and\
    \ c >= a \n  |                       ^^^ help: use `&&` to perform logical conjunction\n\
    \  |\n  = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical\
    \ operators\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b * b) - (a * a) - (c * c) > 0\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphqwoavo9.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let a2 = a*a;\n    let b2 = b*b;\n    let c2 = c*c;\n    let ad = a*d;\n\
    \    let bd = b*d;\n    let cd = c*d;\n    let adb = ad*b;\n    let bdc = bd*c;\n\
    \    let cdc = cd*c;\n    let adbc = adb*c;\n    let bdc2 = bdc*b;\n    let ad2c\
    \ = (ad*c) - (a*d);\n    let bd2c = (bd*c) - (b*d);\n    \n    (\n        ((b2<c2\
    \ && ad>bdc) && (ad<bdc) && (adb<bdc2)) \n        || ((b2<c2 && ad>bdc) && (ad<bdc)\
    \ && (ad2c<bdc2)) \n        || ((b2<c2 && ad>bdc) && (ad2c<bdc) && (adb<bdc2))\
    \ \n        || ((b2<c2 && ad>bdc) && (ad2c<bdc) && (ad2c<bdc2)) \n        || ((b2<c2\
    \ && bd>bdc) && (ad>bdc) && (adb<bdc2)) \n        || ((b2<c2 && bd>bdc) && (ad>bdc)\
    \ && (ad2c<bdc2)) \n        || ((b2<c2 && bd>bdc) && (ad>bdc) && (ad2c<bdc) &&\
    \ (adb<bdc2)) \n        || ((b2<c2 && bd>bdc) && (ad>bdc) && (ad2c<bdc) && (ad2c<bdc2))\
    \ \n        || ((b2<c2 && bd>bdc) && (ad>bdc) && (adb<bdc2)) \n        || ((b2<c2\
    \ && bd>bdc) && (ad>bdc) && (ad2c<bdc) && (adb<bdc2)) \n        || ((b2<c2 &&\
    \ bd>bdc) && (ad>bdc) && (ad2c<bdc) && (ad2c<bdc2)) \n        || ((b2<c2 && cd>bdc)\
    \ && (ad>bdc) && (adb<bdc2)) \n        || ((b2<c2 && cd>bdc) && (ad>bdc) && (ad2c<bdc)\
    \ && (adb<bdc2)) \n        || ((b2<c2 && cd>bdc) && (ad>bdc) && (ad2c<bdc) &&\
    \ (ad2c<bdc2)) \n        || ((b2<c2 && cd>bdc) && (ad>bdc) && (ad2c<bdc) && (\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp11yp6l9r.rs:38:60\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                                               - closing\
    \ delimiter possibly meant for this\n...\n38 |         || ((b2<c2 && cd>bdc) &&\
    \ (ad>bdc) && (ad2c<bdc) && (\n   |                                          \
    \                  ^ unclosed delimiter\n39 | }\n   | ^ mismatched closing delimiter\n\
    \nerror[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmp11yp6l9r.rs:12:16\n\
    \   |\n12 |     let ad = a*d;\n   |                ^ help: a local variable with\
    \ a similar name exists: `a`\n\nerror[E0425]: cannot find value `d` in this scope\n\
    \  --> /tmp/tmp11yp6l9r.rs:13:16\n   |\n13 |     let bd = b*d;\n   |         \
    \       ^ help: a local variable with a similar name exists: `a`\n\nerror[E0425]:\
    \ cannot find value `d` in this scope\n  --> /tmp/tmp11yp6l9r.rs:14:16\n   |\n\
    14 |     let cd = c*d;\n   |                ^ help: a local variable with a similar\
    \ name exists: `a`\n\nerror[E0425]: cannot find value `d` in this scope\n  -->\
    \ /tmp/tmp11yp6l9r.rs:20:28\n   |\n20 |     let ad2c = (ad*c) - (a*d);\n   | \
    \                           ^ help: a local variable with a similar name exists:\
    \ `a`\n\nerror[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmp11yp6l9r.rs:21:28\n\
    \   |\n21 |     let bd2c = (bd*c) - (b*d);\n   |                            ^\
    \ help: a local variable with a similar name exists: `a`\n\nwarning: unnecessary\
    \ parentheses around block return value\n  --> /tmp/tmp11yp6l9r.rs:23:5\n   |\n\
    23 | /     (\n24 | |         ((b2<c2 && ad>bdc) && (ad<bdc) && (adb<bdc2)) \n\
    \   | |________^\n...\n39 |   }\n   |    ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n23 ~     ((b2<c2 && ad>bdc)\
    \ && (ad<bdc) && (adb<bdc2)) \n24 |         || ((b2<c2 && ad>bdc) && (ad<bdc)\
    \ && (ad2c<bdc2)) \n25 |         || ((b2<c2 && ad>bdc) && (ad2c<bdc) && (adb<bdc2))\
    \ \n26 |         || ((b2<c2 && ad>bdc) && (ad2c<bdc) && (ad2c<bdc2)) \n27 |  \
    \       || ((b2<c2 && bd>bdc) && (ad>bdc) && "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) < 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2tbfi5jt.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    a += 360 if a < 0;\n    let mut b = b % 360;\n\
    \    b += 360 if b < 0;\n    let mut c = c % 360;\n    c += 360 if c < 0;\n  \
    \  c -= 90 if a < b;\n    a -= b if a < b;\n    c -= 90 if c < b;\n    c -= b\
    \ if c < a;\n    a -= 90 if c < a;\n    a -= b if a < c;\n    c -= 90 if c < c;\n\
    \    c -= b if c < a;\n    a -= 90 if c < a;\n    a -= b if a < c;\n    c -= 90\
    \ if c < c;\n    c -= b if c < a;\n    a -= 90 if c < a;\n    a -= b if a < c;\n\
    \    c -= 90 if c < c;\n    c -= b if c < a;\n    a -= 90 if c < a;\n    a -=\
    \ b if a < c;\n    c -= 90 if c < c;\n    c -= b if c < a;\n    a -= 90 if c <\
    \ a;\n    a -= b if a < c;\n    c -= 90 if c < c;\n    c -= b if c < a;\n    a\
    \ -= 90 if c < a;\n    a -= b if a < c;\n    c -= 90 if c < c;\n    c -= b if\
    \ c < a;\n    a -= 90 if c < a;\n    a -= b if a < c;\n    c -= 90 if c < c;\n\
    \    c -= b if c < a;\n    a -= 90 if c < a;\n    a -= b if a < c;\n    c -= 90\
    \ if c < c;\n    c -= b if c < a;\n    a -= 90 if c < a;\n    a -= b if a < c;\n\
    \    c -= 90 if c < c;\n    c -= b if c < a;\n    a -= 90 if c < a;\n    a -=\
    \ b if a < c;\n    c -= 90 if c < c;\n    c -= b if c < a;\n    a -= 90 if c <\
    \ a;\n    a -= b if a < c;\n    c -= 90 if c < c;\n    c -= b if c < a;\n    a\
    \ -= 90 if c < a;\n    a -= b if a < c;\n    c -= 90 if c < c;\n    c -= b if\
    \ c < a;\n    a -= 90 if c < a;\n    a -= b if a < c;\n\n}\n\nfn main() {\n  \
    \  let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword\
    \ `if`\n  --> /tmp/tmpkloogun1.rs:10:14\n   |\n10 |     a += 360 if a < 0;\n \
    \  |              ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror:\
    \ aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == b {\n        if b == c {\n            return true;\n        }\
    \ else {\n            return false;\n        }\n    } else {\n        if b ==\
    \ c {\n            return false;\n        }\n    }\n\n    // Right triangle inequalities\n\
    \    let abs_a = a.abs();\n    let abs_b = b.abs();\n    let abs_c = c.abs();\n\
    \    let abs_ab = abs_a + abs_b + abs_c;\n    let abs_capa = abs_ab + abs_b;\n\
    \    let abs_capb = abs_ab + abs_c;\n    let abs_capc = abs_a + abs_c;\n\n   \
    \ if abs_ab > abs_capa && abs_ab > abs_capb && abs_ab > abs_capc {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpupx0or36.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut flag = true;\n\n    if b - a < c {\n        return false\n  \
    \  }\n\n    if c - b < a {\n        return false\n    }\n\n    if b - c < a {\n\
    \        return false\n    }\n\n    if a - b < c {\n        return false\n   \
    \ }\n\n    if c - a < b {\n        return false\n    }\n\n    flag\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpc8tvrlau.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || b + c > a || c + a > b {\n        return false;\n   \
    \ }\n    let mut i = 0;\n    let mut j = 0;\n    while i < a && j < b {\n    \
    \    if a * j - b * i < 0 {\n            i += 1;\n        } else {\n         \
    \   j += 1;\n        }\n    }\n    i < c && j < b\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpx_0ta1xn.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    match (a, b) {\n        (a, b) => a > b,\n        (_, b) => b > a,\n\
    \        (a, b) => a > b,\n        (_, c) => b > c,\n        (_b, c) => b > a,\n\
    \        (_, _) => c > a,\n        _ => false,\n    }\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_6m057av.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    \n    let degree = ((360.0 + b) * (360.0 + c) * (360.0 + a)) / GCD(a,\
    \ b);\n\n    if degree < 90.0 {\n        return true;\n    }\n    else {\n   \
    \     return false;\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function, tuple struct or tuple variant `GCD`\
    \ in this scope\n  --> /tmp/tmpawwxijk3.rs:10:62\n   |\n10 |     let degree =\
    \ ((360.0 + b) * (360.0 + c) * (360.0 + a)) / GCD(a, b);\n   |               \
    \                                               ^^^ not found in this scope\n\n\
    error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpawwxijk3.rs:10:26\n\
    \   |\n10 |     let degree = ((360.0 + b) * (360.0 + c) * (360.0 + a)) / GCD(a,\
    \ b);\n   |                          ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Add<Rhs>`:\n            \
    \ <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpawwxijk3.rs:10:40\n   |\n10 |\
    \     let degree = ((360.0 + b) * (360.0 + c) * (360.0 + a)) / GCD(a, b);\n  \
    \ |                                        ^ no implementation for `{float} +\
    \ isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpawwxijk3.rs:10:54\n   |\n10 |\
    \     let degree = ((360.0 + b) * (360.0 + c) * (360.0 + a)) / GCD(a, b);\n  \
    \ |                                                      ^ no implementation for\
    \ `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement tr"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a * b) % 180 == 0 && (c * b) % 180 == 0\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpleweuj9o.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() >= (c - b).abs() * (b - a).abs()\n}\n\nfn main() {\n  \
    \  let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2xqlz3l6.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let a = a - b as f64;\n    let b = b - c as f64;\n    let c = c - a as\
    \ f64;\n    (a + b + c) == 0 // Check if triangle has zero area.\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot subtract `f64` from `isize`\n --> /tmp/tmpmum5v764.rs:9:15\n\
    \  |\n9 |     let a = a - b as f64;\n  |               ^ no implementation for\
    \ `isize - f64`\n  |\n  = help: the trait `Sub<f64>` is not implemented for `isize`\n\
    \  = help: the following other types implement trait `Sub<Rhs>`:\n           \
    \ <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128\
    \ as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n\
    \            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n        \
    \    <&'a isize as Sub<isize>>\n          and 48 others\n\nerror[E0277]: cannot\
    \ subtract `f64` from `isize`\n  --> /tmp/tmpmum5v764.rs:10:15\n   |\n10 |   \
    \  let b = b - c as f64;\n   |               ^ no implementation for `isize -\
    \ f64`\n   |\n   = help: the trait `Sub<f64>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot subtract `f64` from `isize`\n  --> /tmp/tmpmum5v764.rs:11:15\n   |\n\
    11 |     let c = c - a as f64;\n   |               ^ no implementation for `isize\
    \ - f64`\n   |\n   = help: the trait `Sub<f64>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == b * 2 && b == c * 2 && c == a * 2 {\n        true\n    } else\
    \ {\n        false\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpk1ihrdb2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if b == c {\n        return false;\n    }\n    let a = (a*a + b*b - c*c).abs();\n\
    \    let b = sqr(a);\n    let c = (b*b + a*a).abs();\n    c < b\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sqr` in this scope\n  --> /tmp/tmp1lcdr4nw.rs:13:13\n\
    \   |\n13 |     let b = sqr(a);\n   |             ^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let degree = (a + b + c) as i32;\n    let radian = (a + b) * 3.14159265358979323846\
    \ + c * 3.14159265358979323846;\n    degree * degree > radian * radian\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp0_8z70au.rs:10:26\n\
    \   |\n10 |     let radian = (a + b) * 3.14159265358979323846 + c * 3.14159265358979323846;\n\
    \   |                          ^ no implementation for `isize * {float}`\n   |\n\
    \   = help: the trait `Mul<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n             <&'a f32\
    \ as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as\
    \ Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n\
    \             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n      \
    \       <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmp0_8z70au.rs:10:55\n   |\n10 | \
    \    let radian = (a + b) * 3.14159265358979323846 + c * 3.14159265358979323846;\n\
    \   |                                                       ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c {\n        return false;\n    }\n\n    if a + c > b {\n\
    \        return false;\n    }\n\n    if b + c > a {\n        return false;\n \
    \   }\n\n    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpcnoj6ft4.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    abs(a - b) <= (b - a) * (b - c) + (a - b) * (c - b)\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n --> /tmp/tmp_m7ljn88.rs:9:5\n\
    \  |\n9 |     abs(a - b) <= (b - a) * (b - c) + (a - b) * (c - b)\n  |     ^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a * a + b * b > c * c {\n        return false;\n    } else {\n   \
    \     return true;\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyzu6diqu.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let delta = a*b + b*c + c*a;\n    delta < 0 ? delta < 2*(std::i32::MAX\
    \ as f32) - 1 : false\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `delta`\n\
    \  --> /tmp/tmpmul73017.rs:10:17\n   |\n10 |     delta < 0 ? delta < 2*(std::i32::MAX\
    \ as f32) - 1 : false\n   |                 ^^^^^ expected one of `.`, `;`, `?`,\
    \ `}`, or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() == (b + c).abs() && a.abs() == c.abs() && a.abs() == b.abs()\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5ij29037.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a, b, c) ==\n    (-b, -a, -c) ||\n    (b, -a, -c) ||\n    (-b, -b, -c)\
    \ ||\n    (b, b, -c) ||\n    (a + b + c, a - b - c, a + b - c)\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0ti21fsg.rs:11:5\n   |\n\
    11 |     (b, -a, -c) ||\n   |     ^^^^^^^^^^^ expected `bool`, found tuple\n \
    \  |\n   = note: expected type `bool`\n             found tuple `(isize, isize,\
    \ isize)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0ti21fsg.rs:12:5\n\
    \   |\n12 |     (-b, -b, -c) ||\n   |     ^^^^^^^^^^^^ expected `bool`, found\
    \ tuple\n   |\n   = note: expected type `bool`\n             found tuple `(isize,\
    \ isize, isize)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0ti21fsg.rs:13:5\n\
    \   |\n13 |     (b, b, -c) ||\n   |     ^^^^^^^^^^ expected `bool`, found tuple\n\
    \   |\n   = note: expected type `bool`\n             found tuple `(isize, isize,\
    \ isize)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0ti21fsg.rs:14:5\n\
    \   |\n14 |     (a + b + c, a - b - c, a + b - c)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `bool`, found tuple\n   |\n   = note: expected type `bool`\n      \
    \       found tuple `(isize, isize, isize)`\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    debug_assert!(a >= 1 && a <= 3 && b >= 1 && b <= 3 && c >= 1 && c <=\
    \ 3);\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    let mut sum = 0;\n    \n    // find the largest of the 3 sides\n    loop\
    \ {\n        if a + b > c {\n            break;\n        }\n        a += 1;\n\
    \        sum += 1;\n    }\n    loop {\n        if a + c > b {\n            break;\n\
    \        }\n        b += 1;\n        sum += 1;\n    }\n    loop {\n        if\
    \ b + c > a {\n            break;\n        }\n        c += 1;\n        sum +=\
    \ 1;\n    }\n    \n    // check if all angles are 90 degrees\n    debug_assert!(a\
    \ == b);\n    debug_assert!(a == c);\n    debug_assert!(a == sum);\n    \n   \
    \ if a > c {\n        return true;\n    }\n    \n    return false;\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: a >= 1 && a <= 3 && b >= 1\
    \ && b <= 3 && c >= 1 && c <= 3', /tmp/tmpz03qmgyb.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b + c || (b > a + c && a > b + 1) || (c > a + b && b > a + 1)\
    \ {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp15h0qi3g.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // The condition can be simplified to if a < b + c and b < c + a \n \
    \   // or if a < b + c and b > c + a.\n    // But we do not want to use the >\
    \ because this may confuse beginner\n    // like me.\n    if a < b + c && b <\
    \ c + a || a < b + c && b > c + a {\n        return true;\n    } else {\n    \
    \    return false;\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmppxafcpl3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // The three sides of a triangle are the same except the length of the\
    \ two sides.\n    if a < c && b < c && a < b {\n        // If all sides are less\
    \ than or equal to the length a, \n        // the triangle is considered right-angled.\n\
    \        true\n    } else {\n        // If the lengths are not equal, the triangle\
    \ is considered not right-angled.\n        false\n    }\n}\n\nfn main() {\n  \
    \  let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpq481kp23.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a < b && (b == c || b == a + c || b == b - c)\n}\n\nfn main() {\n   \
    \ let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp140am922.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b > c) || ((a + c) > b) || ((b + c) > a)\n}\n\nfn main() {\n   \
    \ let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpukf964hx.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    match a + b + c {\n        0 => return true, false,\n        _ => match\
    \ a - b - c {\n            0 => return true, false,\n            _ => match a\
    \ + b - c {\n                0 => return true, false,\n                _ => return\
    \ false, false, // a + b > c => a + b - c > a\n            },\n        },\n  \
    \  }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: unexpected `,` in pattern\n  --> /tmp/tmp3n8g_atr.rs:10:32\n   |\n\
    10 |         0 => return true, false,\n   |                                ^\n\
    \   |\nhelp: try adding parentheses to match on a tuple...\n   |\n10 ~       \
    \  0 => return true, (false,\n11 ~         _) => match a - b - c {\n   |\nhelp:\
    \ ...or a vertical bar to match on multiple alternatives\n   |\n10 ~         0\
    \ => return true, false |\n11 ~         _ => match a - b - c {\n   |\n\nerror:\
    \ aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut is_right_angle = false;\n    let a2 = a*a;\n    let b2 = b*b;\n\
    \    let c2 = c*c;\n\n    if a2 > b2 && b2 > c2 {\n        is_right_angle = true;\n\
    \    }\n    else if a2 > c2 && c2 > b2 {\n        is_right_angle = true;\n   \
    \ }\n    else if b2 > a2 && a2 > c2 {\n        is_right_angle = true;\n    }\n\
    \    else if a2 > c2 && c2 > a2 {\n        is_right_angle = true;\n    }\n   \
    \ else if b2 > a2 && b2 > c2 {\n        is_right_angle = true;\n    }\n\n    is_right_angle\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp40kb4qp9.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a,b,c) <= (3,5,7)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphvzb1hde.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // TODO: implement this function\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo30jjhr8.rs:8:58\n  |\n8 |\
    \ fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n  |    --------------------\
    \                                  ^^^^ expected `bool`, found `()`\n  |    |\n\
    \  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == b && (a - c) == b {\n        return True\n    }\n    if a ==\
    \ b && (c - b) == b {\n        return True\n    }\n    if a == c && (c - b) ==\
    \ c {\n        return True\n    }\n    if b == c && (b - a) == c {\n        return\
    \ True\n    }\n    if a == c && (a - b) == c {\n        return True\n    }\n \
    \   if b == c && (b - a) == c {\n        return True\n    }\n    return False\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `True` in this scope\n  --> /tmp/tmpxtxau55d.rs:10:16\n\
    \   |\n10 |         return True\n   |                ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `True` in this scope\n  --> /tmp/tmpxtxau55d.rs:13:16\n\
    \   |\n13 |         return True\n   |                ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `True` in this scope\n  --> /tmp/tmpxtxau55d.rs:16:16\n\
    \   |\n16 |         return True\n   |                ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `True` in this scope\n  --> /tmp/tmpxtxau55d.rs:19:16\n\
    \   |\n19 |         return True\n   |                ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `True` in this scope\n  --> /tmp/tmpxtxau55d.rs:22:16\n\
    \   |\n22 |         return True\n   |                ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `True` in this scope\n  --> /tmp/tmpxtxau55d.rs:25:16\n\
    \   |\n25 |         return True\n   |                ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `False` in this scope\n  --> /tmp/tmpxtxau55d.rs:27:12\n\
    \   |\n27 |     return False\n   |            ^^^^^ not found in this scope\n\n\
    error: aborting due to 7 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > 0 && b > 0 && c > 0 &&\n        ((a + b > c) || (a + c > b) || (b\
    \ + c > a));\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n  \
    \  assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt_tksumn.rs:8:58\n   |\n\
    8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n   |   \
    \ --------------------                                  ^^^^ expected `bool`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n9  |     a > 0 && b > 0 && c > 0 &&\n10 |         ((a\
    \ + b > c) || (a + c > b) || (b + c > a));\n   |                             \
    \                       - help: remove this semicolon\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b + c) >= 2\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpk9bo20nb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // If the triangle is not formed by three points return False\n    //\
    \ This would happen if all three points are the same\n    if a == 0 || b == 0\
    \ || c == 0 {\n        return false;\n    }\n\n    let mut a = a / 2;\n    let\
    \ mut b = b / 2;\n    let mut c = c / 2;\n\n    // Find the middle of the three\
    \ points\n    while a + b > c {\n        if a + b > c {\n            b += 1;\n\
    \        } else {\n            a += 1;\n        }\n    }\n\n    // If a + b >\
    \ c then we have a right angle\n    a == b + c && (a - b == c || (a - b > 0 &&\
    \ a > c - b))\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n \
    \   assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // The sides of a right-angled triangle are equal\n    // or are three\
    \ times the hypotenuse\n    let abs = a.abs() + b.abs() + c.abs();\n    let eq\
    \ = a.abs() == b.abs() && b.abs() == c.abs();\n    eq || abs == abs.sqrt()\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp8o56nqjw.rs:13:22\n   |\n13 |     eq || abs == abs.sqrt()\n\
    \   |                      ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c {\n        return false;\n    }\n    if b + c > a {\n  \
    \      return false;\n    }\n    if c + a > b {\n        return false;\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgn0i9fk9.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a, b, c, c, b - a, a - c) => (a >= b) & (a <= c) & (b >= c) \n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `=>`\n\
    \ --> /tmp/tmpo2b3m75u.rs:9:32\n  |\n9 |     (a, b, c, c, b - a, a - c) => (a\
    \ >= b) & (a <= c) & (b >= c) \n  |                                ^^ expected\
    \ one of `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  ((b*b - a*c)==0 && (a*a - b*b)==0)\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpeobioxp2.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let side1 = std::cmp::max(a, b);\n    let side2 = std::cmp::max(b, c);\n\
    \    let side3 = std::cmp::max(a, c);\n    \n    if side1 == side2 || side2 ==\
    \ side3 || side1 == side3 {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6_gs0rqu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a*a + b*b == c*c - a*b).is_ok()\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_ok` found for type `bool` in the current\
    \ scope\n --> /tmp/tmp2wxfh7op.rs:9:30\n  |\n9 |     (a*a + b*b == c*c - a*b).is_ok()\n\
    \  |                              ^^^^^ method not found in `bool`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\tlet angle = (90 - Angle::from_degrees(b)).get_angle();\n\tlet angle_1 =\
    \ Angle::from_degrees(c).get_angle();\n\tlet angle_2 = Angle::from_degrees(a).get_angle();\n\
    \tlet angle_3 = Angle::from_degrees(b).get_angle();\n\tif angle_1 < angle_2 and\
    \ angle_2 < angle_3 {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t\
    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: `and` is not a logical operator\n  --> /tmp/tmpbeqk_1wr.rs:13:23\n\
    \   |\n13 |     if angle_1 < angle_2 and angle_2 < angle_3 {\n   |           \
    \               ^^^ help: use `&&` to perform logical conjunction\n   |\n   =\
    \ note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Angle`\n --> /tmp/tmpbeqk_1wr.rs:9:20\n\
    \  |\n9 |     let angle = (90 - Angle::from_degrees(b)).get_angle();\n  |    \
    \                   ^^^^^ use of undeclared type `Angle`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Angle`\n  --> /tmp/tmpbeqk_1wr.rs:10:16\n\
    \   |\n10 |     let angle_1 = Angle::from_degrees(c).get_angle();\n   |      \
    \             ^^^^^ use of undeclared type `Angle`\n\nerror[E0433]: failed to\
    \ resolve: use of undeclared type `Angle`\n  --> /tmp/tmpbeqk_1wr.rs:11:16\n \
    \  |\n11 |     let angle_2 = Angle::from_degrees(a).get_angle();\n   |       \
    \            ^^^^^ use of undeclared type `Angle`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Angle`\n  --> /tmp/tmpbeqk_1wr.rs:12:16\n   |\n12 |\
    \     let angle_3 = Angle::from_degrees(b).get_angle();\n   |                \
    \   ^^^^^ use of undeclared type `Angle`\n\nerror[E0599]: no method named `get_angle`\
    \ found for type `{integer}` in the current scope\n --> /tmp/tmpbeqk_1wr.rs:9:44\n\
    \  |\n9 |     let angle = (90 - Angle::from_degrees(b)).get_angle();\n  |    \
    \                                           ^^^^^^^^^ method not found in `{integer}`\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let degree = (a * a + b * b + c * c) ** (1.0 / 2.0);\n    if degree ==\
    \ 0 {\n        false\n    } else if degree > 45.0f {\n        false\n    } else\
    \ if b > c {\n        true\n    } else {\n        let a = ((-c + b) * (b + c))\
    \ ** (1.0 / 2.0);\n        let b = ((-a + b) * (a + b)) ** (1.0 / 2.0);\n    \
    \    let c = ((-a + c) * (a + c)) ** (1.0 / 2.0);\n        (a + b + c) ** (1.0\
    \ / 2.0) == (a * a + b * b + c * c) ** (1.0 / 2.0);\n    }\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: invalid suffix `f` for float literal\n  --> /tmp/tmpfsqh_8sf.rs:12:24\n\
    \   |\n12 |     } else if degree > 45.0f {\n   |                        ^^^^^\
    \ invalid suffix `f`\n   |\n   = help: valid suffixes are `f32` and `f64`\n\n\
    error[E0614]: type `{float}` cannot be dereferenced\n --> /tmp/tmpfsqh_8sf.rs:9:43\n\
    \  |\n9 |     let degree = (a * a + b * b + c * c) ** (1.0 / 2.0);\n  |      \
    \                                     ^^^^^^^^^^^^^\n\nerror[E0614]: type `{float}`\
    \ cannot be dereferenced\n  --> /tmp/tmpfsqh_8sf.rs:17:39\n   |\n17 |        \
    \ let a = ((-c + b) * (b + c)) ** (1.0 / 2.0);\n   |                         \
    \              ^^^^^^^^^^^^^\n\nerror[E0614]: type `{float}` cannot be dereferenced\n\
    \  --> /tmp/tmpfsqh_8sf.rs:18:39\n   |\n18 |         let b = ((-a + b) * (a +\
    \ b)) ** (1.0 / 2.0);\n   |                                       ^^^^^^^^^^^^^\n\
    \nerror[E0614]: type `{float}` cannot be dereferenced\n  --> /tmp/tmpfsqh_8sf.rs:19:39\n\
    \   |\n19 |         let c = ((-a + c) * (a + c)) ** (1.0 / 2.0);\n   |       \
    \                                ^^^^^^^^^^^^^\n\nerror[E0614]: type `{float}`\
    \ cannot be dereferenced\n  --> /tmp/tmpfsqh_8sf.rs:20:22\n   |\n20 |        \
    \ (a + b + c) ** (1.0 / 2.0) == (a * a + b * b + c * c) ** (1.0 / 2.0);\n   |\
    \                      ^^^^^^^^^^^^^\n\nerror[E0614]: type `{float}` cannot be\
    \ dereferenced\n  --> /tmp/tmpfsqh_8sf.rs:20:64\n   |\n20 |         (a + b + c)\
    \ ** (1.0 / 2.0) == (a * a + b * b + c * c) ** (1.0 / 2.0);\n   |            \
    \                                                    ^^^^^^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfsqh_8sf.rs:16:12\n   |\n16 |       } else {\n\
    \   |  ____________^\n17 | |         let a = ((-c + b) * (b + c)) ** (1.0 / 2.0);\n\
    18 | |         let b = ((-a + b) * (a + b)) ** (1.0 / 2.0);\n19 | |         let\
    \ c = ((-a + c) * (a + c)) ** (1.0 / 2.0);\n20 | |         (a + b + c) ** (1.0\
    \ / 2.0) == (a * a + b * b + c * c) ** (1.0 / 2.0);\n   | |                  \
    \                                                           - help: remove this\
    \ semicolon\n21 | |     }\n   | |_____^ expected `bool`, found "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b * b) - (4 * a * c) == 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpf5riq9t5.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 {\n        return b == 0 || c == 0 || b == c;\n    }\n    if\
    \ b == 0 {\n        return c == 0 || a == 0 || c == a;\n    }\n    if c == 0 {\n\
    \        return a == 0 || b == 0 || a == b;\n    }\n    let mut a = a % 360;\n\
    \    let mut b = b % 360;\n    let mut c = c % 360;\n    if a > b {\n        a\
    \ = b + 360 - a;\n    }\n    if a > c {\n        a = c + 360 - a;\n    }\n   \
    \ if b > c {\n        b = c + 360 - b;\n    }\n    if b > a {\n        b = a +\
    \ 360 - b;\n    }\n    if c > a {\n        c = a + 360 - c;\n    }\n    if c >\
    \ b {\n        c = b + 360 - c;\n    }\n    if b > a {\n        b = a + 360 -\
    \ b;\n    }\n    if b > c {\n        b = c + 360 - b;\n    }\n    \n    if a ==\
    \ b {\n        return c == a;\n    }\n    if a == c {\n        return b == c;\n\
    \    }\n    if a == b {\n        return c == b;\n    }\n    if a == c {\n    \
    \    return b == c;\n    }\n    if b == c {\n        return a == b;\n    }\n \
    \   if a == b {\n        return c == a;\n    }\n    if a == c {\n        return\
    \ b == c;\n    }\n    if b == c {\n        return a == b;\n    }\n    if c ==\
    \ b {\n        return a == c;\n    }\n    if a == b {\n        return c == a;\n\
    \    }\n    if a == c {\n        return b == c;\n    }\n    if b == c {\n    \
    \    return a == b;\n    }\n    if c == b {\n        return a == c;\n    }\n \
    \   \n    let mut i = a + 180;\n    let mut j = b + 180;\n    let mut k = c +\
    \ 180;\n    while i < j {\n        while i < j {\n            if j > k {\n   \
    \             j -= 360;\n            }\n            if k > j {\n             \
    \   k -= 360;\n            }\n            if i != j && i != k && j != k {\n  \
    \              if i < k {\n                    i += 360;\n                } else\
    \ {\n                    j += 360;\n                }\n            }\n       \
    \ }\n        i += 180;\n        j += 180;\n        k += 180;\n    }\n    \n  \
    \  \n    return i == j && j == k;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b + c) mod 36 == 0 &&\n    (a + b + c) mod 36 == 90 ||\n    (a +\
    \ b + c) mod 36 == 180 ||\n    (a + b + c) mod 36 == 270 ||\n    (a + b + c) mod\
    \ 36 == 360\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n   \
    \ assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword\
    \ `mod`\n --> /tmp/tmp4fdxyct4.rs:9:17\n  |\n9 |     (a + b + c) mod 36 == 0 &&\n\
    \  |                 ^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\n\
    error: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a+b > c) && (a+c > b) && (b+c > a)\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfao_giec.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\tif abs(a) >= b + c {\n\t\treturn false\n\t} else if a < b {\n\t\treturn\
    \ c >= b - a || c >= a - b\n\t} else {\n\t\treturn c >= b - a && c >= a - b\n\t\
    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n --> /tmp/tmpiii77gvx.rs:9:5\n\
    \  |\n9 |     if abs(a) >= b + c {\n  |        ^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\tlet mut a = a + b;\n\tlet mut b = b + c;\n\tlet mut c = c + a;\n\tlet mut\
    \ a = a + c;\n\tlet mut b = b + c;\n\tlet mut c = c + a;\n\ta * b * c == b * b\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2rxdarg1.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a, b, c) == ((b, c, a), (b, a, c), (c, a, b))\n        || ((b, c) ==\
    \ (a, c), (b, a), (c, b), (c, a))\n        || ((c, b) == (a, a), (c, c), (c, b))\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1j80wa22.rs:9:19\n  |\n9 |\
    \     (a, b, c) == ((b, c, a), (b, a, c), (c, a, b))\n  |                   ^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected type `isize`\n      \
    \      found tuple `(isize, isize, isize)`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp1j80wa22.rs:9:30\n  |\n9 |     (a, b, c) == ((b, c, a), (b, a, c),\
    \ (c, a, b))\n  |                              ^^^^^^^^^ expected `isize`, found\
    \ tuple\n  |\n  = note: expected type `isize`\n            found tuple `(isize,\
    \ isize, isize)`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1j80wa22.rs:9:41\n\
    \  |\n9 |     (a, b, c) == ((b, c, a), (b, a, c), (c, a, b))\n  |            \
    \                             ^^^^^^^^^ expected `isize`, found tuple\n  |\n \
    \ = note: expected type `isize`\n            found tuple `(isize, isize, isize)`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1j80wa22.rs:10:12\n   |\n10 |\
    \         || ((b, c) == (a, c), (b, a), (c, b), (c, a))\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `bool`, found tuple\n   |\n   = note: expected type `bool`\n      \
    \       found tuple `(bool, (isize, isize), (isize, isize), (isize, isize))`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1j80wa22.rs:11:12\n   |\n11 |\
    \         || ((c, b) == (a, a), (c, c), (c, b))\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `bool`, found tuple\n   |\n   = note: expected type `bool`\n      \
    \       found tuple `(bool, (isize, isize), (isize, isize))`\n\nerror: aborting\
    \ due to 5 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + c * b < 0\n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1arkzt0b.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if b * b - 4 * a * c > 0 { return false; }\n    else if 2 * b * b - 4\
    \ * a * c < 0 { return false; }\n    else if b * b < 0 { return false; }\n   \
    \ else { \n        let mut ans = a < c;\n        for i in 0..3 {\n           \
    \ if b * (c - i) + ans * ans * (c - i) < 0 { ans = !ans; break; }\n        }\n\
    \        ans\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot multiply `bool` by `bool`\n  --> /tmp/tmpjr3uo1ql.rs:15:34\n\
    \   |\n15 |             if b * (c - i) + ans * ans * (c - i) < 0 { ans = !ans;\
    \ break; }\n   |                              --- ^ --- bool\n   |           \
    \                   |\n   |                              bool\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b && b > c {\n        return true;\n    }\n    if b > c && c >\
    \ a {\n        return true;\n    }\n    if c > a && a > b {\n        return true;\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpb080pdxi.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut counter = 0;\n    if a + b > c {\n        counter += 1;\n   \
    \ }\n    if a + c > b {\n        counter += 2;\n    }\n    if b + c > a {\n  \
    \      counter += 4;\n    }\n    if a + b == c {\n        counter += 8;\n    }\n\
    \    if a + c == b {\n        counter += 16;\n    }\n    if b + c == a {\n   \
    \     counter += 32;\n    }\n    counter % 17 == 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1v_vo5z9.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if b * c < a * a || a * c < b * b {\n        return false;\n    }\n \
    \   let mut a = a / b;\n    let mut b = b / c;\n    let mut c = c / a;\n    if\
    \ a == b && b == c {\n        return true;\n    }\n    if a < b {\n        if\
    \ a < c {\n            if b < c {\n                return true;\n            }\n\
    \        } else {\n            if b < c {\n                return false;\n   \
    \         }\n        }\n    } else {\n        if a < c {\n            if b < c\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    if b < c {\n                return true;\n            }\n        }\n    }\n\
    \    return false\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpd8ne_nhx.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  a > b && (a > c || b > c)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaba74qr6.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // Check if three sides are same\n    if a == b {\n        return c ==\
    \ b;\n    }\n\n    // Check if two sides are same\n    if a == c {\n        return\
    \ false;\n    }\n\n    // Check if one side is same\n    if b == c {\n       \
    \ return true;\n    }\n\n    // Check if all sides are same\n    if a == b+c {\n\
    \        return true;\n    }\n\n    // Check if two sides are same\n    if a ==\
    \ c+b {\n        return false;\n    }\n\n    // Check if one side is same\n  \
    \  if b == c+a {\n        return false;\n    }\n\n    // Check if all sides are\
    \ same\n    if a == b+c+a {\n        return true;\n    }\n\n    // Check if two\
    \ sides are same\n    if a == c+b+a {\n        return false;\n    }\n\n    //\
    \ If all the other cases fail, return false because no right angle triangle exists\n\
    \    return false;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmponzhwpog.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut is_right = false;\n    if a > b {\n        let tmp = a;\n   \
    \     a = b;\n        b = tmp;\n    }\n    if b > c {\n        let tmp = b;\n\
    \        b = c;\n        c = tmp;\n    }\n\n    // If the sum of the three sides\
    \ is greater than the third side, \n    // or if the first and second sides are\
    \ equal, \n    // the triangle is right-angled.\n    if a + b > c || a == b {\n\
    \        is_right = true;\n    }\n\n    return is_right;\n}\n\nfn main() {\n \
    \   let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpvnc3pb3d.rs:12:9\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                         - help: consider making this binding mutable: `mut\
    \ a`\n...\n12 |         a = b;\n   |         ^^^^^ cannot assign to immutable\
    \ argument\n\nerror[E0384]: cannot assign to immutable argument `b`\n  --> /tmp/tmpvnc3pb3d.rs:13:9\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                   - help: consider making this binding mutable:\
    \ `mut b`\n...\n13 |         b = tmp;\n   |         ^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror[E0384]: cannot assign to immutable argument `b`\n  --> /tmp/tmpvnc3pb3d.rs:17:9\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                   - help: consider making this binding mutable:\
    \ `mut b`\n...\n17 |         b = c;\n   |         ^^^^^ cannot assign to immutable\
    \ argument\n\nerror[E0384]: cannot assign to immutable argument `c`\n  --> /tmp/tmpvnc3pb3d.rs:18:9\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                             - help: consider making this\
    \ binding mutable: `mut c`\n...\n18 |         c = tmp;\n   |         ^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to 4 previous errors\n\n\
    For more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut delta = (a + b + c) / 2.0;\n    if a == b || a == c || b == c\
    \ {\n        return false;\n    }\n    delta -= a < b && b < c ? a : b < c ? b\
    \ : c;\n    delta /= 2.0 - (a - b < 0 && b - c < 0 ? a : b < 0 ? b : c);\n   \
    \ (delta * delta) > 1.0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `a`\n\
    \  --> /tmp/tmp6cpyde39.rs:13:31\n   |\n13 |     delta -= a < b && b < c ? a :\
    \ b < c ? b : c;\n   |                               ^ expected one of `.`, `;`,\
    \ `?`, `}`, or an operator\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \ --> /tmp/tmp6cpyde39.rs:9:33\n  |\n9 |     let mut delta = (a + b + c) / 2.0;\n\
    \  |                                 ^ no implementation for `isize / {float}`\n\
    \  |\n  = help: the trait `Div<{float}>` is not implemented for `isize`\n  = help:\
    \ the following other types implement trait `Div<Rhs>`:\n            <&'a f32\
    \ as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n\
    \            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n      \
    \      <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a\
    \ isize as Div<isize>>\n          and 54 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjv7ughk9.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b + c) == (a + b + c) / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n --> /tmp/tmpduyeob3_.rs:9:32\n\
    \  |\n9 |     (a + b + c) == (a + b + c) / 2.0\n  |                          \
    \      ^ no implementation for `isize / {float}`\n  |\n  = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n  = help: the following other types implement\
    \ trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n            <&'a f64 as\
    \ Div<f64>>\n            <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n\
    \            <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n      \
    \      <&'a i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a <= b + c && a * a + b * b >= c * c\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw4m3_d5u.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b > c) && (a * b > c) && (b * c > a)\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0ci1xhdg.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let a1 = sqrt(a*a + b*b);\n    let b1 = sqrt(b*b + c*c);\n    let c1\
    \ = sqrt(c*c + a*a);\n    let det = a*b*c1 - b*c*a1;\n    let mut is_right_angle\
    \ = false;\n    if det < 0 {\n        is_right_angle = true;\n    }\n    is_right_angle\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n --> /tmp/tmpbvhwmwrv.rs:9:14\n\
    \  |\n9 |     let a1 = sqrt(a*a + b*b);\n  |              ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmpbvhwmwrv.rs:10:14\n\
    \   |\n10 |     let b1 = sqrt(b*b + c*c);\n   |              ^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `sqrt` in this scope\n  -->\
    \ /tmp/tmpbvhwmwrv.rs:11:14\n   |\n11 |     let c1 = sqrt(c*c + a*a);\n   |  \
    \            ^^^^ not found in this scope\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && a * b > c \n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5y8w6qx5.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return true\n    }\n\n    let\
    \ mut a = a - 1;\n    let mut b = b - 1;\n    let mut c = c - 1;\n    let mut\
    \ i = 0;\n\n    while i < 3 {\n        if a + i >= 0 && b + i >= 0 && c + i >=\
    \ 0 {\n            if a + i + b + c == 0 {\n                return false\n   \
    \         }\n        }\n        i += 1;\n        a -= 1;\n        b -= 1;\n  \
    \      c -= 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqtddpywv.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // Special case:\n    if a == c && b == c {\n        return true;\n \
    \   }\n    \n    // Compute the hypotenuse of the triangle:\n    let h = (a *\
    \ b) - ((a * b) * (c - a));\n    \n    // If (a c h) > (b c h), then we know that\
    \ c is not a right angle triangle\n    if (h * c) > b {\n        return false;\n\
    \    }\n    \n    // If (a c h) < (b c h), then we know that b is not a right\
    \ angle triangle\n    if (h * c) < a {\n        return false;\n    }\n    \n \
    \   // If (a c h) > (b c h), then we know that a is not a right angle triangle\n\
    \    if (h * c) > a {\n        return false;\n    }\n    \n    // If (a c h) <\
    \ (b c h), then we know that b is not a right angle triangle\n    if (h * c) <\
    \ b {\n        return false;\n    }\n    \n    // If (a c h) > (b c h), then we\
    \ know that a is not a right angle triangle\n    if (h * c) > b {\n        return\
    \ false;\n    }\n    \n    // If (a c h) < (b c h), then we know that b is not\
    \ a right angle triangle\n    if (h * c) < a {\n        return false;\n    }\n\
    \    \n    // All cases were checked above\n    return true;\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzam5zuj0.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) == (c-a) && (c-a) >= 0\n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpy2p3opjs.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\t// A triangle is right angle if any of the following are true:\n\t// -\
    \ a, b, or c is greater than zero;\n\t// - a + b > c;\n\t// - a + c > b;\n\t//\
    \ - b + c > a\n\tlet s = a + b > c && a + c > b && b + c > a;\n\ts\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl7yjd_by.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > b + c || b > a + c || c > a + b\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfr10dgks.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > 0 && b > 0 && c > 0 && a + b > c + a && b + c > a + b && a + c >\
    \ b + c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphczk6lyc.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // TODO\n    false\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpi17zhm3v.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (((a + b) > c) && (a * b > c))\n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1tavixu5.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a).abs() <= (c - b).abs() + a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprr7b7tk7.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b * b) - (4 * a * c) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps1ficmmm.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    !(((b - a) * (c - b) * (b - a)) - ((c - a) * (b - a) * (a - c))).is_zero()\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_zero` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp14dhapfo.rs:9:70\n  |\n9 |     !(((b - a) * (c - b) * (b\
    \ - a)) - ((c - a) * (b - a) * (a - c))).is_zero()\n  |                      \
    \                                                ^^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let l1 = (a*a + b*b).sqrt();\n    let l2 = (a*a + c*c).sqrt();\n    let\
    \ l3 = (a*a + b*b + c*c).sqrt();\n\n    a.eq(l1) && b.eq(l2) && c.eq(l3)\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp3dcih4uz.rs:9:26\n  |\n9 |     let l1 = (a*a + b*b).sqrt();\n\
    \  |                          ^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `sqrt` found for type `isize` in the current scope\n  --> /tmp/tmp3dcih4uz.rs:10:26\n\
    \   |\n10 |     let l2 = (a*a + c*c).sqrt();\n   |                          ^^^^\
    \ method not found in `isize`\n\nerror[E0599]: no method named `sqrt` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmp3dcih4uz.rs:11:32\n   |\n11\
    \ |     let l3 = (a*a + b*b + c*c).sqrt();\n   |                             \
    \   ^^^^ method not found in `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\tlet mut sum = 0;\n\tsum += if c > a { c } else { a };\n\tsum += if b >\
    \ a { b } else { a };\n\tsum += if c > b { c } else { b };\n\tsum % 2 == 0\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfjorsyrf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let a = a as isize;\n    let b = b as isize;\n    let c = c as isize;\n\
    \    let mut sum = 0;\n    let mut dis = 0;\n    \n    sum = (a * b) + (b * c);\n\
    \    if sum == 0 {\n        dis = std::fabs(a - c);\n        return dis == 0\n\
    \    } else {\n        dis = std::fabs(b - c);\n        return dis == 0\n    }\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fabs` in crate `std`\n  --> /tmp/tmpmrnw16zm.rs:17:20\n\
    \   |\n17 |         dis = std::fabs(a - c);\n   |                    ^^^^ not\
    \ found in `std`\n\nerror[E0425]: cannot find function `fabs` in crate `std`\n\
    \  --> /tmp/tmpmrnw16zm.rs:20:20\n   |\n20 |         dis = std::fabs(b - c);\n\
    \   |                    ^^^^ not found in `std`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  a > 0 && b > 0 && c > 0 && a > b && b > c && c > a && a + b > c\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9cw_g622.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\t// If the sides form a right-angled triangle, return True\n\tif a + b >\
    \ c && a + c > b && b + c > a {\n\t\treturn true\n\t}\n\t// If two sides are equal,\
    \ return False\n\tif a == c && b == c {\n\t\treturn false\n\t}\n\t// If two sides\
    \ are equal, return False\n\tif a == b {\n\t\treturn true\n\t}\n\t// If two sides\
    \ are equal, return False\n\tif a == c {\n\t\treturn false\n\t}\n\t// If two sides\
    \ are equal, return False\n\tif a == b {\n\t\treturn true\n\t}\n\t// If two sides\
    \ are equal, return False\n\tif b == c {\n\t\treturn true\n\t}\n\t// If two sides\
    \ are equal, return False\n\tif b == a {\n\t\treturn true\n\t}\n\t// If two sides\
    \ are equal, return False\n\tif c == a {\n\t\treturn true\n\t}\n\t// If two sides\
    \ are equal, return False\n\tif c == b {\n\t\treturn true\n\t}\n\t// If two sides\
    \ are equal, return False\n\tif a == b {\n\t\treturn true\n\t}\n\t// If two sides\
    \ are equal, return False\n\tif a == c {\n\t\treturn true\n\t}\n\t// If two sides\
    \ are equal, return False\n\tif b == c {\n\t\treturn true\n\t}\n\t// If two sides\
    \ are equal, return False\n\tif c == a {\n\t\treturn true\n\t}\n\t// If two sides\
    \ are equal, return False\n\tif c == b {\n\t\treturn true\n\t}\n\t// If two sides\
    \ are equal, return False\n\treturn false\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5_em5dyq.rs:74:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || c + b > a || b + c > a || a + c > b {\n        return\
    \ false;\n    }\n\n    let sides = a + b + c;\n    let ac = a / sides;\n    let\
    \ bc = b / sides;\n    let cb = c / sides;\n\n    if ac * bc > cb * ac || (ac\
    \ * bc + bc * cb) == 0 {\n        return true;\n    }\n\n    if ac * cb > cb *\
    \ ac || (ac * cb + bc * ac) == 0 {\n        return false;\n    }\n\n    let abc\
    \ = (bc * cb) - (ac * ac);\n    if abc < 0 {\n        return false;\n    }\n\n\
    \    let side = sqrt(abc);\n    if side < bc || side < ac {\n        return false;\n\
    \    }\n\n    let a1_2 = a * a / sides;\n    let b2_2 = b * b / sides;\n    let\
    \ c3_2 = c * c / sides;\n\n    if a1_2 * b2_2 > c3_2 * a1_2 || (a1_2 * b2_2 +\
    \ c3_2 * a1_2) == 0 {\n        return true;\n    }\n\n    if a1_2 * c2_2 > c3_2\
    \ * a1_2 || (a1_2 * c2_2 + c3_2 * a1_2) == 0 {\n        return false;\n    }\n\
    \n    false\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n   \
    \ assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmpwxuymy_q.rs:31:16\n\
    \   |\n31 |     let side = sqrt(abc);\n   |                ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `c2_2` in this scope\n  --> /tmp/tmpwxuymy_q.rs:44:15\n\
    \   |\n44 |     if a1_2 * c2_2 > c3_2 * a1_2 || (a1_2 * c2_2 + c3_2 * a1_2) ==\
    \ 0 {\n   |               ^^^^ help: a local variable with a similar name exists:\
    \ `b2_2`\n\nerror[E0425]: cannot find value `c2_2` in this scope\n  --> /tmp/tmpwxuymy_q.rs:44:45\n\
    \   |\n44 |     if a1_2 * c2_2 > c3_2 * a1_2 || (a1_2 * c2_2 + c3_2 * a1_2) ==\
    \ 0 {\n   |                                             ^^^^ help: a local variable\
    \ with a similar name exists: `b2_2`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b > c) && (a + c > b) && (b + c > a)\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp37nouv9o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut flag = if b == c && a == b {\n        true\n    } else {\n  \
    \      let deg = if b > c && a > b { \n            (b - c).mod_int((a - b).mod_int((b\
    \ - a)))\n        } else { \n            (b - a).mod_int((a - b).mod_int((c -\
    \ b)))\n        };\n        let mut flag = deg == 0;\n        if deg > 180 {\n\
    \            flag = !flag;\n        };\n        flag\n    };\n    flag\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmpckslwfrw.rs:13:45\n\
    \   |\n13 |             (b - c).mod_int((a - b).mod_int((b - a)))\n   |      \
    \                                       ^     ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n13 -             (b - c).mod_int((a\
    \ - b).mod_int((b - a)))\n13 +             (b - c).mod_int((a - b).mod_int(b -\
    \ a))\n   | \n\nwarning: unnecessary parentheses around method argument\n  -->\
    \ /tmp/tmpckslwfrw.rs:15:45\n   |\n15 |             (b - a).mod_int((a - b).mod_int((c\
    \ - b)))\n   |                                             ^     ^\n   |\nhelp:\
    \ remove these parentheses\n   |\n15 -             (b - a).mod_int((a - b).mod_int((c\
    \ - b)))\n15 +             (b - a).mod_int((a - b).mod_int(c - b))\n   | \n\n\
    error[E0599]: no method named `mod_int` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpckslwfrw.rs:13:21\n   |\n13 |             (b - c).mod_int((a\
    \ - b).mod_int((b - a)))\n   |                     ^^^^^^^ method not found in\
    \ `isize`\n\nerror[E0599]: no method named `mod_int` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpckslwfrw.rs:13:37\n   |\n13 |             (b\
    \ - c).mod_int((a - b).mod_int((b - a)))\n   |                               \
    \      ^^^^^^^ method not found in `isize`\n\nerror[E0599]: no method named `mod_int`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpckslwfrw.rs:15:21\n\
    \   |\n15 |             (b - a).mod_int((a - b).mod_int((c - b)))\n   |      \
    \               ^^^^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `mod_int` found for type `isize` in the current scope\n  --> /tmp/tmpckslwfrw.rs:15:37\n\
    \   |\n15 |             (b - a).mod_int((a - b).mod_int((c - b)))\n   |      \
    \                               ^^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let ab = std::f64::sqrt((a*a - b*b).recip());\n    let ac = std::f64::sqrt((c*c\
    \ - a*a).recip());\n    ab > ac\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sqrt` in module `std::f64`\n --> /tmp/tmpy4v8yess.rs:9:24\n\
    \  |\n9 |     let ab = std::f64::sqrt((a*a - b*b).recip());\n  |             \
    \           ^^^^ not found in `std::f64`\n\nerror[E0425]: cannot find function\
    \ `sqrt` in module `std::f64`\n  --> /tmp/tmpy4v8yess.rs:10:24\n   |\n10 |   \
    \  let ac = std::f64::sqrt((c*c - a*a).recip());\n   |                       \
    \ ^^^^ not found in `std::f64`\n\nerror[E0599]: no method named `recip` found\
    \ for type `isize` in the current scope\n --> /tmp/tmpy4v8yess.rs:9:41\n  |\n\
    9 |     let ab = std::f64::sqrt((a*a - b*b).recip());\n  |                   \
    \                      ^^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `recip` found for type `isize` in the current scope\n  --> /tmp/tmpy4v8yess.rs:10:41\n\
    \   |\n10 |     let ac = std::f64::sqrt((c*c - a*a).recip());\n   |          \
    \                               ^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 || a == b || a == c || b == c {\n     \
    \   return false;\n    }\n\n    let mut a_sign = 1;\n    let mut b_sign = 1;\n\
    \    let mut c_sign = 1;\n    if a < b {\n        a_sign = -1;\n    }\n    if\
    \ b < c {\n        b_sign = -1;\n    }\n    if c < a {\n        c_sign = -1;\n\
    \    }\n\n    let a_square = a * a;\n    let b_square = b * b;\n    let c_square\
    \ = c * c;\n\n    let mut c1_square = c * c_sign;\n    let mut c2_square = c *\
    \ c_sign;\n\n    if c1_square > b_square {\n        c1_square = b_square;\n  \
    \  }\n    if c2_square > a_square {\n        c2_square = a_square;\n    }\n\n\
    \    let c1_triangle_area = sqrt(c1_square);\n    let c2_triangle_area = sqrt(c2_square);\n\
    \    let c_triangle_area = c1_triangle_area * c2_triangle_area;\n\n    // Triangle\
    \ sides are parallel or co-linear.\n    if a_square == b_square == c_square {\n\
    \        return false\n    }\n\n    // Triangle sides are colinear.\n    if a\
    \ == b {\n        return a == c;\n    }\n\n    if a == c {\n        return b ==\
    \ c;\n    }\n\n    if b == c {\n        return a == b;\n    }\n\n    // Triangle\
    \ sides are co-linear.\n    let mut sum_area_diff = 0;\n    for (a1_sign, a1_square,\
    \ a2_square) in a_square_diff {\n        if a1_sign != a_sign {\n            continue;\n\
    \        }\n\n        if a1_square > c1_square {\n            return false;\n\
    \        }\n\n        if a2_square > c2_square {\n            return false;\n\
    \        }\n\n        if a1_square > a2_square {\n            sum_area_diff +=\
    \ a1_square;\n        }\n    }\n\n    if sum_area_diff < c_triangle_area {\n \
    \       return true;\n    }\n\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp3wa72lr0.rs:45:17\n\
    \   |\n45 |     if a_square == b_square == c_square {\n   |                 ^^\
    \          ^^\n   |\nhelp: split the comparison into two\n   |\n45 |     if a_square\
    \ == b_square && b_square == c_square {\n   |                             +++++++++++\n\
    \nerror[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmp3wa72lr0.rs:40:28\n\
    \   |\n40 |     let c1_triangle_area = sqrt(c1_square);\n   |                \
    \            ^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `sqrt` in this scope\n  --> /tmp/tmp3wa72lr0.rs:41:28\n   |\n41 |     let c2_triangle_area\
    \ = sqrt(c2_square);\n   |                            ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `a_square_diff` in this scope\n  --> /tmp/tmp3wa72lr0.rs:64:44\n\
    \   |\n64 |     for (a1_sign, a1_square, a2_square) in a_square_diff {\n   | \
    \                                           ^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3wa72lr0.rs:45:32\n   |\n45 |\
    \     if a_square == b_square == c_square {\n   |                            \
    \    ^^^^^^^^ expected `bool`, found `isize`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut sum = 0;\n    let mut denom = 0;\n    while a > 1 && b > 1 &&\
    \ c > 1 {\n        sum += a;\n        sum += b;\n        sum += c;\n        a\
    \ -= 1;\n        b -= 1;\n        c -= 1;\n        denom = a + b + c;\n    }\n\
    \    if denom == 0 {\n        return false;\n    }\n    sum / denom < 1.0\n}\n\
    \nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvlt7hzh9.rs:23:19\n   |\n\
    23 |     sum / denom < 1.0\n   |                   ^^^ expected `isize`, found\
    \ floating-point number\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 { \n        return false;\n    }\n\n  \
    \  // a / b is the length of the hypotenuse.\n    // c / a is the length of the\
    \ adjacent side.\n    \n    let a = std::sqrt(a * a + b * b + c * c);\n    let\
    \ c = std::sqrt(c * c + a * a);\n    let b2 = b * b; // square of b\n    let a2\
    \ = a * a;\n    let c2 = c * c;\n\n    let mut flag = false;\n\n    if a > b2\
    \ && b > c2 {\n        // a is greater than the sum of square of b and square\
    \ of c\n        // b is greater than the square of adjacent side.\n        flag\
    \ = true;\n    }\n    else {\n        // b is greater than square of adjacent\
    \ side and c is greater than the \n        // square of adjacent side.\n     \
    \   flag = false;\n    }\n    \n    flag\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sqrt` in crate `std`\n  --> /tmp/tmp9zjni0vr.rs:16:18\n\
    \   |\n16 |     let a = std::sqrt(a * a + b * b + c * c);\n   |              \
    \    ^^^^ not found in `std`\n\nerror[E0425]: cannot find function `sqrt` in crate\
    \ `std`\n  --> /tmp/tmp9zjni0vr.rs:17:18\n   |\n17 |     let c = std::sqrt(c *\
    \ c + a * a);\n   |                  ^^^^ not found in `std`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        if a < c {\n            if b < c {\n            \
    \    true\n            } else {\n                false\n            }\n      \
    \  } else {\n            false\n        }\n    } else {\n        if b < c {\n\
    \            true\n        } else {\n            false\n        }\n    }\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpaf98z1sh.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    \n    let mut left_triangle_length = 0;\n    let\
    \ mut right_triangle_length = 0;\n    \n    left_triangle_length += a;\n    left_triangle_length\
    \ += b;\n    left_triangle_length += c;\n    \n    right_triangle_length += a;\n\
    \    right_triangle_length += b;\n    right_triangle_length += c;\n    \n    if\
    \ left_triangle_length > right_triangle_length {\n        true\n    } else {\n\
    \        false\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0573]: expected type, found local variable `a`\n --> /tmp/tmp74qh_yvq.rs:9:30\n\
    \  |\n9 |     let mut a = a < 0 ? -a : a;\n  |                              ^\
    \ expecting a type here because of type ascription\n\nerror[E0573]: expected type,\
    \ found local variable `b`\n  --> /tmp/tmp74qh_yvq.rs:10:30\n   |\n10 |     let\
    \ mut b = b < 0 ? -b : b;\n   |                              ^ expecting a type\
    \ here because of type ascription\n\nerror[E0573]: expected type, found local\
    \ variable `c`\n  --> /tmp/tmp74qh_yvq.rs:11:30\n   |\n11 |     let mut c = c\
    \ < 0 ? -c : c;\n   |                              ^ expecting a type here because\
    \ of type ascription\n\nerror[E0277]: the `?` operator can only be applied to\
    \ values that implement `Try`\n --> /tmp/tmp74qh_yvq.rs:9:21\n  |\n9 |     let\
    \ mut a = a < 0 ? -a : a;\n  |                     ^^^ the `?` operator cannot\
    \ be applied to type `{integer}`\n  |\n  = help: the trait `Try` is not implemented\
    \ for `{integer}`\n\nerror[E0277]: the `?` operator can only be used in a function\
    \ that returns `Result` or `Option` (or another type that implements `FromResidual`)\n\
    \  --> /tmp/tmp74qh_yvq.rs:9:23\n   |\n8  | / fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n9  | |     let mut a = a < 0 ? -a : a;\n   |\
    \ |                       ^ cannot use the `?` operator in a function that returns\
    \ `bool`\n10 | |     let mut b = b < 0 ? -b : b;\n11 | |     let mut c = c < 0\
    \ ? -c : c;\n...  |\n28 | |     }\n29 | | }\n   | |_- this function should return\
    \ `Result` or `Option` to accept `?`\n   |\n   = help: the trait `FromResidual<_>`\
    \ is not implemented for `bool`\n\nerror[E0277]: the `?` operator can only be\
    \ applied to values that implement `Try`\n  --> /tmp/tmp74qh_yvq.rs:10:21\n  \
    \ |\n10 |     let mut b = b < 0 ? -b : b;\n   |                     ^^^ the `?`\
    \ operator cannot be applied to type `{integer}`\n   |\n   = help: the trait `Try`\
    \ is not implemented for `{integer}`\n\nerror[E0277]: the `?` operator can only\
    \ be used in a function that returns `Result` or `Option` (or another type that\
    \ implements `FromResidual`)\n  --> /tmp/tmp74qh_"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) == (b + c)\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5ialf1op.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a < b && (c < a || c < b)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5j6zkrtv.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == b + c {\n        return true\n    }\n    if a == c {\n      \
    \  return true\n    }\n    if b == c {\n        return true\n    }\n    let mut\
    \ a: isize = (a + b + c) / 2;\n    let mut b: isize = (a + b + c) / 2;\n    let\
    \ mut c: isize = (a + b + c) / 2;\n\n    if b > a && b > c {\n        a = b;\n\
    \        b = c;\n        c = a;\n    }\n\n    if c > a && c > b {\n        a =\
    \ c;\n        b = c;\n        c = a;\n    }\n    \n    if a * b > c * c {\n  \
    \      return true;\n    } else {\n        return false;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxexnthkx.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (a + b + c) == 180\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6t8sfmqu.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\tif  (a + b > c && c > a && a + c > b && b > a){\n\t\treturn true;\n\t}else{\n\
    \t\treturn false;\n\t}\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp60vffauc.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a_neg = a - b;\n    let mut b_neg = b - c;\n    let mut c_neg\
    \ = c - a;\n    \n    let is_negative = a_neg < b_neg && b_neg < c_neg;\n\n  \
    \  if is_negative {\n        return true;\n    }\n    else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprb2qoztn.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  a > b && b > c && c > a && a * a + b * b + c * c <= 1000\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3flrpepk.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if b - a <= 0 || c - b <= 0 || b - c <= 0 {\n        return false\n \
    \   }\n\n    // Formula: a^2 + b^2 + c^2 = 2*a * b\n    let sqrt_a = sqrt(a);\n\
    \    let sqrt_b = sqrt(b);\n    let sqrt_c = sqrt(c);\n\n    sqrt_a * sqrt_b ==\
    \ sqrt_c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmppl44ouc7.rs:14:18\n\
    \   |\n14 |     let sqrt_a = sqrt(a);\n   |                  ^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `sqrt` in this scope\n  -->\
    \ /tmp/tmppl44ouc7.rs:15:18\n   |\n15 |     let sqrt_b = sqrt(b);\n   |      \
    \            ^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `sqrt` in this scope\n  --> /tmp/tmppl44ouc7.rs:16:18\n   |\n16 |     let sqrt_c\
    \ = sqrt(c);\n   |                  ^^^^ not found in this scope\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // Check base cases\n    if b == c && a == c {\n        return true;\n\
    \    }\n    if a == 0 || b == 0 || c == 0 || a + b + c == 0 {\n        return\
    \ false;\n    }\n    // Find the smallest and largest of the three sides\n   \
    \ let smallest_side = if b < c { b } else { c };\n    let biggest_side = if b\
    \ > c { b } else { c };\n    // Check if the two sides equal\n    if smallest_side\
    \ != biggest_side {\n        return false;\n    }\n    // Check if a is greater\
    \ than or equal to smallest side\n    if a >= smallest_side {\n        // Check\
    \ if b is greater than or equal to smallest side\n        if b >= smallest_side\
    \ {\n            // Check if c is greater than or equal to smallest side\n   \
    \         if c >= smallest_side {\n                // Check if a is greater than\
    \ or equal to smallest side\n                if a == b {\n                   \
    \ // Check if the other two sides are equal\n                    if c == biggest_side\
    \ {\n                        return true;\n                    }\n           \
    \         // Check if b is greater than or equal to smallest side\n          \
    \          if b == c {\n                        // Check if a is greater than\
    \ or equal to smallest side\n                        if a == c {\n           \
    \                 // If all are equal, return true\n                         \
    \   return true;\n                        }\n                    }\n         \
    \       }\n            }\n        }\n    }\n    // Check if a is greater than\
    \ or equal to smallest side\n    if a >= smallest_side {\n        // Check if\
    \ b is greater than or equal to smallest side\n        if b >= smallest_side {\n\
    \            // Check if c is greater than or equal to smallest side\n       \
    \     if c >= smallest_side {\n                // Check if a is greater than or\
    \ equal to smallest side\n                if a == b {\n                    //\
    \ Check if the other two sides are equal\n                    if c == biggest_side\
    \ {\n                        return true;\n                    }\n           \
    \         // Check if b is greater than or equal to smallest side\n          \
    \          if b == c {\n                        // Check if a is greater than\
    \ or equal to smallest side\n                        if a == c {\n           \
    \                 // If all are equal, return true\n                         \
    \   return true;\n                        }\n                    }\n         \
    \       }\n            }\n        }\n    }\n    // Check if a is greater than\
    \ or equal to smallest side\n    if a >= smallest_side {\n        // Check if\
    \ b is greater than or equal to smallest side\n        if b >= smallest_side {\n\
    \            // Check if c is greater than or equal to smallest side\n       \
    \     if c >= smallest_side {\n                // Check if a is greater than or\
    \ equal to smallest side\n                if a == b {\n                    //\
    \ Check if the other two sides are equal\n                    if c == biggest_side\
    \ {\n                        return true;\n                    }\n           \
    \         // Check if b is greater than or equal to smallest side\n          \
    \          if b == c {\n                        // Check if a is greater than\
    \ or equal to smallest side\n                        if a == c {\n           \
    \                 // If \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp06gvsjgw.rs:103:3\n\
    \    |\n8   | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n72  |     if a >= smallest_side {\n    |                   \
    \        - unclosed delimiter\n73  |         // Check if b is greater than or\
    \ equal to smallest side\n74  |         if b >= smallest_side {\n    |       \
    \                        - unclosed delimiter\n75  |             // Check if c\
    \ is greater than or equal to smallest side\n76  |             if c >= smallest_side\
    \ {\n    |                                   - unclosed delimiter\n77  |     \
    \            // Check if a is greater than or equal to smallest side\n78  |  \
    \               if a == b {\n    |                           - unclosed delimiter\n\
    ...\n84  |                     if b == c {\n    |                            \
    \   - unclosed delimiter\n85  |                         // Check if a is greater\
    \ than or equal to smallest side\n86  |                         if a == c {\n\
    \    |                                   - this delimiter might not be properly\
    \ closed...\n87  |                             // If \n88  | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n103 | }\n    |   ^\n\n\
    error[E0308]: mismatched types\n   --> /tmp/tmp06gvsjgw.rs:84:31\n    |\n84  |\
    \                       if b == c {\n    |  _______________________________^\n\
    85  | |                         // Check if a is greater than or equal to smallest\
    \ side\n86  | |                         if a == c {\n87  | |                 \
    \            // If \n...   |\n102 | |     assert_eq!(candidate(2, 2, 10), false);\n\
    103 | | }\n    | |__^ expected `bool`, found `()`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c || a + c > b || b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmesqm1oa.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a >= b {\n        return false;\n    }\n    \n    if b >= c {\n  \
    \      return false;\n    }\n    \n    // Right angles\n    if a == 0 || b ==\
    \ 0 || c == 0 {\n        return true;\n    }\n    \n    // Third edge is 90 degree\n\
    \    if std::fabs(a + b + c) == 3 {\n        return true;\n    }\n    \n    //\
    \ Check if edge is right angle\n    if a + b == c {\n        return true;\n  \
    \  }\n    \n    // Edge is neither right angle\n    if std::fabs(a - b - c) <\
    \ 2 {\n        return true;\n    }\n    \n    // Edge is right angle\n    if std::fabs(a\
    \ - b - c) > 3 {\n        return false;\n    }\n    \n    // Edge is neither right\
    \ angle\n    if std::fabs(a - b - c) > 5 {\n        return false;\n    }\n   \
    \ \n    // Edge is right angle\n    if std::fabs(a - b - c) > 7 {\n        return\
    \ false;\n    }\n    \n    // Edge is neither right angle\n    if std::fabs(a\
    \ - b - c) > 9 {\n        return false;\n    }\n    \n    // Edge is right angle\n\
    \    if std::fabs(a - b - c) > 11 {\n        return false;\n    }\n    \n    //\
    \ Edge is neither right angle\n    if std::fabs(a - b - c) > 13 {\n        return\
    \ false;\n    }\n    \n    // Edge is right angle\n    if std::fabs(a - b - c)\
    \ > 15 {\n        return false;\n    }\n    \n    // Edge is neither right angle\n\
    \    if std::fabs(a - b - c) > 17 {\n        return false;\n    }\n    \n    //\
    \ Edge is right angle\n    if std::fabs(a - b - c) > 19 {\n        return false;\n\
    \    }\n    \n    // Edge is neither right angle\n    if std::fabs(a - b - c)\
    \ > 21 {\n        return false;\n    }\n    \n    // Edge is right angle\n   \
    \ if std::fabs(a - b - c) > 23 {\n        return false;\n    }\n    \n    // Edge\
    \ is neither right angle\n    if std::fabs(a - b - c) > 25 {\n        return false;\n\
    \    }\n    \n    // Edge is right angle\n    if std::fabs(a - b - c) > 27 {\n\
    \        return false;\n    }\n    \n    // Edge is neither right angle\n    if\
    \ std::fabs(a - b - c) > 29 {\n        return false;\n    }\n    \n    // Edge\
    \ is right angle\n    if std::fabs(a - b - c) > 31 {\n        return false;\n\
    \    }\n    \n    // Edge is neither right angle\n    if std::fabs(a - b - c)\
    \ > 33 {\n        return false;\n    }\n    \n    // Edge is right angle\n   \
    \ if std::\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected identifier, found `}`\n   --> /tmp/tmp51b8_sxx.rs:119:1\n\
    \    |\n119 | }\n    | ^ expected identifier\n\nerror[E0425]: cannot find function\
    \ `fabs` in crate `std`\n  --> /tmp/tmp51b8_sxx.rs:23:13\n   |\n23 |     if std::fabs(a\
    \ + b + c) == 3 {\n   |             ^^^^ not found in `std`\n\nerror[E0425]: cannot\
    \ find function `fabs` in crate `std`\n  --> /tmp/tmp51b8_sxx.rs:33:13\n   |\n\
    33 |     if std::fabs(a - b - c) < 2 {\n   |             ^^^^ not found in `std`\n\
    \nerror[E0425]: cannot find function `fabs` in crate `std`\n  --> /tmp/tmp51b8_sxx.rs:38:13\n\
    \   |\n38 |     if std::fabs(a - b - c) > 3 {\n   |             ^^^^ not found\
    \ in `std`\n\nerror[E0425]: cannot find function `fabs` in crate `std`\n  -->\
    \ /tmp/tmp51b8_sxx.rs:43:13\n   |\n43 |     if std::fabs(a - b - c) > 5 {\n  \
    \ |             ^^^^ not found in `std`\n\nerror[E0425]: cannot find function\
    \ `fabs` in crate `std`\n  --> /tmp/tmp51b8_sxx.rs:48:13\n   |\n48 |     if std::fabs(a\
    \ - b - c) > 7 {\n   |             ^^^^ not found in `std`\n\nerror[E0425]: cannot\
    \ find function `fabs` in crate `std`\n  --> /tmp/tmp51b8_sxx.rs:53:13\n   |\n\
    53 |     if std::fabs(a - b - c) > 9 {\n   |             ^^^^ not found in `std`\n\
    \nerror[E0425]: cannot find function `fabs` in crate `std`\n  --> /tmp/tmp51b8_sxx.rs:58:13\n\
    \   |\n58 |     if std::fabs(a - b - c) > 11 {\n   |             ^^^^ not found\
    \ in `std`\n\nerror[E0425]: cannot find function `fabs` in crate `std`\n  -->\
    \ /tmp/tmp51b8_sxx.rs:63:13\n   |\n63 |     if std::fabs(a - b - c) > 13 {\n \
    \  |             ^^^^ not found in `std`\n\nerror[E0425]: cannot find function\
    \ `fabs` in crate `std`\n  --> /tmp/tmp51b8_sxx.rs:68:13\n   |\n68 |     if std::fabs(a\
    \ - b - c) > 15 {\n   |             ^^^^ not found in `std`\n\nerror[E0425]: cannot\
    \ find function `fabs` in crate `std`\n  --> /tmp/tmp51b8_sxx.rs:73:13\n   |\n\
    73 |     if std::fabs(a - b - c) > 17 {\n   |             ^^^^ not found in `std`\n\
    \nerror[E0425]: cannot find function `fabs` in crate `std`\n  --> /tmp/tmp51b8_sxx.rs:78:13\n\
    \   |\n78 |     if std::fabs(a - b - c) > 19 {\n   |             ^^^^ not found\
    \ in `std`\n\nerr"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a < b && (b < c || (b == c && a % 2 != 0))\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2svxhdd8.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    match (a, b, c) {\n        (1, b, c) => a == b + c,\n        (a, _, _)\
    \ => a == b,\n        (_, _, 1) => a == b,\n        _ => false,\n    }\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpoak78e30.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let d = b * b - 4 * a * c;\n    if d < 0 {\n        return false;\n \
    \   }\n    let mut root = (-b + sqrt(d)) / (2 * a);\n    if root < 0 {\n     \
    \   root = 0;\n    }\n    d < 0 || root\n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmpeyazw6y9.rs:13:26\n\
    \   |\n13 |     let mut root = (-b + sqrt(d)) / (2 * a);\n   |               \
    \           ^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpeyazw6y9.rs:17:14\n   |\n17 |     d < 0 || root\n   |          \
    \    ^^^^ expected `bool`, found `isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > 0 && b > 0 && c > 0 &&\n    (a + b > c ||\n     b + c > a ||\n  \
    \   a + c > b )\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpn36xy7mk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > b && (a - b + c) / std::f32::consts::E * std::f32::consts::E < b\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot divide `isize` by `f32`\n --> /tmp/tmplgr9moih.rs:9:26\n\
    \  |\n9 |     a > b && (a - b + c) / std::f32::consts::E * std::f32::consts::E\
    \ < b\n  |                          ^ no implementation for `isize / f32`\n  |\n\
    \  = help: the trait `Div<f32>` is not implemented for `isize`\n  = help: the\
    \ following other types implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n\
    \            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n    \
    \        <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n          \
    \  <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize\
    \ as Div<isize>>\n          and 54 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a > 0 && b > 0 && c > 0 && (a + b > c || (a + c) > b || (b + c) > a)\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpytj2tdrm.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let delta: isize = b - a;\n    let theta: isize = ::std::f64::consts::PI\
    \ * (c / 2.0) - (a / 2.0);\n    delta == delta && ::std::f64::consts::fabs(theta\
    \ / delta) < 1.0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `fabs` in module `std::f64::consts`\n\
    \  --> /tmp/tmp6na5ojwn.rs:11:43\n   |\n11 |     delta == delta && ::std::f64::consts::fabs(theta\
    \ / delta) < 1.0\n   |                                           ^^^^ not found\
    \ in `std::f64::consts`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmp6na5ojwn.rs:10:52\n   |\n10 |     let theta: isize = ::std::f64::consts::PI\
    \ * (c / 2.0) - (a / 2.0);\n   |                                             \
    \       ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Div<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmp6na5ojwn.rs:10:64\n   |\n10 |     let theta:\
    \ isize = ::std::f64::consts::PI * (c / 2.0) - (a / 2.0);\n   |              \
    \                                                  ^ no implementation for `isize\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - a) * (c - a) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkghza1qz.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpg1s463h_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b-a)*(c-a) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3n_w4ibv.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  (b - a).sqrt() < 2.0 * std::f64::consts::PI\n    && (c < b + a || c > b\
    \ + a || b > a + a)\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp4_3plkvh.rs:9:11\n  |\n9 |   (b - a).sqrt() < 2.0 * std::f64::consts::PI\n\
    \  |           ^^^^ method not found in `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let ab = a - b;\n    let bc = b - c;\n    let cb = c - b;\n    let det\
    \ = ab * cb - bc * ab;\n\n    // Check that ab, det, and bc are all positive.\n\
    \    if ab < 0 || det < 0 || bc < 0 {\n        return false;\n    }\n\n    //\
    \ Check that det is not equal to zero.\n    if det != 0 {\n        return true;\n\
    \    }\n\n    // Otherwise, check that bc is equal to zero.\n    return bc ==\
    \ 0;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0hs5p_v1.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a >= b {\n        return false;\n    }\n    \n    if b >= c {\n  \
    \      return true;\n    }\n    \n    \n    if a == b {\n        if a == c {\n\
    \            return true;\n        }\n        return false;\n    }\n    \n   \
    \ let mut a_b_distance: isize = (a + b) - (b + c);\n    let mut b_c_distance:\
    \ isize = (b + c) - (a + c);\n    let mut a_c_distance: isize = (a + c) - (a +\
    \ b);\n    if a_b_distance < b_c_distance {\n        a_c_distance = b_c_distance;\n\
    \        a_b_distance = a_b_distance;\n    }\n    if a_c_distance < a_b_distance\
    \ {\n        return false;\n    }\n    \n    \n    let mut smallest_divisor: isize\
    \ = (b * b) - (4 * (a + c));\n    \n    if smallest_divisor == 0 {\n        return\
    \ false;\n    }\n    \n    let mut divisors: Vec<isize> = vec![smallest_divisor\
    \ / 2, smallest_divisor / 4, smallest_divisor];\n    let mut temp_divisor: isize\
    \ = 0;\n    \n    for i in divisors.iter().rev() {\n        temp_divisor = i;\n\
    \        if (a_b_distance % i == 0 && b_c_distance % i == 0 && a_c_distance %\
    \ i == 0) {\n            return true;\n        }\n        \n        if temp_divisor\
    \ != 0 {\n            smallest_divisor = temp_divisor;\n        }\n    }\n   \
    \ \n    \n    return false;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpaw3bmpla.rs:48:12\n\
    \   |\n48 |         if (a_b_distance % i == 0 && b_c_distance % i == 0 && a_c_distance\
    \ % i == 0) {\n   |            ^                                             \
    \                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by\
    \ default\nhelp: remove these parentheses\n   |\n48 -         if (a_b_distance\
    \ % i == 0 && b_c_distance % i == 0 && a_c_distance % i == 0) {\n48 +        \
    \ if a_b_distance % i == 0 && b_c_distance % i == 0 && a_c_distance % i == 0 {\n\
    \   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaw3bmpla.rs:47:24\n  \
    \ |\n44 |     let mut temp_divisor: isize = 0;\n   |                         \
    \  ----- expected due to this type\n...\n47 |         temp_divisor = i;\n   |\
    \                        ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n47 |         temp_divisor = *i;\n   |      \
    \                  +\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut is_right_angle = false;\n    if a == b {\n        if c == a ||\
    \ c == b {\n            is_right_angle = true;\n        } else {\n           \
    \ is_right_angle = false;\n        }\n    } else if a == c {\n        if b ==\
    \ c || b == a {\n            is_right_angle = true;\n        } else {\n      \
    \      is_right_angle = false;\n        }\n    } else {\n        if b == c {\n\
    \            is_right_angle = true;\n        } else {\n            is_right_angle\
    \ = false;\n        }\n    }\n    return is_right_angle;\n}\n\nfn main() {\n \
    \   let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkai7o1u_.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    abs(a - b) > abs(b - c) || \n        abs(a - b) > abs(c - a)\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `abs` in this scope\n --> /tmp/tmp5fb_kn80.rs:9:5\n\
    \  |\n9 |     abs(a - b) > abs(b - c) || \n  |     ^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `abs` in this scope\n --> /tmp/tmp5fb_kn80.rs:9:18\n\
    \  |\n9 |     abs(a - b) > abs(b - c) || \n  |                  ^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `abs` in this scope\n  -->\
    \ /tmp/tmp5fb_kn80.rs:10:9\n   |\n10 |         abs(a - b) > abs(c - a)\n   | \
    \        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `abs`\
    \ in this scope\n  --> /tmp/tmp5fb_kn80.rs:10:22\n   |\n10 |         abs(a - b)\
    \ > abs(c - a)\n   |                      ^^^ not found in this scope\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // If any two sides are equal, it's a right angle triangle.\n    if a\
    \ == b {\n        return true\n    }\n    \n    // If any two sides are equal,\
    \ it's a right angle triangle.\n    if a == c {\n        return true\n    }\n\
    \    \n    // If any two sides are equal, it's a right angle triangle.\n    if\
    \ b == c {\n        return true\n    }\n    \n    // If any two sides are equal,\
    \ it's a right angle triangle.\n    if a == 0 || b == 0 || c == 0 {\n        return\
    \ false\n    }\n    \n    // If two angles are either 0 or 180 degrees, it's a\
    \ right angle triangle.\n    if a == 0 || b == 0 || c == 180 {\n        return\
    \ true\n    }\n    \n    // Otherwise, they can be angles in between 90 and 270\
    \ degrees.\n    let delta = (b - a).sqrt() as f32 / c;\n    let delta2 = (b -\
    \ c).sqrt() as f32 / a;\n    if delta < delta2 {\n        return true;\n    }\n\
    \    \n    // Otherwise, they are angles between 270 and 360 degrees.\n    if\
    \ delta > delta2 {\n        return false;\n    }\n    \n    // Otherwise, they\
    \ are angles between 90 and 180 degrees.\n    return right_angle_triangle(a, c,\
    \ b);\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpn99bswdw.rs:35:25\n   |\n35 |     let delta = (b - a).sqrt()\
    \ as f32 / c;\n   |                         ^^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `sqrt` found for type `isize` in the current scope\n\
    \  --> /tmp/tmpn99bswdw.rs:36:26\n   |\n36 |     let delta2 = (b - c).sqrt() as\
    \ f32 / a;\n   |                          ^^^^ method not found in `isize`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || c + b > a || a + c > b {\n        return false;\n   \
    \ }\n    else if b + c > a || c + a > b {\n        return false;\n    }\n    else\
    \ if a + c > b {\n        return false;\n    }\n    else if b + a > c {\n    \
    \    return false;\n    }\n    else {\n        return true;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprnj1fqa7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // Triangle is right-angle if a, b, c are equal.\n    a == b && (c ==\
    \ a || c == b) || (c == a && b == b) // Equilateral\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpilc1h53r.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsn87b4ht.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        if b < c {\n            if a < c {\n            \
    \    // triangle is right angle\n                true\n            } else {\n\
    \                // triangle is 90 degree\n                false\n           \
    \ }\n        } else {\n            // b is less than c so it doesn't form a right\
    \ angle\n            false\n        }\n    } else {\n        // a is less than\
    \ b so it doesn't form a right angle\n        false\n    }\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp54xs5zi1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n\tif a > b + c {\n\t\ta -= c;\n\t} else if a < b + c {\n\t\tb -= c;\n\t}\n\
    \t\n\ta > b + c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmp__ntodci.rs:10:3\n\
    \   |\n8  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                         - help: consider making this binding mutable: `mut\
    \ a`\n9  |     if a > b + c {\n10 |         a -= c;\n   |         ^^^^^^ cannot\
    \ assign to immutable argument\n\nerror[E0384]: cannot assign to immutable argument\
    \ `b`\n  --> /tmp/tmp__ntodci.rs:12:3\n   |\n8  | fn right_angle_triangle(a: isize,\
    \ b: isize, c: isize) -> bool {\n   |                                   - help:\
    \ consider making this binding mutable: `mut b`\n...\n12 |         b -= c;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let a = a - b;\n    let b = b - c;\n    let c = c - a;\n    a * b > 0\
    \ && c * b > a\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfqqxlxh8.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3av957rx.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a + c;\n    let mut b = a + b;\n    let mut c = b + a;\n\
    \    a = b + c;\n    b = c + a;\n    c = a + b;\n    (b - a) == (c-a)\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpw1q_06hw.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  if a < b {\n    if b < c {\n      b < a || c < a\n    } else {\n      c\
    \ < a || a < c\n    }\n  } else {\n    a < c {\n      a < b || b < c\n    } else\
    \ {\n      b < a || a < b\n    }\n  }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `,` or `}`, found `<`\n  --> /tmp/tmpy7yirird.rs:17:9\n\
    \   |\n16 |     a < c {\n   |         - while parsing this struct\n17 |      \
    \ a < b || b < c\n   |         ^ expected one of `,` or `}`\n\nerror: expected\
    \ one of `.`, `;`, `?`, `}`, or an operator, found keyword `else`\n  --> /tmp/tmpy7yirird.rs:18:7\n\
    \   |\n18 |     } else {\n   |       ^^^^ expected one of `.`, `;`, `?`, `}`,\
    \ or an operator\n\nerror: aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut ans = false;\n    if a + b > c {\n        ans = true;\n    }\
    \ else {\n        let mut ans = false;\n        for i in 0..(b - a).rev() {\n\
    \            if i == 0 {\n                continue;\n            }\n         \
    \   if ((a + i) * c - (b - i) * b) != 0 {\n                ans = true;\n     \
    \           break;\n            }\n        }\n    }\n    ans\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: `isize` is not an iterator\n  --> /tmp/tmppnnebio2.rs:14:29\n\
    \   |\n14 |         for i in 0..(b - a).rev() {\n   |                        \
    \     ^^^ `isize` is not an iterator\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `isize: Iterator`\n           which is required\
    \ by `&mut isize: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b + c ? a - b + c : b - c + a;\n    let mut b = b < a\
    \ + c ? a - b + c : b - c + a;\n    let mut c = c < a + b ? a - b + c : b - c\
    \ + a;\n    \n    a == b + c || a == c + b\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \ --> /tmp/tmpdvlz7bo7.rs:9:29\n  |\n9 |     let mut a = a < b + c ? a - b + c\
    \ : b - c + a;\n  |                             ^ expected one of `.`, `;`, `?`,\
    \ `else`, or an operator\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut result: bool = true;\n    for i in 0..(a as usize) {\n        if b != 0\
    \ {\n            if a != 0 && b != 0 && c != 0 && ((a + b + c) == (a + b + c -\
    \ a * b)) {\n                result = False;\n                break;\n       \
    \     }\n        }\n        if c != 0 {\n            if a != 0 && b != 0 && (a\
    \ != 0 && c == (a + b - b * a) / b) || (a == 0 && b != 0 && c == (a - b - a *\
    \ b) / b) {\n                result = False;\n                break;\n       \
    \     }\n        }\n        if b != 0 {\n            if a != 0 && (b != 0 && c\
    \ == (a - b - a * b) / b) || (a == 0 && b != 0 && c == (a - b - a * b) / b) {\n\
    \                result = False;\n                break;\n            }\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `False` in this scope\n  --> /tmp/tmp5303rqjs.rs:16:26\n\
    \   |\n16 |                 result = False;\n   |                          ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `False` in this scope\n\
    \  --> /tmp/tmp5303rqjs.rs:22:26\n   |\n22 |                 result = False;\n\
    \   |                          ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `False` in this scope\n  --> /tmp/tmp5303rqjs.rs:28:26\n \
    \  |\n28 |                 result = False;\n   |                          ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpn5ejr93_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n  a > b\n    || b > c\n    || c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpow11a3qw.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && (a + c) > b && (b + c) > a && (a + b + c) > 0\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwbr3s59_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    \n    if a + b > c {\n        return false;\n    }\n    if b + c > a\
    \ {\n        return false;\n    }\n    if a + c > b {\n        return false;\n\
    \    }\n    \n    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5som11sy.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c {\n        false\n    }\n    if a + c > b {\n        true\n\
    \    }\n    if b + c > a {\n        false\n    }\n    \n    false\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi02_bs3j.rs:10:9\n   |\n\
    9  | /     if a + b > c {\n10 | |         false\n   | |         ^^^^^ expected\
    \ `()`, found `bool`\n11 | |     }\n   | |_____- expected this to be `()`\n  \
    \ |\nhelp: you might have meant to return this value\n   |\n10 |         return\
    \ false;\n   |         ++++++      +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpi02_bs3j.rs:13:9\n   |\n12 | /     if a + c > b {\n13 | |         true\n\
    \   | |         ^^^^ expected `()`, found `bool`\n14 | |     }\n   | |_____- expected\
    \ this to be `()`\n   |\nhelp: you might have meant to return this value\n   |\n\
    13 |         return true;\n   |         ++++++     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpi02_bs3j.rs:16:9\n   |\n15 | /     if b + c > a {\n16 |\
    \ |         false\n   | |         ^^^^^ expected `()`, found `bool`\n17 | |  \
    \   }\n   | |_____- expected this to be `()`\n   |\nhelp: you might have meant\
    \ to return this value\n   |\n16 |         return false;\n   |         ++++++\
    \      +\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    \n    let mut angle_to_right = a + b + c + 1;\n    let mut angle_to_right2\
    \ = angle_to_right / 2;\n    if angle_to_right2 == 0 {\n        return true;\n\
    \    }\n    \n    while angle_to_right > angle_to_right2 {\n        angle_to_right\
    \ -= angle_to_right2;\n        angle_to_right2 = angle_to_right / 2;\n    }\n\
    \    \n    while angle_to_right < angle_to_right2 {\n        angle_to_right +=\
    \ angle_to_right2;\n        angle_to_right2 = angle_to_right / 2;\n    }\n   \
    \ \n    angle_to_right == angle_to_right2\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if b - a > c - b {\n        return false;\n    }\n    if c - a > b -\
    \ c {\n        return false;\n    }\n    if a - b > c - a {\n        return false;\n\
    \    }\n    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpknabo9fr.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // Check if three sides form a right-angled triangle or if all sides\
    \ are equal\n    // or if two sides are equal.\n    let mut right_angle = a *\
    \ b * c > 0;\n    if a == b {\n        right_angle |= c == a;\n    } else if a\
    \ == c {\n        right_angle |= b == c;\n    } else if b == c {\n        right_angle\
    \ |= a == b;\n    } else {\n        // Two sides are different\n        // Check\
    \ which of the three sides is greater\n        match a > b {\n            true\
    \ => right_angle = false, a = b, c = a,\n            false => a,\n        }\n\
    \        match a > c {\n            true => right_angle = false, a = c, b = a,\n\
    \            false => b,\n        }\n        match b > c {\n            true =>\
    \ right_angle = false, a = c, c = b,\n            false => c,\n        }\n   \
    \ }\n    right_angle\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "error: expected one of `=>`, `@`, `if`, or `|`, found `=`\n  --> /tmp/tmpl1uhzxjc.rs:22:44\n\
    \   |\n22 |             true => right_angle = false, a = b, c = a,\n   |     \
    \                                       ^\n   |                              \
    \              |\n   |                                            expected one\
    \ of `=>`, `@`, `if`, or `|`\n   |                                           \
    \ help: try using a fat arrow here: `=>`\n\nerror: expected one of `=>`, `@`,\
    \ `if`, or `|`, found `=`\n  --> /tmp/tmpl1uhzxjc.rs:22:51\n   |\n22 |       \
    \      true => right_angle = false, a = b, c = a,\n   |                      \
    \                             ^\n   |                                        \
    \           |\n   |                                                   expected\
    \ one of `=>`, `@`, `if`, or `|`\n   |                                       \
    \            help: try using a fat arrow here: `=>`\n\nerror: expected one of\
    \ `=>`, `@`, `if`, or `|`, found `=`\n  --> /tmp/tmpl1uhzxjc.rs:26:44\n   |\n\
    26 |             true => right_angle = false, a = c, b = a,\n   |            \
    \                                ^\n   |                                     \
    \       |\n   |                                            expected one of `=>`,\
    \ `@`, `if`, or `|`\n   |                                            help: try\
    \ using a fat arrow here: `=>`\n\nerror: expected one of `=>`, `@`, `if`, or `|`,\
    \ found `=`\n  --> /tmp/tmpl1uhzxjc.rs:26:51\n   |\n26 |             true => right_angle\
    \ = false, a = c, b = a,\n   |                                               \
    \    ^\n   |                                                   |\n   |       \
    \                                            expected one of `=>`, `@`, `if`,\
    \ or `|`\n   |                                                   help: try using\
    \ a fat arrow here: `=>`\n\nerror: expected one of `=>`, `@`, `if`, or `|`, found\
    \ `=`\n  --> /tmp/tmpl1uhzxjc.rs:30:44\n   |\n30 |             true => right_angle\
    \ = false, a = c, c = b,\n   |                                            ^\n\
    \   |                                            |\n   |         "
  exit_code: 1
  status: SyntaxError
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut b = b;\n    let mut c = c;\n    a -= 1;\n\
    \    b -= 1;\n    c -= 1;\n    if a + b > c {\n        a = c;\n        b = a +\
    \ b;\n        c = a - b;\n    } else {\n        a = b;\n        b = c;\n    }\n\
    \    if a + c > b {\n        a = b;\n        b = c;\n        c = a + b;\n    }\
    \ else {\n        a = c;\n        b = a;\n        c = a - b;\n    }\n    return\
    \ c == 0;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdx8vc4ox.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    // a < b\n    if b > a {\n        // b < c\n        if c > b {\n    \
    \        false\n        } else {\n            // b == c\n            if a == 0\
    \ {\n                true\n            } else {\n                // b != c\n \
    \               if a != 0 && b != 0 && c != 0 {\n                    if a + b\
    \ > c {\n                        true\n                    } else {\n        \
    \                false\n                    }\n                } else {\n    \
    \                false\n                }\n            }\n        }\n    } else\
    \ {\n        // a < c\n        if c > a {\n            false\n        } else {\n\
    \            // a == c\n            if b == 0 {\n                true\n      \
    \      } else {\n                // a != c\n                if a != 0 && b !=\
    \ 0 && c != 0 {\n                    if a + b > c {\n                        true\n\
    \                    } else {\n                        false\n               \
    \     }\n                } else {\n                    false\n               \
    \ }\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4dhydtzf.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
